Imports dylan.NET.Tokenizer.AST.Tokens.Chars
Imports dylan.NET.Tokenizer.AST.Tokens.Attributes
Imports dylan.NET.Tokenizer.AST.Tokens.Literals
Imports dylan.NET.Tokenizer.AST.Tokens.TypeToks
Imports dylan.NET.Tokenizer.AST.Tokens.Ops
Imports dylan.NET.Tokenizer.AST.Stmts
Imports dylan.NET.Tokenizer.AST.Exprs
Imports dylan.NET.Tokenizer.AST.Tokens
Imports dylan.NET.Tokenizer.AST
Imports dylan.NET.Tokenizer.Lexer
Imports dylan.NET.Utils
Imports dylan.NET
Imports System.Linq
Imports System.Collections.Generic
Imports System.Collections
Imports Microsoft.VisualBasic
Imports System.Xml
Imports System.Xml.Linq
Imports System.Data

Imports System
Imports System.Diagnostics
Imports System.Diagnostics.SymbolStore
Imports System.Reflection
Imports System.Resources
Imports System.Reflection.Emit
Module Module1

Public asmName As AssemblyName
Public asm As AssemblyBuilder
Public Typ As Type
Public Typ02 As Type
Public Typ03 As Type
Public Typ04 As Type
Public impstr(-1) As String
Public impasm(-1) As Assembly
Public interfacebool As Boolean
Public mdl As ModuleBuilder
Public resw As IResourceWriter
Public resobj As Object

Dim doc As ISymbolDocumentWriter

Sub addstr(ByVal str As String)
ReDim Preserve impstr(UBound(impstr) + 1)
impstr(UBound(impstr)) = str
End Sub

Sub addasm(ByVal asm As Assembly)
ReDim Preserve impasm(UBound(impasm) + 1)
impasm(UBound(impasm)) = asm
End Sub

Function MakeGetType(ByVal TypeName As String) As Type
Dim attachbrackets As Boolean = False
If TypeName Like "*[[]*]" Then
Dim split As String() = TypeName.Split(New [Char] () {"[","]"})
TypeName = split(0)
attachbrackets = True
End If
Dim ind As Integer = -1
Dim i As Integer = -1
Dim len As Integer = impstr.Length - 1
Do Until i = len
i = i + 1
If TypeName Like impstr(i) & "*" Then
ind = i
End If
Loop
If ind <> -1 Then
Dim assem As Assembly = impasm(ind)
If attachbrackets = True Then
TypeName = TypeName & "[]"
End If
MakeGetType = assem.GetType(TypeName)
Else
If attachbrackets = True Then
TypeName = TypeName & "[]"
End If
MakeGetType = Type.GetType(TypeName)
End If
Return MakeGetType
End Function

Dim doc2 As ISymbolDocumentWriter

Sub ParserFlags()
Dim ParserFlags As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.Parser" & "." & "ParserFlags", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass Or TypeAttributes.BeforeFieldInit, GetType(System.Object))
Dim IfFlag As FieldBuilder = ParserFlags.DefineField("IfFlag", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static)
Dim CmtFlag As FieldBuilder = ParserFlags.DefineField("CmtFlag", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static)
Dim NoOptFlag As FieldBuilder = ParserFlags.DefineField("NoOptFlag", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static)
Dim NegFlag As FieldBuilder = ParserFlags.DefineField("NegFlag", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static)
Dim NotFlag As FieldBuilder = ParserFlags.DefineField("NotFlag", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static)
Dim ConvFlag As FieldBuilder = ParserFlags.DefineField("ConvFlag", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static)
Dim ArrFlag As FieldBuilder = ParserFlags.DefineField("ArrFlag", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static)
Dim ArrSlot As FieldBuilder = ParserFlags.DefineField("ArrSlot", GetType(Expr), FieldAttributes.Public Or FieldAttributes.Static)
Dim RefFlag As FieldBuilder = ParserFlags.DefineField("RefFlag", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static)
Dim ValinrefFlag As FieldBuilder = ParserFlags.DefineField("ValinrefFlag", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static)
Dim ConvTyp As FieldBuilder = ParserFlags.DefineField("ConvTyp", GetType(TypeTok), FieldAttributes.Public Or FieldAttributes.Static)
Dim OrdOp As FieldBuilder = ParserFlags.DefineField("OrdOp", GetType(System.String), FieldAttributes.Public Or FieldAttributes.Static)
Dim isChanged As FieldBuilder = ParserFlags.DefineField("isChanged", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static)
Dim DurConvFlag As FieldBuilder = ParserFlags.DefineField("DurConvFlag", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static)
Dim IdentFlag As FieldBuilder = ParserFlags.DefineField("IdentFlag", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static)
Dim ctor0 As ConstructorBuilder = ParserFlags.DefineConstructor(MethodAttributes.Public Or MethodAttributes.Static,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
Dim ctor0param00 As ParameterBuilder = ctor0.DefineParameter(0, ParameterAttributes.RetVal, "")
ctor0IL.MarkSequencePoint(doc2, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, IfFlag)
ctor0IL.MarkSequencePoint(doc2, 21, 1, 21, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, CmtFlag)
ctor0IL.MarkSequencePoint(doc2, 22, 1, 22, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, NoOptFlag)
ctor0IL.MarkSequencePoint(doc2, 23, 1, 23, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, NegFlag)
ctor0IL.MarkSequencePoint(doc2, 24, 1, 24, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, NotFlag)
ctor0IL.MarkSequencePoint(doc2, 25, 1, 25, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, ConvFlag)
ctor0IL.MarkSequencePoint(doc2, 26, 1, 26, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, ArrFlag)
ctor0IL.MarkSequencePoint(doc2, 27, 1, 27, 100)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stsfld, ArrSlot)
ctor0IL.MarkSequencePoint(doc2, 28, 1, 28, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, RefFlag)
ctor0IL.MarkSequencePoint(doc2, 29, 1, 29, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, ValinrefFlag)
ctor0IL.MarkSequencePoint(doc2, 30, 1, 30, 100)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stsfld, ConvTyp)
ctor0IL.MarkSequencePoint(doc2, 31, 1, 31, 100)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stsfld, OrdOp)
ctor0IL.MarkSequencePoint(doc2, 32, 1, 32, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, isChanged)
ctor0IL.MarkSequencePoint(doc2, 33, 1, 33, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, DurConvFlag)
ctor0IL.MarkSequencePoint(doc2, 34, 1, 34, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, IdentFlag)
ctor0IL.MarkSequencePoint(doc2, 35, 1, 35, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim SetUnaryFalse As MethodBuilder = ParserFlags.DefineMethod("SetUnaryFalse", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim SetUnaryFalseIL As ILGenerator = SetUnaryFalse.GetILGenerator()
Dim SetUnaryFalseparam00 As ParameterBuilder = SetUnaryFalse.DefineParameter(0, ParameterAttributes.RetVal, "")
SetUnaryFalseIL.MarkSequencePoint(doc2, 38, 1, 38, 100)
SetUnaryFalseIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
SetUnaryFalseIL.Emit(OpCodes.Stsfld, NegFlag)
SetUnaryFalseIL.MarkSequencePoint(doc2, 39, 1, 39, 100)
SetUnaryFalseIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
SetUnaryFalseIL.Emit(OpCodes.Stsfld, NotFlag)
SetUnaryFalseIL.MarkSequencePoint(doc2, 40, 1, 40, 100)
SetUnaryFalseIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
SetUnaryFalseIL.Emit(OpCodes.Stsfld, ConvFlag)
SetUnaryFalseIL.MarkSequencePoint(doc2, 41, 1, 41, 100)
SetUnaryFalseIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
SetUnaryFalseIL.Emit(OpCodes.Stsfld, ArrFlag)
SetUnaryFalseIL.MarkSequencePoint(doc2, 42, 1, 42, 100)
SetUnaryFalseIL.Emit(OpCodes.Ldnull)
SetUnaryFalseIL.Emit(OpCodes.Stsfld, ArrSlot)
SetUnaryFalseIL.MarkSequencePoint(doc2, 43, 1, 43, 100)
SetUnaryFalseIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
SetUnaryFalseIL.Emit(OpCodes.Stsfld, RefFlag)
SetUnaryFalseIL.MarkSequencePoint(doc2, 44, 1, 44, 100)
SetUnaryFalseIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
SetUnaryFalseIL.Emit(OpCodes.Stsfld, ValinrefFlag)
SetUnaryFalseIL.MarkSequencePoint(doc2, 45, 1, 45, 100)
SetUnaryFalseIL.Emit(OpCodes.Ldnull)
SetUnaryFalseIL.Emit(OpCodes.Stsfld, ConvTyp)
SetUnaryFalseIL.MarkSequencePoint(doc2, 46, 1, 46, 100)
SetUnaryFalseIL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
SetUnaryFalseIL.Emit(OpCodes.Stsfld, OrdOp)
SetUnaryFalseIL.MarkSequencePoint(doc2, 47, 1, 47, 100)
SetUnaryFalseIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
SetUnaryFalseIL.Emit(OpCodes.Stsfld, isChanged)
SetUnaryFalseIL.MarkSequencePoint(doc2, 48, 1, 48, 100)
SetUnaryFalseIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
SetUnaryFalseIL.Emit(OpCodes.Stsfld, DurConvFlag)
SetUnaryFalseIL.MarkSequencePoint(doc2, 49, 1, 49, 100)
SetUnaryFalseIL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(Ident)
Dim UpdateIdent As MethodBuilder = ParserFlags.DefineMethod("UpdateIdent", MethodAttributes.Public Or MethodAttributes.Static, GetType(Ident), typ0)
Dim UpdateIdentIL As ILGenerator = UpdateIdent.GetILGenerator()
Dim UpdateIdentparam00 As ParameterBuilder = UpdateIdent.DefineParameter(0, ParameterAttributes.RetVal, "")
Dim UpdateIdentparam01 As ParameterBuilder = UpdateIdent.DefineParameter(1, ParameterAttributes.None, "id")
UpdateIdentIL.MarkSequencePoint(doc2, 52, 1, 52, 100)
UpdateIdentIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Ident)
UpdateIdentIL.Emit(OpCodes.Ldsfld, NegFlag)
Typ = NegFlag.FieldType
UpdateIdentIL.Emit(OpCodes.Stfld, GetType(Ident).GetField("DoNeg"))
UpdateIdentIL.MarkSequencePoint(doc2, 53, 1, 53, 100)
UpdateIdentIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Ident)
UpdateIdentIL.Emit(OpCodes.Ldsfld, NotFlag)
Typ = NotFlag.FieldType
UpdateIdentIL.Emit(OpCodes.Stfld, GetType(Ident).GetField("DoNot"))
UpdateIdentIL.MarkSequencePoint(doc2, 54, 1, 54, 100)
UpdateIdentIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Ident)
UpdateIdentIL.Emit(OpCodes.Ldsfld, ConvFlag)
Typ = ConvFlag.FieldType
UpdateIdentIL.Emit(OpCodes.Stfld, GetType(Ident).GetField("Conv"))
UpdateIdentIL.MarkSequencePoint(doc2, 55, 1, 55, 100)
UpdateIdentIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Ident)
UpdateIdentIL.Emit(OpCodes.Ldsfld, ArrFlag)
Typ = ArrFlag.FieldType
UpdateIdentIL.Emit(OpCodes.Stfld, GetType(Ident).GetField("IsArr"))
UpdateIdentIL.MarkSequencePoint(doc2, 56, 1, 56, 100)
UpdateIdentIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Ident)
UpdateIdentIL.Emit(OpCodes.Ldsfld, ArrSlot)
Typ = ArrSlot.FieldType
UpdateIdentIL.Emit(OpCodes.Stfld, GetType(Ident).GetField("ArrLoc"))
UpdateIdentIL.MarkSequencePoint(doc2, 57, 1, 57, 100)
UpdateIdentIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Ident)
UpdateIdentIL.Emit(OpCodes.Ldsfld, RefFlag)
Typ = RefFlag.FieldType
UpdateIdentIL.Emit(OpCodes.Stfld, GetType(Ident).GetField("IsRef"))
UpdateIdentIL.MarkSequencePoint(doc2, 58, 1, 58, 100)
UpdateIdentIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Ident)
UpdateIdentIL.Emit(OpCodes.Ldsfld, ValinrefFlag)
Typ = ValinrefFlag.FieldType
UpdateIdentIL.Emit(OpCodes.Stfld, GetType(Ident).GetField("IsValInRef"))
UpdateIdentIL.MarkSequencePoint(doc2, 59, 1, 59, 100)
UpdateIdentIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Ident)
UpdateIdentIL.Emit(OpCodes.Ldsfld, ConvTyp)
Typ = ConvTyp.FieldType
UpdateIdentIL.Emit(OpCodes.Stfld, GetType(Ident).GetField("TTok"))
UpdateIdentIL.MarkSequencePoint(doc2, 60, 1, 60, 100)
UpdateIdentIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Ident)
UpdateIdentIL.Emit(OpCodes.Ldsfld, OrdOp)
Typ = OrdOp.FieldType
UpdateIdentIL.Emit(OpCodes.Stfld, GetType(Ident).GetField("OrdOp"))
UpdateIdentIL.MarkSequencePoint(doc2, 61, 1, 61, 100)
UpdateIdentIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Ident)
UpdateIdentIL.MarkSequencePoint(doc2, 62, 1, 62, 100)
UpdateIdentIL.Emit(OpCodes.Ret)
Dim typ1(-1) As Type
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = GetType(CharLiteral)
Dim UpdateCharLit As MethodBuilder = ParserFlags.DefineMethod("UpdateCharLit", MethodAttributes.Public Or MethodAttributes.Static, GetType(CharLiteral), typ1)
Dim UpdateCharLitIL As ILGenerator = UpdateCharLit.GetILGenerator()
Dim UpdateCharLitparam00 As ParameterBuilder = UpdateCharLit.DefineParameter(0, ParameterAttributes.RetVal, "")
Dim UpdateCharLitparam01 As ParameterBuilder = UpdateCharLit.DefineParameter(1, ParameterAttributes.None, "id")
UpdateCharLitIL.MarkSequencePoint(doc2, 65, 1, 65, 100)
UpdateCharLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(CharLiteral)
UpdateCharLitIL.Emit(OpCodes.Ldsfld, ConvFlag)
Typ = ConvFlag.FieldType
UpdateCharLitIL.Emit(OpCodes.Stfld, GetType(CharLiteral).GetField("Conv"))
UpdateCharLitIL.MarkSequencePoint(doc2, 66, 1, 66, 100)
UpdateCharLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(CharLiteral)
UpdateCharLitIL.Emit(OpCodes.Ldsfld, ConvTyp)
Typ = ConvTyp.FieldType
UpdateCharLitIL.Emit(OpCodes.Stfld, GetType(CharLiteral).GetField("TTok"))
UpdateCharLitIL.MarkSequencePoint(doc2, 67, 1, 67, 100)
UpdateCharLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(CharLiteral)
UpdateCharLitIL.Emit(OpCodes.Ldsfld, OrdOp)
Typ = OrdOp.FieldType
UpdateCharLitIL.Emit(OpCodes.Stfld, GetType(CharLiteral).GetField("OrdOp"))
UpdateCharLitIL.MarkSequencePoint(doc2, 68, 1, 68, 100)
UpdateCharLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(CharLiteral)
UpdateCharLitIL.MarkSequencePoint(doc2, 69, 1, 69, 100)
UpdateCharLitIL.Emit(OpCodes.Ret)
Dim typ2(-1) As Type
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = GetType(StringLiteral)
Dim UpdateStringLit As MethodBuilder = ParserFlags.DefineMethod("UpdateStringLit", MethodAttributes.Public Or MethodAttributes.Static, GetType(StringLiteral), typ2)
Dim UpdateStringLitIL As ILGenerator = UpdateStringLit.GetILGenerator()
Dim UpdateStringLitparam00 As ParameterBuilder = UpdateStringLit.DefineParameter(0, ParameterAttributes.RetVal, "")
Dim UpdateStringLitparam01 As ParameterBuilder = UpdateStringLit.DefineParameter(1, ParameterAttributes.None, "id")
UpdateStringLitIL.MarkSequencePoint(doc2, 72, 1, 72, 100)
UpdateStringLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(StringLiteral)
UpdateStringLitIL.Emit(OpCodes.Ldsfld, ConvFlag)
Typ = ConvFlag.FieldType
UpdateStringLitIL.Emit(OpCodes.Stfld, GetType(StringLiteral).GetField("Conv"))
UpdateStringLitIL.MarkSequencePoint(doc2, 73, 1, 73, 100)
UpdateStringLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(StringLiteral)
UpdateStringLitIL.Emit(OpCodes.Ldsfld, ConvTyp)
Typ = ConvTyp.FieldType
UpdateStringLitIL.Emit(OpCodes.Stfld, GetType(StringLiteral).GetField("TTok"))
UpdateStringLitIL.MarkSequencePoint(doc2, 74, 1, 74, 100)
UpdateStringLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(StringLiteral)
UpdateStringLitIL.Emit(OpCodes.Ldsfld, OrdOp)
Typ = OrdOp.FieldType
UpdateStringLitIL.Emit(OpCodes.Stfld, GetType(StringLiteral).GetField("OrdOp"))
UpdateStringLitIL.MarkSequencePoint(doc2, 75, 1, 75, 100)
UpdateStringLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(StringLiteral)
UpdateStringLitIL.MarkSequencePoint(doc2, 76, 1, 76, 100)
UpdateStringLitIL.Emit(OpCodes.Ret)
Dim typ3(-1) As Type
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = GetType(BooleanLiteral)
Dim UpdateBoolLit As MethodBuilder = ParserFlags.DefineMethod("UpdateBoolLit", MethodAttributes.Public Or MethodAttributes.Static, GetType(BooleanLiteral), typ3)
Dim UpdateBoolLitIL As ILGenerator = UpdateBoolLit.GetILGenerator()
Dim UpdateBoolLitparam00 As ParameterBuilder = UpdateBoolLit.DefineParameter(0, ParameterAttributes.RetVal, "")
Dim UpdateBoolLitparam01 As ParameterBuilder = UpdateBoolLit.DefineParameter(1, ParameterAttributes.None, "id")
UpdateBoolLitIL.MarkSequencePoint(doc2, 79, 1, 79, 100)
UpdateBoolLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(BooleanLiteral)
UpdateBoolLitIL.Emit(OpCodes.Ldsfld, NotFlag)
Typ = NotFlag.FieldType
UpdateBoolLitIL.Emit(OpCodes.Stfld, GetType(BooleanLiteral).GetField("DoNot"))
UpdateBoolLitIL.MarkSequencePoint(doc2, 80, 1, 80, 100)
UpdateBoolLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(BooleanLiteral)
UpdateBoolLitIL.Emit(OpCodes.Ldsfld, ConvFlag)
Typ = ConvFlag.FieldType
UpdateBoolLitIL.Emit(OpCodes.Stfld, GetType(BooleanLiteral).GetField("Conv"))
UpdateBoolLitIL.MarkSequencePoint(doc2, 81, 1, 81, 100)
UpdateBoolLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(BooleanLiteral)
UpdateBoolLitIL.Emit(OpCodes.Ldsfld, ConvTyp)
Typ = ConvTyp.FieldType
UpdateBoolLitIL.Emit(OpCodes.Stfld, GetType(BooleanLiteral).GetField("TTok"))
UpdateBoolLitIL.MarkSequencePoint(doc2, 82, 1, 82, 100)
UpdateBoolLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(BooleanLiteral)
UpdateBoolLitIL.Emit(OpCodes.Ldsfld, OrdOp)
Typ = OrdOp.FieldType
UpdateBoolLitIL.Emit(OpCodes.Stfld, GetType(BooleanLiteral).GetField("OrdOp"))
UpdateBoolLitIL.MarkSequencePoint(doc2, 83, 1, 83, 100)
UpdateBoolLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(BooleanLiteral)
UpdateBoolLitIL.MarkSequencePoint(doc2, 84, 1, 84, 100)
UpdateBoolLitIL.Emit(OpCodes.Ret)
Dim typ4(-1) As Type
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = GetType(NumberLiteral)
Dim UpdateNumLit As MethodBuilder = ParserFlags.DefineMethod("UpdateNumLit", MethodAttributes.Public Or MethodAttributes.Static, GetType(NumberLiteral), typ4)
Dim UpdateNumLitIL As ILGenerator = UpdateNumLit.GetILGenerator()
Dim UpdateNumLitparam00 As ParameterBuilder = UpdateNumLit.DefineParameter(0, ParameterAttributes.RetVal, "")
Dim UpdateNumLitparam01 As ParameterBuilder = UpdateNumLit.DefineParameter(1, ParameterAttributes.None, "id")
UpdateNumLitIL.MarkSequencePoint(doc2, 87, 1, 87, 100)
UpdateNumLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(NumberLiteral)
UpdateNumLitIL.Emit(OpCodes.Ldsfld, NegFlag)
Typ = NegFlag.FieldType
UpdateNumLitIL.Emit(OpCodes.Stfld, GetType(NumberLiteral).GetField("DoNeg"))
UpdateNumLitIL.MarkSequencePoint(doc2, 88, 1, 88, 100)
UpdateNumLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(NumberLiteral)
UpdateNumLitIL.Emit(OpCodes.Ldsfld, NotFlag)
Typ = NotFlag.FieldType
UpdateNumLitIL.Emit(OpCodes.Stfld, GetType(NumberLiteral).GetField("DoNot"))
UpdateNumLitIL.MarkSequencePoint(doc2, 89, 1, 89, 100)
UpdateNumLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(NumberLiteral)
UpdateNumLitIL.Emit(OpCodes.Ldsfld, ConvFlag)
Typ = ConvFlag.FieldType
UpdateNumLitIL.Emit(OpCodes.Stfld, GetType(NumberLiteral).GetField("Conv"))
UpdateNumLitIL.MarkSequencePoint(doc2, 90, 1, 90, 100)
UpdateNumLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(NumberLiteral)
UpdateNumLitIL.Emit(OpCodes.Ldsfld, ConvTyp)
Typ = ConvTyp.FieldType
UpdateNumLitIL.Emit(OpCodes.Stfld, GetType(NumberLiteral).GetField("TTok"))
UpdateNumLitIL.MarkSequencePoint(doc2, 91, 1, 91, 100)
UpdateNumLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(NumberLiteral)
UpdateNumLitIL.Emit(OpCodes.Ldsfld, OrdOp)
Typ = OrdOp.FieldType
UpdateNumLitIL.Emit(OpCodes.Stfld, GetType(NumberLiteral).GetField("OrdOp"))
UpdateNumLitIL.MarkSequencePoint(doc2, 92, 1, 92, 100)
UpdateNumLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(NumberLiteral)
UpdateNumLitIL.MarkSequencePoint(doc2, 93, 1, 93, 100)
UpdateNumLitIL.Emit(OpCodes.Ret)
ParserFlags.CreateType()
End Sub


Dim doc3 As ISymbolDocumentWriter

Sub TokenOptimizer()
Dim TokenOptimizer As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.Parser" & "." & "TokenOptimizer", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(Token)
Dim Optimize As MethodBuilder = TokenOptimizer.DefineMethod("Optimize", MethodAttributes.Public, GetType(Token), typ0)
Dim OptimizeIL As ILGenerator = Optimize.GetILGenerator()
Dim Optimizeparam00 As ParameterBuilder = Optimize.DefineParameter(0, ParameterAttributes.RetVal, "")
Dim Optimizeparam01 As ParameterBuilder = Optimize.DefineParameter(1, ParameterAttributes.None, "tok")
OptimizeIL.MarkSequencePoint(doc3, 5, 1, 5, 100)
Dim locbldr0 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.Int32))
locbldr0.SetLocalSymInfo("comp")
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 6, 1, 6, 100)
Dim locbldr1 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.Boolean))
locbldr1.SetLocalSymInfo("compb")
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 7, 1, 7, 100)
Dim locbldr2 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.String))
locbldr2.SetLocalSymInfo("tmpstr")
OptimizeIL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 8, 1, 8, 100)
Dim locbldr3 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.Char).MakeArrayType())
locbldr3.SetLocalSymInfo("tmpchrarr")
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
OptimizeIL.Emit(OpCodes.Newarr, GetType(System.Char))
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc3, 9, 1, 9, 100)
Dim locbldr4 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.Boolean))
locbldr4.SetLocalSymInfo("orflg")
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 11, 1, 11, 100)
Dim label0 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.MarkSequencePoint(doc3, 13, 1, 13, 100)
Dim typ1(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "+")
Typ = GetType(System.String)
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ1))
Typ = GetType(String).GetMethod("Compare", typ1).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 15, 1, 15, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa0 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru0 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont0 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru0)
OptimizeIL.Emit(OpCodes.Br, fa0)
OptimizeIL.MarkLabel(tru0)
OptimizeIL.MarkSequencePoint(doc3, 16, 1, 16, 100)
Dim locbldr5 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(AddOp))
locbldr5.SetLocalSymInfo("aop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(AddOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 5)
OptimizeIL.MarkSequencePoint(doc3, 17, 1, 17, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(AddOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(AddOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 18, 1, 18, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(AddOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(AddOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 19, 1, 19, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(AddOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 20, 1, 20, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 21, 1, 21, 100)
OptimizeIL.Emit(OpCodes.Br, cont0)
OptimizeIL.MarkLabel(fa0)
OptimizeIL.Emit(OpCodes.Br, cont0)
OptimizeIL.MarkLabel(cont0)
OptimizeIL.MarkSequencePoint(doc3, 23, 1, 23, 100)
Dim typ2(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "*")
Typ = GetType(System.String)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ2))
Typ = GetType(String).GetMethod("Compare", typ2).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 25, 1, 25, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa1 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru1 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont1 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru1)
OptimizeIL.Emit(OpCodes.Br, fa1)
OptimizeIL.MarkLabel(tru1)
OptimizeIL.MarkSequencePoint(doc3, 26, 1, 26, 100)
Dim locbldr6 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(MulOp))
locbldr6.SetLocalSymInfo("mop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(MulOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 6)
OptimizeIL.MarkSequencePoint(doc3, 27, 1, 27, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(MulOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(MulOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 28, 1, 28, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(MulOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(MulOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 29, 1, 29, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(MulOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 30, 1, 30, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 31, 1, 31, 100)
OptimizeIL.Emit(OpCodes.Br, cont1)
OptimizeIL.MarkLabel(fa1)
OptimizeIL.Emit(OpCodes.Br, cont1)
OptimizeIL.MarkLabel(cont1)
OptimizeIL.MarkSequencePoint(doc3, 33, 1, 33, 100)
Dim typ3(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "-")
Typ = GetType(System.String)
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ3))
Typ = GetType(String).GetMethod("Compare", typ3).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 35, 1, 35, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa2 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru2 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont2 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru2)
OptimizeIL.Emit(OpCodes.Br, fa2)
OptimizeIL.MarkLabel(tru2)
OptimizeIL.MarkSequencePoint(doc3, 36, 1, 36, 100)
Dim locbldr7 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(SubOp))
locbldr7.SetLocalSymInfo("sop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(SubOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 7)
OptimizeIL.MarkSequencePoint(doc3, 37, 1, 37, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(SubOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(SubOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 38, 1, 38, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(SubOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(SubOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 39, 1, 39, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(SubOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 40, 1, 40, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 41, 1, 41, 100)
OptimizeIL.Emit(OpCodes.Br, cont2)
OptimizeIL.MarkLabel(fa2)
OptimizeIL.Emit(OpCodes.Br, cont2)
OptimizeIL.MarkLabel(cont2)
OptimizeIL.MarkSequencePoint(doc3, 43, 1, 43, 100)
Dim typ4(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "/")
Typ = GetType(System.String)
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ4))
Typ = GetType(String).GetMethod("Compare", typ4).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 45, 1, 45, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa3 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru3 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont3 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru3)
OptimizeIL.Emit(OpCodes.Br, fa3)
OptimizeIL.MarkLabel(tru3)
OptimizeIL.MarkSequencePoint(doc3, 46, 1, 46, 100)
Dim locbldr8 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(DivOp))
locbldr8.SetLocalSymInfo("dop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(DivOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 8)
OptimizeIL.MarkSequencePoint(doc3, 47, 1, 47, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(DivOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DivOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 48, 1, 48, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(DivOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DivOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 49, 1, 49, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(DivOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 50, 1, 50, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 51, 1, 51, 100)
OptimizeIL.Emit(OpCodes.Br, cont3)
OptimizeIL.MarkLabel(fa3)
OptimizeIL.Emit(OpCodes.Br, cont3)
OptimizeIL.MarkLabel(cont3)
OptimizeIL.MarkSequencePoint(doc3, 53, 1, 53, 100)
Dim typ5(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ5(UBound(typ5) + 1)
typ5(UBound(typ5)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "++")
Typ = GetType(System.String)
ReDim Preserve typ5(UBound(typ5) + 1)
typ5(UBound(typ5)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ5))
Typ = GetType(String).GetMethod("Compare", typ5).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 55, 1, 55, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa4 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru4 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont4 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru4)
OptimizeIL.Emit(OpCodes.Br, fa4)
OptimizeIL.MarkLabel(tru4)
OptimizeIL.MarkSequencePoint(doc3, 56, 1, 56, 100)
Dim locbldr9 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(IncOp))
locbldr9.SetLocalSymInfo("inop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(IncOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 9)
OptimizeIL.MarkSequencePoint(doc3, 57, 1, 57, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(IncOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(IncOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 58, 1, 58, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(IncOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(IncOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 59, 1, 59, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(IncOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 60, 1, 60, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 61, 1, 61, 100)
OptimizeIL.Emit(OpCodes.Br, cont4)
OptimizeIL.MarkLabel(fa4)
OptimizeIL.Emit(OpCodes.Br, cont4)
OptimizeIL.MarkLabel(cont4)
OptimizeIL.MarkSequencePoint(doc3, 63, 1, 63, 100)
Dim typ6(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "--")
Typ = GetType(System.String)
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ6))
Typ = GetType(String).GetMethod("Compare", typ6).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 65, 1, 65, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa5 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru5 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont5 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru5)
OptimizeIL.Emit(OpCodes.Br, fa5)
OptimizeIL.MarkLabel(tru5)
OptimizeIL.MarkSequencePoint(doc3, 66, 1, 66, 100)
Dim locbldr10 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(DecOp))
locbldr10.SetLocalSymInfo("deop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(DecOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 10)
OptimizeIL.MarkSequencePoint(doc3, 67, 1, 67, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(DecOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DecOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 68, 1, 68, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(DecOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DecOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 69, 1, 69, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(DecOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 70, 1, 70, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 71, 1, 71, 100)
OptimizeIL.Emit(OpCodes.Br, cont5)
OptimizeIL.MarkLabel(fa5)
OptimizeIL.Emit(OpCodes.Br, cont5)
OptimizeIL.MarkLabel(cont5)
OptimizeIL.MarkSequencePoint(doc3, 73, 1, 73, 100)
Dim typ7(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "=")
Typ = GetType(System.String)
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ7))
Typ = GetType(String).GetMethod("Compare", typ7).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 75, 1, 75, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa6 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru6 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont6 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru6)
OptimizeIL.Emit(OpCodes.Br, fa6)
OptimizeIL.MarkLabel(tru6)
OptimizeIL.MarkSequencePoint(doc3, 76, 1, 76, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IfFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IfFlag").FieldType
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa7 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru7 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont7 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru7)
OptimizeIL.Emit(OpCodes.Br, fa7)
OptimizeIL.MarkLabel(tru7)
OptimizeIL.MarkSequencePoint(doc3, 77, 1, 77, 100)
Dim locbldr11 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(EqOp))
locbldr11.SetLocalSymInfo("eqop2")
OptimizeIL.Emit(OpCodes.Newobj, GetType(EqOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 11)
OptimizeIL.MarkSequencePoint(doc3, 78, 1, 78, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(EqOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(EqOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 79, 1, 79, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(EqOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(EqOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 80, 1, 80, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(EqOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 81, 1, 81, 100)
OptimizeIL.Emit(OpCodes.Br, cont7)
OptimizeIL.MarkLabel(fa7)
OptimizeIL.MarkSequencePoint(doc3, 82, 1, 82, 100)
Dim locbldr12 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(AssignOp))
locbldr12.SetLocalSymInfo("assop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(AssignOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 12)
OptimizeIL.MarkSequencePoint(doc3, 83, 1, 83, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(AssignOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(AssignOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 84, 1, 84, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(AssignOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(AssignOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 85, 1, 85, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(AssignOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 86, 1, 86, 100)
OptimizeIL.Emit(OpCodes.Br, cont7)
OptimizeIL.MarkLabel(cont7)
OptimizeIL.MarkSequencePoint(doc3, 87, 1, 87, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 88, 1, 88, 100)
OptimizeIL.Emit(OpCodes.Br, cont6)
OptimizeIL.MarkLabel(fa6)
OptimizeIL.Emit(OpCodes.Br, cont6)
OptimizeIL.MarkLabel(cont6)
OptimizeIL.MarkSequencePoint(doc3, 90, 1, 90, 100)
Dim typ8(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "%")
Typ = GetType(System.String)
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ8))
Typ = GetType(String).GetMethod("Compare", typ8).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 92, 1, 92, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa8 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru8 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont8 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru8)
OptimizeIL.Emit(OpCodes.Br, fa8)
OptimizeIL.MarkLabel(tru8)
OptimizeIL.MarkSequencePoint(doc3, 93, 1, 93, 100)
Dim locbldr13 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(ModOp))
locbldr13.SetLocalSymInfo("moop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(ModOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 13)
OptimizeIL.MarkSequencePoint(doc3, 94, 1, 94, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(ModOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ModOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 95, 1, 95, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(ModOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ModOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 96, 1, 96, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(ModOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 97, 1, 97, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 98, 1, 98, 100)
OptimizeIL.Emit(OpCodes.Br, cont8)
OptimizeIL.MarkLabel(fa8)
OptimizeIL.Emit(OpCodes.Br, cont8)
OptimizeIL.MarkLabel(cont8)
OptimizeIL.MarkSequencePoint(doc3, 100, 1, 100, 100)
Dim typ9(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "==")
Typ = GetType(System.String)
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ9))
Typ = GetType(String).GetMethod("Compare", typ9).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 102, 1, 102, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa9 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru9 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont9 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru9)
OptimizeIL.Emit(OpCodes.Br, fa9)
OptimizeIL.MarkLabel(tru9)
OptimizeIL.MarkSequencePoint(doc3, 103, 1, 103, 100)
Dim locbldr14 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(EqOp))
locbldr14.SetLocalSymInfo("eqop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(EqOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 14)
OptimizeIL.MarkSequencePoint(doc3, 104, 1, 104, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(EqOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(EqOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 105, 1, 105, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(EqOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(EqOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 106, 1, 106, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(EqOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 107, 1, 107, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 108, 1, 108, 100)
OptimizeIL.Emit(OpCodes.Br, cont9)
OptimizeIL.MarkLabel(fa9)
OptimizeIL.Emit(OpCodes.Br, cont9)
OptimizeIL.MarkLabel(cont9)
OptimizeIL.MarkSequencePoint(doc3, 110, 1, 110, 100)
Dim typ10(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ10(UBound(typ10) + 1)
typ10(UBound(typ10)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "!")
Typ = GetType(System.String)
ReDim Preserve typ10(UBound(typ10) + 1)
typ10(UBound(typ10)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ10))
Typ = GetType(String).GetMethod("Compare", typ10).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 112, 1, 112, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa10 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru10 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont10 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru10)
OptimizeIL.Emit(OpCodes.Br, fa10)
OptimizeIL.MarkLabel(tru10)
OptimizeIL.MarkSequencePoint(doc3, 113, 1, 113, 100)
Dim locbldr15 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(NegOp))
locbldr15.SetLocalSymInfo("negop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(NegOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 15)
OptimizeIL.MarkSequencePoint(doc3, 114, 1, 114, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(NegOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(NegOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 115, 1, 115, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(NegOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(NegOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 116, 1, 116, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(NegOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 117, 1, 117, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 118, 1, 118, 100)
OptimizeIL.Emit(OpCodes.Br, cont10)
OptimizeIL.MarkLabel(fa10)
OptimizeIL.Emit(OpCodes.Br, cont10)
OptimizeIL.MarkLabel(cont10)
OptimizeIL.MarkSequencePoint(doc3, 120, 1, 120, 100)
Dim typ11(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ11(UBound(typ11) + 1)
typ11(UBound(typ11)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "~")
Typ = GetType(System.String)
ReDim Preserve typ11(UBound(typ11) + 1)
typ11(UBound(typ11)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ11))
Typ = GetType(String).GetMethod("Compare", typ11).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 122, 1, 122, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa11 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru11 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont11 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru11)
OptimizeIL.Emit(OpCodes.Br, fa11)
OptimizeIL.MarkLabel(tru11)
OptimizeIL.MarkSequencePoint(doc3, 123, 1, 123, 100)
Dim locbldr16 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(NotOp))
locbldr16.SetLocalSymInfo("notop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(NotOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 16)
OptimizeIL.MarkSequencePoint(doc3, 124, 1, 124, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(NotOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(NotOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 125, 1, 125, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(NotOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(NotOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 126, 1, 126, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(NotOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 127, 1, 127, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 128, 1, 128, 100)
OptimizeIL.Emit(OpCodes.Br, cont11)
OptimizeIL.MarkLabel(fa11)
OptimizeIL.Emit(OpCodes.Br, cont11)
OptimizeIL.MarkLabel(cont11)
OptimizeIL.MarkSequencePoint(doc3, 131, 1, 131, 100)
Dim typ12(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ12(UBound(typ12) + 1)
typ12(UBound(typ12)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "!=")
Typ = GetType(System.String)
ReDim Preserve typ12(UBound(typ12) + 1)
typ12(UBound(typ12)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ12))
Typ = GetType(String).GetMethod("Compare", typ12).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 133, 1, 133, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa12 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru12 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont12 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru12)
OptimizeIL.Emit(OpCodes.Br, fa12)
OptimizeIL.MarkLabel(tru12)
OptimizeIL.MarkSequencePoint(doc3, 134, 1, 134, 100)
Dim locbldr17 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(NeqOp))
locbldr17.SetLocalSymInfo("neqop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(NeqOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 17)
OptimizeIL.MarkSequencePoint(doc3, 135, 1, 135, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(NeqOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(NeqOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 136, 1, 136, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(NeqOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(NeqOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 137, 1, 137, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(NeqOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 138, 1, 138, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 139, 1, 139, 100)
OptimizeIL.Emit(OpCodes.Br, cont12)
OptimizeIL.MarkLabel(fa12)
OptimizeIL.Emit(OpCodes.Br, cont12)
OptimizeIL.MarkLabel(cont12)
OptimizeIL.MarkSequencePoint(doc3, 141, 1, 141, 100)
Dim typ13(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ13(UBound(typ13) + 1)
typ13(UBound(typ13)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "<>")
Typ = GetType(System.String)
ReDim Preserve typ13(UBound(typ13) + 1)
typ13(UBound(typ13)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ13))
Typ = GetType(String).GetMethod("Compare", typ13).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 143, 1, 143, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa13 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru13 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont13 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru13)
OptimizeIL.Emit(OpCodes.Br, fa13)
OptimizeIL.MarkLabel(tru13)
OptimizeIL.MarkSequencePoint(doc3, 144, 1, 144, 100)
Dim locbldr18 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(NeqOp))
locbldr18.SetLocalSymInfo("neqop2")
OptimizeIL.Emit(OpCodes.Newobj, GetType(NeqOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 18)
OptimizeIL.MarkSequencePoint(doc3, 145, 1, 145, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(NeqOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(NeqOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 146, 1, 146, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(NeqOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(NeqOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 147, 1, 147, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(NeqOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 148, 1, 148, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 149, 1, 149, 100)
OptimizeIL.Emit(OpCodes.Br, cont13)
OptimizeIL.MarkLabel(fa13)
OptimizeIL.Emit(OpCodes.Br, cont13)
OptimizeIL.MarkLabel(cont13)
OptimizeIL.MarkSequencePoint(doc3, 152, 1, 152, 100)
Dim typ14(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, ">=")
Typ = GetType(System.String)
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ14))
Typ = GetType(String).GetMethod("Compare", typ14).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 154, 1, 154, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa14 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru14 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont14 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru14)
OptimizeIL.Emit(OpCodes.Br, fa14)
OptimizeIL.MarkLabel(tru14)
OptimizeIL.MarkSequencePoint(doc3, 155, 1, 155, 100)
Dim locbldr19 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(GeOp))
locbldr19.SetLocalSymInfo("geop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(GeOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 19)
OptimizeIL.MarkSequencePoint(doc3, 156, 1, 156, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(GeOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(GeOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 157, 1, 157, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(GeOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(GeOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 158, 1, 158, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(GeOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 159, 1, 159, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 160, 1, 160, 100)
OptimizeIL.Emit(OpCodes.Br, cont14)
OptimizeIL.MarkLabel(fa14)
OptimizeIL.Emit(OpCodes.Br, cont14)
OptimizeIL.MarkLabel(cont14)
OptimizeIL.MarkSequencePoint(doc3, 162, 1, 162, 100)
Dim typ15(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ15(UBound(typ15) + 1)
typ15(UBound(typ15)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "<=")
Typ = GetType(System.String)
ReDim Preserve typ15(UBound(typ15) + 1)
typ15(UBound(typ15)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ15))
Typ = GetType(String).GetMethod("Compare", typ15).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 164, 1, 164, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa15 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru15 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont15 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru15)
OptimizeIL.Emit(OpCodes.Br, fa15)
OptimizeIL.MarkLabel(tru15)
OptimizeIL.MarkSequencePoint(doc3, 165, 1, 165, 100)
Dim locbldr20 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(LeOp))
locbldr20.SetLocalSymInfo("leop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(LeOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 20)
OptimizeIL.MarkSequencePoint(doc3, 166, 1, 166, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(LeOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(LeOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 167, 1, 167, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(LeOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(LeOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 168, 1, 168, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(LeOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 169, 1, 169, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 170, 1, 170, 100)
OptimizeIL.Emit(OpCodes.Br, cont15)
OptimizeIL.MarkLabel(fa15)
OptimizeIL.Emit(OpCodes.Br, cont15)
OptimizeIL.MarkLabel(cont15)
OptimizeIL.MarkSequencePoint(doc3, 172, 1, 172, 100)
Dim typ16(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ16(UBound(typ16) + 1)
typ16(UBound(typ16)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, ">")
Typ = GetType(System.String)
ReDim Preserve typ16(UBound(typ16) + 1)
typ16(UBound(typ16)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ16))
Typ = GetType(String).GetMethod("Compare", typ16).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 174, 1, 174, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa16 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru16 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont16 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru16)
OptimizeIL.Emit(OpCodes.Br, fa16)
OptimizeIL.MarkLabel(tru16)
OptimizeIL.MarkSequencePoint(doc3, 175, 1, 175, 100)
Dim locbldr21 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(GtOp))
locbldr21.SetLocalSymInfo("gtop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(GtOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 21)
OptimizeIL.MarkSequencePoint(doc3, 176, 1, 176, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(GtOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(GtOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 177, 1, 177, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(GtOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(GtOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 178, 1, 178, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(GtOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 179, 1, 179, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 180, 1, 180, 100)
OptimizeIL.Emit(OpCodes.Br, cont16)
OptimizeIL.MarkLabel(fa16)
OptimizeIL.Emit(OpCodes.Br, cont16)
OptimizeIL.MarkLabel(cont16)
OptimizeIL.MarkSequencePoint(doc3, 182, 1, 182, 100)
Dim typ17(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ17(UBound(typ17) + 1)
typ17(UBound(typ17)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "<")
Typ = GetType(System.String)
ReDim Preserve typ17(UBound(typ17) + 1)
typ17(UBound(typ17)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ17))
Typ = GetType(String).GetMethod("Compare", typ17).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 184, 1, 184, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa17 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru17 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont17 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru17)
OptimizeIL.Emit(OpCodes.Br, fa17)
OptimizeIL.MarkLabel(tru17)
OptimizeIL.MarkSequencePoint(doc3, 185, 1, 185, 100)
Dim locbldr22 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(LtOp))
locbldr22.SetLocalSymInfo("ltop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(LtOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 22)
OptimizeIL.MarkSequencePoint(doc3, 186, 1, 186, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(LtOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(LtOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 187, 1, 187, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(LtOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(LtOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 188, 1, 188, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(LtOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 189, 1, 189, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 190, 1, 190, 100)
OptimizeIL.Emit(OpCodes.Br, cont17)
OptimizeIL.MarkLabel(fa17)
OptimizeIL.Emit(OpCodes.Br, cont17)
OptimizeIL.MarkLabel(cont17)
OptimizeIL.MarkSequencePoint(doc3, 192, 1, 192, 100)
Dim typ18(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ18(UBound(typ18) + 1)
typ18(UBound(typ18)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "and")
Typ = GetType(System.String)
ReDim Preserve typ18(UBound(typ18) + 1)
typ18(UBound(typ18)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ18))
Typ = GetType(String).GetMethod("Compare", typ18).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 194, 1, 194, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa18 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru18 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont18 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru18)
OptimizeIL.Emit(OpCodes.Br, fa18)
OptimizeIL.MarkLabel(tru18)
OptimizeIL.MarkSequencePoint(doc3, 195, 1, 195, 100)
Dim locbldr23 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(AndOp))
locbldr23.SetLocalSymInfo("andop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(AndOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 23)
OptimizeIL.MarkSequencePoint(doc3, 196, 1, 196, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 23)
Typ = GetType(AndOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(AndOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 197, 1, 197, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 23)
Typ = GetType(AndOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(AndOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 198, 1, 198, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 23)
Typ = GetType(AndOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 199, 1, 199, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 200, 1, 200, 100)
OptimizeIL.Emit(OpCodes.Br, cont18)
OptimizeIL.MarkLabel(fa18)
OptimizeIL.Emit(OpCodes.Br, cont18)
OptimizeIL.MarkLabel(cont18)
OptimizeIL.MarkSequencePoint(doc3, 202, 1, 202, 100)
Dim typ19(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ19(UBound(typ19) + 1)
typ19(UBound(typ19)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "or")
Typ = GetType(System.String)
ReDim Preserve typ19(UBound(typ19) + 1)
typ19(UBound(typ19)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ19))
Typ = GetType(String).GetMethod("Compare", typ19).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 204, 1, 204, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa19 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru19 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont19 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru19)
OptimizeIL.Emit(OpCodes.Br, fa19)
OptimizeIL.MarkLabel(tru19)
OptimizeIL.MarkSequencePoint(doc3, 205, 1, 205, 100)
Dim locbldr24 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(OrOp))
locbldr24.SetLocalSymInfo("orop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(OrOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 24)
OptimizeIL.MarkSequencePoint(doc3, 206, 1, 206, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(OrOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(OrOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 207, 1, 207, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(OrOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(OrOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 208, 1, 208, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(OrOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 209, 1, 209, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 210, 1, 210, 100)
OptimizeIL.Emit(OpCodes.Br, cont19)
OptimizeIL.MarkLabel(fa19)
OptimizeIL.Emit(OpCodes.Br, cont19)
OptimizeIL.MarkLabel(cont19)
OptimizeIL.MarkSequencePoint(doc3, 212, 1, 212, 100)
Dim typ20(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ20(UBound(typ20) + 1)
typ20(UBound(typ20)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "nand")
Typ = GetType(System.String)
ReDim Preserve typ20(UBound(typ20) + 1)
typ20(UBound(typ20)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ20))
Typ = GetType(String).GetMethod("Compare", typ20).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 214, 1, 214, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa20 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru20 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont20 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru20)
OptimizeIL.Emit(OpCodes.Br, fa20)
OptimizeIL.MarkLabel(tru20)
OptimizeIL.MarkSequencePoint(doc3, 215, 1, 215, 100)
Dim locbldr25 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(NandOp))
locbldr25.SetLocalSymInfo("nandop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(NandOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 25)
OptimizeIL.MarkSequencePoint(doc3, 216, 1, 216, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(NandOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(NandOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 217, 1, 217, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(NandOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(NandOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 218, 1, 218, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(NandOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 219, 1, 219, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 220, 1, 220, 100)
OptimizeIL.Emit(OpCodes.Br, cont20)
OptimizeIL.MarkLabel(fa20)
OptimizeIL.Emit(OpCodes.Br, cont20)
OptimizeIL.MarkLabel(cont20)
OptimizeIL.MarkSequencePoint(doc3, 222, 1, 222, 100)
Dim typ21(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ21(UBound(typ21) + 1)
typ21(UBound(typ21)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "nor")
Typ = GetType(System.String)
ReDim Preserve typ21(UBound(typ21) + 1)
typ21(UBound(typ21)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ21))
Typ = GetType(String).GetMethod("Compare", typ21).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 224, 1, 224, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa21 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru21 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont21 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru21)
OptimizeIL.Emit(OpCodes.Br, fa21)
OptimizeIL.MarkLabel(tru21)
OptimizeIL.MarkSequencePoint(doc3, 225, 1, 225, 100)
Dim locbldr26 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(NorOp))
locbldr26.SetLocalSymInfo("norop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(NorOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 26)
OptimizeIL.MarkSequencePoint(doc3, 226, 1, 226, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 26)
Typ = GetType(NorOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(NorOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 227, 1, 227, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 26)
Typ = GetType(NorOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(NorOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 228, 1, 228, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 26)
Typ = GetType(NorOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 229, 1, 229, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 230, 1, 230, 100)
OptimizeIL.Emit(OpCodes.Br, cont21)
OptimizeIL.MarkLabel(fa21)
OptimizeIL.Emit(OpCodes.Br, cont21)
OptimizeIL.MarkLabel(cont21)
OptimizeIL.MarkSequencePoint(doc3, 233, 1, 233, 100)
Dim typ22(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ22(UBound(typ22) + 1)
typ22(UBound(typ22)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "xor")
Typ = GetType(System.String)
ReDim Preserve typ22(UBound(typ22) + 1)
typ22(UBound(typ22)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ22))
Typ = GetType(String).GetMethod("Compare", typ22).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 235, 1, 235, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa22 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru22 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont22 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru22)
OptimizeIL.Emit(OpCodes.Br, fa22)
OptimizeIL.MarkLabel(tru22)
OptimizeIL.MarkSequencePoint(doc3, 236, 1, 236, 100)
Dim locbldr27 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(XorOp))
locbldr27.SetLocalSymInfo("xorop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(XorOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 27)
OptimizeIL.MarkSequencePoint(doc3, 237, 1, 237, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 27)
Typ = GetType(XorOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(XorOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 238, 1, 238, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 27)
Typ = GetType(XorOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(XorOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 239, 1, 239, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 27)
Typ = GetType(XorOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 240, 1, 240, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 241, 1, 241, 100)
OptimizeIL.Emit(OpCodes.Br, cont22)
OptimizeIL.MarkLabel(fa22)
OptimizeIL.Emit(OpCodes.Br, cont22)
OptimizeIL.MarkLabel(cont22)
OptimizeIL.MarkSequencePoint(doc3, 244, 1, 244, 100)
Dim typ23(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ23(UBound(typ23) + 1)
typ23(UBound(typ23)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "(")
Typ = GetType(System.String)
ReDim Preserve typ23(UBound(typ23) + 1)
typ23(UBound(typ23)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ23))
Typ = GetType(String).GetMethod("Compare", typ23).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 246, 1, 246, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa23 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru23 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont23 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru23)
OptimizeIL.Emit(OpCodes.Br, fa23)
OptimizeIL.MarkLabel(tru23)
OptimizeIL.MarkSequencePoint(doc3, 247, 1, 247, 100)
Dim locbldr28 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(LParen))
locbldr28.SetLocalSymInfo("lpar")
OptimizeIL.Emit(OpCodes.Newobj, GetType(LParen).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 28)
OptimizeIL.MarkSequencePoint(doc3, 248, 1, 248, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(LParen)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(LParen).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 249, 1, 249, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(LParen)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(LParen).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 250, 1, 250, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(LParen)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 251, 1, 251, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 252, 1, 252, 100)
OptimizeIL.Emit(OpCodes.Br, cont23)
OptimizeIL.MarkLabel(fa23)
OptimizeIL.Emit(OpCodes.Br, cont23)
OptimizeIL.MarkLabel(cont23)
OptimizeIL.MarkSequencePoint(doc3, 254, 1, 254, 100)
Dim typ24(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ24(UBound(typ24) + 1)
typ24(UBound(typ24)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, ")")
Typ = GetType(System.String)
ReDim Preserve typ24(UBound(typ24) + 1)
typ24(UBound(typ24)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ24))
Typ = GetType(String).GetMethod("Compare", typ24).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 256, 1, 256, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa24 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru24 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont24 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru24)
OptimizeIL.Emit(OpCodes.Br, fa24)
OptimizeIL.MarkLabel(tru24)
OptimizeIL.MarkSequencePoint(doc3, 257, 1, 257, 100)
Dim locbldr29 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(RParen))
locbldr29.SetLocalSymInfo("rpar")
OptimizeIL.Emit(OpCodes.Newobj, GetType(RParen).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 29)
OptimizeIL.MarkSequencePoint(doc3, 258, 1, 258, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 29)
Typ = GetType(RParen)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(RParen).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 259, 1, 259, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 29)
Typ = GetType(RParen)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(RParen).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 260, 1, 260, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 29)
Typ = GetType(RParen)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 261, 1, 261, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 262, 1, 262, 100)
OptimizeIL.Emit(OpCodes.Br, cont24)
OptimizeIL.MarkLabel(fa24)
OptimizeIL.Emit(OpCodes.Br, cont24)
OptimizeIL.MarkLabel(cont24)
OptimizeIL.MarkSequencePoint(doc3, 264, 1, 264, 100)
Dim typ25(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ25(UBound(typ25) + 1)
typ25(UBound(typ25)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "[")
Typ = GetType(System.String)
ReDim Preserve typ25(UBound(typ25) + 1)
typ25(UBound(typ25)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ25))
Typ = GetType(String).GetMethod("Compare", typ25).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 266, 1, 266, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa25 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru25 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont25 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru25)
OptimizeIL.Emit(OpCodes.Br, fa25)
OptimizeIL.MarkLabel(tru25)
OptimizeIL.MarkSequencePoint(doc3, 267, 1, 267, 100)
Dim locbldr30 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(LSParen))
locbldr30.SetLocalSymInfo("lspar")
OptimizeIL.Emit(OpCodes.Newobj, GetType(LSParen).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 30)
OptimizeIL.MarkSequencePoint(doc3, 268, 1, 268, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 30)
Typ = GetType(LSParen)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(LSParen).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 269, 1, 269, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 30)
Typ = GetType(LSParen)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(LSParen).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 270, 1, 270, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 30)
Typ = GetType(LSParen)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 271, 1, 271, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 272, 1, 272, 100)
OptimizeIL.Emit(OpCodes.Br, cont25)
OptimizeIL.MarkLabel(fa25)
OptimizeIL.Emit(OpCodes.Br, cont25)
OptimizeIL.MarkLabel(cont25)
OptimizeIL.MarkSequencePoint(doc3, 274, 1, 274, 100)
Dim typ26(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ26(UBound(typ26) + 1)
typ26(UBound(typ26)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "]")
Typ = GetType(System.String)
ReDim Preserve typ26(UBound(typ26) + 1)
typ26(UBound(typ26)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ26))
Typ = GetType(String).GetMethod("Compare", typ26).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 276, 1, 276, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa26 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru26 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont26 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru26)
OptimizeIL.Emit(OpCodes.Br, fa26)
OptimizeIL.MarkLabel(tru26)
OptimizeIL.MarkSequencePoint(doc3, 277, 1, 277, 100)
Dim locbldr31 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(RSParen))
locbldr31.SetLocalSymInfo("rspar")
OptimizeIL.Emit(OpCodes.Newobj, GetType(RSParen).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 31)
OptimizeIL.MarkSequencePoint(doc3, 278, 1, 278, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(RSParen)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(RSParen).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 279, 1, 279, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(RSParen)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(RSParen).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 280, 1, 280, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(RSParen)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 281, 1, 281, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 282, 1, 282, 100)
OptimizeIL.Emit(OpCodes.Br, cont26)
OptimizeIL.MarkLabel(fa26)
OptimizeIL.Emit(OpCodes.Br, cont26)
OptimizeIL.MarkLabel(cont26)
OptimizeIL.MarkSequencePoint(doc3, 284, 1, 284, 100)
Dim typ27(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ27(UBound(typ27) + 1)
typ27(UBound(typ27)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "|")
Typ = GetType(System.String)
ReDim Preserve typ27(UBound(typ27) + 1)
typ27(UBound(typ27)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ27))
Typ = GetType(String).GetMethod("Compare", typ27).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 286, 1, 286, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa27 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru27 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont27 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru27)
OptimizeIL.Emit(OpCodes.Br, fa27)
OptimizeIL.MarkLabel(tru27)
OptimizeIL.MarkSequencePoint(doc3, 287, 1, 287, 100)
Dim locbldr32 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(Pipe))
locbldr32.SetLocalSymInfo("pip")
OptimizeIL.Emit(OpCodes.Newobj, GetType(Pipe).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 32)
OptimizeIL.MarkSequencePoint(doc3, 288, 1, 288, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 32)
Typ = GetType(Pipe)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(Pipe).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 289, 1, 289, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 32)
Typ = GetType(Pipe)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(Pipe).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 290, 1, 290, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 32)
Typ = GetType(Pipe)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 291, 1, 291, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 292, 1, 292, 100)
OptimizeIL.Emit(OpCodes.Br, cont27)
OptimizeIL.MarkLabel(fa27)
OptimizeIL.Emit(OpCodes.Br, cont27)
OptimizeIL.MarkLabel(cont27)
OptimizeIL.MarkSequencePoint(doc3, 294, 1, 294, 100)
Dim typ28(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ28(UBound(typ28) + 1)
typ28(UBound(typ28)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, ",")
Typ = GetType(System.String)
ReDim Preserve typ28(UBound(typ28) + 1)
typ28(UBound(typ28)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ28))
Typ = GetType(String).GetMethod("Compare", typ28).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 296, 1, 296, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa28 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru28 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont28 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru28)
OptimizeIL.Emit(OpCodes.Br, fa28)
OptimizeIL.MarkLabel(tru28)
OptimizeIL.MarkSequencePoint(doc3, 297, 1, 297, 100)
Dim locbldr33 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(Comma))
locbldr33.SetLocalSymInfo("com")
OptimizeIL.Emit(OpCodes.Newobj, GetType(Comma).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 33)
OptimizeIL.MarkSequencePoint(doc3, 298, 1, 298, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 33)
Typ = GetType(Comma)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(Comma).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 299, 1, 299, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 33)
Typ = GetType(Comma)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(Comma).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 300, 1, 300, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 33)
Typ = GetType(Comma)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 301, 1, 301, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 302, 1, 302, 100)
OptimizeIL.Emit(OpCodes.Br, cont28)
OptimizeIL.MarkLabel(fa28)
OptimizeIL.Emit(OpCodes.Br, cont28)
OptimizeIL.MarkLabel(cont28)
OptimizeIL.MarkSequencePoint(doc3, 304, 1, 304, 100)
Dim typ29(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ29(UBound(typ29) + 1)
typ29(UBound(typ29)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "$")
Typ = GetType(System.String)
ReDim Preserve typ29(UBound(typ29) + 1)
typ29(UBound(typ29)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ29))
Typ = GetType(String).GetMethod("Compare", typ29).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 306, 1, 306, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa29 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru29 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont29 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru29)
OptimizeIL.Emit(OpCodes.Br, fa29)
OptimizeIL.MarkLabel(tru29)
OptimizeIL.MarkSequencePoint(doc3, 307, 1, 307, 100)
Dim locbldr34 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(DollarSign))
locbldr34.SetLocalSymInfo("ds")
OptimizeIL.Emit(OpCodes.Newobj, GetType(DollarSign).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 34)
OptimizeIL.MarkSequencePoint(doc3, 308, 1, 308, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 34)
Typ = GetType(DollarSign)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DollarSign).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 309, 1, 309, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 34)
Typ = GetType(DollarSign)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DollarSign).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 310, 1, 310, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 34)
Typ = GetType(DollarSign)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 311, 1, 311, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 312, 1, 312, 100)
OptimizeIL.Emit(OpCodes.Br, cont29)
OptimizeIL.MarkLabel(fa29)
OptimizeIL.Emit(OpCodes.Br, cont29)
OptimizeIL.MarkLabel(cont29)
OptimizeIL.MarkSequencePoint(doc3, 314, 1, 314, 100)
Dim typ30(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ30(UBound(typ30) + 1)
typ30(UBound(typ30)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "if")
Typ = GetType(System.String)
ReDim Preserve typ30(UBound(typ30) + 1)
typ30(UBound(typ30)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ30))
Typ = GetType(String).GetMethod("Compare", typ30).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 316, 1, 316, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa30 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru30 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont30 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru30)
OptimizeIL.Emit(OpCodes.Br, fa30)
OptimizeIL.MarkLabel(tru30)
OptimizeIL.MarkSequencePoint(doc3, 317, 1, 317, 100)
Dim locbldr35 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(IfTok))
locbldr35.SetLocalSymInfo("iftk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(IfTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 35)
OptimizeIL.MarkSequencePoint(doc3, 318, 1, 318, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(IfTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(IfTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 319, 1, 319, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(IfTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(IfTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 320, 1, 320, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(IfTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 321, 1, 321, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IfFlag"))
OptimizeIL.MarkSequencePoint(doc3, 322, 1, 322, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 323, 1, 323, 100)
OptimizeIL.Emit(OpCodes.Br, cont30)
OptimizeIL.MarkLabel(fa30)
OptimizeIL.Emit(OpCodes.Br, cont30)
OptimizeIL.MarkLabel(cont30)
OptimizeIL.MarkSequencePoint(doc3, 325, 1, 325, 100)
Dim typ31(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ31(UBound(typ31) + 1)
typ31(UBound(typ31)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "then")
Typ = GetType(System.String)
ReDim Preserve typ31(UBound(typ31) + 1)
typ31(UBound(typ31)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ31))
Typ = GetType(String).GetMethod("Compare", typ31).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 327, 1, 327, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa31 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru31 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont31 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru31)
OptimizeIL.Emit(OpCodes.Br, fa31)
OptimizeIL.MarkLabel(tru31)
OptimizeIL.MarkSequencePoint(doc3, 328, 1, 328, 100)
Dim locbldr36 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(ThenTok))
locbldr36.SetLocalSymInfo("thentk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(ThenTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 36)
OptimizeIL.MarkSequencePoint(doc3, 329, 1, 329, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 36)
Typ = GetType(ThenTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ThenTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 330, 1, 330, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 36)
Typ = GetType(ThenTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ThenTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 331, 1, 331, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 36)
Typ = GetType(ThenTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 332, 1, 332, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IfFlag"))
OptimizeIL.MarkSequencePoint(doc3, 333, 1, 333, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 334, 1, 334, 100)
OptimizeIL.Emit(OpCodes.Br, cont31)
OptimizeIL.MarkLabel(fa31)
OptimizeIL.Emit(OpCodes.Br, cont31)
OptimizeIL.MarkLabel(cont31)
OptimizeIL.MarkSequencePoint(doc3, 336, 1, 336, 100)
Dim typ32(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ32(UBound(typ32) + 1)
typ32(UBound(typ32)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "#refasm")
Typ = GetType(System.String)
ReDim Preserve typ32(UBound(typ32) + 1)
typ32(UBound(typ32)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ32))
Typ = GetType(String).GetMethod("Compare", typ32).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 338, 1, 338, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa32 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru32 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont32 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru32)
OptimizeIL.Emit(OpCodes.Br, fa32)
OptimizeIL.MarkLabel(tru32)
OptimizeIL.MarkSequencePoint(doc3, 339, 1, 339, 100)
Dim locbldr37 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(RefasmTok))
locbldr37.SetLocalSymInfo("ratk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(RefasmTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 37)
OptimizeIL.MarkSequencePoint(doc3, 340, 1, 340, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 37)
Typ = GetType(RefasmTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(RefasmTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 341, 1, 341, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 37)
Typ = GetType(RefasmTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(RefasmTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 342, 1, 342, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 37)
Typ = GetType(RefasmTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 343, 1, 343, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("NoOptFlag"))
OptimizeIL.MarkSequencePoint(doc3, 344, 1, 344, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 345, 1, 345, 100)
OptimizeIL.Emit(OpCodes.Br, cont32)
OptimizeIL.MarkLabel(fa32)
OptimizeIL.Emit(OpCodes.Br, cont32)
OptimizeIL.MarkLabel(cont32)
OptimizeIL.MarkSequencePoint(doc3, 347, 1, 347, 100)
Dim typ33(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ33(UBound(typ33) + 1)
typ33(UBound(typ33)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "#debug")
Typ = GetType(System.String)
ReDim Preserve typ33(UBound(typ33) + 1)
typ33(UBound(typ33)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ33))
Typ = GetType(String).GetMethod("Compare", typ33).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 349, 1, 349, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa33 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru33 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont33 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru33)
OptimizeIL.Emit(OpCodes.Br, fa33)
OptimizeIL.MarkLabel(tru33)
OptimizeIL.MarkSequencePoint(doc3, 350, 1, 350, 100)
Dim locbldr38 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(DebugTok))
locbldr38.SetLocalSymInfo("dgtk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(DebugTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 38)
OptimizeIL.MarkSequencePoint(doc3, 351, 1, 351, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(DebugTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DebugTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 352, 1, 352, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(DebugTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DebugTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 353, 1, 353, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(DebugTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 354, 1, 354, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 355, 1, 355, 100)
OptimizeIL.Emit(OpCodes.Br, cont33)
OptimizeIL.MarkLabel(fa33)
OptimizeIL.Emit(OpCodes.Br, cont33)
OptimizeIL.MarkLabel(cont33)
OptimizeIL.MarkSequencePoint(doc3, 357, 1, 357, 100)
Dim typ34(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ34(UBound(typ34) + 1)
typ34(UBound(typ34)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "import")
Typ = GetType(System.String)
ReDim Preserve typ34(UBound(typ34) + 1)
typ34(UBound(typ34)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ34))
Typ = GetType(String).GetMethod("Compare", typ34).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 359, 1, 359, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa34 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru34 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont34 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru34)
OptimizeIL.Emit(OpCodes.Br, fa34)
OptimizeIL.MarkLabel(tru34)
OptimizeIL.MarkSequencePoint(doc3, 360, 1, 360, 100)
Dim locbldr39 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(ImportTok))
locbldr39.SetLocalSymInfo("imptk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(ImportTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 39)
OptimizeIL.MarkSequencePoint(doc3, 361, 1, 361, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(ImportTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ImportTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 362, 1, 362, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(ImportTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ImportTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 363, 1, 363, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(ImportTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 364, 1, 364, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("NoOptFlag"))
OptimizeIL.MarkSequencePoint(doc3, 365, 1, 365, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 366, 1, 366, 100)
OptimizeIL.Emit(OpCodes.Br, cont34)
OptimizeIL.MarkLabel(fa34)
OptimizeIL.Emit(OpCodes.Br, cont34)
OptimizeIL.MarkLabel(cont34)
OptimizeIL.MarkSequencePoint(doc3, 368, 1, 368, 100)
Dim typ35(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ35(UBound(typ35) + 1)
typ35(UBound(typ35)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "locimport")
Typ = GetType(System.String)
ReDim Preserve typ35(UBound(typ35) + 1)
typ35(UBound(typ35)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ35))
Typ = GetType(String).GetMethod("Compare", typ35).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 370, 1, 370, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa35 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru35 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont35 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru35)
OptimizeIL.Emit(OpCodes.Br, fa35)
OptimizeIL.MarkLabel(tru35)
OptimizeIL.MarkSequencePoint(doc3, 371, 1, 371, 100)
Dim locbldr40 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(LocimportTok))
locbldr40.SetLocalSymInfo("limptk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(LocimportTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 40)
OptimizeIL.MarkSequencePoint(doc3, 372, 1, 372, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(LocimportTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(LocimportTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 373, 1, 373, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(LocimportTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(LocimportTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 374, 1, 374, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(LocimportTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 375, 1, 375, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("NoOptFlag"))
OptimizeIL.MarkSequencePoint(doc3, 376, 1, 376, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 377, 1, 377, 100)
OptimizeIL.Emit(OpCodes.Br, cont35)
OptimizeIL.MarkLabel(fa35)
OptimizeIL.Emit(OpCodes.Br, cont35)
OptimizeIL.MarkLabel(cont35)
OptimizeIL.MarkSequencePoint(doc3, 379, 1, 379, 100)
Dim typ36(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ36(UBound(typ36) + 1)
typ36(UBound(typ36)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "assembly")
Typ = GetType(System.String)
ReDim Preserve typ36(UBound(typ36) + 1)
typ36(UBound(typ36)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ36))
Typ = GetType(String).GetMethod("Compare", typ36).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 381, 1, 381, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa36 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru36 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont36 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru36)
OptimizeIL.Emit(OpCodes.Br, fa36)
OptimizeIL.MarkLabel(tru36)
OptimizeIL.MarkSequencePoint(doc3, 382, 1, 382, 100)
Dim locbldr41 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(AssemblyTok))
locbldr41.SetLocalSymInfo("asmtk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(AssemblyTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 41)
OptimizeIL.MarkSequencePoint(doc3, 383, 1, 383, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(AssemblyTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(AssemblyTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 384, 1, 384, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(AssemblyTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(AssemblyTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 385, 1, 385, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(AssemblyTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 386, 1, 386, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 387, 1, 387, 100)
OptimizeIL.Emit(OpCodes.Br, cont36)
OptimizeIL.MarkLabel(fa36)
OptimizeIL.Emit(OpCodes.Br, cont36)
OptimizeIL.MarkLabel(cont36)
OptimizeIL.MarkSequencePoint(doc3, 389, 1, 389, 100)
Dim typ37(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ37(UBound(typ37) + 1)
typ37(UBound(typ37)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "ver")
Typ = GetType(System.String)
ReDim Preserve typ37(UBound(typ37) + 1)
typ37(UBound(typ37)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ37))
Typ = GetType(String).GetMethod("Compare", typ37).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 391, 1, 391, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa37 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru37 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont37 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru37)
OptimizeIL.Emit(OpCodes.Br, fa37)
OptimizeIL.MarkLabel(tru37)
OptimizeIL.MarkSequencePoint(doc3, 392, 1, 392, 100)
Dim locbldr42 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(VerTok))
locbldr42.SetLocalSymInfo("vertk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(VerTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 42)
OptimizeIL.MarkSequencePoint(doc3, 393, 1, 393, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(VerTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(VerTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 394, 1, 394, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(VerTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(VerTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 395, 1, 395, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(VerTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 396, 1, 396, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("NoOptFlag"))
OptimizeIL.MarkSequencePoint(doc3, 397, 1, 397, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 398, 1, 398, 100)
OptimizeIL.Emit(OpCodes.Br, cont37)
OptimizeIL.MarkLabel(fa37)
OptimizeIL.Emit(OpCodes.Br, cont37)
OptimizeIL.MarkLabel(cont37)
OptimizeIL.MarkSequencePoint(doc3, 400, 1, 400, 100)
Dim typ38(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ38(UBound(typ38) + 1)
typ38(UBound(typ38)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "on")
Typ = GetType(System.String)
ReDim Preserve typ38(UBound(typ38) + 1)
typ38(UBound(typ38)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ38))
Typ = GetType(String).GetMethod("Compare", typ38).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 402, 1, 402, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa38 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru38 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont38 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru38)
OptimizeIL.Emit(OpCodes.Br, fa38)
OptimizeIL.MarkLabel(tru38)
OptimizeIL.MarkSequencePoint(doc3, 403, 1, 403, 100)
Dim locbldr43 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(OnTok))
locbldr43.SetLocalSymInfo("ontk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(OnTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 43)
OptimizeIL.MarkSequencePoint(doc3, 404, 1, 404, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 43)
Typ = GetType(OnTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(OnTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 405, 1, 405, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 43)
Typ = GetType(OnTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(OnTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 406, 1, 406, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 43)
Typ = GetType(OnTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 407, 1, 407, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 408, 1, 408, 100)
OptimizeIL.Emit(OpCodes.Br, cont38)
OptimizeIL.MarkLabel(fa38)
OptimizeIL.Emit(OpCodes.Br, cont38)
OptimizeIL.MarkLabel(cont38)
OptimizeIL.MarkSequencePoint(doc3, 410, 1, 410, 100)
Dim typ39(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ39(UBound(typ39) + 1)
typ39(UBound(typ39)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "off")
Typ = GetType(System.String)
ReDim Preserve typ39(UBound(typ39) + 1)
typ39(UBound(typ39)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ39))
Typ = GetType(String).GetMethod("Compare", typ39).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 412, 1, 412, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa39 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru39 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont39 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru39)
OptimizeIL.Emit(OpCodes.Br, fa39)
OptimizeIL.MarkLabel(tru39)
OptimizeIL.MarkSequencePoint(doc3, 413, 1, 413, 100)
Dim locbldr44 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(OffTok))
locbldr44.SetLocalSymInfo("oftk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(OffTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 44)
OptimizeIL.MarkSequencePoint(doc3, 414, 1, 414, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 44)
Typ = GetType(OffTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(OffTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 415, 1, 415, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 44)
Typ = GetType(OffTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(OffTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 416, 1, 416, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 44)
Typ = GetType(OffTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 417, 1, 417, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 418, 1, 418, 100)
OptimizeIL.Emit(OpCodes.Br, cont39)
OptimizeIL.MarkLabel(fa39)
OptimizeIL.Emit(OpCodes.Br, cont39)
OptimizeIL.MarkLabel(cont39)
OptimizeIL.MarkSequencePoint(doc3, 420, 1, 420, 100)
Dim typ40(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ40(UBound(typ40) + 1)
typ40(UBound(typ40)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "exe")
Typ = GetType(System.String)
ReDim Preserve typ40(UBound(typ40) + 1)
typ40(UBound(typ40)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ40))
Typ = GetType(String).GetMethod("Compare", typ40).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 422, 1, 422, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa40 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru40 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont40 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru40)
OptimizeIL.Emit(OpCodes.Br, fa40)
OptimizeIL.MarkLabel(tru40)
OptimizeIL.MarkSequencePoint(doc3, 423, 1, 423, 100)
Dim locbldr45 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(ExeTok))
locbldr45.SetLocalSymInfo("extk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(ExeTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 45)
OptimizeIL.MarkSequencePoint(doc3, 424, 1, 424, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(ExeTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ExeTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 425, 1, 425, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(ExeTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ExeTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 426, 1, 426, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(ExeTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 427, 1, 427, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 428, 1, 428, 100)
OptimizeIL.Emit(OpCodes.Br, cont40)
OptimizeIL.MarkLabel(fa40)
OptimizeIL.Emit(OpCodes.Br, cont40)
OptimizeIL.MarkLabel(cont40)
OptimizeIL.MarkSequencePoint(doc3, 430, 1, 430, 100)
Dim typ41(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ41(UBound(typ41) + 1)
typ41(UBound(typ41)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "dll")
Typ = GetType(System.String)
ReDim Preserve typ41(UBound(typ41) + 1)
typ41(UBound(typ41)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ41))
Typ = GetType(String).GetMethod("Compare", typ41).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 432, 1, 432, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa41 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru41 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont41 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru41)
OptimizeIL.Emit(OpCodes.Br, fa41)
OptimizeIL.MarkLabel(tru41)
OptimizeIL.MarkSequencePoint(doc3, 433, 1, 433, 100)
Dim locbldr46 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(DllTok))
locbldr46.SetLocalSymInfo("dltk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(DllTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 46)
OptimizeIL.MarkSequencePoint(doc3, 434, 1, 434, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 46)
Typ = GetType(DllTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DllTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 435, 1, 435, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 46)
Typ = GetType(DllTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DllTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 436, 1, 436, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 46)
Typ = GetType(DllTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 437, 1, 437, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 438, 1, 438, 100)
OptimizeIL.Emit(OpCodes.Br, cont41)
OptimizeIL.MarkLabel(fa41)
OptimizeIL.Emit(OpCodes.Br, cont41)
OptimizeIL.MarkLabel(cont41)
OptimizeIL.MarkSequencePoint(doc3, 440, 1, 440, 100)
Dim typ42(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ42(UBound(typ42) + 1)
typ42(UBound(typ42)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "class")
Typ = GetType(System.String)
ReDim Preserve typ42(UBound(typ42) + 1)
typ42(UBound(typ42)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ42))
Typ = GetType(String).GetMethod("Compare", typ42).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 442, 1, 442, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa42 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru42 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont42 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru42)
OptimizeIL.Emit(OpCodes.Br, fa42)
OptimizeIL.MarkLabel(tru42)
OptimizeIL.MarkSequencePoint(doc3, 443, 1, 443, 100)
Dim locbldr47 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(ClassTok))
locbldr47.SetLocalSymInfo("cltk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(ClassTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 47)
OptimizeIL.MarkSequencePoint(doc3, 444, 1, 444, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 47)
Typ = GetType(ClassTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ClassTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 445, 1, 445, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 47)
Typ = GetType(ClassTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ClassTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 446, 1, 446, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 47)
Typ = GetType(ClassTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 447, 1, 447, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 448, 1, 448, 100)
OptimizeIL.Emit(OpCodes.Br, cont42)
OptimizeIL.MarkLabel(fa42)
OptimizeIL.Emit(OpCodes.Br, cont42)
OptimizeIL.MarkLabel(cont42)
OptimizeIL.MarkSequencePoint(doc3, 450, 1, 450, 100)
Dim typ43(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ43(UBound(typ43) + 1)
typ43(UBound(typ43)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "extends")
Typ = GetType(System.String)
ReDim Preserve typ43(UBound(typ43) + 1)
typ43(UBound(typ43)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ43))
Typ = GetType(String).GetMethod("Compare", typ43).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 452, 1, 452, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa43 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru43 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont43 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru43)
OptimizeIL.Emit(OpCodes.Br, fa43)
OptimizeIL.MarkLabel(tru43)
OptimizeIL.MarkSequencePoint(doc3, 453, 1, 453, 100)
Dim locbldr48 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(ExtendsTok))
locbldr48.SetLocalSymInfo("exttk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(ExtendsTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 48)
OptimizeIL.MarkSequencePoint(doc3, 454, 1, 454, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 48)
Typ = GetType(ExtendsTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ExtendsTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 455, 1, 455, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 48)
Typ = GetType(ExtendsTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ExtendsTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 456, 1, 456, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 48)
Typ = GetType(ExtendsTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 457, 1, 457, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 458, 1, 458, 100)
OptimizeIL.Emit(OpCodes.Br, cont43)
OptimizeIL.MarkLabel(fa43)
OptimizeIL.Emit(OpCodes.Br, cont43)
OptimizeIL.MarkLabel(cont43)
OptimizeIL.MarkSequencePoint(doc3, 460, 1, 460, 100)
Dim typ44(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ44(UBound(typ44) + 1)
typ44(UBound(typ44)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "method")
Typ = GetType(System.String)
ReDim Preserve typ44(UBound(typ44) + 1)
typ44(UBound(typ44)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ44))
Typ = GetType(String).GetMethod("Compare", typ44).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 462, 1, 462, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa44 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru44 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont44 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru44)
OptimizeIL.Emit(OpCodes.Br, fa44)
OptimizeIL.MarkLabel(tru44)
OptimizeIL.MarkSequencePoint(doc3, 463, 1, 463, 100)
Dim locbldr49 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(MethodTok))
locbldr49.SetLocalSymInfo("mettk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(MethodTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 49)
OptimizeIL.MarkSequencePoint(doc3, 464, 1, 464, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 49)
Typ = GetType(MethodTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(MethodTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 465, 1, 465, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 49)
Typ = GetType(MethodTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(MethodTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 466, 1, 466, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 49)
Typ = GetType(MethodTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 467, 1, 467, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 468, 1, 468, 100)
OptimizeIL.Emit(OpCodes.Br, cont44)
OptimizeIL.MarkLabel(fa44)
OptimizeIL.Emit(OpCodes.Br, cont44)
OptimizeIL.MarkLabel(cont44)
OptimizeIL.MarkSequencePoint(doc3, 470, 1, 470, 100)
Dim typ45(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ45(UBound(typ45) + 1)
typ45(UBound(typ45)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "end")
Typ = GetType(System.String)
ReDim Preserve typ45(UBound(typ45) + 1)
typ45(UBound(typ45)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ45))
Typ = GetType(String).GetMethod("Compare", typ45).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 472, 1, 472, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa45 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru45 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont45 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru45)
OptimizeIL.Emit(OpCodes.Br, fa45)
OptimizeIL.MarkLabel(tru45)
OptimizeIL.MarkSequencePoint(doc3, 473, 1, 473, 100)
Dim locbldr50 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(EndTok))
locbldr50.SetLocalSymInfo("entk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(EndTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 50)
OptimizeIL.MarkSequencePoint(doc3, 474, 1, 474, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 50)
Typ = GetType(EndTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(EndTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 475, 1, 475, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 50)
Typ = GetType(EndTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(EndTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 476, 1, 476, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 50)
Typ = GetType(EndTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 477, 1, 477, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 478, 1, 478, 100)
OptimizeIL.Emit(OpCodes.Br, cont45)
OptimizeIL.MarkLabel(fa45)
OptimizeIL.Emit(OpCodes.Br, cont45)
OptimizeIL.MarkLabel(cont45)
OptimizeIL.MarkSequencePoint(doc3, 480, 1, 480, 100)
Dim typ46(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ46(UBound(typ46) + 1)
typ46(UBound(typ46)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "var")
Typ = GetType(System.String)
ReDim Preserve typ46(UBound(typ46) + 1)
typ46(UBound(typ46)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ46))
Typ = GetType(String).GetMethod("Compare", typ46).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 482, 1, 482, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa46 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru46 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont46 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru46)
OptimizeIL.Emit(OpCodes.Br, fa46)
OptimizeIL.MarkLabel(tru46)
OptimizeIL.MarkSequencePoint(doc3, 483, 1, 483, 100)
Dim locbldr51 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(VarTok))
locbldr51.SetLocalSymInfo("vrtk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(VarTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 51)
OptimizeIL.MarkSequencePoint(doc3, 484, 1, 484, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 51)
Typ = GetType(VarTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(VarTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 485, 1, 485, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 51)
Typ = GetType(VarTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(VarTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 486, 1, 486, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 51)
Typ = GetType(VarTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 487, 1, 487, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 488, 1, 488, 100)
OptimizeIL.Emit(OpCodes.Br, cont46)
OptimizeIL.MarkLabel(fa46)
OptimizeIL.Emit(OpCodes.Br, cont46)
OptimizeIL.MarkLabel(cont46)
OptimizeIL.MarkSequencePoint(doc3, 490, 1, 490, 100)
Dim typ47(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ47(UBound(typ47) + 1)
typ47(UBound(typ47)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "as")
Typ = GetType(System.String)
ReDim Preserve typ47(UBound(typ47) + 1)
typ47(UBound(typ47)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ47))
Typ = GetType(String).GetMethod("Compare", typ47).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 492, 1, 492, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa47 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru47 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont47 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru47)
OptimizeIL.Emit(OpCodes.Br, fa47)
OptimizeIL.MarkLabel(tru47)
OptimizeIL.MarkSequencePoint(doc3, 493, 1, 493, 100)
Dim locbldr52 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(AsTok))
locbldr52.SetLocalSymInfo("astk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(AsTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 52)
OptimizeIL.MarkSequencePoint(doc3, 494, 1, 494, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(AsTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(AsTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 495, 1, 495, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(AsTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(AsTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 496, 1, 496, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(AsTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 497, 1, 497, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 498, 1, 498, 100)
OptimizeIL.Emit(OpCodes.Br, cont47)
OptimizeIL.MarkLabel(fa47)
OptimizeIL.Emit(OpCodes.Br, cont47)
OptimizeIL.MarkLabel(cont47)
OptimizeIL.MarkSequencePoint(doc3, 501, 1, 501, 100)
Dim typ48(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ48(UBound(typ48) + 1)
typ48(UBound(typ48)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "private")
Typ = GetType(System.String)
ReDim Preserve typ48(UBound(typ48) + 1)
typ48(UBound(typ48)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ48))
Typ = GetType(String).GetMethod("Compare", typ48).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 503, 1, 503, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa48 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru48 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont48 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru48)
OptimizeIL.Emit(OpCodes.Br, fa48)
OptimizeIL.MarkLabel(tru48)
OptimizeIL.MarkSequencePoint(doc3, 504, 1, 504, 100)
Dim locbldr53 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(PrivateAttr))
locbldr53.SetLocalSymInfo("privattr")
OptimizeIL.Emit(OpCodes.Newobj, GetType(PrivateAttr).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 53)
OptimizeIL.MarkSequencePoint(doc3, 505, 1, 505, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 53)
Typ = GetType(PrivateAttr)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(PrivateAttr).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 506, 1, 506, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 53)
Typ = GetType(PrivateAttr)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(PrivateAttr).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 507, 1, 507, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 53)
Typ = GetType(PrivateAttr)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 508, 1, 508, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 509, 1, 509, 100)
OptimizeIL.Emit(OpCodes.Br, cont48)
OptimizeIL.MarkLabel(fa48)
OptimizeIL.Emit(OpCodes.Br, cont48)
OptimizeIL.MarkLabel(cont48)
OptimizeIL.MarkSequencePoint(doc3, 511, 1, 511, 100)
Dim typ49(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ49(UBound(typ49) + 1)
typ49(UBound(typ49)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "public")
Typ = GetType(System.String)
ReDim Preserve typ49(UBound(typ49) + 1)
typ49(UBound(typ49)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ49))
Typ = GetType(String).GetMethod("Compare", typ49).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 513, 1, 513, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa49 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru49 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont49 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru49)
OptimizeIL.Emit(OpCodes.Br, fa49)
OptimizeIL.MarkLabel(tru49)
OptimizeIL.MarkSequencePoint(doc3, 514, 1, 514, 100)
Dim locbldr54 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(PublicAttr))
locbldr54.SetLocalSymInfo("pubattr")
OptimizeIL.Emit(OpCodes.Newobj, GetType(PublicAttr).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 54)
OptimizeIL.MarkSequencePoint(doc3, 515, 1, 515, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 54)
Typ = GetType(PublicAttr)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(PublicAttr).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 516, 1, 516, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 54)
Typ = GetType(PublicAttr)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(PublicAttr).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 517, 1, 517, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 54)
Typ = GetType(PublicAttr)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 518, 1, 518, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 519, 1, 519, 100)
OptimizeIL.Emit(OpCodes.Br, cont49)
OptimizeIL.MarkLabel(fa49)
OptimizeIL.Emit(OpCodes.Br, cont49)
OptimizeIL.MarkLabel(cont49)
OptimizeIL.MarkSequencePoint(doc3, 521, 1, 521, 100)
Dim typ50(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ50(UBound(typ50) + 1)
typ50(UBound(typ50)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "static")
Typ = GetType(System.String)
ReDim Preserve typ50(UBound(typ50) + 1)
typ50(UBound(typ50)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ50))
Typ = GetType(String).GetMethod("Compare", typ50).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 523, 1, 523, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa50 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru50 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont50 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru50)
OptimizeIL.Emit(OpCodes.Br, fa50)
OptimizeIL.MarkLabel(tru50)
OptimizeIL.MarkSequencePoint(doc3, 524, 1, 524, 100)
Dim locbldr55 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(StaticAttr))
locbldr55.SetLocalSymInfo("statattr")
OptimizeIL.Emit(OpCodes.Newobj, GetType(StaticAttr).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 55)
OptimizeIL.MarkSequencePoint(doc3, 525, 1, 525, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 55)
Typ = GetType(StaticAttr)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(StaticAttr).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 526, 1, 526, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 55)
Typ = GetType(StaticAttr)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(StaticAttr).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 527, 1, 527, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 55)
Typ = GetType(StaticAttr)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 528, 1, 528, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 529, 1, 529, 100)
OptimizeIL.Emit(OpCodes.Br, cont50)
OptimizeIL.MarkLabel(fa50)
OptimizeIL.Emit(OpCodes.Br, cont50)
OptimizeIL.MarkLabel(cont50)
OptimizeIL.MarkSequencePoint(doc3, 531, 1, 531, 100)
Dim typ51(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ51(UBound(typ51) + 1)
typ51(UBound(typ51)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "auto")
Typ = GetType(System.String)
ReDim Preserve typ51(UBound(typ51) + 1)
typ51(UBound(typ51)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ51))
Typ = GetType(String).GetMethod("Compare", typ51).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 533, 1, 533, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa51 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru51 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont51 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru51)
OptimizeIL.Emit(OpCodes.Br, fa51)
OptimizeIL.MarkLabel(tru51)
OptimizeIL.MarkSequencePoint(doc3, 534, 1, 534, 100)
Dim locbldr56 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(AutoLayoutAttr))
locbldr56.SetLocalSymInfo("autattr")
OptimizeIL.Emit(OpCodes.Newobj, GetType(AutoLayoutAttr).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 56)
OptimizeIL.MarkSequencePoint(doc3, 535, 1, 535, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 56)
Typ = GetType(AutoLayoutAttr)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(AutoLayoutAttr).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 536, 1, 536, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 56)
Typ = GetType(AutoLayoutAttr)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(AutoLayoutAttr).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 537, 1, 537, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 56)
Typ = GetType(AutoLayoutAttr)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 538, 1, 538, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 539, 1, 539, 100)
OptimizeIL.Emit(OpCodes.Br, cont51)
OptimizeIL.MarkLabel(fa51)
OptimizeIL.Emit(OpCodes.Br, cont51)
OptimizeIL.MarkLabel(cont51)
OptimizeIL.MarkSequencePoint(doc3, 541, 1, 541, 100)
Dim typ52(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ52(UBound(typ52) + 1)
typ52(UBound(typ52)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "autochar")
Typ = GetType(System.String)
ReDim Preserve typ52(UBound(typ52) + 1)
typ52(UBound(typ52)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ52))
Typ = GetType(String).GetMethod("Compare", typ52).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 543, 1, 543, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa52 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru52 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont52 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru52)
OptimizeIL.Emit(OpCodes.Br, fa52)
OptimizeIL.MarkLabel(tru52)
OptimizeIL.MarkSequencePoint(doc3, 544, 1, 544, 100)
Dim locbldr57 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(AutoClassAttr))
locbldr57.SetLocalSymInfo("autcattr")
OptimizeIL.Emit(OpCodes.Newobj, GetType(AutoClassAttr).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 57)
OptimizeIL.MarkSequencePoint(doc3, 545, 1, 545, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 57)
Typ = GetType(AutoClassAttr)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(AutoClassAttr).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 546, 1, 546, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 57)
Typ = GetType(AutoClassAttr)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(AutoClassAttr).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 547, 1, 547, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 57)
Typ = GetType(AutoClassAttr)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 548, 1, 548, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 549, 1, 549, 100)
OptimizeIL.Emit(OpCodes.Br, cont52)
OptimizeIL.MarkLabel(fa52)
OptimizeIL.Emit(OpCodes.Br, cont52)
OptimizeIL.MarkLabel(cont52)
OptimizeIL.MarkSequencePoint(doc3, 551, 1, 551, 100)
Dim typ53(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ53(UBound(typ53) + 1)
typ53(UBound(typ53)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "ansi")
Typ = GetType(System.String)
ReDim Preserve typ53(UBound(typ53) + 1)
typ53(UBound(typ53)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ53))
Typ = GetType(String).GetMethod("Compare", typ53).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 553, 1, 553, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa53 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru53 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont53 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru53)
OptimizeIL.Emit(OpCodes.Br, fa53)
OptimizeIL.MarkLabel(tru53)
OptimizeIL.MarkSequencePoint(doc3, 554, 1, 554, 100)
Dim locbldr58 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(AnsiClassAttr))
locbldr58.SetLocalSymInfo("ansattr")
OptimizeIL.Emit(OpCodes.Newobj, GetType(AnsiClassAttr).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 58)
OptimizeIL.MarkSequencePoint(doc3, 555, 1, 555, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 58)
Typ = GetType(AnsiClassAttr)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(AnsiClassAttr).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 556, 1, 556, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 58)
Typ = GetType(AnsiClassAttr)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(AnsiClassAttr).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 557, 1, 557, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 58)
Typ = GetType(AnsiClassAttr)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 558, 1, 558, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 559, 1, 559, 100)
OptimizeIL.Emit(OpCodes.Br, cont53)
OptimizeIL.MarkLabel(fa53)
OptimizeIL.Emit(OpCodes.Br, cont53)
OptimizeIL.MarkLabel(cont53)
OptimizeIL.MarkSequencePoint(doc3, 561, 1, 561, 100)
Dim typ54(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ54(UBound(typ54) + 1)
typ54(UBound(typ54)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "beforefieldinit")
Typ = GetType(System.String)
ReDim Preserve typ54(UBound(typ54) + 1)
typ54(UBound(typ54)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ54))
Typ = GetType(String).GetMethod("Compare", typ54).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 563, 1, 563, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa54 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru54 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont54 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru54)
OptimizeIL.Emit(OpCodes.Br, fa54)
OptimizeIL.MarkLabel(tru54)
OptimizeIL.MarkSequencePoint(doc3, 564, 1, 564, 100)
Dim locbldr59 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(BeforeFieldInitAttr))
locbldr59.SetLocalSymInfo("bfiattr")
OptimizeIL.Emit(OpCodes.Newobj, GetType(BeforeFieldInitAttr).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 59)
OptimizeIL.MarkSequencePoint(doc3, 565, 1, 565, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 59)
Typ = GetType(BeforeFieldInitAttr)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(BeforeFieldInitAttr).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 566, 1, 566, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 59)
Typ = GetType(BeforeFieldInitAttr)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(BeforeFieldInitAttr).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 567, 1, 567, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 59)
Typ = GetType(BeforeFieldInitAttr)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 568, 1, 568, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 569, 1, 569, 100)
OptimizeIL.Emit(OpCodes.Br, cont54)
OptimizeIL.MarkLabel(fa54)
OptimizeIL.Emit(OpCodes.Br, cont54)
OptimizeIL.MarkLabel(cont54)
OptimizeIL.MarkSequencePoint(doc3, 571, 1, 571, 100)
Dim typ55(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ55(UBound(typ55) + 1)
typ55(UBound(typ55)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "string")
Typ = GetType(System.String)
ReDim Preserve typ55(UBound(typ55) + 1)
typ55(UBound(typ55)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ55))
Typ = GetType(String).GetMethod("Compare", typ55).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 573, 1, 573, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa55 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru55 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont55 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru55)
OptimizeIL.Emit(OpCodes.Br, fa55)
OptimizeIL.MarkLabel(tru55)
OptimizeIL.MarkSequencePoint(doc3, 574, 1, 574, 100)
Dim locbldr60 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(StringTok))
locbldr60.SetLocalSymInfo("strtok")
OptimizeIL.Emit(OpCodes.Newobj, GetType(StringTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 60)
OptimizeIL.MarkSequencePoint(doc3, 575, 1, 575, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 60)
Typ = GetType(StringTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(StringTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 576, 1, 576, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 60)
Typ = GetType(StringTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(StringTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 577, 1, 577, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 60)
Typ = GetType(StringTok)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(System.String))
Dim typ56 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ56))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ56).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(StringTok).GetField("RefTyp"))
OptimizeIL.MarkSequencePoint(doc3, 578, 1, 578, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 60)
Typ = GetType(StringTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 579, 1, 579, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 580, 1, 580, 100)
OptimizeIL.Emit(OpCodes.Br, cont55)
OptimizeIL.MarkLabel(fa55)
OptimizeIL.Emit(OpCodes.Br, cont55)
OptimizeIL.MarkLabel(cont55)
OptimizeIL.MarkSequencePoint(doc3, 582, 1, 582, 100)
Dim typ57(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ57(UBound(typ57) + 1)
typ57(UBound(typ57)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "void")
Typ = GetType(System.String)
ReDim Preserve typ57(UBound(typ57) + 1)
typ57(UBound(typ57)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ57))
Typ = GetType(String).GetMethod("Compare", typ57).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 584, 1, 584, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa56 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru56 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont56 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru56)
OptimizeIL.Emit(OpCodes.Br, fa56)
OptimizeIL.MarkLabel(tru56)
OptimizeIL.MarkSequencePoint(doc3, 585, 1, 585, 100)
Dim locbldr61 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(VoidTok))
locbldr61.SetLocalSymInfo("voidtok")
OptimizeIL.Emit(OpCodes.Newobj, GetType(VoidTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 61)
OptimizeIL.MarkSequencePoint(doc3, 586, 1, 586, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 61)
Typ = GetType(VoidTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(VoidTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 587, 1, 587, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 61)
Typ = GetType(VoidTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(VoidTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 588, 1, 588, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 61)
Typ = GetType(VoidTok)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(System.Void))
Dim typ58 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ58))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ58).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(VoidTok).GetField("RefTyp"))
OptimizeIL.MarkSequencePoint(doc3, 589, 1, 589, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 61)
Typ = GetType(VoidTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 590, 1, 590, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 591, 1, 591, 100)
OptimizeIL.Emit(OpCodes.Br, cont56)
OptimizeIL.MarkLabel(fa56)
OptimizeIL.Emit(OpCodes.Br, cont56)
OptimizeIL.MarkLabel(cont56)
OptimizeIL.MarkSequencePoint(doc3, 593, 1, 593, 100)
Dim typ59(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ59(UBound(typ59) + 1)
typ59(UBound(typ59)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "integer")
Typ = GetType(System.String)
ReDim Preserve typ59(UBound(typ59) + 1)
typ59(UBound(typ59)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ59))
Typ = GetType(String).GetMethod("Compare", typ59).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 595, 1, 595, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa57 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru57 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont57 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru57)
OptimizeIL.Emit(OpCodes.Br, fa57)
OptimizeIL.MarkLabel(tru57)
OptimizeIL.MarkSequencePoint(doc3, 596, 1, 596, 100)
Dim locbldr62 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(IntegerTok))
locbldr62.SetLocalSymInfo("inttok")
OptimizeIL.Emit(OpCodes.Newobj, GetType(IntegerTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 62)
OptimizeIL.MarkSequencePoint(doc3, 597, 1, 597, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 62)
Typ = GetType(IntegerTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(IntegerTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 598, 1, 598, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 62)
Typ = GetType(IntegerTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(IntegerTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 599, 1, 599, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 62)
Typ = GetType(IntegerTok)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(System.Int32))
Dim typ60 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ60))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ60).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(IntegerTok).GetField("RefTyp"))
OptimizeIL.MarkSequencePoint(doc3, 600, 1, 600, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 62)
Typ = GetType(IntegerTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 601, 1, 601, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 602, 1, 602, 100)
OptimizeIL.Emit(OpCodes.Br, cont57)
OptimizeIL.MarkLabel(fa57)
OptimizeIL.Emit(OpCodes.Br, cont57)
OptimizeIL.MarkLabel(cont57)
OptimizeIL.MarkSequencePoint(doc3, 604, 1, 604, 100)
Dim typ61(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ61(UBound(typ61) + 1)
typ61(UBound(typ61)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "double")
Typ = GetType(System.String)
ReDim Preserve typ61(UBound(typ61) + 1)
typ61(UBound(typ61)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ61))
Typ = GetType(String).GetMethod("Compare", typ61).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 606, 1, 606, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa58 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru58 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont58 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru58)
OptimizeIL.Emit(OpCodes.Br, fa58)
OptimizeIL.MarkLabel(tru58)
OptimizeIL.MarkSequencePoint(doc3, 607, 1, 607, 100)
Dim locbldr63 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(DoubleTok))
locbldr63.SetLocalSymInfo("dbltok")
OptimizeIL.Emit(OpCodes.Newobj, GetType(DoubleTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 63)
OptimizeIL.MarkSequencePoint(doc3, 608, 1, 608, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 63)
Typ = GetType(DoubleTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DoubleTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 609, 1, 609, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 63)
Typ = GetType(DoubleTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DoubleTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 610, 1, 610, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 63)
Typ = GetType(DoubleTok)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(System.Double))
Dim typ62 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ62))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ62).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DoubleTok).GetField("RefTyp"))
OptimizeIL.MarkSequencePoint(doc3, 611, 1, 611, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 63)
Typ = GetType(DoubleTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 612, 1, 612, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 613, 1, 613, 100)
OptimizeIL.Emit(OpCodes.Br, cont58)
OptimizeIL.MarkLabel(fa58)
OptimizeIL.Emit(OpCodes.Br, cont58)
OptimizeIL.MarkLabel(cont58)
OptimizeIL.MarkSequencePoint(doc3, 615, 1, 615, 100)
Dim typ63(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ63(UBound(typ63) + 1)
typ63(UBound(typ63)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "boolean")
Typ = GetType(System.String)
ReDim Preserve typ63(UBound(typ63) + 1)
typ63(UBound(typ63)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ63))
Typ = GetType(String).GetMethod("Compare", typ63).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 617, 1, 617, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa59 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru59 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont59 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru59)
OptimizeIL.Emit(OpCodes.Br, fa59)
OptimizeIL.MarkLabel(tru59)
OptimizeIL.MarkSequencePoint(doc3, 618, 1, 618, 100)
Dim locbldr64 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(BooleanTok))
locbldr64.SetLocalSymInfo("booltok")
OptimizeIL.Emit(OpCodes.Newobj, GetType(BooleanTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 64)
OptimizeIL.MarkSequencePoint(doc3, 619, 1, 619, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 64)
Typ = GetType(BooleanTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(BooleanTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 620, 1, 620, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 64)
Typ = GetType(BooleanTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(BooleanTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 621, 1, 621, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 64)
Typ = GetType(BooleanTok)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(System.Boolean))
Dim typ64 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ64))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ64).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(BooleanTok).GetField("RefTyp"))
OptimizeIL.MarkSequencePoint(doc3, 622, 1, 622, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 64)
Typ = GetType(BooleanTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 623, 1, 623, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 624, 1, 624, 100)
OptimizeIL.Emit(OpCodes.Br, cont59)
OptimizeIL.MarkLabel(fa59)
OptimizeIL.Emit(OpCodes.Br, cont59)
OptimizeIL.MarkLabel(cont59)
OptimizeIL.MarkSequencePoint(doc3, 626, 1, 626, 100)
Dim typ65(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ65(UBound(typ65) + 1)
typ65(UBound(typ65)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "char")
Typ = GetType(System.String)
ReDim Preserve typ65(UBound(typ65) + 1)
typ65(UBound(typ65)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ65))
Typ = GetType(String).GetMethod("Compare", typ65).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 628, 1, 628, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa60 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru60 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont60 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru60)
OptimizeIL.Emit(OpCodes.Br, fa60)
OptimizeIL.MarkLabel(tru60)
OptimizeIL.MarkSequencePoint(doc3, 629, 1, 629, 100)
Dim locbldr65 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(CharTok))
locbldr65.SetLocalSymInfo("chrtok")
OptimizeIL.Emit(OpCodes.Newobj, GetType(CharTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 65)
OptimizeIL.MarkSequencePoint(doc3, 630, 1, 630, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 65)
Typ = GetType(CharTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(CharTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 631, 1, 631, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 65)
Typ = GetType(CharTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(CharTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 632, 1, 632, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 65)
Typ = GetType(CharTok)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(System.Char))
Dim typ66 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ66))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ66).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(CharTok).GetField("RefTyp"))
OptimizeIL.MarkSequencePoint(doc3, 633, 1, 633, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 65)
Typ = GetType(CharTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 634, 1, 634, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 635, 1, 635, 100)
OptimizeIL.Emit(OpCodes.Br, cont60)
OptimizeIL.MarkLabel(fa60)
OptimizeIL.Emit(OpCodes.Br, cont60)
OptimizeIL.MarkLabel(cont60)
OptimizeIL.MarkSequencePoint(doc3, 637, 1, 637, 100)
Dim typ67(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ67(UBound(typ67) + 1)
typ67(UBound(typ67)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "single")
Typ = GetType(System.String)
ReDim Preserve typ67(UBound(typ67) + 1)
typ67(UBound(typ67)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ67))
Typ = GetType(String).GetMethod("Compare", typ67).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 639, 1, 639, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa61 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru61 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont61 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru61)
OptimizeIL.Emit(OpCodes.Br, fa61)
OptimizeIL.MarkLabel(tru61)
OptimizeIL.MarkSequencePoint(doc3, 640, 1, 640, 100)
Dim locbldr66 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(SingleTok))
locbldr66.SetLocalSymInfo("sngtok")
OptimizeIL.Emit(OpCodes.Newobj, GetType(SingleTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 66)
OptimizeIL.MarkSequencePoint(doc3, 641, 1, 641, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 66)
Typ = GetType(SingleTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(SingleTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 642, 1, 642, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 66)
Typ = GetType(SingleTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(SingleTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 643, 1, 643, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 66)
Typ = GetType(SingleTok)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(System.Single))
Dim typ68 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ68))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ68).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(SingleTok).GetField("RefTyp"))
OptimizeIL.MarkSequencePoint(doc3, 644, 1, 644, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 66)
Typ = GetType(SingleTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 645, 1, 645, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 646, 1, 646, 100)
OptimizeIL.Emit(OpCodes.Br, cont61)
OptimizeIL.MarkLabel(fa61)
OptimizeIL.Emit(OpCodes.Br, cont61)
OptimizeIL.MarkLabel(cont61)
OptimizeIL.MarkSequencePoint(doc3, 649, 1, 649, 100)
Dim typ69(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ69(UBound(typ69) + 1)
typ69(UBound(typ69)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "sbyte")
Typ = GetType(System.String)
ReDim Preserve typ69(UBound(typ69) + 1)
typ69(UBound(typ69)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ69))
Typ = GetType(String).GetMethod("Compare", typ69).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 651, 1, 651, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa62 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru62 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont62 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru62)
OptimizeIL.Emit(OpCodes.Br, fa62)
OptimizeIL.MarkLabel(tru62)
OptimizeIL.MarkSequencePoint(doc3, 652, 1, 652, 100)
Dim locbldr67 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(SByteTok))
locbldr67.SetLocalSymInfo("sbytok")
OptimizeIL.Emit(OpCodes.Newobj, GetType(SByteTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 67)
OptimizeIL.MarkSequencePoint(doc3, 653, 1, 653, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 67)
Typ = GetType(SByteTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(SByteTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 654, 1, 654, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 67)
Typ = GetType(SByteTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(SByteTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 655, 1, 655, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 67)
Typ = GetType(SByteTok)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(System.SByte))
Dim typ70 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ70))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ70).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(SByteTok).GetField("RefTyp"))
OptimizeIL.MarkSequencePoint(doc3, 656, 1, 656, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 67)
Typ = GetType(SByteTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 657, 1, 657, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 658, 1, 658, 100)
OptimizeIL.Emit(OpCodes.Br, cont62)
OptimizeIL.MarkLabel(fa62)
OptimizeIL.Emit(OpCodes.Br, cont62)
OptimizeIL.MarkLabel(cont62)
OptimizeIL.MarkSequencePoint(doc3, 661, 1, 661, 100)
Dim typ71(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ71(UBound(typ71) + 1)
typ71(UBound(typ71)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "short")
Typ = GetType(System.String)
ReDim Preserve typ71(UBound(typ71) + 1)
typ71(UBound(typ71)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ71))
Typ = GetType(String).GetMethod("Compare", typ71).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 663, 1, 663, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa63 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru63 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont63 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru63)
OptimizeIL.Emit(OpCodes.Br, fa63)
OptimizeIL.MarkLabel(tru63)
OptimizeIL.MarkSequencePoint(doc3, 664, 1, 664, 100)
Dim locbldr68 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(ShortTok))
locbldr68.SetLocalSymInfo("shtok")
OptimizeIL.Emit(OpCodes.Newobj, GetType(ShortTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 68)
OptimizeIL.MarkSequencePoint(doc3, 665, 1, 665, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 68)
Typ = GetType(ShortTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ShortTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 666, 1, 666, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 68)
Typ = GetType(ShortTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ShortTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 667, 1, 667, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 68)
Typ = GetType(ShortTok)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(System.Int16))
Dim typ72 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ72))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ72).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ShortTok).GetField("RefTyp"))
OptimizeIL.MarkSequencePoint(doc3, 668, 1, 668, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 68)
Typ = GetType(ShortTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 669, 1, 669, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 670, 1, 670, 100)
OptimizeIL.Emit(OpCodes.Br, cont63)
OptimizeIL.MarkLabel(fa63)
OptimizeIL.Emit(OpCodes.Br, cont63)
OptimizeIL.MarkLabel(cont63)
OptimizeIL.MarkSequencePoint(doc3, 672, 1, 672, 100)
Dim typ73(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ73(UBound(typ73) + 1)
typ73(UBound(typ73)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "long")
Typ = GetType(System.String)
ReDim Preserve typ73(UBound(typ73) + 1)
typ73(UBound(typ73)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ73))
Typ = GetType(String).GetMethod("Compare", typ73).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 674, 1, 674, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa64 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru64 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont64 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru64)
OptimizeIL.Emit(OpCodes.Br, fa64)
OptimizeIL.MarkLabel(tru64)
OptimizeIL.MarkSequencePoint(doc3, 675, 1, 675, 100)
Dim locbldr69 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(LongTok))
locbldr69.SetLocalSymInfo("lngtok")
OptimizeIL.Emit(OpCodes.Newobj, GetType(LongTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 69)
OptimizeIL.MarkSequencePoint(doc3, 676, 1, 676, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 69)
Typ = GetType(LongTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(LongTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 677, 1, 677, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 69)
Typ = GetType(LongTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(LongTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 678, 1, 678, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 69)
Typ = GetType(LongTok)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(System.Int64))
Dim typ74 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ74))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ74).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(LongTok).GetField("RefTyp"))
OptimizeIL.MarkSequencePoint(doc3, 679, 1, 679, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 69)
Typ = GetType(LongTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 680, 1, 680, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 681, 1, 681, 100)
OptimizeIL.Emit(OpCodes.Br, cont64)
OptimizeIL.MarkLabel(fa64)
OptimizeIL.Emit(OpCodes.Br, cont64)
OptimizeIL.MarkLabel(cont64)
OptimizeIL.MarkSequencePoint(doc3, 683, 1, 683, 100)
Dim typ75(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ75(UBound(typ75) + 1)
typ75(UBound(typ75)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "object")
Typ = GetType(System.String)
ReDim Preserve typ75(UBound(typ75) + 1)
typ75(UBound(typ75)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ75))
Typ = GetType(String).GetMethod("Compare", typ75).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 685, 1, 685, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa65 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru65 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont65 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru65)
OptimizeIL.Emit(OpCodes.Br, fa65)
OptimizeIL.MarkLabel(tru65)
OptimizeIL.MarkSequencePoint(doc3, 686, 1, 686, 100)
Dim locbldr70 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(ObjectTok))
locbldr70.SetLocalSymInfo("objtok")
OptimizeIL.Emit(OpCodes.Newobj, GetType(ObjectTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 70)
OptimizeIL.MarkSequencePoint(doc3, 687, 1, 687, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 70)
Typ = GetType(ObjectTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ObjectTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 688, 1, 688, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 70)
Typ = GetType(ObjectTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ObjectTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 689, 1, 689, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 70)
Typ = GetType(ObjectTok)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(System.Object))
Dim typ76 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ76))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ76).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ObjectTok).GetField("RefTyp"))
OptimizeIL.MarkSequencePoint(doc3, 690, 1, 690, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 70)
Typ = GetType(ObjectTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 691, 1, 691, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 692, 1, 692, 100)
OptimizeIL.Emit(OpCodes.Br, cont65)
OptimizeIL.MarkLabel(fa65)
OptimizeIL.Emit(OpCodes.Br, cont65)
OptimizeIL.MarkLabel(cont65)
OptimizeIL.MarkSequencePoint(doc3, 694, 1, 694, 100)
Dim typ77(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ77(UBound(typ77) + 1)
typ77(UBound(typ77)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "//*")
Typ = GetType(System.String)
ReDim Preserve typ77(UBound(typ77) + 1)
typ77(UBound(typ77)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ77))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ77).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 696, 1, 696, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa66 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru66 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont66 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru66)
OptimizeIL.Emit(OpCodes.Br, fa66)
OptimizeIL.MarkLabel(tru66)
OptimizeIL.MarkSequencePoint(doc3, 697, 1, 697, 100)
Dim locbldr71 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(commentTok))
locbldr71.SetLocalSymInfo("comtok")
OptimizeIL.Emit(OpCodes.Newobj, GetType(commentTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 71)
OptimizeIL.MarkSequencePoint(doc3, 698, 1, 698, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 71)
Typ = GetType(commentTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(commentTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 699, 1, 699, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 71)
Typ = GetType(commentTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(commentTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 700, 1, 700, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 71)
Typ = GetType(commentTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 701, 1, 701, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("CmtFlag"))
OptimizeIL.MarkSequencePoint(doc3, 702, 1, 702, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 703, 1, 703, 100)
OptimizeIL.Emit(OpCodes.Br, cont66)
OptimizeIL.MarkLabel(fa66)
OptimizeIL.Emit(OpCodes.Br, cont66)
OptimizeIL.MarkLabel(cont66)
OptimizeIL.MarkSequencePoint(doc3, 705, 1, 705, 100)
Dim typ78(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ78(UBound(typ78) + 1)
typ78(UBound(typ78)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "true")
Typ = GetType(System.String)
ReDim Preserve typ78(UBound(typ78) + 1)
typ78(UBound(typ78)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ78))
Typ = GetType(String).GetMethod("Compare", typ78).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 706, 1, 706, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa67 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru67 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont67 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru67)
OptimizeIL.Emit(OpCodes.Br, fa67)
OptimizeIL.MarkLabel(tru67)
OptimizeIL.MarkSequencePoint(doc3, 707, 1, 707, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 708, 1, 708, 100)
OptimizeIL.Emit(OpCodes.Br, cont67)
OptimizeIL.MarkLabel(fa67)
OptimizeIL.Emit(OpCodes.Br, cont67)
OptimizeIL.MarkLabel(cont67)
OptimizeIL.MarkSequencePoint(doc3, 709, 1, 709, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 710, 1, 710, 100)
Dim typ79(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ79(UBound(typ79) + 1)
typ79(UBound(typ79)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "false")
Typ = GetType(System.String)
ReDim Preserve typ79(UBound(typ79) + 1)
typ79(UBound(typ79)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ79))
Typ = GetType(String).GetMethod("Compare", typ79).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 711, 1, 711, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa68 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru68 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont68 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru68)
OptimizeIL.Emit(OpCodes.Br, fa68)
OptimizeIL.MarkLabel(tru68)
OptimizeIL.MarkSequencePoint(doc3, 712, 1, 712, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 713, 1, 713, 100)
OptimizeIL.Emit(OpCodes.Br, cont68)
OptimizeIL.MarkLabel(fa68)
OptimizeIL.Emit(OpCodes.Br, cont68)
OptimizeIL.MarkLabel(cont68)
OptimizeIL.MarkSequencePoint(doc3, 714, 1, 714, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 716, 1, 716, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa69 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru69 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont69 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru69)
OptimizeIL.Emit(OpCodes.Br, fa69)
OptimizeIL.MarkLabel(tru69)
OptimizeIL.MarkSequencePoint(doc3, 717, 1, 717, 100)
Dim locbldr72 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(BooleanLiteral))
locbldr72.SetLocalSymInfo("boolit")
OptimizeIL.Emit(OpCodes.Newobj, GetType(BooleanLiteral).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 72)
OptimizeIL.MarkSequencePoint(doc3, 718, 1, 718, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 72)
Typ = GetType(BooleanLiteral)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(BooleanLiteral).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 719, 1, 719, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 72)
Typ = GetType(BooleanLiteral)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(BooleanLiteral).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 720, 1, 720, 100)
Dim typ80(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ80(UBound(typ80) + 1)
typ80(UBound(typ80)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "true")
Typ = GetType(System.String)
ReDim Preserve typ80(UBound(typ80) + 1)
typ80(UBound(typ80)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ80))
Typ = GetType(String).GetMethod("Compare", typ80).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 721, 1, 721, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa70 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru70 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont70 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru70)
OptimizeIL.Emit(OpCodes.Br, fa70)
OptimizeIL.MarkLabel(tru70)
OptimizeIL.MarkSequencePoint(doc3, 722, 1, 722, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 72)
Typ = GetType(BooleanLiteral)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stfld, GetType(BooleanLiteral).GetField("BoolVal"))
OptimizeIL.MarkSequencePoint(doc3, 723, 1, 723, 100)
OptimizeIL.Emit(OpCodes.Br, cont70)
OptimizeIL.MarkLabel(fa70)
OptimizeIL.Emit(OpCodes.Br, cont70)
OptimizeIL.MarkLabel(cont70)
OptimizeIL.MarkSequencePoint(doc3, 724, 1, 724, 100)
Dim typ81(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ81(UBound(typ81) + 1)
typ81(UBound(typ81)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "false")
Typ = GetType(System.String)
ReDim Preserve typ81(UBound(typ81) + 1)
typ81(UBound(typ81)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ81))
Typ = GetType(String).GetMethod("Compare", typ81).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 725, 1, 725, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa71 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru71 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont71 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru71)
OptimizeIL.Emit(OpCodes.Br, fa71)
OptimizeIL.MarkLabel(tru71)
OptimizeIL.MarkSequencePoint(doc3, 726, 1, 726, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 72)
Typ = GetType(BooleanLiteral)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stfld, GetType(BooleanLiteral).GetField("BoolVal"))
OptimizeIL.MarkSequencePoint(doc3, 727, 1, 727, 100)
OptimizeIL.Emit(OpCodes.Br, cont71)
OptimizeIL.MarkLabel(fa71)
OptimizeIL.Emit(OpCodes.Br, cont71)
OptimizeIL.MarkLabel(cont71)
OptimizeIL.MarkSequencePoint(doc3, 728, 1, 728, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 72)
Typ = GetType(BooleanLiteral)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 729, 1, 729, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 730, 1, 730, 100)
OptimizeIL.Emit(OpCodes.Br, cont69)
OptimizeIL.MarkLabel(fa69)
OptimizeIL.Emit(OpCodes.Br, cont69)
OptimizeIL.MarkLabel(cont69)
OptimizeIL.MarkSequencePoint(doc3, 732, 1, 732, 100)
Dim typ82(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ82(UBound(typ82) + 1)
typ82(UBound(typ82)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "'*'")
Typ = GetType(System.String)
ReDim Preserve typ82(UBound(typ82) + 1)
typ82(UBound(typ82)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ82))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ82).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 734, 1, 734, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa72 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru72 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont72 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru72)
OptimizeIL.Emit(OpCodes.Br, fa72)
OptimizeIL.MarkLabel(tru72)
OptimizeIL.MarkSequencePoint(doc3, 735, 1, 735, 100)
Dim locbldr73 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(CharLiteral))
locbldr73.SetLocalSymInfo("chrlit")
OptimizeIL.Emit(OpCodes.Newobj, GetType(CharLiteral).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 73)
OptimizeIL.MarkSequencePoint(doc3, 736, 1, 736, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 73)
Typ = GetType(CharLiteral)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(CharLiteral).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 737, 1, 737, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 738, 1, 738, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
OptimizeIL.Emit(OpCodes.Newarr, GetType(System.Char))
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc3, 739, 1, 739, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldstr, "'")
Typ = GetType(System.String)
Dim typ83 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ83))
Typ = GetType(System.Convert).GetMethod("ToChar", typ83).ReturnType
OptimizeIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
OptimizeIL.MarkSequencePoint(doc3, 740, 1, 740, 100)
Dim typ84(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ84(UBound(typ84) + 1)
typ84(UBound(typ84)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Trim", typ84))
Typ = Typ03.GetMethod("Trim", typ84).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 741, 1, 741, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 73)
Typ = GetType(CharLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
OptimizeIL.Emit(OpCodes.Stfld, GetType(CharLiteral).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 742, 1, 742, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 73)
Typ = GetType(CharLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 73)
Typ = GetType(CharLiteral)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(CharLiteral).GetField("Value"))
Typ = GetType(CharLiteral).GetField("Value").FieldType
Dim typ85 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ85))
Typ = GetType(System.Convert).GetMethod("ToChar", typ85).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(CharLiteral).GetField("CharVal"))
OptimizeIL.MarkSequencePoint(doc3, 743, 1, 743, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 73)
Typ = GetType(CharLiteral)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 744, 1, 744, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 745, 1, 745, 100)
OptimizeIL.Emit(OpCodes.Br, cont72)
OptimizeIL.MarkLabel(fa72)
OptimizeIL.Emit(OpCodes.Br, cont72)
OptimizeIL.MarkLabel(cont72)
OptimizeIL.MarkSequencePoint(doc3, 748, 1, 748, 100)
Dim typ86(-1) As Type
OptimizeIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ86(UBound(typ86) + 1)
typ86(UBound(typ86)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "*")
Typ = GetType(System.String)
ReDim Preserve typ86(UBound(typ86) + 1)
typ86(UBound(typ86)) = Typ
OptimizeIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ86(UBound(typ86) + 1)
typ86(UBound(typ86)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ86))
Typ = GetType(String).GetMethod("Concat", typ86).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 749, 1, 749, 100)
Dim typ87(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ87(UBound(typ87) + 1)
typ87(UBound(typ87)) = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReDim Preserve typ87(UBound(typ87) + 1)
typ87(UBound(typ87)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ87))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ87).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 751, 1, 751, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa73 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru73 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont73 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru73)
OptimizeIL.Emit(OpCodes.Br, fa73)
OptimizeIL.MarkLabel(tru73)
OptimizeIL.MarkSequencePoint(doc3, 752, 1, 752, 100)
Dim locbldr74 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(StringLiteral))
locbldr74.SetLocalSymInfo("strlit")
OptimizeIL.Emit(OpCodes.Newobj, GetType(StringLiteral).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 74)
OptimizeIL.MarkSequencePoint(doc3, 753, 1, 753, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 74)
Typ = GetType(StringLiteral)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(StringLiteral).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 754, 1, 754, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 755, 1, 755, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
OptimizeIL.Emit(OpCodes.Newarr, GetType(System.Char))
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc3, 756, 1, 756, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
Dim typ88 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ88))
Typ = GetType(System.Convert).GetMethod("ToChar", typ88).ReturnType
OptimizeIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
OptimizeIL.MarkSequencePoint(doc3, 757, 1, 757, 100)
Dim typ89(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ89(UBound(typ89) + 1)
typ89(UBound(typ89)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Trim", typ89))
Typ = Typ03.GetMethod("Trim", typ89).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 758, 1, 758, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 74)
Typ = GetType(StringLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
OptimizeIL.Emit(OpCodes.Stfld, GetType(StringLiteral).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 759, 1, 759, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 74)
Typ = GetType(StringLiteral)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 760, 1, 760, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 761, 1, 761, 100)
OptimizeIL.Emit(OpCodes.Br, cont73)
OptimizeIL.MarkLabel(fa73)
OptimizeIL.Emit(OpCodes.Br, cont73)
OptimizeIL.MarkLabel(cont73)
OptimizeIL.MarkSequencePoint(doc3, 763, 1, 763, 100)
Dim typ90(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ90(UBound(typ90) + 1)
typ90(UBound(typ90)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "#*.#*")
Typ = GetType(System.String)
ReDim Preserve typ90(UBound(typ90) + 1)
typ90(UBound(typ90)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ90))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ90).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 764, 1, 764, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 765, 1, 765, 100)
Dim typ91(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ91(UBound(typ91) + 1)
typ91(UBound(typ91)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "+#*.#*")
Typ = GetType(System.String)
ReDim Preserve typ91(UBound(typ91) + 1)
typ91(UBound(typ91)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ91))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ91).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 766, 1, 766, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 767, 1, 767, 100)
Dim typ92(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ92(UBound(typ92) + 1)
typ92(UBound(typ92)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "-#*.#*")
Typ = GetType(System.String)
ReDim Preserve typ92(UBound(typ92) + 1)
typ92(UBound(typ92)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ92))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ92).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 768, 1, 768, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 769, 1, 769, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 770, 1, 770, 100)
Dim typ93(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "d")
Typ = GetType(System.String)
ReDim Preserve typ93(UBound(typ93) + 1)
typ93(UBound(typ93)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("EndsWith", typ93))
Typ = Typ03.GetMethod("EndsWith", typ93).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 771, 1, 771, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.And)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 773, 1, 773, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa74 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru74 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont74 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru74)
OptimizeIL.Emit(OpCodes.Br, fa74)
OptimizeIL.MarkLabel(tru74)
OptimizeIL.MarkSequencePoint(doc3, 774, 1, 774, 100)
Dim locbldr75 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(DoubleLiteral))
locbldr75.SetLocalSymInfo("dlit2")
OptimizeIL.Emit(OpCodes.Newobj, GetType(DoubleLiteral).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 75)
OptimizeIL.MarkSequencePoint(doc3, 775, 1, 775, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 75)
Typ = GetType(DoubleLiteral)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DoubleLiteral).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 776, 1, 776, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 777, 1, 777, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
OptimizeIL.Emit(OpCodes.Newarr, GetType(System.Char))
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc3, 778, 1, 778, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldstr, "d")
Typ = GetType(System.String)
Dim typ94 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ94))
Typ = GetType(System.Convert).GetMethod("ToChar", typ94).ReturnType
OptimizeIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
OptimizeIL.MarkSequencePoint(doc3, 779, 1, 779, 100)
Dim typ95(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ95(UBound(typ95) + 1)
typ95(UBound(typ95)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TrimEnd", typ95))
Typ = Typ03.GetMethod("TrimEnd", typ95).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 780, 1, 780, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 75)
Typ = GetType(DoubleLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
OptimizeIL.Emit(OpCodes.Stfld, GetType(DoubleLiteral).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 781, 1, 781, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 75)
Typ = GetType(DoubleLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 75)
Typ = GetType(DoubleLiteral)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(DoubleLiteral).GetField("Value"))
Typ = GetType(DoubleLiteral).GetField("Value").FieldType
Dim typ96 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToDouble", typ96))
Typ = GetType(System.Convert).GetMethod("ToDouble", typ96).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DoubleLiteral).GetField("NumVal"))
OptimizeIL.MarkSequencePoint(doc3, 782, 1, 782, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 75)
Typ = GetType(DoubleLiteral)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 783, 1, 783, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 784, 1, 784, 100)
OptimizeIL.Emit(OpCodes.Br, cont74)
OptimizeIL.MarkLabel(fa74)
OptimizeIL.Emit(OpCodes.Br, cont74)
OptimizeIL.MarkLabel(cont74)
OptimizeIL.MarkSequencePoint(doc3, 786, 1, 786, 100)
Dim typ97(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ97(UBound(typ97) + 1)
typ97(UBound(typ97)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "#*.#*")
Typ = GetType(System.String)
ReDim Preserve typ97(UBound(typ97) + 1)
typ97(UBound(typ97)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ97))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ97).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 787, 1, 787, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 788, 1, 788, 100)
Dim typ98(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ98(UBound(typ98) + 1)
typ98(UBound(typ98)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "+#*.#*")
Typ = GetType(System.String)
ReDim Preserve typ98(UBound(typ98) + 1)
typ98(UBound(typ98)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ98))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ98).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 789, 1, 789, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 790, 1, 790, 100)
Dim typ99(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ99(UBound(typ99) + 1)
typ99(UBound(typ99)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "-#*.#*")
Typ = GetType(System.String)
ReDim Preserve typ99(UBound(typ99) + 1)
typ99(UBound(typ99)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ99))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ99).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 791, 1, 791, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 792, 1, 792, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 793, 1, 793, 100)
Dim typ100(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "f")
Typ = GetType(System.String)
ReDim Preserve typ100(UBound(typ100) + 1)
typ100(UBound(typ100)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("EndsWith", typ100))
Typ = Typ03.GetMethod("EndsWith", typ100).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 794, 1, 794, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.And)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 796, 1, 796, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa75 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru75 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont75 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru75)
OptimizeIL.Emit(OpCodes.Br, fa75)
OptimizeIL.MarkLabel(tru75)
OptimizeIL.MarkSequencePoint(doc3, 797, 1, 797, 100)
Dim locbldr76 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(FloatLiteral))
locbldr76.SetLocalSymInfo("flit")
OptimizeIL.Emit(OpCodes.Newobj, GetType(FloatLiteral).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 76)
OptimizeIL.MarkSequencePoint(doc3, 798, 1, 798, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 76)
Typ = GetType(FloatLiteral)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(FloatLiteral).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 799, 1, 799, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 800, 1, 800, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
OptimizeIL.Emit(OpCodes.Newarr, GetType(System.Char))
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc3, 801, 1, 801, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldstr, "f")
Typ = GetType(System.String)
Dim typ101 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ101))
Typ = GetType(System.Convert).GetMethod("ToChar", typ101).ReturnType
OptimizeIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
OptimizeIL.MarkSequencePoint(doc3, 802, 1, 802, 100)
Dim typ102(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ102(UBound(typ102) + 1)
typ102(UBound(typ102)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TrimEnd", typ102))
Typ = Typ03.GetMethod("TrimEnd", typ102).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 803, 1, 803, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 76)
Typ = GetType(FloatLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
OptimizeIL.Emit(OpCodes.Stfld, GetType(FloatLiteral).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 804, 1, 804, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 76)
Typ = GetType(FloatLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 76)
Typ = GetType(FloatLiteral)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(FloatLiteral).GetField("Value"))
Typ = GetType(FloatLiteral).GetField("Value").FieldType
Dim typ103 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToSingle", typ103))
Typ = GetType(System.Convert).GetMethod("ToSingle", typ103).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(FloatLiteral).GetField("NumVal"))
OptimizeIL.MarkSequencePoint(doc3, 805, 1, 805, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 76)
Typ = GetType(FloatLiteral)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 806, 1, 806, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 807, 1, 807, 100)
OptimizeIL.Emit(OpCodes.Br, cont75)
OptimizeIL.MarkLabel(fa75)
OptimizeIL.Emit(OpCodes.Br, cont75)
OptimizeIL.MarkLabel(cont75)
OptimizeIL.MarkSequencePoint(doc3, 809, 1, 809, 100)
Dim typ104(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ104(UBound(typ104) + 1)
typ104(UBound(typ104)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "#*.#*")
Typ = GetType(System.String)
ReDim Preserve typ104(UBound(typ104) + 1)
typ104(UBound(typ104)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ104))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ104).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 810, 1, 810, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 811, 1, 811, 100)
Dim typ105(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ105(UBound(typ105) + 1)
typ105(UBound(typ105)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "+#*.#*")
Typ = GetType(System.String)
ReDim Preserve typ105(UBound(typ105) + 1)
typ105(UBound(typ105)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ105))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ105).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 812, 1, 812, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 813, 1, 813, 100)
Dim typ106(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ106(UBound(typ106) + 1)
typ106(UBound(typ106)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "-#*.#*")
Typ = GetType(System.String)
ReDim Preserve typ106(UBound(typ106) + 1)
typ106(UBound(typ106)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ106))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ106).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 814, 1, 814, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 817, 1, 817, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa76 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru76 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont76 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru76)
OptimizeIL.Emit(OpCodes.Br, fa76)
OptimizeIL.MarkLabel(tru76)
OptimizeIL.MarkSequencePoint(doc3, 818, 1, 818, 100)
Dim locbldr77 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(DoubleLiteral))
locbldr77.SetLocalSymInfo("dlit")
OptimizeIL.Emit(OpCodes.Newobj, GetType(DoubleLiteral).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 77)
OptimizeIL.MarkSequencePoint(doc3, 819, 1, 819, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 77)
Typ = GetType(DoubleLiteral)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DoubleLiteral).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 820, 1, 820, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 824, 1, 824, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 77)
Typ = GetType(DoubleLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
OptimizeIL.Emit(OpCodes.Stfld, GetType(DoubleLiteral).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 825, 1, 825, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 77)
Typ = GetType(DoubleLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 77)
Typ = GetType(DoubleLiteral)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(DoubleLiteral).GetField("Value"))
Typ = GetType(DoubleLiteral).GetField("Value").FieldType
Dim typ107 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToDouble", typ107))
Typ = GetType(System.Convert).GetMethod("ToDouble", typ107).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DoubleLiteral).GetField("NumVal"))
OptimizeIL.MarkSequencePoint(doc3, 826, 1, 826, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 77)
Typ = GetType(DoubleLiteral)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 827, 1, 827, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 828, 1, 828, 100)
OptimizeIL.Emit(OpCodes.Br, cont76)
OptimizeIL.MarkLabel(fa76)
OptimizeIL.Emit(OpCodes.Br, cont76)
OptimizeIL.MarkLabel(cont76)
OptimizeIL.MarkSequencePoint(doc3, 830, 1, 830, 100)
Dim typ108(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ108(UBound(typ108) + 1)
typ108(UBound(typ108)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "#*")
Typ = GetType(System.String)
ReDim Preserve typ108(UBound(typ108) + 1)
typ108(UBound(typ108)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ108))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ108).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 831, 1, 831, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 832, 1, 832, 100)
Dim typ109(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ109(UBound(typ109) + 1)
typ109(UBound(typ109)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "+#*")
Typ = GetType(System.String)
ReDim Preserve typ109(UBound(typ109) + 1)
typ109(UBound(typ109)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ109))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ109).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 833, 1, 833, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 834, 1, 834, 100)
Dim typ110(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ110(UBound(typ110) + 1)
typ110(UBound(typ110)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "-#*")
Typ = GetType(System.String)
ReDim Preserve typ110(UBound(typ110) + 1)
typ110(UBound(typ110)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ110))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ110).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 835, 1, 835, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 836, 1, 836, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 837, 1, 837, 100)
Dim typ111(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "d")
Typ = GetType(System.String)
ReDim Preserve typ111(UBound(typ111) + 1)
typ111(UBound(typ111)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("EndsWith", typ111))
Typ = Typ03.GetMethod("EndsWith", typ111).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 838, 1, 838, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.And)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 841, 1, 841, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa77 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru77 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont77 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru77)
OptimizeIL.Emit(OpCodes.Br, fa77)
OptimizeIL.MarkLabel(tru77)
OptimizeIL.MarkSequencePoint(doc3, 842, 1, 842, 100)
Dim locbldr78 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(DoubleLiteral))
locbldr78.SetLocalSymInfo("dlit3")
OptimizeIL.Emit(OpCodes.Newobj, GetType(DoubleLiteral).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 78)
OptimizeIL.MarkSequencePoint(doc3, 843, 1, 843, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 78)
Typ = GetType(DoubleLiteral)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DoubleLiteral).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 844, 1, 844, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 845, 1, 845, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
OptimizeIL.Emit(OpCodes.Newarr, GetType(System.Char))
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc3, 846, 1, 846, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldstr, "d")
Typ = GetType(System.String)
Dim typ112 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ112))
Typ = GetType(System.Convert).GetMethod("ToChar", typ112).ReturnType
OptimizeIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
OptimizeIL.MarkSequencePoint(doc3, 847, 1, 847, 100)
Dim typ113(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ113(UBound(typ113) + 1)
typ113(UBound(typ113)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TrimEnd", typ113))
Typ = Typ03.GetMethod("TrimEnd", typ113).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 848, 1, 848, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 78)
Typ = GetType(DoubleLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
OptimizeIL.Emit(OpCodes.Stfld, GetType(DoubleLiteral).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 849, 1, 849, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 78)
Typ = GetType(DoubleLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 78)
Typ = GetType(DoubleLiteral)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(DoubleLiteral).GetField("Value"))
Typ = GetType(DoubleLiteral).GetField("Value").FieldType
Dim typ114 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToDouble", typ114))
Typ = GetType(System.Convert).GetMethod("ToDouble", typ114).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DoubleLiteral).GetField("NumVal"))
OptimizeIL.MarkSequencePoint(doc3, 850, 1, 850, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 78)
Typ = GetType(DoubleLiteral)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 851, 1, 851, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 852, 1, 852, 100)
OptimizeIL.Emit(OpCodes.Br, cont77)
OptimizeIL.MarkLabel(fa77)
OptimizeIL.Emit(OpCodes.Br, cont77)
OptimizeIL.MarkLabel(cont77)
OptimizeIL.MarkSequencePoint(doc3, 854, 1, 854, 100)
Dim typ115(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ115(UBound(typ115) + 1)
typ115(UBound(typ115)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "#*")
Typ = GetType(System.String)
ReDim Preserve typ115(UBound(typ115) + 1)
typ115(UBound(typ115)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ115))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ115).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 855, 1, 855, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 856, 1, 856, 100)
Dim typ116(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ116(UBound(typ116) + 1)
typ116(UBound(typ116)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "+#*")
Typ = GetType(System.String)
ReDim Preserve typ116(UBound(typ116) + 1)
typ116(UBound(typ116)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ116))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ116).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 857, 1, 857, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 858, 1, 858, 100)
Dim typ117(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ117(UBound(typ117) + 1)
typ117(UBound(typ117)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "-#*")
Typ = GetType(System.String)
ReDim Preserve typ117(UBound(typ117) + 1)
typ117(UBound(typ117)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ117))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ117).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 859, 1, 859, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 860, 1, 860, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 861, 1, 861, 100)
Dim typ118(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "f")
Typ = GetType(System.String)
ReDim Preserve typ118(UBound(typ118) + 1)
typ118(UBound(typ118)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("EndsWith", typ118))
Typ = Typ03.GetMethod("EndsWith", typ118).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 862, 1, 862, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.And)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 864, 1, 864, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa78 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru78 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont78 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru78)
OptimizeIL.Emit(OpCodes.Br, fa78)
OptimizeIL.MarkLabel(tru78)
OptimizeIL.MarkSequencePoint(doc3, 865, 1, 865, 100)
Dim locbldr79 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(FloatLiteral))
locbldr79.SetLocalSymInfo("flit2")
OptimizeIL.Emit(OpCodes.Newobj, GetType(FloatLiteral).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 79)
OptimizeIL.MarkSequencePoint(doc3, 866, 1, 866, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 79)
Typ = GetType(FloatLiteral)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(FloatLiteral).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 867, 1, 867, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 868, 1, 868, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
OptimizeIL.Emit(OpCodes.Newarr, GetType(System.Char))
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc3, 869, 1, 869, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldstr, "f")
Typ = GetType(System.String)
Dim typ119 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ119))
Typ = GetType(System.Convert).GetMethod("ToChar", typ119).ReturnType
OptimizeIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
OptimizeIL.MarkSequencePoint(doc3, 870, 1, 870, 100)
Dim typ120(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ120(UBound(typ120) + 1)
typ120(UBound(typ120)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TrimEnd", typ120))
Typ = Typ03.GetMethod("TrimEnd", typ120).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 871, 1, 871, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 79)
Typ = GetType(FloatLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
OptimizeIL.Emit(OpCodes.Stfld, GetType(FloatLiteral).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 872, 1, 872, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 79)
Typ = GetType(FloatLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 79)
Typ = GetType(FloatLiteral)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(FloatLiteral).GetField("Value"))
Typ = GetType(FloatLiteral).GetField("Value").FieldType
Dim typ121 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToSingle", typ121))
Typ = GetType(System.Convert).GetMethod("ToSingle", typ121).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(FloatLiteral).GetField("NumVal"))
OptimizeIL.MarkSequencePoint(doc3, 873, 1, 873, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 79)
Typ = GetType(FloatLiteral)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 874, 1, 874, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 875, 1, 875, 100)
OptimizeIL.Emit(OpCodes.Br, cont78)
OptimizeIL.MarkLabel(fa78)
OptimizeIL.Emit(OpCodes.Br, cont78)
OptimizeIL.MarkLabel(cont78)
OptimizeIL.MarkSequencePoint(doc3, 877, 1, 877, 100)
Dim typ122(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ122(UBound(typ122) + 1)
typ122(UBound(typ122)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "#*")
Typ = GetType(System.String)
ReDim Preserve typ122(UBound(typ122) + 1)
typ122(UBound(typ122)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ122))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ122).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 878, 1, 878, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 879, 1, 879, 100)
Dim typ123(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ123(UBound(typ123) + 1)
typ123(UBound(typ123)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "+#*")
Typ = GetType(System.String)
ReDim Preserve typ123(UBound(typ123) + 1)
typ123(UBound(typ123)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ123))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ123).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 880, 1, 880, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 881, 1, 881, 100)
Dim typ124(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ124(UBound(typ124) + 1)
typ124(UBound(typ124)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "-#*")
Typ = GetType(System.String)
ReDim Preserve typ124(UBound(typ124) + 1)
typ124(UBound(typ124)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ124))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ124).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 882, 1, 882, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 883, 1, 883, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 884, 1, 884, 100)
Dim typ125(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "i")
Typ = GetType(System.String)
ReDim Preserve typ125(UBound(typ125) + 1)
typ125(UBound(typ125)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("EndsWith", typ125))
Typ = Typ03.GetMethod("EndsWith", typ125).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 885, 1, 885, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.And)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 887, 1, 887, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa79 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru79 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont79 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru79)
OptimizeIL.Emit(OpCodes.Br, fa79)
OptimizeIL.MarkLabel(tru79)
OptimizeIL.MarkSequencePoint(doc3, 888, 1, 888, 100)
Dim locbldr80 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(IntLiteral))
locbldr80.SetLocalSymInfo("ilit2")
OptimizeIL.Emit(OpCodes.Newobj, GetType(IntLiteral).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 80)
OptimizeIL.MarkSequencePoint(doc3, 889, 1, 889, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 80)
Typ = GetType(IntLiteral)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(IntLiteral).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 890, 1, 890, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 891, 1, 891, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
OptimizeIL.Emit(OpCodes.Newarr, GetType(System.Char))
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc3, 892, 1, 892, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldstr, "i")
Typ = GetType(System.String)
Dim typ126 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ126))
Typ = GetType(System.Convert).GetMethod("ToChar", typ126).ReturnType
OptimizeIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
OptimizeIL.MarkSequencePoint(doc3, 893, 1, 893, 100)
Dim typ127(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ127(UBound(typ127) + 1)
typ127(UBound(typ127)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TrimEnd", typ127))
Typ = Typ03.GetMethod("TrimEnd", typ127).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 894, 1, 894, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 80)
Typ = GetType(IntLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
OptimizeIL.Emit(OpCodes.Stfld, GetType(IntLiteral).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 895, 1, 895, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 80)
Typ = GetType(IntLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 80)
Typ = GetType(IntLiteral)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(IntLiteral).GetField("Value"))
Typ = GetType(IntLiteral).GetField("Value").FieldType
Dim typ128 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToInt32", typ128))
Typ = GetType(System.Convert).GetMethod("ToInt32", typ128).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(IntLiteral).GetField("NumVal"))
OptimizeIL.MarkSequencePoint(doc3, 896, 1, 896, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 80)
Typ = GetType(IntLiteral)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 897, 1, 897, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 898, 1, 898, 100)
OptimizeIL.Emit(OpCodes.Br, cont79)
OptimizeIL.MarkLabel(fa79)
OptimizeIL.Emit(OpCodes.Br, cont79)
OptimizeIL.MarkLabel(cont79)
OptimizeIL.MarkSequencePoint(doc3, 901, 1, 901, 100)
Dim typ129(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ129(UBound(typ129) + 1)
typ129(UBound(typ129)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "#*")
Typ = GetType(System.String)
ReDim Preserve typ129(UBound(typ129) + 1)
typ129(UBound(typ129)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ129))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ129).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 902, 1, 902, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 903, 1, 903, 100)
Dim typ130(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ130(UBound(typ130) + 1)
typ130(UBound(typ130)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "+#*")
Typ = GetType(System.String)
ReDim Preserve typ130(UBound(typ130) + 1)
typ130(UBound(typ130)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ130))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ130).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 904, 1, 904, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 905, 1, 905, 100)
Dim typ131(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ131(UBound(typ131) + 1)
typ131(UBound(typ131)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "-#*")
Typ = GetType(System.String)
ReDim Preserve typ131(UBound(typ131) + 1)
typ131(UBound(typ131)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ131))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ131).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 906, 1, 906, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 907, 1, 907, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 908, 1, 908, 100)
Dim typ132(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "l")
Typ = GetType(System.String)
ReDim Preserve typ132(UBound(typ132) + 1)
typ132(UBound(typ132)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("EndsWith", typ132))
Typ = Typ03.GetMethod("EndsWith", typ132).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 909, 1, 909, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.And)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 911, 1, 911, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa80 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru80 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont80 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru80)
OptimizeIL.Emit(OpCodes.Br, fa80)
OptimizeIL.MarkLabel(tru80)
OptimizeIL.MarkSequencePoint(doc3, 912, 1, 912, 100)
Dim locbldr81 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(LongLiteral))
locbldr81.SetLocalSymInfo("llit")
OptimizeIL.Emit(OpCodes.Newobj, GetType(LongLiteral).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 81)
OptimizeIL.MarkSequencePoint(doc3, 913, 1, 913, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 81)
Typ = GetType(LongLiteral)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(LongLiteral).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 914, 1, 914, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 915, 1, 915, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
OptimizeIL.Emit(OpCodes.Newarr, GetType(System.Char))
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc3, 916, 1, 916, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldstr, "l")
Typ = GetType(System.String)
Dim typ133 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ133))
Typ = GetType(System.Convert).GetMethod("ToChar", typ133).ReturnType
OptimizeIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
OptimizeIL.MarkSequencePoint(doc3, 917, 1, 917, 100)
Dim typ134(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ134(UBound(typ134) + 1)
typ134(UBound(typ134)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TrimEnd", typ134))
Typ = Typ03.GetMethod("TrimEnd", typ134).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 918, 1, 918, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 81)
Typ = GetType(LongLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
OptimizeIL.Emit(OpCodes.Stfld, GetType(LongLiteral).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 919, 1, 919, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 81)
Typ = GetType(LongLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 81)
Typ = GetType(LongLiteral)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(LongLiteral).GetField("Value"))
Typ = GetType(LongLiteral).GetField("Value").FieldType
Dim typ135 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToInt64", typ135))
Typ = GetType(System.Convert).GetMethod("ToInt64", typ135).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(LongLiteral).GetField("NumVal"))
OptimizeIL.MarkSequencePoint(doc3, 920, 1, 920, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 81)
Typ = GetType(LongLiteral)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 921, 1, 921, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 922, 1, 922, 100)
OptimizeIL.Emit(OpCodes.Br, cont80)
OptimizeIL.MarkLabel(fa80)
OptimizeIL.Emit(OpCodes.Br, cont80)
OptimizeIL.MarkLabel(cont80)
OptimizeIL.MarkSequencePoint(doc3, 924, 1, 924, 100)
Dim typ136(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ136(UBound(typ136) + 1)
typ136(UBound(typ136)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "#*")
Typ = GetType(System.String)
ReDim Preserve typ136(UBound(typ136) + 1)
typ136(UBound(typ136)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ136))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ136).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 925, 1, 925, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 926, 1, 926, 100)
Dim typ137(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ137(UBound(typ137) + 1)
typ137(UBound(typ137)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "+#*")
Typ = GetType(System.String)
ReDim Preserve typ137(UBound(typ137) + 1)
typ137(UBound(typ137)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ137))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ137).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 927, 1, 927, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 928, 1, 928, 100)
Dim typ138(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ138(UBound(typ138) + 1)
typ138(UBound(typ138)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "-#*")
Typ = GetType(System.String)
ReDim Preserve typ138(UBound(typ138) + 1)
typ138(UBound(typ138)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ138))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ138).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 929, 1, 929, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 930, 1, 930, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 931, 1, 931, 100)
Dim typ139(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "s")
Typ = GetType(System.String)
ReDim Preserve typ139(UBound(typ139) + 1)
typ139(UBound(typ139)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("EndsWith", typ139))
Typ = Typ03.GetMethod("EndsWith", typ139).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 932, 1, 932, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.And)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 934, 1, 934, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa81 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru81 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont81 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru81)
OptimizeIL.Emit(OpCodes.Br, fa81)
OptimizeIL.MarkLabel(tru81)
OptimizeIL.MarkSequencePoint(doc3, 935, 1, 935, 100)
Dim locbldr82 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(ShortLiteral))
locbldr82.SetLocalSymInfo("slit")
OptimizeIL.Emit(OpCodes.Newobj, GetType(ShortLiteral).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 82)
OptimizeIL.MarkSequencePoint(doc3, 936, 1, 936, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 82)
Typ = GetType(ShortLiteral)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ShortLiteral).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 937, 1, 937, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 938, 1, 938, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
OptimizeIL.Emit(OpCodes.Newarr, GetType(System.Char))
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc3, 939, 1, 939, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldstr, "s")
Typ = GetType(System.String)
Dim typ140 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ140))
Typ = GetType(System.Convert).GetMethod("ToChar", typ140).ReturnType
OptimizeIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
OptimizeIL.MarkSequencePoint(doc3, 940, 1, 940, 100)
Dim typ141(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ141(UBound(typ141) + 1)
typ141(UBound(typ141)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TrimEnd", typ141))
Typ = Typ03.GetMethod("TrimEnd", typ141).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 941, 1, 941, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 82)
Typ = GetType(ShortLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
OptimizeIL.Emit(OpCodes.Stfld, GetType(ShortLiteral).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 942, 1, 942, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 82)
Typ = GetType(ShortLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 82)
Typ = GetType(ShortLiteral)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(ShortLiteral).GetField("Value"))
Typ = GetType(ShortLiteral).GetField("Value").FieldType
Dim typ142 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToInt16", typ142))
Typ = GetType(System.Convert).GetMethod("ToInt16", typ142).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ShortLiteral).GetField("NumVal"))
OptimizeIL.MarkSequencePoint(doc3, 943, 1, 943, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 82)
Typ = GetType(ShortLiteral)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 944, 1, 944, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 945, 1, 945, 100)
OptimizeIL.Emit(OpCodes.Br, cont81)
OptimizeIL.MarkLabel(fa81)
OptimizeIL.Emit(OpCodes.Br, cont81)
OptimizeIL.MarkLabel(cont81)
OptimizeIL.MarkSequencePoint(doc3, 947, 1, 947, 100)
Dim typ143(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ143(UBound(typ143) + 1)
typ143(UBound(typ143)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "#*")
Typ = GetType(System.String)
ReDim Preserve typ143(UBound(typ143) + 1)
typ143(UBound(typ143)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ143))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ143).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 948, 1, 948, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 949, 1, 949, 100)
Dim typ144(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ144(UBound(typ144) + 1)
typ144(UBound(typ144)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "+#*")
Typ = GetType(System.String)
ReDim Preserve typ144(UBound(typ144) + 1)
typ144(UBound(typ144)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ144))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ144).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 950, 1, 950, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 951, 1, 951, 100)
Dim typ145(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ145(UBound(typ145) + 1)
typ145(UBound(typ145)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "-#*")
Typ = GetType(System.String)
ReDim Preserve typ145(UBound(typ145) + 1)
typ145(UBound(typ145)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ145))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ145).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 952, 1, 952, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 953, 1, 953, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 954, 1, 954, 100)
Dim typ146(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "b")
Typ = GetType(System.String)
ReDim Preserve typ146(UBound(typ146) + 1)
typ146(UBound(typ146)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("EndsWith", typ146))
Typ = Typ03.GetMethod("EndsWith", typ146).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 955, 1, 955, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.And)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 957, 1, 957, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa82 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru82 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont82 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru82)
OptimizeIL.Emit(OpCodes.Br, fa82)
OptimizeIL.MarkLabel(tru82)
OptimizeIL.MarkSequencePoint(doc3, 958, 1, 958, 100)
Dim locbldr83 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(SByteLiteral))
locbldr83.SetLocalSymInfo("blit")
OptimizeIL.Emit(OpCodes.Newobj, GetType(SByteLiteral).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 83)
OptimizeIL.MarkSequencePoint(doc3, 959, 1, 959, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 83)
Typ = GetType(SByteLiteral)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(SByteLiteral).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 960, 1, 960, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 961, 1, 961, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
OptimizeIL.Emit(OpCodes.Newarr, GetType(System.Char))
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc3, 962, 1, 962, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldstr, "b")
Typ = GetType(System.String)
Dim typ147 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ147))
Typ = GetType(System.Convert).GetMethod("ToChar", typ147).ReturnType
OptimizeIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
OptimizeIL.MarkSequencePoint(doc3, 963, 1, 963, 100)
Dim typ148(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ148(UBound(typ148) + 1)
typ148(UBound(typ148)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TrimEnd", typ148))
Typ = Typ03.GetMethod("TrimEnd", typ148).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 964, 1, 964, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 83)
Typ = GetType(SByteLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
OptimizeIL.Emit(OpCodes.Stfld, GetType(SByteLiteral).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 965, 1, 965, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 83)
Typ = GetType(SByteLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 83)
Typ = GetType(SByteLiteral)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(SByteLiteral).GetField("Value"))
Typ = GetType(SByteLiteral).GetField("Value").FieldType
Dim typ149 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToSByte", typ149))
Typ = GetType(System.Convert).GetMethod("ToSByte", typ149).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(SByteLiteral).GetField("NumVal"))
OptimizeIL.MarkSequencePoint(doc3, 966, 1, 966, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 83)
Typ = GetType(SByteLiteral)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 967, 1, 967, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 968, 1, 968, 100)
OptimizeIL.Emit(OpCodes.Br, cont82)
OptimizeIL.MarkLabel(fa82)
OptimizeIL.Emit(OpCodes.Br, cont82)
OptimizeIL.MarkLabel(cont82)
OptimizeIL.MarkSequencePoint(doc3, 970, 1, 970, 100)
Dim typ150(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ150(UBound(typ150) + 1)
typ150(UBound(typ150)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "#*")
Typ = GetType(System.String)
ReDim Preserve typ150(UBound(typ150) + 1)
typ150(UBound(typ150)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ150))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ150).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 971, 1, 971, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 972, 1, 972, 100)
Dim typ151(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ151(UBound(typ151) + 1)
typ151(UBound(typ151)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "+#*")
Typ = GetType(System.String)
ReDim Preserve typ151(UBound(typ151) + 1)
typ151(UBound(typ151)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ151))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ151).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 973, 1, 973, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 974, 1, 974, 100)
Dim typ152(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ152(UBound(typ152) + 1)
typ152(UBound(typ152)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "-#*")
Typ = GetType(System.String)
ReDim Preserve typ152(UBound(typ152) + 1)
typ152(UBound(typ152)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ152))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ152).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 975, 1, 975, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 978, 1, 978, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa83 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru83 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont83 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru83)
OptimizeIL.Emit(OpCodes.Br, fa83)
OptimizeIL.MarkLabel(tru83)
OptimizeIL.MarkSequencePoint(doc3, 979, 1, 979, 100)
Dim locbldr84 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(IntLiteral))
locbldr84.SetLocalSymInfo("ilit")
OptimizeIL.Emit(OpCodes.Newobj, GetType(IntLiteral).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 84)
OptimizeIL.MarkSequencePoint(doc3, 980, 1, 980, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 84)
Typ = GetType(IntLiteral)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(IntLiteral).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 981, 1, 981, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 985, 1, 985, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 84)
Typ = GetType(IntLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
OptimizeIL.Emit(OpCodes.Stfld, GetType(IntLiteral).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 986, 1, 986, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 84)
Typ = GetType(IntLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 84)
Typ = GetType(IntLiteral)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(IntLiteral).GetField("Value"))
Typ = GetType(IntLiteral).GetField("Value").FieldType
Dim typ153 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToInt32", typ153))
Typ = GetType(System.Convert).GetMethod("ToInt32", typ153).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(IntLiteral).GetField("NumVal"))
OptimizeIL.MarkSequencePoint(doc3, 987, 1, 987, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 84)
Typ = GetType(IntLiteral)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 988, 1, 988, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 989, 1, 989, 100)
OptimizeIL.Emit(OpCodes.Br, cont83)
OptimizeIL.MarkLabel(fa83)
OptimizeIL.Emit(OpCodes.Br, cont83)
OptimizeIL.MarkLabel(cont83)
OptimizeIL.MarkSequencePoint(doc3, 992, 1, 992, 100)
Dim typ154(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ154(UBound(typ154) + 1)
typ154(UBound(typ154)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "[a-zA-Z]*")
Typ = GetType(System.String)
ReDim Preserve typ154(UBound(typ154) + 1)
typ154(UBound(typ154)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ154))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ154).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 993, 1, 993, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 994, 1, 994, 100)
Dim typ155(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ155(UBound(typ155) + 1)
typ155(UBound(typ155)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "_*[a-zA-Z]*")
Typ = GetType(System.String)
ReDim Preserve typ155(UBound(typ155) + 1)
typ155(UBound(typ155)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ155))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ155).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 995, 1, 995, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 997, 1, 997, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa84 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru84 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont84 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru84)
OptimizeIL.Emit(OpCodes.Br, fa84)
OptimizeIL.MarkLabel(tru84)
OptimizeIL.MarkSequencePoint(doc3, 998, 1, 998, 100)
Dim locbldr85 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(Ident))
locbldr85.SetLocalSymInfo("idt")
OptimizeIL.Emit(OpCodes.Newobj, GetType(Ident).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 85)
OptimizeIL.MarkSequencePoint(doc3, 999, 1, 999, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 85)
Typ = GetType(Ident)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(Ident).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 1000, 1, 1000, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 85)
Typ = GetType(Ident)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(Ident).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 1001, 1, 1001, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 85)
Typ = GetType(Ident)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 1002, 1, 1002, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 1003, 1, 1003, 100)
OptimizeIL.Emit(OpCodes.Br, cont84)
OptimizeIL.MarkLabel(fa84)
OptimizeIL.Emit(OpCodes.Br, cont84)
OptimizeIL.MarkLabel(cont84)
OptimizeIL.MarkSequencePoint(doc3, 1006, 1, 1006, 100)
OptimizeIL.MarkLabel(label0)
OptimizeIL.MarkSequencePoint(doc3, 1007, 1, 1007, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.MarkSequencePoint(doc3, 1009, 1, 1009, 100)
OptimizeIL.Emit(OpCodes.Ret)
TokenOptimizer.CreateType()
End Sub


Dim doc4 As ISymbolDocumentWriter

Sub ExprOptimizer()
Dim ExprOptimizer As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.Parser" & "." & "ExprOptimizer", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(Expr)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Boolean).MakeByRefType()
Dim checkVarAs As MethodBuilder = ExprOptimizer.DefineMethod("checkVarAs", MethodAttributes.Public, GetType(Expr), typ0)
Dim checkVarAsIL As ILGenerator = checkVarAs.GetILGenerator()
Dim checkVarAsparam00 As ParameterBuilder = checkVarAs.DefineParameter(0, ParameterAttributes.RetVal, "")
Dim checkVarAsparam01 As ParameterBuilder = checkVarAs.DefineParameter(1, ParameterAttributes.None, "stm")
Dim checkVarAsparam02 As ParameterBuilder = checkVarAs.DefineParameter(2, ParameterAttributes.None, "b")
checkVarAsIL.MarkSequencePoint(doc4, 4, 1, 4, 100)
Dim locbldr86 As LocalBuilder = checkVarAsIL.DeclareLocal(GetType(Token))
locbldr86.SetLocalSymInfo("tok")
checkVarAsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
checkVarAsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkVarAsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVarAsIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkVarAsIL.Emit(OpCodes.Stloc, 0)
checkVarAsIL.MarkSequencePoint(doc4, 5, 1, 5, 100)
Dim locbldr87 As LocalBuilder = checkVarAsIL.DeclareLocal(GetType(System.Type))
locbldr87.SetLocalSymInfo("typ")
checkVarAsIL.Emit(OpCodes.Ldtoken, GetType(VarTok))
Dim typ1 As Type() = {GetType(System.RuntimeTypeHandle)}
checkVarAsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ1))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ1).ReturnType
checkVarAsIL.Emit(OpCodes.Stloc, 1)
checkVarAsIL.MarkSequencePoint(doc4, 6, 1, 6, 100)
checkVarAsIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
Dim typ2(-1) As Type
checkVarAsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkVarAsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkVarAsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = Typ
checkVarAsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ2))
Typ = Typ03.GetMethod("IsInstanceOfType", typ2).ReturnType
checkVarAsIL.Emit(OpCodes.Stobj, Typ04)
checkVarAsIL.MarkSequencePoint(doc4, 7, 1, 7, 100)
Dim locbldr88 As LocalBuilder = checkVarAsIL.DeclareLocal(GetType(VarExpr))
locbldr88.SetLocalSymInfo("vars")
checkVarAsIL.Emit(OpCodes.Newobj, GetType(VarExpr).GetConstructor(Type.EmptyTypes))
checkVarAsIL.Emit(OpCodes.Stloc, 2)
checkVarAsIL.MarkSequencePoint(doc4, 9, 1, 9, 100)
checkVarAsIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
checkVarAsIL.Emit(OpCodes.Ldobj, Typ.GetElementType())
Typ = Typ.GetElementType()
checkVarAsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa85 As System.Reflection.Emit.Label = checkVarAsIL.DefineLabel()
Dim tru85 As System.Reflection.Emit.Label = checkVarAsIL.DefineLabel()
Dim cont85 As System.Reflection.Emit.Label = checkVarAsIL.DefineLabel()
checkVarAsIL.Emit(OpCodes.Beq, tru85)
checkVarAsIL.Emit(OpCodes.Br, fa85)
checkVarAsIL.MarkLabel(tru85)
checkVarAsIL.MarkSequencePoint(doc4, 10, 1, 10, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarExpr)
checkVarAsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
checkVarAsIL.Emit(OpCodes.Stfld, GetType(VarExpr).GetField("Tokens"))
checkVarAsIL.MarkSequencePoint(doc4, 11, 1, 11, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarExpr)
checkVarAsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Line"))
Typ = GetType(Expr).GetField("Line").FieldType
checkVarAsIL.Emit(OpCodes.Stfld, GetType(VarExpr).GetField("Line"))
checkVarAsIL.MarkSequencePoint(doc4, 12, 1, 12, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarExpr)
checkVarAsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
checkVarAsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkVarAsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVarAsIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkVarAsIL.Emit(OpCodes.Stfld, GetType(VarExpr).GetField("VarName"))
checkVarAsIL.MarkSequencePoint(doc4, 14, 1, 14, 100)
Dim locbldr89 As LocalBuilder = checkVarAsIL.DeclareLocal(GetType(Token))
locbldr89.SetLocalSymInfo("tok2")
checkVarAsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
checkVarAsIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
checkVarAsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVarAsIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkVarAsIL.Emit(OpCodes.Stloc, 3)
checkVarAsIL.MarkSequencePoint(doc4, 15, 1, 15, 100)
Dim locbldr90 As LocalBuilder = checkVarAsIL.DeclareLocal(GetType(System.Type))
locbldr90.SetLocalSymInfo("typ2")
checkVarAsIL.Emit(OpCodes.Ldtoken, GetType(TypeTok))
Dim typ3 As Type() = {GetType(System.RuntimeTypeHandle)}
checkVarAsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ3))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ3).ReturnType
checkVarAsIL.Emit(OpCodes.Stloc, 4)
checkVarAsIL.MarkSequencePoint(doc4, 16, 1, 16, 100)
Dim locbldr91 As LocalBuilder = checkVarAsIL.DeclareLocal(GetType(System.Boolean))
locbldr91.SetLocalSymInfo("b2")
Dim typ4(-1) As Type
checkVarAsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Type)
Typ03 = Typ
checkVarAsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Token)
checkVarAsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
checkVarAsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ4))
Typ = Typ03.GetMethod("IsInstanceOfType", typ4).ReturnType
checkVarAsIL.Emit(OpCodes.Stloc, 5)
checkVarAsIL.MarkSequencePoint(doc4, 18, 1, 18, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
checkVarAsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa86 As System.Reflection.Emit.Label = checkVarAsIL.DefineLabel()
Dim tru86 As System.Reflection.Emit.Label = checkVarAsIL.DefineLabel()
Dim cont86 As System.Reflection.Emit.Label = checkVarAsIL.DefineLabel()
checkVarAsIL.Emit(OpCodes.Beq, fa86)
checkVarAsIL.Emit(OpCodes.Br, tru86)
checkVarAsIL.MarkLabel(tru86)
checkVarAsIL.MarkSequencePoint(doc4, 19, 1, 19, 100)
Dim locbldr92 As LocalBuilder = checkVarAsIL.DeclareLocal(GetType(Token))
locbldr92.SetLocalSymInfo("t")
checkVarAsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
checkVarAsIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
checkVarAsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVarAsIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkVarAsIL.Emit(OpCodes.Stloc, 6)
checkVarAsIL.MarkSequencePoint(doc4, 20, 1, 20, 100)
Dim locbldr93 As LocalBuilder = checkVarAsIL.DeclareLocal(GetType(TypeTok))
locbldr93.SetLocalSymInfo("tt")
checkVarAsIL.Emit(OpCodes.Newobj, GetType(TypeTok).GetConstructor(Type.EmptyTypes))
checkVarAsIL.Emit(OpCodes.Stloc, 7)
checkVarAsIL.MarkSequencePoint(doc4, 21, 1, 21, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(TypeTok)
checkVarAsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
checkVarAsIL.Emit(OpCodes.Stfld, GetType(TypeTok).GetField("Line"))
checkVarAsIL.MarkSequencePoint(doc4, 22, 1, 22, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(TypeTok)
checkVarAsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
checkVarAsIL.Emit(OpCodes.Stfld, GetType(TypeTok).GetField("Value"))
checkVarAsIL.MarkSequencePoint(doc4, 23, 1, 23, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarExpr)
checkVarAsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(TypeTok)
checkVarAsIL.Emit(OpCodes.Stfld, GetType(VarExpr).GetField("VarTyp"))
checkVarAsIL.MarkSequencePoint(doc4, 24, 1, 24, 100)
checkVarAsIL.Emit(OpCodes.Br, cont86)
checkVarAsIL.MarkLabel(fa86)
checkVarAsIL.MarkSequencePoint(doc4, 25, 1, 25, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarExpr)
checkVarAsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
checkVarAsIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
checkVarAsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVarAsIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkVarAsIL.Emit(OpCodes.Stfld, GetType(VarExpr).GetField("VarTyp"))
checkVarAsIL.MarkSequencePoint(doc4, 26, 1, 26, 100)
checkVarAsIL.Emit(OpCodes.Br, cont86)
checkVarAsIL.MarkLabel(cont86)
checkVarAsIL.MarkSequencePoint(doc4, 28, 1, 28, 100)
checkVarAsIL.Emit(OpCodes.Br, cont85)
checkVarAsIL.MarkLabel(fa85)
checkVarAsIL.Emit(OpCodes.Br, cont85)
checkVarAsIL.MarkLabel(cont85)
checkVarAsIL.MarkSequencePoint(doc4, 29, 1, 29, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarExpr)
checkVarAsIL.MarkSequencePoint(doc4, 30, 1, 30, 100)
checkVarAsIL.Emit(OpCodes.Ret)
Dim typ5(-1) As Type
ReDim Preserve typ5(UBound(typ5) + 1)
typ5(UBound(typ5)) = GetType(Ident)
ReDim Preserve typ5(UBound(typ5) + 1)
typ5(UBound(typ5)) = GetType(MethodNameTok)
Dim IdentToMNTok As MethodBuilder = ExprOptimizer.DefineMethod("IdentToMNTok", MethodAttributes.Public, GetType(MethodNameTok), typ5)
Dim IdentToMNTokIL As ILGenerator = IdentToMNTok.GetILGenerator()
Dim IdentToMNTokparam00 As ParameterBuilder = IdentToMNTok.DefineParameter(0, ParameterAttributes.RetVal, "")
Dim IdentToMNTokparam01 As ParameterBuilder = IdentToMNTok.DefineParameter(1, ParameterAttributes.None, "idt")
Dim IdentToMNTokparam02 As ParameterBuilder = IdentToMNTok.DefineParameter(2, ParameterAttributes.None, "mnt")
IdentToMNTokIL.MarkSequencePoint(doc4, 34, 1, 34, 100)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(MethodNameTok)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Ident)
IdentToMNTokIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("DoNeg"))
Typ = GetType(Ident).GetField("DoNeg").FieldType
IdentToMNTokIL.Emit(OpCodes.Stfld, GetType(MethodNameTok).GetField("DoNeg"))
IdentToMNTokIL.MarkSequencePoint(doc4, 35, 1, 35, 100)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(MethodNameTok)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Ident)
IdentToMNTokIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("DoNot"))
Typ = GetType(Ident).GetField("DoNot").FieldType
IdentToMNTokIL.Emit(OpCodes.Stfld, GetType(MethodNameTok).GetField("DoNot"))
IdentToMNTokIL.MarkSequencePoint(doc4, 36, 1, 36, 100)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(MethodNameTok)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Ident)
IdentToMNTokIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Conv"))
Typ = GetType(Ident).GetField("Conv").FieldType
IdentToMNTokIL.Emit(OpCodes.Stfld, GetType(MethodNameTok).GetField("Conv"))
IdentToMNTokIL.MarkSequencePoint(doc4, 37, 1, 37, 100)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(MethodNameTok)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Ident)
IdentToMNTokIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("IsArr"))
Typ = GetType(Ident).GetField("IsArr").FieldType
IdentToMNTokIL.Emit(OpCodes.Stfld, GetType(MethodNameTok).GetField("IsArr"))
IdentToMNTokIL.MarkSequencePoint(doc4, 38, 1, 38, 100)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(MethodNameTok)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Ident)
IdentToMNTokIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("ArrLoc"))
Typ = GetType(Ident).GetField("ArrLoc").FieldType
IdentToMNTokIL.Emit(OpCodes.Stfld, GetType(MethodNameTok).GetField("ArrLoc"))
IdentToMNTokIL.MarkSequencePoint(doc4, 39, 1, 39, 100)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(MethodNameTok)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Ident)
IdentToMNTokIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("IsRef"))
Typ = GetType(Ident).GetField("IsRef").FieldType
IdentToMNTokIL.Emit(OpCodes.Stfld, GetType(MethodNameTok).GetField("IsRef"))
IdentToMNTokIL.MarkSequencePoint(doc4, 40, 1, 40, 100)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(MethodNameTok)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Ident)
IdentToMNTokIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("IsValInRef"))
Typ = GetType(Ident).GetField("IsValInRef").FieldType
IdentToMNTokIL.Emit(OpCodes.Stfld, GetType(MethodNameTok).GetField("IsValInRef"))
IdentToMNTokIL.MarkSequencePoint(doc4, 41, 1, 41, 100)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(MethodNameTok)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Ident)
IdentToMNTokIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("IsRefInst"))
Typ = GetType(Ident).GetField("IsRefInst").FieldType
IdentToMNTokIL.Emit(OpCodes.Stfld, GetType(MethodNameTok).GetField("IsRefInst"))
IdentToMNTokIL.MarkSequencePoint(doc4, 42, 1, 42, 100)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(MethodNameTok)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Ident)
IdentToMNTokIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("IsValInRefInst"))
Typ = GetType(Ident).GetField("IsValInRefInst").FieldType
IdentToMNTokIL.Emit(OpCodes.Stfld, GetType(MethodNameTok).GetField("IsValInRefInst"))
IdentToMNTokIL.MarkSequencePoint(doc4, 43, 1, 43, 100)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(MethodNameTok)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Ident)
IdentToMNTokIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("TTok"))
Typ = GetType(Ident).GetField("TTok").FieldType
IdentToMNTokIL.Emit(OpCodes.Stfld, GetType(MethodNameTok).GetField("TTok"))
IdentToMNTokIL.MarkSequencePoint(doc4, 44, 1, 44, 100)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(MethodNameTok)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Ident)
IdentToMNTokIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("OrdOp"))
Typ = GetType(Ident).GetField("OrdOp").FieldType
IdentToMNTokIL.Emit(OpCodes.Stfld, GetType(MethodNameTok).GetField("OrdOp"))
IdentToMNTokIL.MarkSequencePoint(doc4, 45, 1, 45, 100)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(MethodNameTok)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Ident)
IdentToMNTokIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
IdentToMNTokIL.Emit(OpCodes.Stfld, GetType(MethodNameTok).GetField("Value"))
IdentToMNTokIL.MarkSequencePoint(doc4, 46, 1, 46, 100)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(MethodNameTok)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Ident)
IdentToMNTokIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Line"))
Typ = GetType(Ident).GetField("Line").FieldType
IdentToMNTokIL.Emit(OpCodes.Stfld, GetType(MethodNameTok).GetField("Line"))
IdentToMNTokIL.MarkSequencePoint(doc4, 48, 1, 48, 100)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(MethodNameTok)
IdentToMNTokIL.MarkSequencePoint(doc4, 49, 1, 49, 100)
IdentToMNTokIL.Emit(OpCodes.Ret)
Dim typ6(-1) As Type
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = GetType(Expr)
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = GetType(System.Int32)
Dim procMethodCall As MethodBuilder = ExprOptimizer.DefineMethod("procMethodCall", MethodAttributes.Public, GetType(Expr), typ6)
Dim procMethodCallIL As ILGenerator = procMethodCall.GetILGenerator()
Dim procMethodCallparam00 As ParameterBuilder = procMethodCall.DefineParameter(0, ParameterAttributes.RetVal, "")
Dim procMethodCallparam01 As ParameterBuilder = procMethodCall.DefineParameter(1, ParameterAttributes.None, "stm")
Dim procMethodCallparam02 As ParameterBuilder = procMethodCall.DefineParameter(2, ParameterAttributes.None, "i")
procMethodCallIL.MarkSequencePoint(doc4, 53, 1, 53, 100)
Dim locbldr94 As LocalBuilder = procMethodCallIL.DeclareLocal(GetType(MethodNameTok))
locbldr94.SetLocalSymInfo("mn")
procMethodCallIL.Emit(OpCodes.Newobj, GetType(MethodNameTok).GetConstructor(Type.EmptyTypes))
procMethodCallIL.Emit(OpCodes.Stloc, 0)
procMethodCallIL.MarkSequencePoint(doc4, 54, 1, 54, 100)
Dim locbldr95 As LocalBuilder = procMethodCallIL.DeclareLocal(GetType(MethodCallTok))
locbldr95.SetLocalSymInfo("mct")
procMethodCallIL.Emit(OpCodes.Newobj, GetType(MethodCallTok).GetConstructor(Type.EmptyTypes))
procMethodCallIL.Emit(OpCodes.Stloc, 1)
procMethodCallIL.MarkSequencePoint(doc4, 55, 1, 55, 100)
Dim locbldr96 As LocalBuilder = procMethodCallIL.DeclareLocal(GetType(Ident))
locbldr96.SetLocalSymInfo("idt")
procMethodCallIL.Emit(OpCodes.Ldnull)
procMethodCallIL.Emit(OpCodes.Stloc, 2)
procMethodCallIL.MarkSequencePoint(doc4, 56, 1, 56, 100)
Dim locbldr97 As LocalBuilder = procMethodCallIL.DeclareLocal(GetType(Expr))
locbldr97.SetLocalSymInfo("ep2")
procMethodCallIL.Emit(OpCodes.Newobj, GetType(Expr).GetConstructor(Type.EmptyTypes))
procMethodCallIL.Emit(OpCodes.Stloc, 3)
procMethodCallIL.MarkSequencePoint(doc4, 57, 1, 57, 100)
Dim locbldr98 As LocalBuilder = procMethodCallIL.DeclareLocal(GetType(System.Int32))
locbldr98.SetLocalSymInfo("lvl")
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Stloc, 4)
procMethodCallIL.MarkSequencePoint(doc4, 58, 1, 58, 100)
Dim locbldr99 As LocalBuilder = procMethodCallIL.DeclareLocal(GetType(System.Boolean))
locbldr99.SetLocalSymInfo("d")
procMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
procMethodCallIL.Emit(OpCodes.Stloc, 5)
procMethodCallIL.MarkSequencePoint(doc4, 59, 1, 59, 100)
Dim locbldr100 As LocalBuilder = procMethodCallIL.DeclareLocal(GetType(System.Int32))
locbldr100.SetLocalSymInfo("j")
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Stloc, 6)
procMethodCallIL.MarkSequencePoint(doc4, 61, 1, 61, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Sub)
procMethodCallIL.Emit(OpCodes.Starg, 2)
procMethodCallIL.MarkSequencePoint(doc4, 62, 1, 62, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMethodCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
procMethodCallIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
procMethodCallIL.Emit(OpCodes.Stloc, 2)
procMethodCallIL.MarkSequencePoint(doc4, 63, 1, 63, 100)
procMethodCallIL.Emit(OpCodes.Ldarg_0)
Dim typ7(-1) As Type
procMethodCallIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Ident)
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = Typ
procMethodCallIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodNameTok)
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = Typ
procMethodCallIL.Emit(OpCodes.Callvirt, IdentToMNTok)
Typ = IdentToMNTok.ReturnType
procMethodCallIL.Emit(OpCodes.Stloc, 0)
procMethodCallIL.MarkSequencePoint(doc4, 64, 1, 64, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Stloc, 6)
procMethodCallIL.MarkSequencePoint(doc4, 65, 1, 65, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Add)
procMethodCallIL.Emit(OpCodes.Starg, 2)
procMethodCallIL.MarkSequencePoint(doc4, 67, 1, 67, 100)
Dim locbldr101 As LocalBuilder = procMethodCallIL.DeclareLocal(GetType(Token))
locbldr101.SetLocalSymInfo("tok2")
procMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMethodCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
procMethodCallIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
procMethodCallIL.Emit(OpCodes.Stloc, 7)
procMethodCallIL.MarkSequencePoint(doc4, 68, 1, 68, 100)
Dim locbldr102 As LocalBuilder = procMethodCallIL.DeclareLocal(GetType(System.Type))
locbldr102.SetLocalSymInfo("typ2")
procMethodCallIL.MarkSequencePoint(doc4, 69, 1, 69, 100)
Dim locbldr103 As LocalBuilder = procMethodCallIL.DeclareLocal(GetType(System.Boolean))
locbldr103.SetLocalSymInfo("b2")
procMethodCallIL.MarkSequencePoint(doc4, 70, 1, 70, 100)
Dim locbldr104 As LocalBuilder = procMethodCallIL.DeclareLocal(GetType(System.Int32))
locbldr104.SetLocalSymInfo("len")
procMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMethodCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
procMethodCallIL.Emit(OpCodes.Ldlen)
procMethodCallIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Sub)
procMethodCallIL.Emit(OpCodes.Stloc, 10)
procMethodCallIL.MarkSequencePoint(doc4, 72, 1, 72, 100)
Dim typ8(-1) As Type
procMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = Typ
procMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ8))
Typ = Typ03.GetMethod("RemToken", typ8).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
procMethodCallIL.Emit(OpCodes.Pop)
End If
procMethodCallIL.MarkSequencePoint(doc4, 73, 1, 73, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMethodCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
procMethodCallIL.Emit(OpCodes.Ldlen)
procMethodCallIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Sub)
procMethodCallIL.Emit(OpCodes.Stloc, 10)
procMethodCallIL.MarkSequencePoint(doc4, 74, 1, 74, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Sub)
procMethodCallIL.Emit(OpCodes.Starg, 2)
procMethodCallIL.MarkSequencePoint(doc4, 76, 1, 76, 100)
Dim label0 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
procMethodCallIL.MarkSequencePoint(doc4, 77, 1, 77, 100)
Dim label1 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
procMethodCallIL.MarkSequencePoint(doc4, 78, 1, 78, 100)
Dim label2 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
procMethodCallIL.MarkSequencePoint(doc4, 80, 1, 80, 100)
procMethodCallIL.MarkLabel(label0)
procMethodCallIL.MarkSequencePoint(doc4, 83, 1, 83, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Add)
procMethodCallIL.Emit(OpCodes.Starg, 2)
procMethodCallIL.MarkSequencePoint(doc4, 85, 1, 85, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMethodCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
procMethodCallIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
procMethodCallIL.Emit(OpCodes.Stloc, 7)
procMethodCallIL.MarkSequencePoint(doc4, 86, 1, 86, 100)
procMethodCallIL.Emit(OpCodes.Ldtoken, GetType(RParen))
Dim typ9 As Type() = {GetType(System.RuntimeTypeHandle)}
procMethodCallIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ9))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ9).ReturnType
procMethodCallIL.Emit(OpCodes.Stloc, 8)
procMethodCallIL.MarkSequencePoint(doc4, 87, 1, 87, 100)
Dim typ10(-1) As Type
procMethodCallIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
procMethodCallIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(Token)
procMethodCallIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ10(UBound(typ10) + 1)
typ10(UBound(typ10)) = Typ
procMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ10))
Typ = Typ03.GetMethod("IsInstanceOfType", typ10).ReturnType
procMethodCallIL.Emit(OpCodes.Stloc, 9)
procMethodCallIL.MarkSequencePoint(doc4, 88, 1, 88, 100)
procMethodCallIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
procMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa87 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
Dim tru87 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
Dim cont87 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
procMethodCallIL.Emit(OpCodes.Beq, tru87)
procMethodCallIL.Emit(OpCodes.Br, fa87)
procMethodCallIL.MarkLabel(tru87)
procMethodCallIL.MarkSequencePoint(doc4, 89, 1, 89, 100)
procMethodCallIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Sub)
procMethodCallIL.Emit(OpCodes.Stloc, 4)
procMethodCallIL.MarkSequencePoint(doc4, 90, 1, 90, 100)
procMethodCallIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa88 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
Dim tru88 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
Dim cont88 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
procMethodCallIL.Emit(OpCodes.Beq, tru88)
procMethodCallIL.Emit(OpCodes.Br, fa88)
procMethodCallIL.MarkLabel(tru88)
procMethodCallIL.MarkSequencePoint(doc4, 91, 1, 91, 100)
procMethodCallIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
procMethodCallIL.Emit(OpCodes.Stloc, 5)
procMethodCallIL.MarkSequencePoint(doc4, 92, 1, 92, 100)
Dim typ11(-1) As Type
procMethodCallIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodCallTok)
Typ03 = Typ
procMethodCallIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Expr)
ReDim Preserve typ11(UBound(typ11) + 1)
typ11(UBound(typ11)) = Typ
procMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddParam", typ11))
Typ = Typ03.GetMethod("AddParam", typ11).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
procMethodCallIL.Emit(OpCodes.Pop)
End If
procMethodCallIL.MarkSequencePoint(doc4, 93, 1, 93, 100)
Dim typ12(-1) As Type
procMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
ReDim Preserve typ12(UBound(typ12) + 1)
typ12(UBound(typ12)) = Typ
procMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ12))
Typ = Typ03.GetMethod("RemToken", typ12).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
procMethodCallIL.Emit(OpCodes.Pop)
End If
procMethodCallIL.MarkSequencePoint(doc4, 94, 1, 94, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMethodCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
procMethodCallIL.Emit(OpCodes.Ldlen)
procMethodCallIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Sub)
procMethodCallIL.Emit(OpCodes.Stloc, 10)
procMethodCallIL.MarkSequencePoint(doc4, 95, 1, 95, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Sub)
procMethodCallIL.Emit(OpCodes.Starg, 2)
procMethodCallIL.MarkSequencePoint(doc4, 96, 1, 96, 100)
procMethodCallIL.Emit(OpCodes.Br, label1)
procMethodCallIL.MarkSequencePoint(doc4, 97, 1, 97, 100)
procMethodCallIL.Emit(OpCodes.Br, cont88)
procMethodCallIL.MarkLabel(fa88)
procMethodCallIL.MarkSequencePoint(doc4, 98, 1, 98, 100)
procMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
procMethodCallIL.Emit(OpCodes.Stloc, 5)
procMethodCallIL.MarkSequencePoint(doc4, 99, 1, 99, 100)
procMethodCallIL.Emit(OpCodes.Br, label2)
procMethodCallIL.MarkSequencePoint(doc4, 100, 1, 100, 100)
procMethodCallIL.Emit(OpCodes.Br, cont88)
procMethodCallIL.MarkLabel(cont88)
procMethodCallIL.MarkSequencePoint(doc4, 101, 1, 101, 100)
procMethodCallIL.Emit(OpCodes.Br, label2)
procMethodCallIL.MarkSequencePoint(doc4, 102, 1, 102, 100)
procMethodCallIL.Emit(OpCodes.Br, cont87)
procMethodCallIL.MarkLabel(fa87)
procMethodCallIL.Emit(OpCodes.Br, cont87)
procMethodCallIL.MarkLabel(cont87)
procMethodCallIL.MarkSequencePoint(doc4, 104, 1, 104, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMethodCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
procMethodCallIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
procMethodCallIL.Emit(OpCodes.Stloc, 7)
procMethodCallIL.MarkSequencePoint(doc4, 105, 1, 105, 100)
procMethodCallIL.Emit(OpCodes.Ldtoken, GetType(LParen))
Dim typ13 As Type() = {GetType(System.RuntimeTypeHandle)}
procMethodCallIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ13))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ13).ReturnType
procMethodCallIL.Emit(OpCodes.Stloc, 8)
procMethodCallIL.MarkSequencePoint(doc4, 106, 1, 106, 100)
Dim typ14(-1) As Type
procMethodCallIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
procMethodCallIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(Token)
procMethodCallIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = Typ
procMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ14))
Typ = Typ03.GetMethod("IsInstanceOfType", typ14).ReturnType
procMethodCallIL.Emit(OpCodes.Stloc, 9)
procMethodCallIL.MarkSequencePoint(doc4, 107, 1, 107, 100)
procMethodCallIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
procMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa89 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
Dim tru89 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
Dim cont89 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
procMethodCallIL.Emit(OpCodes.Beq, tru89)
procMethodCallIL.Emit(OpCodes.Br, fa89)
procMethodCallIL.MarkLabel(tru89)
procMethodCallIL.MarkSequencePoint(doc4, 108, 1, 108, 100)
procMethodCallIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Add)
procMethodCallIL.Emit(OpCodes.Stloc, 4)
procMethodCallIL.MarkSequencePoint(doc4, 109, 1, 109, 100)
procMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
procMethodCallIL.Emit(OpCodes.Stloc, 5)
procMethodCallIL.MarkSequencePoint(doc4, 111, 1, 111, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMethodCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
procMethodCallIL.Emit(OpCodes.Ldlen)
procMethodCallIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Sub)
procMethodCallIL.Emit(OpCodes.Stloc, 10)
procMethodCallIL.MarkSequencePoint(doc4, 113, 1, 113, 100)
procMethodCallIL.Emit(OpCodes.Br, label2)
procMethodCallIL.MarkSequencePoint(doc4, 114, 1, 114, 100)
procMethodCallIL.Emit(OpCodes.Br, cont89)
procMethodCallIL.MarkLabel(fa89)
procMethodCallIL.Emit(OpCodes.Br, cont89)
procMethodCallIL.MarkLabel(cont89)
procMethodCallIL.MarkSequencePoint(doc4, 116, 1, 116, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMethodCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
procMethodCallIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
procMethodCallIL.Emit(OpCodes.Stloc, 7)
procMethodCallIL.MarkSequencePoint(doc4, 117, 1, 117, 100)
procMethodCallIL.Emit(OpCodes.Ldtoken, GetType(Comma))
Dim typ15 As Type() = {GetType(System.RuntimeTypeHandle)}
procMethodCallIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ15))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ15).ReturnType
procMethodCallIL.Emit(OpCodes.Stloc, 8)
procMethodCallIL.MarkSequencePoint(doc4, 118, 1, 118, 100)
Dim typ16(-1) As Type
procMethodCallIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
procMethodCallIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(Token)
procMethodCallIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ16(UBound(typ16) + 1)
typ16(UBound(typ16)) = Typ
procMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ16))
Typ = Typ03.GetMethod("IsInstanceOfType", typ16).ReturnType
procMethodCallIL.Emit(OpCodes.Stloc, 9)
procMethodCallIL.MarkSequencePoint(doc4, 119, 1, 119, 100)
procMethodCallIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
procMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa90 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
Dim tru90 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
Dim cont90 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
procMethodCallIL.Emit(OpCodes.Beq, tru90)
procMethodCallIL.Emit(OpCodes.Br, fa90)
procMethodCallIL.MarkLabel(tru90)
procMethodCallIL.MarkSequencePoint(doc4, 120, 1, 120, 100)
procMethodCallIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
Dim fa91 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
Dim tru91 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
Dim cont91 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
procMethodCallIL.Emit(OpCodes.Beq, tru91)
procMethodCallIL.Emit(OpCodes.Br, fa91)
procMethodCallIL.MarkLabel(tru91)
procMethodCallIL.MarkSequencePoint(doc4, 121, 1, 121, 100)
procMethodCallIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
procMethodCallIL.Emit(OpCodes.Stloc, 5)
procMethodCallIL.MarkSequencePoint(doc4, 122, 1, 122, 100)
Dim typ17(-1) As Type
procMethodCallIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodCallTok)
Typ03 = Typ
procMethodCallIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Expr)
ReDim Preserve typ17(UBound(typ17) + 1)
typ17(UBound(typ17)) = Typ
procMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddParam", typ17))
Typ = Typ03.GetMethod("AddParam", typ17).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
procMethodCallIL.Emit(OpCodes.Pop)
End If
procMethodCallIL.MarkSequencePoint(doc4, 123, 1, 123, 100)
procMethodCallIL.Emit(OpCodes.Newobj, GetType(Expr).GetConstructor(Type.EmptyTypes))
procMethodCallIL.Emit(OpCodes.Stloc, 3)
procMethodCallIL.MarkSequencePoint(doc4, 124, 1, 124, 100)
Dim typ18(-1) As Type
procMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
ReDim Preserve typ18(UBound(typ18) + 1)
typ18(UBound(typ18)) = Typ
procMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ18))
Typ = Typ03.GetMethod("RemToken", typ18).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
procMethodCallIL.Emit(OpCodes.Pop)
End If
procMethodCallIL.MarkSequencePoint(doc4, 125, 1, 125, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMethodCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
procMethodCallIL.Emit(OpCodes.Ldlen)
procMethodCallIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Sub)
procMethodCallIL.Emit(OpCodes.Stloc, 10)
procMethodCallIL.MarkSequencePoint(doc4, 126, 1, 126, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Sub)
procMethodCallIL.Emit(OpCodes.Starg, 2)
procMethodCallIL.MarkSequencePoint(doc4, 127, 1, 127, 100)
procMethodCallIL.Emit(OpCodes.Br, label2)
procMethodCallIL.MarkSequencePoint(doc4, 128, 1, 128, 100)
procMethodCallIL.Emit(OpCodes.Br, cont91)
procMethodCallIL.MarkLabel(fa91)
procMethodCallIL.MarkSequencePoint(doc4, 129, 1, 129, 100)
procMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
procMethodCallIL.Emit(OpCodes.Stloc, 5)
procMethodCallIL.MarkSequencePoint(doc4, 130, 1, 130, 100)
procMethodCallIL.Emit(OpCodes.Br, label2)
procMethodCallIL.MarkSequencePoint(doc4, 131, 1, 131, 100)
procMethodCallIL.Emit(OpCodes.Br, cont91)
procMethodCallIL.MarkLabel(cont91)
procMethodCallIL.MarkSequencePoint(doc4, 132, 1, 132, 100)
procMethodCallIL.Emit(OpCodes.Br, cont90)
procMethodCallIL.MarkLabel(fa90)
procMethodCallIL.MarkSequencePoint(doc4, 133, 1, 133, 100)
procMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
procMethodCallIL.Emit(OpCodes.Stloc, 5)
procMethodCallIL.MarkSequencePoint(doc4, 134, 1, 134, 100)
procMethodCallIL.Emit(OpCodes.Br, label2)
procMethodCallIL.MarkSequencePoint(doc4, 135, 1, 135, 100)
procMethodCallIL.Emit(OpCodes.Br, cont90)
procMethodCallIL.MarkLabel(cont90)
procMethodCallIL.MarkSequencePoint(doc4, 137, 1, 137, 100)
procMethodCallIL.MarkLabel(label2)
procMethodCallIL.MarkSequencePoint(doc4, 139, 1, 139, 100)
procMethodCallIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
procMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa92 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
Dim tru92 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
Dim cont92 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
procMethodCallIL.Emit(OpCodes.Beq, tru92)
procMethodCallIL.Emit(OpCodes.Br, fa92)
procMethodCallIL.MarkLabel(tru92)
procMethodCallIL.MarkSequencePoint(doc4, 140, 1, 140, 100)
Dim typ19(-1) As Type
procMethodCallIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Expr)
Typ03 = Typ
procMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMethodCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
procMethodCallIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ReDim Preserve typ19(UBound(typ19) + 1)
typ19(UBound(typ19)) = Typ
procMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ19))
Typ = Typ03.GetMethod("AddToken", typ19).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
procMethodCallIL.Emit(OpCodes.Pop)
End If
procMethodCallIL.MarkSequencePoint(doc4, 141, 1, 141, 100)
Dim typ20(-1) As Type
procMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
ReDim Preserve typ20(UBound(typ20) + 1)
typ20(UBound(typ20)) = Typ
procMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ20))
Typ = Typ03.GetMethod("RemToken", typ20).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
procMethodCallIL.Emit(OpCodes.Pop)
End If
procMethodCallIL.MarkSequencePoint(doc4, 142, 1, 142, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMethodCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
procMethodCallIL.Emit(OpCodes.Ldlen)
procMethodCallIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Sub)
procMethodCallIL.Emit(OpCodes.Stloc, 10)
procMethodCallIL.MarkSequencePoint(doc4, 143, 1, 143, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Sub)
procMethodCallIL.Emit(OpCodes.Starg, 2)
procMethodCallIL.MarkSequencePoint(doc4, 144, 1, 144, 100)
procMethodCallIL.Emit(OpCodes.Br, cont92)
procMethodCallIL.MarkLabel(fa92)
procMethodCallIL.Emit(OpCodes.Br, cont92)
procMethodCallIL.MarkLabel(cont92)
procMethodCallIL.MarkSequencePoint(doc4, 146, 1, 146, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(System.Int32)
Dim fa93 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
Dim tru93 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
Dim cont93 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
procMethodCallIL.Emit(OpCodes.Beq, tru93)
procMethodCallIL.Emit(OpCodes.Br, fa93)
procMethodCallIL.MarkLabel(tru93)
procMethodCallIL.MarkSequencePoint(doc4, 147, 1, 147, 100)
procMethodCallIL.Emit(OpCodes.Br, label1)
procMethodCallIL.MarkSequencePoint(doc4, 148, 1, 148, 100)
procMethodCallIL.Emit(OpCodes.Br, cont93)
procMethodCallIL.MarkLabel(fa93)
procMethodCallIL.MarkSequencePoint(doc4, 149, 1, 149, 100)
procMethodCallIL.Emit(OpCodes.Br, label0)
procMethodCallIL.MarkSequencePoint(doc4, 150, 1, 150, 100)
procMethodCallIL.Emit(OpCodes.Br, cont93)
procMethodCallIL.MarkLabel(cont93)
procMethodCallIL.MarkSequencePoint(doc4, 152, 1, 152, 100)
procMethodCallIL.MarkLabel(label1)
procMethodCallIL.MarkSequencePoint(doc4, 154, 1, 154, 100)
procMethodCallIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodCallTok)
procMethodCallIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodNameTok)
procMethodCallIL.Emit(OpCodes.Stfld, GetType(MethodCallTok).GetField("Name"))
procMethodCallIL.MarkSequencePoint(doc4, 155, 1, 155, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMethodCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
procMethodCallIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
Typ02 = Typ
procMethodCallIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodCallTok)
Typ = Typ02
procMethodCallIL.Emit(OpCodes.Stelem, Typ.GetElementType())
procMethodCallIL.MarkSequencePoint(doc4, 157, 1, 157, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMethodCallIL.MarkSequencePoint(doc4, 159, 1, 159, 100)
procMethodCallIL.Emit(OpCodes.Ret)
Dim typ21(-1) As Type
ReDim Preserve typ21(UBound(typ21) + 1)
typ21(UBound(typ21)) = GetType(Expr)
Dim Optimize As MethodBuilder = ExprOptimizer.DefineMethod("Optimize", MethodAttributes.Public, GetType(Expr), typ21)
Dim OptimizeIL As ILGenerator = Optimize.GetILGenerator()
Dim Optimizeparam00 As ParameterBuilder = Optimize.DefineParameter(0, ParameterAttributes.RetVal, "")
Dim Optimizeparam01 As ParameterBuilder = Optimize.DefineParameter(1, ParameterAttributes.None, "exp")
OptimizeIL.MarkSequencePoint(doc4, 163, 1, 163, 100)
Dim locbldr105 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.Int32))
locbldr105.SetLocalSymInfo("len")
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
OptimizeIL.Emit(OpCodes.Ldlen)
OptimizeIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Sub)
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc4, 164, 1, 164, 100)
Dim locbldr106 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.Int32))
locbldr106.SetLocalSymInfo("i")
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc4, 165, 1, 165, 100)
Dim locbldr107 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.Int32))
locbldr107.SetLocalSymInfo("j")
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc4, 167, 1, 167, 100)
Dim label3 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.MarkSequencePoint(doc4, 168, 1, 168, 100)
Dim label4 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.MarkSequencePoint(doc4, 171, 1, 171, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa94 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru94 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont94 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Blt, tru94)
OptimizeIL.Emit(OpCodes.Br, fa94)
OptimizeIL.MarkLabel(tru94)
OptimizeIL.MarkSequencePoint(doc4, 172, 1, 172, 100)
OptimizeIL.Emit(OpCodes.Br, label4)
OptimizeIL.MarkSequencePoint(doc4, 173, 1, 173, 100)
OptimizeIL.Emit(OpCodes.Br, cont94)
OptimizeIL.MarkLabel(fa94)
OptimizeIL.Emit(OpCodes.Br, cont94)
OptimizeIL.MarkLabel(cont94)
OptimizeIL.MarkSequencePoint(doc4, 175, 1, 175, 100)
OptimizeIL.MarkLabel(label3)
OptimizeIL.MarkSequencePoint(doc4, 177, 1, 177, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Add)
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc4, 179, 1, 179, 100)
Dim label5 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.MarkSequencePoint(doc4, 181, 1, 181, 100)
Dim locbldr108 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(Token))
locbldr108.SetLocalSymInfo("tok")
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc4, 182, 1, 182, 100)
Dim locbldr109 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.Type))
locbldr109.SetLocalSymInfo("typ")
OptimizeIL.MarkSequencePoint(doc4, 183, 1, 183, 100)
Dim locbldr110 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.Boolean))
locbldr110.SetLocalSymInfo("b")
OptimizeIL.MarkSequencePoint(doc4, 184, 1, 184, 100)
Dim locbldr111 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.String))
locbldr111.SetLocalSymInfo("str")
OptimizeIL.MarkSequencePoint(doc4, 186, 1, 186, 100)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(DollarSign))
Dim typ22 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ22))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ22).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc4, 187, 1, 187, 100)
Dim typ23(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Type)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ23(UBound(typ23) + 1)
typ23(UBound(typ23)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ23))
Typ = Typ03.GetMethod("IsInstanceOfType", typ23).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 5)
OptimizeIL.MarkSequencePoint(doc4, 189, 1, 189, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa95 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru95 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont95 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru95)
OptimizeIL.Emit(OpCodes.Br, fa95)
OptimizeIL.MarkLabel(tru95)
OptimizeIL.MarkSequencePoint(doc4, 190, 1, 190, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("DurConvFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("DurConvFlag").FieldType
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("DurConvFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("DurConvFlag").FieldType
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Not)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("DurConvFlag"))
OptimizeIL.MarkSequencePoint(doc4, 191, 1, 191, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("isChanged"))
OptimizeIL.MarkSequencePoint(doc4, 192, 1, 192, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("DurConvFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("DurConvFlag").FieldType
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa96 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru96 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont96 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, fa96)
OptimizeIL.Emit(OpCodes.Br, tru96)
OptimizeIL.MarkLabel(tru96)
OptimizeIL.MarkSequencePoint(doc4, 193, 1, 193, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("ConvFlag"))
OptimizeIL.MarkSequencePoint(doc4, 194, 1, 194, 100)
Dim typ24(-1) As Type
OptimizeIL.Emit(OpCodes.Ldstr, "conv ")
Typ = GetType(System.String)
ReDim Preserve typ24(UBound(typ24) + 1)
typ24(UBound(typ24)) = Typ
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("OrdOp"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("OrdOp").FieldType
ReDim Preserve typ24(UBound(typ24) + 1)
typ24(UBound(typ24)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ24))
Typ = GetType(String).GetMethod("Concat", typ24).ReturnType
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("OrdOp"))
OptimizeIL.MarkSequencePoint(doc4, 195, 1, 195, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("OrdOp"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("OrdOp").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 6)
OptimizeIL.MarkSequencePoint(doc4, 196, 1, 196, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Trim", Type.EmptyTypes))
Typ = Typ03.GetMethod("Trim", Type.EmptyTypes).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 6)
OptimizeIL.MarkSequencePoint(doc4, 197, 1, 197, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.String)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("OrdOp"))
OptimizeIL.MarkSequencePoint(doc4, 198, 1, 198, 100)
OptimizeIL.Emit(OpCodes.Br, cont96)
OptimizeIL.MarkLabel(fa96)
OptimizeIL.Emit(OpCodes.Br, cont96)
OptimizeIL.MarkLabel(cont96)
OptimizeIL.MarkSequencePoint(doc4, 199, 1, 199, 100)
Dim typ26(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ReDim Preserve typ26(UBound(typ26) + 1)
typ26(UBound(typ26)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ26))
Typ = Typ03.GetMethod("RemToken", typ26).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
OptimizeIL.Emit(OpCodes.Pop)
End If
OptimizeIL.MarkSequencePoint(doc4, 200, 1, 200, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Sub)
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc4, 201, 1, 201, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
OptimizeIL.Emit(OpCodes.Ldlen)
OptimizeIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Sub)
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc4, 202, 1, 202, 100)
OptimizeIL.Emit(OpCodes.Br, label5)
OptimizeIL.MarkSequencePoint(doc4, 203, 1, 203, 100)
OptimizeIL.Emit(OpCodes.Br, cont95)
OptimizeIL.MarkLabel(fa95)
OptimizeIL.Emit(OpCodes.Br, cont95)
OptimizeIL.MarkLabel(cont95)
OptimizeIL.MarkSequencePoint(doc4, 205, 1, 205, 100)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(TypeTok))
Dim typ27 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ27))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ27).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc4, 206, 1, 206, 100)
Dim typ28(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Type)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ28(UBound(typ28) + 1)
typ28(UBound(typ28)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ28))
Typ = Typ03.GetMethod("IsInstanceOfType", typ28).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 5)
OptimizeIL.MarkSequencePoint(doc4, 208, 1, 208, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa97 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru97 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont97 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru97)
OptimizeIL.Emit(OpCodes.Br, fa97)
OptimizeIL.MarkLabel(tru97)
OptimizeIL.MarkSequencePoint(doc4, 209, 1, 209, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("DurConvFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("DurConvFlag").FieldType
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa98 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru98 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont98 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, fa98)
OptimizeIL.Emit(OpCodes.Br, tru98)
OptimizeIL.MarkLabel(tru98)
OptimizeIL.MarkSequencePoint(doc4, 210, 1, 210, 100)
Dim locbldr112 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(TypeTok))
locbldr112.SetLocalSymInfo("tt1")
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
OptimizeIL.Emit(OpCodes.Stloc, 7)
OptimizeIL.MarkSequencePoint(doc4, 211, 1, 211, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(TypeTok)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("ConvTyp"))
OptimizeIL.MarkSequencePoint(doc4, 212, 1, 212, 100)
Dim typ29(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ReDim Preserve typ29(UBound(typ29) + 1)
typ29(UBound(typ29)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ29))
Typ = Typ03.GetMethod("RemToken", typ29).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
OptimizeIL.Emit(OpCodes.Pop)
End If
OptimizeIL.MarkSequencePoint(doc4, 213, 1, 213, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Sub)
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc4, 214, 1, 214, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
OptimizeIL.Emit(OpCodes.Ldlen)
OptimizeIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Sub)
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc4, 215, 1, 215, 100)
OptimizeIL.Emit(OpCodes.Br, cont98)
OptimizeIL.MarkLabel(fa98)
OptimizeIL.Emit(OpCodes.Br, cont98)
OptimizeIL.MarkLabel(cont98)
OptimizeIL.MarkSequencePoint(doc4, 216, 1, 216, 100)
OptimizeIL.Emit(OpCodes.Br, label5)
OptimizeIL.MarkSequencePoint(doc4, 217, 1, 217, 100)
OptimizeIL.Emit(OpCodes.Br, cont97)
OptimizeIL.MarkLabel(fa97)
OptimizeIL.Emit(OpCodes.Br, cont97)
OptimizeIL.MarkLabel(cont97)
OptimizeIL.MarkSequencePoint(doc4, 219, 1, 219, 100)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(Ident))
Dim typ30 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ30))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ30).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc4, 220, 1, 220, 100)
Dim typ31(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Type)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ31(UBound(typ31) + 1)
typ31(UBound(typ31)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ31))
Typ = Typ03.GetMethod("IsInstanceOfType", typ31).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 5)
OptimizeIL.MarkSequencePoint(doc4, 222, 1, 222, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa99 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru99 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont99 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru99)
OptimizeIL.Emit(OpCodes.Br, fa99)
OptimizeIL.MarkLabel(tru99)
OptimizeIL.MarkSequencePoint(doc4, 223, 1, 223, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IdentFlag"))
OptimizeIL.MarkSequencePoint(doc4, 224, 1, 224, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("isChanged"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("isChanged").FieldType
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa100 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru100 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont100 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru100)
OptimizeIL.Emit(OpCodes.Br, fa100)
OptimizeIL.MarkLabel(tru100)
OptimizeIL.MarkSequencePoint(doc4, 225, 1, 225, 100)
Dim locbldr113 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(Ident))
locbldr113.SetLocalSymInfo("id1")
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
OptimizeIL.Emit(OpCodes.Stloc, 8)
OptimizeIL.MarkSequencePoint(doc4, 226, 1, 226, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
Typ02 = Typ
Dim typ32(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(Ident)
ReDim Preserve typ32(UBound(typ32) + 1)
typ32(UBound(typ32)) = Typ
OptimizeIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("UpdateIdent", typ32))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("UpdateIdent", typ32).ReturnType
Typ = Typ02
OptimizeIL.Emit(OpCodes.Stelem, Typ.GetElementType())
OptimizeIL.MarkSequencePoint(doc4, 227, 1, 227, 100)
OptimizeIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("SetUnaryFalse", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("SetUnaryFalse", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
OptimizeIL.Emit(OpCodes.Pop)
End If
OptimizeIL.MarkSequencePoint(doc4, 228, 1, 228, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc4, 229, 1, 229, 100)
OptimizeIL.Emit(OpCodes.Br, cont100)
OptimizeIL.MarkLabel(fa100)
OptimizeIL.Emit(OpCodes.Br, cont100)
OptimizeIL.MarkLabel(cont100)
OptimizeIL.MarkSequencePoint(doc4, 230, 1, 230, 100)
OptimizeIL.Emit(OpCodes.Br, label5)
OptimizeIL.MarkSequencePoint(doc4, 231, 1, 231, 100)
OptimizeIL.Emit(OpCodes.Br, cont99)
OptimizeIL.MarkLabel(fa99)
OptimizeIL.Emit(OpCodes.Br, cont99)
OptimizeIL.MarkLabel(cont99)
OptimizeIL.MarkSequencePoint(doc4, 233, 1, 233, 100)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(CharLiteral))
Dim typ33 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ33))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ33).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc4, 234, 1, 234, 100)
Dim typ34(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Type)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ34(UBound(typ34) + 1)
typ34(UBound(typ34)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ34))
Typ = Typ03.GetMethod("IsInstanceOfType", typ34).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 5)
OptimizeIL.MarkSequencePoint(doc4, 236, 1, 236, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa101 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru101 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont101 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru101)
OptimizeIL.Emit(OpCodes.Br, fa101)
OptimizeIL.MarkLabel(tru101)
OptimizeIL.MarkSequencePoint(doc4, 237, 1, 237, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("isChanged"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("isChanged").FieldType
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa102 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru102 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont102 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru102)
OptimizeIL.Emit(OpCodes.Br, fa102)
OptimizeIL.MarkLabel(tru102)
OptimizeIL.MarkSequencePoint(doc4, 238, 1, 238, 100)
Dim locbldr114 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(CharLiteral))
locbldr114.SetLocalSymInfo("cl1")
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
OptimizeIL.Emit(OpCodes.Stloc, 9)
OptimizeIL.MarkSequencePoint(doc4, 239, 1, 239, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
Typ02 = Typ
Dim typ35(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(CharLiteral)
ReDim Preserve typ35(UBound(typ35) + 1)
typ35(UBound(typ35)) = Typ
OptimizeIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("UpdateCharLit", typ35))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("UpdateCharLit", typ35).ReturnType
Typ = Typ02
OptimizeIL.Emit(OpCodes.Stelem, Typ.GetElementType())
OptimizeIL.MarkSequencePoint(doc4, 240, 1, 240, 100)
OptimizeIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("SetUnaryFalse", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("SetUnaryFalse", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
OptimizeIL.Emit(OpCodes.Pop)
End If
OptimizeIL.MarkSequencePoint(doc4, 241, 1, 241, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc4, 242, 1, 242, 100)
OptimizeIL.Emit(OpCodes.Br, cont102)
OptimizeIL.MarkLabel(fa102)
OptimizeIL.Emit(OpCodes.Br, cont102)
OptimizeIL.MarkLabel(cont102)
OptimizeIL.MarkSequencePoint(doc4, 243, 1, 243, 100)
OptimizeIL.Emit(OpCodes.Br, label5)
OptimizeIL.MarkSequencePoint(doc4, 244, 1, 244, 100)
OptimizeIL.Emit(OpCodes.Br, cont101)
OptimizeIL.MarkLabel(fa101)
OptimizeIL.Emit(OpCodes.Br, cont101)
OptimizeIL.MarkLabel(cont101)
OptimizeIL.MarkSequencePoint(doc4, 246, 1, 246, 100)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(StringLiteral))
Dim typ36 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ36))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ36).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc4, 247, 1, 247, 100)
Dim typ37(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Type)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ37(UBound(typ37) + 1)
typ37(UBound(typ37)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ37))
Typ = Typ03.GetMethod("IsInstanceOfType", typ37).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 5)
OptimizeIL.MarkSequencePoint(doc4, 249, 1, 249, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa103 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru103 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont103 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru103)
OptimizeIL.Emit(OpCodes.Br, fa103)
OptimizeIL.MarkLabel(tru103)
OptimizeIL.MarkSequencePoint(doc4, 250, 1, 250, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("isChanged"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("isChanged").FieldType
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa104 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru104 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont104 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru104)
OptimizeIL.Emit(OpCodes.Br, fa104)
OptimizeIL.MarkLabel(tru104)
OptimizeIL.MarkSequencePoint(doc4, 251, 1, 251, 100)
Dim locbldr115 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(StringLiteral))
locbldr115.SetLocalSymInfo("sl1")
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
OptimizeIL.Emit(OpCodes.Stloc, 10)
OptimizeIL.MarkSequencePoint(doc4, 252, 1, 252, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
Typ02 = Typ
Dim typ38(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(StringLiteral)
ReDim Preserve typ38(UBound(typ38) + 1)
typ38(UBound(typ38)) = Typ
OptimizeIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("UpdateStringLit", typ38))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("UpdateStringLit", typ38).ReturnType
Typ = Typ02
OptimizeIL.Emit(OpCodes.Stelem, Typ.GetElementType())
OptimizeIL.MarkSequencePoint(doc4, 253, 1, 253, 100)
OptimizeIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("SetUnaryFalse", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("SetUnaryFalse", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
OptimizeIL.Emit(OpCodes.Pop)
End If
OptimizeIL.MarkSequencePoint(doc4, 254, 1, 254, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc4, 255, 1, 255, 100)
OptimizeIL.Emit(OpCodes.Br, cont104)
OptimizeIL.MarkLabel(fa104)
OptimizeIL.Emit(OpCodes.Br, cont104)
OptimizeIL.MarkLabel(cont104)
OptimizeIL.MarkSequencePoint(doc4, 256, 1, 256, 100)
OptimizeIL.Emit(OpCodes.Br, label5)
OptimizeIL.MarkSequencePoint(doc4, 257, 1, 257, 100)
OptimizeIL.Emit(OpCodes.Br, cont103)
OptimizeIL.MarkLabel(fa103)
OptimizeIL.Emit(OpCodes.Br, cont103)
OptimizeIL.MarkLabel(cont103)
OptimizeIL.MarkSequencePoint(doc4, 259, 1, 259, 100)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(BooleanLiteral))
Dim typ39 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ39))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ39).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc4, 260, 1, 260, 100)
Dim typ40(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Type)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ40(UBound(typ40) + 1)
typ40(UBound(typ40)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ40))
Typ = Typ03.GetMethod("IsInstanceOfType", typ40).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 5)
OptimizeIL.MarkSequencePoint(doc4, 262, 1, 262, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa105 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru105 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont105 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru105)
OptimizeIL.Emit(OpCodes.Br, fa105)
OptimizeIL.MarkLabel(tru105)
OptimizeIL.MarkSequencePoint(doc4, 263, 1, 263, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("isChanged"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("isChanged").FieldType
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa106 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru106 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont106 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru106)
OptimizeIL.Emit(OpCodes.Br, fa106)
OptimizeIL.MarkLabel(tru106)
OptimizeIL.MarkSequencePoint(doc4, 264, 1, 264, 100)
Dim locbldr116 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(BooleanLiteral))
locbldr116.SetLocalSymInfo("bl1")
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
OptimizeIL.Emit(OpCodes.Stloc, 11)
OptimizeIL.MarkSequencePoint(doc4, 265, 1, 265, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
Typ02 = Typ
Dim typ41(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(BooleanLiteral)
ReDim Preserve typ41(UBound(typ41) + 1)
typ41(UBound(typ41)) = Typ
OptimizeIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("UpdateBoolLit", typ41))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("UpdateBoolLit", typ41).ReturnType
Typ = Typ02
OptimizeIL.Emit(OpCodes.Stelem, Typ.GetElementType())
OptimizeIL.MarkSequencePoint(doc4, 266, 1, 266, 100)
OptimizeIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("SetUnaryFalse", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("SetUnaryFalse", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
OptimizeIL.Emit(OpCodes.Pop)
End If
OptimizeIL.MarkSequencePoint(doc4, 267, 1, 267, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc4, 268, 1, 268, 100)
OptimizeIL.Emit(OpCodes.Br, cont106)
OptimizeIL.MarkLabel(fa106)
OptimizeIL.Emit(OpCodes.Br, cont106)
OptimizeIL.MarkLabel(cont106)
OptimizeIL.MarkSequencePoint(doc4, 269, 1, 269, 100)
OptimizeIL.Emit(OpCodes.Br, label5)
OptimizeIL.MarkSequencePoint(doc4, 270, 1, 270, 100)
OptimizeIL.Emit(OpCodes.Br, cont105)
OptimizeIL.MarkLabel(fa105)
OptimizeIL.Emit(OpCodes.Br, cont105)
OptimizeIL.MarkLabel(cont105)
OptimizeIL.MarkSequencePoint(doc4, 272, 1, 272, 100)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(NumberLiteral))
Dim typ42 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ42))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ42).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc4, 273, 1, 273, 100)
Dim typ43(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Type)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ43(UBound(typ43) + 1)
typ43(UBound(typ43)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ43))
Typ = Typ03.GetMethod("IsInstanceOfType", typ43).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 5)
OptimizeIL.MarkSequencePoint(doc4, 275, 1, 275, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa107 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru107 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont107 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru107)
OptimizeIL.Emit(OpCodes.Br, fa107)
OptimizeIL.MarkLabel(tru107)
OptimizeIL.MarkSequencePoint(doc4, 276, 1, 276, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("isChanged"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("isChanged").FieldType
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa108 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru108 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont108 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru108)
OptimizeIL.Emit(OpCodes.Br, fa108)
OptimizeIL.MarkLabel(tru108)
OptimizeIL.MarkSequencePoint(doc4, 277, 1, 277, 100)
Dim locbldr117 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(NumberLiteral))
locbldr117.SetLocalSymInfo("nl1")
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
OptimizeIL.Emit(OpCodes.Stloc, 12)
OptimizeIL.MarkSequencePoint(doc4, 278, 1, 278, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
Typ02 = Typ
Dim typ44(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(NumberLiteral)
ReDim Preserve typ44(UBound(typ44) + 1)
typ44(UBound(typ44)) = Typ
OptimizeIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("UpdateNumLit", typ44))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("UpdateNumLit", typ44).ReturnType
Typ = Typ02
OptimizeIL.Emit(OpCodes.Stelem, Typ.GetElementType())
OptimizeIL.MarkSequencePoint(doc4, 279, 1, 279, 100)
OptimizeIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("SetUnaryFalse", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("SetUnaryFalse", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
OptimizeIL.Emit(OpCodes.Pop)
End If
OptimizeIL.MarkSequencePoint(doc4, 280, 1, 280, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc4, 281, 1, 281, 100)
OptimizeIL.Emit(OpCodes.Br, cont108)
OptimizeIL.MarkLabel(fa108)
OptimizeIL.Emit(OpCodes.Br, cont108)
OptimizeIL.MarkLabel(cont108)
OptimizeIL.MarkSequencePoint(doc4, 282, 1, 282, 100)
OptimizeIL.Emit(OpCodes.Br, label5)
OptimizeIL.MarkSequencePoint(doc4, 283, 1, 283, 100)
OptimizeIL.Emit(OpCodes.Br, cont107)
OptimizeIL.MarkLabel(fa107)
OptimizeIL.Emit(OpCodes.Br, cont107)
OptimizeIL.MarkLabel(cont107)
OptimizeIL.MarkSequencePoint(doc4, 285, 1, 285, 100)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(LParen))
Dim typ45 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ45))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ45).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc4, 286, 1, 286, 100)
Dim typ46(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Type)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ46(UBound(typ46) + 1)
typ46(UBound(typ46)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ46))
Typ = Typ03.GetMethod("IsInstanceOfType", typ46).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 5)
OptimizeIL.MarkSequencePoint(doc4, 288, 1, 288, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa109 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru109 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont109 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru109)
OptimizeIL.Emit(OpCodes.Br, fa109)
OptimizeIL.MarkLabel(tru109)
OptimizeIL.MarkSequencePoint(doc4, 289, 1, 289, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IdentFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IdentFlag").FieldType
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa110 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru110 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont110 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru110)
OptimizeIL.Emit(OpCodes.Br, fa110)
OptimizeIL.MarkLabel(tru110)
OptimizeIL.MarkSequencePoint(doc4, 290, 1, 290, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ47(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ReDim Preserve typ47(UBound(typ47) + 1)
typ47(UBound(typ47)) = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ReDim Preserve typ47(UBound(typ47) + 1)
typ47(UBound(typ47)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, procMethodCall)
Typ = procMethodCall.ReturnType
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc4, 291, 1, 291, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Sub)
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc4, 292, 1, 292, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
OptimizeIL.Emit(OpCodes.Ldlen)
OptimizeIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Sub)
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc4, 294, 1, 294, 100)
Dim locbldr118 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(MethodCallTok))
locbldr118.SetLocalSymInfo("mct")
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
OptimizeIL.Emit(OpCodes.Stloc, 13)
OptimizeIL.MarkSequencePoint(doc4, 295, 1, 295, 100)
Dim locbldr119 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(Expr).MakeArrayType())
locbldr119.SetLocalSymInfo("prs")
OptimizeIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(MethodCallTok)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(MethodCallTok).GetField("Params"))
Typ = GetType(MethodCallTok).GetField("Params").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 14)
OptimizeIL.MarkSequencePoint(doc4, 296, 1, 296, 100)
Dim locbldr120 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.Int32))
locbldr120.SetLocalSymInfo("ln2")
OptimizeIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(Expr).MakeArrayType()
OptimizeIL.Emit(OpCodes.Ldlen)
OptimizeIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Sub)
OptimizeIL.Emit(OpCodes.Stloc, 15)
OptimizeIL.MarkSequencePoint(doc4, 298, 1, 298, 100)
Dim locbldr121 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.Int32))
locbldr121.SetLocalSymInfo("i2")
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Stloc, 16)
OptimizeIL.MarkSequencePoint(doc4, 299, 1, 299, 100)
Dim label6 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.MarkSequencePoint(doc4, 300, 1, 300, 100)
Dim label7 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.MarkSequencePoint(doc4, 302, 1, 302, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa111 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru111 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont111 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Blt, tru111)
OptimizeIL.Emit(OpCodes.Br, fa111)
OptimizeIL.MarkLabel(tru111)
OptimizeIL.MarkSequencePoint(doc4, 303, 1, 303, 100)
OptimizeIL.Emit(OpCodes.Br, label7)
OptimizeIL.MarkSequencePoint(doc4, 304, 1, 304, 100)
OptimizeIL.Emit(OpCodes.Br, cont111)
OptimizeIL.MarkLabel(fa111)
OptimizeIL.Emit(OpCodes.Br, cont111)
OptimizeIL.MarkLabel(cont111)
OptimizeIL.MarkSequencePoint(doc4, 306, 1, 306, 100)
OptimizeIL.MarkLabel(label6)
OptimizeIL.MarkSequencePoint(doc4, 307, 1, 307, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Add)
OptimizeIL.Emit(OpCodes.Stloc, 16)
OptimizeIL.MarkSequencePoint(doc4, 308, 1, 308, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(Expr).MakeArrayType()
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ48(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(Expr).MakeArrayType()
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, GetType(Expr).MakeArrayType().GetElementType())
Typ = GetType(Expr).MakeArrayType().GetElementType()
ReDim Preserve typ48(UBound(typ48) + 1)
typ48(UBound(typ48)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Optimize)
Typ = Optimize.ReturnType
OptimizeIL.Emit(OpCodes.Stelem, GetType(Expr).MakeArrayType().GetElementType())
OptimizeIL.MarkSequencePoint(doc4, 310, 1, 310, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(System.Int32)
Dim fa112 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru112 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont112 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru112)
OptimizeIL.Emit(OpCodes.Br, fa112)
OptimizeIL.MarkLabel(tru112)
OptimizeIL.MarkSequencePoint(doc4, 311, 1, 311, 100)
OptimizeIL.Emit(OpCodes.Br, label7)
OptimizeIL.MarkSequencePoint(doc4, 312, 1, 312, 100)
OptimizeIL.Emit(OpCodes.Br, cont112)
OptimizeIL.MarkLabel(fa112)
OptimizeIL.MarkSequencePoint(doc4, 313, 1, 313, 100)
OptimizeIL.Emit(OpCodes.Br, label6)
OptimizeIL.MarkSequencePoint(doc4, 314, 1, 314, 100)
OptimizeIL.Emit(OpCodes.Br, cont112)
OptimizeIL.MarkLabel(cont112)
OptimizeIL.MarkSequencePoint(doc4, 316, 1, 316, 100)
OptimizeIL.MarkLabel(label7)
OptimizeIL.MarkSequencePoint(doc4, 318, 1, 318, 100)
OptimizeIL.Emit(OpCodes.Br, cont110)
OptimizeIL.MarkLabel(fa110)
OptimizeIL.Emit(OpCodes.Br, cont110)
OptimizeIL.MarkLabel(cont110)
OptimizeIL.MarkSequencePoint(doc4, 319, 1, 319, 100)
OptimizeIL.Emit(OpCodes.Br, label5)
OptimizeIL.MarkSequencePoint(doc4, 320, 1, 320, 100)
OptimizeIL.Emit(OpCodes.Br, cont109)
OptimizeIL.MarkLabel(fa109)
OptimizeIL.Emit(OpCodes.Br, cont109)
OptimizeIL.MarkLabel(cont109)
OptimizeIL.MarkSequencePoint(doc4, 322, 1, 322, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa113 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru113 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont113 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Bgt, tru113)
OptimizeIL.Emit(OpCodes.Br, fa113)
OptimizeIL.MarkLabel(tru113)
OptimizeIL.MarkSequencePoint(doc4, 323, 1, 323, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IdentFlag"))
OptimizeIL.MarkSequencePoint(doc4, 324, 1, 324, 100)
OptimizeIL.Emit(OpCodes.Br, cont113)
OptimizeIL.MarkLabel(fa113)
OptimizeIL.Emit(OpCodes.Br, cont113)
OptimizeIL.MarkLabel(cont113)
OptimizeIL.MarkSequencePoint(doc4, 326, 1, 326, 100)
OptimizeIL.MarkLabel(label5)
OptimizeIL.MarkSequencePoint(doc4, 328, 1, 328, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
Dim fa114 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru114 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont114 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru114)
OptimizeIL.Emit(OpCodes.Br, fa114)
OptimizeIL.MarkLabel(tru114)
OptimizeIL.MarkSequencePoint(doc4, 329, 1, 329, 100)
OptimizeIL.Emit(OpCodes.Br, label4)
OptimizeIL.MarkSequencePoint(doc4, 330, 1, 330, 100)
OptimizeIL.Emit(OpCodes.Br, cont114)
OptimizeIL.MarkLabel(fa114)
OptimizeIL.MarkSequencePoint(doc4, 331, 1, 331, 100)
OptimizeIL.Emit(OpCodes.Br, label3)
OptimizeIL.MarkSequencePoint(doc4, 332, 1, 332, 100)
OptimizeIL.Emit(OpCodes.Br, cont114)
OptimizeIL.MarkLabel(cont114)
OptimizeIL.MarkSequencePoint(doc4, 334, 1, 334, 100)
OptimizeIL.MarkLabel(label4)
OptimizeIL.MarkSequencePoint(doc4, 336, 1, 336, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.MarkSequencePoint(doc4, 337, 1, 337, 100)
OptimizeIL.Emit(OpCodes.Ret)
ExprOptimizer.CreateType()
End Sub


Dim doc5 As ISymbolDocumentWriter

Sub StmtOptimizer()
Dim StmtOptimizer As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.Parser" & "." & "StmtOptimizer", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(Stmt)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Boolean).MakeByRefType()
Dim checkRefasm As MethodBuilder = StmtOptimizer.DefineMethod("checkRefasm", MethodAttributes.Public, GetType(Stmt), typ0)
Dim checkRefasmIL As ILGenerator = checkRefasm.GetILGenerator()
Dim checkRefasmparam00 As ParameterBuilder = checkRefasm.DefineParameter(0, ParameterAttributes.RetVal, "")
Dim checkRefasmparam01 As ParameterBuilder = checkRefasm.DefineParameter(1, ParameterAttributes.None, "stm")
Dim checkRefasmparam02 As ParameterBuilder = checkRefasm.DefineParameter(2, ParameterAttributes.None, "b")
checkRefasmIL.MarkSequencePoint(doc5, 4, 1, 4, 100)
Dim locbldr122 As LocalBuilder = checkRefasmIL.DeclareLocal(GetType(Token))
locbldr122.SetLocalSymInfo("tok")
checkRefasmIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkRefasmIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkRefasmIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkRefasmIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkRefasmIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkRefasmIL.Emit(OpCodes.Stloc, 0)
checkRefasmIL.MarkSequencePoint(doc5, 5, 1, 5, 100)
Dim locbldr123 As LocalBuilder = checkRefasmIL.DeclareLocal(GetType(System.Type))
locbldr123.SetLocalSymInfo("typ")
checkRefasmIL.Emit(OpCodes.Ldtoken, GetType(RefasmTok))
Dim typ1 As Type() = {GetType(System.RuntimeTypeHandle)}
checkRefasmIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ1))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ1).ReturnType
checkRefasmIL.Emit(OpCodes.Stloc, 1)
checkRefasmIL.MarkSequencePoint(doc5, 6, 1, 6, 100)
checkRefasmIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
Dim typ2(-1) As Type
checkRefasmIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkRefasmIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkRefasmIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = Typ
checkRefasmIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ2))
Typ = Typ03.GetMethod("IsInstanceOfType", typ2).ReturnType
checkRefasmIL.Emit(OpCodes.Stobj, Typ04)
checkRefasmIL.MarkSequencePoint(doc5, 7, 1, 7, 100)
Dim locbldr124 As LocalBuilder = checkRefasmIL.DeclareLocal(GetType(RefasmStmt))
locbldr124.SetLocalSymInfo("refasms")
checkRefasmIL.Emit(OpCodes.Newobj, GetType(RefasmStmt).GetConstructor(Type.EmptyTypes))
checkRefasmIL.Emit(OpCodes.Stloc, 2)
checkRefasmIL.MarkSequencePoint(doc5, 8, 1, 8, 100)
checkRefasmIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
checkRefasmIL.Emit(OpCodes.Ldobj, Typ.GetElementType())
Typ = Typ.GetElementType()
checkRefasmIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa115 As System.Reflection.Emit.Label = checkRefasmIL.DefineLabel()
Dim tru115 As System.Reflection.Emit.Label = checkRefasmIL.DefineLabel()
Dim cont115 As System.Reflection.Emit.Label = checkRefasmIL.DefineLabel()
checkRefasmIL.Emit(OpCodes.Beq, tru115)
checkRefasmIL.Emit(OpCodes.Br, fa115)
checkRefasmIL.MarkLabel(tru115)
checkRefasmIL.MarkSequencePoint(doc5, 9, 1, 9, 100)
checkRefasmIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(RefasmStmt)
checkRefasmIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkRefasmIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
checkRefasmIL.Emit(OpCodes.Stfld, GetType(RefasmStmt).GetField("Line"))
checkRefasmIL.MarkSequencePoint(doc5, 10, 1, 10, 100)
checkRefasmIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(RefasmStmt)
checkRefasmIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkRefasmIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkRefasmIL.Emit(OpCodes.Stfld, GetType(RefasmStmt).GetField("Tokens"))
checkRefasmIL.MarkSequencePoint(doc5, 11, 1, 11, 100)
checkRefasmIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(RefasmStmt)
checkRefasmIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkRefasmIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkRefasmIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkRefasmIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkRefasmIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkRefasmIL.Emit(OpCodes.Stfld, GetType(RefasmStmt).GetField("AsmPath"))
checkRefasmIL.MarkSequencePoint(doc5, 12, 1, 12, 100)
checkRefasmIL.Emit(OpCodes.Br, cont115)
checkRefasmIL.MarkLabel(fa115)
checkRefasmIL.Emit(OpCodes.Br, cont115)
checkRefasmIL.MarkLabel(cont115)
checkRefasmIL.MarkSequencePoint(doc5, 13, 1, 13, 100)
checkRefasmIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(RefasmStmt)
checkRefasmIL.MarkSequencePoint(doc5, 14, 1, 14, 100)
checkRefasmIL.Emit(OpCodes.Ret)
Dim typ3(-1) As Type
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = GetType(Stmt)
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = GetType(System.Boolean).MakeByRefType()
Dim checkDebug As MethodBuilder = StmtOptimizer.DefineMethod("checkDebug", MethodAttributes.Public, GetType(Stmt), typ3)
Dim checkDebugIL As ILGenerator = checkDebug.GetILGenerator()
Dim checkDebugparam00 As ParameterBuilder = checkDebug.DefineParameter(0, ParameterAttributes.RetVal, "")
Dim checkDebugparam01 As ParameterBuilder = checkDebug.DefineParameter(1, ParameterAttributes.None, "stm")
Dim checkDebugparam02 As ParameterBuilder = checkDebug.DefineParameter(2, ParameterAttributes.None, "b")
checkDebugIL.MarkSequencePoint(doc5, 17, 1, 17, 100)
Dim locbldr125 As LocalBuilder = checkDebugIL.DeclareLocal(GetType(Token))
locbldr125.SetLocalSymInfo("tok")
checkDebugIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkDebugIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkDebugIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkDebugIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkDebugIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkDebugIL.Emit(OpCodes.Stloc, 0)
checkDebugIL.MarkSequencePoint(doc5, 18, 1, 18, 100)
Dim locbldr126 As LocalBuilder = checkDebugIL.DeclareLocal(GetType(System.Type))
locbldr126.SetLocalSymInfo("typ")
checkDebugIL.Emit(OpCodes.Ldtoken, GetType(DebugTok))
Dim typ4 As Type() = {GetType(System.RuntimeTypeHandle)}
checkDebugIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ4))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ4).ReturnType
checkDebugIL.Emit(OpCodes.Stloc, 1)
checkDebugIL.MarkSequencePoint(doc5, 19, 1, 19, 100)
checkDebugIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
Dim typ5(-1) As Type
checkDebugIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkDebugIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkDebugIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ5(UBound(typ5) + 1)
typ5(UBound(typ5)) = Typ
checkDebugIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ5))
Typ = Typ03.GetMethod("IsInstanceOfType", typ5).ReturnType
checkDebugIL.Emit(OpCodes.Stobj, Typ04)
checkDebugIL.MarkSequencePoint(doc5, 20, 1, 20, 100)
Dim locbldr127 As LocalBuilder = checkDebugIL.DeclareLocal(GetType(DebugStmt))
locbldr127.SetLocalSymInfo("dbgs")
checkDebugIL.Emit(OpCodes.Newobj, GetType(DebugStmt).GetConstructor(Type.EmptyTypes))
checkDebugIL.Emit(OpCodes.Stloc, 2)
checkDebugIL.MarkSequencePoint(doc5, 21, 1, 21, 100)
checkDebugIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
checkDebugIL.Emit(OpCodes.Ldobj, Typ.GetElementType())
Typ = Typ.GetElementType()
checkDebugIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa116 As System.Reflection.Emit.Label = checkDebugIL.DefineLabel()
Dim tru116 As System.Reflection.Emit.Label = checkDebugIL.DefineLabel()
Dim cont116 As System.Reflection.Emit.Label = checkDebugIL.DefineLabel()
checkDebugIL.Emit(OpCodes.Beq, tru116)
checkDebugIL.Emit(OpCodes.Br, fa116)
checkDebugIL.MarkLabel(tru116)
checkDebugIL.MarkSequencePoint(doc5, 22, 1, 22, 100)
checkDebugIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(DebugStmt)
checkDebugIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkDebugIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
checkDebugIL.Emit(OpCodes.Stfld, GetType(DebugStmt).GetField("Line"))
checkDebugIL.MarkSequencePoint(doc5, 23, 1, 23, 100)
checkDebugIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(DebugStmt)
checkDebugIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkDebugIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkDebugIL.Emit(OpCodes.Stfld, GetType(DebugStmt).GetField("Tokens"))
checkDebugIL.MarkSequencePoint(doc5, 24, 1, 24, 100)
checkDebugIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(DebugStmt)
checkDebugIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkDebugIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkDebugIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkDebugIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkDebugIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkDebugIL.Emit(OpCodes.Stfld, GetType(DebugStmt).GetField("Opt"))
checkDebugIL.MarkSequencePoint(doc5, 25, 1, 25, 100)
checkDebugIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(DebugStmt)
Typ03 = Typ
checkDebugIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("setFlg", Type.EmptyTypes))
Typ = Typ03.GetMethod("setFlg", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
checkDebugIL.Emit(OpCodes.Pop)
End If
checkDebugIL.MarkSequencePoint(doc5, 26, 1, 26, 100)
checkDebugIL.Emit(OpCodes.Br, cont116)
checkDebugIL.MarkLabel(fa116)
checkDebugIL.Emit(OpCodes.Br, cont116)
checkDebugIL.MarkLabel(cont116)
checkDebugIL.MarkSequencePoint(doc5, 27, 1, 27, 100)
checkDebugIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(DebugStmt)
checkDebugIL.MarkSequencePoint(doc5, 28, 1, 28, 100)
checkDebugIL.Emit(OpCodes.Ret)
Dim typ7(-1) As Type
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = GetType(Stmt)
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = GetType(System.Boolean).MakeByRefType()
Dim checkImport As MethodBuilder = StmtOptimizer.DefineMethod("checkImport", MethodAttributes.Public, GetType(Stmt), typ7)
Dim checkImportIL As ILGenerator = checkImport.GetILGenerator()
Dim checkImportparam00 As ParameterBuilder = checkImport.DefineParameter(0, ParameterAttributes.RetVal, "")
Dim checkImportparam01 As ParameterBuilder = checkImport.DefineParameter(1, ParameterAttributes.None, "stm")
Dim checkImportparam02 As ParameterBuilder = checkImport.DefineParameter(2, ParameterAttributes.None, "b")
checkImportIL.MarkSequencePoint(doc5, 32, 1, 32, 100)
Dim locbldr128 As LocalBuilder = checkImportIL.DeclareLocal(GetType(Token))
locbldr128.SetLocalSymInfo("tok")
checkImportIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkImportIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkImportIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkImportIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkImportIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkImportIL.Emit(OpCodes.Stloc, 0)
checkImportIL.MarkSequencePoint(doc5, 33, 1, 33, 100)
Dim locbldr129 As LocalBuilder = checkImportIL.DeclareLocal(GetType(System.Type))
locbldr129.SetLocalSymInfo("typ")
checkImportIL.Emit(OpCodes.Ldtoken, GetType(ImportTok))
Dim typ8 As Type() = {GetType(System.RuntimeTypeHandle)}
checkImportIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ8))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ8).ReturnType
checkImportIL.Emit(OpCodes.Stloc, 1)
checkImportIL.MarkSequencePoint(doc5, 34, 1, 34, 100)
checkImportIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
Dim typ9(-1) As Type
checkImportIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkImportIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkImportIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = Typ
checkImportIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ9))
Typ = Typ03.GetMethod("IsInstanceOfType", typ9).ReturnType
checkImportIL.Emit(OpCodes.Stobj, Typ04)
checkImportIL.MarkSequencePoint(doc5, 35, 1, 35, 100)
Dim locbldr130 As LocalBuilder = checkImportIL.DeclareLocal(GetType(ImportStmt))
locbldr130.SetLocalSymInfo("imps")
checkImportIL.Emit(OpCodes.Newobj, GetType(ImportStmt).GetConstructor(Type.EmptyTypes))
checkImportIL.Emit(OpCodes.Stloc, 2)
checkImportIL.MarkSequencePoint(doc5, 36, 1, 36, 100)
checkImportIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
checkImportIL.Emit(OpCodes.Ldobj, Typ.GetElementType())
Typ = Typ.GetElementType()
checkImportIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa117 As System.Reflection.Emit.Label = checkImportIL.DefineLabel()
Dim tru117 As System.Reflection.Emit.Label = checkImportIL.DefineLabel()
Dim cont117 As System.Reflection.Emit.Label = checkImportIL.DefineLabel()
checkImportIL.Emit(OpCodes.Beq, tru117)
checkImportIL.Emit(OpCodes.Br, fa117)
checkImportIL.MarkLabel(tru117)
checkImportIL.MarkSequencePoint(doc5, 37, 1, 37, 100)
checkImportIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(ImportStmt)
checkImportIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkImportIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
checkImportIL.Emit(OpCodes.Stfld, GetType(ImportStmt).GetField("Line"))
checkImportIL.MarkSequencePoint(doc5, 38, 1, 38, 100)
checkImportIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(ImportStmt)
checkImportIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkImportIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkImportIL.Emit(OpCodes.Stfld, GetType(ImportStmt).GetField("Tokens"))
checkImportIL.MarkSequencePoint(doc5, 39, 1, 39, 100)
checkImportIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(ImportStmt)
checkImportIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkImportIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkImportIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkImportIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkImportIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkImportIL.Emit(OpCodes.Stfld, GetType(ImportStmt).GetField("NS"))
checkImportIL.MarkSequencePoint(doc5, 40, 1, 40, 100)
checkImportIL.Emit(OpCodes.Br, cont117)
checkImportIL.MarkLabel(fa117)
checkImportIL.Emit(OpCodes.Br, cont117)
checkImportIL.MarkLabel(cont117)
checkImportIL.MarkSequencePoint(doc5, 41, 1, 41, 100)
checkImportIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(ImportStmt)
checkImportIL.MarkSequencePoint(doc5, 42, 1, 42, 100)
checkImportIL.Emit(OpCodes.Ret)
Dim typ10(-1) As Type
ReDim Preserve typ10(UBound(typ10) + 1)
typ10(UBound(typ10)) = GetType(Stmt)
ReDim Preserve typ10(UBound(typ10) + 1)
typ10(UBound(typ10)) = GetType(System.Boolean).MakeByRefType()
Dim checkLocimport As MethodBuilder = StmtOptimizer.DefineMethod("checkLocimport", MethodAttributes.Public, GetType(Stmt), typ10)
Dim checkLocimportIL As ILGenerator = checkLocimport.GetILGenerator()
Dim checkLocimportparam00 As ParameterBuilder = checkLocimport.DefineParameter(0, ParameterAttributes.RetVal, "")
Dim checkLocimportparam01 As ParameterBuilder = checkLocimport.DefineParameter(1, ParameterAttributes.None, "stm")
Dim checkLocimportparam02 As ParameterBuilder = checkLocimport.DefineParameter(2, ParameterAttributes.None, "b")
checkLocimportIL.MarkSequencePoint(doc5, 45, 1, 45, 100)
Dim locbldr131 As LocalBuilder = checkLocimportIL.DeclareLocal(GetType(Token))
locbldr131.SetLocalSymInfo("tok")
checkLocimportIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkLocimportIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkLocimportIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkLocimportIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkLocimportIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkLocimportIL.Emit(OpCodes.Stloc, 0)
checkLocimportIL.MarkSequencePoint(doc5, 46, 1, 46, 100)
Dim locbldr132 As LocalBuilder = checkLocimportIL.DeclareLocal(GetType(System.Type))
locbldr132.SetLocalSymInfo("typ")
checkLocimportIL.Emit(OpCodes.Ldtoken, GetType(LocimportTok))
Dim typ11 As Type() = {GetType(System.RuntimeTypeHandle)}
checkLocimportIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ11))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ11).ReturnType
checkLocimportIL.Emit(OpCodes.Stloc, 1)
checkLocimportIL.MarkSequencePoint(doc5, 47, 1, 47, 100)
checkLocimportIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
Dim typ12(-1) As Type
checkLocimportIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkLocimportIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkLocimportIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ12(UBound(typ12) + 1)
typ12(UBound(typ12)) = Typ
checkLocimportIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ12))
Typ = Typ03.GetMethod("IsInstanceOfType", typ12).ReturnType
checkLocimportIL.Emit(OpCodes.Stobj, Typ04)
checkLocimportIL.MarkSequencePoint(doc5, 48, 1, 48, 100)
Dim locbldr133 As LocalBuilder = checkLocimportIL.DeclareLocal(GetType(LocimportStmt))
locbldr133.SetLocalSymInfo("limps")
checkLocimportIL.Emit(OpCodes.Newobj, GetType(LocimportStmt).GetConstructor(Type.EmptyTypes))
checkLocimportIL.Emit(OpCodes.Stloc, 2)
checkLocimportIL.MarkSequencePoint(doc5, 49, 1, 49, 100)
checkLocimportIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
checkLocimportIL.Emit(OpCodes.Ldobj, Typ.GetElementType())
Typ = Typ.GetElementType()
checkLocimportIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa118 As System.Reflection.Emit.Label = checkLocimportIL.DefineLabel()
Dim tru118 As System.Reflection.Emit.Label = checkLocimportIL.DefineLabel()
Dim cont118 As System.Reflection.Emit.Label = checkLocimportIL.DefineLabel()
checkLocimportIL.Emit(OpCodes.Beq, tru118)
checkLocimportIL.Emit(OpCodes.Br, fa118)
checkLocimportIL.MarkLabel(tru118)
checkLocimportIL.MarkSequencePoint(doc5, 50, 1, 50, 100)
checkLocimportIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(LocimportStmt)
checkLocimportIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkLocimportIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
checkLocimportIL.Emit(OpCodes.Stfld, GetType(LocimportStmt).GetField("Line"))
checkLocimportIL.MarkSequencePoint(doc5, 51, 1, 51, 100)
checkLocimportIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(LocimportStmt)
checkLocimportIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkLocimportIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkLocimportIL.Emit(OpCodes.Stfld, GetType(LocimportStmt).GetField("Tokens"))
checkLocimportIL.MarkSequencePoint(doc5, 52, 1, 52, 100)
checkLocimportIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(LocimportStmt)
checkLocimportIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkLocimportIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkLocimportIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkLocimportIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkLocimportIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkLocimportIL.Emit(OpCodes.Stfld, GetType(LocimportStmt).GetField("NS"))
checkLocimportIL.MarkSequencePoint(doc5, 53, 1, 53, 100)
checkLocimportIL.Emit(OpCodes.Br, cont118)
checkLocimportIL.MarkLabel(fa118)
checkLocimportIL.Emit(OpCodes.Br, cont118)
checkLocimportIL.MarkLabel(cont118)
checkLocimportIL.MarkSequencePoint(doc5, 54, 1, 54, 100)
checkLocimportIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(LocimportStmt)
checkLocimportIL.MarkSequencePoint(doc5, 55, 1, 55, 100)
checkLocimportIL.Emit(OpCodes.Ret)
Dim typ13(-1) As Type
ReDim Preserve typ13(UBound(typ13) + 1)
typ13(UBound(typ13)) = GetType(Stmt)
ReDim Preserve typ13(UBound(typ13) + 1)
typ13(UBound(typ13)) = GetType(System.Boolean).MakeByRefType()
Dim checkCmt As MethodBuilder = StmtOptimizer.DefineMethod("checkCmt", MethodAttributes.Public, GetType(Stmt), typ13)
Dim checkCmtIL As ILGenerator = checkCmt.GetILGenerator()
Dim checkCmtparam00 As ParameterBuilder = checkCmt.DefineParameter(0, ParameterAttributes.RetVal, "")
Dim checkCmtparam01 As ParameterBuilder = checkCmt.DefineParameter(1, ParameterAttributes.None, "stm")
Dim checkCmtparam02 As ParameterBuilder = checkCmt.DefineParameter(2, ParameterAttributes.None, "b")
checkCmtIL.MarkSequencePoint(doc5, 58, 1, 58, 100)
Dim locbldr134 As LocalBuilder = checkCmtIL.DeclareLocal(GetType(Token))
locbldr134.SetLocalSymInfo("tok")
checkCmtIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkCmtIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkCmtIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkCmtIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkCmtIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkCmtIL.Emit(OpCodes.Stloc, 0)
checkCmtIL.MarkSequencePoint(doc5, 59, 1, 59, 100)
Dim locbldr135 As LocalBuilder = checkCmtIL.DeclareLocal(GetType(System.Type))
locbldr135.SetLocalSymInfo("typ")
checkCmtIL.Emit(OpCodes.Ldtoken, GetType(CommentTok))
Dim typ14 As Type() = {GetType(System.RuntimeTypeHandle)}
checkCmtIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ14))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ14).ReturnType
checkCmtIL.Emit(OpCodes.Stloc, 1)
checkCmtIL.MarkSequencePoint(doc5, 60, 1, 60, 100)
checkCmtIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
Dim typ15(-1) As Type
checkCmtIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkCmtIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkCmtIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ15(UBound(typ15) + 1)
typ15(UBound(typ15)) = Typ
checkCmtIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ15))
Typ = Typ03.GetMethod("IsInstanceOfType", typ15).ReturnType
checkCmtIL.Emit(OpCodes.Stobj, Typ04)
checkCmtIL.MarkSequencePoint(doc5, 61, 1, 61, 100)
Dim locbldr136 As LocalBuilder = checkCmtIL.DeclareLocal(GetType(CommentStmt))
locbldr136.SetLocalSymInfo("cmts")
checkCmtIL.Emit(OpCodes.Newobj, GetType(CommentStmt).GetConstructor(Type.EmptyTypes))
checkCmtIL.Emit(OpCodes.Stloc, 2)
checkCmtIL.MarkSequencePoint(doc5, 62, 1, 62, 100)
checkCmtIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
checkCmtIL.Emit(OpCodes.Ldobj, Typ.GetElementType())
Typ = Typ.GetElementType()
checkCmtIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa119 As System.Reflection.Emit.Label = checkCmtIL.DefineLabel()
Dim tru119 As System.Reflection.Emit.Label = checkCmtIL.DefineLabel()
Dim cont119 As System.Reflection.Emit.Label = checkCmtIL.DefineLabel()
checkCmtIL.Emit(OpCodes.Beq, tru119)
checkCmtIL.Emit(OpCodes.Br, fa119)
checkCmtIL.MarkLabel(tru119)
checkCmtIL.MarkSequencePoint(doc5, 63, 1, 63, 100)
checkCmtIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(CommentStmt)
checkCmtIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkCmtIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
checkCmtIL.Emit(OpCodes.Stfld, GetType(CommentStmt).GetField("Line"))
checkCmtIL.MarkSequencePoint(doc5, 64, 1, 64, 100)
checkCmtIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(CommentStmt)
checkCmtIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkCmtIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkCmtIL.Emit(OpCodes.Stfld, GetType(CommentStmt).GetField("Tokens"))
checkCmtIL.MarkSequencePoint(doc5, 65, 1, 65, 100)
checkCmtIL.Emit(OpCodes.Br, cont119)
checkCmtIL.MarkLabel(fa119)
checkCmtIL.Emit(OpCodes.Br, cont119)
checkCmtIL.MarkLabel(cont119)
checkCmtIL.MarkSequencePoint(doc5, 66, 1, 66, 100)
checkCmtIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(CommentStmt)
checkCmtIL.MarkSequencePoint(doc5, 67, 1, 67, 100)
checkCmtIL.Emit(OpCodes.Ret)
Dim typ16(-1) As Type
ReDim Preserve typ16(UBound(typ16) + 1)
typ16(UBound(typ16)) = GetType(Stmt)
ReDim Preserve typ16(UBound(typ16) + 1)
typ16(UBound(typ16)) = GetType(System.Boolean).MakeByRefType()
Dim checkEndMtd As MethodBuilder = StmtOptimizer.DefineMethod("checkEndMtd", MethodAttributes.Public, GetType(Stmt), typ16)
Dim checkEndMtdIL As ILGenerator = checkEndMtd.GetILGenerator()
Dim checkEndMtdparam00 As ParameterBuilder = checkEndMtd.DefineParameter(0, ParameterAttributes.RetVal, "")
Dim checkEndMtdparam01 As ParameterBuilder = checkEndMtd.DefineParameter(1, ParameterAttributes.None, "stm")
Dim checkEndMtdparam02 As ParameterBuilder = checkEndMtd.DefineParameter(2, ParameterAttributes.None, "b")
checkEndMtdIL.MarkSequencePoint(doc5, 70, 1, 70, 100)
checkEndMtdIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkEndMtdIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkEndMtdIL.Emit(OpCodes.Ldlen)
checkEndMtdIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
checkEndMtdIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
Dim fa120 As System.Reflection.Emit.Label = checkEndMtdIL.DefineLabel()
Dim tru120 As System.Reflection.Emit.Label = checkEndMtdIL.DefineLabel()
Dim cont120 As System.Reflection.Emit.Label = checkEndMtdIL.DefineLabel()
checkEndMtdIL.Emit(OpCodes.Bge, tru120)
checkEndMtdIL.Emit(OpCodes.Br, fa120)
checkEndMtdIL.MarkLabel(tru120)
checkEndMtdIL.MarkSequencePoint(doc5, 72, 1, 72, 100)
Dim locbldr137 As LocalBuilder = checkEndMtdIL.DeclareLocal(GetType(Token))
locbldr137.SetLocalSymInfo("tok1")
checkEndMtdIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkEndMtdIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkEndMtdIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkEndMtdIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkEndMtdIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkEndMtdIL.Emit(OpCodes.Stloc, 0)
checkEndMtdIL.MarkSequencePoint(doc5, 73, 1, 73, 100)
Dim locbldr138 As LocalBuilder = checkEndMtdIL.DeclareLocal(GetType(System.Type))
locbldr138.SetLocalSymInfo("typ1")
checkEndMtdIL.Emit(OpCodes.Ldtoken, GetType(EndTok))
Dim typ17 As Type() = {GetType(System.RuntimeTypeHandle)}
checkEndMtdIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ17))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ17).ReturnType
checkEndMtdIL.Emit(OpCodes.Stloc, 1)
checkEndMtdIL.MarkSequencePoint(doc5, 74, 1, 74, 100)
Dim locbldr139 As LocalBuilder = checkEndMtdIL.DeclareLocal(GetType(System.Boolean))
locbldr139.SetLocalSymInfo("b1")
Dim typ18(-1) As Type
checkEndMtdIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkEndMtdIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkEndMtdIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ18(UBound(typ18) + 1)
typ18(UBound(typ18)) = Typ
checkEndMtdIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ18))
Typ = Typ03.GetMethod("IsInstanceOfType", typ18).ReturnType
checkEndMtdIL.Emit(OpCodes.Stloc, 2)
checkEndMtdIL.MarkSequencePoint(doc5, 76, 1, 76, 100)
Dim locbldr140 As LocalBuilder = checkEndMtdIL.DeclareLocal(GetType(Token))
locbldr140.SetLocalSymInfo("tok2")
checkEndMtdIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkEndMtdIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkEndMtdIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkEndMtdIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkEndMtdIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkEndMtdIL.Emit(OpCodes.Stloc, 3)
checkEndMtdIL.MarkSequencePoint(doc5, 77, 1, 77, 100)
Dim locbldr141 As LocalBuilder = checkEndMtdIL.DeclareLocal(GetType(System.Type))
locbldr141.SetLocalSymInfo("typ2")
checkEndMtdIL.Emit(OpCodes.Ldtoken, GetType(MethodTok))
Dim typ19 As Type() = {GetType(System.RuntimeTypeHandle)}
checkEndMtdIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ19))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ19).ReturnType
checkEndMtdIL.Emit(OpCodes.Stloc, 4)
checkEndMtdIL.MarkSequencePoint(doc5, 78, 1, 78, 100)
Dim locbldr142 As LocalBuilder = checkEndMtdIL.DeclareLocal(GetType(System.Boolean))
locbldr142.SetLocalSymInfo("b2")
Dim typ20(-1) As Type
checkEndMtdIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Type)
Typ03 = Typ
checkEndMtdIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Token)
checkEndMtdIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ20(UBound(typ20) + 1)
typ20(UBound(typ20)) = Typ
checkEndMtdIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ20))
Typ = Typ03.GetMethod("IsInstanceOfType", typ20).ReturnType
checkEndMtdIL.Emit(OpCodes.Stloc, 5)
checkEndMtdIL.MarkSequencePoint(doc5, 80, 1, 80, 100)
checkEndMtdIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
checkEndMtdIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
checkEndMtdIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
checkEndMtdIL.Emit(OpCodes.And)
checkEndMtdIL.Emit(OpCodes.Stobj, Typ04)
checkEndMtdIL.MarkSequencePoint(doc5, 82, 1, 82, 100)
Dim locbldr143 As LocalBuilder = checkEndMtdIL.DeclareLocal(GetType(EndMethodStmt))
locbldr143.SetLocalSymInfo("ems")
checkEndMtdIL.Emit(OpCodes.Newobj, GetType(EndMethodStmt).GetConstructor(Type.EmptyTypes))
checkEndMtdIL.Emit(OpCodes.Stloc, 6)
checkEndMtdIL.MarkSequencePoint(doc5, 83, 1, 83, 100)
checkEndMtdIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
checkEndMtdIL.Emit(OpCodes.Ldobj, Typ.GetElementType())
Typ = Typ.GetElementType()
checkEndMtdIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa121 As System.Reflection.Emit.Label = checkEndMtdIL.DefineLabel()
Dim tru121 As System.Reflection.Emit.Label = checkEndMtdIL.DefineLabel()
Dim cont121 As System.Reflection.Emit.Label = checkEndMtdIL.DefineLabel()
checkEndMtdIL.Emit(OpCodes.Beq, tru121)
checkEndMtdIL.Emit(OpCodes.Br, fa121)
checkEndMtdIL.MarkLabel(tru121)
checkEndMtdIL.MarkSequencePoint(doc5, 84, 1, 84, 100)
checkEndMtdIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(EndMethodStmt)
checkEndMtdIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkEndMtdIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
checkEndMtdIL.Emit(OpCodes.Stfld, GetType(EndMethodStmt).GetField("Line"))
checkEndMtdIL.MarkSequencePoint(doc5, 85, 1, 85, 100)
checkEndMtdIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(EndMethodStmt)
checkEndMtdIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkEndMtdIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkEndMtdIL.Emit(OpCodes.Stfld, GetType(EndMethodStmt).GetField("Tokens"))
checkEndMtdIL.MarkSequencePoint(doc5, 86, 1, 86, 100)
checkEndMtdIL.Emit(OpCodes.Br, cont121)
checkEndMtdIL.MarkLabel(fa121)
checkEndMtdIL.Emit(OpCodes.Br, cont121)
checkEndMtdIL.MarkLabel(cont121)
checkEndMtdIL.MarkSequencePoint(doc5, 87, 1, 87, 100)
checkEndMtdIL.Emit(OpCodes.Br, cont120)
checkEndMtdIL.MarkLabel(fa120)
checkEndMtdIL.Emit(OpCodes.Br, cont120)
checkEndMtdIL.MarkLabel(cont120)
checkEndMtdIL.MarkSequencePoint(doc5, 88, 1, 88, 100)
checkEndMtdIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(EndMethodStmt)
checkEndMtdIL.MarkSequencePoint(doc5, 89, 1, 89, 100)
checkEndMtdIL.Emit(OpCodes.Ret)
Dim typ21(-1) As Type
ReDim Preserve typ21(UBound(typ21) + 1)
typ21(UBound(typ21)) = GetType(Stmt)
ReDim Preserve typ21(UBound(typ21) + 1)
typ21(UBound(typ21)) = GetType(System.Boolean).MakeByRefType()
Dim checkEndCls As MethodBuilder = StmtOptimizer.DefineMethod("checkEndCls", MethodAttributes.Public, GetType(Stmt), typ21)
Dim checkEndClsIL As ILGenerator = checkEndCls.GetILGenerator()
Dim checkEndClsparam00 As ParameterBuilder = checkEndCls.DefineParameter(0, ParameterAttributes.RetVal, "")
Dim checkEndClsparam01 As ParameterBuilder = checkEndCls.DefineParameter(1, ParameterAttributes.None, "stm")
Dim checkEndClsparam02 As ParameterBuilder = checkEndCls.DefineParameter(2, ParameterAttributes.None, "b")
checkEndClsIL.MarkSequencePoint(doc5, 92, 1, 92, 100)
checkEndClsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkEndClsIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkEndClsIL.Emit(OpCodes.Ldlen)
checkEndClsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
checkEndClsIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
Dim fa122 As System.Reflection.Emit.Label = checkEndClsIL.DefineLabel()
Dim tru122 As System.Reflection.Emit.Label = checkEndClsIL.DefineLabel()
Dim cont122 As System.Reflection.Emit.Label = checkEndClsIL.DefineLabel()
checkEndClsIL.Emit(OpCodes.Bge, tru122)
checkEndClsIL.Emit(OpCodes.Br, fa122)
checkEndClsIL.MarkLabel(tru122)
checkEndClsIL.MarkSequencePoint(doc5, 94, 1, 94, 100)
Dim locbldr144 As LocalBuilder = checkEndClsIL.DeclareLocal(GetType(Token))
locbldr144.SetLocalSymInfo("tok1")
checkEndClsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkEndClsIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkEndClsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkEndClsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkEndClsIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkEndClsIL.Emit(OpCodes.Stloc, 0)
checkEndClsIL.MarkSequencePoint(doc5, 95, 1, 95, 100)
Dim locbldr145 As LocalBuilder = checkEndClsIL.DeclareLocal(GetType(System.Type))
locbldr145.SetLocalSymInfo("typ1")
checkEndClsIL.Emit(OpCodes.Ldtoken, GetType(EndTok))
Dim typ22 As Type() = {GetType(System.RuntimeTypeHandle)}
checkEndClsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ22))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ22).ReturnType
checkEndClsIL.Emit(OpCodes.Stloc, 1)
checkEndClsIL.MarkSequencePoint(doc5, 96, 1, 96, 100)
Dim locbldr146 As LocalBuilder = checkEndClsIL.DeclareLocal(GetType(System.Boolean))
locbldr146.SetLocalSymInfo("b1")
Dim typ23(-1) As Type
checkEndClsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkEndClsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkEndClsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ23(UBound(typ23) + 1)
typ23(UBound(typ23)) = Typ
checkEndClsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ23))
Typ = Typ03.GetMethod("IsInstanceOfType", typ23).ReturnType
checkEndClsIL.Emit(OpCodes.Stloc, 2)
checkEndClsIL.MarkSequencePoint(doc5, 98, 1, 98, 100)
Dim locbldr147 As LocalBuilder = checkEndClsIL.DeclareLocal(GetType(Token))
locbldr147.SetLocalSymInfo("tok2")
checkEndClsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkEndClsIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkEndClsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkEndClsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkEndClsIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkEndClsIL.Emit(OpCodes.Stloc, 3)
checkEndClsIL.MarkSequencePoint(doc5, 99, 1, 99, 100)
Dim locbldr148 As LocalBuilder = checkEndClsIL.DeclareLocal(GetType(System.Type))
locbldr148.SetLocalSymInfo("typ2")
checkEndClsIL.Emit(OpCodes.Ldtoken, GetType(ClassTok))
Dim typ24 As Type() = {GetType(System.RuntimeTypeHandle)}
checkEndClsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ24))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ24).ReturnType
checkEndClsIL.Emit(OpCodes.Stloc, 4)
checkEndClsIL.MarkSequencePoint(doc5, 100, 1, 100, 100)
Dim locbldr149 As LocalBuilder = checkEndClsIL.DeclareLocal(GetType(System.Boolean))
locbldr149.SetLocalSymInfo("b2")
Dim typ25(-1) As Type
checkEndClsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Type)
Typ03 = Typ
checkEndClsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Token)
checkEndClsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ25(UBound(typ25) + 1)
typ25(UBound(typ25)) = Typ
checkEndClsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ25))
Typ = Typ03.GetMethod("IsInstanceOfType", typ25).ReturnType
checkEndClsIL.Emit(OpCodes.Stloc, 5)
checkEndClsIL.MarkSequencePoint(doc5, 102, 1, 102, 100)
checkEndClsIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
checkEndClsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
checkEndClsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
checkEndClsIL.Emit(OpCodes.And)
checkEndClsIL.Emit(OpCodes.Stobj, Typ04)
checkEndClsIL.MarkSequencePoint(doc5, 104, 1, 104, 100)
Dim locbldr150 As LocalBuilder = checkEndClsIL.DeclareLocal(GetType(EndClassStmt))
locbldr150.SetLocalSymInfo("ecs")
checkEndClsIL.Emit(OpCodes.Newobj, GetType(EndClassStmt).GetConstructor(Type.EmptyTypes))
checkEndClsIL.Emit(OpCodes.Stloc, 6)
checkEndClsIL.MarkSequencePoint(doc5, 105, 1, 105, 100)
checkEndClsIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
checkEndClsIL.Emit(OpCodes.Ldobj, Typ.GetElementType())
Typ = Typ.GetElementType()
checkEndClsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa123 As System.Reflection.Emit.Label = checkEndClsIL.DefineLabel()
Dim tru123 As System.Reflection.Emit.Label = checkEndClsIL.DefineLabel()
Dim cont123 As System.Reflection.Emit.Label = checkEndClsIL.DefineLabel()
checkEndClsIL.Emit(OpCodes.Beq, tru123)
checkEndClsIL.Emit(OpCodes.Br, fa123)
checkEndClsIL.MarkLabel(tru123)
checkEndClsIL.MarkSequencePoint(doc5, 106, 1, 106, 100)
checkEndClsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(EndClassStmt)
checkEndClsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkEndClsIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
checkEndClsIL.Emit(OpCodes.Stfld, GetType(EndClassStmt).GetField("Line"))
checkEndClsIL.MarkSequencePoint(doc5, 107, 1, 107, 100)
checkEndClsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(EndClassStmt)
checkEndClsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkEndClsIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkEndClsIL.Emit(OpCodes.Stfld, GetType(EndClassStmt).GetField("Tokens"))
checkEndClsIL.MarkSequencePoint(doc5, 108, 1, 108, 100)
checkEndClsIL.Emit(OpCodes.Br, cont123)
checkEndClsIL.MarkLabel(fa123)
checkEndClsIL.Emit(OpCodes.Br, cont123)
checkEndClsIL.MarkLabel(cont123)
checkEndClsIL.MarkSequencePoint(doc5, 109, 1, 109, 100)
checkEndClsIL.Emit(OpCodes.Br, cont122)
checkEndClsIL.MarkLabel(fa122)
checkEndClsIL.Emit(OpCodes.Br, cont122)
checkEndClsIL.MarkLabel(cont122)
checkEndClsIL.MarkSequencePoint(doc5, 110, 1, 110, 100)
checkEndClsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(EndClassStmt)
checkEndClsIL.MarkSequencePoint(doc5, 111, 1, 111, 100)
checkEndClsIL.Emit(OpCodes.Ret)
Dim typ26(-1) As Type
ReDim Preserve typ26(UBound(typ26) + 1)
typ26(UBound(typ26)) = GetType(Stmt)
ReDim Preserve typ26(UBound(typ26) + 1)
typ26(UBound(typ26)) = GetType(System.Boolean).MakeByRefType()
Dim checkAssembly As MethodBuilder = StmtOptimizer.DefineMethod("checkAssembly", MethodAttributes.Public, GetType(Stmt), typ26)
Dim checkAssemblyIL As ILGenerator = checkAssembly.GetILGenerator()
Dim checkAssemblyparam00 As ParameterBuilder = checkAssembly.DefineParameter(0, ParameterAttributes.RetVal, "")
Dim checkAssemblyparam01 As ParameterBuilder = checkAssembly.DefineParameter(1, ParameterAttributes.None, "stm")
Dim checkAssemblyparam02 As ParameterBuilder = checkAssembly.DefineParameter(2, ParameterAttributes.None, "b")
checkAssemblyIL.MarkSequencePoint(doc5, 114, 1, 114, 100)
Dim locbldr151 As LocalBuilder = checkAssemblyIL.DeclareLocal(GetType(Token))
locbldr151.SetLocalSymInfo("tok")
checkAssemblyIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkAssemblyIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkAssemblyIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkAssemblyIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkAssemblyIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkAssemblyIL.Emit(OpCodes.Stloc, 0)
checkAssemblyIL.MarkSequencePoint(doc5, 115, 1, 115, 100)
Dim locbldr152 As LocalBuilder = checkAssemblyIL.DeclareLocal(GetType(System.Type))
locbldr152.SetLocalSymInfo("typ")
checkAssemblyIL.Emit(OpCodes.Ldtoken, GetType(AssemblyTok))
Dim typ27 As Type() = {GetType(System.RuntimeTypeHandle)}
checkAssemblyIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ27))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ27).ReturnType
checkAssemblyIL.Emit(OpCodes.Stloc, 1)
checkAssemblyIL.MarkSequencePoint(doc5, 116, 1, 116, 100)
checkAssemblyIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
Dim typ28(-1) As Type
checkAssemblyIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkAssemblyIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkAssemblyIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ28(UBound(typ28) + 1)
typ28(UBound(typ28)) = Typ
checkAssemblyIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ28))
Typ = Typ03.GetMethod("IsInstanceOfType", typ28).ReturnType
checkAssemblyIL.Emit(OpCodes.Stobj, Typ04)
checkAssemblyIL.MarkSequencePoint(doc5, 117, 1, 117, 100)
Dim locbldr153 As LocalBuilder = checkAssemblyIL.DeclareLocal(GetType(AssemblyStmt))
locbldr153.SetLocalSymInfo("asms")
checkAssemblyIL.Emit(OpCodes.Newobj, GetType(AssemblyStmt).GetConstructor(Type.EmptyTypes))
checkAssemblyIL.Emit(OpCodes.Stloc, 2)
checkAssemblyIL.MarkSequencePoint(doc5, 118, 1, 118, 100)
checkAssemblyIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
checkAssemblyIL.Emit(OpCodes.Ldobj, Typ.GetElementType())
Typ = Typ.GetElementType()
checkAssemblyIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa124 As System.Reflection.Emit.Label = checkAssemblyIL.DefineLabel()
Dim tru124 As System.Reflection.Emit.Label = checkAssemblyIL.DefineLabel()
Dim cont124 As System.Reflection.Emit.Label = checkAssemblyIL.DefineLabel()
checkAssemblyIL.Emit(OpCodes.Beq, tru124)
checkAssemblyIL.Emit(OpCodes.Br, fa124)
checkAssemblyIL.MarkLabel(tru124)
checkAssemblyIL.MarkSequencePoint(doc5, 119, 1, 119, 100)
checkAssemblyIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(AssemblyStmt)
checkAssemblyIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkAssemblyIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
checkAssemblyIL.Emit(OpCodes.Stfld, GetType(AssemblyStmt).GetField("Line"))
checkAssemblyIL.MarkSequencePoint(doc5, 120, 1, 120, 100)
checkAssemblyIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(AssemblyStmt)
checkAssemblyIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkAssemblyIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkAssemblyIL.Emit(OpCodes.Stfld, GetType(AssemblyStmt).GetField("Tokens"))
checkAssemblyIL.MarkSequencePoint(doc5, 121, 1, 121, 100)
checkAssemblyIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(AssemblyStmt)
checkAssemblyIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkAssemblyIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkAssemblyIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkAssemblyIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkAssemblyIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkAssemblyIL.Emit(OpCodes.Stfld, GetType(AssemblyStmt).GetField("AsmName"))
checkAssemblyIL.MarkSequencePoint(doc5, 122, 1, 122, 100)
checkAssemblyIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(AssemblyStmt)
checkAssemblyIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkAssemblyIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkAssemblyIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
checkAssemblyIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkAssemblyIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkAssemblyIL.Emit(OpCodes.Stfld, GetType(AssemblyStmt).GetField("Mode"))
checkAssemblyIL.MarkSequencePoint(doc5, 123, 1, 123, 100)
checkAssemblyIL.Emit(OpCodes.Br, cont124)
checkAssemblyIL.MarkLabel(fa124)
checkAssemblyIL.Emit(OpCodes.Br, cont124)
checkAssemblyIL.MarkLabel(cont124)
checkAssemblyIL.MarkSequencePoint(doc5, 124, 1, 124, 100)
checkAssemblyIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(AssemblyStmt)
checkAssemblyIL.MarkSequencePoint(doc5, 125, 1, 125, 100)
checkAssemblyIL.Emit(OpCodes.Ret)
Dim typ29(-1) As Type
ReDim Preserve typ29(UBound(typ29) + 1)
typ29(UBound(typ29)) = GetType(Stmt)
ReDim Preserve typ29(UBound(typ29) + 1)
typ29(UBound(typ29)) = GetType(System.Boolean).MakeByRefType()
Dim checkVer As MethodBuilder = StmtOptimizer.DefineMethod("checkVer", MethodAttributes.Public, GetType(Stmt), typ29)
Dim checkVerIL As ILGenerator = checkVer.GetILGenerator()
Dim checkVerparam00 As ParameterBuilder = checkVer.DefineParameter(0, ParameterAttributes.RetVal, "")
Dim checkVerparam01 As ParameterBuilder = checkVer.DefineParameter(1, ParameterAttributes.None, "stm")
Dim checkVerparam02 As ParameterBuilder = checkVer.DefineParameter(2, ParameterAttributes.None, "b")
checkVerIL.MarkSequencePoint(doc5, 128, 1, 128, 100)
Dim locbldr154 As LocalBuilder = checkVerIL.DeclareLocal(GetType(Token))
locbldr154.SetLocalSymInfo("tok")
checkVerIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkVerIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkVerIL.Emit(OpCodes.Stloc, 0)
checkVerIL.MarkSequencePoint(doc5, 129, 1, 129, 100)
Dim locbldr155 As LocalBuilder = checkVerIL.DeclareLocal(GetType(System.Type))
locbldr155.SetLocalSymInfo("typ")
checkVerIL.Emit(OpCodes.Ldtoken, GetType(VerTok))
Dim typ30 As Type() = {GetType(System.RuntimeTypeHandle)}
checkVerIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ30))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ30).ReturnType
checkVerIL.Emit(OpCodes.Stloc, 1)
checkVerIL.MarkSequencePoint(doc5, 130, 1, 130, 100)
checkVerIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
Dim typ31(-1) As Type
checkVerIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkVerIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkVerIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ31(UBound(typ31) + 1)
typ31(UBound(typ31)) = Typ
checkVerIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ31))
Typ = Typ03.GetMethod("IsInstanceOfType", typ31).ReturnType
checkVerIL.Emit(OpCodes.Stobj, Typ04)
checkVerIL.MarkSequencePoint(doc5, 131, 1, 131, 100)
Dim locbldr156 As LocalBuilder = checkVerIL.DeclareLocal(GetType(VerStmt))
locbldr156.SetLocalSymInfo("vers")
checkVerIL.Emit(OpCodes.Newobj, GetType(VerStmt).GetConstructor(Type.EmptyTypes))
checkVerIL.Emit(OpCodes.Stloc, 2)
checkVerIL.MarkSequencePoint(doc5, 132, 1, 132, 100)
checkVerIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
checkVerIL.Emit(OpCodes.Ldobj, Typ.GetElementType())
Typ = Typ.GetElementType()
checkVerIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa125 As System.Reflection.Emit.Label = checkVerIL.DefineLabel()
Dim tru125 As System.Reflection.Emit.Label = checkVerIL.DefineLabel()
Dim cont125 As System.Reflection.Emit.Label = checkVerIL.DefineLabel()
checkVerIL.Emit(OpCodes.Beq, tru125)
checkVerIL.Emit(OpCodes.Br, fa125)
checkVerIL.MarkLabel(tru125)
checkVerIL.MarkSequencePoint(doc5, 133, 1, 133, 100)
checkVerIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VerStmt)
checkVerIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkVerIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
checkVerIL.Emit(OpCodes.Stfld, GetType(VerStmt).GetField("Line"))
checkVerIL.MarkSequencePoint(doc5, 134, 1, 134, 100)
checkVerIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VerStmt)
checkVerIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkVerIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkVerIL.Emit(OpCodes.Stfld, GetType(VerStmt).GetField("Tokens"))
checkVerIL.MarkSequencePoint(doc5, 135, 1, 135, 100)
checkVerIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkVerIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkVerIL.Emit(OpCodes.Stloc, 0)
checkVerIL.MarkSequencePoint(doc5, 136, 1, 136, 100)
Dim locbldr157 As LocalBuilder = checkVerIL.DeclareLocal(GetType(System.String).MakeArrayType())
locbldr157.SetLocalSymInfo("ars")
Dim typ32(-1) As Type
checkVerIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkVerIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ32(UBound(typ32) + 1)
typ32(UBound(typ32)) = Typ
checkVerIL.Emit(OpCodes.Ldstr, ".")
Typ = GetType(System.String)
ReDim Preserve typ32(UBound(typ32) + 1)
typ32(UBound(typ32)) = Typ
checkVerIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("StringParser", typ32))
Typ = GetType(Utils.ParseUtils).GetMethod("StringParser", typ32).ReturnType
checkVerIL.Emit(OpCodes.Stloc, 3)
checkVerIL.MarkSequencePoint(doc5, 137, 1, 137, 100)
Dim locbldr158 As LocalBuilder = checkVerIL.DeclareLocal(GetType(System.Int32).MakeArrayType())
locbldr158.SetLocalSymInfo("ari")
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(4))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
checkVerIL.Emit(OpCodes.Newarr, GetType(System.Int32))
checkVerIL.Emit(OpCodes.Stloc, 4)
checkVerIL.MarkSequencePoint(doc5, 138, 1, 138, 100)
checkVerIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
Dim typ33 As Type() = {Typ}
checkVerIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToInt32", typ33))
Typ = GetType(System.Convert).GetMethod("ToInt32", typ33).ReturnType
checkVerIL.Emit(OpCodes.Stelem, GetType(System.Int32).MakeArrayType().GetElementType())
checkVerIL.MarkSequencePoint(doc5, 139, 1, 139, 100)
checkVerIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
Dim typ34 As Type() = {Typ}
checkVerIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToInt32", typ34))
Typ = GetType(System.Convert).GetMethod("ToInt32", typ34).ReturnType
checkVerIL.Emit(OpCodes.Stelem, GetType(System.Int32).MakeArrayType().GetElementType())
checkVerIL.MarkSequencePoint(doc5, 140, 1, 140, 100)
checkVerIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
Dim typ35 As Type() = {Typ}
checkVerIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToInt32", typ35))
Typ = GetType(System.Convert).GetMethod("ToInt32", typ35).ReturnType
checkVerIL.Emit(OpCodes.Stelem, GetType(System.Int32).MakeArrayType().GetElementType())
checkVerIL.MarkSequencePoint(doc5, 141, 1, 141, 100)
checkVerIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
Dim typ36 As Type() = {Typ}
checkVerIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToInt32", typ36))
Typ = GetType(System.Convert).GetMethod("ToInt32", typ36).ReturnType
checkVerIL.Emit(OpCodes.Stelem, GetType(System.Int32).MakeArrayType().GetElementType())
checkVerIL.MarkSequencePoint(doc5, 142, 1, 142, 100)
Dim locbldr159 As LocalBuilder = checkVerIL.DeclareLocal(GetType(IntLiteral).MakeArrayType())
locbldr159.SetLocalSymInfo("intla")
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(4))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
checkVerIL.Emit(OpCodes.Newarr, GetType(IntLiteral))
checkVerIL.Emit(OpCodes.Stloc, 5)
checkVerIL.MarkSequencePoint(doc5, 143, 1, 143, 100)
Dim locbldr160 As LocalBuilder = checkVerIL.DeclareLocal(GetType(IntLiteral))
locbldr160.SetLocalSymInfo("intl")
checkVerIL.Emit(OpCodes.Ldnull)
checkVerIL.Emit(OpCodes.Stloc, 6)
checkVerIL.MarkSequencePoint(doc5, 144, 1, 144, 100)
Dim typ37(-1) As Type
checkVerIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ37(UBound(typ37) + 1)
typ37(UBound(typ37)) = Typ
checkVerIL.Emit(OpCodes.Newobj, GetType(IntLiteral).GetConstructor(typ37))
checkVerIL.Emit(OpCodes.Stloc, 6)
checkVerIL.MarkSequencePoint(doc5, 145, 1, 145, 100)
checkVerIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(IntLiteral)
checkVerIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkVerIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
checkVerIL.Emit(OpCodes.Stfld, GetType(IntLiteral).GetField("Line"))
checkVerIL.MarkSequencePoint(doc5, 146, 1, 146, 100)
checkVerIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(IntLiteral)
checkVerIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldelem, GetType(System.Int32).MakeArrayType().GetElementType())
Typ = GetType(System.Int32).MakeArrayType().GetElementType()
checkVerIL.Emit(OpCodes.Stfld, GetType(IntLiteral).GetField("NumVal"))
checkVerIL.MarkSequencePoint(doc5, 147, 1, 147, 100)
checkVerIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(IntLiteral).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(IntLiteral)
checkVerIL.Emit(OpCodes.Stelem, GetType(IntLiteral).MakeArrayType().GetElementType())
checkVerIL.MarkSequencePoint(doc5, 148, 1, 148, 100)
Dim typ38(-1) As Type
checkVerIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ38(UBound(typ38) + 1)
typ38(UBound(typ38)) = Typ
checkVerIL.Emit(OpCodes.Newobj, GetType(IntLiteral).GetConstructor(typ38))
checkVerIL.Emit(OpCodes.Stloc, 6)
checkVerIL.MarkSequencePoint(doc5, 149, 1, 149, 100)
checkVerIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(IntLiteral)
checkVerIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkVerIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
checkVerIL.Emit(OpCodes.Stfld, GetType(IntLiteral).GetField("Line"))
checkVerIL.MarkSequencePoint(doc5, 150, 1, 150, 100)
checkVerIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(IntLiteral)
checkVerIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldelem, GetType(System.Int32).MakeArrayType().GetElementType())
Typ = GetType(System.Int32).MakeArrayType().GetElementType()
checkVerIL.Emit(OpCodes.Stfld, GetType(IntLiteral).GetField("NumVal"))
checkVerIL.MarkSequencePoint(doc5, 151, 1, 151, 100)
checkVerIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(IntLiteral).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(IntLiteral)
checkVerIL.Emit(OpCodes.Stelem, GetType(IntLiteral).MakeArrayType().GetElementType())
checkVerIL.MarkSequencePoint(doc5, 152, 1, 152, 100)
Dim typ39(-1) As Type
checkVerIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ39(UBound(typ39) + 1)
typ39(UBound(typ39)) = Typ
checkVerIL.Emit(OpCodes.Newobj, GetType(IntLiteral).GetConstructor(typ39))
checkVerIL.Emit(OpCodes.Stloc, 6)
checkVerIL.MarkSequencePoint(doc5, 153, 1, 153, 100)
checkVerIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(IntLiteral)
checkVerIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkVerIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
checkVerIL.Emit(OpCodes.Stfld, GetType(IntLiteral).GetField("Line"))
checkVerIL.MarkSequencePoint(doc5, 154, 1, 154, 100)
checkVerIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(IntLiteral)
checkVerIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldelem, GetType(System.Int32).MakeArrayType().GetElementType())
Typ = GetType(System.Int32).MakeArrayType().GetElementType()
checkVerIL.Emit(OpCodes.Stfld, GetType(IntLiteral).GetField("NumVal"))
checkVerIL.MarkSequencePoint(doc5, 155, 1, 155, 100)
checkVerIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(IntLiteral).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(IntLiteral)
checkVerIL.Emit(OpCodes.Stelem, GetType(IntLiteral).MakeArrayType().GetElementType())
checkVerIL.MarkSequencePoint(doc5, 156, 1, 156, 100)
Dim typ40(-1) As Type
checkVerIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ40(UBound(typ40) + 1)
typ40(UBound(typ40)) = Typ
checkVerIL.Emit(OpCodes.Newobj, GetType(IntLiteral).GetConstructor(typ40))
checkVerIL.Emit(OpCodes.Stloc, 6)
checkVerIL.MarkSequencePoint(doc5, 157, 1, 157, 100)
checkVerIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(IntLiteral)
checkVerIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkVerIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
checkVerIL.Emit(OpCodes.Stfld, GetType(IntLiteral).GetField("Line"))
checkVerIL.MarkSequencePoint(doc5, 158, 1, 158, 100)
checkVerIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(IntLiteral)
checkVerIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldelem, GetType(System.Int32).MakeArrayType().GetElementType())
Typ = GetType(System.Int32).MakeArrayType().GetElementType()
checkVerIL.Emit(OpCodes.Stfld, GetType(IntLiteral).GetField("NumVal"))
checkVerIL.MarkSequencePoint(doc5, 159, 1, 159, 100)
checkVerIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(IntLiteral).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(IntLiteral)
checkVerIL.Emit(OpCodes.Stelem, GetType(IntLiteral).MakeArrayType().GetElementType())
checkVerIL.MarkSequencePoint(doc5, 160, 1, 160, 100)
checkVerIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VerStmt)
checkVerIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(IntLiteral).MakeArrayType()
checkVerIL.Emit(OpCodes.Stfld, GetType(VerStmt).GetField("VersionNos"))
checkVerIL.MarkSequencePoint(doc5, 161, 1, 161, 100)
checkVerIL.Emit(OpCodes.Br, cont125)
checkVerIL.MarkLabel(fa125)
checkVerIL.Emit(OpCodes.Br, cont125)
checkVerIL.MarkLabel(cont125)
checkVerIL.MarkSequencePoint(doc5, 162, 1, 162, 100)
checkVerIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VerStmt)
checkVerIL.MarkSequencePoint(doc5, 163, 1, 163, 100)
checkVerIL.Emit(OpCodes.Ret)
Dim typ41(-1) As Type
ReDim Preserve typ41(UBound(typ41) + 1)
typ41(UBound(typ41)) = GetType(Stmt)
ReDim Preserve typ41(UBound(typ41) + 1)
typ41(UBound(typ41)) = GetType(System.Boolean).MakeByRefType()
Dim checkClass As MethodBuilder = StmtOptimizer.DefineMethod("checkClass", MethodAttributes.Public, GetType(Stmt), typ41)
Dim checkClassIL As ILGenerator = checkClass.GetILGenerator()
Dim checkClassparam00 As ParameterBuilder = checkClass.DefineParameter(0, ParameterAttributes.RetVal, "")
Dim checkClassparam01 As ParameterBuilder = checkClass.DefineParameter(1, ParameterAttributes.None, "stm")
Dim checkClassparam02 As ParameterBuilder = checkClass.DefineParameter(2, ParameterAttributes.None, "b")
checkClassIL.MarkSequencePoint(doc5, 166, 1, 166, 100)
Dim locbldr161 As LocalBuilder = checkClassIL.DeclareLocal(GetType(Token))
locbldr161.SetLocalSymInfo("tok")
checkClassIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkClassIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkClassIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkClassIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkClassIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkClassIL.Emit(OpCodes.Stloc, 0)
checkClassIL.MarkSequencePoint(doc5, 167, 1, 167, 100)
Dim locbldr162 As LocalBuilder = checkClassIL.DeclareLocal(GetType(System.Type))
locbldr162.SetLocalSymInfo("typ")
checkClassIL.Emit(OpCodes.Ldtoken, GetType(ClassTok))
Dim typ42 As Type() = {GetType(System.RuntimeTypeHandle)}
checkClassIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ42))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ42).ReturnType
checkClassIL.Emit(OpCodes.Stloc, 1)
checkClassIL.MarkSequencePoint(doc5, 168, 1, 168, 100)
checkClassIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
Dim typ43(-1) As Type
checkClassIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkClassIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkClassIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ43(UBound(typ43) + 1)
typ43(UBound(typ43)) = Typ
checkClassIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ43))
Typ = Typ03.GetMethod("IsInstanceOfType", typ43).ReturnType
checkClassIL.Emit(OpCodes.Stobj, Typ04)
checkClassIL.MarkSequencePoint(doc5, 169, 1, 169, 100)
Dim locbldr163 As LocalBuilder = checkClassIL.DeclareLocal(GetType(ClassStmt))
locbldr163.SetLocalSymInfo("clss")
checkClassIL.Emit(OpCodes.Newobj, GetType(ClassStmt).GetConstructor(Type.EmptyTypes))
checkClassIL.Emit(OpCodes.Stloc, 2)
checkClassIL.MarkSequencePoint(doc5, 170, 1, 170, 100)
Dim locbldr164 As LocalBuilder = checkClassIL.DeclareLocal(GetType(Attributes.Attribute))
locbldr164.SetLocalSymInfo("att")
checkClassIL.Emit(OpCodes.Ldnull)
checkClassIL.Emit(OpCodes.Stloc, 3)
checkClassIL.MarkSequencePoint(doc5, 171, 1, 171, 100)
checkClassIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
checkClassIL.Emit(OpCodes.Ldobj, Typ.GetElementType())
Typ = Typ.GetElementType()
checkClassIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa126 As System.Reflection.Emit.Label = checkClassIL.DefineLabel()
Dim tru126 As System.Reflection.Emit.Label = checkClassIL.DefineLabel()
Dim cont126 As System.Reflection.Emit.Label = checkClassIL.DefineLabel()
checkClassIL.Emit(OpCodes.Beq, tru126)
checkClassIL.Emit(OpCodes.Br, fa126)
checkClassIL.MarkLabel(tru126)
checkClassIL.MarkSequencePoint(doc5, 173, 1, 173, 100)
checkClassIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(ClassStmt)
checkClassIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkClassIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
checkClassIL.Emit(OpCodes.Stfld, GetType(ClassStmt).GetField("Line"))
checkClassIL.MarkSequencePoint(doc5, 174, 1, 174, 100)
checkClassIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(ClassStmt)
checkClassIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkClassIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkClassIL.Emit(OpCodes.Stfld, GetType(ClassStmt).GetField("Tokens"))
checkClassIL.MarkSequencePoint(doc5, 176, 1, 176, 100)
Dim label0 As System.Reflection.Emit.Label = checkClassIL.DefineLabel()
checkClassIL.MarkSequencePoint(doc5, 177, 1, 177, 100)
Dim label1 As System.Reflection.Emit.Label = checkClassIL.DefineLabel()
checkClassIL.MarkSequencePoint(doc5, 179, 1, 179, 100)
Dim locbldr165 As LocalBuilder = checkClassIL.DeclareLocal(GetType(System.Int32))
locbldr165.SetLocalSymInfo("i")
checkClassIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkClassIL.Emit(OpCodes.Stloc, 4)
checkClassIL.MarkSequencePoint(doc5, 180, 1, 180, 100)
Dim locbldr166 As LocalBuilder = checkClassIL.DeclareLocal(GetType(System.Int32))
locbldr166.SetLocalSymInfo("len")
checkClassIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkClassIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkClassIL.Emit(OpCodes.Ldlen)
checkClassIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
checkClassIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkClassIL.Emit(OpCodes.Sub)
checkClassIL.Emit(OpCodes.Stloc, 5)
checkClassIL.MarkSequencePoint(doc5, 181, 1, 181, 100)
Dim locbldr167 As LocalBuilder = checkClassIL.DeclareLocal(GetType(System.Boolean))
locbldr167.SetLocalSymInfo("bl")
checkClassIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
checkClassIL.Emit(OpCodes.Stloc, 6)
checkClassIL.MarkSequencePoint(doc5, 183, 1, 183, 100)
checkClassIL.MarkLabel(label0)
checkClassIL.MarkSequencePoint(doc5, 185, 1, 185, 100)
checkClassIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
checkClassIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkClassIL.Emit(OpCodes.Add)
checkClassIL.Emit(OpCodes.Stloc, 4)
checkClassIL.MarkSequencePoint(doc5, 186, 1, 186, 100)
checkClassIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkClassIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkClassIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
checkClassIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkClassIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkClassIL.Emit(OpCodes.Stloc, 0)
checkClassIL.MarkSequencePoint(doc5, 187, 1, 187, 100)
checkClassIL.Emit(OpCodes.Ldtoken, GetType(Attributes.Attribute))
Dim typ44 As Type() = {GetType(System.RuntimeTypeHandle)}
checkClassIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ44))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ44).ReturnType
checkClassIL.Emit(OpCodes.Stloc, 1)
checkClassIL.MarkSequencePoint(doc5, 188, 1, 188, 100)
Dim typ45(-1) As Type
checkClassIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkClassIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkClassIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ45(UBound(typ45) + 1)
typ45(UBound(typ45)) = Typ
checkClassIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ45))
Typ = Typ03.GetMethod("IsInstanceOfType", typ45).ReturnType
checkClassIL.Emit(OpCodes.Stloc, 6)
checkClassIL.MarkSequencePoint(doc5, 190, 1, 190, 100)
checkClassIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Boolean)
checkClassIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa127 As System.Reflection.Emit.Label = checkClassIL.DefineLabel()
Dim tru127 As System.Reflection.Emit.Label = checkClassIL.DefineLabel()
Dim cont127 As System.Reflection.Emit.Label = checkClassIL.DefineLabel()
checkClassIL.Emit(OpCodes.Beq, tru127)
checkClassIL.Emit(OpCodes.Br, fa127)
checkClassIL.MarkLabel(tru127)
checkClassIL.MarkSequencePoint(doc5, 191, 1, 191, 100)
checkClassIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkClassIL.Emit(OpCodes.Stloc, 3)
checkClassIL.MarkSequencePoint(doc5, 192, 1, 192, 100)
Dim typ46(-1) As Type
checkClassIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(ClassStmt)
Typ03 = Typ
checkClassIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Attributes.Attribute)
ReDim Preserve typ46(UBound(typ46) + 1)
typ46(UBound(typ46)) = Typ
checkClassIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddAttr", typ46))
Typ = Typ03.GetMethod("AddAttr", typ46).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
checkClassIL.Emit(OpCodes.Pop)
End If
checkClassIL.MarkSequencePoint(doc5, 193, 1, 193, 100)
checkClassIL.Emit(OpCodes.Br, cont127)
checkClassIL.MarkLabel(fa127)
checkClassIL.MarkSequencePoint(doc5, 195, 1, 195, 100)
Dim locbldr168 As LocalBuilder = checkClassIL.DeclareLocal(GetType(Token))
locbldr168.SetLocalSymInfo("tok2")
checkClassIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkClassIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkClassIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
checkClassIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkClassIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkClassIL.Emit(OpCodes.Stloc, 7)
checkClassIL.MarkSequencePoint(doc5, 196, 1, 196, 100)
Dim locbldr169 As LocalBuilder = checkClassIL.DeclareLocal(GetType(System.Type))
locbldr169.SetLocalSymInfo("typ2")
checkClassIL.Emit(OpCodes.Ldtoken, GetType(ExtendsTok))
Dim typ47 As Type() = {GetType(System.RuntimeTypeHandle)}
checkClassIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ47))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ47).ReturnType
checkClassIL.Emit(OpCodes.Stloc, 8)
checkClassIL.MarkSequencePoint(doc5, 197, 1, 197, 100)
Dim locbldr170 As LocalBuilder = checkClassIL.DeclareLocal(GetType(System.Boolean))
locbldr170.SetLocalSymInfo("b2")
Dim typ48(-1) As Type
checkClassIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
checkClassIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(Token)
checkClassIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ48(UBound(typ48) + 1)
typ48(UBound(typ48)) = Typ
checkClassIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ48))
Typ = Typ03.GetMethod("IsInstanceOfType", typ48).ReturnType
checkClassIL.Emit(OpCodes.Stloc, 9)
checkClassIL.MarkSequencePoint(doc5, 199, 1, 199, 100)
checkClassIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
checkClassIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa128 As System.Reflection.Emit.Label = checkClassIL.DefineLabel()
Dim tru128 As System.Reflection.Emit.Label = checkClassIL.DefineLabel()
Dim cont128 As System.Reflection.Emit.Label = checkClassIL.DefineLabel()
checkClassIL.Emit(OpCodes.Beq, tru128)
checkClassIL.Emit(OpCodes.Br, fa128)
checkClassIL.MarkLabel(tru128)
checkClassIL.MarkSequencePoint(doc5, 200, 1, 200, 100)
checkClassIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
checkClassIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkClassIL.Emit(OpCodes.Add)
checkClassIL.Emit(OpCodes.Stloc, 4)
checkClassIL.MarkSequencePoint(doc5, 201, 1, 201, 100)
checkClassIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkClassIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkClassIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
checkClassIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkClassIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkClassIL.Emit(OpCodes.Stloc, 7)
checkClassIL.MarkSequencePoint(doc5, 202, 1, 202, 100)
checkClassIL.Emit(OpCodes.Ldtoken, GetType(TypeTok))
Dim typ49 As Type() = {GetType(System.RuntimeTypeHandle)}
checkClassIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ49))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ49).ReturnType
checkClassIL.Emit(OpCodes.Stloc, 8)
checkClassIL.MarkSequencePoint(doc5, 203, 1, 203, 100)
Dim typ50(-1) As Type
checkClassIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
checkClassIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(Token)
checkClassIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ50(UBound(typ50) + 1)
typ50(UBound(typ50)) = Typ
checkClassIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ50))
Typ = Typ03.GetMethod("IsInstanceOfType", typ50).ReturnType
checkClassIL.Emit(OpCodes.Stloc, 9)
checkClassIL.MarkSequencePoint(doc5, 205, 1, 205, 100)
checkClassIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
checkClassIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa129 As System.Reflection.Emit.Label = checkClassIL.DefineLabel()
Dim tru129 As System.Reflection.Emit.Label = checkClassIL.DefineLabel()
Dim cont129 As System.Reflection.Emit.Label = checkClassIL.DefineLabel()
checkClassIL.Emit(OpCodes.Beq, fa129)
checkClassIL.Emit(OpCodes.Br, tru129)
checkClassIL.MarkLabel(tru129)
checkClassIL.MarkSequencePoint(doc5, 206, 1, 206, 100)
Dim locbldr171 As LocalBuilder = checkClassIL.DeclareLocal(GetType(Token))
locbldr171.SetLocalSymInfo("t")
checkClassIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkClassIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkClassIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
checkClassIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkClassIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkClassIL.Emit(OpCodes.Stloc, 10)
checkClassIL.MarkSequencePoint(doc5, 207, 1, 207, 100)
Dim locbldr172 As LocalBuilder = checkClassIL.DeclareLocal(GetType(TypeTok))
locbldr172.SetLocalSymInfo("tt")
checkClassIL.Emit(OpCodes.Newobj, GetType(TypeTok).GetConstructor(Type.EmptyTypes))
checkClassIL.Emit(OpCodes.Stloc, 11)
checkClassIL.MarkSequencePoint(doc5, 208, 1, 208, 100)
checkClassIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(TypeTok)
checkClassIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(Token)
checkClassIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
checkClassIL.Emit(OpCodes.Stfld, GetType(TypeTok).GetField("Line"))
checkClassIL.MarkSequencePoint(doc5, 209, 1, 209, 100)
checkClassIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(TypeTok)
checkClassIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(Token)
checkClassIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
checkClassIL.Emit(OpCodes.Stfld, GetType(TypeTok).GetField("Value"))
checkClassIL.MarkSequencePoint(doc5, 210, 1, 210, 100)
checkClassIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(ClassStmt)
checkClassIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(TypeTok)
checkClassIL.Emit(OpCodes.Stfld, GetType(ClassStmt).GetField("InhClass"))
checkClassIL.MarkSequencePoint(doc5, 211, 1, 211, 100)
checkClassIL.Emit(OpCodes.Br, cont129)
checkClassIL.MarkLabel(fa129)
checkClassIL.MarkSequencePoint(doc5, 212, 1, 212, 100)
checkClassIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(ClassStmt)
checkClassIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkClassIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkClassIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
checkClassIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkClassIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkClassIL.Emit(OpCodes.Stfld, GetType(ClassStmt).GetField("InhClass"))
checkClassIL.MarkSequencePoint(doc5, 213, 1, 213, 100)
checkClassIL.Emit(OpCodes.Br, cont129)
checkClassIL.MarkLabel(cont129)
checkClassIL.MarkSequencePoint(doc5, 214, 1, 214, 100)
checkClassIL.Emit(OpCodes.Br, cont128)
checkClassIL.MarkLabel(fa128)
checkClassIL.MarkSequencePoint(doc5, 215, 1, 215, 100)
checkClassIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(ClassStmt)
checkClassIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkClassIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkClassIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
checkClassIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkClassIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkClassIL.Emit(OpCodes.Stfld, GetType(ClassStmt).GetField("ClassName"))
checkClassIL.MarkSequencePoint(doc5, 216, 1, 216, 100)
checkClassIL.Emit(OpCodes.Br, cont128)
checkClassIL.MarkLabel(cont128)
checkClassIL.MarkSequencePoint(doc5, 218, 1, 218, 100)
checkClassIL.Emit(OpCodes.Br, cont127)
checkClassIL.MarkLabel(cont127)
checkClassIL.MarkSequencePoint(doc5, 220, 1, 220, 100)
checkClassIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
checkClassIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Int32)
Dim fa130 As System.Reflection.Emit.Label = checkClassIL.DefineLabel()
Dim tru130 As System.Reflection.Emit.Label = checkClassIL.DefineLabel()
Dim cont130 As System.Reflection.Emit.Label = checkClassIL.DefineLabel()
checkClassIL.Emit(OpCodes.Beq, tru130)
checkClassIL.Emit(OpCodes.Br, fa130)
checkClassIL.MarkLabel(tru130)
checkClassIL.MarkSequencePoint(doc5, 221, 1, 221, 100)
checkClassIL.Emit(OpCodes.Br, label1)
checkClassIL.MarkSequencePoint(doc5, 222, 1, 222, 100)
checkClassIL.Emit(OpCodes.Br, cont130)
checkClassIL.MarkLabel(fa130)
checkClassIL.MarkSequencePoint(doc5, 223, 1, 223, 100)
checkClassIL.Emit(OpCodes.Br, label0)
checkClassIL.MarkSequencePoint(doc5, 224, 1, 224, 100)
checkClassIL.Emit(OpCodes.Br, cont130)
checkClassIL.MarkLabel(cont130)
checkClassIL.MarkSequencePoint(doc5, 226, 1, 226, 100)
checkClassIL.MarkLabel(label1)
checkClassIL.MarkSequencePoint(doc5, 228, 1, 228, 100)
checkClassIL.Emit(OpCodes.Br, cont126)
checkClassIL.MarkLabel(fa126)
checkClassIL.Emit(OpCodes.Br, cont126)
checkClassIL.MarkLabel(cont126)
checkClassIL.MarkSequencePoint(doc5, 230, 1, 230, 100)
checkClassIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(ClassStmt)
checkClassIL.MarkSequencePoint(doc5, 231, 1, 231, 100)
checkClassIL.Emit(OpCodes.Ret)
Dim typ51(-1) As Type
ReDim Preserve typ51(UBound(typ51) + 1)
typ51(UBound(typ51)) = GetType(Stmt)
ReDim Preserve typ51(UBound(typ51) + 1)
typ51(UBound(typ51)) = GetType(System.Boolean).MakeByRefType()
Dim checkMethod As MethodBuilder = StmtOptimizer.DefineMethod("checkMethod", MethodAttributes.Public, GetType(Stmt), typ51)
Dim checkMethodIL As ILGenerator = checkMethod.GetILGenerator()
Dim checkMethodparam00 As ParameterBuilder = checkMethod.DefineParameter(0, ParameterAttributes.RetVal, "")
Dim checkMethodparam01 As ParameterBuilder = checkMethod.DefineParameter(1, ParameterAttributes.None, "stm")
Dim checkMethodparam02 As ParameterBuilder = checkMethod.DefineParameter(2, ParameterAttributes.None, "b")
checkMethodIL.MarkSequencePoint(doc5, 234, 1, 234, 100)
Dim locbldr173 As LocalBuilder = checkMethodIL.DeclareLocal(GetType(Token))
locbldr173.SetLocalSymInfo("tok")
checkMethodIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodIL.Emit(OpCodes.Stloc, 0)
checkMethodIL.MarkSequencePoint(doc5, 235, 1, 235, 100)
Dim locbldr174 As LocalBuilder = checkMethodIL.DeclareLocal(GetType(System.Type))
locbldr174.SetLocalSymInfo("typ")
checkMethodIL.Emit(OpCodes.Ldtoken, GetType(MethodTok))
Dim typ52 As Type() = {GetType(System.RuntimeTypeHandle)}
checkMethodIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ52))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ52).ReturnType
checkMethodIL.Emit(OpCodes.Stloc, 1)
checkMethodIL.MarkSequencePoint(doc5, 236, 1, 236, 100)
checkMethodIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
Dim typ53(-1) As Type
checkMethodIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkMethodIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ53(UBound(typ53) + 1)
typ53(UBound(typ53)) = Typ
checkMethodIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ53))
Typ = Typ03.GetMethod("IsInstanceOfType", typ53).ReturnType
checkMethodIL.Emit(OpCodes.Stobj, Typ04)
checkMethodIL.MarkSequencePoint(doc5, 237, 1, 237, 100)
Dim locbldr175 As LocalBuilder = checkMethodIL.DeclareLocal(GetType(MethodStmt))
locbldr175.SetLocalSymInfo("mtss")
checkMethodIL.Emit(OpCodes.Newobj, GetType(MethodStmt).GetConstructor(Type.EmptyTypes))
checkMethodIL.Emit(OpCodes.Stloc, 2)
checkMethodIL.MarkSequencePoint(doc5, 238, 1, 238, 100)
Dim locbldr176 As LocalBuilder = checkMethodIL.DeclareLocal(GetType(Attributes.Attribute))
locbldr176.SetLocalSymInfo("att")
checkMethodIL.Emit(OpCodes.Newobj, GetType(Attributes.Attribute).GetConstructor(Type.EmptyTypes))
checkMethodIL.Emit(OpCodes.Stloc, 3)
checkMethodIL.MarkSequencePoint(doc5, 239, 1, 239, 100)
Dim locbldr177 As LocalBuilder = checkMethodIL.DeclareLocal(GetType(Ident))
locbldr177.SetLocalSymInfo("mn")
checkMethodIL.Emit(OpCodes.Newobj, GetType(Ident).GetConstructor(Type.EmptyTypes))
checkMethodIL.Emit(OpCodes.Stloc, 4)
checkMethodIL.MarkSequencePoint(doc5, 240, 1, 240, 100)
Dim locbldr178 As LocalBuilder = checkMethodIL.DeclareLocal(GetType(Expr))
locbldr178.SetLocalSymInfo("exp")
checkMethodIL.Emit(OpCodes.Ldnull)
checkMethodIL.Emit(OpCodes.Stloc, 5)
checkMethodIL.MarkSequencePoint(doc5, 241, 1, 241, 100)
Dim locbldr179 As LocalBuilder = checkMethodIL.DeclareLocal(GetType(System.Boolean))
locbldr179.SetLocalSymInfo("d")
checkMethodIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
checkMethodIL.Emit(OpCodes.Stloc, 6)
checkMethodIL.MarkSequencePoint(doc5, 243, 1, 243, 100)
checkMethodIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
checkMethodIL.Emit(OpCodes.Ldobj, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa131 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim tru131 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim cont131 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.Emit(OpCodes.Beq, tru131)
checkMethodIL.Emit(OpCodes.Br, fa131)
checkMethodIL.MarkLabel(tru131)
checkMethodIL.MarkSequencePoint(doc5, 245, 1, 245, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodStmt)
checkMethodIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
checkMethodIL.Emit(OpCodes.Stfld, GetType(MethodStmt).GetField("Line"))
checkMethodIL.MarkSequencePoint(doc5, 246, 1, 246, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodStmt)
checkMethodIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkMethodIL.Emit(OpCodes.Stfld, GetType(MethodStmt).GetField("Tokens"))
checkMethodIL.MarkSequencePoint(doc5, 248, 1, 248, 100)
Dim label2 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.MarkSequencePoint(doc5, 249, 1, 249, 100)
Dim label3 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.MarkSequencePoint(doc5, 250, 1, 250, 100)
Dim label4 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.MarkSequencePoint(doc5, 252, 1, 252, 100)
Dim locbldr180 As LocalBuilder = checkMethodIL.DeclareLocal(GetType(System.Int32))
locbldr180.SetLocalSymInfo("i")
checkMethodIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Stloc, 7)
checkMethodIL.MarkSequencePoint(doc5, 253, 1, 253, 100)
Dim locbldr181 As LocalBuilder = checkMethodIL.DeclareLocal(GetType(System.Int32))
locbldr181.SetLocalSymInfo("len")
checkMethodIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkMethodIL.Emit(OpCodes.Ldlen)
checkMethodIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Sub)
checkMethodIL.Emit(OpCodes.Stloc, 8)
checkMethodIL.MarkSequencePoint(doc5, 254, 1, 254, 100)
Dim locbldr182 As LocalBuilder = checkMethodIL.DeclareLocal(GetType(System.Boolean))
locbldr182.SetLocalSymInfo("bl")
checkMethodIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
checkMethodIL.Emit(OpCodes.Stloc, 9)
checkMethodIL.MarkSequencePoint(doc5, 257, 1, 257, 100)
checkMethodIL.MarkLabel(label2)
checkMethodIL.MarkSequencePoint(doc5, 259, 1, 259, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Add)
checkMethodIL.Emit(OpCodes.Stloc, 7)
checkMethodIL.MarkSequencePoint(doc5, 260, 1, 260, 100)
checkMethodIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodIL.Emit(OpCodes.Stloc, 0)
checkMethodIL.MarkSequencePoint(doc5, 261, 1, 261, 100)
checkMethodIL.Emit(OpCodes.Ldtoken, GetType(Attributes.Attribute))
Dim typ54 As Type() = {GetType(System.RuntimeTypeHandle)}
checkMethodIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ54))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ54).ReturnType
checkMethodIL.Emit(OpCodes.Stloc, 1)
checkMethodIL.MarkSequencePoint(doc5, 262, 1, 262, 100)
Dim typ55(-1) As Type
checkMethodIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkMethodIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ55(UBound(typ55) + 1)
typ55(UBound(typ55)) = Typ
checkMethodIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ55))
Typ = Typ03.GetMethod("IsInstanceOfType", typ55).ReturnType
checkMethodIL.Emit(OpCodes.Stloc, 9)
checkMethodIL.MarkSequencePoint(doc5, 264, 1, 264, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
checkMethodIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa132 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim tru132 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim cont132 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.Emit(OpCodes.Beq, tru132)
checkMethodIL.Emit(OpCodes.Br, fa132)
checkMethodIL.MarkLabel(tru132)
checkMethodIL.MarkSequencePoint(doc5, 265, 1, 265, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkMethodIL.Emit(OpCodes.Stloc, 3)
checkMethodIL.MarkSequencePoint(doc5, 266, 1, 266, 100)
Dim typ56(-1) As Type
checkMethodIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodStmt)
Typ03 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Attributes.Attribute)
ReDim Preserve typ56(UBound(typ56) + 1)
typ56(UBound(typ56)) = Typ
checkMethodIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddAttr", typ56))
Typ = Typ03.GetMethod("AddAttr", typ56).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
checkMethodIL.Emit(OpCodes.Pop)
End If
checkMethodIL.MarkSequencePoint(doc5, 267, 1, 267, 100)
checkMethodIL.Emit(OpCodes.Br, cont132)
checkMethodIL.MarkLabel(fa132)
checkMethodIL.MarkSequencePoint(doc5, 268, 1, 268, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Sub)
checkMethodIL.Emit(OpCodes.Stloc, 7)
checkMethodIL.MarkSequencePoint(doc5, 269, 1, 269, 100)
checkMethodIL.Emit(OpCodes.Br, label4)
checkMethodIL.MarkSequencePoint(doc5, 270, 1, 270, 100)
checkMethodIL.Emit(OpCodes.Br, cont132)
checkMethodIL.MarkLabel(cont132)
checkMethodIL.MarkSequencePoint(doc5, 272, 1, 272, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Int32)
Dim fa133 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim tru133 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim cont133 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.Emit(OpCodes.Beq, tru133)
checkMethodIL.Emit(OpCodes.Br, fa133)
checkMethodIL.MarkLabel(tru133)
checkMethodIL.MarkSequencePoint(doc5, 273, 1, 273, 100)
checkMethodIL.Emit(OpCodes.Br, label3)
checkMethodIL.MarkSequencePoint(doc5, 274, 1, 274, 100)
checkMethodIL.Emit(OpCodes.Br, cont133)
checkMethodIL.MarkLabel(fa133)
checkMethodIL.MarkSequencePoint(doc5, 275, 1, 275, 100)
checkMethodIL.Emit(OpCodes.Br, label2)
checkMethodIL.MarkSequencePoint(doc5, 276, 1, 276, 100)
checkMethodIL.Emit(OpCodes.Br, cont133)
checkMethodIL.MarkLabel(cont133)
checkMethodIL.MarkSequencePoint(doc5, 278, 1, 278, 100)
checkMethodIL.MarkLabel(label3)
checkMethodIL.MarkSequencePoint(doc5, 280, 1, 280, 100)
checkMethodIL.MarkLabel(label4)
checkMethodIL.MarkSequencePoint(doc5, 283, 1, 283, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Add)
checkMethodIL.Emit(OpCodes.Stloc, 7)
checkMethodIL.MarkSequencePoint(doc5, 285, 1, 285, 100)
Dim locbldr183 As LocalBuilder = checkMethodIL.DeclareLocal(GetType(Token))
locbldr183.SetLocalSymInfo("tok2")
checkMethodIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodIL.Emit(OpCodes.Stloc, 10)
checkMethodIL.MarkSequencePoint(doc5, 286, 1, 286, 100)
Dim locbldr184 As LocalBuilder = checkMethodIL.DeclareLocal(GetType(System.Type))
locbldr184.SetLocalSymInfo("typ2")
checkMethodIL.MarkSequencePoint(doc5, 287, 1, 287, 100)
Dim locbldr185 As LocalBuilder = checkMethodIL.DeclareLocal(GetType(System.Boolean))
locbldr185.SetLocalSymInfo("b2")
checkMethodIL.MarkSequencePoint(doc5, 289, 1, 289, 100)
checkMethodIL.Emit(OpCodes.Ldtoken, GetType(TypeTok))
Dim typ57 As Type() = {GetType(System.RuntimeTypeHandle)}
checkMethodIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ57))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ57).ReturnType
checkMethodIL.Emit(OpCodes.Stloc, 11)
checkMethodIL.MarkSequencePoint(doc5, 290, 1, 290, 100)
Dim typ58(-1) As Type
checkMethodIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Type)
Typ03 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(Token)
checkMethodIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ58(UBound(typ58) + 1)
typ58(UBound(typ58)) = Typ
checkMethodIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ58))
Typ = Typ03.GetMethod("IsInstanceOfType", typ58).ReturnType
checkMethodIL.Emit(OpCodes.Stloc, 12)
checkMethodIL.MarkSequencePoint(doc5, 292, 1, 292, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(System.Boolean)
checkMethodIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa134 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim tru134 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim cont134 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.Emit(OpCodes.Beq, fa134)
checkMethodIL.Emit(OpCodes.Br, tru134)
checkMethodIL.MarkLabel(tru134)
checkMethodIL.MarkSequencePoint(doc5, 293, 1, 293, 100)
Dim locbldr186 As LocalBuilder = checkMethodIL.DeclareLocal(GetType(Token))
locbldr186.SetLocalSymInfo("t")
checkMethodIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodIL.Emit(OpCodes.Stloc, 13)
checkMethodIL.MarkSequencePoint(doc5, 294, 1, 294, 100)
Dim locbldr187 As LocalBuilder = checkMethodIL.DeclareLocal(GetType(TypeTok))
locbldr187.SetLocalSymInfo("tt")
checkMethodIL.Emit(OpCodes.Newobj, GetType(TypeTok).GetConstructor(Type.EmptyTypes))
checkMethodIL.Emit(OpCodes.Stloc, 14)
checkMethodIL.MarkSequencePoint(doc5, 295, 1, 295, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(TypeTok)
checkMethodIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(Token)
checkMethodIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
checkMethodIL.Emit(OpCodes.Stfld, GetType(TypeTok).GetField("Line"))
checkMethodIL.MarkSequencePoint(doc5, 296, 1, 296, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(TypeTok)
checkMethodIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(Token)
checkMethodIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
checkMethodIL.Emit(OpCodes.Stfld, GetType(TypeTok).GetField("Value"))
checkMethodIL.MarkSequencePoint(doc5, 297, 1, 297, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodStmt)
checkMethodIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(TypeTok)
checkMethodIL.Emit(OpCodes.Stfld, GetType(MethodStmt).GetField("RetTyp"))
checkMethodIL.MarkSequencePoint(doc5, 298, 1, 298, 100)
checkMethodIL.Emit(OpCodes.Br, cont134)
checkMethodIL.MarkLabel(fa134)
checkMethodIL.MarkSequencePoint(doc5, 299, 1, 299, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodStmt)
checkMethodIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodIL.Emit(OpCodes.Stfld, GetType(MethodStmt).GetField("RetTyp"))
checkMethodIL.MarkSequencePoint(doc5, 300, 1, 300, 100)
checkMethodIL.Emit(OpCodes.Br, cont134)
checkMethodIL.MarkLabel(cont134)
checkMethodIL.MarkSequencePoint(doc5, 302, 1, 302, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Add)
checkMethodIL.Emit(OpCodes.Stloc, 7)
checkMethodIL.MarkSequencePoint(doc5, 304, 1, 304, 100)
checkMethodIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodIL.Emit(OpCodes.Stloc, 10)
checkMethodIL.MarkSequencePoint(doc5, 305, 1, 305, 100)
checkMethodIL.Emit(OpCodes.Ldtoken, GetType(Ident))
Dim typ59 As Type() = {GetType(System.RuntimeTypeHandle)}
checkMethodIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ59))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ59).ReturnType
checkMethodIL.Emit(OpCodes.Stloc, 11)
checkMethodIL.MarkSequencePoint(doc5, 306, 1, 306, 100)
Dim typ60(-1) As Type
checkMethodIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Type)
Typ03 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(Token)
checkMethodIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ60(UBound(typ60) + 1)
typ60(UBound(typ60)) = Typ
checkMethodIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ60))
Typ = Typ03.GetMethod("IsInstanceOfType", typ60).ReturnType
checkMethodIL.Emit(OpCodes.Stloc, 12)
checkMethodIL.MarkSequencePoint(doc5, 307, 1, 307, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(System.Boolean)
checkMethodIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa135 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim tru135 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim cont135 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.Emit(OpCodes.Beq, tru135)
checkMethodIL.Emit(OpCodes.Br, fa135)
checkMethodIL.MarkLabel(tru135)
checkMethodIL.MarkSequencePoint(doc5, 308, 1, 308, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodStmt)
checkMethodIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(Token)
checkMethodIL.Emit(OpCodes.Stfld, GetType(MethodStmt).GetField("MethodName"))
checkMethodIL.MarkSequencePoint(doc5, 309, 1, 309, 100)
checkMethodIL.Emit(OpCodes.Br, cont135)
checkMethodIL.MarkLabel(fa135)
checkMethodIL.Emit(OpCodes.Br, cont135)
checkMethodIL.MarkLabel(cont135)
checkMethodIL.MarkSequencePoint(doc5, 311, 1, 311, 100)
Dim label5 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.MarkSequencePoint(doc5, 312, 1, 312, 100)
Dim label6 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.MarkSequencePoint(doc5, 314, 1, 314, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Add)
checkMethodIL.Emit(OpCodes.Stloc, 7)
checkMethodIL.MarkSequencePoint(doc5, 315, 1, 315, 100)
checkMethodIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodIL.Emit(OpCodes.Stloc, 10)
checkMethodIL.MarkSequencePoint(doc5, 316, 1, 316, 100)
checkMethodIL.Emit(OpCodes.Ldtoken, GetType(LParen))
Dim typ61 As Type() = {GetType(System.RuntimeTypeHandle)}
checkMethodIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ61))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ61).ReturnType
checkMethodIL.Emit(OpCodes.Stloc, 11)
checkMethodIL.MarkSequencePoint(doc5, 317, 1, 317, 100)
Dim typ62(-1) As Type
checkMethodIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Type)
Typ03 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(Token)
checkMethodIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ62(UBound(typ62) + 1)
typ62(UBound(typ62)) = Typ
checkMethodIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ62))
Typ = Typ03.GetMethod("IsInstanceOfType", typ62).ReturnType
checkMethodIL.Emit(OpCodes.Stloc, 12)
checkMethodIL.MarkSequencePoint(doc5, 318, 1, 318, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(System.Boolean)
checkMethodIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa136 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim tru136 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim cont136 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.Emit(OpCodes.Beq, tru136)
checkMethodIL.Emit(OpCodes.Br, fa136)
checkMethodIL.MarkLabel(tru136)
checkMethodIL.MarkSequencePoint(doc5, 320, 1, 320, 100)
checkMethodIL.MarkLabel(label5)
checkMethodIL.MarkSequencePoint(doc5, 323, 1, 323, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Add)
checkMethodIL.Emit(OpCodes.Stloc, 7)
checkMethodIL.MarkSequencePoint(doc5, 325, 1, 325, 100)
checkMethodIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodIL.Emit(OpCodes.Stloc, 10)
checkMethodIL.MarkSequencePoint(doc5, 326, 1, 326, 100)
checkMethodIL.Emit(OpCodes.Ldtoken, GetType(RParen))
Dim typ63 As Type() = {GetType(System.RuntimeTypeHandle)}
checkMethodIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ63))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ63).ReturnType
checkMethodIL.Emit(OpCodes.Stloc, 11)
checkMethodIL.MarkSequencePoint(doc5, 327, 1, 327, 100)
Dim typ64(-1) As Type
checkMethodIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Type)
Typ03 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(Token)
checkMethodIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ64(UBound(typ64) + 1)
typ64(UBound(typ64)) = Typ
checkMethodIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ64))
Typ = Typ03.GetMethod("IsInstanceOfType", typ64).ReturnType
checkMethodIL.Emit(OpCodes.Stloc, 12)
checkMethodIL.MarkSequencePoint(doc5, 328, 1, 328, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(System.Boolean)
checkMethodIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa137 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim tru137 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim cont137 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.Emit(OpCodes.Beq, tru137)
checkMethodIL.Emit(OpCodes.Br, fa137)
checkMethodIL.MarkLabel(tru137)
checkMethodIL.MarkSequencePoint(doc5, 329, 1, 329, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Boolean)
checkMethodIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa138 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim tru138 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim cont138 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.Emit(OpCodes.Beq, tru138)
checkMethodIL.Emit(OpCodes.Br, fa138)
checkMethodIL.MarkLabel(tru138)
checkMethodIL.MarkSequencePoint(doc5, 330, 1, 330, 100)
Dim locbldr188 As LocalBuilder = checkMethodIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer"))
locbldr188.SetLocalSymInfo("eopt2")
checkMethodIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer").GetConstructor(Type.EmptyTypes))
checkMethodIL.Emit(OpCodes.Stloc, 15)
checkMethodIL.MarkSequencePoint(doc5, 331, 1, 331, 100)
Dim typ65(-1) As Type
checkMethodIL.Emit(OpCodes.Ldloc, 15)
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer")
Typ03 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Expr)
ReDim Preserve typ65(UBound(typ65) + 1)
typ65(UBound(typ65)) = Typ
checkMethodIL.Emit(OpCodes.Ldloca, 9)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ65(UBound(typ65) + 1)
typ65(UBound(typ65)) = Typ
checkMethodIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("checkVarAs", typ65))
Typ = Typ03.GetMethod("checkVarAs", typ65).ReturnType
checkMethodIL.Emit(OpCodes.Stloc, 5)
checkMethodIL.MarkSequencePoint(doc5, 332, 1, 332, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
checkMethodIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa139 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim tru139 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim cont139 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.Emit(OpCodes.Beq, tru139)
checkMethodIL.Emit(OpCodes.Br, fa139)
checkMethodIL.MarkLabel(tru139)
checkMethodIL.MarkSequencePoint(doc5, 333, 1, 333, 100)
Dim typ66(-1) As Type
checkMethodIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodStmt)
Typ03 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Expr)
ReDim Preserve typ66(UBound(typ66) + 1)
typ66(UBound(typ66)) = Typ
checkMethodIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddParam", typ66))
Typ = Typ03.GetMethod("AddParam", typ66).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
checkMethodIL.Emit(OpCodes.Pop)
End If
checkMethodIL.MarkSequencePoint(doc5, 334, 1, 334, 100)
checkMethodIL.Emit(OpCodes.Br, cont139)
checkMethodIL.MarkLabel(fa139)
checkMethodIL.Emit(OpCodes.Br, cont139)
checkMethodIL.MarkLabel(cont139)
checkMethodIL.MarkSequencePoint(doc5, 335, 1, 335, 100)
checkMethodIL.Emit(OpCodes.Br, cont138)
checkMethodIL.MarkLabel(fa138)
checkMethodIL.Emit(OpCodes.Br, cont138)
checkMethodIL.MarkLabel(cont138)
checkMethodIL.MarkSequencePoint(doc5, 336, 1, 336, 100)
checkMethodIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
checkMethodIL.Emit(OpCodes.Stloc, 6)
checkMethodIL.MarkSequencePoint(doc5, 337, 1, 337, 100)
checkMethodIL.Emit(OpCodes.Br, label6)
checkMethodIL.MarkSequencePoint(doc5, 338, 1, 338, 100)
checkMethodIL.Emit(OpCodes.Br, cont137)
checkMethodIL.MarkLabel(fa137)
checkMethodIL.Emit(OpCodes.Br, cont137)
checkMethodIL.MarkLabel(cont137)
checkMethodIL.MarkSequencePoint(doc5, 340, 1, 340, 100)
checkMethodIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodIL.Emit(OpCodes.Stloc, 10)
checkMethodIL.MarkSequencePoint(doc5, 341, 1, 341, 100)
checkMethodIL.Emit(OpCodes.Ldtoken, GetType(VarTok))
Dim typ67 As Type() = {GetType(System.RuntimeTypeHandle)}
checkMethodIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ67))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ67).ReturnType
checkMethodIL.Emit(OpCodes.Stloc, 11)
checkMethodIL.MarkSequencePoint(doc5, 342, 1, 342, 100)
Dim typ68(-1) As Type
checkMethodIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Type)
Typ03 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(Token)
checkMethodIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ68(UBound(typ68) + 1)
typ68(UBound(typ68)) = Typ
checkMethodIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ68))
Typ = Typ03.GetMethod("IsInstanceOfType", typ68).ReturnType
checkMethodIL.Emit(OpCodes.Stloc, 12)
checkMethodIL.MarkSequencePoint(doc5, 343, 1, 343, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(System.Boolean)
checkMethodIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa140 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim tru140 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim cont140 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.Emit(OpCodes.Beq, tru140)
checkMethodIL.Emit(OpCodes.Br, fa140)
checkMethodIL.MarkLabel(tru140)
checkMethodIL.MarkSequencePoint(doc5, 344, 1, 344, 100)
checkMethodIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
checkMethodIL.Emit(OpCodes.Stloc, 6)
checkMethodIL.MarkSequencePoint(doc5, 345, 1, 345, 100)
checkMethodIL.Emit(OpCodes.Newobj, GetType(Expr).GetConstructor(Type.EmptyTypes))
checkMethodIL.Emit(OpCodes.Stloc, 5)
checkMethodIL.MarkSequencePoint(doc5, 346, 1, 346, 100)
checkMethodIL.Emit(OpCodes.Br, cont140)
checkMethodIL.MarkLabel(fa140)
checkMethodIL.Emit(OpCodes.Br, cont140)
checkMethodIL.MarkLabel(cont140)
checkMethodIL.MarkSequencePoint(doc5, 348, 1, 348, 100)
checkMethodIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodIL.Emit(OpCodes.Stloc, 10)
checkMethodIL.MarkSequencePoint(doc5, 349, 1, 349, 100)
checkMethodIL.Emit(OpCodes.Ldtoken, GetType(Comma))
Dim typ69 As Type() = {GetType(System.RuntimeTypeHandle)}
checkMethodIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ69))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ69).ReturnType
checkMethodIL.Emit(OpCodes.Stloc, 11)
checkMethodIL.MarkSequencePoint(doc5, 350, 1, 350, 100)
Dim typ70(-1) As Type
checkMethodIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Type)
Typ03 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(Token)
checkMethodIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ70(UBound(typ70) + 1)
typ70(UBound(typ70)) = Typ
checkMethodIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ70))
Typ = Typ03.GetMethod("IsInstanceOfType", typ70).ReturnType
checkMethodIL.Emit(OpCodes.Stloc, 12)
checkMethodIL.MarkSequencePoint(doc5, 351, 1, 351, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(System.Boolean)
checkMethodIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa141 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim tru141 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim cont141 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.Emit(OpCodes.Beq, tru141)
checkMethodIL.Emit(OpCodes.Br, fa141)
checkMethodIL.MarkLabel(tru141)
checkMethodIL.MarkSequencePoint(doc5, 352, 1, 352, 100)
Dim locbldr189 As LocalBuilder = checkMethodIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer"))
locbldr189.SetLocalSymInfo("eopt1")
checkMethodIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer").GetConstructor(Type.EmptyTypes))
checkMethodIL.Emit(OpCodes.Stloc, 16)
checkMethodIL.MarkSequencePoint(doc5, 353, 1, 353, 100)
Dim typ71(-1) As Type
checkMethodIL.Emit(OpCodes.Ldloc, 16)
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer")
Typ03 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Expr)
ReDim Preserve typ71(UBound(typ71) + 1)
typ71(UBound(typ71)) = Typ
checkMethodIL.Emit(OpCodes.Ldloca, 9)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ71(UBound(typ71) + 1)
typ71(UBound(typ71)) = Typ
checkMethodIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("checkVarAs", typ71))
Typ = Typ03.GetMethod("checkVarAs", typ71).ReturnType
checkMethodIL.Emit(OpCodes.Stloc, 5)
checkMethodIL.MarkSequencePoint(doc5, 354, 1, 354, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
checkMethodIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa142 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim tru142 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim cont142 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.Emit(OpCodes.Beq, tru142)
checkMethodIL.Emit(OpCodes.Br, fa142)
checkMethodIL.MarkLabel(tru142)
checkMethodIL.MarkSequencePoint(doc5, 355, 1, 355, 100)
Dim typ72(-1) As Type
checkMethodIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodStmt)
Typ03 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Expr)
ReDim Preserve typ72(UBound(typ72) + 1)
typ72(UBound(typ72)) = Typ
checkMethodIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddParam", typ72))
Typ = Typ03.GetMethod("AddParam", typ72).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
checkMethodIL.Emit(OpCodes.Pop)
End If
checkMethodIL.MarkSequencePoint(doc5, 356, 1, 356, 100)
checkMethodIL.Emit(OpCodes.Br, cont142)
checkMethodIL.MarkLabel(fa142)
checkMethodIL.Emit(OpCodes.Br, cont142)
checkMethodIL.MarkLabel(cont142)
checkMethodIL.MarkSequencePoint(doc5, 357, 1, 357, 100)
checkMethodIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
checkMethodIL.Emit(OpCodes.Stloc, 6)
checkMethodIL.MarkSequencePoint(doc5, 358, 1, 358, 100)
checkMethodIL.Emit(OpCodes.Br, cont141)
checkMethodIL.MarkLabel(fa141)
checkMethodIL.Emit(OpCodes.Br, cont141)
checkMethodIL.MarkLabel(cont141)
checkMethodIL.MarkSequencePoint(doc5, 360, 1, 360, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Boolean)
checkMethodIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa143 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim tru143 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim cont143 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.Emit(OpCodes.Beq, tru143)
checkMethodIL.Emit(OpCodes.Br, fa143)
checkMethodIL.MarkLabel(tru143)
checkMethodIL.MarkSequencePoint(doc5, 361, 1, 361, 100)
Dim typ73(-1) As Type
checkMethodIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Expr)
Typ03 = Typ
checkMethodIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ReDim Preserve typ73(UBound(typ73) + 1)
typ73(UBound(typ73)) = Typ
checkMethodIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ73))
Typ = Typ03.GetMethod("AddToken", typ73).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
checkMethodIL.Emit(OpCodes.Pop)
End If
checkMethodIL.MarkSequencePoint(doc5, 362, 1, 362, 100)
checkMethodIL.Emit(OpCodes.Br, cont143)
checkMethodIL.MarkLabel(fa143)
checkMethodIL.Emit(OpCodes.Br, cont143)
checkMethodIL.MarkLabel(cont143)
checkMethodIL.MarkSequencePoint(doc5, 365, 1, 365, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Int32)
Dim fa144 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim tru144 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim cont144 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.Emit(OpCodes.Beq, tru144)
checkMethodIL.Emit(OpCodes.Br, fa144)
checkMethodIL.MarkLabel(tru144)
checkMethodIL.MarkSequencePoint(doc5, 366, 1, 366, 100)
checkMethodIL.Emit(OpCodes.Br, label6)
checkMethodIL.MarkSequencePoint(doc5, 367, 1, 367, 100)
checkMethodIL.Emit(OpCodes.Br, cont144)
checkMethodIL.MarkLabel(fa144)
checkMethodIL.MarkSequencePoint(doc5, 368, 1, 368, 100)
checkMethodIL.Emit(OpCodes.Br, label5)
checkMethodIL.MarkSequencePoint(doc5, 369, 1, 369, 100)
checkMethodIL.Emit(OpCodes.Br, cont144)
checkMethodIL.MarkLabel(cont144)
checkMethodIL.MarkSequencePoint(doc5, 371, 1, 371, 100)
checkMethodIL.MarkLabel(label6)
checkMethodIL.MarkSequencePoint(doc5, 373, 1, 373, 100)
checkMethodIL.Emit(OpCodes.Br, cont136)
checkMethodIL.MarkLabel(fa136)
checkMethodIL.Emit(OpCodes.Br, cont136)
checkMethodIL.MarkLabel(cont136)
checkMethodIL.MarkSequencePoint(doc5, 375, 1, 375, 100)
checkMethodIL.Emit(OpCodes.Br, cont131)
checkMethodIL.MarkLabel(fa131)
checkMethodIL.Emit(OpCodes.Br, cont131)
checkMethodIL.MarkLabel(cont131)
checkMethodIL.MarkSequencePoint(doc5, 376, 1, 376, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodStmt)
checkMethodIL.MarkSequencePoint(doc5, 377, 1, 377, 100)
checkMethodIL.Emit(OpCodes.Ret)
Dim typ74(-1) As Type
ReDim Preserve typ74(UBound(typ74) + 1)
typ74(UBound(typ74)) = GetType(Stmt)
ReDim Preserve typ74(UBound(typ74) + 1)
typ74(UBound(typ74)) = GetType(System.Boolean).MakeByRefType()
Dim checkMethodCall As MethodBuilder = StmtOptimizer.DefineMethod("checkMethodCall", MethodAttributes.Public, GetType(Stmt), typ74)
Dim checkMethodCallIL As ILGenerator = checkMethodCall.GetILGenerator()
Dim checkMethodCallparam00 As ParameterBuilder = checkMethodCall.DefineParameter(0, ParameterAttributes.RetVal, "")
Dim checkMethodCallparam01 As ParameterBuilder = checkMethodCall.DefineParameter(1, ParameterAttributes.None, "stm")
Dim checkMethodCallparam02 As ParameterBuilder = checkMethodCall.DefineParameter(2, ParameterAttributes.None, "b")
checkMethodCallIL.MarkSequencePoint(doc5, 381, 1, 381, 100)
checkMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodCallIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkMethodCallIL.Emit(OpCodes.Ldlen)
checkMethodCallIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
Dim fa145 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim tru145 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim cont145 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
checkMethodCallIL.Emit(OpCodes.Bgt, tru145)
checkMethodCallIL.Emit(OpCodes.Br, fa145)
checkMethodCallIL.MarkLabel(tru145)
checkMethodCallIL.MarkSequencePoint(doc5, 382, 1, 382, 100)
Dim locbldr190 As LocalBuilder = checkMethodCallIL.DeclareLocal(GetType(Token))
locbldr190.SetLocalSymInfo("tok")
checkMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodCallIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodCallIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodCallIL.Emit(OpCodes.Stloc, 0)
checkMethodCallIL.MarkSequencePoint(doc5, 383, 1, 383, 100)
Dim locbldr191 As LocalBuilder = checkMethodCallIL.DeclareLocal(GetType(System.Type))
locbldr191.SetLocalSymInfo("typ")
checkMethodCallIL.Emit(OpCodes.Ldtoken, GetType(Ident))
Dim typ75 As Type() = {GetType(System.RuntimeTypeHandle)}
checkMethodCallIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ75))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ75).ReturnType
checkMethodCallIL.Emit(OpCodes.Stloc, 1)
checkMethodCallIL.MarkSequencePoint(doc5, 384, 1, 384, 100)
Dim locbldr192 As LocalBuilder = checkMethodCallIL.DeclareLocal(GetType(Token))
locbldr192.SetLocalSymInfo("tokb")
checkMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodCallIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodCallIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodCallIL.Emit(OpCodes.Stloc, 2)
checkMethodCallIL.MarkSequencePoint(doc5, 385, 1, 385, 100)
Dim locbldr193 As LocalBuilder = checkMethodCallIL.DeclareLocal(GetType(System.Type))
locbldr193.SetLocalSymInfo("typb")
checkMethodCallIL.Emit(OpCodes.Ldtoken, GetType(LParen))
Dim typ76 As Type() = {GetType(System.RuntimeTypeHandle)}
checkMethodCallIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ76))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ76).ReturnType
checkMethodCallIL.Emit(OpCodes.Stloc, 3)
checkMethodCallIL.MarkSequencePoint(doc5, 386, 1, 386, 100)
Dim locbldr194 As LocalBuilder = checkMethodCallIL.DeclareLocal(GetType(System.Boolean))
locbldr194.SetLocalSymInfo("ba")
Dim typ77(-1) As Type
checkMethodCallIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkMethodCallIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkMethodCallIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ77(UBound(typ77) + 1)
typ77(UBound(typ77)) = Typ
checkMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ77))
Typ = Typ03.GetMethod("IsInstanceOfType", typ77).ReturnType
checkMethodCallIL.Emit(OpCodes.Stloc, 4)
checkMethodCallIL.MarkSequencePoint(doc5, 387, 1, 387, 100)
Dim locbldr195 As LocalBuilder = checkMethodCallIL.DeclareLocal(GetType(System.Boolean))
locbldr195.SetLocalSymInfo("bb")
Dim typ78(-1) As Type
checkMethodCallIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Type)
Typ03 = Typ
checkMethodCallIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Token)
checkMethodCallIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ78(UBound(typ78) + 1)
typ78(UBound(typ78)) = Typ
checkMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ78))
Typ = Typ03.GetMethod("IsInstanceOfType", typ78).ReturnType
checkMethodCallIL.Emit(OpCodes.Stloc, 5)
checkMethodCallIL.MarkSequencePoint(doc5, 389, 1, 389, 100)
checkMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
checkMethodCallIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
checkMethodCallIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
checkMethodCallIL.Emit(OpCodes.And)
checkMethodCallIL.Emit(OpCodes.Stobj, Typ04)
checkMethodCallIL.MarkSequencePoint(doc5, 391, 1, 391, 100)
Dim locbldr196 As LocalBuilder = checkMethodCallIL.DeclareLocal(GetType(MethodCallStmt))
locbldr196.SetLocalSymInfo("mtcss")
checkMethodCallIL.Emit(OpCodes.Newobj, GetType(MethodCallStmt).GetConstructor(Type.EmptyTypes))
checkMethodCallIL.Emit(OpCodes.Stloc, 6)
checkMethodCallIL.MarkSequencePoint(doc5, 392, 1, 392, 100)
Dim locbldr197 As LocalBuilder = checkMethodCallIL.DeclareLocal(GetType(MethodNameTok))
locbldr197.SetLocalSymInfo("mn")
checkMethodCallIL.Emit(OpCodes.Newobj, GetType(MethodNameTok).GetConstructor(Type.EmptyTypes))
checkMethodCallIL.Emit(OpCodes.Stloc, 7)
checkMethodCallIL.MarkSequencePoint(doc5, 393, 1, 393, 100)
Dim locbldr198 As LocalBuilder = checkMethodCallIL.DeclareLocal(GetType(MethodCallTok))
locbldr198.SetLocalSymInfo("mct")
checkMethodCallIL.Emit(OpCodes.Newobj, GetType(MethodCallTok).GetConstructor(Type.EmptyTypes))
checkMethodCallIL.Emit(OpCodes.Stloc, 8)
checkMethodCallIL.MarkSequencePoint(doc5, 394, 1, 394, 100)
Dim locbldr199 As LocalBuilder = checkMethodCallIL.DeclareLocal(GetType(Ident))
locbldr199.SetLocalSymInfo("idt")
checkMethodCallIL.Emit(OpCodes.Ldnull)
checkMethodCallIL.Emit(OpCodes.Stloc, 9)
checkMethodCallIL.MarkSequencePoint(doc5, 395, 1, 395, 100)
Dim locbldr200 As LocalBuilder = checkMethodCallIL.DeclareLocal(GetType(Expr))
locbldr200.SetLocalSymInfo("exp")
checkMethodCallIL.Emit(OpCodes.Newobj, GetType(Expr).GetConstructor(Type.EmptyTypes))
checkMethodCallIL.Emit(OpCodes.Stloc, 10)
checkMethodCallIL.MarkSequencePoint(doc5, 396, 1, 396, 100)
Dim locbldr201 As LocalBuilder = checkMethodCallIL.DeclareLocal(GetType(System.Int32))
locbldr201.SetLocalSymInfo("lvl")
checkMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Stloc, 11)
checkMethodCallIL.MarkSequencePoint(doc5, 397, 1, 397, 100)
Dim locbldr202 As LocalBuilder = checkMethodCallIL.DeclareLocal(GetType(System.Boolean))
locbldr202.SetLocalSymInfo("d")
checkMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
checkMethodCallIL.Emit(OpCodes.Stloc, 12)
checkMethodCallIL.MarkSequencePoint(doc5, 398, 1, 398, 100)
Dim locbldr203 As LocalBuilder = checkMethodCallIL.DeclareLocal(GetType(System.Int32))
locbldr203.SetLocalSymInfo("i")
checkMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Stloc, 13)
checkMethodCallIL.MarkSequencePoint(doc5, 400, 1, 400, 100)
checkMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
checkMethodCallIL.Emit(OpCodes.Ldobj, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa146 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim tru146 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim cont146 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
checkMethodCallIL.Emit(OpCodes.Beq, tru146)
checkMethodCallIL.Emit(OpCodes.Br, fa146)
checkMethodCallIL.MarkLabel(tru146)
checkMethodCallIL.MarkSequencePoint(doc5, 402, 1, 402, 100)
checkMethodCallIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(MethodCallStmt)
checkMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodCallIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
checkMethodCallIL.Emit(OpCodes.Stfld, GetType(MethodCallStmt).GetField("Line"))
checkMethodCallIL.MarkSequencePoint(doc5, 403, 1, 403, 100)
checkMethodCallIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(MethodCallStmt)
checkMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodCallIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkMethodCallIL.Emit(OpCodes.Stfld, GetType(MethodCallStmt).GetField("Tokens"))
checkMethodCallIL.MarkSequencePoint(doc5, 405, 1, 405, 100)
checkMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodCallIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodCallIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodCallIL.Emit(OpCodes.Stloc, 9)
checkMethodCallIL.MarkSequencePoint(doc5, 406, 1, 406, 100)
checkMethodCallIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(MethodNameTok)
checkMethodCallIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Ident)
checkMethodCallIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Line"))
Typ = GetType(Ident).GetField("Line").FieldType
checkMethodCallIL.Emit(OpCodes.Stfld, GetType(MethodNameTok).GetField("Line"))
checkMethodCallIL.MarkSequencePoint(doc5, 407, 1, 407, 100)
checkMethodCallIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(MethodNameTok)
checkMethodCallIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Ident)
checkMethodCallIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
checkMethodCallIL.Emit(OpCodes.Stfld, GetType(MethodNameTok).GetField("Value"))
checkMethodCallIL.MarkSequencePoint(doc5, 409, 1, 409, 100)
Dim locbldr204 As LocalBuilder = checkMethodCallIL.DeclareLocal(GetType(Token))
locbldr204.SetLocalSymInfo("tok2")
checkMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodCallIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodCallIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodCallIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodCallIL.Emit(OpCodes.Stloc, 14)
checkMethodCallIL.MarkSequencePoint(doc5, 410, 1, 410, 100)
Dim locbldr205 As LocalBuilder = checkMethodCallIL.DeclareLocal(GetType(System.Type))
locbldr205.SetLocalSymInfo("typ2")
checkMethodCallIL.MarkSequencePoint(doc5, 411, 1, 411, 100)
Dim locbldr206 As LocalBuilder = checkMethodCallIL.DeclareLocal(GetType(System.Boolean))
locbldr206.SetLocalSymInfo("b2")
checkMethodCallIL.MarkSequencePoint(doc5, 412, 1, 412, 100)
Dim locbldr207 As LocalBuilder = checkMethodCallIL.DeclareLocal(GetType(System.Int32))
locbldr207.SetLocalSymInfo("len")
checkMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodCallIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkMethodCallIL.Emit(OpCodes.Ldlen)
checkMethodCallIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Stloc, 17)
checkMethodCallIL.MarkSequencePoint(doc5, 413, 1, 413, 100)
Dim locbldr208 As LocalBuilder = checkMethodCallIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer"))
locbldr208.SetLocalSymInfo("eopt")
checkMethodCallIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer").GetConstructor(Type.EmptyTypes))
checkMethodCallIL.Emit(OpCodes.Stloc, 18)
checkMethodCallIL.MarkSequencePoint(doc5, 415, 1, 415, 100)
Dim label7 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
checkMethodCallIL.MarkSequencePoint(doc5, 416, 1, 416, 100)
Dim label8 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
checkMethodCallIL.MarkSequencePoint(doc5, 417, 1, 417, 100)
Dim label9 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
checkMethodCallIL.MarkSequencePoint(doc5, 419, 1, 419, 100)
checkMethodCallIL.MarkLabel(label7)
checkMethodCallIL.MarkSequencePoint(doc5, 422, 1, 422, 100)
checkMethodCallIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Add)
checkMethodCallIL.Emit(OpCodes.Stloc, 13)
checkMethodCallIL.MarkSequencePoint(doc5, 424, 1, 424, 100)
checkMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodCallIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodCallIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodCallIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodCallIL.Emit(OpCodes.Stloc, 14)
checkMethodCallIL.MarkSequencePoint(doc5, 425, 1, 425, 100)
checkMethodCallIL.Emit(OpCodes.Ldtoken, GetType(RParen))
Dim typ79 As Type() = {GetType(System.RuntimeTypeHandle)}
checkMethodCallIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ79))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ79).ReturnType
checkMethodCallIL.Emit(OpCodes.Stloc, 15)
checkMethodCallIL.MarkSequencePoint(doc5, 426, 1, 426, 100)
Dim typ80(-1) As Type
checkMethodCallIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(System.Type)
Typ03 = Typ
checkMethodCallIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(Token)
checkMethodCallIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ80(UBound(typ80) + 1)
typ80(UBound(typ80)) = Typ
checkMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ80))
Typ = Typ03.GetMethod("IsInstanceOfType", typ80).ReturnType
checkMethodCallIL.Emit(OpCodes.Stloc, 16)
checkMethodCallIL.MarkSequencePoint(doc5, 427, 1, 427, 100)
checkMethodCallIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(System.Boolean)
checkMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa147 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim tru147 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim cont147 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
checkMethodCallIL.Emit(OpCodes.Beq, tru147)
checkMethodCallIL.Emit(OpCodes.Br, fa147)
checkMethodCallIL.MarkLabel(tru147)
checkMethodCallIL.MarkSequencePoint(doc5, 428, 1, 428, 100)
checkMethodCallIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Sub)
checkMethodCallIL.Emit(OpCodes.Stloc, 11)
checkMethodCallIL.MarkSequencePoint(doc5, 429, 1, 429, 100)
checkMethodCallIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa148 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim tru148 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim cont148 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
checkMethodCallIL.Emit(OpCodes.Beq, tru148)
checkMethodCallIL.Emit(OpCodes.Br, fa148)
checkMethodCallIL.MarkLabel(tru148)
checkMethodCallIL.MarkSequencePoint(doc5, 430, 1, 430, 100)
checkMethodCallIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
checkMethodCallIL.Emit(OpCodes.Stloc, 12)
checkMethodCallIL.MarkSequencePoint(doc5, 431, 1, 431, 100)
Dim typ81(-1) As Type
checkMethodCallIL.Emit(OpCodes.Ldloc, 18)
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer")
Typ03 = Typ
checkMethodCallIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(Expr)
ReDim Preserve typ81(UBound(typ81) + 1)
typ81(UBound(typ81)) = Typ
checkMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Optimize", typ81))
Typ = Typ03.GetMethod("Optimize", typ81).ReturnType
checkMethodCallIL.Emit(OpCodes.Stloc, 10)
checkMethodCallIL.MarkSequencePoint(doc5, 432, 1, 432, 100)
Dim typ82(-1) As Type
checkMethodCallIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(MethodCallTok)
Typ03 = Typ
checkMethodCallIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(Expr)
ReDim Preserve typ82(UBound(typ82) + 1)
typ82(UBound(typ82)) = Typ
checkMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddParam", typ82))
Typ = Typ03.GetMethod("AddParam", typ82).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
checkMethodCallIL.Emit(OpCodes.Pop)
End If
checkMethodCallIL.MarkSequencePoint(doc5, 433, 1, 433, 100)
checkMethodCallIL.Emit(OpCodes.Br, label8)
checkMethodCallIL.MarkSequencePoint(doc5, 434, 1, 434, 100)
checkMethodCallIL.Emit(OpCodes.Br, cont148)
checkMethodCallIL.MarkLabel(fa148)
checkMethodCallIL.MarkSequencePoint(doc5, 435, 1, 435, 100)
checkMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
checkMethodCallIL.Emit(OpCodes.Stloc, 12)
checkMethodCallIL.MarkSequencePoint(doc5, 436, 1, 436, 100)
checkMethodCallIL.Emit(OpCodes.Br, label9)
checkMethodCallIL.MarkSequencePoint(doc5, 437, 1, 437, 100)
checkMethodCallIL.Emit(OpCodes.Br, cont148)
checkMethodCallIL.MarkLabel(cont148)
checkMethodCallIL.MarkSequencePoint(doc5, 438, 1, 438, 100)
checkMethodCallIL.Emit(OpCodes.Br, label9)
checkMethodCallIL.MarkSequencePoint(doc5, 439, 1, 439, 100)
checkMethodCallIL.Emit(OpCodes.Br, cont147)
checkMethodCallIL.MarkLabel(fa147)
checkMethodCallIL.Emit(OpCodes.Br, cont147)
checkMethodCallIL.MarkLabel(cont147)
checkMethodCallIL.MarkSequencePoint(doc5, 441, 1, 441, 100)
checkMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodCallIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodCallIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodCallIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodCallIL.Emit(OpCodes.Stloc, 14)
checkMethodCallIL.MarkSequencePoint(doc5, 442, 1, 442, 100)
checkMethodCallIL.Emit(OpCodes.Ldtoken, GetType(LParen))
Dim typ83 As Type() = {GetType(System.RuntimeTypeHandle)}
checkMethodCallIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ83))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ83).ReturnType
checkMethodCallIL.Emit(OpCodes.Stloc, 15)
checkMethodCallIL.MarkSequencePoint(doc5, 443, 1, 443, 100)
Dim typ84(-1) As Type
checkMethodCallIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(System.Type)
Typ03 = Typ
checkMethodCallIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(Token)
checkMethodCallIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ84(UBound(typ84) + 1)
typ84(UBound(typ84)) = Typ
checkMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ84))
Typ = Typ03.GetMethod("IsInstanceOfType", typ84).ReturnType
checkMethodCallIL.Emit(OpCodes.Stloc, 16)
checkMethodCallIL.MarkSequencePoint(doc5, 444, 1, 444, 100)
checkMethodCallIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(System.Boolean)
checkMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa149 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim tru149 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim cont149 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
checkMethodCallIL.Emit(OpCodes.Beq, tru149)
checkMethodCallIL.Emit(OpCodes.Br, fa149)
checkMethodCallIL.MarkLabel(tru149)
checkMethodCallIL.MarkSequencePoint(doc5, 445, 1, 445, 100)
checkMethodCallIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Add)
checkMethodCallIL.Emit(OpCodes.Stloc, 11)
checkMethodCallIL.MarkSequencePoint(doc5, 446, 1, 446, 100)
checkMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
checkMethodCallIL.Emit(OpCodes.Stloc, 12)
checkMethodCallIL.MarkSequencePoint(doc5, 447, 1, 447, 100)
checkMethodCallIL.Emit(OpCodes.Br, label9)
checkMethodCallIL.MarkSequencePoint(doc5, 448, 1, 448, 100)
checkMethodCallIL.Emit(OpCodes.Br, cont149)
checkMethodCallIL.MarkLabel(fa149)
checkMethodCallIL.Emit(OpCodes.Br, cont149)
checkMethodCallIL.MarkLabel(cont149)
checkMethodCallIL.MarkSequencePoint(doc5, 450, 1, 450, 100)
checkMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodCallIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodCallIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodCallIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodCallIL.Emit(OpCodes.Stloc, 14)
checkMethodCallIL.MarkSequencePoint(doc5, 451, 1, 451, 100)
checkMethodCallIL.Emit(OpCodes.Ldtoken, GetType(Comma))
Dim typ85 As Type() = {GetType(System.RuntimeTypeHandle)}
checkMethodCallIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ85))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ85).ReturnType
checkMethodCallIL.Emit(OpCodes.Stloc, 15)
checkMethodCallIL.MarkSequencePoint(doc5, 452, 1, 452, 100)
Dim typ86(-1) As Type
checkMethodCallIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(System.Type)
Typ03 = Typ
checkMethodCallIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(Token)
checkMethodCallIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ86(UBound(typ86) + 1)
typ86(UBound(typ86)) = Typ
checkMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ86))
Typ = Typ03.GetMethod("IsInstanceOfType", typ86).ReturnType
checkMethodCallIL.Emit(OpCodes.Stloc, 16)
checkMethodCallIL.MarkSequencePoint(doc5, 453, 1, 453, 100)
checkMethodCallIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(System.Boolean)
checkMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa150 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim tru150 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim cont150 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
checkMethodCallIL.Emit(OpCodes.Beq, tru150)
checkMethodCallIL.Emit(OpCodes.Br, fa150)
checkMethodCallIL.MarkLabel(tru150)
checkMethodCallIL.MarkSequencePoint(doc5, 454, 1, 454, 100)
checkMethodCallIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
Dim fa151 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim tru151 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim cont151 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
checkMethodCallIL.Emit(OpCodes.Beq, tru151)
checkMethodCallIL.Emit(OpCodes.Br, fa151)
checkMethodCallIL.MarkLabel(tru151)
checkMethodCallIL.MarkSequencePoint(doc5, 455, 1, 455, 100)
checkMethodCallIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
checkMethodCallIL.Emit(OpCodes.Stloc, 12)
checkMethodCallIL.MarkSequencePoint(doc5, 456, 1, 456, 100)
Dim typ87(-1) As Type
checkMethodCallIL.Emit(OpCodes.Ldloc, 18)
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer")
Typ03 = Typ
checkMethodCallIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(Expr)
ReDim Preserve typ87(UBound(typ87) + 1)
typ87(UBound(typ87)) = Typ
checkMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Optimize", typ87))
Typ = Typ03.GetMethod("Optimize", typ87).ReturnType
checkMethodCallIL.Emit(OpCodes.Stloc, 10)
checkMethodCallIL.MarkSequencePoint(doc5, 457, 1, 457, 100)
Dim typ88(-1) As Type
checkMethodCallIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(MethodCallTok)
Typ03 = Typ
checkMethodCallIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(Expr)
ReDim Preserve typ88(UBound(typ88) + 1)
typ88(UBound(typ88)) = Typ
checkMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddParam", typ88))
Typ = Typ03.GetMethod("AddParam", typ88).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
checkMethodCallIL.Emit(OpCodes.Pop)
End If
checkMethodCallIL.MarkSequencePoint(doc5, 458, 1, 458, 100)
checkMethodCallIL.Emit(OpCodes.Newobj, GetType(Expr).GetConstructor(Type.EmptyTypes))
checkMethodCallIL.Emit(OpCodes.Stloc, 10)
checkMethodCallIL.MarkSequencePoint(doc5, 459, 1, 459, 100)
checkMethodCallIL.Emit(OpCodes.Br, label9)
checkMethodCallIL.MarkSequencePoint(doc5, 460, 1, 460, 100)
checkMethodCallIL.Emit(OpCodes.Br, cont151)
checkMethodCallIL.MarkLabel(fa151)
checkMethodCallIL.MarkSequencePoint(doc5, 461, 1, 461, 100)
checkMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
checkMethodCallIL.Emit(OpCodes.Stloc, 12)
checkMethodCallIL.MarkSequencePoint(doc5, 462, 1, 462, 100)
checkMethodCallIL.Emit(OpCodes.Br, label9)
checkMethodCallIL.MarkSequencePoint(doc5, 463, 1, 463, 100)
checkMethodCallIL.Emit(OpCodes.Br, cont151)
checkMethodCallIL.MarkLabel(cont151)
checkMethodCallIL.MarkSequencePoint(doc5, 464, 1, 464, 100)
checkMethodCallIL.Emit(OpCodes.Br, cont150)
checkMethodCallIL.MarkLabel(fa150)
checkMethodCallIL.MarkSequencePoint(doc5, 465, 1, 465, 100)
checkMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
checkMethodCallIL.Emit(OpCodes.Stloc, 12)
checkMethodCallIL.MarkSequencePoint(doc5, 466, 1, 466, 100)
checkMethodCallIL.Emit(OpCodes.Br, label9)
checkMethodCallIL.MarkSequencePoint(doc5, 467, 1, 467, 100)
checkMethodCallIL.Emit(OpCodes.Br, cont150)
checkMethodCallIL.MarkLabel(cont150)
checkMethodCallIL.MarkSequencePoint(doc5, 469, 1, 469, 100)
checkMethodCallIL.MarkLabel(label9)
checkMethodCallIL.MarkSequencePoint(doc5, 471, 1, 471, 100)
checkMethodCallIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(System.Boolean)
checkMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa152 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim tru152 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim cont152 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
checkMethodCallIL.Emit(OpCodes.Beq, tru152)
checkMethodCallIL.Emit(OpCodes.Br, fa152)
checkMethodCallIL.MarkLabel(tru152)
checkMethodCallIL.MarkSequencePoint(doc5, 472, 1, 472, 100)
Dim typ89(-1) As Type
checkMethodCallIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(Expr)
Typ03 = Typ
checkMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodCallIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodCallIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodCallIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ReDim Preserve typ89(UBound(typ89) + 1)
typ89(UBound(typ89)) = Typ
checkMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ89))
Typ = Typ03.GetMethod("AddToken", typ89).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
checkMethodCallIL.Emit(OpCodes.Pop)
End If
checkMethodCallIL.MarkSequencePoint(doc5, 473, 1, 473, 100)
checkMethodCallIL.Emit(OpCodes.Br, cont152)
checkMethodCallIL.MarkLabel(fa152)
checkMethodCallIL.Emit(OpCodes.Br, cont152)
checkMethodCallIL.MarkLabel(cont152)
checkMethodCallIL.MarkSequencePoint(doc5, 475, 1, 475, 100)
checkMethodCallIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(System.Int32)
Dim fa153 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim tru153 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim cont153 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
checkMethodCallIL.Emit(OpCodes.Beq, tru153)
checkMethodCallIL.Emit(OpCodes.Br, fa153)
checkMethodCallIL.MarkLabel(tru153)
checkMethodCallIL.MarkSequencePoint(doc5, 476, 1, 476, 100)
checkMethodCallIL.Emit(OpCodes.Br, label8)
checkMethodCallIL.MarkSequencePoint(doc5, 477, 1, 477, 100)
checkMethodCallIL.Emit(OpCodes.Br, cont153)
checkMethodCallIL.MarkLabel(fa153)
checkMethodCallIL.MarkSequencePoint(doc5, 478, 1, 478, 100)
checkMethodCallIL.Emit(OpCodes.Br, label7)
checkMethodCallIL.MarkSequencePoint(doc5, 479, 1, 479, 100)
checkMethodCallIL.Emit(OpCodes.Br, cont153)
checkMethodCallIL.MarkLabel(cont153)
checkMethodCallIL.MarkSequencePoint(doc5, 481, 1, 481, 100)
checkMethodCallIL.MarkLabel(label8)
checkMethodCallIL.MarkSequencePoint(doc5, 483, 1, 483, 100)
checkMethodCallIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(MethodCallTok)
checkMethodCallIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(MethodNameTok)
checkMethodCallIL.Emit(OpCodes.Stfld, GetType(MethodCallTok).GetField("Name"))
checkMethodCallIL.MarkSequencePoint(doc5, 484, 1, 484, 100)
checkMethodCallIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(MethodCallStmt)
checkMethodCallIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(MethodCallTok)
checkMethodCallIL.Emit(OpCodes.Stfld, GetType(MethodCallStmt).GetField("MethodToken"))
checkMethodCallIL.MarkSequencePoint(doc5, 486, 1, 486, 100)
checkMethodCallIL.Emit(OpCodes.Br, cont146)
checkMethodCallIL.MarkLabel(fa146)
checkMethodCallIL.Emit(OpCodes.Br, cont146)
checkMethodCallIL.MarkLabel(cont146)
checkMethodCallIL.MarkSequencePoint(doc5, 488, 1, 488, 100)
checkMethodCallIL.Emit(OpCodes.Br, cont145)
checkMethodCallIL.MarkLabel(fa145)
checkMethodCallIL.Emit(OpCodes.Br, cont145)
checkMethodCallIL.MarkLabel(cont145)
checkMethodCallIL.MarkSequencePoint(doc5, 489, 1, 489, 100)
checkMethodCallIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(MethodCallStmt)
checkMethodCallIL.MarkSequencePoint(doc5, 490, 1, 490, 100)
checkMethodCallIL.Emit(OpCodes.Ret)
Dim typ90(-1) As Type
ReDim Preserve typ90(UBound(typ90) + 1)
typ90(UBound(typ90)) = GetType(Stmt)
ReDim Preserve typ90(UBound(typ90) + 1)
typ90(UBound(typ90)) = GetType(System.Boolean).MakeByRefType()
Dim checkVarAs As MethodBuilder = StmtOptimizer.DefineMethod("checkVarAs", MethodAttributes.Public, GetType(Stmt), typ90)
Dim checkVarAsIL As ILGenerator = checkVarAs.GetILGenerator()
Dim checkVarAsparam00 As ParameterBuilder = checkVarAs.DefineParameter(0, ParameterAttributes.RetVal, "")
Dim checkVarAsparam01 As ParameterBuilder = checkVarAs.DefineParameter(1, ParameterAttributes.None, "stm")
Dim checkVarAsparam02 As ParameterBuilder = checkVarAs.DefineParameter(2, ParameterAttributes.None, "b")
checkVarAsIL.MarkSequencePoint(doc5, 493, 1, 493, 100)
Dim locbldr209 As LocalBuilder = checkVarAsIL.DeclareLocal(GetType(Token))
locbldr209.SetLocalSymInfo("tok")
checkVarAsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkVarAsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkVarAsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVarAsIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkVarAsIL.Emit(OpCodes.Stloc, 0)
checkVarAsIL.MarkSequencePoint(doc5, 494, 1, 494, 100)
Dim locbldr210 As LocalBuilder = checkVarAsIL.DeclareLocal(GetType(System.Type))
locbldr210.SetLocalSymInfo("typ")
checkVarAsIL.Emit(OpCodes.Ldtoken, GetType(VarTok))
Dim typ91 As Type() = {GetType(System.RuntimeTypeHandle)}
checkVarAsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ91))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ91).ReturnType
checkVarAsIL.Emit(OpCodes.Stloc, 1)
checkVarAsIL.MarkSequencePoint(doc5, 495, 1, 495, 100)
checkVarAsIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
Dim typ92(-1) As Type
checkVarAsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkVarAsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkVarAsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ92(UBound(typ92) + 1)
typ92(UBound(typ92)) = Typ
checkVarAsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ92))
Typ = Typ03.GetMethod("IsInstanceOfType", typ92).ReturnType
checkVarAsIL.Emit(OpCodes.Stobj, Typ04)
checkVarAsIL.MarkSequencePoint(doc5, 496, 1, 496, 100)
Dim locbldr211 As LocalBuilder = checkVarAsIL.DeclareLocal(GetType(VarStmt))
locbldr211.SetLocalSymInfo("vars")
checkVarAsIL.Emit(OpCodes.Newobj, GetType(VarStmt).GetConstructor(Type.EmptyTypes))
checkVarAsIL.Emit(OpCodes.Stloc, 2)
checkVarAsIL.MarkSequencePoint(doc5, 498, 1, 498, 100)
checkVarAsIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
checkVarAsIL.Emit(OpCodes.Ldobj, Typ.GetElementType())
Typ = Typ.GetElementType()
checkVarAsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa154 As System.Reflection.Emit.Label = checkVarAsIL.DefineLabel()
Dim tru154 As System.Reflection.Emit.Label = checkVarAsIL.DefineLabel()
Dim cont154 As System.Reflection.Emit.Label = checkVarAsIL.DefineLabel()
checkVarAsIL.Emit(OpCodes.Beq, tru154)
checkVarAsIL.Emit(OpCodes.Br, fa154)
checkVarAsIL.MarkLabel(tru154)
checkVarAsIL.MarkSequencePoint(doc5, 499, 1, 499, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarStmt)
checkVarAsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkVarAsIL.Emit(OpCodes.Stfld, GetType(VarStmt).GetField("Tokens"))
checkVarAsIL.MarkSequencePoint(doc5, 500, 1, 500, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarStmt)
checkVarAsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
checkVarAsIL.Emit(OpCodes.Stfld, GetType(VarStmt).GetField("Line"))
checkVarAsIL.MarkSequencePoint(doc5, 501, 1, 501, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarStmt)
checkVarAsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkVarAsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkVarAsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVarAsIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkVarAsIL.Emit(OpCodes.Stfld, GetType(VarStmt).GetField("VarName"))
checkVarAsIL.MarkSequencePoint(doc5, 503, 1, 503, 100)
Dim locbldr212 As LocalBuilder = checkVarAsIL.DeclareLocal(GetType(Token))
locbldr212.SetLocalSymInfo("tok2")
checkVarAsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkVarAsIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
checkVarAsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVarAsIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkVarAsIL.Emit(OpCodes.Stloc, 3)
checkVarAsIL.MarkSequencePoint(doc5, 504, 1, 504, 100)
Dim locbldr213 As LocalBuilder = checkVarAsIL.DeclareLocal(GetType(System.Type))
locbldr213.SetLocalSymInfo("typ2")
checkVarAsIL.Emit(OpCodes.Ldtoken, GetType(TypeTok))
Dim typ93 As Type() = {GetType(System.RuntimeTypeHandle)}
checkVarAsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ93))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ93).ReturnType
checkVarAsIL.Emit(OpCodes.Stloc, 4)
checkVarAsIL.MarkSequencePoint(doc5, 505, 1, 505, 100)
Dim locbldr214 As LocalBuilder = checkVarAsIL.DeclareLocal(GetType(System.Boolean))
locbldr214.SetLocalSymInfo("b2")
Dim typ94(-1) As Type
checkVarAsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Type)
Typ03 = Typ
checkVarAsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Token)
checkVarAsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ94(UBound(typ94) + 1)
typ94(UBound(typ94)) = Typ
checkVarAsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ94))
Typ = Typ03.GetMethod("IsInstanceOfType", typ94).ReturnType
checkVarAsIL.Emit(OpCodes.Stloc, 5)
checkVarAsIL.MarkSequencePoint(doc5, 507, 1, 507, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
checkVarAsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa155 As System.Reflection.Emit.Label = checkVarAsIL.DefineLabel()
Dim tru155 As System.Reflection.Emit.Label = checkVarAsIL.DefineLabel()
Dim cont155 As System.Reflection.Emit.Label = checkVarAsIL.DefineLabel()
checkVarAsIL.Emit(OpCodes.Beq, fa155)
checkVarAsIL.Emit(OpCodes.Br, tru155)
checkVarAsIL.MarkLabel(tru155)
checkVarAsIL.MarkSequencePoint(doc5, 508, 1, 508, 100)
Dim locbldr215 As LocalBuilder = checkVarAsIL.DeclareLocal(GetType(Token))
locbldr215.SetLocalSymInfo("t")
checkVarAsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkVarAsIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
checkVarAsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVarAsIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkVarAsIL.Emit(OpCodes.Stloc, 6)
checkVarAsIL.MarkSequencePoint(doc5, 509, 1, 509, 100)
Dim locbldr216 As LocalBuilder = checkVarAsIL.DeclareLocal(GetType(TypeTok))
locbldr216.SetLocalSymInfo("tt")
checkVarAsIL.Emit(OpCodes.Newobj, GetType(TypeTok).GetConstructor(Type.EmptyTypes))
checkVarAsIL.Emit(OpCodes.Stloc, 7)
checkVarAsIL.MarkSequencePoint(doc5, 510, 1, 510, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(TypeTok)
checkVarAsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
checkVarAsIL.Emit(OpCodes.Stfld, GetType(TypeTok).GetField("Line"))
checkVarAsIL.MarkSequencePoint(doc5, 511, 1, 511, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(TypeTok)
checkVarAsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
checkVarAsIL.Emit(OpCodes.Stfld, GetType(TypeTok).GetField("Value"))
checkVarAsIL.MarkSequencePoint(doc5, 512, 1, 512, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarStmt)
checkVarAsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(TypeTok)
checkVarAsIL.Emit(OpCodes.Stfld, GetType(VarStmt).GetField("VarTyp"))
checkVarAsIL.MarkSequencePoint(doc5, 513, 1, 513, 100)
checkVarAsIL.Emit(OpCodes.Br, cont155)
checkVarAsIL.MarkLabel(fa155)
checkVarAsIL.MarkSequencePoint(doc5, 514, 1, 514, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarStmt)
checkVarAsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkVarAsIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
checkVarAsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVarAsIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkVarAsIL.Emit(OpCodes.Stfld, GetType(VarStmt).GetField("VarTyp"))
checkVarAsIL.MarkSequencePoint(doc5, 515, 1, 515, 100)
checkVarAsIL.Emit(OpCodes.Br, cont155)
checkVarAsIL.MarkLabel(cont155)
checkVarAsIL.MarkSequencePoint(doc5, 517, 1, 517, 100)
checkVarAsIL.Emit(OpCodes.Br, cont154)
checkVarAsIL.MarkLabel(fa154)
checkVarAsIL.Emit(OpCodes.Br, cont154)
checkVarAsIL.MarkLabel(cont154)
checkVarAsIL.MarkSequencePoint(doc5, 518, 1, 518, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarStmt)
checkVarAsIL.MarkSequencePoint(doc5, 519, 1, 519, 100)
checkVarAsIL.Emit(OpCodes.Ret)
Dim typ95(-1) As Type
ReDim Preserve typ95(UBound(typ95) + 1)
typ95(UBound(typ95)) = GetType(Stmt)
Dim AssOpt As MethodBuilder = StmtOptimizer.DefineMethod("AssOpt", MethodAttributes.Public, GetType(Stmt), typ95)
Dim AssOptIL As ILGenerator = AssOpt.GetILGenerator()
Dim AssOptparam00 As ParameterBuilder = AssOpt.DefineParameter(0, ParameterAttributes.RetVal, "")
Dim AssOptparam01 As ParameterBuilder = AssOpt.DefineParameter(1, ParameterAttributes.None, "stm")
AssOptIL.MarkSequencePoint(doc5, 523, 1, 523, 100)
Dim locbldr217 As LocalBuilder = AssOptIL.DeclareLocal(GetType(AssignStmt))
locbldr217.SetLocalSymInfo("asss")
AssOptIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
AssOptIL.Emit(OpCodes.Stloc, 0)
AssOptIL.MarkSequencePoint(doc5, 524, 1, 524, 100)
Dim locbldr218 As LocalBuilder = AssOptIL.DeclareLocal(GetType(Expr))
locbldr218.SetLocalSymInfo("le")
AssOptIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(AssignStmt)
AssOptIL.Emit(OpCodes.Ldfld, GetType(AssignStmt).GetField("LExp"))
Typ = GetType(AssignStmt).GetField("LExp").FieldType
AssOptIL.Emit(OpCodes.Stloc, 1)
AssOptIL.MarkSequencePoint(doc5, 525, 1, 525, 100)
Dim locbldr219 As LocalBuilder = AssOptIL.DeclareLocal(GetType(Token))
locbldr219.SetLocalSymInfo("tok")
AssOptIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Expr)
AssOptIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
AssOptIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
AssOptIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AssOptIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AssOptIL.Emit(OpCodes.Stloc, 2)
AssOptIL.MarkSequencePoint(doc5, 526, 1, 526, 100)
Dim locbldr220 As LocalBuilder = AssOptIL.DeclareLocal(GetType(System.Type))
locbldr220.SetLocalSymInfo("typ")
AssOptIL.Emit(OpCodes.Ldtoken, GetType(VarTok))
Dim typ96 As Type() = {GetType(System.RuntimeTypeHandle)}
AssOptIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ96))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ96).ReturnType
AssOptIL.Emit(OpCodes.Stloc, 3)
AssOptIL.MarkSequencePoint(doc5, 527, 1, 527, 100)
Dim locbldr221 As LocalBuilder = AssOptIL.DeclareLocal(GetType(System.Boolean))
locbldr221.SetLocalSymInfo("b")
Dim typ97(-1) As Type
AssOptIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Type)
Typ03 = Typ
AssOptIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Token)
AssOptIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ97(UBound(typ97) + 1)
typ97(UBound(typ97)) = Typ
AssOptIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ97))
Typ = Typ03.GetMethod("IsInstanceOfType", typ97).ReturnType
AssOptIL.Emit(OpCodes.Stloc, 4)
AssOptIL.MarkSequencePoint(doc5, 528, 1, 528, 100)
Dim locbldr222 As LocalBuilder = AssOptIL.DeclareLocal(GetType(VarAsgnStmt))
locbldr222.SetLocalSymInfo("vass")
AssOptIL.Emit(OpCodes.Newobj, GetType(VarAsgnStmt).GetConstructor(Type.EmptyTypes))
AssOptIL.Emit(OpCodes.Stloc, 5)
AssOptIL.MarkSequencePoint(doc5, 529, 1, 529, 100)
AssOptIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
AssOptIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa156 As System.Reflection.Emit.Label = AssOptIL.DefineLabel()
Dim tru156 As System.Reflection.Emit.Label = AssOptIL.DefineLabel()
Dim cont156 As System.Reflection.Emit.Label = AssOptIL.DefineLabel()
AssOptIL.Emit(OpCodes.Beq, tru156)
AssOptIL.Emit(OpCodes.Br, fa156)
AssOptIL.MarkLabel(tru156)
AssOptIL.MarkSequencePoint(doc5, 530, 1, 530, 100)
AssOptIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(VarAsgnStmt)
AssOptIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(AssignStmt)
AssOptIL.Emit(OpCodes.Ldfld, GetType(AssignStmt).GetField("Tokens"))
Typ = GetType(AssignStmt).GetField("Tokens").FieldType
AssOptIL.Emit(OpCodes.Stfld, GetType(VarAsgnStmt).GetField("Tokens"))
AssOptIL.MarkSequencePoint(doc5, 531, 1, 531, 100)
AssOptIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(VarAsgnStmt)
AssOptIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(AssignStmt)
AssOptIL.Emit(OpCodes.Ldfld, GetType(AssignStmt).GetField("Line"))
Typ = GetType(AssignStmt).GetField("Line").FieldType
AssOptIL.Emit(OpCodes.Stfld, GetType(VarAsgnStmt).GetField("Line"))
AssOptIL.MarkSequencePoint(doc5, 532, 1, 532, 100)
AssOptIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(VarAsgnStmt)
AssOptIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Expr)
AssOptIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
AssOptIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AssOptIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AssOptIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AssOptIL.Emit(OpCodes.Stfld, GetType(VarAsgnStmt).GetField("VarName"))
AssOptIL.MarkSequencePoint(doc5, 534, 1, 534, 100)
Dim locbldr223 As LocalBuilder = AssOptIL.DeclareLocal(GetType(Token))
locbldr223.SetLocalSymInfo("tok2")
AssOptIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Expr)
AssOptIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
AssOptIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
AssOptIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AssOptIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AssOptIL.Emit(OpCodes.Stloc, 6)
AssOptIL.MarkSequencePoint(doc5, 535, 1, 535, 100)
Dim locbldr224 As LocalBuilder = AssOptIL.DeclareLocal(GetType(System.Type))
locbldr224.SetLocalSymInfo("typ2")
AssOptIL.Emit(OpCodes.Ldtoken, GetType(TypeTok))
Dim typ98 As Type() = {GetType(System.RuntimeTypeHandle)}
AssOptIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ98))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ98).ReturnType
AssOptIL.Emit(OpCodes.Stloc, 7)
AssOptIL.MarkSequencePoint(doc5, 536, 1, 536, 100)
Dim locbldr225 As LocalBuilder = AssOptIL.DeclareLocal(GetType(System.Boolean))
locbldr225.SetLocalSymInfo("b2")
Dim typ99(-1) As Type
AssOptIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Type)
Typ03 = Typ
AssOptIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
AssOptIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ99(UBound(typ99) + 1)
typ99(UBound(typ99)) = Typ
AssOptIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ99))
Typ = Typ03.GetMethod("IsInstanceOfType", typ99).ReturnType
AssOptIL.Emit(OpCodes.Stloc, 8)
AssOptIL.MarkSequencePoint(doc5, 538, 1, 538, 100)
AssOptIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
AssOptIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa157 As System.Reflection.Emit.Label = AssOptIL.DefineLabel()
Dim tru157 As System.Reflection.Emit.Label = AssOptIL.DefineLabel()
Dim cont157 As System.Reflection.Emit.Label = AssOptIL.DefineLabel()
AssOptIL.Emit(OpCodes.Beq, fa157)
AssOptIL.Emit(OpCodes.Br, tru157)
AssOptIL.MarkLabel(tru157)
AssOptIL.MarkSequencePoint(doc5, 539, 1, 539, 100)
Dim locbldr226 As LocalBuilder = AssOptIL.DeclareLocal(GetType(Token))
locbldr226.SetLocalSymInfo("t")
AssOptIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Expr)
AssOptIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
AssOptIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
AssOptIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AssOptIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AssOptIL.Emit(OpCodes.Stloc, 9)
AssOptIL.MarkSequencePoint(doc5, 540, 1, 540, 100)
Dim locbldr227 As LocalBuilder = AssOptIL.DeclareLocal(GetType(TypeTok))
locbldr227.SetLocalSymInfo("tt")
AssOptIL.Emit(OpCodes.Newobj, GetType(TypeTok).GetConstructor(Type.EmptyTypes))
AssOptIL.Emit(OpCodes.Stloc, 10)
AssOptIL.MarkSequencePoint(doc5, 541, 1, 541, 100)
AssOptIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
AssOptIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
AssOptIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
AssOptIL.Emit(OpCodes.Stfld, GetType(TypeTok).GetField("Line"))
AssOptIL.MarkSequencePoint(doc5, 542, 1, 542, 100)
AssOptIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
AssOptIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
AssOptIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
AssOptIL.Emit(OpCodes.Stfld, GetType(TypeTok).GetField("Value"))
AssOptIL.MarkSequencePoint(doc5, 543, 1, 543, 100)
AssOptIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(VarAsgnStmt)
AssOptIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
AssOptIL.Emit(OpCodes.Stfld, GetType(VarAsgnStmt).GetField("VarTyp"))
AssOptIL.MarkSequencePoint(doc5, 544, 1, 544, 100)
AssOptIL.Emit(OpCodes.Br, cont157)
AssOptIL.MarkLabel(fa157)
AssOptIL.MarkSequencePoint(doc5, 545, 1, 545, 100)
AssOptIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(VarAsgnStmt)
AssOptIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Expr)
AssOptIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
AssOptIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
AssOptIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AssOptIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AssOptIL.Emit(OpCodes.Stfld, GetType(VarAsgnStmt).GetField("VarTyp"))
AssOptIL.MarkSequencePoint(doc5, 546, 1, 546, 100)
AssOptIL.Emit(OpCodes.Br, cont157)
AssOptIL.MarkLabel(cont157)
AssOptIL.MarkSequencePoint(doc5, 548, 1, 548, 100)
AssOptIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(VarAsgnStmt)
AssOptIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(AssignStmt)
AssOptIL.Emit(OpCodes.Ldfld, GetType(AssignStmt).GetField("RExp"))
Typ = GetType(AssignStmt).GetField("RExp").FieldType
AssOptIL.Emit(OpCodes.Stfld, GetType(VarAsgnStmt).GetField("RExpr"))
AssOptIL.MarkSequencePoint(doc5, 549, 1, 549, 100)
Dim locbldr228 As LocalBuilder = AssOptIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer"))
locbldr228.SetLocalSymInfo("eop")
AssOptIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer").GetConstructor(Type.EmptyTypes))
AssOptIL.Emit(OpCodes.Stloc, 11)
AssOptIL.MarkSequencePoint(doc5, 550, 1, 550, 100)
AssOptIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(VarAsgnStmt)
Dim typ100(-1) As Type
AssOptIL.Emit(OpCodes.Ldloc, 11)
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer")
Typ03 = Typ
AssOptIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(VarAsgnStmt)
AssOptIL.Emit(OpCodes.Ldfld, GetType(VarAsgnStmt).GetField("RExpr"))
Typ = GetType(VarAsgnStmt).GetField("RExpr").FieldType
ReDim Preserve typ100(UBound(typ100) + 1)
typ100(UBound(typ100)) = Typ
AssOptIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Optimize", typ100))
Typ = Typ03.GetMethod("Optimize", typ100).ReturnType
AssOptIL.Emit(OpCodes.Stfld, GetType(VarAsgnStmt).GetField("RExpr"))
AssOptIL.MarkSequencePoint(doc5, 552, 1, 552, 100)
AssOptIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(VarAsgnStmt)
AssOptIL.MarkSequencePoint(doc5, 553, 1, 553, 100)
AssOptIL.Emit(OpCodes.Br, cont156)
AssOptIL.MarkLabel(fa156)
AssOptIL.MarkSequencePoint(doc5, 554, 1, 554, 100)
AssOptIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
AssOptIL.MarkSequencePoint(doc5, 555, 1, 555, 100)
AssOptIL.Emit(OpCodes.Br, cont156)
AssOptIL.MarkLabel(cont156)
AssOptIL.MarkSequencePoint(doc5, 557, 1, 557, 100)
AssOptIL.Emit(OpCodes.Ret)
Dim typ101(-1) As Type
ReDim Preserve typ101(UBound(typ101) + 1)
typ101(UBound(typ101)) = GetType(Stmt)
ReDim Preserve typ101(UBound(typ101) + 1)
typ101(UBound(typ101)) = GetType(System.Boolean).MakeByRefType()
Dim checkAssign As MethodBuilder = StmtOptimizer.DefineMethod("checkAssign", MethodAttributes.Public, GetType(Stmt), typ101)
Dim checkAssignIL As ILGenerator = checkAssign.GetILGenerator()
Dim checkAssignparam00 As ParameterBuilder = checkAssign.DefineParameter(0, ParameterAttributes.RetVal, "")
Dim checkAssignparam01 As ParameterBuilder = checkAssign.DefineParameter(1, ParameterAttributes.None, "stm")
Dim checkAssignparam02 As ParameterBuilder = checkAssign.DefineParameter(2, ParameterAttributes.None, "b")
checkAssignIL.MarkSequencePoint(doc5, 560, 1, 560, 100)
Dim locbldr229 As LocalBuilder = checkAssignIL.DeclareLocal(GetType(Token))
locbldr229.SetLocalSymInfo("tok")
checkAssignIL.Emit(OpCodes.Ldnull)
checkAssignIL.Emit(OpCodes.Stloc, 0)
checkAssignIL.MarkSequencePoint(doc5, 561, 1, 561, 100)
Dim locbldr230 As LocalBuilder = checkAssignIL.DeclareLocal(GetType(System.Type))
locbldr230.SetLocalSymInfo("typ")
checkAssignIL.Emit(OpCodes.Ldtoken, GetType(AssignOp))
Dim typ102 As Type() = {GetType(System.RuntimeTypeHandle)}
checkAssignIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ102))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ102).ReturnType
checkAssignIL.Emit(OpCodes.Stloc, 1)
checkAssignIL.MarkSequencePoint(doc5, 562, 1, 562, 100)
Dim locbldr231 As LocalBuilder = checkAssignIL.DeclareLocal(GetType(AssignStmt))
locbldr231.SetLocalSymInfo("asss")
checkAssignIL.Emit(OpCodes.Newobj, GetType(AssignStmt).GetConstructor(Type.EmptyTypes))
checkAssignIL.Emit(OpCodes.Stloc, 2)
checkAssignIL.MarkSequencePoint(doc5, 563, 1, 563, 100)
Dim locbldr232 As LocalBuilder = checkAssignIL.DeclareLocal(GetType(System.Boolean))
locbldr232.SetLocalSymInfo("c")
checkAssignIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
checkAssignIL.Emit(OpCodes.Stloc, 3)
checkAssignIL.MarkSequencePoint(doc5, 564, 1, 564, 100)
Dim locbldr233 As LocalBuilder = checkAssignIL.DeclareLocal(GetType(Expr))
locbldr233.SetLocalSymInfo("re")
checkAssignIL.Emit(OpCodes.Newobj, GetType(Expr).GetConstructor(Type.EmptyTypes))
checkAssignIL.Emit(OpCodes.Stloc, 4)
checkAssignIL.MarkSequencePoint(doc5, 565, 1, 565, 100)
Dim locbldr234 As LocalBuilder = checkAssignIL.DeclareLocal(GetType(Expr))
locbldr234.SetLocalSymInfo("le")
checkAssignIL.Emit(OpCodes.Newobj, GetType(Expr).GetConstructor(Type.EmptyTypes))
checkAssignIL.Emit(OpCodes.Stloc, 5)
checkAssignIL.MarkSequencePoint(doc5, 566, 1, 566, 100)
Dim locbldr235 As LocalBuilder = checkAssignIL.DeclareLocal(GetType(System.Int32))
locbldr235.SetLocalSymInfo("i")
checkAssignIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Stloc, 6)
checkAssignIL.MarkSequencePoint(doc5, 567, 1, 567, 100)
Dim locbldr236 As LocalBuilder = checkAssignIL.DeclareLocal(GetType(System.Int32))
locbldr236.SetLocalSymInfo("len")
checkAssignIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkAssignIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkAssignIL.Emit(OpCodes.Ldlen)
checkAssignIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Sub)
checkAssignIL.Emit(OpCodes.Stloc, 7)
checkAssignIL.MarkSequencePoint(doc5, 568, 1, 568, 100)
Dim locbldr237 As LocalBuilder = checkAssignIL.DeclareLocal(GetType(System.Int32))
locbldr237.SetLocalSymInfo("assind")
checkAssignIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Stloc, 8)
checkAssignIL.MarkSequencePoint(doc5, 570, 1, 570, 100)
Dim label10 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
checkAssignIL.MarkSequencePoint(doc5, 571, 1, 571, 100)
Dim label11 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
checkAssignIL.MarkSequencePoint(doc5, 573, 1, 573, 100)
checkAssignIL.MarkLabel(label10)
checkAssignIL.MarkSequencePoint(doc5, 575, 1, 575, 100)
checkAssignIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Add)
checkAssignIL.Emit(OpCodes.Stloc, 6)
checkAssignIL.MarkSequencePoint(doc5, 577, 1, 577, 100)
checkAssignIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkAssignIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkAssignIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkAssignIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkAssignIL.Emit(OpCodes.Stloc, 0)
checkAssignIL.MarkSequencePoint(doc5, 578, 1, 578, 100)
Dim typ103(-1) As Type
checkAssignIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkAssignIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
ReDim Preserve typ103(UBound(typ103) + 1)
typ103(UBound(typ103)) = Typ
checkAssignIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ103))
Typ = Typ03.GetMethod("IsInstanceOfType", typ103).ReturnType
checkAssignIL.Emit(OpCodes.Stloc, 3)
checkAssignIL.MarkSequencePoint(doc5, 580, 1, 580, 100)
checkAssignIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
checkAssignIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa158 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
Dim tru158 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
Dim cont158 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
checkAssignIL.Emit(OpCodes.Beq, tru158)
checkAssignIL.Emit(OpCodes.Br, fa158)
checkAssignIL.MarkLabel(tru158)
checkAssignIL.MarkSequencePoint(doc5, 581, 1, 581, 100)
checkAssignIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Stloc, 8)
checkAssignIL.MarkSequencePoint(doc5, 582, 1, 582, 100)
checkAssignIL.Emit(OpCodes.Br, label11)
checkAssignIL.MarkSequencePoint(doc5, 583, 1, 583, 100)
checkAssignIL.Emit(OpCodes.Br, cont158)
checkAssignIL.MarkLabel(fa158)
checkAssignIL.Emit(OpCodes.Br, cont158)
checkAssignIL.MarkLabel(cont158)
checkAssignIL.MarkSequencePoint(doc5, 585, 1, 585, 100)
checkAssignIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
Dim fa159 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
Dim tru159 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
Dim cont159 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
checkAssignIL.Emit(OpCodes.Beq, tru159)
checkAssignIL.Emit(OpCodes.Br, fa159)
checkAssignIL.MarkLabel(tru159)
checkAssignIL.MarkSequencePoint(doc5, 586, 1, 586, 100)
checkAssignIL.Emit(OpCodes.Br, label11)
checkAssignIL.MarkSequencePoint(doc5, 587, 1, 587, 100)
checkAssignIL.Emit(OpCodes.Br, cont159)
checkAssignIL.MarkLabel(fa159)
checkAssignIL.MarkSequencePoint(doc5, 588, 1, 588, 100)
checkAssignIL.Emit(OpCodes.Br, label10)
checkAssignIL.MarkSequencePoint(doc5, 589, 1, 589, 100)
checkAssignIL.Emit(OpCodes.Br, cont159)
checkAssignIL.MarkLabel(cont159)
checkAssignIL.MarkSequencePoint(doc5, 591, 1, 591, 100)
checkAssignIL.MarkLabel(label11)
checkAssignIL.MarkSequencePoint(doc5, 593, 1, 593, 100)
checkAssignIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa160 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
Dim tru160 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
Dim cont160 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
checkAssignIL.Emit(OpCodes.Beq, fa160)
checkAssignIL.Emit(OpCodes.Br, tru160)
checkAssignIL.MarkLabel(tru160)
checkAssignIL.MarkSequencePoint(doc5, 595, 1, 595, 100)
checkAssignIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Stloc, 6)
checkAssignIL.MarkSequencePoint(doc5, 596, 1, 596, 100)
checkAssignIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Sub)
checkAssignIL.Emit(OpCodes.Stloc, 7)
checkAssignIL.MarkSequencePoint(doc5, 598, 1, 598, 100)
Dim label12 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
checkAssignIL.MarkSequencePoint(doc5, 599, 1, 599, 100)
Dim label13 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
checkAssignIL.MarkSequencePoint(doc5, 601, 1, 601, 100)
checkAssignIL.MarkLabel(label12)
checkAssignIL.MarkSequencePoint(doc5, 603, 1, 603, 100)
checkAssignIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Add)
checkAssignIL.Emit(OpCodes.Stloc, 6)
checkAssignIL.MarkSequencePoint(doc5, 605, 1, 605, 100)
Dim typ104(-1) As Type
checkAssignIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Expr)
Typ03 = Typ
checkAssignIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkAssignIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkAssignIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkAssignIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ReDim Preserve typ104(UBound(typ104) + 1)
typ104(UBound(typ104)) = Typ
checkAssignIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ104))
Typ = Typ03.GetMethod("AddToken", typ104).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
checkAssignIL.Emit(OpCodes.Pop)
End If
checkAssignIL.MarkSequencePoint(doc5, 607, 1, 607, 100)
checkAssignIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
Dim fa161 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
Dim tru161 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
Dim cont161 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
checkAssignIL.Emit(OpCodes.Beq, tru161)
checkAssignIL.Emit(OpCodes.Br, fa161)
checkAssignIL.MarkLabel(tru161)
checkAssignIL.MarkSequencePoint(doc5, 608, 1, 608, 100)
checkAssignIL.Emit(OpCodes.Br, label13)
checkAssignIL.MarkSequencePoint(doc5, 609, 1, 609, 100)
checkAssignIL.Emit(OpCodes.Br, cont161)
checkAssignIL.MarkLabel(fa161)
checkAssignIL.MarkSequencePoint(doc5, 610, 1, 610, 100)
checkAssignIL.Emit(OpCodes.Br, label12)
checkAssignIL.MarkSequencePoint(doc5, 611, 1, 611, 100)
checkAssignIL.Emit(OpCodes.Br, cont161)
checkAssignIL.MarkLabel(cont161)
checkAssignIL.MarkSequencePoint(doc5, 613, 1, 613, 100)
checkAssignIL.MarkLabel(label13)
checkAssignIL.MarkSequencePoint(doc5, 616, 1, 616, 100)
checkAssignIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Stloc, 6)
checkAssignIL.MarkSequencePoint(doc5, 617, 1, 617, 100)
checkAssignIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkAssignIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkAssignIL.Emit(OpCodes.Ldlen)
checkAssignIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Sub)
checkAssignIL.Emit(OpCodes.Stloc, 7)
checkAssignIL.MarkSequencePoint(doc5, 619, 1, 619, 100)
Dim label14 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
checkAssignIL.MarkSequencePoint(doc5, 620, 1, 620, 100)
Dim label15 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
checkAssignIL.MarkSequencePoint(doc5, 622, 1, 622, 100)
checkAssignIL.MarkLabel(label14)
checkAssignIL.MarkSequencePoint(doc5, 624, 1, 624, 100)
checkAssignIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Add)
checkAssignIL.Emit(OpCodes.Stloc, 6)
checkAssignIL.MarkSequencePoint(doc5, 626, 1, 626, 100)
Dim typ105(-1) As Type
checkAssignIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(Expr)
Typ03 = Typ
checkAssignIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkAssignIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkAssignIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkAssignIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ReDim Preserve typ105(UBound(typ105) + 1)
typ105(UBound(typ105)) = Typ
checkAssignIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ105))
Typ = Typ03.GetMethod("AddToken", typ105).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
checkAssignIL.Emit(OpCodes.Pop)
End If
checkAssignIL.MarkSequencePoint(doc5, 628, 1, 628, 100)
checkAssignIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
Dim fa162 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
Dim tru162 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
Dim cont162 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
checkAssignIL.Emit(OpCodes.Beq, tru162)
checkAssignIL.Emit(OpCodes.Br, fa162)
checkAssignIL.MarkLabel(tru162)
checkAssignIL.MarkSequencePoint(doc5, 629, 1, 629, 100)
checkAssignIL.Emit(OpCodes.Br, label15)
checkAssignIL.MarkSequencePoint(doc5, 630, 1, 630, 100)
checkAssignIL.Emit(OpCodes.Br, cont162)
checkAssignIL.MarkLabel(fa162)
checkAssignIL.MarkSequencePoint(doc5, 631, 1, 631, 100)
checkAssignIL.Emit(OpCodes.Br, label14)
checkAssignIL.MarkSequencePoint(doc5, 632, 1, 632, 100)
checkAssignIL.Emit(OpCodes.Br, cont162)
checkAssignIL.MarkLabel(cont162)
checkAssignIL.MarkSequencePoint(doc5, 634, 1, 634, 100)
checkAssignIL.MarkLabel(label15)
checkAssignIL.MarkSequencePoint(doc5, 636, 1, 636, 100)
Dim locbldr238 As LocalBuilder = checkAssignIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer"))
locbldr238.SetLocalSymInfo("eop")
checkAssignIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer").GetConstructor(Type.EmptyTypes))
checkAssignIL.Emit(OpCodes.Stloc, 9)
checkAssignIL.MarkSequencePoint(doc5, 637, 1, 637, 100)
Dim typ106(-1) As Type
checkAssignIL.Emit(OpCodes.Ldloc, 9)
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer")
Typ03 = Typ
checkAssignIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(Expr)
ReDim Preserve typ106(UBound(typ106) + 1)
typ106(UBound(typ106)) = Typ
checkAssignIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Optimize", typ106))
Typ = Typ03.GetMethod("Optimize", typ106).ReturnType
checkAssignIL.Emit(OpCodes.Stloc, 4)
checkAssignIL.MarkSequencePoint(doc5, 639, 1, 639, 100)
checkAssignIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(AssignStmt)
checkAssignIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkAssignIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
checkAssignIL.Emit(OpCodes.Stfld, GetType(AssignStmt).GetField("Line"))
checkAssignIL.MarkSequencePoint(doc5, 640, 1, 640, 100)
checkAssignIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(AssignStmt)
checkAssignIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkAssignIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkAssignIL.Emit(OpCodes.Stfld, GetType(AssignStmt).GetField("Tokens"))
checkAssignIL.MarkSequencePoint(doc5, 641, 1, 641, 100)
checkAssignIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(AssignStmt)
checkAssignIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Expr)
checkAssignIL.Emit(OpCodes.Stfld, GetType(AssignStmt).GetField("LExp"))
checkAssignIL.MarkSequencePoint(doc5, 642, 1, 642, 100)
checkAssignIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(AssignStmt)
checkAssignIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(Expr)
checkAssignIL.Emit(OpCodes.Stfld, GetType(AssignStmt).GetField("RExp"))
checkAssignIL.MarkSequencePoint(doc5, 644, 1, 644, 100)
checkAssignIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
checkAssignIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
checkAssignIL.Emit(OpCodes.Stobj, Typ04)
checkAssignIL.MarkSequencePoint(doc5, 646, 1, 646, 100)
checkAssignIL.Emit(OpCodes.Ldarg_0)
Dim typ107(-1) As Type
checkAssignIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(AssignStmt)
ReDim Preserve typ107(UBound(typ107) + 1)
typ107(UBound(typ107)) = Typ
checkAssignIL.Emit(OpCodes.Callvirt, AssOpt)
Typ = AssOpt.ReturnType
checkAssignIL.Emit(OpCodes.Stloc, 2)
checkAssignIL.MarkSequencePoint(doc5, 648, 1, 648, 100)
checkAssignIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(AssignStmt)
checkAssignIL.MarkSequencePoint(doc5, 650, 1, 650, 100)
checkAssignIL.Emit(OpCodes.Br, cont160)
checkAssignIL.MarkLabel(fa160)
checkAssignIL.MarkSequencePoint(doc5, 651, 1, 651, 100)
checkAssignIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
checkAssignIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
checkAssignIL.Emit(OpCodes.Stobj, Typ04)
checkAssignIL.MarkSequencePoint(doc5, 652, 1, 652, 100)
checkAssignIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkAssignIL.MarkSequencePoint(doc5, 654, 1, 654, 100)
checkAssignIL.Emit(OpCodes.Br, cont160)
checkAssignIL.MarkLabel(cont160)
checkAssignIL.MarkSequencePoint(doc5, 656, 1, 656, 100)
checkAssignIL.Emit(OpCodes.Ret)
Dim typ108(-1) As Type
ReDim Preserve typ108(UBound(typ108) + 1)
typ108(UBound(typ108)) = GetType(Stmt)
Dim Optimize As MethodBuilder = StmtOptimizer.DefineMethod("Optimize", MethodAttributes.Public, GetType(Stmt), typ108)
Dim OptimizeIL As ILGenerator = Optimize.GetILGenerator()
Dim Optimizeparam00 As ParameterBuilder = Optimize.DefineParameter(0, ParameterAttributes.RetVal, "")
Dim Optimizeparam01 As ParameterBuilder = Optimize.DefineParameter(1, ParameterAttributes.None, "stm")
OptimizeIL.MarkSequencePoint(doc5, 660, 1, 660, 100)
Dim typ109(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
ReDim Preserve typ109(UBound(typ109) + 1)
typ109(UBound(typ109)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ109))
Typ = GetType(Console).GetMethod("WriteLine", typ109).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
OptimizeIL.Emit(OpCodes.Pop)
End If
OptimizeIL.MarkSequencePoint(doc5, 662, 1, 662, 100)
Dim locbldr239 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.Int32))
locbldr239.SetLocalSymInfo("i")
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc5, 663, 1, 663, 100)
Dim locbldr240 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.Int32))
locbldr240.SetLocalSymInfo("len")
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
OptimizeIL.Emit(OpCodes.Ldlen)
OptimizeIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc5, 664, 1, 664, 100)
Dim locbldr241 As LocalBuilder = OptimizeIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.Parser.TokenOptimizer"))
locbldr241.SetLocalSymInfo("to")
OptimizeIL.Emit(OpCodes.Ldnull)
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc5, 665, 1, 665, 100)
Dim locbldr242 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(Stmt))
locbldr242.SetLocalSymInfo("tmpstm")
OptimizeIL.Emit(OpCodes.Ldnull)
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc5, 666, 1, 666, 100)
Dim locbldr243 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.Boolean))
locbldr243.SetLocalSymInfo("compb")
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc5, 667, 1, 667, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Sub)
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc5, 669, 1, 669, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IfFlag"))
OptimizeIL.MarkSequencePoint(doc5, 670, 1, 670, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("CmtFlag"))
OptimizeIL.MarkSequencePoint(doc5, 671, 1, 671, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("NoOptFlag"))
OptimizeIL.MarkSequencePoint(doc5, 673, 1, 673, 100)
Dim label16 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.MarkSequencePoint(doc5, 674, 1, 674, 100)
Dim label17 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.MarkSequencePoint(doc5, 675, 1, 675, 100)
Dim label18 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.MarkSequencePoint(doc5, 677, 1, 677, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa163 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru163 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont163 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Blt, tru163)
OptimizeIL.Emit(OpCodes.Br, fa163)
OptimizeIL.MarkLabel(tru163)
OptimizeIL.MarkSequencePoint(doc5, 678, 1, 678, 100)
OptimizeIL.Emit(OpCodes.Br, label17)
OptimizeIL.MarkSequencePoint(doc5, 679, 1, 679, 100)
OptimizeIL.Emit(OpCodes.Br, cont163)
OptimizeIL.MarkLabel(fa163)
OptimizeIL.Emit(OpCodes.Br, cont163)
OptimizeIL.MarkLabel(cont163)
OptimizeIL.MarkSequencePoint(doc5, 681, 1, 681, 100)
OptimizeIL.MarkLabel(label16)
OptimizeIL.MarkSequencePoint(doc5, 683, 1, 683, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Add)
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc5, 685, 1, 685, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("CmtFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("CmtFlag").FieldType
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa164 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru164 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont164 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru164)
OptimizeIL.Emit(OpCodes.Br, fa164)
OptimizeIL.MarkLabel(tru164)
OptimizeIL.MarkSequencePoint(doc5, 686, 1, 686, 100)
OptimizeIL.Emit(OpCodes.Br, label17)
OptimizeIL.MarkSequencePoint(doc5, 687, 1, 687, 100)
OptimizeIL.Emit(OpCodes.Br, cont164)
OptimizeIL.MarkLabel(fa164)
OptimizeIL.Emit(OpCodes.Br, cont164)
OptimizeIL.MarkLabel(cont164)
OptimizeIL.MarkSequencePoint(doc5, 690, 1, 690, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("NoOptFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("NoOptFlag").FieldType
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa165 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru165 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont165 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru165)
OptimizeIL.Emit(OpCodes.Br, fa165)
OptimizeIL.MarkLabel(tru165)
OptimizeIL.MarkSequencePoint(doc5, 691, 1, 691, 100)
OptimizeIL.Emit(OpCodes.Br, label17)
OptimizeIL.MarkSequencePoint(doc5, 692, 1, 692, 100)
OptimizeIL.Emit(OpCodes.Br, cont165)
OptimizeIL.MarkLabel(fa165)
OptimizeIL.Emit(OpCodes.Br, cont165)
OptimizeIL.MarkLabel(cont165)
OptimizeIL.MarkSequencePoint(doc5, 694, 1, 694, 100)
OptimizeIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.Parser.TokenOptimizer").GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc5, 695, 1, 695, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
Typ02 = Typ
Dim typ110(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.TokenOptimizer")
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ReDim Preserve typ110(UBound(typ110) + 1)
typ110(UBound(typ110)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Optimize", typ110))
Typ = Typ03.GetMethod("Optimize", typ110).ReturnType
Typ = Typ02
OptimizeIL.Emit(OpCodes.Stelem, Typ.GetElementType())
OptimizeIL.MarkSequencePoint(doc5, 697, 1, 697, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
Dim fa166 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru166 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont166 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru166)
OptimizeIL.Emit(OpCodes.Br, fa166)
OptimizeIL.MarkLabel(tru166)
OptimizeIL.MarkSequencePoint(doc5, 698, 1, 698, 100)
OptimizeIL.Emit(OpCodes.Br, label17)
OptimizeIL.MarkSequencePoint(doc5, 699, 1, 699, 100)
OptimizeIL.Emit(OpCodes.Br, cont166)
OptimizeIL.MarkLabel(fa166)
OptimizeIL.MarkSequencePoint(doc5, 700, 1, 700, 100)
OptimizeIL.Emit(OpCodes.Br, label16)
OptimizeIL.MarkSequencePoint(doc5, 701, 1, 701, 100)
OptimizeIL.Emit(OpCodes.Br, cont166)
OptimizeIL.MarkLabel(cont166)
OptimizeIL.MarkSequencePoint(doc5, 703, 1, 703, 100)
OptimizeIL.MarkLabel(label17)
OptimizeIL.MarkSequencePoint(doc5, 705, 1, 705, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
OptimizeIL.Emit(OpCodes.Ldlen)
OptimizeIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa167 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru167 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont167 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru167)
OptimizeIL.Emit(OpCodes.Br, fa167)
OptimizeIL.MarkLabel(tru167)
OptimizeIL.MarkSequencePoint(doc5, 706, 1, 706, 100)
OptimizeIL.Emit(OpCodes.Br, label18)
OptimizeIL.MarkSequencePoint(doc5, 707, 1, 707, 100)
OptimizeIL.Emit(OpCodes.Br, cont167)
OptimizeIL.MarkLabel(fa167)
OptimizeIL.Emit(OpCodes.Br, cont167)
OptimizeIL.MarkLabel(cont167)
OptimizeIL.MarkSequencePoint(doc5, 709, 1, 709, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ111(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReDim Preserve typ111(UBound(typ111) + 1)
typ111(UBound(typ111)) = Typ
OptimizeIL.Emit(OpCodes.Ldloca, 4)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ111(UBound(typ111) + 1)
typ111(UBound(typ111)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, checkCmt)
Typ = checkCmt.ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc5, 711, 1, 711, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa168 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru168 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont168 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru168)
OptimizeIL.Emit(OpCodes.Br, fa168)
OptimizeIL.MarkLabel(tru168)
OptimizeIL.MarkSequencePoint(doc5, 712, 1, 712, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc5, 713, 1, 713, 100)
OptimizeIL.Emit(OpCodes.Br, label18)
OptimizeIL.MarkSequencePoint(doc5, 714, 1, 714, 100)
OptimizeIL.Emit(OpCodes.Br, cont168)
OptimizeIL.MarkLabel(fa168)
OptimizeIL.Emit(OpCodes.Br, cont168)
OptimizeIL.MarkLabel(cont168)
OptimizeIL.MarkSequencePoint(doc5, 716, 1, 716, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ112(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReDim Preserve typ112(UBound(typ112) + 1)
typ112(UBound(typ112)) = Typ
OptimizeIL.Emit(OpCodes.Ldloca, 4)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ112(UBound(typ112) + 1)
typ112(UBound(typ112)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, checkImport)
Typ = checkImport.ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc5, 718, 1, 718, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa169 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru169 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont169 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru169)
OptimizeIL.Emit(OpCodes.Br, fa169)
OptimizeIL.MarkLabel(tru169)
OptimizeIL.MarkSequencePoint(doc5, 719, 1, 719, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc5, 720, 1, 720, 100)
OptimizeIL.Emit(OpCodes.Br, label18)
OptimizeIL.MarkSequencePoint(doc5, 721, 1, 721, 100)
OptimizeIL.Emit(OpCodes.Br, cont169)
OptimizeIL.MarkLabel(fa169)
OptimizeIL.Emit(OpCodes.Br, cont169)
OptimizeIL.MarkLabel(cont169)
OptimizeIL.MarkSequencePoint(doc5, 723, 1, 723, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ113(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReDim Preserve typ113(UBound(typ113) + 1)
typ113(UBound(typ113)) = Typ
OptimizeIL.Emit(OpCodes.Ldloca, 4)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ113(UBound(typ113) + 1)
typ113(UBound(typ113)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, checkLocimport)
Typ = checkLocimport.ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc5, 725, 1, 725, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa170 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru170 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont170 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru170)
OptimizeIL.Emit(OpCodes.Br, fa170)
OptimizeIL.MarkLabel(tru170)
OptimizeIL.MarkSequencePoint(doc5, 726, 1, 726, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc5, 727, 1, 727, 100)
OptimizeIL.Emit(OpCodes.Br, label18)
OptimizeIL.MarkSequencePoint(doc5, 728, 1, 728, 100)
OptimizeIL.Emit(OpCodes.Br, cont170)
OptimizeIL.MarkLabel(fa170)
OptimizeIL.Emit(OpCodes.Br, cont170)
OptimizeIL.MarkLabel(cont170)
OptimizeIL.MarkSequencePoint(doc5, 730, 1, 730, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ114(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReDim Preserve typ114(UBound(typ114) + 1)
typ114(UBound(typ114)) = Typ
OptimizeIL.Emit(OpCodes.Ldloca, 4)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ114(UBound(typ114) + 1)
typ114(UBound(typ114)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, checkAssembly)
Typ = checkAssembly.ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc5, 732, 1, 732, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa171 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru171 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont171 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru171)
OptimizeIL.Emit(OpCodes.Br, fa171)
OptimizeIL.MarkLabel(tru171)
OptimizeIL.MarkSequencePoint(doc5, 733, 1, 733, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc5, 734, 1, 734, 100)
OptimizeIL.Emit(OpCodes.Br, label18)
OptimizeIL.MarkSequencePoint(doc5, 735, 1, 735, 100)
OptimizeIL.Emit(OpCodes.Br, cont171)
OptimizeIL.MarkLabel(fa171)
OptimizeIL.Emit(OpCodes.Br, cont171)
OptimizeIL.MarkLabel(cont171)
OptimizeIL.MarkSequencePoint(doc5, 737, 1, 737, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ115(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReDim Preserve typ115(UBound(typ115) + 1)
typ115(UBound(typ115)) = Typ
OptimizeIL.Emit(OpCodes.Ldloca, 4)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ115(UBound(typ115) + 1)
typ115(UBound(typ115)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, checkVer)
Typ = checkVer.ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc5, 739, 1, 739, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa172 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru172 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont172 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru172)
OptimizeIL.Emit(OpCodes.Br, fa172)
OptimizeIL.MarkLabel(tru172)
OptimizeIL.MarkSequencePoint(doc5, 740, 1, 740, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc5, 741, 1, 741, 100)
OptimizeIL.Emit(OpCodes.Br, label18)
OptimizeIL.MarkSequencePoint(doc5, 742, 1, 742, 100)
OptimizeIL.Emit(OpCodes.Br, cont172)
OptimizeIL.MarkLabel(fa172)
OptimizeIL.Emit(OpCodes.Br, cont172)
OptimizeIL.MarkLabel(cont172)
OptimizeIL.MarkSequencePoint(doc5, 744, 1, 744, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ116(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReDim Preserve typ116(UBound(typ116) + 1)
typ116(UBound(typ116)) = Typ
OptimizeIL.Emit(OpCodes.Ldloca, 4)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ116(UBound(typ116) + 1)
typ116(UBound(typ116)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, checkClass)
Typ = checkClass.ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc5, 746, 1, 746, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa173 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru173 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont173 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru173)
OptimizeIL.Emit(OpCodes.Br, fa173)
OptimizeIL.MarkLabel(tru173)
OptimizeIL.MarkSequencePoint(doc5, 747, 1, 747, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc5, 748, 1, 748, 100)
OptimizeIL.Emit(OpCodes.Br, label18)
OptimizeIL.MarkSequencePoint(doc5, 749, 1, 749, 100)
OptimizeIL.Emit(OpCodes.Br, cont173)
OptimizeIL.MarkLabel(fa173)
OptimizeIL.Emit(OpCodes.Br, cont173)
OptimizeIL.MarkLabel(cont173)
OptimizeIL.MarkSequencePoint(doc5, 751, 1, 751, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ117(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReDim Preserve typ117(UBound(typ117) + 1)
typ117(UBound(typ117)) = Typ
OptimizeIL.Emit(OpCodes.Ldloca, 4)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ117(UBound(typ117) + 1)
typ117(UBound(typ117)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, checkMethod)
Typ = checkMethod.ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc5, 753, 1, 753, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa174 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru174 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont174 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru174)
OptimizeIL.Emit(OpCodes.Br, fa174)
OptimizeIL.MarkLabel(tru174)
OptimizeIL.MarkSequencePoint(doc5, 754, 1, 754, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc5, 755, 1, 755, 100)
OptimizeIL.Emit(OpCodes.Br, label18)
OptimizeIL.MarkSequencePoint(doc5, 756, 1, 756, 100)
OptimizeIL.Emit(OpCodes.Br, cont174)
OptimizeIL.MarkLabel(fa174)
OptimizeIL.Emit(OpCodes.Br, cont174)
OptimizeIL.MarkLabel(cont174)
OptimizeIL.MarkSequencePoint(doc5, 758, 1, 758, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ118(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReDim Preserve typ118(UBound(typ118) + 1)
typ118(UBound(typ118)) = Typ
OptimizeIL.Emit(OpCodes.Ldloca, 4)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ118(UBound(typ118) + 1)
typ118(UBound(typ118)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, checkMethodCall)
Typ = checkMethodCall.ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc5, 760, 1, 760, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa175 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru175 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont175 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru175)
OptimizeIL.Emit(OpCodes.Br, fa175)
OptimizeIL.MarkLabel(tru175)
OptimizeIL.MarkSequencePoint(doc5, 761, 1, 761, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc5, 762, 1, 762, 100)
OptimizeIL.Emit(OpCodes.Br, label18)
OptimizeIL.MarkSequencePoint(doc5, 763, 1, 763, 100)
OptimizeIL.Emit(OpCodes.Br, cont175)
OptimizeIL.MarkLabel(fa175)
OptimizeIL.Emit(OpCodes.Br, cont175)
OptimizeIL.MarkLabel(cont175)
OptimizeIL.MarkSequencePoint(doc5, 765, 1, 765, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ119(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReDim Preserve typ119(UBound(typ119) + 1)
typ119(UBound(typ119)) = Typ
OptimizeIL.Emit(OpCodes.Ldloca, 4)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ119(UBound(typ119) + 1)
typ119(UBound(typ119)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, checkAssign)
Typ = checkAssign.ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc5, 767, 1, 767, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa176 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru176 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont176 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru176)
OptimizeIL.Emit(OpCodes.Br, fa176)
OptimizeIL.MarkLabel(tru176)
OptimizeIL.MarkSequencePoint(doc5, 768, 1, 768, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc5, 769, 1, 769, 100)
OptimizeIL.Emit(OpCodes.Br, label18)
OptimizeIL.MarkSequencePoint(doc5, 770, 1, 770, 100)
OptimizeIL.Emit(OpCodes.Br, cont176)
OptimizeIL.MarkLabel(fa176)
OptimizeIL.Emit(OpCodes.Br, cont176)
OptimizeIL.MarkLabel(cont176)
OptimizeIL.MarkSequencePoint(doc5, 772, 1, 772, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ120(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReDim Preserve typ120(UBound(typ120) + 1)
typ120(UBound(typ120)) = Typ
OptimizeIL.Emit(OpCodes.Ldloca, 4)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ120(UBound(typ120) + 1)
typ120(UBound(typ120)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, checkVarAs)
Typ = checkVarAs.ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc5, 774, 1, 774, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa177 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru177 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont177 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru177)
OptimizeIL.Emit(OpCodes.Br, fa177)
OptimizeIL.MarkLabel(tru177)
OptimizeIL.MarkSequencePoint(doc5, 775, 1, 775, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc5, 776, 1, 776, 100)
OptimizeIL.Emit(OpCodes.Br, label18)
OptimizeIL.MarkSequencePoint(doc5, 777, 1, 777, 100)
OptimizeIL.Emit(OpCodes.Br, cont177)
OptimizeIL.MarkLabel(fa177)
OptimizeIL.Emit(OpCodes.Br, cont177)
OptimizeIL.MarkLabel(cont177)
OptimizeIL.MarkSequencePoint(doc5, 779, 1, 779, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ121(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReDim Preserve typ121(UBound(typ121) + 1)
typ121(UBound(typ121)) = Typ
OptimizeIL.Emit(OpCodes.Ldloca, 4)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ121(UBound(typ121) + 1)
typ121(UBound(typ121)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, checkEndMtd)
Typ = checkEndMtd.ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc5, 781, 1, 781, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa178 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru178 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont178 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru178)
OptimizeIL.Emit(OpCodes.Br, fa178)
OptimizeIL.MarkLabel(tru178)
OptimizeIL.MarkSequencePoint(doc5, 782, 1, 782, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc5, 783, 1, 783, 100)
OptimizeIL.Emit(OpCodes.Br, label18)
OptimizeIL.MarkSequencePoint(doc5, 784, 1, 784, 100)
OptimizeIL.Emit(OpCodes.Br, cont178)
OptimizeIL.MarkLabel(fa178)
OptimizeIL.Emit(OpCodes.Br, cont178)
OptimizeIL.MarkLabel(cont178)
OptimizeIL.MarkSequencePoint(doc5, 786, 1, 786, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ122(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReDim Preserve typ122(UBound(typ122) + 1)
typ122(UBound(typ122)) = Typ
OptimizeIL.Emit(OpCodes.Ldloca, 4)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ122(UBound(typ122) + 1)
typ122(UBound(typ122)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, checkEndCls)
Typ = checkEndCls.ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc5, 788, 1, 788, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa179 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru179 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont179 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru179)
OptimizeIL.Emit(OpCodes.Br, fa179)
OptimizeIL.MarkLabel(tru179)
OptimizeIL.MarkSequencePoint(doc5, 789, 1, 789, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc5, 790, 1, 790, 100)
OptimizeIL.Emit(OpCodes.Br, label18)
OptimizeIL.MarkSequencePoint(doc5, 791, 1, 791, 100)
OptimizeIL.Emit(OpCodes.Br, cont179)
OptimizeIL.MarkLabel(fa179)
OptimizeIL.Emit(OpCodes.Br, cont179)
OptimizeIL.MarkLabel(cont179)
OptimizeIL.MarkSequencePoint(doc5, 793, 1, 793, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ123(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReDim Preserve typ123(UBound(typ123) + 1)
typ123(UBound(typ123)) = Typ
OptimizeIL.Emit(OpCodes.Ldloca, 4)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ123(UBound(typ123) + 1)
typ123(UBound(typ123)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, checkDebug)
Typ = checkDebug.ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc5, 795, 1, 795, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa180 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru180 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont180 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru180)
OptimizeIL.Emit(OpCodes.Br, fa180)
OptimizeIL.MarkLabel(tru180)
OptimizeIL.MarkSequencePoint(doc5, 796, 1, 796, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc5, 797, 1, 797, 100)
OptimizeIL.Emit(OpCodes.Br, label18)
OptimizeIL.MarkSequencePoint(doc5, 798, 1, 798, 100)
OptimizeIL.Emit(OpCodes.Br, cont180)
OptimizeIL.MarkLabel(fa180)
OptimizeIL.Emit(OpCodes.Br, cont180)
OptimizeIL.MarkLabel(cont180)
OptimizeIL.MarkSequencePoint(doc5, 800, 1, 800, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ124(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReDim Preserve typ124(UBound(typ124) + 1)
typ124(UBound(typ124)) = Typ
OptimizeIL.Emit(OpCodes.Ldloca, 4)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ124(UBound(typ124) + 1)
typ124(UBound(typ124)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, checkRefasm)
Typ = checkRefasm.ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc5, 802, 1, 802, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa181 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru181 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont181 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru181)
OptimizeIL.Emit(OpCodes.Br, fa181)
OptimizeIL.MarkLabel(tru181)
OptimizeIL.MarkSequencePoint(doc5, 803, 1, 803, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc5, 804, 1, 804, 100)
OptimizeIL.Emit(OpCodes.Br, label18)
OptimizeIL.MarkSequencePoint(doc5, 805, 1, 805, 100)
OptimizeIL.Emit(OpCodes.Br, cont181)
OptimizeIL.MarkLabel(fa181)
OptimizeIL.Emit(OpCodes.Br, cont181)
OptimizeIL.MarkLabel(cont181)
OptimizeIL.MarkSequencePoint(doc5, 807, 1, 807, 100)
OptimizeIL.MarkLabel(label18)
OptimizeIL.MarkSequencePoint(doc5, 809, 1, 809, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
OptimizeIL.MarkSequencePoint(doc5, 810, 1, 810, 100)
OptimizeIL.Emit(OpCodes.Ret)
StmtOptimizer.CreateType()
End Sub


Dim doc6 As ISymbolDocumentWriter

Sub Parser()
Dim Parser As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.Parser" & "." & "Parser", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(StmtSet)
Dim Parse As MethodBuilder = Parser.DefineMethod("Parse", MethodAttributes.Public, GetType(StmtSet), typ0)
Dim ParseIL As ILGenerator = Parse.GetILGenerator()
Dim Parseparam00 As ParameterBuilder = Parse.DefineParameter(0, ParameterAttributes.RetVal, "")
Dim Parseparam01 As ParameterBuilder = Parse.DefineParameter(1, ParameterAttributes.None, "stms")
ParseIL.MarkSequencePoint(doc6, 4, 1, 4, 100)
Dim locbldr244 As LocalBuilder = ParseIL.DeclareLocal(GetType(System.Int32))
locbldr244.SetLocalSymInfo("i")
ParseIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ParseIL.Emit(OpCodes.Stloc, 0)
ParseIL.MarkSequencePoint(doc6, 5, 1, 5, 100)
Dim locbldr245 As LocalBuilder = ParseIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.Parser.StmtOptimizer"))
locbldr245.SetLocalSymInfo("so")
ParseIL.Emit(OpCodes.Ldnull)
ParseIL.Emit(OpCodes.Stloc, 1)
ParseIL.MarkSequencePoint(doc6, 6, 1, 6, 100)
Dim locbldr246 As LocalBuilder = ParseIL.DeclareLocal(GetType(System.Int32))
locbldr246.SetLocalSymInfo("len")
ParseIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(StmtSet)
ParseIL.Emit(OpCodes.Ldfld, GetType(StmtSet).GetField("Stmts"))
Typ = GetType(StmtSet).GetField("Stmts").FieldType
ParseIL.Emit(OpCodes.Ldlen)
ParseIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ParseIL.Emit(OpCodes.Stloc, 2)
ParseIL.MarkSequencePoint(doc6, 7, 1, 7, 100)
ParseIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
ParseIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ParseIL.Emit(OpCodes.Sub)
ParseIL.Emit(OpCodes.Stloc, 2)
ParseIL.MarkSequencePoint(doc6, 9, 1, 9, 100)
Dim label0 As System.Reflection.Emit.Label = ParseIL.DefineLabel()
ParseIL.MarkSequencePoint(doc6, 10, 1, 10, 100)
Dim label1 As System.Reflection.Emit.Label = ParseIL.DefineLabel()
ParseIL.MarkSequencePoint(doc6, 12, 1, 12, 100)
ParseIL.MarkLabel(label0)
ParseIL.MarkSequencePoint(doc6, 14, 1, 14, 100)
ParseIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
ParseIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ParseIL.Emit(OpCodes.Add)
ParseIL.Emit(OpCodes.Stloc, 0)
ParseIL.MarkSequencePoint(doc6, 15, 1, 15, 100)
ParseIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.Parser.StmtOptimizer").GetConstructor(Type.EmptyTypes))
ParseIL.Emit(OpCodes.Stloc, 1)
ParseIL.MarkSequencePoint(doc6, 16, 1, 16, 100)
ParseIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(StmtSet)
ParseIL.Emit(OpCodes.Ldfld, GetType(StmtSet).GetField("Stmts"))
Typ = GetType(StmtSet).GetField("Stmts").FieldType
Typ02 = Typ
ParseIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
ParseIL.Emit(OpCodes.Conv_U)
Typ = Typ02
Typ02 = Typ
Dim typ1(-1) As Type
ParseIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.StmtOptimizer")
Typ03 = Typ
ParseIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(StmtSet)
ParseIL.Emit(OpCodes.Ldfld, GetType(StmtSet).GetField("Stmts"))
Typ = GetType(StmtSet).GetField("Stmts").FieldType
Typ02 = Typ
ParseIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
ParseIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ParseIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = Typ
ParseIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Optimize", typ1))
Typ = Typ03.GetMethod("Optimize", typ1).ReturnType
Typ = Typ02
ParseIL.Emit(OpCodes.Stelem, Typ.GetElementType())
ParseIL.MarkSequencePoint(doc6, 18, 1, 18, 100)
ParseIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
ParseIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa182 As System.Reflection.Emit.Label = ParseIL.DefineLabel()
Dim tru182 As System.Reflection.Emit.Label = ParseIL.DefineLabel()
Dim cont182 As System.Reflection.Emit.Label = ParseIL.DefineLabel()
ParseIL.Emit(OpCodes.Beq, tru182)
ParseIL.Emit(OpCodes.Br, fa182)
ParseIL.MarkLabel(tru182)
ParseIL.MarkSequencePoint(doc6, 19, 1, 19, 100)
ParseIL.Emit(OpCodes.Br, label1)
ParseIL.MarkSequencePoint(doc6, 20, 1, 20, 100)
ParseIL.Emit(OpCodes.Br, cont182)
ParseIL.MarkLabel(fa182)
ParseIL.MarkSequencePoint(doc6, 21, 1, 21, 100)
ParseIL.Emit(OpCodes.Br, label0)
ParseIL.MarkSequencePoint(doc6, 22, 1, 22, 100)
ParseIL.Emit(OpCodes.Br, cont182)
ParseIL.MarkLabel(cont182)
ParseIL.MarkSequencePoint(doc6, 24, 1, 24, 100)
ParseIL.MarkLabel(label1)
ParseIL.MarkSequencePoint(doc6, 26, 1, 26, 100)
ParseIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(StmtSet)
ParseIL.MarkSequencePoint(doc6, 27, 1, 27, 100)
ParseIL.Emit(OpCodes.Ret)
Parser.CreateType()
End Sub

Sub Main()

asmName = New AssemblyName("tokenizer.Parser")
asmName.Version = New System.Version(11, 2, 4, 0)
asm  = AppDomain.CurrentDomain.DefineDynamicAssembly(asmName, AssemblyBuilderAccess.Save, CStr("E:\Code\dylannet\compiler\"))
mdl = asm.DefineDynamicModule(asmName.Name & ".dll" , asmName.Name & ".dll", True)
resw = mdl.DefineResource("tokenizer.Parser.resources" ,  "Description")
doc = mdl.DefineDocument("E:\Code\dylannet\compiler\tokenizer.Parser.txt", Guid.Empty, Guid.Empty, Guid.Empty)
doc2 = mdl.DefineDocument("E:\Code\dylannet\compiler\parserflags.txt", Guid.Empty, Guid.Empty, Guid.Empty)
doc3 = mdl.DefineDocument("E:\Code\dylannet\compiler\tokenoptimizer.txt", Guid.Empty, Guid.Empty, Guid.Empty)
doc4 = mdl.DefineDocument("E:\Code\dylannet\compiler\exproptimizer.txt", Guid.Empty, Guid.Empty, Guid.Empty)
doc5 = mdl.DefineDocument("E:\Code\dylannet\compiler\stmtoptimizer.txt", Guid.Empty, Guid.Empty, Guid.Empty)
doc6 = mdl.DefineDocument("E:\Code\dylannet\compiler\parser.txt", Guid.Empty, Guid.Empty, Guid.Empty)
addstr("tokenizer.Parser")
addasm(asm)
Dim daType As Type = GetType(DebuggableAttribute)
Dim daCtor As ConstructorInfo = daType.GetConstructor(New Type() { GetType(DebuggableAttribute.DebuggingModes) })
Dim daBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(daCtor, New Object() {DebuggableAttribute.DebuggingModes.DisableOptimizations Or _
DebuggableAttribute.DebuggingModes.Default })
asm.SetCustomAttribute(daBuilder)

ParserFlags()
TokenOptimizer()
ExprOptimizer()
StmtOptimizer()
Parser()
Dim vaType As Type = GetType(AssemblyFileVersionAttribute)
Dim vaCtor As ConstructorInfo = vaType.GetConstructor(New Type() { GetType(String) })
Dim vaBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(vaCtor, New Object() {"11.2.4.0"})
asm.SetCustomAttribute(vaBuilder)

Dim paType As Type = GetType(AssemblyProductAttribute)
Dim paCtor As ConstructorInfo = paType.GetConstructor(New Type() { GetType(String) })
Dim paBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(paCtor, New Object() {"tokenizer.Parser"})
asm.SetCustomAttribute(paBuilder)

Dim ataType As Type = GetType(AssemblyTitleAttribute)
Dim ataCtor As ConstructorInfo = ataType.GetConstructor(New Type() { GetType(String) })
Dim ataBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(ataCtor, New Object() {"tokenizer.Parser"})
asm.SetCustomAttribute(ataBuilder)

Dim deaType As Type = GetType(AssemblyDescriptionAttribute)
Dim deaCtor As ConstructorInfo = deaType.GetConstructor(New Type() { GetType(String) })
Dim deaBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(deaCtor, New Object() {"tokenizer.Parser"})
asm.SetCustomAttribute(deaBuilder)


asm.DefineVersionInfoResource()
asm.Save(asmName.Name & ".dll")
End Sub


End Module