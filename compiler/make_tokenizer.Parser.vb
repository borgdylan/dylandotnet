Imports dylan.NET.Tokenizer.AST.Tokens.Chars
Imports dylan.NET.Tokenizer.AST.Tokens.Attributes
Imports dylan.NET.Tokenizer.AST.Tokens.Literals
Imports dylan.NET.Tokenizer.AST.Tokens.TypeToks
Imports dylan.NET.Tokenizer.AST.Tokens.Ops
Imports dylan.NET.Tokenizer.AST.Stmts
Imports dylan.NET.Tokenizer.AST.Exprs
Imports dylan.NET.Tokenizer.AST.Tokens
Imports dylan.NET.Tokenizer.AST
Imports dylan.NET.Tokenizer.Lexer
Imports dylan.NET.Utils
Imports dylan.NET
Imports System.Linq
Imports System.Collections.Generic
Imports System.Collections
Imports Microsoft.VisualBasic
Imports System.Xml
Imports System.Xml.Linq
Imports System.Data

Imports System
Imports System.Diagnostics
Imports System.Diagnostics.SymbolStore
Imports System.Reflection
Imports System.Resources
Imports System.Reflection.Emit
Module Module1

Public asmName As AssemblyName
Public asm As AssemblyBuilder
Public Typ As Type
Public Typ02 As Type
Public Typ03 As Type
Public Typ04 As Type
Public impstr(-1) As String
Public impasm(-1) As Assembly
Public interfacebool As Boolean
Public mdl As ModuleBuilder
Public resw As IResourceWriter
Public resobj As Object

Dim doc As ISymbolDocumentWriter

Sub addstr(ByVal str As String)
ReDim Preserve impstr(UBound(impstr) + 1)
impstr(UBound(impstr)) = str
End Sub

Sub addasm(ByVal asm As Assembly)
ReDim Preserve impasm(UBound(impasm) + 1)
impasm(UBound(impasm)) = asm
End Sub

Function MakeGetType(ByVal TypeName As String) As Type
Dim attachbrackets As Boolean = False
If TypeName Like "*[[]*]" Then
Dim split As String() = TypeName.Split(New [Char] () {"[","]"})
TypeName = split(0)
attachbrackets = True
End If
Dim ind As Integer = -1
Dim i As Integer = -1
Dim len As Integer = impstr.Length - 1
Do Until i = len
i = i + 1
If TypeName Like impstr(i) & "*" Then
ind = i
End If
Loop
If ind <> -1 Then
Dim assem As Assembly = impasm(ind)
If attachbrackets = True Then
TypeName = TypeName & "[]"
End If
MakeGetType = assem.GetType(TypeName)
Else
If attachbrackets = True Then
TypeName = TypeName & "[]"
End If
MakeGetType = Type.GetType(TypeName)
End If
Return MakeGetType
End Function

Dim doc2 As ISymbolDocumentWriter

Sub ParserFlags()
Dim ParserFlags As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.Parser" & "." & "ParserFlags", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass Or TypeAttributes.BeforeFieldInit, GetType(System.Object))
Dim IfFlag As FieldBuilder = ParserFlags.DefineField("IfFlag", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static)
Dim CmtFlag As FieldBuilder = ParserFlags.DefineField("CmtFlag", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static)
Dim NoOptFlag As FieldBuilder = ParserFlags.DefineField("NoOptFlag", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static)
Dim NegFlag As FieldBuilder = ParserFlags.DefineField("NegFlag", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static)
Dim NotFlag As FieldBuilder = ParserFlags.DefineField("NotFlag", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static)
Dim ConvFlag As FieldBuilder = ParserFlags.DefineField("ConvFlag", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static)
Dim ArrFlag As FieldBuilder = ParserFlags.DefineField("ArrFlag", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static)
Dim ArrSlot As FieldBuilder = ParserFlags.DefineField("ArrSlot", GetType(Expr), FieldAttributes.Public Or FieldAttributes.Static)
Dim RefFlag As FieldBuilder = ParserFlags.DefineField("RefFlag", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static)
Dim ValinrefFlag As FieldBuilder = ParserFlags.DefineField("ValinrefFlag", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static)
Dim ConvTyp As FieldBuilder = ParserFlags.DefineField("ConvTyp", GetType(TypeTok), FieldAttributes.Public Or FieldAttributes.Static)
Dim OrdOp As FieldBuilder = ParserFlags.DefineField("OrdOp", GetType(System.String), FieldAttributes.Public Or FieldAttributes.Static)
Dim isChanged As FieldBuilder = ParserFlags.DefineField("isChanged", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static)
Dim ProcessTTokOnly As FieldBuilder = ParserFlags.DefineField("ProcessTTokOnly", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static)
Dim DurConvFlag As FieldBuilder = ParserFlags.DefineField("DurConvFlag", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static)
Dim IdentFlag As FieldBuilder = ParserFlags.DefineField("IdentFlag", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static)
Dim MetCallFlag As FieldBuilder = ParserFlags.DefineField("MetCallFlag", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static)
Dim MetChainFlag As FieldBuilder = ParserFlags.DefineField("MetChainFlag", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static)
Dim StringFlag As FieldBuilder = ParserFlags.DefineField("StringFlag", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static)
Dim ctor0 As ConstructorBuilder = ParserFlags.DefineConstructor(MethodAttributes.Public Or MethodAttributes.Static,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc2, 32, 1, 32, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, IfFlag)
ctor0IL.MarkSequencePoint(doc2, 33, 1, 33, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, CmtFlag)
ctor0IL.MarkSequencePoint(doc2, 34, 1, 34, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, NoOptFlag)
ctor0IL.MarkSequencePoint(doc2, 35, 1, 35, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, NegFlag)
ctor0IL.MarkSequencePoint(doc2, 36, 1, 36, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, NotFlag)
ctor0IL.MarkSequencePoint(doc2, 37, 1, 37, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, ConvFlag)
ctor0IL.MarkSequencePoint(doc2, 38, 1, 38, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, ArrFlag)
ctor0IL.MarkSequencePoint(doc2, 39, 1, 39, 100)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stsfld, ArrSlot)
ctor0IL.MarkSequencePoint(doc2, 40, 1, 40, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, RefFlag)
ctor0IL.MarkSequencePoint(doc2, 41, 1, 41, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, ValinrefFlag)
ctor0IL.MarkSequencePoint(doc2, 42, 1, 42, 100)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stsfld, ConvTyp)
ctor0IL.MarkSequencePoint(doc2, 43, 1, 43, 100)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stsfld, OrdOp)
ctor0IL.MarkSequencePoint(doc2, 44, 1, 44, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, isChanged)
ctor0IL.MarkSequencePoint(doc2, 45, 1, 45, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, DurConvFlag)
ctor0IL.MarkSequencePoint(doc2, 46, 1, 46, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, IdentFlag)
ctor0IL.MarkSequencePoint(doc2, 47, 1, 47, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, MetCallFlag)
ctor0IL.MarkSequencePoint(doc2, 48, 1, 48, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, MetChainFlag)
ctor0IL.MarkSequencePoint(doc2, 49, 1, 49, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, ProcessTTokOnly)
ctor0IL.MarkSequencePoint(doc2, 50, 1, 50, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, StringFlag)
ctor0IL.MarkSequencePoint(doc2, 51, 1, 51, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim SetUnaryFalse As MethodBuilder = ParserFlags.DefineMethod("SetUnaryFalse", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim SetUnaryFalseIL As ILGenerator = SetUnaryFalse.GetILGenerator()
SetUnaryFalseIL.MarkSequencePoint(doc2, 54, 1, 54, 100)
SetUnaryFalseIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
SetUnaryFalseIL.Emit(OpCodes.Stsfld, NegFlag)
SetUnaryFalseIL.MarkSequencePoint(doc2, 55, 1, 55, 100)
SetUnaryFalseIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
SetUnaryFalseIL.Emit(OpCodes.Stsfld, NotFlag)
SetUnaryFalseIL.MarkSequencePoint(doc2, 56, 1, 56, 100)
SetUnaryFalseIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
SetUnaryFalseIL.Emit(OpCodes.Stsfld, ConvFlag)
SetUnaryFalseIL.MarkSequencePoint(doc2, 57, 1, 57, 100)
SetUnaryFalseIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
SetUnaryFalseIL.Emit(OpCodes.Stsfld, ArrFlag)
SetUnaryFalseIL.MarkSequencePoint(doc2, 58, 1, 58, 100)
SetUnaryFalseIL.Emit(OpCodes.Ldnull)
SetUnaryFalseIL.Emit(OpCodes.Stsfld, ArrSlot)
SetUnaryFalseIL.MarkSequencePoint(doc2, 59, 1, 59, 100)
SetUnaryFalseIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
SetUnaryFalseIL.Emit(OpCodes.Stsfld, RefFlag)
SetUnaryFalseIL.MarkSequencePoint(doc2, 60, 1, 60, 100)
SetUnaryFalseIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
SetUnaryFalseIL.Emit(OpCodes.Stsfld, ValinrefFlag)
SetUnaryFalseIL.MarkSequencePoint(doc2, 61, 1, 61, 100)
SetUnaryFalseIL.Emit(OpCodes.Ldnull)
SetUnaryFalseIL.Emit(OpCodes.Stsfld, ConvTyp)
SetUnaryFalseIL.MarkSequencePoint(doc2, 62, 1, 62, 100)
SetUnaryFalseIL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
SetUnaryFalseIL.Emit(OpCodes.Stsfld, OrdOp)
SetUnaryFalseIL.MarkSequencePoint(doc2, 63, 1, 63, 100)
SetUnaryFalseIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
SetUnaryFalseIL.Emit(OpCodes.Stsfld, isChanged)
SetUnaryFalseIL.MarkSequencePoint(doc2, 64, 1, 64, 100)
SetUnaryFalseIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
SetUnaryFalseIL.Emit(OpCodes.Stsfld, DurConvFlag)
SetUnaryFalseIL.MarkSequencePoint(doc2, 65, 1, 65, 100)
SetUnaryFalseIL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(Ident)
Dim UpdateIdent As MethodBuilder = ParserFlags.DefineMethod("UpdateIdent", MethodAttributes.Public Or MethodAttributes.Static, GetType(Ident), typ0)
Dim UpdateIdentIL As ILGenerator = UpdateIdent.GetILGenerator()
Dim UpdateIdentparam01 As ParameterBuilder = UpdateIdent.DefineParameter(1, ParameterAttributes.None, "id")
UpdateIdentIL.MarkSequencePoint(doc2, 68, 1, 68, 100)
UpdateIdentIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Ident)
UpdateIdentIL.Emit(OpCodes.Ldsfld, NegFlag)
Typ = NegFlag.FieldType
UpdateIdentIL.Emit(OpCodes.Stfld, GetType(Ident).GetField("DoNeg"))
UpdateIdentIL.MarkSequencePoint(doc2, 69, 1, 69, 100)
UpdateIdentIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Ident)
UpdateIdentIL.Emit(OpCodes.Ldsfld, NotFlag)
Typ = NotFlag.FieldType
UpdateIdentIL.Emit(OpCodes.Stfld, GetType(Ident).GetField("DoNot"))
UpdateIdentIL.MarkSequencePoint(doc2, 70, 1, 70, 100)
UpdateIdentIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Ident)
UpdateIdentIL.Emit(OpCodes.Ldsfld, ConvFlag)
Typ = ConvFlag.FieldType
UpdateIdentIL.Emit(OpCodes.Stfld, GetType(Ident).GetField("Conv"))
UpdateIdentIL.MarkSequencePoint(doc2, 71, 1, 71, 100)
UpdateIdentIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Ident)
UpdateIdentIL.Emit(OpCodes.Ldsfld, ArrFlag)
Typ = ArrFlag.FieldType
UpdateIdentIL.Emit(OpCodes.Stfld, GetType(Ident).GetField("IsArr"))
UpdateIdentIL.MarkSequencePoint(doc2, 72, 1, 72, 100)
UpdateIdentIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Ident)
UpdateIdentIL.Emit(OpCodes.Ldsfld, ArrSlot)
Typ = ArrSlot.FieldType
UpdateIdentIL.Emit(OpCodes.Stfld, GetType(Ident).GetField("ArrLoc"))
UpdateIdentIL.MarkSequencePoint(doc2, 73, 1, 73, 100)
UpdateIdentIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Ident)
UpdateIdentIL.Emit(OpCodes.Ldsfld, RefFlag)
Typ = RefFlag.FieldType
UpdateIdentIL.Emit(OpCodes.Stfld, GetType(Ident).GetField("IsRef"))
UpdateIdentIL.MarkSequencePoint(doc2, 74, 1, 74, 100)
UpdateIdentIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Ident)
UpdateIdentIL.Emit(OpCodes.Ldsfld, ValinrefFlag)
Typ = ValinrefFlag.FieldType
UpdateIdentIL.Emit(OpCodes.Stfld, GetType(Ident).GetField("IsValInRef"))
UpdateIdentIL.MarkSequencePoint(doc2, 75, 1, 75, 100)
UpdateIdentIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Ident)
UpdateIdentIL.Emit(OpCodes.Ldsfld, ConvTyp)
Typ = ConvTyp.FieldType
UpdateIdentIL.Emit(OpCodes.Stfld, GetType(Ident).GetField("TTok"))
UpdateIdentIL.MarkSequencePoint(doc2, 76, 1, 76, 100)
UpdateIdentIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Ident)
UpdateIdentIL.Emit(OpCodes.Ldsfld, OrdOp)
Typ = OrdOp.FieldType
UpdateIdentIL.Emit(OpCodes.Stfld, GetType(Ident).GetField("OrdOp"))
UpdateIdentIL.MarkSequencePoint(doc2, 77, 1, 77, 100)
UpdateIdentIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Ident)
UpdateIdentIL.MarkSequencePoint(doc2, 78, 1, 78, 100)
UpdateIdentIL.Emit(OpCodes.Ret)
Dim typ1(-1) As Type
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = GetType(NullLiteral)
Dim UpdateNullLit As MethodBuilder = ParserFlags.DefineMethod("UpdateNullLit", MethodAttributes.Public Or MethodAttributes.Static, GetType(NullLiteral), typ1)
Dim UpdateNullLitIL As ILGenerator = UpdateNullLit.GetILGenerator()
Dim UpdateNullLitparam01 As ParameterBuilder = UpdateNullLit.DefineParameter(1, ParameterAttributes.None, "id")
UpdateNullLitIL.MarkSequencePoint(doc2, 81, 1, 81, 100)
UpdateNullLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(NullLiteral)
UpdateNullLitIL.MarkSequencePoint(doc2, 82, 1, 82, 100)
UpdateNullLitIL.Emit(OpCodes.Ret)
Dim typ2(-1) As Type
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = GetType(CharLiteral)
Dim UpdateCharLit As MethodBuilder = ParserFlags.DefineMethod("UpdateCharLit", MethodAttributes.Public Or MethodAttributes.Static, GetType(CharLiteral), typ2)
Dim UpdateCharLitIL As ILGenerator = UpdateCharLit.GetILGenerator()
Dim UpdateCharLitparam01 As ParameterBuilder = UpdateCharLit.DefineParameter(1, ParameterAttributes.None, "id")
UpdateCharLitIL.MarkSequencePoint(doc2, 85, 1, 85, 100)
UpdateCharLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(CharLiteral)
UpdateCharLitIL.Emit(OpCodes.Ldsfld, ConvFlag)
Typ = ConvFlag.FieldType
UpdateCharLitIL.Emit(OpCodes.Stfld, GetType(CharLiteral).GetField("Conv"))
UpdateCharLitIL.MarkSequencePoint(doc2, 86, 1, 86, 100)
UpdateCharLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(CharLiteral)
UpdateCharLitIL.Emit(OpCodes.Ldsfld, ConvTyp)
Typ = ConvTyp.FieldType
UpdateCharLitIL.Emit(OpCodes.Stfld, GetType(CharLiteral).GetField("TTok"))
UpdateCharLitIL.MarkSequencePoint(doc2, 87, 1, 87, 100)
UpdateCharLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(CharLiteral)
UpdateCharLitIL.Emit(OpCodes.Ldsfld, OrdOp)
Typ = OrdOp.FieldType
UpdateCharLitIL.Emit(OpCodes.Stfld, GetType(CharLiteral).GetField("OrdOp"))
UpdateCharLitIL.MarkSequencePoint(doc2, 88, 1, 88, 100)
UpdateCharLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(CharLiteral)
UpdateCharLitIL.MarkSequencePoint(doc2, 89, 1, 89, 100)
UpdateCharLitIL.Emit(OpCodes.Ret)
Dim typ3(-1) As Type
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = GetType(StringLiteral)
Dim UpdateStringLit As MethodBuilder = ParserFlags.DefineMethod("UpdateStringLit", MethodAttributes.Public Or MethodAttributes.Static, GetType(StringLiteral), typ3)
Dim UpdateStringLitIL As ILGenerator = UpdateStringLit.GetILGenerator()
Dim UpdateStringLitparam01 As ParameterBuilder = UpdateStringLit.DefineParameter(1, ParameterAttributes.None, "id")
UpdateStringLitIL.MarkSequencePoint(doc2, 92, 1, 92, 100)
UpdateStringLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(StringLiteral)
UpdateStringLitIL.Emit(OpCodes.Ldsfld, ConvFlag)
Typ = ConvFlag.FieldType
UpdateStringLitIL.Emit(OpCodes.Stfld, GetType(StringLiteral).GetField("Conv"))
UpdateStringLitIL.MarkSequencePoint(doc2, 93, 1, 93, 100)
UpdateStringLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(StringLiteral)
UpdateStringLitIL.Emit(OpCodes.Ldsfld, ConvTyp)
Typ = ConvTyp.FieldType
UpdateStringLitIL.Emit(OpCodes.Stfld, GetType(StringLiteral).GetField("TTok"))
UpdateStringLitIL.MarkSequencePoint(doc2, 94, 1, 94, 100)
UpdateStringLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(StringLiteral)
UpdateStringLitIL.Emit(OpCodes.Ldsfld, OrdOp)
Typ = OrdOp.FieldType
UpdateStringLitIL.Emit(OpCodes.Stfld, GetType(StringLiteral).GetField("OrdOp"))
UpdateStringLitIL.MarkSequencePoint(doc2, 95, 1, 95, 100)
UpdateStringLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(StringLiteral)
UpdateStringLitIL.MarkSequencePoint(doc2, 96, 1, 96, 100)
UpdateStringLitIL.Emit(OpCodes.Ret)
Dim typ4(-1) As Type
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = GetType(BooleanLiteral)
Dim UpdateBoolLit As MethodBuilder = ParserFlags.DefineMethod("UpdateBoolLit", MethodAttributes.Public Or MethodAttributes.Static, GetType(BooleanLiteral), typ4)
Dim UpdateBoolLitIL As ILGenerator = UpdateBoolLit.GetILGenerator()
Dim UpdateBoolLitparam01 As ParameterBuilder = UpdateBoolLit.DefineParameter(1, ParameterAttributes.None, "id")
UpdateBoolLitIL.MarkSequencePoint(doc2, 99, 1, 99, 100)
UpdateBoolLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(BooleanLiteral)
UpdateBoolLitIL.Emit(OpCodes.Ldsfld, NotFlag)
Typ = NotFlag.FieldType
UpdateBoolLitIL.Emit(OpCodes.Stfld, GetType(BooleanLiteral).GetField("DoNot"))
UpdateBoolLitIL.MarkSequencePoint(doc2, 100, 1, 100, 100)
UpdateBoolLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(BooleanLiteral)
UpdateBoolLitIL.Emit(OpCodes.Ldsfld, ConvFlag)
Typ = ConvFlag.FieldType
UpdateBoolLitIL.Emit(OpCodes.Stfld, GetType(BooleanLiteral).GetField("Conv"))
UpdateBoolLitIL.MarkSequencePoint(doc2, 101, 1, 101, 100)
UpdateBoolLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(BooleanLiteral)
UpdateBoolLitIL.Emit(OpCodes.Ldsfld, ConvTyp)
Typ = ConvTyp.FieldType
UpdateBoolLitIL.Emit(OpCodes.Stfld, GetType(BooleanLiteral).GetField("TTok"))
UpdateBoolLitIL.MarkSequencePoint(doc2, 102, 1, 102, 100)
UpdateBoolLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(BooleanLiteral)
UpdateBoolLitIL.Emit(OpCodes.Ldsfld, OrdOp)
Typ = OrdOp.FieldType
UpdateBoolLitIL.Emit(OpCodes.Stfld, GetType(BooleanLiteral).GetField("OrdOp"))
UpdateBoolLitIL.MarkSequencePoint(doc2, 103, 1, 103, 100)
UpdateBoolLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(BooleanLiteral)
UpdateBoolLitIL.MarkSequencePoint(doc2, 104, 1, 104, 100)
UpdateBoolLitIL.Emit(OpCodes.Ret)
Dim typ5(-1) As Type
ReDim Preserve typ5(UBound(typ5) + 1)
typ5(UBound(typ5)) = GetType(NumberLiteral)
Dim UpdateNumLit As MethodBuilder = ParserFlags.DefineMethod("UpdateNumLit", MethodAttributes.Public Or MethodAttributes.Static, GetType(NumberLiteral), typ5)
Dim UpdateNumLitIL As ILGenerator = UpdateNumLit.GetILGenerator()
Dim UpdateNumLitparam01 As ParameterBuilder = UpdateNumLit.DefineParameter(1, ParameterAttributes.None, "id")
UpdateNumLitIL.MarkSequencePoint(doc2, 107, 1, 107, 100)
UpdateNumLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(NumberLiteral)
UpdateNumLitIL.Emit(OpCodes.Ldsfld, NegFlag)
Typ = NegFlag.FieldType
UpdateNumLitIL.Emit(OpCodes.Stfld, GetType(NumberLiteral).GetField("DoNeg"))
UpdateNumLitIL.MarkSequencePoint(doc2, 108, 1, 108, 100)
UpdateNumLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(NumberLiteral)
UpdateNumLitIL.Emit(OpCodes.Ldsfld, NotFlag)
Typ = NotFlag.FieldType
UpdateNumLitIL.Emit(OpCodes.Stfld, GetType(NumberLiteral).GetField("DoNot"))
UpdateNumLitIL.MarkSequencePoint(doc2, 109, 1, 109, 100)
UpdateNumLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(NumberLiteral)
UpdateNumLitIL.Emit(OpCodes.Ldsfld, ConvFlag)
Typ = ConvFlag.FieldType
UpdateNumLitIL.Emit(OpCodes.Stfld, GetType(NumberLiteral).GetField("Conv"))
UpdateNumLitIL.MarkSequencePoint(doc2, 110, 1, 110, 100)
UpdateNumLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(NumberLiteral)
UpdateNumLitIL.Emit(OpCodes.Ldsfld, ConvTyp)
Typ = ConvTyp.FieldType
UpdateNumLitIL.Emit(OpCodes.Stfld, GetType(NumberLiteral).GetField("TTok"))
UpdateNumLitIL.MarkSequencePoint(doc2, 111, 1, 111, 100)
UpdateNumLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(NumberLiteral)
UpdateNumLitIL.Emit(OpCodes.Ldsfld, OrdOp)
Typ = OrdOp.FieldType
UpdateNumLitIL.Emit(OpCodes.Stfld, GetType(NumberLiteral).GetField("OrdOp"))
UpdateNumLitIL.MarkSequencePoint(doc2, 112, 1, 112, 100)
UpdateNumLitIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(NumberLiteral)
UpdateNumLitIL.MarkSequencePoint(doc2, 113, 1, 113, 100)
UpdateNumLitIL.Emit(OpCodes.Ret)
ParserFlags.CreateType()
End Sub


Dim doc3 As ISymbolDocumentWriter

Sub TokenOptimizer()
Dim TokenOptimizer As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.Parser" & "." & "TokenOptimizer", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(Token)
Dim Optimize As MethodBuilder = TokenOptimizer.DefineMethod("Optimize", MethodAttributes.Public, GetType(Token), typ0)
Dim OptimizeIL As ILGenerator = Optimize.GetILGenerator()
Dim Optimizeparam01 As ParameterBuilder = Optimize.DefineParameter(1, ParameterAttributes.None, "tok")
OptimizeIL.MarkSequencePoint(doc3, 13, 1, 13, 100)
Dim locbldr0 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.Int32))
locbldr0.SetLocalSymInfo("comp")
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 14, 1, 14, 100)
Dim locbldr1 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.Boolean))
locbldr1.SetLocalSymInfo("compb")
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 15, 1, 15, 100)
Dim locbldr2 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.String))
locbldr2.SetLocalSymInfo("tmpstr")
OptimizeIL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 16, 1, 16, 100)
Dim locbldr3 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.Char).MakeArrayType())
locbldr3.SetLocalSymInfo("tmpchrarr")
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
OptimizeIL.Emit(OpCodes.Newarr, GetType(System.Char))
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc3, 17, 1, 17, 100)
Dim locbldr4 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.Boolean))
locbldr4.SetLocalSymInfo("orflg")
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 19, 1, 19, 100)
Dim label0 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.MarkSequencePoint(doc3, 21, 1, 21, 100)
Dim typ1(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "+")
Typ = GetType(System.String)
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ1))
Typ = GetType(String).GetMethod("Compare", typ1).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 23, 1, 23, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa0 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru0 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont0 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru0)
OptimizeIL.Emit(OpCodes.Br, fa0)
OptimizeIL.MarkLabel(tru0)
OptimizeIL.MarkSequencePoint(doc3, 24, 1, 24, 100)
Dim locbldr5 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(AddOp))
locbldr5.SetLocalSymInfo("aop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(AddOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 5)
OptimizeIL.MarkSequencePoint(doc3, 25, 1, 25, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(AddOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(AddOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 26, 1, 26, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(AddOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(AddOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 27, 1, 27, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(AddOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 28, 1, 28, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 29, 1, 29, 100)
OptimizeIL.Emit(OpCodes.Br, cont0)
OptimizeIL.MarkLabel(fa0)
OptimizeIL.Emit(OpCodes.Br, cont0)
OptimizeIL.MarkLabel(cont0)
OptimizeIL.MarkSequencePoint(doc3, 31, 1, 31, 100)
Dim typ2(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "*")
Typ = GetType(System.String)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ2))
Typ = GetType(String).GetMethod("Compare", typ2).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 33, 1, 33, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa1 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru1 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont1 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru1)
OptimizeIL.Emit(OpCodes.Br, fa1)
OptimizeIL.MarkLabel(tru1)
OptimizeIL.MarkSequencePoint(doc3, 34, 1, 34, 100)
Dim locbldr6 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(MulOp))
locbldr6.SetLocalSymInfo("mop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(MulOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 6)
OptimizeIL.MarkSequencePoint(doc3, 35, 1, 35, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(MulOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(MulOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 36, 1, 36, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(MulOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(MulOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 37, 1, 37, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(MulOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 38, 1, 38, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 39, 1, 39, 100)
OptimizeIL.Emit(OpCodes.Br, cont1)
OptimizeIL.MarkLabel(fa1)
OptimizeIL.Emit(OpCodes.Br, cont1)
OptimizeIL.MarkLabel(cont1)
OptimizeIL.MarkSequencePoint(doc3, 41, 1, 41, 100)
Dim typ3(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "-")
Typ = GetType(System.String)
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ3))
Typ = GetType(String).GetMethod("Compare", typ3).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 43, 1, 43, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa2 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru2 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont2 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru2)
OptimizeIL.Emit(OpCodes.Br, fa2)
OptimizeIL.MarkLabel(tru2)
OptimizeIL.MarkSequencePoint(doc3, 44, 1, 44, 100)
Dim locbldr7 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(SubOp))
locbldr7.SetLocalSymInfo("sop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(SubOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 7)
OptimizeIL.MarkSequencePoint(doc3, 45, 1, 45, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(SubOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(SubOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 46, 1, 46, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(SubOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(SubOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 47, 1, 47, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(SubOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 48, 1, 48, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 49, 1, 49, 100)
OptimizeIL.Emit(OpCodes.Br, cont2)
OptimizeIL.MarkLabel(fa2)
OptimizeIL.Emit(OpCodes.Br, cont2)
OptimizeIL.MarkLabel(cont2)
OptimizeIL.MarkSequencePoint(doc3, 51, 1, 51, 100)
Dim typ4(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "/")
Typ = GetType(System.String)
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ4))
Typ = GetType(String).GetMethod("Compare", typ4).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 53, 1, 53, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa3 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru3 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont3 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru3)
OptimizeIL.Emit(OpCodes.Br, fa3)
OptimizeIL.MarkLabel(tru3)
OptimizeIL.MarkSequencePoint(doc3, 54, 1, 54, 100)
Dim locbldr8 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(DivOp))
locbldr8.SetLocalSymInfo("dop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(DivOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 8)
OptimizeIL.MarkSequencePoint(doc3, 55, 1, 55, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(DivOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DivOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 56, 1, 56, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(DivOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DivOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 57, 1, 57, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(DivOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 58, 1, 58, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 59, 1, 59, 100)
OptimizeIL.Emit(OpCodes.Br, cont3)
OptimizeIL.MarkLabel(fa3)
OptimizeIL.Emit(OpCodes.Br, cont3)
OptimizeIL.MarkLabel(cont3)
OptimizeIL.MarkSequencePoint(doc3, 61, 1, 61, 100)
Dim typ5(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ5(UBound(typ5) + 1)
typ5(UBound(typ5)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "++")
Typ = GetType(System.String)
ReDim Preserve typ5(UBound(typ5) + 1)
typ5(UBound(typ5)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ5))
Typ = GetType(String).GetMethod("Compare", typ5).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 63, 1, 63, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa4 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru4 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont4 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru4)
OptimizeIL.Emit(OpCodes.Br, fa4)
OptimizeIL.MarkLabel(tru4)
OptimizeIL.MarkSequencePoint(doc3, 64, 1, 64, 100)
Dim locbldr9 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(IncOp))
locbldr9.SetLocalSymInfo("inop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(IncOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 9)
OptimizeIL.MarkSequencePoint(doc3, 65, 1, 65, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(IncOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(IncOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 66, 1, 66, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(IncOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(IncOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 67, 1, 67, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(IncOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 68, 1, 68, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 69, 1, 69, 100)
OptimizeIL.Emit(OpCodes.Br, cont4)
OptimizeIL.MarkLabel(fa4)
OptimizeIL.Emit(OpCodes.Br, cont4)
OptimizeIL.MarkLabel(cont4)
OptimizeIL.MarkSequencePoint(doc3, 71, 1, 71, 100)
Dim typ6(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "--")
Typ = GetType(System.String)
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ6))
Typ = GetType(String).GetMethod("Compare", typ6).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 73, 1, 73, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa5 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru5 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont5 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru5)
OptimizeIL.Emit(OpCodes.Br, fa5)
OptimizeIL.MarkLabel(tru5)
OptimizeIL.MarkSequencePoint(doc3, 74, 1, 74, 100)
Dim locbldr10 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(DecOp))
locbldr10.SetLocalSymInfo("deop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(DecOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 10)
OptimizeIL.MarkSequencePoint(doc3, 75, 1, 75, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(DecOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DecOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 76, 1, 76, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(DecOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DecOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 77, 1, 77, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(DecOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 78, 1, 78, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 79, 1, 79, 100)
OptimizeIL.Emit(OpCodes.Br, cont5)
OptimizeIL.MarkLabel(fa5)
OptimizeIL.Emit(OpCodes.Br, cont5)
OptimizeIL.MarkLabel(cont5)
OptimizeIL.MarkSequencePoint(doc3, 81, 1, 81, 100)
Dim typ7(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "<<")
Typ = GetType(System.String)
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ7))
Typ = GetType(String).GetMethod("Compare", typ7).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 83, 1, 83, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa6 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru6 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont6 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru6)
OptimizeIL.Emit(OpCodes.Br, fa6)
OptimizeIL.MarkLabel(tru6)
OptimizeIL.MarkSequencePoint(doc3, 84, 1, 84, 100)
Dim locbldr11 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(ShlOp))
locbldr11.SetLocalSymInfo("shilop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(ShlOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 11)
OptimizeIL.MarkSequencePoint(doc3, 85, 1, 85, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(ShlOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ShlOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 86, 1, 86, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(ShlOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ShlOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 87, 1, 87, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(ShlOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 88, 1, 88, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 89, 1, 89, 100)
OptimizeIL.Emit(OpCodes.Br, cont6)
OptimizeIL.MarkLabel(fa6)
OptimizeIL.Emit(OpCodes.Br, cont6)
OptimizeIL.MarkLabel(cont6)
OptimizeIL.MarkSequencePoint(doc3, 91, 1, 91, 100)
Dim typ8(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, ">>")
Typ = GetType(System.String)
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ8))
Typ = GetType(String).GetMethod("Compare", typ8).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 93, 1, 93, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa7 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru7 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont7 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru7)
OptimizeIL.Emit(OpCodes.Br, fa7)
OptimizeIL.MarkLabel(tru7)
OptimizeIL.MarkSequencePoint(doc3, 94, 1, 94, 100)
Dim locbldr12 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(ShrOp))
locbldr12.SetLocalSymInfo("shirop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(ShrOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 12)
OptimizeIL.MarkSequencePoint(doc3, 95, 1, 95, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(ShrOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ShrOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 96, 1, 96, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(ShrOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ShrOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 97, 1, 97, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(ShrOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 98, 1, 98, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 99, 1, 99, 100)
OptimizeIL.Emit(OpCodes.Br, cont7)
OptimizeIL.MarkLabel(fa7)
OptimizeIL.Emit(OpCodes.Br, cont7)
OptimizeIL.MarkLabel(cont7)
OptimizeIL.MarkSequencePoint(doc3, 102, 1, 102, 100)
Dim typ9(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "=")
Typ = GetType(System.String)
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ9))
Typ = GetType(String).GetMethod("Compare", typ9).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 104, 1, 104, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa8 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru8 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont8 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru8)
OptimizeIL.Emit(OpCodes.Br, fa8)
OptimizeIL.MarkLabel(tru8)
OptimizeIL.MarkSequencePoint(doc3, 105, 1, 105, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IfFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IfFlag").FieldType
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa9 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru9 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont9 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru9)
OptimizeIL.Emit(OpCodes.Br, fa9)
OptimizeIL.MarkLabel(tru9)
OptimizeIL.MarkSequencePoint(doc3, 106, 1, 106, 100)
Dim locbldr13 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(EqOp))
locbldr13.SetLocalSymInfo("eqop2")
OptimizeIL.Emit(OpCodes.Newobj, GetType(EqOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 13)
OptimizeIL.MarkSequencePoint(doc3, 107, 1, 107, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(EqOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(EqOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 108, 1, 108, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(EqOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(EqOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 109, 1, 109, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(EqOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 110, 1, 110, 100)
OptimizeIL.Emit(OpCodes.Br, cont9)
OptimizeIL.MarkLabel(fa9)
OptimizeIL.MarkSequencePoint(doc3, 111, 1, 111, 100)
Dim locbldr14 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(AssignOp))
locbldr14.SetLocalSymInfo("assop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(AssignOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 14)
OptimizeIL.MarkSequencePoint(doc3, 112, 1, 112, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(AssignOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(AssignOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 113, 1, 113, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(AssignOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(AssignOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 114, 1, 114, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(AssignOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 115, 1, 115, 100)
OptimizeIL.Emit(OpCodes.Br, cont9)
OptimizeIL.MarkLabel(cont9)
OptimizeIL.MarkSequencePoint(doc3, 116, 1, 116, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 117, 1, 117, 100)
OptimizeIL.Emit(OpCodes.Br, cont8)
OptimizeIL.MarkLabel(fa8)
OptimizeIL.Emit(OpCodes.Br, cont8)
OptimizeIL.MarkLabel(cont8)
OptimizeIL.MarkSequencePoint(doc3, 119, 1, 119, 100)
Dim typ10(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ10(UBound(typ10) + 1)
typ10(UBound(typ10)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "%")
Typ = GetType(System.String)
ReDim Preserve typ10(UBound(typ10) + 1)
typ10(UBound(typ10)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ10))
Typ = GetType(String).GetMethod("Compare", typ10).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 121, 1, 121, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa10 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru10 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont10 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru10)
OptimizeIL.Emit(OpCodes.Br, fa10)
OptimizeIL.MarkLabel(tru10)
OptimizeIL.MarkSequencePoint(doc3, 122, 1, 122, 100)
Dim locbldr15 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(ModOp))
locbldr15.SetLocalSymInfo("moop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(ModOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 15)
OptimizeIL.MarkSequencePoint(doc3, 123, 1, 123, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(ModOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ModOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 124, 1, 124, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(ModOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ModOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 125, 1, 125, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(ModOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 126, 1, 126, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 127, 1, 127, 100)
OptimizeIL.Emit(OpCodes.Br, cont10)
OptimizeIL.MarkLabel(fa10)
OptimizeIL.Emit(OpCodes.Br, cont10)
OptimizeIL.MarkLabel(cont10)
OptimizeIL.MarkSequencePoint(doc3, 129, 1, 129, 100)
Dim typ11(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ11(UBound(typ11) + 1)
typ11(UBound(typ11)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "==")
Typ = GetType(System.String)
ReDim Preserve typ11(UBound(typ11) + 1)
typ11(UBound(typ11)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ11))
Typ = GetType(String).GetMethod("Compare", typ11).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 131, 1, 131, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa11 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru11 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont11 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru11)
OptimizeIL.Emit(OpCodes.Br, fa11)
OptimizeIL.MarkLabel(tru11)
OptimizeIL.MarkSequencePoint(doc3, 132, 1, 132, 100)
Dim locbldr16 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(EqOp))
locbldr16.SetLocalSymInfo("eqop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(EqOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 16)
OptimizeIL.MarkSequencePoint(doc3, 133, 1, 133, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(EqOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(EqOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 134, 1, 134, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(EqOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(EqOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 135, 1, 135, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(EqOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 136, 1, 136, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 137, 1, 137, 100)
OptimizeIL.Emit(OpCodes.Br, cont11)
OptimizeIL.MarkLabel(fa11)
OptimizeIL.Emit(OpCodes.Br, cont11)
OptimizeIL.MarkLabel(cont11)
OptimizeIL.MarkSequencePoint(doc3, 139, 1, 139, 100)
Dim typ12(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ12(UBound(typ12) + 1)
typ12(UBound(typ12)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "like")
Typ = GetType(System.String)
ReDim Preserve typ12(UBound(typ12) + 1)
typ12(UBound(typ12)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ12))
Typ = GetType(String).GetMethod("Compare", typ12).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 141, 1, 141, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa12 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru12 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont12 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru12)
OptimizeIL.Emit(OpCodes.Br, fa12)
OptimizeIL.MarkLabel(tru12)
OptimizeIL.MarkSequencePoint(doc3, 142, 1, 142, 100)
Dim locbldr17 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(LikeOp))
locbldr17.SetLocalSymInfo("lkeop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(LikeOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 17)
OptimizeIL.MarkSequencePoint(doc3, 143, 1, 143, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(LikeOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(LikeOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 144, 1, 144, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(LikeOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(LikeOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 145, 1, 145, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(LikeOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 146, 1, 146, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 147, 1, 147, 100)
OptimizeIL.Emit(OpCodes.Br, cont12)
OptimizeIL.MarkLabel(fa12)
OptimizeIL.Emit(OpCodes.Br, cont12)
OptimizeIL.MarkLabel(cont12)
OptimizeIL.MarkSequencePoint(doc3, 149, 1, 149, 100)
Dim typ13(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ13(UBound(typ13) + 1)
typ13(UBound(typ13)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "!")
Typ = GetType(System.String)
ReDim Preserve typ13(UBound(typ13) + 1)
typ13(UBound(typ13)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ13))
Typ = GetType(String).GetMethod("Compare", typ13).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 151, 1, 151, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa13 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru13 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont13 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru13)
OptimizeIL.Emit(OpCodes.Br, fa13)
OptimizeIL.MarkLabel(tru13)
OptimizeIL.MarkSequencePoint(doc3, 152, 1, 152, 100)
Dim locbldr18 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(NegOp))
locbldr18.SetLocalSymInfo("negop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(NegOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 18)
OptimizeIL.MarkSequencePoint(doc3, 153, 1, 153, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(NegOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(NegOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 154, 1, 154, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(NegOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(NegOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 155, 1, 155, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(NegOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 156, 1, 156, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 157, 1, 157, 100)
OptimizeIL.Emit(OpCodes.Br, cont13)
OptimizeIL.MarkLabel(fa13)
OptimizeIL.Emit(OpCodes.Br, cont13)
OptimizeIL.MarkLabel(cont13)
OptimizeIL.MarkSequencePoint(doc3, 159, 1, 159, 100)
Dim typ14(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "~")
Typ = GetType(System.String)
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ14))
Typ = GetType(String).GetMethod("Compare", typ14).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 161, 1, 161, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa14 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru14 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont14 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru14)
OptimizeIL.Emit(OpCodes.Br, fa14)
OptimizeIL.MarkLabel(tru14)
OptimizeIL.MarkSequencePoint(doc3, 162, 1, 162, 100)
Dim locbldr19 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(NotOp))
locbldr19.SetLocalSymInfo("notop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(NotOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 19)
OptimizeIL.MarkSequencePoint(doc3, 163, 1, 163, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(NotOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(NotOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 164, 1, 164, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(NotOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(NotOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 165, 1, 165, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(NotOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 166, 1, 166, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 167, 1, 167, 100)
OptimizeIL.Emit(OpCodes.Br, cont14)
OptimizeIL.MarkLabel(fa14)
OptimizeIL.Emit(OpCodes.Br, cont14)
OptimizeIL.MarkLabel(cont14)
OptimizeIL.MarkSequencePoint(doc3, 170, 1, 170, 100)
Dim typ15(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ15(UBound(typ15) + 1)
typ15(UBound(typ15)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "!=")
Typ = GetType(System.String)
ReDim Preserve typ15(UBound(typ15) + 1)
typ15(UBound(typ15)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ15))
Typ = GetType(String).GetMethod("Compare", typ15).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 172, 1, 172, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa15 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru15 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont15 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru15)
OptimizeIL.Emit(OpCodes.Br, fa15)
OptimizeIL.MarkLabel(tru15)
OptimizeIL.MarkSequencePoint(doc3, 173, 1, 173, 100)
Dim locbldr20 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(NeqOp))
locbldr20.SetLocalSymInfo("neqop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(NeqOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 20)
OptimizeIL.MarkSequencePoint(doc3, 174, 1, 174, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(NeqOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(NeqOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 175, 1, 175, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(NeqOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(NeqOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 176, 1, 176, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(NeqOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 177, 1, 177, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 178, 1, 178, 100)
OptimizeIL.Emit(OpCodes.Br, cont15)
OptimizeIL.MarkLabel(fa15)
OptimizeIL.Emit(OpCodes.Br, cont15)
OptimizeIL.MarkLabel(cont15)
OptimizeIL.MarkSequencePoint(doc3, 180, 1, 180, 100)
Dim typ16(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ16(UBound(typ16) + 1)
typ16(UBound(typ16)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "notlike")
Typ = GetType(System.String)
ReDim Preserve typ16(UBound(typ16) + 1)
typ16(UBound(typ16)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ16))
Typ = GetType(String).GetMethod("Compare", typ16).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 182, 1, 182, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa16 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru16 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont16 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru16)
OptimizeIL.Emit(OpCodes.Br, fa16)
OptimizeIL.MarkLabel(tru16)
OptimizeIL.MarkSequencePoint(doc3, 183, 1, 183, 100)
Dim locbldr21 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(NLikeOp))
locbldr21.SetLocalSymInfo("nlkeop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(NLikeOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 21)
OptimizeIL.MarkSequencePoint(doc3, 184, 1, 184, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(NLikeOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(NLikeOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 185, 1, 185, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(NLikeOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(NLikeOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 186, 1, 186, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(NLikeOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 187, 1, 187, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 188, 1, 188, 100)
OptimizeIL.Emit(OpCodes.Br, cont16)
OptimizeIL.MarkLabel(fa16)
OptimizeIL.Emit(OpCodes.Br, cont16)
OptimizeIL.MarkLabel(cont16)
OptimizeIL.MarkSequencePoint(doc3, 190, 1, 190, 100)
Dim typ17(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ17(UBound(typ17) + 1)
typ17(UBound(typ17)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "<>")
Typ = GetType(System.String)
ReDim Preserve typ17(UBound(typ17) + 1)
typ17(UBound(typ17)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ17))
Typ = GetType(String).GetMethod("Compare", typ17).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 192, 1, 192, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa17 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru17 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont17 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru17)
OptimizeIL.Emit(OpCodes.Br, fa17)
OptimizeIL.MarkLabel(tru17)
OptimizeIL.MarkSequencePoint(doc3, 193, 1, 193, 100)
Dim locbldr22 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(NeqOp))
locbldr22.SetLocalSymInfo("neqop2")
OptimizeIL.Emit(OpCodes.Newobj, GetType(NeqOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 22)
OptimizeIL.MarkSequencePoint(doc3, 194, 1, 194, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(NeqOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(NeqOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 195, 1, 195, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(NeqOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(NeqOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 196, 1, 196, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(NeqOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 197, 1, 197, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 198, 1, 198, 100)
OptimizeIL.Emit(OpCodes.Br, cont17)
OptimizeIL.MarkLabel(fa17)
OptimizeIL.Emit(OpCodes.Br, cont17)
OptimizeIL.MarkLabel(cont17)
OptimizeIL.MarkSequencePoint(doc3, 201, 1, 201, 100)
Dim typ18(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ18(UBound(typ18) + 1)
typ18(UBound(typ18)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, ">=")
Typ = GetType(System.String)
ReDim Preserve typ18(UBound(typ18) + 1)
typ18(UBound(typ18)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ18))
Typ = GetType(String).GetMethod("Compare", typ18).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 203, 1, 203, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa18 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru18 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont18 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru18)
OptimizeIL.Emit(OpCodes.Br, fa18)
OptimizeIL.MarkLabel(tru18)
OptimizeIL.MarkSequencePoint(doc3, 204, 1, 204, 100)
Dim locbldr23 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(GeOp))
locbldr23.SetLocalSymInfo("geop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(GeOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 23)
OptimizeIL.MarkSequencePoint(doc3, 205, 1, 205, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 23)
Typ = GetType(GeOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(GeOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 206, 1, 206, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 23)
Typ = GetType(GeOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(GeOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 207, 1, 207, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 23)
Typ = GetType(GeOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 208, 1, 208, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 209, 1, 209, 100)
OptimizeIL.Emit(OpCodes.Br, cont18)
OptimizeIL.MarkLabel(fa18)
OptimizeIL.Emit(OpCodes.Br, cont18)
OptimizeIL.MarkLabel(cont18)
OptimizeIL.MarkSequencePoint(doc3, 211, 1, 211, 100)
Dim typ19(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ19(UBound(typ19) + 1)
typ19(UBound(typ19)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "<=")
Typ = GetType(System.String)
ReDim Preserve typ19(UBound(typ19) + 1)
typ19(UBound(typ19)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ19))
Typ = GetType(String).GetMethod("Compare", typ19).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 213, 1, 213, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa19 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru19 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont19 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru19)
OptimizeIL.Emit(OpCodes.Br, fa19)
OptimizeIL.MarkLabel(tru19)
OptimizeIL.MarkSequencePoint(doc3, 214, 1, 214, 100)
Dim locbldr24 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(LeOp))
locbldr24.SetLocalSymInfo("leop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(LeOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 24)
OptimizeIL.MarkSequencePoint(doc3, 215, 1, 215, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(LeOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(LeOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 216, 1, 216, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(LeOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(LeOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 217, 1, 217, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(LeOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 218, 1, 218, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 219, 1, 219, 100)
OptimizeIL.Emit(OpCodes.Br, cont19)
OptimizeIL.MarkLabel(fa19)
OptimizeIL.Emit(OpCodes.Br, cont19)
OptimizeIL.MarkLabel(cont19)
OptimizeIL.MarkSequencePoint(doc3, 221, 1, 221, 100)
Dim typ20(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ20(UBound(typ20) + 1)
typ20(UBound(typ20)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, ">")
Typ = GetType(System.String)
ReDim Preserve typ20(UBound(typ20) + 1)
typ20(UBound(typ20)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ20))
Typ = GetType(String).GetMethod("Compare", typ20).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 223, 1, 223, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa20 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru20 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont20 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru20)
OptimizeIL.Emit(OpCodes.Br, fa20)
OptimizeIL.MarkLabel(tru20)
OptimizeIL.MarkSequencePoint(doc3, 224, 1, 224, 100)
Dim locbldr25 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(GtOp))
locbldr25.SetLocalSymInfo("gtop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(GtOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 25)
OptimizeIL.MarkSequencePoint(doc3, 225, 1, 225, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(GtOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(GtOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 226, 1, 226, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(GtOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(GtOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 227, 1, 227, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(GtOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 228, 1, 228, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 229, 1, 229, 100)
OptimizeIL.Emit(OpCodes.Br, cont20)
OptimizeIL.MarkLabel(fa20)
OptimizeIL.Emit(OpCodes.Br, cont20)
OptimizeIL.MarkLabel(cont20)
OptimizeIL.MarkSequencePoint(doc3, 231, 1, 231, 100)
Dim typ21(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ21(UBound(typ21) + 1)
typ21(UBound(typ21)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "<")
Typ = GetType(System.String)
ReDim Preserve typ21(UBound(typ21) + 1)
typ21(UBound(typ21)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ21))
Typ = GetType(String).GetMethod("Compare", typ21).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 233, 1, 233, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa21 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru21 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont21 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru21)
OptimizeIL.Emit(OpCodes.Br, fa21)
OptimizeIL.MarkLabel(tru21)
OptimizeIL.MarkSequencePoint(doc3, 234, 1, 234, 100)
Dim locbldr26 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(LtOp))
locbldr26.SetLocalSymInfo("ltop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(LtOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 26)
OptimizeIL.MarkSequencePoint(doc3, 235, 1, 235, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 26)
Typ = GetType(LtOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(LtOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 236, 1, 236, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 26)
Typ = GetType(LtOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(LtOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 237, 1, 237, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 26)
Typ = GetType(LtOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 238, 1, 238, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 239, 1, 239, 100)
OptimizeIL.Emit(OpCodes.Br, cont21)
OptimizeIL.MarkLabel(fa21)
OptimizeIL.Emit(OpCodes.Br, cont21)
OptimizeIL.MarkLabel(cont21)
OptimizeIL.MarkSequencePoint(doc3, 241, 1, 241, 100)
Dim typ22(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ22(UBound(typ22) + 1)
typ22(UBound(typ22)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "and")
Typ = GetType(System.String)
ReDim Preserve typ22(UBound(typ22) + 1)
typ22(UBound(typ22)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ22))
Typ = GetType(String).GetMethod("Compare", typ22).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 243, 1, 243, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa22 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru22 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont22 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru22)
OptimizeIL.Emit(OpCodes.Br, fa22)
OptimizeIL.MarkLabel(tru22)
OptimizeIL.MarkSequencePoint(doc3, 244, 1, 244, 100)
Dim locbldr27 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(AndOp))
locbldr27.SetLocalSymInfo("andop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(AndOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 27)
OptimizeIL.MarkSequencePoint(doc3, 245, 1, 245, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 27)
Typ = GetType(AndOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(AndOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 246, 1, 246, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 27)
Typ = GetType(AndOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(AndOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 247, 1, 247, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 27)
Typ = GetType(AndOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 248, 1, 248, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 249, 1, 249, 100)
OptimizeIL.Emit(OpCodes.Br, cont22)
OptimizeIL.MarkLabel(fa22)
OptimizeIL.Emit(OpCodes.Br, cont22)
OptimizeIL.MarkLabel(cont22)
OptimizeIL.MarkSequencePoint(doc3, 251, 1, 251, 100)
Dim typ23(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ23(UBound(typ23) + 1)
typ23(UBound(typ23)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "or")
Typ = GetType(System.String)
ReDim Preserve typ23(UBound(typ23) + 1)
typ23(UBound(typ23)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ23))
Typ = GetType(String).GetMethod("Compare", typ23).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 253, 1, 253, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa23 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru23 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont23 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru23)
OptimizeIL.Emit(OpCodes.Br, fa23)
OptimizeIL.MarkLabel(tru23)
OptimizeIL.MarkSequencePoint(doc3, 254, 1, 254, 100)
Dim locbldr28 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(OrOp))
locbldr28.SetLocalSymInfo("orop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(OrOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 28)
OptimizeIL.MarkSequencePoint(doc3, 255, 1, 255, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(OrOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(OrOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 256, 1, 256, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(OrOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(OrOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 257, 1, 257, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(OrOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 258, 1, 258, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 259, 1, 259, 100)
OptimizeIL.Emit(OpCodes.Br, cont23)
OptimizeIL.MarkLabel(fa23)
OptimizeIL.Emit(OpCodes.Br, cont23)
OptimizeIL.MarkLabel(cont23)
OptimizeIL.MarkSequencePoint(doc3, 261, 1, 261, 100)
Dim typ24(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ24(UBound(typ24) + 1)
typ24(UBound(typ24)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "nand")
Typ = GetType(System.String)
ReDim Preserve typ24(UBound(typ24) + 1)
typ24(UBound(typ24)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ24))
Typ = GetType(String).GetMethod("Compare", typ24).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 263, 1, 263, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa24 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru24 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont24 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru24)
OptimizeIL.Emit(OpCodes.Br, fa24)
OptimizeIL.MarkLabel(tru24)
OptimizeIL.MarkSequencePoint(doc3, 264, 1, 264, 100)
Dim locbldr29 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(NandOp))
locbldr29.SetLocalSymInfo("nandop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(NandOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 29)
OptimizeIL.MarkSequencePoint(doc3, 265, 1, 265, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 29)
Typ = GetType(NandOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(NandOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 266, 1, 266, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 29)
Typ = GetType(NandOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(NandOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 267, 1, 267, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 29)
Typ = GetType(NandOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 268, 1, 268, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 269, 1, 269, 100)
OptimizeIL.Emit(OpCodes.Br, cont24)
OptimizeIL.MarkLabel(fa24)
OptimizeIL.Emit(OpCodes.Br, cont24)
OptimizeIL.MarkLabel(cont24)
OptimizeIL.MarkSequencePoint(doc3, 271, 1, 271, 100)
Dim typ25(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ25(UBound(typ25) + 1)
typ25(UBound(typ25)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "nor")
Typ = GetType(System.String)
ReDim Preserve typ25(UBound(typ25) + 1)
typ25(UBound(typ25)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ25))
Typ = GetType(String).GetMethod("Compare", typ25).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 273, 1, 273, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa25 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru25 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont25 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru25)
OptimizeIL.Emit(OpCodes.Br, fa25)
OptimizeIL.MarkLabel(tru25)
OptimizeIL.MarkSequencePoint(doc3, 274, 1, 274, 100)
Dim locbldr30 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(NorOp))
locbldr30.SetLocalSymInfo("norop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(NorOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 30)
OptimizeIL.MarkSequencePoint(doc3, 275, 1, 275, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 30)
Typ = GetType(NorOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(NorOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 276, 1, 276, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 30)
Typ = GetType(NorOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(NorOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 277, 1, 277, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 30)
Typ = GetType(NorOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 278, 1, 278, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 279, 1, 279, 100)
OptimizeIL.Emit(OpCodes.Br, cont25)
OptimizeIL.MarkLabel(fa25)
OptimizeIL.Emit(OpCodes.Br, cont25)
OptimizeIL.MarkLabel(cont25)
OptimizeIL.MarkSequencePoint(doc3, 282, 1, 282, 100)
Dim typ26(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ26(UBound(typ26) + 1)
typ26(UBound(typ26)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "xor")
Typ = GetType(System.String)
ReDim Preserve typ26(UBound(typ26) + 1)
typ26(UBound(typ26)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ26))
Typ = GetType(String).GetMethod("Compare", typ26).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 284, 1, 284, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa26 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru26 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont26 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru26)
OptimizeIL.Emit(OpCodes.Br, fa26)
OptimizeIL.MarkLabel(tru26)
OptimizeIL.MarkSequencePoint(doc3, 285, 1, 285, 100)
Dim locbldr31 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(XorOp))
locbldr31.SetLocalSymInfo("xorop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(XorOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 31)
OptimizeIL.MarkSequencePoint(doc3, 286, 1, 286, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(XorOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(XorOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 287, 1, 287, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(XorOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(XorOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 288, 1, 288, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(XorOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 289, 1, 289, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 290, 1, 290, 100)
OptimizeIL.Emit(OpCodes.Br, cont26)
OptimizeIL.MarkLabel(fa26)
OptimizeIL.Emit(OpCodes.Br, cont26)
OptimizeIL.MarkLabel(cont26)
OptimizeIL.MarkSequencePoint(doc3, 292, 1, 292, 100)
Dim typ27(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ27(UBound(typ27) + 1)
typ27(UBound(typ27)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "xnor")
Typ = GetType(System.String)
ReDim Preserve typ27(UBound(typ27) + 1)
typ27(UBound(typ27)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ27))
Typ = GetType(String).GetMethod("Compare", typ27).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 294, 1, 294, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa27 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru27 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont27 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru27)
OptimizeIL.Emit(OpCodes.Br, fa27)
OptimizeIL.MarkLabel(tru27)
OptimizeIL.MarkSequencePoint(doc3, 295, 1, 295, 100)
Dim locbldr32 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(XnorOp))
locbldr32.SetLocalSymInfo("xnorop")
OptimizeIL.Emit(OpCodes.Newobj, GetType(XnorOp).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 32)
OptimizeIL.MarkSequencePoint(doc3, 296, 1, 296, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 32)
Typ = GetType(XnorOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(XnorOp).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 297, 1, 297, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 32)
Typ = GetType(XnorOp)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(XnorOp).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 298, 1, 298, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 32)
Typ = GetType(XnorOp)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 299, 1, 299, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 300, 1, 300, 100)
OptimizeIL.Emit(OpCodes.Br, cont27)
OptimizeIL.MarkLabel(fa27)
OptimizeIL.Emit(OpCodes.Br, cont27)
OptimizeIL.MarkLabel(cont27)
OptimizeIL.MarkSequencePoint(doc3, 302, 1, 302, 100)
Dim typ28(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ28(UBound(typ28) + 1)
typ28(UBound(typ28)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "(")
Typ = GetType(System.String)
ReDim Preserve typ28(UBound(typ28) + 1)
typ28(UBound(typ28)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ28))
Typ = GetType(String).GetMethod("Compare", typ28).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 304, 1, 304, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa28 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru28 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont28 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru28)
OptimizeIL.Emit(OpCodes.Br, fa28)
OptimizeIL.MarkLabel(tru28)
OptimizeIL.MarkSequencePoint(doc3, 305, 1, 305, 100)
Dim locbldr33 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(LParen))
locbldr33.SetLocalSymInfo("lpar")
OptimizeIL.Emit(OpCodes.Newobj, GetType(LParen).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 33)
OptimizeIL.MarkSequencePoint(doc3, 306, 1, 306, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 33)
Typ = GetType(LParen)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(LParen).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 307, 1, 307, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 33)
Typ = GetType(LParen)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(LParen).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 308, 1, 308, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 33)
Typ = GetType(LParen)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 309, 1, 309, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 310, 1, 310, 100)
OptimizeIL.Emit(OpCodes.Br, cont28)
OptimizeIL.MarkLabel(fa28)
OptimizeIL.Emit(OpCodes.Br, cont28)
OptimizeIL.MarkLabel(cont28)
OptimizeIL.MarkSequencePoint(doc3, 312, 1, 312, 100)
Dim typ29(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ29(UBound(typ29) + 1)
typ29(UBound(typ29)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, ")")
Typ = GetType(System.String)
ReDim Preserve typ29(UBound(typ29) + 1)
typ29(UBound(typ29)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ29))
Typ = GetType(String).GetMethod("Compare", typ29).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 314, 1, 314, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa29 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru29 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont29 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru29)
OptimizeIL.Emit(OpCodes.Br, fa29)
OptimizeIL.MarkLabel(tru29)
OptimizeIL.MarkSequencePoint(doc3, 315, 1, 315, 100)
Dim locbldr34 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(RParen))
locbldr34.SetLocalSymInfo("rpar")
OptimizeIL.Emit(OpCodes.Newobj, GetType(RParen).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 34)
OptimizeIL.MarkSequencePoint(doc3, 316, 1, 316, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 34)
Typ = GetType(RParen)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(RParen).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 317, 1, 317, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 34)
Typ = GetType(RParen)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(RParen).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 318, 1, 318, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 34)
Typ = GetType(RParen)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 319, 1, 319, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 320, 1, 320, 100)
OptimizeIL.Emit(OpCodes.Br, cont29)
OptimizeIL.MarkLabel(fa29)
OptimizeIL.Emit(OpCodes.Br, cont29)
OptimizeIL.MarkLabel(cont29)
OptimizeIL.MarkSequencePoint(doc3, 322, 1, 322, 100)
Dim typ30(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ30(UBound(typ30) + 1)
typ30(UBound(typ30)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "[]")
Typ = GetType(System.String)
ReDim Preserve typ30(UBound(typ30) + 1)
typ30(UBound(typ30)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ30))
Typ = GetType(String).GetMethod("Compare", typ30).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 324, 1, 324, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa30 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru30 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont30 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru30)
OptimizeIL.Emit(OpCodes.Br, fa30)
OptimizeIL.MarkLabel(tru30)
OptimizeIL.MarkSequencePoint(doc3, 325, 1, 325, 100)
Dim locbldr35 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(LRSParen))
locbldr35.SetLocalSymInfo("lrspar")
OptimizeIL.Emit(OpCodes.Newobj, GetType(LRSParen).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 35)
OptimizeIL.MarkSequencePoint(doc3, 326, 1, 326, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(LRSParen)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(LRSParen).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 327, 1, 327, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(LRSParen)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(LRSParen).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 328, 1, 328, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(LRSParen)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 329, 1, 329, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 330, 1, 330, 100)
OptimizeIL.Emit(OpCodes.Br, cont30)
OptimizeIL.MarkLabel(fa30)
OptimizeIL.Emit(OpCodes.Br, cont30)
OptimizeIL.MarkLabel(cont30)
OptimizeIL.MarkSequencePoint(doc3, 332, 1, 332, 100)
Dim typ31(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ31(UBound(typ31) + 1)
typ31(UBound(typ31)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "&")
Typ = GetType(System.String)
ReDim Preserve typ31(UBound(typ31) + 1)
typ31(UBound(typ31)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ31))
Typ = GetType(String).GetMethod("Compare", typ31).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 334, 1, 334, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa31 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru31 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont31 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru31)
OptimizeIL.Emit(OpCodes.Br, fa31)
OptimizeIL.MarkLabel(tru31)
OptimizeIL.MarkSequencePoint(doc3, 335, 1, 335, 100)
Dim locbldr36 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(Ampersand))
locbldr36.SetLocalSymInfo("ampsig")
OptimizeIL.Emit(OpCodes.Newobj, GetType(Ampersand).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 36)
OptimizeIL.MarkSequencePoint(doc3, 336, 1, 336, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 36)
Typ = GetType(Ampersand)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(Ampersand).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 337, 1, 337, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 36)
Typ = GetType(Ampersand)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(Ampersand).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 338, 1, 338, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 36)
Typ = GetType(Ampersand)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 339, 1, 339, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 340, 1, 340, 100)
OptimizeIL.Emit(OpCodes.Br, cont31)
OptimizeIL.MarkLabel(fa31)
OptimizeIL.Emit(OpCodes.Br, cont31)
OptimizeIL.MarkLabel(cont31)
OptimizeIL.MarkSequencePoint(doc3, 342, 1, 342, 100)
Dim typ32(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ32(UBound(typ32) + 1)
typ32(UBound(typ32)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "[")
Typ = GetType(System.String)
ReDim Preserve typ32(UBound(typ32) + 1)
typ32(UBound(typ32)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ32))
Typ = GetType(String).GetMethod("Compare", typ32).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 344, 1, 344, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa32 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru32 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont32 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru32)
OptimizeIL.Emit(OpCodes.Br, fa32)
OptimizeIL.MarkLabel(tru32)
OptimizeIL.MarkSequencePoint(doc3, 345, 1, 345, 100)
Dim locbldr37 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(LSParen))
locbldr37.SetLocalSymInfo("lspar")
OptimizeIL.Emit(OpCodes.Newobj, GetType(LSParen).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 37)
OptimizeIL.MarkSequencePoint(doc3, 346, 1, 346, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 37)
Typ = GetType(LSParen)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(LSParen).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 347, 1, 347, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 37)
Typ = GetType(LSParen)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(LSParen).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 348, 1, 348, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 37)
Typ = GetType(LSParen)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 349, 1, 349, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 350, 1, 350, 100)
OptimizeIL.Emit(OpCodes.Br, cont32)
OptimizeIL.MarkLabel(fa32)
OptimizeIL.Emit(OpCodes.Br, cont32)
OptimizeIL.MarkLabel(cont32)
OptimizeIL.MarkSequencePoint(doc3, 352, 1, 352, 100)
Dim typ33(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ33(UBound(typ33) + 1)
typ33(UBound(typ33)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "]")
Typ = GetType(System.String)
ReDim Preserve typ33(UBound(typ33) + 1)
typ33(UBound(typ33)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ33))
Typ = GetType(String).GetMethod("Compare", typ33).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 354, 1, 354, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa33 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru33 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont33 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru33)
OptimizeIL.Emit(OpCodes.Br, fa33)
OptimizeIL.MarkLabel(tru33)
OptimizeIL.MarkSequencePoint(doc3, 355, 1, 355, 100)
Dim locbldr38 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(RSParen))
locbldr38.SetLocalSymInfo("rspar")
OptimizeIL.Emit(OpCodes.Newobj, GetType(RSParen).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 38)
OptimizeIL.MarkSequencePoint(doc3, 356, 1, 356, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(RSParen)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(RSParen).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 357, 1, 357, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(RSParen)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(RSParen).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 358, 1, 358, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(RSParen)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 359, 1, 359, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 360, 1, 360, 100)
OptimizeIL.Emit(OpCodes.Br, cont33)
OptimizeIL.MarkLabel(fa33)
OptimizeIL.Emit(OpCodes.Br, cont33)
OptimizeIL.MarkLabel(cont33)
OptimizeIL.MarkSequencePoint(doc3, 362, 1, 362, 100)
Dim typ34(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ34(UBound(typ34) + 1)
typ34(UBound(typ34)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "|")
Typ = GetType(System.String)
ReDim Preserve typ34(UBound(typ34) + 1)
typ34(UBound(typ34)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ34))
Typ = GetType(String).GetMethod("Compare", typ34).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 364, 1, 364, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa34 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru34 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont34 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru34)
OptimizeIL.Emit(OpCodes.Br, fa34)
OptimizeIL.MarkLabel(tru34)
OptimizeIL.MarkSequencePoint(doc3, 365, 1, 365, 100)
Dim locbldr39 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(Pipe))
locbldr39.SetLocalSymInfo("pip")
OptimizeIL.Emit(OpCodes.Newobj, GetType(Pipe).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 39)
OptimizeIL.MarkSequencePoint(doc3, 366, 1, 366, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(Pipe)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(Pipe).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 367, 1, 367, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(Pipe)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(Pipe).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 368, 1, 368, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(Pipe)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 369, 1, 369, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 370, 1, 370, 100)
OptimizeIL.Emit(OpCodes.Br, cont34)
OptimizeIL.MarkLabel(fa34)
OptimizeIL.Emit(OpCodes.Br, cont34)
OptimizeIL.MarkLabel(cont34)
OptimizeIL.MarkSequencePoint(doc3, 372, 1, 372, 100)
Dim typ35(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ35(UBound(typ35) + 1)
typ35(UBound(typ35)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, ",")
Typ = GetType(System.String)
ReDim Preserve typ35(UBound(typ35) + 1)
typ35(UBound(typ35)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ35))
Typ = GetType(String).GetMethod("Compare", typ35).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 374, 1, 374, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa35 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru35 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont35 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru35)
OptimizeIL.Emit(OpCodes.Br, fa35)
OptimizeIL.MarkLabel(tru35)
OptimizeIL.MarkSequencePoint(doc3, 375, 1, 375, 100)
Dim locbldr40 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(Comma))
locbldr40.SetLocalSymInfo("com")
OptimizeIL.Emit(OpCodes.Newobj, GetType(Comma).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 40)
OptimizeIL.MarkSequencePoint(doc3, 376, 1, 376, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(Comma)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(Comma).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 377, 1, 377, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(Comma)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(Comma).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 378, 1, 378, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(Comma)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 379, 1, 379, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 380, 1, 380, 100)
OptimizeIL.Emit(OpCodes.Br, cont35)
OptimizeIL.MarkLabel(fa35)
OptimizeIL.Emit(OpCodes.Br, cont35)
OptimizeIL.MarkLabel(cont35)
OptimizeIL.MarkSequencePoint(doc3, 382, 1, 382, 100)
Dim typ36(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ36(UBound(typ36) + 1)
typ36(UBound(typ36)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "$")
Typ = GetType(System.String)
ReDim Preserve typ36(UBound(typ36) + 1)
typ36(UBound(typ36)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ36))
Typ = GetType(String).GetMethod("Compare", typ36).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 384, 1, 384, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa36 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru36 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont36 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru36)
OptimizeIL.Emit(OpCodes.Br, fa36)
OptimizeIL.MarkLabel(tru36)
OptimizeIL.MarkSequencePoint(doc3, 385, 1, 385, 100)
Dim locbldr41 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(DollarSign))
locbldr41.SetLocalSymInfo("ds")
OptimizeIL.Emit(OpCodes.Newobj, GetType(DollarSign).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 41)
OptimizeIL.MarkSequencePoint(doc3, 386, 1, 386, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(DollarSign)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DollarSign).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 387, 1, 387, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(DollarSign)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DollarSign).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 388, 1, 388, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(DollarSign)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 389, 1, 389, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 390, 1, 390, 100)
OptimizeIL.Emit(OpCodes.Br, cont36)
OptimizeIL.MarkLabel(fa36)
OptimizeIL.Emit(OpCodes.Br, cont36)
OptimizeIL.MarkLabel(cont36)
OptimizeIL.MarkSequencePoint(doc3, 392, 1, 392, 100)
Dim typ37(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ37(UBound(typ37) + 1)
typ37(UBound(typ37)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "if")
Typ = GetType(System.String)
ReDim Preserve typ37(UBound(typ37) + 1)
typ37(UBound(typ37)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ37))
Typ = GetType(String).GetMethod("Compare", typ37).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 394, 1, 394, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa37 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru37 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont37 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru37)
OptimizeIL.Emit(OpCodes.Br, fa37)
OptimizeIL.MarkLabel(tru37)
OptimizeIL.MarkSequencePoint(doc3, 395, 1, 395, 100)
Dim locbldr42 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(IfTok))
locbldr42.SetLocalSymInfo("iftk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(IfTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 42)
OptimizeIL.MarkSequencePoint(doc3, 396, 1, 396, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(IfTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(IfTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 397, 1, 397, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(IfTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(IfTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 398, 1, 398, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(IfTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 399, 1, 399, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IfFlag"))
OptimizeIL.MarkSequencePoint(doc3, 400, 1, 400, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 401, 1, 401, 100)
OptimizeIL.Emit(OpCodes.Br, cont37)
OptimizeIL.MarkLabel(fa37)
OptimizeIL.Emit(OpCodes.Br, cont37)
OptimizeIL.MarkLabel(cont37)
OptimizeIL.MarkSequencePoint(doc3, 403, 1, 403, 100)
Dim typ38(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ38(UBound(typ38) + 1)
typ38(UBound(typ38)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "elseif")
Typ = GetType(System.String)
ReDim Preserve typ38(UBound(typ38) + 1)
typ38(UBound(typ38)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ38))
Typ = GetType(String).GetMethod("Compare", typ38).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 405, 1, 405, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa38 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru38 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont38 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru38)
OptimizeIL.Emit(OpCodes.Br, fa38)
OptimizeIL.MarkLabel(tru38)
OptimizeIL.MarkSequencePoint(doc3, 406, 1, 406, 100)
Dim locbldr43 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(ElseIfTok))
locbldr43.SetLocalSymInfo("eliftk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(ElseIfTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 43)
OptimizeIL.MarkSequencePoint(doc3, 407, 1, 407, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 43)
Typ = GetType(ElseIfTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ElseIfTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 408, 1, 408, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 43)
Typ = GetType(ElseIfTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ElseIfTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 409, 1, 409, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 43)
Typ = GetType(ElseIfTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 410, 1, 410, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IfFlag"))
OptimizeIL.MarkSequencePoint(doc3, 411, 1, 411, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 412, 1, 412, 100)
OptimizeIL.Emit(OpCodes.Br, cont38)
OptimizeIL.MarkLabel(fa38)
OptimizeIL.Emit(OpCodes.Br, cont38)
OptimizeIL.MarkLabel(cont38)
OptimizeIL.MarkSequencePoint(doc3, 414, 1, 414, 100)
Dim typ39(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ39(UBound(typ39) + 1)
typ39(UBound(typ39)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "else")
Typ = GetType(System.String)
ReDim Preserve typ39(UBound(typ39) + 1)
typ39(UBound(typ39)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ39))
Typ = GetType(String).GetMethod("Compare", typ39).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 416, 1, 416, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa39 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru39 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont39 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru39)
OptimizeIL.Emit(OpCodes.Br, fa39)
OptimizeIL.MarkLabel(tru39)
OptimizeIL.MarkSequencePoint(doc3, 417, 1, 417, 100)
Dim locbldr44 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(ElseTok))
locbldr44.SetLocalSymInfo("elsetk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(ElseTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 44)
OptimizeIL.MarkSequencePoint(doc3, 418, 1, 418, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 44)
Typ = GetType(ElseTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ElseTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 419, 1, 419, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 44)
Typ = GetType(ElseTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ElseTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 420, 1, 420, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 44)
Typ = GetType(ElseTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 421, 1, 421, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 422, 1, 422, 100)
OptimizeIL.Emit(OpCodes.Br, cont39)
OptimizeIL.MarkLabel(fa39)
OptimizeIL.Emit(OpCodes.Br, cont39)
OptimizeIL.MarkLabel(cont39)
OptimizeIL.MarkSequencePoint(doc3, 424, 1, 424, 100)
Dim typ40(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ40(UBound(typ40) + 1)
typ40(UBound(typ40)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "then")
Typ = GetType(System.String)
ReDim Preserve typ40(UBound(typ40) + 1)
typ40(UBound(typ40)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ40))
Typ = GetType(String).GetMethod("Compare", typ40).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 426, 1, 426, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa40 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru40 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont40 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru40)
OptimizeIL.Emit(OpCodes.Br, fa40)
OptimizeIL.MarkLabel(tru40)
OptimizeIL.MarkSequencePoint(doc3, 427, 1, 427, 100)
Dim locbldr45 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(ThenTok))
locbldr45.SetLocalSymInfo("thentk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(ThenTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 45)
OptimizeIL.MarkSequencePoint(doc3, 428, 1, 428, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(ThenTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ThenTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 429, 1, 429, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(ThenTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ThenTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 430, 1, 430, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(ThenTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 431, 1, 431, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IfFlag"))
OptimizeIL.MarkSequencePoint(doc3, 432, 1, 432, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 433, 1, 433, 100)
OptimizeIL.Emit(OpCodes.Br, cont40)
OptimizeIL.MarkLabel(fa40)
OptimizeIL.Emit(OpCodes.Br, cont40)
OptimizeIL.MarkLabel(cont40)
OptimizeIL.MarkSequencePoint(doc3, 435, 1, 435, 100)
Dim typ41(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ41(UBound(typ41) + 1)
typ41(UBound(typ41)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "new")
Typ = GetType(System.String)
ReDim Preserve typ41(UBound(typ41) + 1)
typ41(UBound(typ41)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ41))
Typ = GetType(String).GetMethod("Compare", typ41).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 437, 1, 437, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa41 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru41 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont41 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru41)
OptimizeIL.Emit(OpCodes.Br, fa41)
OptimizeIL.MarkLabel(tru41)
OptimizeIL.MarkSequencePoint(doc3, 438, 1, 438, 100)
Dim locbldr46 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(NewTok))
locbldr46.SetLocalSymInfo("newtk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(NewTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 46)
OptimizeIL.MarkSequencePoint(doc3, 439, 1, 439, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 46)
Typ = GetType(NewTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(NewTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 440, 1, 440, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 46)
Typ = GetType(NewTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(NewTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 441, 1, 441, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 46)
Typ = GetType(NewTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 442, 1, 442, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 443, 1, 443, 100)
OptimizeIL.Emit(OpCodes.Br, cont41)
OptimizeIL.MarkLabel(fa41)
OptimizeIL.Emit(OpCodes.Br, cont41)
OptimizeIL.MarkLabel(cont41)
OptimizeIL.MarkSequencePoint(doc3, 445, 1, 445, 100)
Dim typ42(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ42(UBound(typ42) + 1)
typ42(UBound(typ42)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "gettype")
Typ = GetType(System.String)
ReDim Preserve typ42(UBound(typ42) + 1)
typ42(UBound(typ42)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ42))
Typ = GetType(String).GetMethod("Compare", typ42).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 447, 1, 447, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa42 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru42 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont42 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru42)
OptimizeIL.Emit(OpCodes.Br, fa42)
OptimizeIL.MarkLabel(tru42)
OptimizeIL.MarkSequencePoint(doc3, 448, 1, 448, 100)
Dim locbldr47 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(GettypeTok))
locbldr47.SetLocalSymInfo("gttk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(GettypeTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 47)
OptimizeIL.MarkSequencePoint(doc3, 449, 1, 449, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 47)
Typ = GetType(GettypeTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(GettypeTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 450, 1, 450, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 47)
Typ = GetType(GettypeTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(GettypeTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 451, 1, 451, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 47)
Typ = GetType(GettypeTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 452, 1, 452, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 453, 1, 453, 100)
OptimizeIL.Emit(OpCodes.Br, cont42)
OptimizeIL.MarkLabel(fa42)
OptimizeIL.Emit(OpCodes.Br, cont42)
OptimizeIL.MarkLabel(cont42)
OptimizeIL.MarkSequencePoint(doc3, 455, 1, 455, 100)
Dim typ43(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ43(UBound(typ43) + 1)
typ43(UBound(typ43)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "#refasm")
Typ = GetType(System.String)
ReDim Preserve typ43(UBound(typ43) + 1)
typ43(UBound(typ43)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ43))
Typ = GetType(String).GetMethod("Compare", typ43).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 457, 1, 457, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa43 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru43 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont43 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru43)
OptimizeIL.Emit(OpCodes.Br, fa43)
OptimizeIL.MarkLabel(tru43)
OptimizeIL.MarkSequencePoint(doc3, 458, 1, 458, 100)
Dim locbldr48 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(RefasmTok))
locbldr48.SetLocalSymInfo("ratk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(RefasmTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 48)
OptimizeIL.MarkSequencePoint(doc3, 459, 1, 459, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 48)
Typ = GetType(RefasmTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(RefasmTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 460, 1, 460, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 48)
Typ = GetType(RefasmTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(RefasmTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 461, 1, 461, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 48)
Typ = GetType(RefasmTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 462, 1, 462, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("NoOptFlag"))
OptimizeIL.MarkSequencePoint(doc3, 463, 1, 463, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 464, 1, 464, 100)
OptimizeIL.Emit(OpCodes.Br, cont43)
OptimizeIL.MarkLabel(fa43)
OptimizeIL.Emit(OpCodes.Br, cont43)
OptimizeIL.MarkLabel(cont43)
OptimizeIL.MarkSequencePoint(doc3, 466, 1, 466, 100)
Dim typ44(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ44(UBound(typ44) + 1)
typ44(UBound(typ44)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "#debug")
Typ = GetType(System.String)
ReDim Preserve typ44(UBound(typ44) + 1)
typ44(UBound(typ44)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ44))
Typ = GetType(String).GetMethod("Compare", typ44).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 468, 1, 468, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa44 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru44 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont44 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru44)
OptimizeIL.Emit(OpCodes.Br, fa44)
OptimizeIL.MarkLabel(tru44)
OptimizeIL.MarkSequencePoint(doc3, 469, 1, 469, 100)
Dim locbldr49 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(DebugTok))
locbldr49.SetLocalSymInfo("dgtk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(DebugTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 49)
OptimizeIL.MarkSequencePoint(doc3, 470, 1, 470, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 49)
Typ = GetType(DebugTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DebugTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 471, 1, 471, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 49)
Typ = GetType(DebugTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DebugTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 472, 1, 472, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 49)
Typ = GetType(DebugTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 473, 1, 473, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 474, 1, 474, 100)
OptimizeIL.Emit(OpCodes.Br, cont44)
OptimizeIL.MarkLabel(fa44)
OptimizeIL.Emit(OpCodes.Br, cont44)
OptimizeIL.MarkLabel(cont44)
OptimizeIL.MarkSequencePoint(doc3, 476, 1, 476, 100)
Dim typ45(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ45(UBound(typ45) + 1)
typ45(UBound(typ45)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "import")
Typ = GetType(System.String)
ReDim Preserve typ45(UBound(typ45) + 1)
typ45(UBound(typ45)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ45))
Typ = GetType(String).GetMethod("Compare", typ45).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 478, 1, 478, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa45 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru45 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont45 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru45)
OptimizeIL.Emit(OpCodes.Br, fa45)
OptimizeIL.MarkLabel(tru45)
OptimizeIL.MarkSequencePoint(doc3, 479, 1, 479, 100)
Dim locbldr50 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(ImportTok))
locbldr50.SetLocalSymInfo("imptk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(ImportTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 50)
OptimizeIL.MarkSequencePoint(doc3, 480, 1, 480, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 50)
Typ = GetType(ImportTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ImportTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 481, 1, 481, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 50)
Typ = GetType(ImportTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ImportTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 482, 1, 482, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 50)
Typ = GetType(ImportTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 483, 1, 483, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("NoOptFlag"))
OptimizeIL.MarkSequencePoint(doc3, 484, 1, 484, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 485, 1, 485, 100)
OptimizeIL.Emit(OpCodes.Br, cont45)
OptimizeIL.MarkLabel(fa45)
OptimizeIL.Emit(OpCodes.Br, cont45)
OptimizeIL.MarkLabel(cont45)
OptimizeIL.MarkSequencePoint(doc3, 487, 1, 487, 100)
Dim typ46(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ46(UBound(typ46) + 1)
typ46(UBound(typ46)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "locimport")
Typ = GetType(System.String)
ReDim Preserve typ46(UBound(typ46) + 1)
typ46(UBound(typ46)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ46))
Typ = GetType(String).GetMethod("Compare", typ46).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 489, 1, 489, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa46 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru46 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont46 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru46)
OptimizeIL.Emit(OpCodes.Br, fa46)
OptimizeIL.MarkLabel(tru46)
OptimizeIL.MarkSequencePoint(doc3, 490, 1, 490, 100)
Dim locbldr51 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(LocimportTok))
locbldr51.SetLocalSymInfo("limptk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(LocimportTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 51)
OptimizeIL.MarkSequencePoint(doc3, 491, 1, 491, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 51)
Typ = GetType(LocimportTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(LocimportTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 492, 1, 492, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 51)
Typ = GetType(LocimportTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(LocimportTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 493, 1, 493, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 51)
Typ = GetType(LocimportTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 494, 1, 494, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("NoOptFlag"))
OptimizeIL.MarkSequencePoint(doc3, 495, 1, 495, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 496, 1, 496, 100)
OptimizeIL.Emit(OpCodes.Br, cont46)
OptimizeIL.MarkLabel(fa46)
OptimizeIL.Emit(OpCodes.Br, cont46)
OptimizeIL.MarkLabel(cont46)
OptimizeIL.MarkSequencePoint(doc3, 498, 1, 498, 100)
Dim typ47(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ47(UBound(typ47) + 1)
typ47(UBound(typ47)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "assembly")
Typ = GetType(System.String)
ReDim Preserve typ47(UBound(typ47) + 1)
typ47(UBound(typ47)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ47))
Typ = GetType(String).GetMethod("Compare", typ47).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 500, 1, 500, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa47 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru47 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont47 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru47)
OptimizeIL.Emit(OpCodes.Br, fa47)
OptimizeIL.MarkLabel(tru47)
OptimizeIL.MarkSequencePoint(doc3, 501, 1, 501, 100)
Dim locbldr52 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(AssemblyTok))
locbldr52.SetLocalSymInfo("asmtk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(AssemblyTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 52)
OptimizeIL.MarkSequencePoint(doc3, 502, 1, 502, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(AssemblyTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(AssemblyTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 503, 1, 503, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(AssemblyTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(AssemblyTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 504, 1, 504, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(AssemblyTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 505, 1, 505, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 506, 1, 506, 100)
OptimizeIL.Emit(OpCodes.Br, cont47)
OptimizeIL.MarkLabel(fa47)
OptimizeIL.Emit(OpCodes.Br, cont47)
OptimizeIL.MarkLabel(cont47)
OptimizeIL.MarkSequencePoint(doc3, 508, 1, 508, 100)
Dim typ48(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ48(UBound(typ48) + 1)
typ48(UBound(typ48)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "ver")
Typ = GetType(System.String)
ReDim Preserve typ48(UBound(typ48) + 1)
typ48(UBound(typ48)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ48))
Typ = GetType(String).GetMethod("Compare", typ48).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 510, 1, 510, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa48 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru48 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont48 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru48)
OptimizeIL.Emit(OpCodes.Br, fa48)
OptimizeIL.MarkLabel(tru48)
OptimizeIL.MarkSequencePoint(doc3, 511, 1, 511, 100)
Dim locbldr53 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(VerTok))
locbldr53.SetLocalSymInfo("vertk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(VerTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 53)
OptimizeIL.MarkSequencePoint(doc3, 512, 1, 512, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 53)
Typ = GetType(VerTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(VerTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 513, 1, 513, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 53)
Typ = GetType(VerTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(VerTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 514, 1, 514, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 53)
Typ = GetType(VerTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 515, 1, 515, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("NoOptFlag"))
OptimizeIL.MarkSequencePoint(doc3, 516, 1, 516, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 517, 1, 517, 100)
OptimizeIL.Emit(OpCodes.Br, cont48)
OptimizeIL.MarkLabel(fa48)
OptimizeIL.Emit(OpCodes.Br, cont48)
OptimizeIL.MarkLabel(cont48)
OptimizeIL.MarkSequencePoint(doc3, 519, 1, 519, 100)
Dim typ49(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ49(UBound(typ49) + 1)
typ49(UBound(typ49)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "on")
Typ = GetType(System.String)
ReDim Preserve typ49(UBound(typ49) + 1)
typ49(UBound(typ49)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ49))
Typ = GetType(String).GetMethod("Compare", typ49).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 521, 1, 521, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa49 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru49 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont49 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru49)
OptimizeIL.Emit(OpCodes.Br, fa49)
OptimizeIL.MarkLabel(tru49)
OptimizeIL.MarkSequencePoint(doc3, 522, 1, 522, 100)
Dim locbldr54 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(OnTok))
locbldr54.SetLocalSymInfo("ontk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(OnTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 54)
OptimizeIL.MarkSequencePoint(doc3, 523, 1, 523, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 54)
Typ = GetType(OnTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(OnTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 524, 1, 524, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 54)
Typ = GetType(OnTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(OnTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 525, 1, 525, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 54)
Typ = GetType(OnTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 526, 1, 526, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 527, 1, 527, 100)
OptimizeIL.Emit(OpCodes.Br, cont49)
OptimizeIL.MarkLabel(fa49)
OptimizeIL.Emit(OpCodes.Br, cont49)
OptimizeIL.MarkLabel(cont49)
OptimizeIL.MarkSequencePoint(doc3, 529, 1, 529, 100)
Dim typ50(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ50(UBound(typ50) + 1)
typ50(UBound(typ50)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "off")
Typ = GetType(System.String)
ReDim Preserve typ50(UBound(typ50) + 1)
typ50(UBound(typ50)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ50))
Typ = GetType(String).GetMethod("Compare", typ50).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 531, 1, 531, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa50 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru50 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont50 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru50)
OptimizeIL.Emit(OpCodes.Br, fa50)
OptimizeIL.MarkLabel(tru50)
OptimizeIL.MarkSequencePoint(doc3, 532, 1, 532, 100)
Dim locbldr55 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(OffTok))
locbldr55.SetLocalSymInfo("offtk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(OffTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 55)
OptimizeIL.MarkSequencePoint(doc3, 533, 1, 533, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 55)
Typ = GetType(OffTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(OffTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 534, 1, 534, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 55)
Typ = GetType(OffTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(OffTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 535, 1, 535, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 55)
Typ = GetType(OffTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 536, 1, 536, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 537, 1, 537, 100)
OptimizeIL.Emit(OpCodes.Br, cont50)
OptimizeIL.MarkLabel(fa50)
OptimizeIL.Emit(OpCodes.Br, cont50)
OptimizeIL.MarkLabel(cont50)
OptimizeIL.MarkSequencePoint(doc3, 539, 1, 539, 100)
Dim typ51(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ51(UBound(typ51) + 1)
typ51(UBound(typ51)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "exe")
Typ = GetType(System.String)
ReDim Preserve typ51(UBound(typ51) + 1)
typ51(UBound(typ51)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ51))
Typ = GetType(String).GetMethod("Compare", typ51).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 541, 1, 541, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa51 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru51 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont51 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru51)
OptimizeIL.Emit(OpCodes.Br, fa51)
OptimizeIL.MarkLabel(tru51)
OptimizeIL.MarkSequencePoint(doc3, 542, 1, 542, 100)
Dim locbldr56 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(ExeTok))
locbldr56.SetLocalSymInfo("extk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(ExeTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 56)
OptimizeIL.MarkSequencePoint(doc3, 543, 1, 543, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 56)
Typ = GetType(ExeTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ExeTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 544, 1, 544, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 56)
Typ = GetType(ExeTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ExeTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 545, 1, 545, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 56)
Typ = GetType(ExeTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 546, 1, 546, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 547, 1, 547, 100)
OptimizeIL.Emit(OpCodes.Br, cont51)
OptimizeIL.MarkLabel(fa51)
OptimizeIL.Emit(OpCodes.Br, cont51)
OptimizeIL.MarkLabel(cont51)
OptimizeIL.MarkSequencePoint(doc3, 549, 1, 549, 100)
Dim typ52(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ52(UBound(typ52) + 1)
typ52(UBound(typ52)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "dll")
Typ = GetType(System.String)
ReDim Preserve typ52(UBound(typ52) + 1)
typ52(UBound(typ52)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ52))
Typ = GetType(String).GetMethod("Compare", typ52).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 551, 1, 551, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa52 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru52 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont52 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru52)
OptimizeIL.Emit(OpCodes.Br, fa52)
OptimizeIL.MarkLabel(tru52)
OptimizeIL.MarkSequencePoint(doc3, 552, 1, 552, 100)
Dim locbldr57 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(DllTok))
locbldr57.SetLocalSymInfo("dltk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(DllTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 57)
OptimizeIL.MarkSequencePoint(doc3, 553, 1, 553, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 57)
Typ = GetType(DllTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DllTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 554, 1, 554, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 57)
Typ = GetType(DllTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DllTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 555, 1, 555, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 57)
Typ = GetType(DllTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 556, 1, 556, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 557, 1, 557, 100)
OptimizeIL.Emit(OpCodes.Br, cont52)
OptimizeIL.MarkLabel(fa52)
OptimizeIL.Emit(OpCodes.Br, cont52)
OptimizeIL.MarkLabel(cont52)
OptimizeIL.MarkSequencePoint(doc3, 559, 1, 559, 100)
Dim typ53(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ53(UBound(typ53) + 1)
typ53(UBound(typ53)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "field")
Typ = GetType(System.String)
ReDim Preserve typ53(UBound(typ53) + 1)
typ53(UBound(typ53)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ53))
Typ = GetType(String).GetMethod("Compare", typ53).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 561, 1, 561, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa53 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru53 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont53 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru53)
OptimizeIL.Emit(OpCodes.Br, fa53)
OptimizeIL.MarkLabel(tru53)
OptimizeIL.MarkSequencePoint(doc3, 562, 1, 562, 100)
Dim locbldr58 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(FieldTok))
locbldr58.SetLocalSymInfo("fltk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(FieldTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 58)
OptimizeIL.MarkSequencePoint(doc3, 563, 1, 563, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 58)
Typ = GetType(FieldTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(FieldTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 564, 1, 564, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 58)
Typ = GetType(FieldTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(FieldTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 565, 1, 565, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 58)
Typ = GetType(FieldTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 566, 1, 566, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 567, 1, 567, 100)
OptimizeIL.Emit(OpCodes.Br, cont53)
OptimizeIL.MarkLabel(fa53)
OptimizeIL.Emit(OpCodes.Br, cont53)
OptimizeIL.MarkLabel(cont53)
OptimizeIL.MarkSequencePoint(doc3, 569, 1, 569, 100)
Dim typ54(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ54(UBound(typ54) + 1)
typ54(UBound(typ54)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "class")
Typ = GetType(System.String)
ReDim Preserve typ54(UBound(typ54) + 1)
typ54(UBound(typ54)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ54))
Typ = GetType(String).GetMethod("Compare", typ54).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 571, 1, 571, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa54 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru54 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont54 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru54)
OptimizeIL.Emit(OpCodes.Br, fa54)
OptimizeIL.MarkLabel(tru54)
OptimizeIL.MarkSequencePoint(doc3, 572, 1, 572, 100)
Dim locbldr59 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(ClassTok))
locbldr59.SetLocalSymInfo("cltk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(ClassTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 59)
OptimizeIL.MarkSequencePoint(doc3, 573, 1, 573, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 59)
Typ = GetType(ClassTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ClassTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 574, 1, 574, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 59)
Typ = GetType(ClassTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ClassTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 575, 1, 575, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 59)
Typ = GetType(ClassTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 576, 1, 576, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 577, 1, 577, 100)
OptimizeIL.Emit(OpCodes.Br, cont54)
OptimizeIL.MarkLabel(fa54)
OptimizeIL.Emit(OpCodes.Br, cont54)
OptimizeIL.MarkLabel(cont54)
OptimizeIL.MarkSequencePoint(doc3, 579, 1, 579, 100)
Dim typ55(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ55(UBound(typ55) + 1)
typ55(UBound(typ55)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "extends")
Typ = GetType(System.String)
ReDim Preserve typ55(UBound(typ55) + 1)
typ55(UBound(typ55)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ55))
Typ = GetType(String).GetMethod("Compare", typ55).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 581, 1, 581, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa55 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru55 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont55 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru55)
OptimizeIL.Emit(OpCodes.Br, fa55)
OptimizeIL.MarkLabel(tru55)
OptimizeIL.MarkSequencePoint(doc3, 582, 1, 582, 100)
Dim locbldr60 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(ExtendsTok))
locbldr60.SetLocalSymInfo("exttk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(ExtendsTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 60)
OptimizeIL.MarkSequencePoint(doc3, 583, 1, 583, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 60)
Typ = GetType(ExtendsTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ExtendsTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 584, 1, 584, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 60)
Typ = GetType(ExtendsTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ExtendsTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 585, 1, 585, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 60)
Typ = GetType(ExtendsTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 586, 1, 586, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 587, 1, 587, 100)
OptimizeIL.Emit(OpCodes.Br, cont55)
OptimizeIL.MarkLabel(fa55)
OptimizeIL.Emit(OpCodes.Br, cont55)
OptimizeIL.MarkLabel(cont55)
OptimizeIL.MarkSequencePoint(doc3, 589, 1, 589, 100)
Dim typ56(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ56(UBound(typ56) + 1)
typ56(UBound(typ56)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "method")
Typ = GetType(System.String)
ReDim Preserve typ56(UBound(typ56) + 1)
typ56(UBound(typ56)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ56))
Typ = GetType(String).GetMethod("Compare", typ56).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 591, 1, 591, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa56 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru56 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont56 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru56)
OptimizeIL.Emit(OpCodes.Br, fa56)
OptimizeIL.MarkLabel(tru56)
OptimizeIL.MarkSequencePoint(doc3, 592, 1, 592, 100)
Dim locbldr61 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(MethodTok))
locbldr61.SetLocalSymInfo("mettk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(MethodTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 61)
OptimizeIL.MarkSequencePoint(doc3, 593, 1, 593, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 61)
Typ = GetType(MethodTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(MethodTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 594, 1, 594, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 61)
Typ = GetType(MethodTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(MethodTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 595, 1, 595, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 61)
Typ = GetType(MethodTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 596, 1, 596, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 597, 1, 597, 100)
OptimizeIL.Emit(OpCodes.Br, cont56)
OptimizeIL.MarkLabel(fa56)
OptimizeIL.Emit(OpCodes.Br, cont56)
OptimizeIL.MarkLabel(cont56)
OptimizeIL.MarkSequencePoint(doc3, 599, 1, 599, 100)
Dim typ57(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ57(UBound(typ57) + 1)
typ57(UBound(typ57)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "end")
Typ = GetType(System.String)
ReDim Preserve typ57(UBound(typ57) + 1)
typ57(UBound(typ57)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ57))
Typ = GetType(String).GetMethod("Compare", typ57).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 601, 1, 601, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa57 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru57 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont57 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru57)
OptimizeIL.Emit(OpCodes.Br, fa57)
OptimizeIL.MarkLabel(tru57)
OptimizeIL.MarkSequencePoint(doc3, 602, 1, 602, 100)
Dim locbldr62 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(EndTok))
locbldr62.SetLocalSymInfo("entk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(EndTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 62)
OptimizeIL.MarkSequencePoint(doc3, 603, 1, 603, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 62)
Typ = GetType(EndTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(EndTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 604, 1, 604, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 62)
Typ = GetType(EndTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(EndTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 605, 1, 605, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 62)
Typ = GetType(EndTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 606, 1, 606, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 607, 1, 607, 100)
OptimizeIL.Emit(OpCodes.Br, cont57)
OptimizeIL.MarkLabel(fa57)
OptimizeIL.Emit(OpCodes.Br, cont57)
OptimizeIL.MarkLabel(cont57)
OptimizeIL.MarkSequencePoint(doc3, 609, 1, 609, 100)
Dim typ58(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ58(UBound(typ58) + 1)
typ58(UBound(typ58)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "var")
Typ = GetType(System.String)
ReDim Preserve typ58(UBound(typ58) + 1)
typ58(UBound(typ58)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ58))
Typ = GetType(String).GetMethod("Compare", typ58).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 611, 1, 611, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa58 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru58 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont58 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru58)
OptimizeIL.Emit(OpCodes.Br, fa58)
OptimizeIL.MarkLabel(tru58)
OptimizeIL.MarkSequencePoint(doc3, 612, 1, 612, 100)
Dim locbldr63 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(VarTok))
locbldr63.SetLocalSymInfo("vrtk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(VarTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 63)
OptimizeIL.MarkSequencePoint(doc3, 613, 1, 613, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 63)
Typ = GetType(VarTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(VarTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 614, 1, 614, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 63)
Typ = GetType(VarTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(VarTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 615, 1, 615, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 63)
Typ = GetType(VarTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 616, 1, 616, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 617, 1, 617, 100)
OptimizeIL.Emit(OpCodes.Br, cont58)
OptimizeIL.MarkLabel(fa58)
OptimizeIL.Emit(OpCodes.Br, cont58)
OptimizeIL.MarkLabel(cont58)
OptimizeIL.MarkSequencePoint(doc3, 619, 1, 619, 100)
Dim typ59(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ59(UBound(typ59) + 1)
typ59(UBound(typ59)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "as")
Typ = GetType(System.String)
ReDim Preserve typ59(UBound(typ59) + 1)
typ59(UBound(typ59)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ59))
Typ = GetType(String).GetMethod("Compare", typ59).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 621, 1, 621, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa59 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru59 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont59 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru59)
OptimizeIL.Emit(OpCodes.Br, fa59)
OptimizeIL.MarkLabel(tru59)
OptimizeIL.MarkSequencePoint(doc3, 622, 1, 622, 100)
Dim locbldr64 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(AsTok))
locbldr64.SetLocalSymInfo("astk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(AsTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 64)
OptimizeIL.MarkSequencePoint(doc3, 623, 1, 623, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 64)
Typ = GetType(AsTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(AsTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 624, 1, 624, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 64)
Typ = GetType(AsTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(AsTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 625, 1, 625, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 64)
Typ = GetType(AsTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 626, 1, 626, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 627, 1, 627, 100)
OptimizeIL.Emit(OpCodes.Br, cont59)
OptimizeIL.MarkLabel(fa59)
OptimizeIL.Emit(OpCodes.Br, cont59)
OptimizeIL.MarkLabel(cont59)
OptimizeIL.MarkSequencePoint(doc3, 629, 1, 629, 100)
Dim typ60(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ60(UBound(typ60) + 1)
typ60(UBound(typ60)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "of")
Typ = GetType(System.String)
ReDim Preserve typ60(UBound(typ60) + 1)
typ60(UBound(typ60)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ60))
Typ = GetType(String).GetMethod("Compare", typ60).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 631, 1, 631, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa60 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru60 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont60 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru60)
OptimizeIL.Emit(OpCodes.Br, fa60)
OptimizeIL.MarkLabel(tru60)
OptimizeIL.MarkSequencePoint(doc3, 632, 1, 632, 100)
Dim locbldr65 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(OfTok))
locbldr65.SetLocalSymInfo("oftk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(OfTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 65)
OptimizeIL.MarkSequencePoint(doc3, 633, 1, 633, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 65)
Typ = GetType(OfTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(OfTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 634, 1, 634, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 65)
Typ = GetType(OfTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(OfTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 635, 1, 635, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 65)
Typ = GetType(OfTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 636, 1, 636, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 637, 1, 637, 100)
OptimizeIL.Emit(OpCodes.Br, cont60)
OptimizeIL.MarkLabel(fa60)
OptimizeIL.Emit(OpCodes.Br, cont60)
OptimizeIL.MarkLabel(cont60)
OptimizeIL.MarkSequencePoint(doc3, 639, 1, 639, 100)
Dim typ61(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ61(UBound(typ61) + 1)
typ61(UBound(typ61)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "private")
Typ = GetType(System.String)
ReDim Preserve typ61(UBound(typ61) + 1)
typ61(UBound(typ61)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ61))
Typ = GetType(String).GetMethod("Compare", typ61).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 641, 1, 641, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa61 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru61 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont61 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru61)
OptimizeIL.Emit(OpCodes.Br, fa61)
OptimizeIL.MarkLabel(tru61)
OptimizeIL.MarkSequencePoint(doc3, 642, 1, 642, 100)
Dim locbldr66 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(PrivateAttr))
locbldr66.SetLocalSymInfo("privattr")
OptimizeIL.Emit(OpCodes.Newobj, GetType(PrivateAttr).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 66)
OptimizeIL.MarkSequencePoint(doc3, 643, 1, 643, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 66)
Typ = GetType(PrivateAttr)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(PrivateAttr).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 644, 1, 644, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 66)
Typ = GetType(PrivateAttr)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(PrivateAttr).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 645, 1, 645, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 66)
Typ = GetType(PrivateAttr)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 646, 1, 646, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 647, 1, 647, 100)
OptimizeIL.Emit(OpCodes.Br, cont61)
OptimizeIL.MarkLabel(fa61)
OptimizeIL.Emit(OpCodes.Br, cont61)
OptimizeIL.MarkLabel(cont61)
OptimizeIL.MarkSequencePoint(doc3, 649, 1, 649, 100)
Dim typ62(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ62(UBound(typ62) + 1)
typ62(UBound(typ62)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "public")
Typ = GetType(System.String)
ReDim Preserve typ62(UBound(typ62) + 1)
typ62(UBound(typ62)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ62))
Typ = GetType(String).GetMethod("Compare", typ62).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 651, 1, 651, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa62 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru62 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont62 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru62)
OptimizeIL.Emit(OpCodes.Br, fa62)
OptimizeIL.MarkLabel(tru62)
OptimizeIL.MarkSequencePoint(doc3, 652, 1, 652, 100)
Dim locbldr67 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(PublicAttr))
locbldr67.SetLocalSymInfo("pubattr")
OptimizeIL.Emit(OpCodes.Newobj, GetType(PublicAttr).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 67)
OptimizeIL.MarkSequencePoint(doc3, 653, 1, 653, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 67)
Typ = GetType(PublicAttr)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(PublicAttr).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 654, 1, 654, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 67)
Typ = GetType(PublicAttr)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(PublicAttr).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 655, 1, 655, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 67)
Typ = GetType(PublicAttr)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 656, 1, 656, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 657, 1, 657, 100)
OptimizeIL.Emit(OpCodes.Br, cont62)
OptimizeIL.MarkLabel(fa62)
OptimizeIL.Emit(OpCodes.Br, cont62)
OptimizeIL.MarkLabel(cont62)
OptimizeIL.MarkSequencePoint(doc3, 659, 1, 659, 100)
Dim typ63(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ63(UBound(typ63) + 1)
typ63(UBound(typ63)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "initonly")
Typ = GetType(System.String)
ReDim Preserve typ63(UBound(typ63) + 1)
typ63(UBound(typ63)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ63))
Typ = GetType(String).GetMethod("Compare", typ63).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 661, 1, 661, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa63 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru63 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont63 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru63)
OptimizeIL.Emit(OpCodes.Br, fa63)
OptimizeIL.MarkLabel(tru63)
OptimizeIL.MarkSequencePoint(doc3, 662, 1, 662, 100)
Dim locbldr68 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(InitOnlyAttr))
locbldr68.SetLocalSymInfo("initoattr")
OptimizeIL.Emit(OpCodes.Newobj, GetType(InitOnlyAttr).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 68)
OptimizeIL.MarkSequencePoint(doc3, 663, 1, 663, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 68)
Typ = GetType(InitOnlyAttr)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(InitOnlyAttr).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 664, 1, 664, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 68)
Typ = GetType(InitOnlyAttr)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(InitOnlyAttr).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 665, 1, 665, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 68)
Typ = GetType(InitOnlyAttr)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 666, 1, 666, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 667, 1, 667, 100)
OptimizeIL.Emit(OpCodes.Br, cont63)
OptimizeIL.MarkLabel(fa63)
OptimizeIL.Emit(OpCodes.Br, cont63)
OptimizeIL.MarkLabel(cont63)
OptimizeIL.MarkSequencePoint(doc3, 669, 1, 669, 100)
Dim typ64(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ64(UBound(typ64) + 1)
typ64(UBound(typ64)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "static")
Typ = GetType(System.String)
ReDim Preserve typ64(UBound(typ64) + 1)
typ64(UBound(typ64)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ64))
Typ = GetType(String).GetMethod("Compare", typ64).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 671, 1, 671, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa64 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru64 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont64 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru64)
OptimizeIL.Emit(OpCodes.Br, fa64)
OptimizeIL.MarkLabel(tru64)
OptimizeIL.MarkSequencePoint(doc3, 672, 1, 672, 100)
Dim locbldr69 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(StaticAttr))
locbldr69.SetLocalSymInfo("statattr")
OptimizeIL.Emit(OpCodes.Newobj, GetType(StaticAttr).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 69)
OptimizeIL.MarkSequencePoint(doc3, 673, 1, 673, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 69)
Typ = GetType(StaticAttr)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(StaticAttr).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 674, 1, 674, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 69)
Typ = GetType(StaticAttr)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(StaticAttr).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 675, 1, 675, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 69)
Typ = GetType(StaticAttr)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 676, 1, 676, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 677, 1, 677, 100)
OptimizeIL.Emit(OpCodes.Br, cont64)
OptimizeIL.MarkLabel(fa64)
OptimizeIL.Emit(OpCodes.Br, cont64)
OptimizeIL.MarkLabel(cont64)
OptimizeIL.MarkSequencePoint(doc3, 679, 1, 679, 100)
Dim typ65(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ65(UBound(typ65) + 1)
typ65(UBound(typ65)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "auto")
Typ = GetType(System.String)
ReDim Preserve typ65(UBound(typ65) + 1)
typ65(UBound(typ65)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ65))
Typ = GetType(String).GetMethod("Compare", typ65).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 681, 1, 681, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa65 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru65 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont65 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru65)
OptimizeIL.Emit(OpCodes.Br, fa65)
OptimizeIL.MarkLabel(tru65)
OptimizeIL.MarkSequencePoint(doc3, 682, 1, 682, 100)
Dim locbldr70 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(AutoLayoutAttr))
locbldr70.SetLocalSymInfo("autattr")
OptimizeIL.Emit(OpCodes.Newobj, GetType(AutoLayoutAttr).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 70)
OptimizeIL.MarkSequencePoint(doc3, 683, 1, 683, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 70)
Typ = GetType(AutoLayoutAttr)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(AutoLayoutAttr).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 684, 1, 684, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 70)
Typ = GetType(AutoLayoutAttr)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(AutoLayoutAttr).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 685, 1, 685, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 70)
Typ = GetType(AutoLayoutAttr)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 686, 1, 686, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 687, 1, 687, 100)
OptimizeIL.Emit(OpCodes.Br, cont65)
OptimizeIL.MarkLabel(fa65)
OptimizeIL.Emit(OpCodes.Br, cont65)
OptimizeIL.MarkLabel(cont65)
OptimizeIL.MarkSequencePoint(doc3, 689, 1, 689, 100)
Dim typ66(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ66(UBound(typ66) + 1)
typ66(UBound(typ66)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "autochar")
Typ = GetType(System.String)
ReDim Preserve typ66(UBound(typ66) + 1)
typ66(UBound(typ66)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ66))
Typ = GetType(String).GetMethod("Compare", typ66).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 691, 1, 691, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa66 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru66 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont66 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru66)
OptimizeIL.Emit(OpCodes.Br, fa66)
OptimizeIL.MarkLabel(tru66)
OptimizeIL.MarkSequencePoint(doc3, 692, 1, 692, 100)
Dim locbldr71 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(AutoClassAttr))
locbldr71.SetLocalSymInfo("autcattr")
OptimizeIL.Emit(OpCodes.Newobj, GetType(AutoClassAttr).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 71)
OptimizeIL.MarkSequencePoint(doc3, 693, 1, 693, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 71)
Typ = GetType(AutoClassAttr)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(AutoClassAttr).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 694, 1, 694, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 71)
Typ = GetType(AutoClassAttr)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(AutoClassAttr).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 695, 1, 695, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 71)
Typ = GetType(AutoClassAttr)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 696, 1, 696, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 697, 1, 697, 100)
OptimizeIL.Emit(OpCodes.Br, cont66)
OptimizeIL.MarkLabel(fa66)
OptimizeIL.Emit(OpCodes.Br, cont66)
OptimizeIL.MarkLabel(cont66)
OptimizeIL.MarkSequencePoint(doc3, 699, 1, 699, 100)
Dim typ67(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ67(UBound(typ67) + 1)
typ67(UBound(typ67)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "ansi")
Typ = GetType(System.String)
ReDim Preserve typ67(UBound(typ67) + 1)
typ67(UBound(typ67)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ67))
Typ = GetType(String).GetMethod("Compare", typ67).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 701, 1, 701, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa67 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru67 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont67 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru67)
OptimizeIL.Emit(OpCodes.Br, fa67)
OptimizeIL.MarkLabel(tru67)
OptimizeIL.MarkSequencePoint(doc3, 702, 1, 702, 100)
Dim locbldr72 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(AnsiClassAttr))
locbldr72.SetLocalSymInfo("ansattr")
OptimizeIL.Emit(OpCodes.Newobj, GetType(AnsiClassAttr).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 72)
OptimizeIL.MarkSequencePoint(doc3, 703, 1, 703, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 72)
Typ = GetType(AnsiClassAttr)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(AnsiClassAttr).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 704, 1, 704, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 72)
Typ = GetType(AnsiClassAttr)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(AnsiClassAttr).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 705, 1, 705, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 72)
Typ = GetType(AnsiClassAttr)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 706, 1, 706, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 707, 1, 707, 100)
OptimizeIL.Emit(OpCodes.Br, cont67)
OptimizeIL.MarkLabel(fa67)
OptimizeIL.Emit(OpCodes.Br, cont67)
OptimizeIL.MarkLabel(cont67)
OptimizeIL.MarkSequencePoint(doc3, 709, 1, 709, 100)
Dim typ68(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ68(UBound(typ68) + 1)
typ68(UBound(typ68)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "beforefieldinit")
Typ = GetType(System.String)
ReDim Preserve typ68(UBound(typ68) + 1)
typ68(UBound(typ68)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ68))
Typ = GetType(String).GetMethod("Compare", typ68).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 711, 1, 711, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa68 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru68 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont68 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru68)
OptimizeIL.Emit(OpCodes.Br, fa68)
OptimizeIL.MarkLabel(tru68)
OptimizeIL.MarkSequencePoint(doc3, 712, 1, 712, 100)
Dim locbldr73 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(BeforeFieldInitAttr))
locbldr73.SetLocalSymInfo("bfiattr")
OptimizeIL.Emit(OpCodes.Newobj, GetType(BeforeFieldInitAttr).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 73)
OptimizeIL.MarkSequencePoint(doc3, 713, 1, 713, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 73)
Typ = GetType(BeforeFieldInitAttr)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(BeforeFieldInitAttr).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 714, 1, 714, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 73)
Typ = GetType(BeforeFieldInitAttr)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(BeforeFieldInitAttr).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 715, 1, 715, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 73)
Typ = GetType(BeforeFieldInitAttr)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 716, 1, 716, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 717, 1, 717, 100)
OptimizeIL.Emit(OpCodes.Br, cont68)
OptimizeIL.MarkLabel(fa68)
OptimizeIL.Emit(OpCodes.Br, cont68)
OptimizeIL.MarkLabel(cont68)
OptimizeIL.MarkSequencePoint(doc3, 719, 1, 719, 100)
Dim typ69(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ69(UBound(typ69) + 1)
typ69(UBound(typ69)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "string")
Typ = GetType(System.String)
ReDim Preserve typ69(UBound(typ69) + 1)
typ69(UBound(typ69)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ69))
Typ = GetType(String).GetMethod("Compare", typ69).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 721, 1, 721, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa69 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru69 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont69 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru69)
OptimizeIL.Emit(OpCodes.Br, fa69)
OptimizeIL.MarkLabel(tru69)
OptimizeIL.MarkSequencePoint(doc3, 722, 1, 722, 100)
Dim locbldr74 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(StringTok))
locbldr74.SetLocalSymInfo("strtok")
OptimizeIL.Emit(OpCodes.Newobj, GetType(StringTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 74)
OptimizeIL.MarkSequencePoint(doc3, 723, 1, 723, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 74)
Typ = GetType(StringTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(StringTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 724, 1, 724, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 74)
Typ = GetType(StringTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(StringTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 725, 1, 725, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 74)
Typ = GetType(StringTok)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(System.String))
Dim typ70 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ70))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ70).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(StringTok).GetField("RefTyp"))
OptimizeIL.MarkSequencePoint(doc3, 726, 1, 726, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 74)
Typ = GetType(StringTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 727, 1, 727, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 728, 1, 728, 100)
OptimizeIL.Emit(OpCodes.Br, cont69)
OptimizeIL.MarkLabel(fa69)
OptimizeIL.Emit(OpCodes.Br, cont69)
OptimizeIL.MarkLabel(cont69)
OptimizeIL.MarkSequencePoint(doc3, 730, 1, 730, 100)
Dim typ71(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ71(UBound(typ71) + 1)
typ71(UBound(typ71)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "void")
Typ = GetType(System.String)
ReDim Preserve typ71(UBound(typ71) + 1)
typ71(UBound(typ71)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ71))
Typ = GetType(String).GetMethod("Compare", typ71).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 732, 1, 732, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa70 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru70 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont70 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru70)
OptimizeIL.Emit(OpCodes.Br, fa70)
OptimizeIL.MarkLabel(tru70)
OptimizeIL.MarkSequencePoint(doc3, 733, 1, 733, 100)
Dim locbldr75 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(VoidTok))
locbldr75.SetLocalSymInfo("voidtok")
OptimizeIL.Emit(OpCodes.Newobj, GetType(VoidTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 75)
OptimizeIL.MarkSequencePoint(doc3, 734, 1, 734, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 75)
Typ = GetType(VoidTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(VoidTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 735, 1, 735, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 75)
Typ = GetType(VoidTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(VoidTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 736, 1, 736, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 75)
Typ = GetType(VoidTok)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(System.Void))
Dim typ72 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ72))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ72).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(VoidTok).GetField("RefTyp"))
OptimizeIL.MarkSequencePoint(doc3, 737, 1, 737, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 75)
Typ = GetType(VoidTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 738, 1, 738, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 739, 1, 739, 100)
OptimizeIL.Emit(OpCodes.Br, cont70)
OptimizeIL.MarkLabel(fa70)
OptimizeIL.Emit(OpCodes.Br, cont70)
OptimizeIL.MarkLabel(cont70)
OptimizeIL.MarkSequencePoint(doc3, 741, 1, 741, 100)
Dim typ73(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ73(UBound(typ73) + 1)
typ73(UBound(typ73)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "decimal")
Typ = GetType(System.String)
ReDim Preserve typ73(UBound(typ73) + 1)
typ73(UBound(typ73)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ73))
Typ = GetType(String).GetMethod("Compare", typ73).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 743, 1, 743, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa71 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru71 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont71 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru71)
OptimizeIL.Emit(OpCodes.Br, fa71)
OptimizeIL.MarkLabel(tru71)
OptimizeIL.MarkSequencePoint(doc3, 744, 1, 744, 100)
Dim locbldr76 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(DecimalTok))
locbldr76.SetLocalSymInfo("decitok")
OptimizeIL.Emit(OpCodes.Newobj, GetType(DecimalTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 76)
OptimizeIL.MarkSequencePoint(doc3, 745, 1, 745, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 76)
Typ = GetType(DecimalTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DecimalTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 746, 1, 746, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 76)
Typ = GetType(DecimalTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DecimalTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 747, 1, 747, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 76)
Typ = GetType(DecimalTok)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(System.Decimal))
Dim typ74 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ74))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ74).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DecimalTok).GetField("RefTyp"))
OptimizeIL.MarkSequencePoint(doc3, 748, 1, 748, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 76)
Typ = GetType(DecimalTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 749, 1, 749, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 750, 1, 750, 100)
OptimizeIL.Emit(OpCodes.Br, cont71)
OptimizeIL.MarkLabel(fa71)
OptimizeIL.Emit(OpCodes.Br, cont71)
OptimizeIL.MarkLabel(cont71)
OptimizeIL.MarkSequencePoint(doc3, 752, 1, 752, 100)
Dim typ75(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ75(UBound(typ75) + 1)
typ75(UBound(typ75)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "integer")
Typ = GetType(System.String)
ReDim Preserve typ75(UBound(typ75) + 1)
typ75(UBound(typ75)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ75))
Typ = GetType(String).GetMethod("Compare", typ75).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 754, 1, 754, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa72 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru72 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont72 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru72)
OptimizeIL.Emit(OpCodes.Br, fa72)
OptimizeIL.MarkLabel(tru72)
OptimizeIL.MarkSequencePoint(doc3, 755, 1, 755, 100)
Dim locbldr77 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(IntegerTok))
locbldr77.SetLocalSymInfo("inttok")
OptimizeIL.Emit(OpCodes.Newobj, GetType(IntegerTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 77)
OptimizeIL.MarkSequencePoint(doc3, 756, 1, 756, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 77)
Typ = GetType(IntegerTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(IntegerTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 757, 1, 757, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 77)
Typ = GetType(IntegerTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(IntegerTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 758, 1, 758, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 77)
Typ = GetType(IntegerTok)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(System.Int32))
Dim typ76 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ76))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ76).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(IntegerTok).GetField("RefTyp"))
OptimizeIL.MarkSequencePoint(doc3, 759, 1, 759, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 77)
Typ = GetType(IntegerTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 760, 1, 760, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 761, 1, 761, 100)
OptimizeIL.Emit(OpCodes.Br, cont72)
OptimizeIL.MarkLabel(fa72)
OptimizeIL.Emit(OpCodes.Br, cont72)
OptimizeIL.MarkLabel(cont72)
OptimizeIL.MarkSequencePoint(doc3, 763, 1, 763, 100)
Dim typ77(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ77(UBound(typ77) + 1)
typ77(UBound(typ77)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "intptr")
Typ = GetType(System.String)
ReDim Preserve typ77(UBound(typ77) + 1)
typ77(UBound(typ77)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ77))
Typ = GetType(String).GetMethod("Compare", typ77).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 765, 1, 765, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa73 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru73 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont73 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru73)
OptimizeIL.Emit(OpCodes.Br, fa73)
OptimizeIL.MarkLabel(tru73)
OptimizeIL.MarkSequencePoint(doc3, 766, 1, 766, 100)
Dim locbldr78 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(IntPtrTok))
locbldr78.SetLocalSymInfo("intptok")
OptimizeIL.Emit(OpCodes.Newobj, GetType(IntPtrTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 78)
OptimizeIL.MarkSequencePoint(doc3, 767, 1, 767, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 78)
Typ = GetType(IntPtrTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(IntPtrTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 768, 1, 768, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 78)
Typ = GetType(IntPtrTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(IntPtrTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 769, 1, 769, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 78)
Typ = GetType(IntPtrTok)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(IntPtr))
Dim typ78 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ78))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ78).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(IntPtrTok).GetField("RefTyp"))
OptimizeIL.MarkSequencePoint(doc3, 770, 1, 770, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 78)
Typ = GetType(IntPtrTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 771, 1, 771, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 772, 1, 772, 100)
OptimizeIL.Emit(OpCodes.Br, cont73)
OptimizeIL.MarkLabel(fa73)
OptimizeIL.Emit(OpCodes.Br, cont73)
OptimizeIL.MarkLabel(cont73)
OptimizeIL.MarkSequencePoint(doc3, 774, 1, 774, 100)
Dim typ79(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ79(UBound(typ79) + 1)
typ79(UBound(typ79)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "uinteger")
Typ = GetType(System.String)
ReDim Preserve typ79(UBound(typ79) + 1)
typ79(UBound(typ79)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ79))
Typ = GetType(String).GetMethod("Compare", typ79).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 776, 1, 776, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa74 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru74 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont74 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru74)
OptimizeIL.Emit(OpCodes.Br, fa74)
OptimizeIL.MarkLabel(tru74)
OptimizeIL.MarkSequencePoint(doc3, 777, 1, 777, 100)
Dim locbldr79 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(UIntegerTok))
locbldr79.SetLocalSymInfo("uinttok")
OptimizeIL.Emit(OpCodes.Newobj, GetType(UIntegerTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 79)
OptimizeIL.MarkSequencePoint(doc3, 778, 1, 778, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 79)
Typ = GetType(UIntegerTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(UIntegerTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 779, 1, 779, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 79)
Typ = GetType(UIntegerTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(UIntegerTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 780, 1, 780, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 79)
Typ = GetType(UIntegerTok)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(UInt32))
Dim typ80 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ80))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ80).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(UIntegerTok).GetField("RefTyp"))
OptimizeIL.MarkSequencePoint(doc3, 781, 1, 781, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 79)
Typ = GetType(UIntegerTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 782, 1, 782, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 783, 1, 783, 100)
OptimizeIL.Emit(OpCodes.Br, cont74)
OptimizeIL.MarkLabel(fa74)
OptimizeIL.Emit(OpCodes.Br, cont74)
OptimizeIL.MarkLabel(cont74)
OptimizeIL.MarkSequencePoint(doc3, 786, 1, 786, 100)
Dim typ81(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ81(UBound(typ81) + 1)
typ81(UBound(typ81)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "double")
Typ = GetType(System.String)
ReDim Preserve typ81(UBound(typ81) + 1)
typ81(UBound(typ81)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ81))
Typ = GetType(String).GetMethod("Compare", typ81).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 788, 1, 788, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa75 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru75 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont75 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru75)
OptimizeIL.Emit(OpCodes.Br, fa75)
OptimizeIL.MarkLabel(tru75)
OptimizeIL.MarkSequencePoint(doc3, 789, 1, 789, 100)
Dim locbldr80 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(DoubleTok))
locbldr80.SetLocalSymInfo("dbltok")
OptimizeIL.Emit(OpCodes.Newobj, GetType(DoubleTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 80)
OptimizeIL.MarkSequencePoint(doc3, 790, 1, 790, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 80)
Typ = GetType(DoubleTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DoubleTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 791, 1, 791, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 80)
Typ = GetType(DoubleTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DoubleTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 792, 1, 792, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 80)
Typ = GetType(DoubleTok)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(System.Double))
Dim typ82 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ82))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ82).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DoubleTok).GetField("RefTyp"))
OptimizeIL.MarkSequencePoint(doc3, 793, 1, 793, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 80)
Typ = GetType(DoubleTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 794, 1, 794, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 795, 1, 795, 100)
OptimizeIL.Emit(OpCodes.Br, cont75)
OptimizeIL.MarkLabel(fa75)
OptimizeIL.Emit(OpCodes.Br, cont75)
OptimizeIL.MarkLabel(cont75)
OptimizeIL.MarkSequencePoint(doc3, 797, 1, 797, 100)
Dim typ83(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ83(UBound(typ83) + 1)
typ83(UBound(typ83)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "boolean")
Typ = GetType(System.String)
ReDim Preserve typ83(UBound(typ83) + 1)
typ83(UBound(typ83)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ83))
Typ = GetType(String).GetMethod("Compare", typ83).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 799, 1, 799, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa76 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru76 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont76 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru76)
OptimizeIL.Emit(OpCodes.Br, fa76)
OptimizeIL.MarkLabel(tru76)
OptimizeIL.MarkSequencePoint(doc3, 800, 1, 800, 100)
Dim locbldr81 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(BooleanTok))
locbldr81.SetLocalSymInfo("booltok")
OptimizeIL.Emit(OpCodes.Newobj, GetType(BooleanTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 81)
OptimizeIL.MarkSequencePoint(doc3, 801, 1, 801, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 81)
Typ = GetType(BooleanTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(BooleanTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 802, 1, 802, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 81)
Typ = GetType(BooleanTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(BooleanTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 803, 1, 803, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 81)
Typ = GetType(BooleanTok)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(System.Boolean))
Dim typ84 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ84))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ84).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(BooleanTok).GetField("RefTyp"))
OptimizeIL.MarkSequencePoint(doc3, 804, 1, 804, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 81)
Typ = GetType(BooleanTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 805, 1, 805, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 806, 1, 806, 100)
OptimizeIL.Emit(OpCodes.Br, cont76)
OptimizeIL.MarkLabel(fa76)
OptimizeIL.Emit(OpCodes.Br, cont76)
OptimizeIL.MarkLabel(cont76)
OptimizeIL.MarkSequencePoint(doc3, 808, 1, 808, 100)
Dim typ85(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ85(UBound(typ85) + 1)
typ85(UBound(typ85)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "char")
Typ = GetType(System.String)
ReDim Preserve typ85(UBound(typ85) + 1)
typ85(UBound(typ85)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ85))
Typ = GetType(String).GetMethod("Compare", typ85).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 810, 1, 810, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa77 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru77 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont77 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru77)
OptimizeIL.Emit(OpCodes.Br, fa77)
OptimizeIL.MarkLabel(tru77)
OptimizeIL.MarkSequencePoint(doc3, 811, 1, 811, 100)
Dim locbldr82 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(CharTok))
locbldr82.SetLocalSymInfo("chrtok")
OptimizeIL.Emit(OpCodes.Newobj, GetType(CharTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 82)
OptimizeIL.MarkSequencePoint(doc3, 812, 1, 812, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 82)
Typ = GetType(CharTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(CharTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 813, 1, 813, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 82)
Typ = GetType(CharTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(CharTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 814, 1, 814, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 82)
Typ = GetType(CharTok)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(System.Char))
Dim typ86 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ86))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ86).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(CharTok).GetField("RefTyp"))
OptimizeIL.MarkSequencePoint(doc3, 815, 1, 815, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 82)
Typ = GetType(CharTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 816, 1, 816, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 817, 1, 817, 100)
OptimizeIL.Emit(OpCodes.Br, cont77)
OptimizeIL.MarkLabel(fa77)
OptimizeIL.Emit(OpCodes.Br, cont77)
OptimizeIL.MarkLabel(cont77)
OptimizeIL.MarkSequencePoint(doc3, 819, 1, 819, 100)
Dim typ87(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ87(UBound(typ87) + 1)
typ87(UBound(typ87)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "single")
Typ = GetType(System.String)
ReDim Preserve typ87(UBound(typ87) + 1)
typ87(UBound(typ87)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ87))
Typ = GetType(String).GetMethod("Compare", typ87).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 821, 1, 821, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa78 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru78 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont78 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru78)
OptimizeIL.Emit(OpCodes.Br, fa78)
OptimizeIL.MarkLabel(tru78)
OptimizeIL.MarkSequencePoint(doc3, 822, 1, 822, 100)
Dim locbldr83 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(SingleTok))
locbldr83.SetLocalSymInfo("sngtok")
OptimizeIL.Emit(OpCodes.Newobj, GetType(SingleTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 83)
OptimizeIL.MarkSequencePoint(doc3, 823, 1, 823, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 83)
Typ = GetType(SingleTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(SingleTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 824, 1, 824, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 83)
Typ = GetType(SingleTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(SingleTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 825, 1, 825, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 83)
Typ = GetType(SingleTok)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(System.Single))
Dim typ88 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ88))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ88).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(SingleTok).GetField("RefTyp"))
OptimizeIL.MarkSequencePoint(doc3, 826, 1, 826, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 83)
Typ = GetType(SingleTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 827, 1, 827, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 828, 1, 828, 100)
OptimizeIL.Emit(OpCodes.Br, cont78)
OptimizeIL.MarkLabel(fa78)
OptimizeIL.Emit(OpCodes.Br, cont78)
OptimizeIL.MarkLabel(cont78)
OptimizeIL.MarkSequencePoint(doc3, 831, 1, 831, 100)
Dim typ89(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ89(UBound(typ89) + 1)
typ89(UBound(typ89)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "sbyte")
Typ = GetType(System.String)
ReDim Preserve typ89(UBound(typ89) + 1)
typ89(UBound(typ89)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ89))
Typ = GetType(String).GetMethod("Compare", typ89).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 833, 1, 833, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa79 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru79 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont79 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru79)
OptimizeIL.Emit(OpCodes.Br, fa79)
OptimizeIL.MarkLabel(tru79)
OptimizeIL.MarkSequencePoint(doc3, 834, 1, 834, 100)
Dim locbldr84 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(SByteTok))
locbldr84.SetLocalSymInfo("sbytok")
OptimizeIL.Emit(OpCodes.Newobj, GetType(SByteTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 84)
OptimizeIL.MarkSequencePoint(doc3, 835, 1, 835, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 84)
Typ = GetType(SByteTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(SByteTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 836, 1, 836, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 84)
Typ = GetType(SByteTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(SByteTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 837, 1, 837, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 84)
Typ = GetType(SByteTok)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(System.SByte))
Dim typ90 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ90))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ90).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(SByteTok).GetField("RefTyp"))
OptimizeIL.MarkSequencePoint(doc3, 838, 1, 838, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 84)
Typ = GetType(SByteTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 839, 1, 839, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 840, 1, 840, 100)
OptimizeIL.Emit(OpCodes.Br, cont79)
OptimizeIL.MarkLabel(fa79)
OptimizeIL.Emit(OpCodes.Br, cont79)
OptimizeIL.MarkLabel(cont79)
OptimizeIL.MarkSequencePoint(doc3, 842, 1, 842, 100)
Dim typ91(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ91(UBound(typ91) + 1)
typ91(UBound(typ91)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "byte")
Typ = GetType(System.String)
ReDim Preserve typ91(UBound(typ91) + 1)
typ91(UBound(typ91)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ91))
Typ = GetType(String).GetMethod("Compare", typ91).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 844, 1, 844, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa80 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru80 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont80 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru80)
OptimizeIL.Emit(OpCodes.Br, fa80)
OptimizeIL.MarkLabel(tru80)
OptimizeIL.MarkSequencePoint(doc3, 845, 1, 845, 100)
Dim locbldr85 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(ByteTok))
locbldr85.SetLocalSymInfo("byttok")
OptimizeIL.Emit(OpCodes.Newobj, GetType(ByteTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 85)
OptimizeIL.MarkSequencePoint(doc3, 846, 1, 846, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 85)
Typ = GetType(ByteTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ByteTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 847, 1, 847, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 85)
Typ = GetType(ByteTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ByteTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 848, 1, 848, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 85)
Typ = GetType(ByteTok)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(System.Byte))
Dim typ92 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ92))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ92).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ByteTok).GetField("RefTyp"))
OptimizeIL.MarkSequencePoint(doc3, 849, 1, 849, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 85)
Typ = GetType(ByteTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 850, 1, 850, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 851, 1, 851, 100)
OptimizeIL.Emit(OpCodes.Br, cont80)
OptimizeIL.MarkLabel(fa80)
OptimizeIL.Emit(OpCodes.Br, cont80)
OptimizeIL.MarkLabel(cont80)
OptimizeIL.MarkSequencePoint(doc3, 853, 1, 853, 100)
Dim typ93(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ93(UBound(typ93) + 1)
typ93(UBound(typ93)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "short")
Typ = GetType(System.String)
ReDim Preserve typ93(UBound(typ93) + 1)
typ93(UBound(typ93)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ93))
Typ = GetType(String).GetMethod("Compare", typ93).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 855, 1, 855, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa81 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru81 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont81 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru81)
OptimizeIL.Emit(OpCodes.Br, fa81)
OptimizeIL.MarkLabel(tru81)
OptimizeIL.MarkSequencePoint(doc3, 856, 1, 856, 100)
Dim locbldr86 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(ShortTok))
locbldr86.SetLocalSymInfo("shtok")
OptimizeIL.Emit(OpCodes.Newobj, GetType(ShortTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 86)
OptimizeIL.MarkSequencePoint(doc3, 857, 1, 857, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 86)
Typ = GetType(ShortTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ShortTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 858, 1, 858, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 86)
Typ = GetType(ShortTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ShortTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 859, 1, 859, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 86)
Typ = GetType(ShortTok)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(System.Int16))
Dim typ94 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ94))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ94).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ShortTok).GetField("RefTyp"))
OptimizeIL.MarkSequencePoint(doc3, 860, 1, 860, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 86)
Typ = GetType(ShortTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 861, 1, 861, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 862, 1, 862, 100)
OptimizeIL.Emit(OpCodes.Br, cont81)
OptimizeIL.MarkLabel(fa81)
OptimizeIL.Emit(OpCodes.Br, cont81)
OptimizeIL.MarkLabel(cont81)
OptimizeIL.MarkSequencePoint(doc3, 864, 1, 864, 100)
Dim typ95(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ95(UBound(typ95) + 1)
typ95(UBound(typ95)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "ushort")
Typ = GetType(System.String)
ReDim Preserve typ95(UBound(typ95) + 1)
typ95(UBound(typ95)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ95))
Typ = GetType(String).GetMethod("Compare", typ95).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 866, 1, 866, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa82 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru82 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont82 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru82)
OptimizeIL.Emit(OpCodes.Br, fa82)
OptimizeIL.MarkLabel(tru82)
OptimizeIL.MarkSequencePoint(doc3, 867, 1, 867, 100)
Dim locbldr87 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(UShortTok))
locbldr87.SetLocalSymInfo("ushtok")
OptimizeIL.Emit(OpCodes.Newobj, GetType(UShortTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 87)
OptimizeIL.MarkSequencePoint(doc3, 868, 1, 868, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 87)
Typ = GetType(UShortTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(UShortTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 869, 1, 869, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 87)
Typ = GetType(UShortTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(UShortTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 870, 1, 870, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 87)
Typ = GetType(UShortTok)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(UInt16))
Dim typ96 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ96))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ96).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(UShortTok).GetField("RefTyp"))
OptimizeIL.MarkSequencePoint(doc3, 871, 1, 871, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 87)
Typ = GetType(UShortTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 872, 1, 872, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 873, 1, 873, 100)
OptimizeIL.Emit(OpCodes.Br, cont82)
OptimizeIL.MarkLabel(fa82)
OptimizeIL.Emit(OpCodes.Br, cont82)
OptimizeIL.MarkLabel(cont82)
OptimizeIL.MarkSequencePoint(doc3, 875, 1, 875, 100)
Dim typ97(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ97(UBound(typ97) + 1)
typ97(UBound(typ97)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "long")
Typ = GetType(System.String)
ReDim Preserve typ97(UBound(typ97) + 1)
typ97(UBound(typ97)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ97))
Typ = GetType(String).GetMethod("Compare", typ97).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 877, 1, 877, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa83 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru83 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont83 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru83)
OptimizeIL.Emit(OpCodes.Br, fa83)
OptimizeIL.MarkLabel(tru83)
OptimizeIL.MarkSequencePoint(doc3, 878, 1, 878, 100)
Dim locbldr88 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(LongTok))
locbldr88.SetLocalSymInfo("lngtok")
OptimizeIL.Emit(OpCodes.Newobj, GetType(LongTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 88)
OptimizeIL.MarkSequencePoint(doc3, 879, 1, 879, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 88)
Typ = GetType(LongTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(LongTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 880, 1, 880, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 88)
Typ = GetType(LongTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(LongTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 881, 1, 881, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 88)
Typ = GetType(LongTok)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(System.Int64))
Dim typ98 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ98))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ98).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(LongTok).GetField("RefTyp"))
OptimizeIL.MarkSequencePoint(doc3, 882, 1, 882, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 88)
Typ = GetType(LongTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 883, 1, 883, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 884, 1, 884, 100)
OptimizeIL.Emit(OpCodes.Br, cont83)
OptimizeIL.MarkLabel(fa83)
OptimizeIL.Emit(OpCodes.Br, cont83)
OptimizeIL.MarkLabel(cont83)
OptimizeIL.MarkSequencePoint(doc3, 886, 1, 886, 100)
Dim typ99(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ99(UBound(typ99) + 1)
typ99(UBound(typ99)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "ulong")
Typ = GetType(System.String)
ReDim Preserve typ99(UBound(typ99) + 1)
typ99(UBound(typ99)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ99))
Typ = GetType(String).GetMethod("Compare", typ99).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 888, 1, 888, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa84 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru84 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont84 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru84)
OptimizeIL.Emit(OpCodes.Br, fa84)
OptimizeIL.MarkLabel(tru84)
OptimizeIL.MarkSequencePoint(doc3, 889, 1, 889, 100)
Dim locbldr89 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(ULongTok))
locbldr89.SetLocalSymInfo("ulngtok")
OptimizeIL.Emit(OpCodes.Newobj, GetType(ULongTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 89)
OptimizeIL.MarkSequencePoint(doc3, 890, 1, 890, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 89)
Typ = GetType(ULongTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ULongTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 891, 1, 891, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 89)
Typ = GetType(ULongTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ULongTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 892, 1, 892, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 89)
Typ = GetType(ULongTok)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(UInt64))
Dim typ100 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ100))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ100).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ULongTok).GetField("RefTyp"))
OptimizeIL.MarkSequencePoint(doc3, 893, 1, 893, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 89)
Typ = GetType(ULongTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 894, 1, 894, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 895, 1, 895, 100)
OptimizeIL.Emit(OpCodes.Br, cont84)
OptimizeIL.MarkLabel(fa84)
OptimizeIL.Emit(OpCodes.Br, cont84)
OptimizeIL.MarkLabel(cont84)
OptimizeIL.MarkSequencePoint(doc3, 898, 1, 898, 100)
Dim typ101(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ101(UBound(typ101) + 1)
typ101(UBound(typ101)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "object")
Typ = GetType(System.String)
ReDim Preserve typ101(UBound(typ101) + 1)
typ101(UBound(typ101)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ101))
Typ = GetType(String).GetMethod("Compare", typ101).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 900, 1, 900, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa85 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru85 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont85 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru85)
OptimizeIL.Emit(OpCodes.Br, fa85)
OptimizeIL.MarkLabel(tru85)
OptimizeIL.MarkSequencePoint(doc3, 901, 1, 901, 100)
Dim locbldr90 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(ObjectTok))
locbldr90.SetLocalSymInfo("objtok")
OptimizeIL.Emit(OpCodes.Newobj, GetType(ObjectTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 90)
OptimizeIL.MarkSequencePoint(doc3, 902, 1, 902, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 90)
Typ = GetType(ObjectTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ObjectTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 903, 1, 903, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 90)
Typ = GetType(ObjectTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ObjectTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 904, 1, 904, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 90)
Typ = GetType(ObjectTok)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(System.Object))
Dim typ102 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ102))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ102).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ObjectTok).GetField("RefTyp"))
OptimizeIL.MarkSequencePoint(doc3, 905, 1, 905, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 90)
Typ = GetType(ObjectTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 906, 1, 906, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 907, 1, 907, 100)
OptimizeIL.Emit(OpCodes.Br, cont85)
OptimizeIL.MarkLabel(fa85)
OptimizeIL.Emit(OpCodes.Br, cont85)
OptimizeIL.MarkLabel(cont85)
OptimizeIL.MarkSequencePoint(doc3, 909, 1, 909, 100)
Dim typ103(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ103(UBound(typ103) + 1)
typ103(UBound(typ103)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^//(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ103(UBound(typ103) + 1)
typ103(UBound(typ103)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ103))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ103).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 911, 1, 911, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa86 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru86 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont86 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru86)
OptimizeIL.Emit(OpCodes.Br, fa86)
OptimizeIL.MarkLabel(tru86)
OptimizeIL.MarkSequencePoint(doc3, 912, 1, 912, 100)
Dim locbldr91 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(commentTok))
locbldr91.SetLocalSymInfo("comtok")
OptimizeIL.Emit(OpCodes.Newobj, GetType(commentTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 91)
OptimizeIL.MarkSequencePoint(doc3, 913, 1, 913, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 91)
Typ = GetType(commentTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(commentTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 914, 1, 914, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 91)
Typ = GetType(commentTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(commentTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 915, 1, 915, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 91)
Typ = GetType(commentTok)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 916, 1, 916, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("CmtFlag"))
OptimizeIL.MarkSequencePoint(doc3, 917, 1, 917, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 918, 1, 918, 100)
OptimizeIL.Emit(OpCodes.Br, cont86)
OptimizeIL.MarkLabel(fa86)
OptimizeIL.Emit(OpCodes.Br, cont86)
OptimizeIL.MarkLabel(cont86)
OptimizeIL.MarkSequencePoint(doc3, 920, 1, 920, 100)
Dim typ104(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ104(UBound(typ104) + 1)
typ104(UBound(typ104)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "null")
Typ = GetType(System.String)
ReDim Preserve typ104(UBound(typ104) + 1)
typ104(UBound(typ104)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ104))
Typ = GetType(String).GetMethod("Compare", typ104).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 922, 1, 922, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa87 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru87 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont87 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru87)
OptimizeIL.Emit(OpCodes.Br, fa87)
OptimizeIL.MarkLabel(tru87)
OptimizeIL.MarkSequencePoint(doc3, 923, 1, 923, 100)
Dim locbldr92 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(NullLiteral))
locbldr92.SetLocalSymInfo("nulllit")
OptimizeIL.Emit(OpCodes.Newobj, GetType(NullLiteral).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 92)
OptimizeIL.MarkSequencePoint(doc3, 924, 1, 924, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 92)
Typ = GetType(NullLiteral)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(NullLiteral).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 925, 1, 925, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 92)
Typ = GetType(NullLiteral)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(NullLiteral).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 926, 1, 926, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 92)
Typ = GetType(NullLiteral)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 927, 1, 927, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 928, 1, 928, 100)
OptimizeIL.Emit(OpCodes.Br, cont87)
OptimizeIL.MarkLabel(fa87)
OptimizeIL.Emit(OpCodes.Br, cont87)
OptimizeIL.MarkLabel(cont87)
OptimizeIL.MarkSequencePoint(doc3, 930, 1, 930, 100)
Dim typ105(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ105(UBound(typ105) + 1)
typ105(UBound(typ105)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "true")
Typ = GetType(System.String)
ReDim Preserve typ105(UBound(typ105) + 1)
typ105(UBound(typ105)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ105))
Typ = GetType(String).GetMethod("Compare", typ105).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 931, 1, 931, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa88 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru88 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont88 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru88)
OptimizeIL.Emit(OpCodes.Br, fa88)
OptimizeIL.MarkLabel(tru88)
OptimizeIL.MarkSequencePoint(doc3, 932, 1, 932, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 933, 1, 933, 100)
OptimizeIL.Emit(OpCodes.Br, cont88)
OptimizeIL.MarkLabel(fa88)
OptimizeIL.Emit(OpCodes.Br, cont88)
OptimizeIL.MarkLabel(cont88)
OptimizeIL.MarkSequencePoint(doc3, 934, 1, 934, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 935, 1, 935, 100)
Dim typ106(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ106(UBound(typ106) + 1)
typ106(UBound(typ106)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "false")
Typ = GetType(System.String)
ReDim Preserve typ106(UBound(typ106) + 1)
typ106(UBound(typ106)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ106))
Typ = GetType(String).GetMethod("Compare", typ106).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 936, 1, 936, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa89 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru89 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont89 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru89)
OptimizeIL.Emit(OpCodes.Br, fa89)
OptimizeIL.MarkLabel(tru89)
OptimizeIL.MarkSequencePoint(doc3, 937, 1, 937, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 938, 1, 938, 100)
OptimizeIL.Emit(OpCodes.Br, cont89)
OptimizeIL.MarkLabel(fa89)
OptimizeIL.Emit(OpCodes.Br, cont89)
OptimizeIL.MarkLabel(cont89)
OptimizeIL.MarkSequencePoint(doc3, 939, 1, 939, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 941, 1, 941, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa90 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru90 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont90 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru90)
OptimizeIL.Emit(OpCodes.Br, fa90)
OptimizeIL.MarkLabel(tru90)
OptimizeIL.MarkSequencePoint(doc3, 942, 1, 942, 100)
Dim locbldr93 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(BooleanLiteral))
locbldr93.SetLocalSymInfo("boolit")
OptimizeIL.Emit(OpCodes.Newobj, GetType(BooleanLiteral).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 93)
OptimizeIL.MarkSequencePoint(doc3, 943, 1, 943, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 93)
Typ = GetType(BooleanLiteral)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(BooleanLiteral).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 944, 1, 944, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 93)
Typ = GetType(BooleanLiteral)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(BooleanLiteral).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 945, 1, 945, 100)
Dim typ107(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ107(UBound(typ107) + 1)
typ107(UBound(typ107)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "true")
Typ = GetType(System.String)
ReDim Preserve typ107(UBound(typ107) + 1)
typ107(UBound(typ107)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ107))
Typ = GetType(String).GetMethod("Compare", typ107).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 946, 1, 946, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa91 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru91 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont91 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru91)
OptimizeIL.Emit(OpCodes.Br, fa91)
OptimizeIL.MarkLabel(tru91)
OptimizeIL.MarkSequencePoint(doc3, 947, 1, 947, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 93)
Typ = GetType(BooleanLiteral)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stfld, GetType(BooleanLiteral).GetField("BoolVal"))
OptimizeIL.MarkSequencePoint(doc3, 948, 1, 948, 100)
OptimizeIL.Emit(OpCodes.Br, cont91)
OptimizeIL.MarkLabel(fa91)
OptimizeIL.Emit(OpCodes.Br, cont91)
OptimizeIL.MarkLabel(cont91)
OptimizeIL.MarkSequencePoint(doc3, 949, 1, 949, 100)
Dim typ108(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ108(UBound(typ108) + 1)
typ108(UBound(typ108)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "false")
Typ = GetType(System.String)
ReDim Preserve typ108(UBound(typ108) + 1)
typ108(UBound(typ108)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ108))
Typ = GetType(String).GetMethod("Compare", typ108).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc3, 950, 1, 950, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa92 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru92 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont92 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru92)
OptimizeIL.Emit(OpCodes.Br, fa92)
OptimizeIL.MarkLabel(tru92)
OptimizeIL.MarkSequencePoint(doc3, 951, 1, 951, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 93)
Typ = GetType(BooleanLiteral)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stfld, GetType(BooleanLiteral).GetField("BoolVal"))
OptimizeIL.MarkSequencePoint(doc3, 952, 1, 952, 100)
OptimizeIL.Emit(OpCodes.Br, cont92)
OptimizeIL.MarkLabel(fa92)
OptimizeIL.Emit(OpCodes.Br, cont92)
OptimizeIL.MarkLabel(cont92)
OptimizeIL.MarkSequencePoint(doc3, 953, 1, 953, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 93)
Typ = GetType(BooleanLiteral)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 954, 1, 954, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 955, 1, 955, 100)
OptimizeIL.Emit(OpCodes.Br, cont90)
OptimizeIL.MarkLabel(fa90)
OptimizeIL.Emit(OpCodes.Br, cont90)
OptimizeIL.MarkLabel(cont90)
OptimizeIL.MarkSequencePoint(doc3, 957, 1, 957, 100)
Dim typ109(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ109(UBound(typ109) + 1)
typ109(UBound(typ109)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^'(.)*'$")
Typ = GetType(System.String)
ReDim Preserve typ109(UBound(typ109) + 1)
typ109(UBound(typ109)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ109))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ109).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 959, 1, 959, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa93 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru93 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont93 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru93)
OptimizeIL.Emit(OpCodes.Br, fa93)
OptimizeIL.MarkLabel(tru93)
OptimizeIL.MarkSequencePoint(doc3, 960, 1, 960, 100)
Dim locbldr94 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(CharLiteral))
locbldr94.SetLocalSymInfo("chrlit")
OptimizeIL.Emit(OpCodes.Newobj, GetType(CharLiteral).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 94)
OptimizeIL.MarkSequencePoint(doc3, 961, 1, 961, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 94)
Typ = GetType(CharLiteral)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(CharLiteral).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 962, 1, 962, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 963, 1, 963, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
OptimizeIL.Emit(OpCodes.Newarr, GetType(System.Char))
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc3, 964, 1, 964, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldstr, "'")
Typ = GetType(System.String)
Dim typ110 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ110))
Typ = GetType(System.Convert).GetMethod("ToChar", typ110).ReturnType
OptimizeIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
OptimizeIL.MarkSequencePoint(doc3, 965, 1, 965, 100)
Dim typ111(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ111(UBound(typ111) + 1)
typ111(UBound(typ111)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Trim", typ111))
Typ = Typ03.GetMethod("Trim", typ111).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 966, 1, 966, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 94)
Typ = GetType(CharLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
OptimizeIL.Emit(OpCodes.Stfld, GetType(CharLiteral).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 967, 1, 967, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 94)
Typ = GetType(CharLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 94)
Typ = GetType(CharLiteral)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(CharLiteral).GetField("Value"))
Typ = GetType(CharLiteral).GetField("Value").FieldType
Dim typ112 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ112))
Typ = GetType(System.Convert).GetMethod("ToChar", typ112).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(CharLiteral).GetField("CharVal"))
OptimizeIL.MarkSequencePoint(doc3, 968, 1, 968, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 94)
Typ = GetType(CharLiteral)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 969, 1, 969, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 970, 1, 970, 100)
OptimizeIL.Emit(OpCodes.Br, cont93)
OptimizeIL.MarkLabel(fa93)
OptimizeIL.Emit(OpCodes.Br, cont93)
OptimizeIL.MarkLabel(cont93)
OptimizeIL.MarkSequencePoint(doc3, 973, 1, 973, 100)
Dim typ113(-1) As Type
OptimizeIL.Emit(OpCodes.Ldstr, "^")
Typ = GetType(System.String)
ReDim Preserve typ113(UBound(typ113) + 1)
typ113(UBound(typ113)) = Typ
OptimizeIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ113(UBound(typ113) + 1)
typ113(UBound(typ113)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "(.)*")
Typ = GetType(System.String)
ReDim Preserve typ113(UBound(typ113) + 1)
typ113(UBound(typ113)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ113))
Typ = GetType(String).GetMethod("Concat", typ113).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 974, 1, 974, 100)
Dim typ114(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReDim Preserve typ114(UBound(typ114) + 1)
typ114(UBound(typ114)) = Typ
OptimizeIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ114(UBound(typ114) + 1)
typ114(UBound(typ114)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "$")
Typ = GetType(System.String)
ReDim Preserve typ114(UBound(typ114) + 1)
typ114(UBound(typ114)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ114))
Typ = GetType(String).GetMethod("Concat", typ114).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 975, 1, 975, 100)
Dim typ115(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ115(UBound(typ115) + 1)
typ115(UBound(typ115)) = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReDim Preserve typ115(UBound(typ115) + 1)
typ115(UBound(typ115)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ115))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ115).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 977, 1, 977, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa94 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru94 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont94 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru94)
OptimizeIL.Emit(OpCodes.Br, fa94)
OptimizeIL.MarkLabel(tru94)
OptimizeIL.MarkSequencePoint(doc3, 978, 1, 978, 100)
Dim locbldr95 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(StringLiteral))
locbldr95.SetLocalSymInfo("strlit")
OptimizeIL.Emit(OpCodes.Newobj, GetType(StringLiteral).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 95)
OptimizeIL.MarkSequencePoint(doc3, 979, 1, 979, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 95)
Typ = GetType(StringLiteral)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(StringLiteral).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 980, 1, 980, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 981, 1, 981, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
OptimizeIL.Emit(OpCodes.Newarr, GetType(System.Char))
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc3, 982, 1, 982, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
Dim typ116 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ116))
Typ = GetType(System.Convert).GetMethod("ToChar", typ116).ReturnType
OptimizeIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
OptimizeIL.MarkSequencePoint(doc3, 983, 1, 983, 100)
Dim typ117(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ117(UBound(typ117) + 1)
typ117(UBound(typ117)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Trim", typ117))
Typ = Typ03.GetMethod("Trim", typ117).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 984, 1, 984, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 95)
Typ = GetType(StringLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
OptimizeIL.Emit(OpCodes.Stfld, GetType(StringLiteral).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 985, 1, 985, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 95)
Typ = GetType(StringLiteral)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 986, 1, 986, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 987, 1, 987, 100)
OptimizeIL.Emit(OpCodes.Br, cont94)
OptimizeIL.MarkLabel(fa94)
OptimizeIL.Emit(OpCodes.Br, cont94)
OptimizeIL.MarkLabel(cont94)
OptimizeIL.MarkSequencePoint(doc3, 989, 1, 989, 100)
Dim typ118(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ118(UBound(typ118) + 1)
typ118(UBound(typ118)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^(\d)+\.(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ118(UBound(typ118) + 1)
typ118(UBound(typ118)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ118))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ118).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 990, 1, 990, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 991, 1, 991, 100)
Dim typ119(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ119(UBound(typ119) + 1)
typ119(UBound(typ119)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^\+(\d)+\.(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ119(UBound(typ119) + 1)
typ119(UBound(typ119)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ119))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ119).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 992, 1, 992, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 993, 1, 993, 100)
Dim typ120(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ120(UBound(typ120) + 1)
typ120(UBound(typ120)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^-(\d)+\.(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ120(UBound(typ120) + 1)
typ120(UBound(typ120)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ120))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ120).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 994, 1, 994, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 995, 1, 995, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 996, 1, 996, 100)
Dim typ121(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "d")
Typ = GetType(System.String)
ReDim Preserve typ121(UBound(typ121) + 1)
typ121(UBound(typ121)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("EndsWith", typ121))
Typ = Typ03.GetMethod("EndsWith", typ121).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 997, 1, 997, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.And)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 999, 1, 999, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa95 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru95 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont95 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru95)
OptimizeIL.Emit(OpCodes.Br, fa95)
OptimizeIL.MarkLabel(tru95)
OptimizeIL.MarkSequencePoint(doc3, 1000, 1, 1000, 100)
Dim locbldr96 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(DoubleLiteral))
locbldr96.SetLocalSymInfo("dlit2")
OptimizeIL.Emit(OpCodes.Newobj, GetType(DoubleLiteral).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 96)
OptimizeIL.MarkSequencePoint(doc3, 1001, 1, 1001, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 96)
Typ = GetType(DoubleLiteral)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DoubleLiteral).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 1002, 1, 1002, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1003, 1, 1003, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
OptimizeIL.Emit(OpCodes.Newarr, GetType(System.Char))
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc3, 1004, 1, 1004, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldstr, "d")
Typ = GetType(System.String)
Dim typ122 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ122))
Typ = GetType(System.Convert).GetMethod("ToChar", typ122).ReturnType
OptimizeIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
OptimizeIL.MarkSequencePoint(doc3, 1005, 1, 1005, 100)
Dim typ123(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ123(UBound(typ123) + 1)
typ123(UBound(typ123)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TrimEnd", typ123))
Typ = Typ03.GetMethod("TrimEnd", typ123).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1006, 1, 1006, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 96)
Typ = GetType(DoubleLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
OptimizeIL.Emit(OpCodes.Stfld, GetType(DoubleLiteral).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 1007, 1, 1007, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 96)
Typ = GetType(DoubleLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 96)
Typ = GetType(DoubleLiteral)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(DoubleLiteral).GetField("Value"))
Typ = GetType(DoubleLiteral).GetField("Value").FieldType
Dim typ124 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToDouble", typ124))
Typ = GetType(System.Convert).GetMethod("ToDouble", typ124).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DoubleLiteral).GetField("NumVal"))
OptimizeIL.MarkSequencePoint(doc3, 1008, 1, 1008, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 96)
Typ = GetType(DoubleLiteral)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 1009, 1, 1009, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 1010, 1, 1010, 100)
OptimizeIL.Emit(OpCodes.Br, cont95)
OptimizeIL.MarkLabel(fa95)
OptimizeIL.Emit(OpCodes.Br, cont95)
OptimizeIL.MarkLabel(cont95)
OptimizeIL.MarkSequencePoint(doc3, 1013, 1, 1013, 100)
Dim typ125(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ125(UBound(typ125) + 1)
typ125(UBound(typ125)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^(\d)+\.(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ125(UBound(typ125) + 1)
typ125(UBound(typ125)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ125))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ125).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1014, 1, 1014, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1015, 1, 1015, 100)
Dim typ126(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ126(UBound(typ126) + 1)
typ126(UBound(typ126)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^\+(\d)+\.(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ126(UBound(typ126) + 1)
typ126(UBound(typ126)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ126))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ126).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1016, 1, 1016, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1017, 1, 1017, 100)
Dim typ127(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ127(UBound(typ127) + 1)
typ127(UBound(typ127)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^-(\d)+\.(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ127(UBound(typ127) + 1)
typ127(UBound(typ127)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ127))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ127).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1018, 1, 1018, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1019, 1, 1019, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1020, 1, 1020, 100)
Dim typ128(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "f")
Typ = GetType(System.String)
ReDim Preserve typ128(UBound(typ128) + 1)
typ128(UBound(typ128)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("EndsWith", typ128))
Typ = Typ03.GetMethod("EndsWith", typ128).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1021, 1, 1021, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.And)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1023, 1, 1023, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa96 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru96 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont96 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru96)
OptimizeIL.Emit(OpCodes.Br, fa96)
OptimizeIL.MarkLabel(tru96)
OptimizeIL.MarkSequencePoint(doc3, 1024, 1, 1024, 100)
Dim locbldr97 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(FloatLiteral))
locbldr97.SetLocalSymInfo("flit")
OptimizeIL.Emit(OpCodes.Newobj, GetType(FloatLiteral).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 97)
OptimizeIL.MarkSequencePoint(doc3, 1025, 1, 1025, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 97)
Typ = GetType(FloatLiteral)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(FloatLiteral).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 1026, 1, 1026, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1027, 1, 1027, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
OptimizeIL.Emit(OpCodes.Newarr, GetType(System.Char))
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc3, 1028, 1, 1028, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldstr, "f")
Typ = GetType(System.String)
Dim typ129 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ129))
Typ = GetType(System.Convert).GetMethod("ToChar", typ129).ReturnType
OptimizeIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
OptimizeIL.MarkSequencePoint(doc3, 1029, 1, 1029, 100)
Dim typ130(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ130(UBound(typ130) + 1)
typ130(UBound(typ130)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TrimEnd", typ130))
Typ = Typ03.GetMethod("TrimEnd", typ130).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1030, 1, 1030, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 97)
Typ = GetType(FloatLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
OptimizeIL.Emit(OpCodes.Stfld, GetType(FloatLiteral).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 1031, 1, 1031, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 97)
Typ = GetType(FloatLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 97)
Typ = GetType(FloatLiteral)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(FloatLiteral).GetField("Value"))
Typ = GetType(FloatLiteral).GetField("Value").FieldType
Dim typ131 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToSingle", typ131))
Typ = GetType(System.Convert).GetMethod("ToSingle", typ131).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(FloatLiteral).GetField("NumVal"))
OptimizeIL.MarkSequencePoint(doc3, 1032, 1, 1032, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 97)
Typ = GetType(FloatLiteral)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 1033, 1, 1033, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 1034, 1, 1034, 100)
OptimizeIL.Emit(OpCodes.Br, cont96)
OptimizeIL.MarkLabel(fa96)
OptimizeIL.Emit(OpCodes.Br, cont96)
OptimizeIL.MarkLabel(cont96)
OptimizeIL.MarkSequencePoint(doc3, 1037, 1, 1037, 100)
Dim typ132(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ132(UBound(typ132) + 1)
typ132(UBound(typ132)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^(\d)+\.(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ132(UBound(typ132) + 1)
typ132(UBound(typ132)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ132))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ132).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1038, 1, 1038, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1039, 1, 1039, 100)
Dim typ133(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ133(UBound(typ133) + 1)
typ133(UBound(typ133)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^\+(\d)+\.(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ133(UBound(typ133) + 1)
typ133(UBound(typ133)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ133))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ133).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1040, 1, 1040, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1041, 1, 1041, 100)
Dim typ134(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ134(UBound(typ134) + 1)
typ134(UBound(typ134)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^-(\d)+\.(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ134(UBound(typ134) + 1)
typ134(UBound(typ134)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ134))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ134).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1042, 1, 1042, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1044, 1, 1044, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa97 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru97 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont97 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru97)
OptimizeIL.Emit(OpCodes.Br, fa97)
OptimizeIL.MarkLabel(tru97)
OptimizeIL.MarkSequencePoint(doc3, 1045, 1, 1045, 100)
Dim locbldr98 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(DoubleLiteral))
locbldr98.SetLocalSymInfo("dlit")
OptimizeIL.Emit(OpCodes.Newobj, GetType(DoubleLiteral).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 98)
OptimizeIL.MarkSequencePoint(doc3, 1046, 1, 1046, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 98)
Typ = GetType(DoubleLiteral)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DoubleLiteral).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 1047, 1, 1047, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1051, 1, 1051, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 98)
Typ = GetType(DoubleLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
OptimizeIL.Emit(OpCodes.Stfld, GetType(DoubleLiteral).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 1052, 1, 1052, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 98)
Typ = GetType(DoubleLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 98)
Typ = GetType(DoubleLiteral)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(DoubleLiteral).GetField("Value"))
Typ = GetType(DoubleLiteral).GetField("Value").FieldType
Dim typ135 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToDouble", typ135))
Typ = GetType(System.Convert).GetMethod("ToDouble", typ135).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DoubleLiteral).GetField("NumVal"))
OptimizeIL.MarkSequencePoint(doc3, 1053, 1, 1053, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 98)
Typ = GetType(DoubleLiteral)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 1054, 1, 1054, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 1055, 1, 1055, 100)
OptimizeIL.Emit(OpCodes.Br, cont97)
OptimizeIL.MarkLabel(fa97)
OptimizeIL.Emit(OpCodes.Br, cont97)
OptimizeIL.MarkLabel(cont97)
OptimizeIL.MarkSequencePoint(doc3, 1058, 1, 1058, 100)
Dim typ136(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ136(UBound(typ136) + 1)
typ136(UBound(typ136)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ136(UBound(typ136) + 1)
typ136(UBound(typ136)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ136))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ136).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1059, 1, 1059, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1060, 1, 1060, 100)
Dim typ137(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ137(UBound(typ137) + 1)
typ137(UBound(typ137)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^\+(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ137(UBound(typ137) + 1)
typ137(UBound(typ137)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ137))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ137).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1061, 1, 1061, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1062, 1, 1062, 100)
Dim typ138(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ138(UBound(typ138) + 1)
typ138(UBound(typ138)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^-(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ138(UBound(typ138) + 1)
typ138(UBound(typ138)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ138))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ138).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1063, 1, 1063, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1064, 1, 1064, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1065, 1, 1065, 100)
Dim typ139(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "d")
Typ = GetType(System.String)
ReDim Preserve typ139(UBound(typ139) + 1)
typ139(UBound(typ139)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("EndsWith", typ139))
Typ = Typ03.GetMethod("EndsWith", typ139).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1066, 1, 1066, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.And)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1068, 1, 1068, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa98 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru98 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont98 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru98)
OptimizeIL.Emit(OpCodes.Br, fa98)
OptimizeIL.MarkLabel(tru98)
OptimizeIL.MarkSequencePoint(doc3, 1069, 1, 1069, 100)
Dim locbldr99 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(DoubleLiteral))
locbldr99.SetLocalSymInfo("dlit3")
OptimizeIL.Emit(OpCodes.Newobj, GetType(DoubleLiteral).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 99)
OptimizeIL.MarkSequencePoint(doc3, 1070, 1, 1070, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 99)
Typ = GetType(DoubleLiteral)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DoubleLiteral).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 1071, 1, 1071, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1072, 1, 1072, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
OptimizeIL.Emit(OpCodes.Newarr, GetType(System.Char))
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc3, 1073, 1, 1073, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldstr, "d")
Typ = GetType(System.String)
Dim typ140 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ140))
Typ = GetType(System.Convert).GetMethod("ToChar", typ140).ReturnType
OptimizeIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
OptimizeIL.MarkSequencePoint(doc3, 1074, 1, 1074, 100)
Dim typ141(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ141(UBound(typ141) + 1)
typ141(UBound(typ141)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TrimEnd", typ141))
Typ = Typ03.GetMethod("TrimEnd", typ141).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1075, 1, 1075, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 99)
Typ = GetType(DoubleLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
OptimizeIL.Emit(OpCodes.Stfld, GetType(DoubleLiteral).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 1076, 1, 1076, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 99)
Typ = GetType(DoubleLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 99)
Typ = GetType(DoubleLiteral)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(DoubleLiteral).GetField("Value"))
Typ = GetType(DoubleLiteral).GetField("Value").FieldType
Dim typ142 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToDouble", typ142))
Typ = GetType(System.Convert).GetMethod("ToDouble", typ142).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(DoubleLiteral).GetField("NumVal"))
OptimizeIL.MarkSequencePoint(doc3, 1077, 1, 1077, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 99)
Typ = GetType(DoubleLiteral)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 1078, 1, 1078, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 1079, 1, 1079, 100)
OptimizeIL.Emit(OpCodes.Br, cont98)
OptimizeIL.MarkLabel(fa98)
OptimizeIL.Emit(OpCodes.Br, cont98)
OptimizeIL.MarkLabel(cont98)
OptimizeIL.MarkSequencePoint(doc3, 1081, 1, 1081, 100)
Dim typ143(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ143(UBound(typ143) + 1)
typ143(UBound(typ143)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ143(UBound(typ143) + 1)
typ143(UBound(typ143)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ143))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ143).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1082, 1, 1082, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1083, 1, 1083, 100)
Dim typ144(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ144(UBound(typ144) + 1)
typ144(UBound(typ144)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^\+(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ144(UBound(typ144) + 1)
typ144(UBound(typ144)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ144))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ144).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1084, 1, 1084, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1085, 1, 1085, 100)
Dim typ145(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ145(UBound(typ145) + 1)
typ145(UBound(typ145)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^-(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ145(UBound(typ145) + 1)
typ145(UBound(typ145)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ145))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ145).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1086, 1, 1086, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1087, 1, 1087, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1088, 1, 1088, 100)
Dim typ146(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "f")
Typ = GetType(System.String)
ReDim Preserve typ146(UBound(typ146) + 1)
typ146(UBound(typ146)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("EndsWith", typ146))
Typ = Typ03.GetMethod("EndsWith", typ146).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1089, 1, 1089, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.And)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1091, 1, 1091, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa99 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru99 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont99 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru99)
OptimizeIL.Emit(OpCodes.Br, fa99)
OptimizeIL.MarkLabel(tru99)
OptimizeIL.MarkSequencePoint(doc3, 1092, 1, 1092, 100)
Dim locbldr100 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(FloatLiteral))
locbldr100.SetLocalSymInfo("flit2")
OptimizeIL.Emit(OpCodes.Newobj, GetType(FloatLiteral).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 100)
OptimizeIL.MarkSequencePoint(doc3, 1093, 1, 1093, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 100)
Typ = GetType(FloatLiteral)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(FloatLiteral).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 1094, 1, 1094, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1095, 1, 1095, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
OptimizeIL.Emit(OpCodes.Newarr, GetType(System.Char))
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc3, 1096, 1, 1096, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldstr, "f")
Typ = GetType(System.String)
Dim typ147 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ147))
Typ = GetType(System.Convert).GetMethod("ToChar", typ147).ReturnType
OptimizeIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
OptimizeIL.MarkSequencePoint(doc3, 1097, 1, 1097, 100)
Dim typ148(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ148(UBound(typ148) + 1)
typ148(UBound(typ148)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TrimEnd", typ148))
Typ = Typ03.GetMethod("TrimEnd", typ148).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1098, 1, 1098, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 100)
Typ = GetType(FloatLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
OptimizeIL.Emit(OpCodes.Stfld, GetType(FloatLiteral).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 1099, 1, 1099, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 100)
Typ = GetType(FloatLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 100)
Typ = GetType(FloatLiteral)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(FloatLiteral).GetField("Value"))
Typ = GetType(FloatLiteral).GetField("Value").FieldType
Dim typ149 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToSingle", typ149))
Typ = GetType(System.Convert).GetMethod("ToSingle", typ149).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(FloatLiteral).GetField("NumVal"))
OptimizeIL.MarkSequencePoint(doc3, 1100, 1, 1100, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 100)
Typ = GetType(FloatLiteral)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 1101, 1, 1101, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 1102, 1, 1102, 100)
OptimizeIL.Emit(OpCodes.Br, cont99)
OptimizeIL.MarkLabel(fa99)
OptimizeIL.Emit(OpCodes.Br, cont99)
OptimizeIL.MarkLabel(cont99)
OptimizeIL.MarkSequencePoint(doc3, 1104, 1, 1104, 100)
Dim typ150(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ150(UBound(typ150) + 1)
typ150(UBound(typ150)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ150(UBound(typ150) + 1)
typ150(UBound(typ150)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ150))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ150).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1105, 1, 1105, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1106, 1, 1106, 100)
Dim typ151(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ151(UBound(typ151) + 1)
typ151(UBound(typ151)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^\+(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ151(UBound(typ151) + 1)
typ151(UBound(typ151)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ151))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ151).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1107, 1, 1107, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1108, 1, 1108, 100)
Dim typ152(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ152(UBound(typ152) + 1)
typ152(UBound(typ152)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^-(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ152(UBound(typ152) + 1)
typ152(UBound(typ152)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ152))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ152).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1109, 1, 1109, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1110, 1, 1110, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1111, 1, 1111, 100)
Dim typ153(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "ui")
Typ = GetType(System.String)
ReDim Preserve typ153(UBound(typ153) + 1)
typ153(UBound(typ153)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("EndsWith", typ153))
Typ = Typ03.GetMethod("EndsWith", typ153).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1112, 1, 1112, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.And)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1114, 1, 1114, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa100 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru100 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont100 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru100)
OptimizeIL.Emit(OpCodes.Br, fa100)
OptimizeIL.MarkLabel(tru100)
OptimizeIL.MarkSequencePoint(doc3, 1115, 1, 1115, 100)
Dim locbldr101 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(UIntLiteral))
locbldr101.SetLocalSymInfo("uilit2")
OptimizeIL.Emit(OpCodes.Newobj, GetType(UIntLiteral).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 101)
OptimizeIL.MarkSequencePoint(doc3, 1116, 1, 1116, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 101)
Typ = GetType(UIntLiteral)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(UIntLiteral).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 1117, 1, 1117, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1118, 1, 1118, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
OptimizeIL.Emit(OpCodes.Newarr, GetType(System.Char))
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc3, 1119, 1, 1119, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldstr, "i")
Typ = GetType(System.String)
Dim typ154 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ154))
Typ = GetType(System.Convert).GetMethod("ToChar", typ154).ReturnType
OptimizeIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
OptimizeIL.MarkSequencePoint(doc3, 1120, 1, 1120, 100)
Dim typ155(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ155(UBound(typ155) + 1)
typ155(UBound(typ155)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TrimEnd", typ155))
Typ = Typ03.GetMethod("TrimEnd", typ155).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1121, 1, 1121, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldstr, "u")
Typ = GetType(System.String)
Dim typ156 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ156))
Typ = GetType(System.Convert).GetMethod("ToChar", typ156).ReturnType
OptimizeIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
OptimizeIL.MarkSequencePoint(doc3, 1122, 1, 1122, 100)
Dim typ157(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ157(UBound(typ157) + 1)
typ157(UBound(typ157)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TrimEnd", typ157))
Typ = Typ03.GetMethod("TrimEnd", typ157).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1123, 1, 1123, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 101)
Typ = GetType(UIntLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
OptimizeIL.Emit(OpCodes.Stfld, GetType(UIntLiteral).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 1124, 1, 1124, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 101)
Typ = GetType(UIntLiteral)
Dim typ158(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 101)
Typ = GetType(UIntLiteral)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(UIntLiteral).GetField("Value"))
Typ = GetType(UIntLiteral).GetField("Value").FieldType
ReDim Preserve typ158(UBound(typ158) + 1)
typ158(UBound(typ158)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Convert).GetMethod("ToUInt32", typ158))
Typ = GetType(Convert).GetMethod("ToUInt32", typ158).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(UIntLiteral).GetField("NumVal"))
OptimizeIL.MarkSequencePoint(doc3, 1125, 1, 1125, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 101)
Typ = GetType(UIntLiteral)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 1126, 1, 1126, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 1127, 1, 1127, 100)
OptimizeIL.Emit(OpCodes.Br, cont100)
OptimizeIL.MarkLabel(fa100)
OptimizeIL.Emit(OpCodes.Br, cont100)
OptimizeIL.MarkLabel(cont100)
OptimizeIL.MarkSequencePoint(doc3, 1129, 1, 1129, 100)
Dim typ159(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ159(UBound(typ159) + 1)
typ159(UBound(typ159)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ159(UBound(typ159) + 1)
typ159(UBound(typ159)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ159))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ159).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1130, 1, 1130, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1131, 1, 1131, 100)
Dim typ160(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ160(UBound(typ160) + 1)
typ160(UBound(typ160)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^\+(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ160(UBound(typ160) + 1)
typ160(UBound(typ160)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ160))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ160).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1132, 1, 1132, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1133, 1, 1133, 100)
Dim typ161(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ161(UBound(typ161) + 1)
typ161(UBound(typ161)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^-(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ161(UBound(typ161) + 1)
typ161(UBound(typ161)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ161))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ161).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1134, 1, 1134, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1135, 1, 1135, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1136, 1, 1136, 100)
Dim typ162(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "ip")
Typ = GetType(System.String)
ReDim Preserve typ162(UBound(typ162) + 1)
typ162(UBound(typ162)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("EndsWith", typ162))
Typ = Typ03.GetMethod("EndsWith", typ162).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1137, 1, 1137, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.And)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1139, 1, 1139, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa101 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru101 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont101 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru101)
OptimizeIL.Emit(OpCodes.Br, fa101)
OptimizeIL.MarkLabel(tru101)
OptimizeIL.MarkSequencePoint(doc3, 1140, 1, 1140, 100)
Dim locbldr102 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(IntPtrLiteral))
locbldr102.SetLocalSymInfo("iplit2")
OptimizeIL.Emit(OpCodes.Newobj, GetType(IntPtrLiteral).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 102)
OptimizeIL.MarkSequencePoint(doc3, 1141, 1, 1141, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 102)
Typ = GetType(IntPtrLiteral)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(IntPtrLiteral).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 1142, 1, 1142, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1143, 1, 1143, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
OptimizeIL.Emit(OpCodes.Newarr, GetType(System.Char))
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc3, 1144, 1, 1144, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldstr, "p")
Typ = GetType(System.String)
Dim typ163 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ163))
Typ = GetType(System.Convert).GetMethod("ToChar", typ163).ReturnType
OptimizeIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
OptimizeIL.MarkSequencePoint(doc3, 1145, 1, 1145, 100)
Dim typ164(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ164(UBound(typ164) + 1)
typ164(UBound(typ164)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TrimEnd", typ164))
Typ = Typ03.GetMethod("TrimEnd", typ164).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1146, 1, 1146, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldstr, "i")
Typ = GetType(System.String)
Dim typ165 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ165))
Typ = GetType(System.Convert).GetMethod("ToChar", typ165).ReturnType
OptimizeIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
OptimizeIL.MarkSequencePoint(doc3, 1147, 1, 1147, 100)
Dim typ166(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ166(UBound(typ166) + 1)
typ166(UBound(typ166)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TrimEnd", typ166))
Typ = Typ03.GetMethod("TrimEnd", typ166).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1148, 1, 1148, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 102)
Typ = GetType(IntPtrLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
OptimizeIL.Emit(OpCodes.Stfld, GetType(IntPtrLiteral).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 1149, 1, 1149, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 102)
Typ = GetType(IntPtrLiteral)
Dim typ167(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 102)
Typ = GetType(IntPtrLiteral)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(IntPtrLiteral).GetField("Value"))
Typ = GetType(IntPtrLiteral).GetField("Value").FieldType
Dim typ168 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToInt32", typ168))
Typ = GetType(System.Convert).GetMethod("ToInt32", typ168).ReturnType
ReDim Preserve typ167(UBound(typ167) + 1)
typ167(UBound(typ167)) = Typ
OptimizeIL.Emit(OpCodes.Newobj, GetType(IntPtr).GetConstructor(typ167))
OptimizeIL.Emit(OpCodes.Stfld, GetType(IntPtrLiteral).GetField("NumVal"))
OptimizeIL.MarkSequencePoint(doc3, 1150, 1, 1150, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 102)
Typ = GetType(IntPtrLiteral)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 1151, 1, 1151, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 1152, 1, 1152, 100)
OptimizeIL.Emit(OpCodes.Br, cont101)
OptimizeIL.MarkLabel(fa101)
OptimizeIL.Emit(OpCodes.Br, cont101)
OptimizeIL.MarkLabel(cont101)
OptimizeIL.MarkSequencePoint(doc3, 1155, 1, 1155, 100)
Dim typ169(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ169(UBound(typ169) + 1)
typ169(UBound(typ169)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ169(UBound(typ169) + 1)
typ169(UBound(typ169)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ169))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ169).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1156, 1, 1156, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1157, 1, 1157, 100)
Dim typ170(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ170(UBound(typ170) + 1)
typ170(UBound(typ170)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^\+(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ170(UBound(typ170) + 1)
typ170(UBound(typ170)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ170))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ170).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1158, 1, 1158, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1159, 1, 1159, 100)
Dim typ171(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ171(UBound(typ171) + 1)
typ171(UBound(typ171)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^-(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ171(UBound(typ171) + 1)
typ171(UBound(typ171)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ171))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ171).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1160, 1, 1160, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1161, 1, 1161, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1162, 1, 1162, 100)
Dim typ172(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "i")
Typ = GetType(System.String)
ReDim Preserve typ172(UBound(typ172) + 1)
typ172(UBound(typ172)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("EndsWith", typ172))
Typ = Typ03.GetMethod("EndsWith", typ172).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1163, 1, 1163, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.And)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1165, 1, 1165, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa102 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru102 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont102 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru102)
OptimizeIL.Emit(OpCodes.Br, fa102)
OptimizeIL.MarkLabel(tru102)
OptimizeIL.MarkSequencePoint(doc3, 1166, 1, 1166, 100)
Dim locbldr103 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(IntLiteral))
locbldr103.SetLocalSymInfo("ilit2")
OptimizeIL.Emit(OpCodes.Newobj, GetType(IntLiteral).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 103)
OptimizeIL.MarkSequencePoint(doc3, 1167, 1, 1167, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 103)
Typ = GetType(IntLiteral)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(IntLiteral).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 1168, 1, 1168, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1169, 1, 1169, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
OptimizeIL.Emit(OpCodes.Newarr, GetType(System.Char))
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc3, 1170, 1, 1170, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldstr, "i")
Typ = GetType(System.String)
Dim typ173 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ173))
Typ = GetType(System.Convert).GetMethod("ToChar", typ173).ReturnType
OptimizeIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
OptimizeIL.MarkSequencePoint(doc3, 1171, 1, 1171, 100)
Dim typ174(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ174(UBound(typ174) + 1)
typ174(UBound(typ174)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TrimEnd", typ174))
Typ = Typ03.GetMethod("TrimEnd", typ174).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1172, 1, 1172, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 103)
Typ = GetType(IntLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
OptimizeIL.Emit(OpCodes.Stfld, GetType(IntLiteral).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 1173, 1, 1173, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 103)
Typ = GetType(IntLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 103)
Typ = GetType(IntLiteral)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(IntLiteral).GetField("Value"))
Typ = GetType(IntLiteral).GetField("Value").FieldType
Dim typ175 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToInt32", typ175))
Typ = GetType(System.Convert).GetMethod("ToInt32", typ175).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(IntLiteral).GetField("NumVal"))
OptimizeIL.MarkSequencePoint(doc3, 1174, 1, 1174, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 103)
Typ = GetType(IntLiteral)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 1175, 1, 1175, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 1176, 1, 1176, 100)
OptimizeIL.Emit(OpCodes.Br, cont102)
OptimizeIL.MarkLabel(fa102)
OptimizeIL.Emit(OpCodes.Br, cont102)
OptimizeIL.MarkLabel(cont102)
OptimizeIL.MarkSequencePoint(doc3, 1179, 1, 1179, 100)
Dim typ176(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ176(UBound(typ176) + 1)
typ176(UBound(typ176)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ176(UBound(typ176) + 1)
typ176(UBound(typ176)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ176))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ176).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1180, 1, 1180, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1181, 1, 1181, 100)
Dim typ177(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ177(UBound(typ177) + 1)
typ177(UBound(typ177)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^\+(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ177(UBound(typ177) + 1)
typ177(UBound(typ177)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ177))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ177).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1182, 1, 1182, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1183, 1, 1183, 100)
Dim typ178(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ178(UBound(typ178) + 1)
typ178(UBound(typ178)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^-(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ178(UBound(typ178) + 1)
typ178(UBound(typ178)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ178))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ178).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1184, 1, 1184, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1185, 1, 1185, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1186, 1, 1186, 100)
Dim typ179(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "ul")
Typ = GetType(System.String)
ReDim Preserve typ179(UBound(typ179) + 1)
typ179(UBound(typ179)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("EndsWith", typ179))
Typ = Typ03.GetMethod("EndsWith", typ179).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1187, 1, 1187, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.And)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1189, 1, 1189, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa103 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru103 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont103 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru103)
OptimizeIL.Emit(OpCodes.Br, fa103)
OptimizeIL.MarkLabel(tru103)
OptimizeIL.MarkSequencePoint(doc3, 1190, 1, 1190, 100)
Dim locbldr104 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(ULongLiteral))
locbldr104.SetLocalSymInfo("ullit")
OptimizeIL.Emit(OpCodes.Newobj, GetType(ULongLiteral).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 104)
OptimizeIL.MarkSequencePoint(doc3, 1191, 1, 1191, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 104)
Typ = GetType(ULongLiteral)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ULongLiteral).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 1192, 1, 1192, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1193, 1, 1193, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
OptimizeIL.Emit(OpCodes.Newarr, GetType(System.Char))
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc3, 1194, 1, 1194, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldstr, "l")
Typ = GetType(System.String)
Dim typ180 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ180))
Typ = GetType(System.Convert).GetMethod("ToChar", typ180).ReturnType
OptimizeIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
OptimizeIL.MarkSequencePoint(doc3, 1195, 1, 1195, 100)
Dim typ181(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ181(UBound(typ181) + 1)
typ181(UBound(typ181)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TrimEnd", typ181))
Typ = Typ03.GetMethod("TrimEnd", typ181).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1196, 1, 1196, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldstr, "u")
Typ = GetType(System.String)
Dim typ182 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ182))
Typ = GetType(System.Convert).GetMethod("ToChar", typ182).ReturnType
OptimizeIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
OptimizeIL.MarkSequencePoint(doc3, 1197, 1, 1197, 100)
Dim typ183(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ183(UBound(typ183) + 1)
typ183(UBound(typ183)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TrimEnd", typ183))
Typ = Typ03.GetMethod("TrimEnd", typ183).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1198, 1, 1198, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 104)
Typ = GetType(ULongLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
OptimizeIL.Emit(OpCodes.Stfld, GetType(ULongLiteral).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 1199, 1, 1199, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 104)
Typ = GetType(ULongLiteral)
Dim typ184(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 104)
Typ = GetType(ULongLiteral)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(ULongLiteral).GetField("Value"))
Typ = GetType(ULongLiteral).GetField("Value").FieldType
ReDim Preserve typ184(UBound(typ184) + 1)
typ184(UBound(typ184)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Convert).GetMethod("ToUInt64", typ184))
Typ = GetType(Convert).GetMethod("ToUInt64", typ184).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ULongLiteral).GetField("NumVal"))
OptimizeIL.MarkSequencePoint(doc3, 1200, 1, 1200, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 104)
Typ = GetType(ULongLiteral)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 1201, 1, 1201, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 1202, 1, 1202, 100)
OptimizeIL.Emit(OpCodes.Br, cont103)
OptimizeIL.MarkLabel(fa103)
OptimizeIL.Emit(OpCodes.Br, cont103)
OptimizeIL.MarkLabel(cont103)
OptimizeIL.MarkSequencePoint(doc3, 1205, 1, 1205, 100)
Dim typ185(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ185(UBound(typ185) + 1)
typ185(UBound(typ185)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ185(UBound(typ185) + 1)
typ185(UBound(typ185)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ185))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ185).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1206, 1, 1206, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1207, 1, 1207, 100)
Dim typ186(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ186(UBound(typ186) + 1)
typ186(UBound(typ186)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^\+(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ186(UBound(typ186) + 1)
typ186(UBound(typ186)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ186))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ186).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1208, 1, 1208, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1209, 1, 1209, 100)
Dim typ187(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ187(UBound(typ187) + 1)
typ187(UBound(typ187)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^-(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ187(UBound(typ187) + 1)
typ187(UBound(typ187)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ187))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ187).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1210, 1, 1210, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1211, 1, 1211, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1212, 1, 1212, 100)
Dim typ188(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "l")
Typ = GetType(System.String)
ReDim Preserve typ188(UBound(typ188) + 1)
typ188(UBound(typ188)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("EndsWith", typ188))
Typ = Typ03.GetMethod("EndsWith", typ188).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1213, 1, 1213, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.And)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1215, 1, 1215, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa104 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru104 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont104 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru104)
OptimizeIL.Emit(OpCodes.Br, fa104)
OptimizeIL.MarkLabel(tru104)
OptimizeIL.MarkSequencePoint(doc3, 1216, 1, 1216, 100)
Dim locbldr105 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(LongLiteral))
locbldr105.SetLocalSymInfo("llit")
OptimizeIL.Emit(OpCodes.Newobj, GetType(LongLiteral).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 105)
OptimizeIL.MarkSequencePoint(doc3, 1217, 1, 1217, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 105)
Typ = GetType(LongLiteral)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(LongLiteral).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 1218, 1, 1218, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1219, 1, 1219, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
OptimizeIL.Emit(OpCodes.Newarr, GetType(System.Char))
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc3, 1220, 1, 1220, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldstr, "l")
Typ = GetType(System.String)
Dim typ189 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ189))
Typ = GetType(System.Convert).GetMethod("ToChar", typ189).ReturnType
OptimizeIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
OptimizeIL.MarkSequencePoint(doc3, 1221, 1, 1221, 100)
Dim typ190(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ190(UBound(typ190) + 1)
typ190(UBound(typ190)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TrimEnd", typ190))
Typ = Typ03.GetMethod("TrimEnd", typ190).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1222, 1, 1222, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 105)
Typ = GetType(LongLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
OptimizeIL.Emit(OpCodes.Stfld, GetType(LongLiteral).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 1223, 1, 1223, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 105)
Typ = GetType(LongLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 105)
Typ = GetType(LongLiteral)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(LongLiteral).GetField("Value"))
Typ = GetType(LongLiteral).GetField("Value").FieldType
Dim typ191 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToInt64", typ191))
Typ = GetType(System.Convert).GetMethod("ToInt64", typ191).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(LongLiteral).GetField("NumVal"))
OptimizeIL.MarkSequencePoint(doc3, 1224, 1, 1224, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 105)
Typ = GetType(LongLiteral)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 1225, 1, 1225, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 1226, 1, 1226, 100)
OptimizeIL.Emit(OpCodes.Br, cont104)
OptimizeIL.MarkLabel(fa104)
OptimizeIL.Emit(OpCodes.Br, cont104)
OptimizeIL.MarkLabel(cont104)
OptimizeIL.MarkSequencePoint(doc3, 1228, 1, 1228, 100)
Dim typ192(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ192(UBound(typ192) + 1)
typ192(UBound(typ192)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ192(UBound(typ192) + 1)
typ192(UBound(typ192)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ192))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ192).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1229, 1, 1229, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1230, 1, 1230, 100)
Dim typ193(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ193(UBound(typ193) + 1)
typ193(UBound(typ193)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^\+(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ193(UBound(typ193) + 1)
typ193(UBound(typ193)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ193))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ193).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1231, 1, 1231, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1232, 1, 1232, 100)
Dim typ194(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ194(UBound(typ194) + 1)
typ194(UBound(typ194)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^-(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ194(UBound(typ194) + 1)
typ194(UBound(typ194)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ194))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ194).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1233, 1, 1233, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1234, 1, 1234, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1235, 1, 1235, 100)
Dim typ195(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "us")
Typ = GetType(System.String)
ReDim Preserve typ195(UBound(typ195) + 1)
typ195(UBound(typ195)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("EndsWith", typ195))
Typ = Typ03.GetMethod("EndsWith", typ195).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1236, 1, 1236, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.And)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1238, 1, 1238, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa105 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru105 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont105 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru105)
OptimizeIL.Emit(OpCodes.Br, fa105)
OptimizeIL.MarkLabel(tru105)
OptimizeIL.MarkSequencePoint(doc3, 1239, 1, 1239, 100)
Dim locbldr106 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(UShortLiteral))
locbldr106.SetLocalSymInfo("uslit")
OptimizeIL.Emit(OpCodes.Newobj, GetType(UShortLiteral).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 106)
OptimizeIL.MarkSequencePoint(doc3, 1240, 1, 1240, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 106)
Typ = GetType(UShortLiteral)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(UShortLiteral).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 1241, 1, 1241, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1242, 1, 1242, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
OptimizeIL.Emit(OpCodes.Newarr, GetType(System.Char))
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc3, 1243, 1, 1243, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldstr, "s")
Typ = GetType(System.String)
Dim typ196 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ196))
Typ = GetType(System.Convert).GetMethod("ToChar", typ196).ReturnType
OptimizeIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
OptimizeIL.MarkSequencePoint(doc3, 1244, 1, 1244, 100)
Dim typ197(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ197(UBound(typ197) + 1)
typ197(UBound(typ197)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TrimEnd", typ197))
Typ = Typ03.GetMethod("TrimEnd", typ197).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1245, 1, 1245, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldstr, "u")
Typ = GetType(System.String)
Dim typ198 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ198))
Typ = GetType(System.Convert).GetMethod("ToChar", typ198).ReturnType
OptimizeIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
OptimizeIL.MarkSequencePoint(doc3, 1246, 1, 1246, 100)
Dim typ199(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ199(UBound(typ199) + 1)
typ199(UBound(typ199)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TrimEnd", typ199))
Typ = Typ03.GetMethod("TrimEnd", typ199).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1247, 1, 1247, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 106)
Typ = GetType(UShortLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
OptimizeIL.Emit(OpCodes.Stfld, GetType(UShortLiteral).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 1248, 1, 1248, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 106)
Typ = GetType(UShortLiteral)
Dim typ200(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 106)
Typ = GetType(UShortLiteral)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(UShortLiteral).GetField("Value"))
Typ = GetType(UShortLiteral).GetField("Value").FieldType
ReDim Preserve typ200(UBound(typ200) + 1)
typ200(UBound(typ200)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Convert).GetMethod("ToUInt16", typ200))
Typ = GetType(Convert).GetMethod("ToUInt16", typ200).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(UShortLiteral).GetField("NumVal"))
OptimizeIL.MarkSequencePoint(doc3, 1249, 1, 1249, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 106)
Typ = GetType(UShortLiteral)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 1250, 1, 1250, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 1251, 1, 1251, 100)
OptimizeIL.Emit(OpCodes.Br, cont105)
OptimizeIL.MarkLabel(fa105)
OptimizeIL.Emit(OpCodes.Br, cont105)
OptimizeIL.MarkLabel(cont105)
OptimizeIL.MarkSequencePoint(doc3, 1253, 1, 1253, 100)
Dim typ201(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ201(UBound(typ201) + 1)
typ201(UBound(typ201)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ201(UBound(typ201) + 1)
typ201(UBound(typ201)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ201))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ201).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1254, 1, 1254, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1255, 1, 1255, 100)
Dim typ202(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ202(UBound(typ202) + 1)
typ202(UBound(typ202)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^\+(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ202(UBound(typ202) + 1)
typ202(UBound(typ202)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ202))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ202).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1256, 1, 1256, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1257, 1, 1257, 100)
Dim typ203(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ203(UBound(typ203) + 1)
typ203(UBound(typ203)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^-(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ203(UBound(typ203) + 1)
typ203(UBound(typ203)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ203))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ203).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1258, 1, 1258, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1259, 1, 1259, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1260, 1, 1260, 100)
Dim typ204(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "s")
Typ = GetType(System.String)
ReDim Preserve typ204(UBound(typ204) + 1)
typ204(UBound(typ204)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("EndsWith", typ204))
Typ = Typ03.GetMethod("EndsWith", typ204).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1261, 1, 1261, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.And)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1263, 1, 1263, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa106 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru106 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont106 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru106)
OptimizeIL.Emit(OpCodes.Br, fa106)
OptimizeIL.MarkLabel(tru106)
OptimizeIL.MarkSequencePoint(doc3, 1264, 1, 1264, 100)
Dim locbldr107 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(ShortLiteral))
locbldr107.SetLocalSymInfo("slit")
OptimizeIL.Emit(OpCodes.Newobj, GetType(ShortLiteral).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 107)
OptimizeIL.MarkSequencePoint(doc3, 1265, 1, 1265, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 107)
Typ = GetType(ShortLiteral)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ShortLiteral).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 1266, 1, 1266, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1267, 1, 1267, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
OptimizeIL.Emit(OpCodes.Newarr, GetType(System.Char))
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc3, 1268, 1, 1268, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldstr, "s")
Typ = GetType(System.String)
Dim typ205 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ205))
Typ = GetType(System.Convert).GetMethod("ToChar", typ205).ReturnType
OptimizeIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
OptimizeIL.MarkSequencePoint(doc3, 1269, 1, 1269, 100)
Dim typ206(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ206(UBound(typ206) + 1)
typ206(UBound(typ206)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TrimEnd", typ206))
Typ = Typ03.GetMethod("TrimEnd", typ206).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1270, 1, 1270, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 107)
Typ = GetType(ShortLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
OptimizeIL.Emit(OpCodes.Stfld, GetType(ShortLiteral).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 1271, 1, 1271, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 107)
Typ = GetType(ShortLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 107)
Typ = GetType(ShortLiteral)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(ShortLiteral).GetField("Value"))
Typ = GetType(ShortLiteral).GetField("Value").FieldType
Dim typ207 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToInt16", typ207))
Typ = GetType(System.Convert).GetMethod("ToInt16", typ207).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ShortLiteral).GetField("NumVal"))
OptimizeIL.MarkSequencePoint(doc3, 1272, 1, 1272, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 107)
Typ = GetType(ShortLiteral)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 1273, 1, 1273, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 1274, 1, 1274, 100)
OptimizeIL.Emit(OpCodes.Br, cont106)
OptimizeIL.MarkLabel(fa106)
OptimizeIL.Emit(OpCodes.Br, cont106)
OptimizeIL.MarkLabel(cont106)
OptimizeIL.MarkSequencePoint(doc3, 1276, 1, 1276, 100)
Dim typ208(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ208(UBound(typ208) + 1)
typ208(UBound(typ208)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ208(UBound(typ208) + 1)
typ208(UBound(typ208)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ208))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ208).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1277, 1, 1277, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1278, 1, 1278, 100)
Dim typ209(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ209(UBound(typ209) + 1)
typ209(UBound(typ209)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^\+(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ209(UBound(typ209) + 1)
typ209(UBound(typ209)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ209))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ209).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1279, 1, 1279, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1280, 1, 1280, 100)
Dim typ210(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ210(UBound(typ210) + 1)
typ210(UBound(typ210)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^-(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ210(UBound(typ210) + 1)
typ210(UBound(typ210)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ210))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ210).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1281, 1, 1281, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1282, 1, 1282, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1283, 1, 1283, 100)
Dim typ211(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "ub")
Typ = GetType(System.String)
ReDim Preserve typ211(UBound(typ211) + 1)
typ211(UBound(typ211)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("EndsWith", typ211))
Typ = Typ03.GetMethod("EndsWith", typ211).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1284, 1, 1284, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.And)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1286, 1, 1286, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa107 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru107 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont107 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru107)
OptimizeIL.Emit(OpCodes.Br, fa107)
OptimizeIL.MarkLabel(tru107)
OptimizeIL.MarkSequencePoint(doc3, 1287, 1, 1287, 100)
Dim locbldr108 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(ByteLiteral))
locbldr108.SetLocalSymInfo("ublit")
OptimizeIL.Emit(OpCodes.Newobj, GetType(ByteLiteral).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 108)
OptimizeIL.MarkSequencePoint(doc3, 1288, 1, 1288, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 108)
Typ = GetType(ByteLiteral)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ByteLiteral).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 1289, 1, 1289, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1290, 1, 1290, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
OptimizeIL.Emit(OpCodes.Newarr, GetType(System.Char))
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc3, 1291, 1, 1291, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldstr, "b")
Typ = GetType(System.String)
Dim typ212 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ212))
Typ = GetType(System.Convert).GetMethod("ToChar", typ212).ReturnType
OptimizeIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
OptimizeIL.MarkSequencePoint(doc3, 1292, 1, 1292, 100)
Dim typ213(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ213(UBound(typ213) + 1)
typ213(UBound(typ213)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TrimEnd", typ213))
Typ = Typ03.GetMethod("TrimEnd", typ213).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1293, 1, 1293, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldstr, "u")
Typ = GetType(System.String)
Dim typ214 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ214))
Typ = GetType(System.Convert).GetMethod("ToChar", typ214).ReturnType
OptimizeIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
OptimizeIL.MarkSequencePoint(doc3, 1294, 1, 1294, 100)
Dim typ215(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ215(UBound(typ215) + 1)
typ215(UBound(typ215)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TrimEnd", typ215))
Typ = Typ03.GetMethod("TrimEnd", typ215).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1295, 1, 1295, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 108)
Typ = GetType(ByteLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
OptimizeIL.Emit(OpCodes.Stfld, GetType(ByteLiteral).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 1296, 1, 1296, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 108)
Typ = GetType(ByteLiteral)
Dim typ216(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 108)
Typ = GetType(ByteLiteral)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(ByteLiteral).GetField("Value"))
Typ = GetType(ByteLiteral).GetField("Value").FieldType
ReDim Preserve typ216(UBound(typ216) + 1)
typ216(UBound(typ216)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Convert).GetMethod("ToByte", typ216))
Typ = GetType(Convert).GetMethod("ToByte", typ216).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(ByteLiteral).GetField("NumVal"))
OptimizeIL.MarkSequencePoint(doc3, 1297, 1, 1297, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 108)
Typ = GetType(ByteLiteral)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 1298, 1, 1298, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 1299, 1, 1299, 100)
OptimizeIL.Emit(OpCodes.Br, cont107)
OptimizeIL.MarkLabel(fa107)
OptimizeIL.Emit(OpCodes.Br, cont107)
OptimizeIL.MarkLabel(cont107)
OptimizeIL.MarkSequencePoint(doc3, 1301, 1, 1301, 100)
Dim typ217(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ217(UBound(typ217) + 1)
typ217(UBound(typ217)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ217(UBound(typ217) + 1)
typ217(UBound(typ217)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ217))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ217).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1302, 1, 1302, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1303, 1, 1303, 100)
Dim typ218(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ218(UBound(typ218) + 1)
typ218(UBound(typ218)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^\+(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ218(UBound(typ218) + 1)
typ218(UBound(typ218)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ218))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ218).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1304, 1, 1304, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1305, 1, 1305, 100)
Dim typ219(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ219(UBound(typ219) + 1)
typ219(UBound(typ219)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^-(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ219(UBound(typ219) + 1)
typ219(UBound(typ219)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ219))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ219).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1306, 1, 1306, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1307, 1, 1307, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1308, 1, 1308, 100)
Dim typ220(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "b")
Typ = GetType(System.String)
ReDim Preserve typ220(UBound(typ220) + 1)
typ220(UBound(typ220)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("EndsWith", typ220))
Typ = Typ03.GetMethod("EndsWith", typ220).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1309, 1, 1309, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.And)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1311, 1, 1311, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa108 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru108 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont108 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru108)
OptimizeIL.Emit(OpCodes.Br, fa108)
OptimizeIL.MarkLabel(tru108)
OptimizeIL.MarkSequencePoint(doc3, 1312, 1, 1312, 100)
Dim locbldr109 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(SByteLiteral))
locbldr109.SetLocalSymInfo("blit")
OptimizeIL.Emit(OpCodes.Newobj, GetType(SByteLiteral).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 109)
OptimizeIL.MarkSequencePoint(doc3, 1313, 1, 1313, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 109)
Typ = GetType(SByteLiteral)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(SByteLiteral).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 1314, 1, 1314, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1315, 1, 1315, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
OptimizeIL.Emit(OpCodes.Newarr, GetType(System.Char))
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc3, 1316, 1, 1316, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldstr, "b")
Typ = GetType(System.String)
Dim typ221 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ221))
Typ = GetType(System.Convert).GetMethod("ToChar", typ221).ReturnType
OptimizeIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
OptimizeIL.MarkSequencePoint(doc3, 1317, 1, 1317, 100)
Dim typ222(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ222(UBound(typ222) + 1)
typ222(UBound(typ222)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TrimEnd", typ222))
Typ = Typ03.GetMethod("TrimEnd", typ222).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1318, 1, 1318, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 109)
Typ = GetType(SByteLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
OptimizeIL.Emit(OpCodes.Stfld, GetType(SByteLiteral).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 1319, 1, 1319, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 109)
Typ = GetType(SByteLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 109)
Typ = GetType(SByteLiteral)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(SByteLiteral).GetField("Value"))
Typ = GetType(SByteLiteral).GetField("Value").FieldType
Dim typ223 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToSByte", typ223))
Typ = GetType(System.Convert).GetMethod("ToSByte", typ223).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(SByteLiteral).GetField("NumVal"))
OptimizeIL.MarkSequencePoint(doc3, 1320, 1, 1320, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 109)
Typ = GetType(SByteLiteral)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 1321, 1, 1321, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 1322, 1, 1322, 100)
OptimizeIL.Emit(OpCodes.Br, cont108)
OptimizeIL.MarkLabel(fa108)
OptimizeIL.Emit(OpCodes.Br, cont108)
OptimizeIL.MarkLabel(cont108)
OptimizeIL.MarkSequencePoint(doc3, 1324, 1, 1324, 100)
Dim typ224(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ224(UBound(typ224) + 1)
typ224(UBound(typ224)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ224(UBound(typ224) + 1)
typ224(UBound(typ224)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ224))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ224).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1325, 1, 1325, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1326, 1, 1326, 100)
Dim typ225(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ225(UBound(typ225) + 1)
typ225(UBound(typ225)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^\+(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ225(UBound(typ225) + 1)
typ225(UBound(typ225)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ225))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ225).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1327, 1, 1327, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1328, 1, 1328, 100)
Dim typ226(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ226(UBound(typ226) + 1)
typ226(UBound(typ226)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^-(\d)+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ226(UBound(typ226) + 1)
typ226(UBound(typ226)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ226))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ226).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1329, 1, 1329, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1332, 1, 1332, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa109 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru109 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont109 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru109)
OptimizeIL.Emit(OpCodes.Br, fa109)
OptimizeIL.MarkLabel(tru109)
OptimizeIL.MarkSequencePoint(doc3, 1333, 1, 1333, 100)
Dim locbldr110 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(IntLiteral))
locbldr110.SetLocalSymInfo("ilit")
OptimizeIL.Emit(OpCodes.Newobj, GetType(IntLiteral).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 110)
OptimizeIL.MarkSequencePoint(doc3, 1334, 1, 1334, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 110)
Typ = GetType(IntLiteral)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(IntLiteral).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 1335, 1, 1335, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc3, 1339, 1, 1339, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 110)
Typ = GetType(IntLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
OptimizeIL.Emit(OpCodes.Stfld, GetType(IntLiteral).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 1340, 1, 1340, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 110)
Typ = GetType(IntLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 110)
Typ = GetType(IntLiteral)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(IntLiteral).GetField("Value"))
Typ = GetType(IntLiteral).GetField("Value").FieldType
Dim typ227 As Type() = {Typ}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToInt32", typ227))
Typ = GetType(System.Convert).GetMethod("ToInt32", typ227).ReturnType
OptimizeIL.Emit(OpCodes.Stfld, GetType(IntLiteral).GetField("NumVal"))
OptimizeIL.MarkSequencePoint(doc3, 1341, 1, 1341, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 110)
Typ = GetType(IntLiteral)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 1342, 1, 1342, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 1343, 1, 1343, 100)
OptimizeIL.Emit(OpCodes.Br, cont109)
OptimizeIL.MarkLabel(fa109)
OptimizeIL.Emit(OpCodes.Br, cont109)
OptimizeIL.MarkLabel(cont109)
OptimizeIL.MarkSequencePoint(doc3, 1346, 1, 1346, 100)
Dim typ228(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ228(UBound(typ228) + 1)
typ228(UBound(typ228)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^([a-zA-Z])+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ228(UBound(typ228) + 1)
typ228(UBound(typ228)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ228))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ228).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1347, 1, 1347, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1348, 1, 1348, 100)
Dim typ229(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ229(UBound(typ229) + 1)
typ229(UBound(typ229)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^_(.)*([a-zA-Z])+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ229(UBound(typ229) + 1)
typ229(UBound(typ229)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ229))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ229).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1349, 1, 1349, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1350, 1, 1350, 100)
Dim typ230(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ230(UBound(typ230) + 1)
typ230(UBound(typ230)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "^::(.)*([a-zA-Z])+(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ230(UBound(typ230) + 1)
typ230(UBound(typ230)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ230))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ230).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc3, 1351, 1, 1351, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc3, 1353, 1, 1353, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa110 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru110 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont110 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru110)
OptimizeIL.Emit(OpCodes.Br, fa110)
OptimizeIL.MarkLabel(tru110)
OptimizeIL.MarkSequencePoint(doc3, 1354, 1, 1354, 100)
Dim locbldr111 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(Ident))
locbldr111.SetLocalSymInfo("idt")
OptimizeIL.Emit(OpCodes.Newobj, GetType(Ident).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 111)
OptimizeIL.MarkSequencePoint(doc3, 1355, 1, 1355, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 111)
Typ = GetType(Ident)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(Ident).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc3, 1356, 1, 1356, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 111)
Typ = GetType(Ident)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(Ident).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc3, 1357, 1, 1357, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 111)
Typ = GetType(Ident)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc3, 1358, 1, 1358, 100)
OptimizeIL.Emit(OpCodes.Br, label0)
OptimizeIL.MarkSequencePoint(doc3, 1359, 1, 1359, 100)
OptimizeIL.Emit(OpCodes.Br, cont110)
OptimizeIL.MarkLabel(fa110)
OptimizeIL.Emit(OpCodes.Br, cont110)
OptimizeIL.MarkLabel(cont110)
OptimizeIL.MarkSequencePoint(doc3, 1362, 1, 1362, 100)
OptimizeIL.MarkLabel(label0)
OptimizeIL.MarkSequencePoint(doc3, 1363, 1, 1363, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
OptimizeIL.MarkSequencePoint(doc3, 1365, 1, 1365, 100)
OptimizeIL.Emit(OpCodes.Ret)
TokenOptimizer.CreateType()
End Sub


Dim doc4 As ISymbolDocumentWriter

Sub ExprOptimizer()
Dim ExprOptimizer As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.Parser" & "." & "ExprOptimizer", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(Expr)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Boolean).MakeByRefType()
Dim checkVarAs As MethodBuilder = ExprOptimizer.DefineMethod("checkVarAs", MethodAttributes.Public, GetType(Expr), typ0)
Dim checkVarAsIL As ILGenerator = checkVarAs.GetILGenerator()
Dim checkVarAsparam01 As ParameterBuilder = checkVarAs.DefineParameter(1, ParameterAttributes.None, "stm")
Dim checkVarAsparam02 As ParameterBuilder = checkVarAs.DefineParameter(2, ParameterAttributes.None, "b")
checkVarAsIL.MarkSequencePoint(doc4, 12, 1, 12, 100)
Dim locbldr112 As LocalBuilder = checkVarAsIL.DeclareLocal(GetType(Token))
locbldr112.SetLocalSymInfo("tok")
checkVarAsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
checkVarAsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkVarAsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVarAsIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkVarAsIL.Emit(OpCodes.Stloc, 0)
checkVarAsIL.MarkSequencePoint(doc4, 13, 1, 13, 100)
Dim locbldr113 As LocalBuilder = checkVarAsIL.DeclareLocal(GetType(System.Type))
locbldr113.SetLocalSymInfo("typ")
checkVarAsIL.Emit(OpCodes.Ldtoken, GetType(VarTok))
Dim typ1 As Type() = {GetType(System.RuntimeTypeHandle)}
checkVarAsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ1))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ1).ReturnType
checkVarAsIL.Emit(OpCodes.Stloc, 1)
checkVarAsIL.MarkSequencePoint(doc4, 14, 1, 14, 100)
checkVarAsIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
Dim typ2(-1) As Type
checkVarAsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkVarAsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkVarAsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = Typ
checkVarAsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ2))
Typ = Typ03.GetMethod("IsInstanceOfType", typ2).ReturnType
checkVarAsIL.Emit(OpCodes.Stobj, Typ04)
checkVarAsIL.MarkSequencePoint(doc4, 15, 1, 15, 100)
Dim locbldr114 As LocalBuilder = checkVarAsIL.DeclareLocal(GetType(VarExpr))
locbldr114.SetLocalSymInfo("vars")
checkVarAsIL.Emit(OpCodes.Newobj, GetType(VarExpr).GetConstructor(Type.EmptyTypes))
checkVarAsIL.Emit(OpCodes.Stloc, 2)
checkVarAsIL.MarkSequencePoint(doc4, 17, 1, 17, 100)
checkVarAsIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
checkVarAsIL.Emit(OpCodes.Ldobj, Typ.GetElementType())
Typ = Typ.GetElementType()
checkVarAsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa111 As System.Reflection.Emit.Label = checkVarAsIL.DefineLabel()
Dim tru111 As System.Reflection.Emit.Label = checkVarAsIL.DefineLabel()
Dim cont111 As System.Reflection.Emit.Label = checkVarAsIL.DefineLabel()
checkVarAsIL.Emit(OpCodes.Beq, tru111)
checkVarAsIL.Emit(OpCodes.Br, fa111)
checkVarAsIL.MarkLabel(tru111)
checkVarAsIL.MarkSequencePoint(doc4, 18, 1, 18, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarExpr)
checkVarAsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
checkVarAsIL.Emit(OpCodes.Stfld, GetType(VarExpr).GetField("Tokens"))
checkVarAsIL.MarkSequencePoint(doc4, 19, 1, 19, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarExpr)
checkVarAsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Line"))
Typ = GetType(Expr).GetField("Line").FieldType
checkVarAsIL.Emit(OpCodes.Stfld, GetType(VarExpr).GetField("Line"))
checkVarAsIL.MarkSequencePoint(doc4, 20, 1, 20, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarExpr)
checkVarAsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
checkVarAsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkVarAsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVarAsIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkVarAsIL.Emit(OpCodes.Stfld, GetType(VarExpr).GetField("VarName"))
checkVarAsIL.MarkSequencePoint(doc4, 22, 1, 22, 100)
Dim locbldr115 As LocalBuilder = checkVarAsIL.DeclareLocal(GetType(Token))
locbldr115.SetLocalSymInfo("tok2")
checkVarAsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
checkVarAsIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
checkVarAsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVarAsIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkVarAsIL.Emit(OpCodes.Stloc, 3)
checkVarAsIL.MarkSequencePoint(doc4, 23, 1, 23, 100)
Dim locbldr116 As LocalBuilder = checkVarAsIL.DeclareLocal(GetType(System.Type))
locbldr116.SetLocalSymInfo("typ2")
checkVarAsIL.Emit(OpCodes.Ldtoken, GetType(TypeTok))
Dim typ3 As Type() = {GetType(System.RuntimeTypeHandle)}
checkVarAsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ3))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ3).ReturnType
checkVarAsIL.Emit(OpCodes.Stloc, 4)
checkVarAsIL.MarkSequencePoint(doc4, 24, 1, 24, 100)
Dim locbldr117 As LocalBuilder = checkVarAsIL.DeclareLocal(GetType(System.Boolean))
locbldr117.SetLocalSymInfo("b2")
Dim typ4(-1) As Type
checkVarAsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Type)
Typ03 = Typ
checkVarAsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Token)
checkVarAsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
checkVarAsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ4))
Typ = Typ03.GetMethod("IsInstanceOfType", typ4).ReturnType
checkVarAsIL.Emit(OpCodes.Stloc, 5)
checkVarAsIL.MarkSequencePoint(doc4, 26, 1, 26, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
checkVarAsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa112 As System.Reflection.Emit.Label = checkVarAsIL.DefineLabel()
Dim tru112 As System.Reflection.Emit.Label = checkVarAsIL.DefineLabel()
Dim cont112 As System.Reflection.Emit.Label = checkVarAsIL.DefineLabel()
checkVarAsIL.Emit(OpCodes.Beq, fa112)
checkVarAsIL.Emit(OpCodes.Br, tru112)
checkVarAsIL.MarkLabel(tru112)
checkVarAsIL.MarkSequencePoint(doc4, 27, 1, 27, 100)
Dim locbldr118 As LocalBuilder = checkVarAsIL.DeclareLocal(GetType(Token))
locbldr118.SetLocalSymInfo("t")
checkVarAsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
checkVarAsIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
checkVarAsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVarAsIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkVarAsIL.Emit(OpCodes.Stloc, 6)
checkVarAsIL.MarkSequencePoint(doc4, 28, 1, 28, 100)
Dim locbldr119 As LocalBuilder = checkVarAsIL.DeclareLocal(GetType(TypeTok))
locbldr119.SetLocalSymInfo("tt")
checkVarAsIL.Emit(OpCodes.Newobj, GetType(TypeTok).GetConstructor(Type.EmptyTypes))
checkVarAsIL.Emit(OpCodes.Stloc, 7)
checkVarAsIL.MarkSequencePoint(doc4, 29, 1, 29, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(TypeTok)
checkVarAsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
checkVarAsIL.Emit(OpCodes.Stfld, GetType(TypeTok).GetField("Line"))
checkVarAsIL.MarkSequencePoint(doc4, 30, 1, 30, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(TypeTok)
checkVarAsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
checkVarAsIL.Emit(OpCodes.Stfld, GetType(TypeTok).GetField("Value"))
checkVarAsIL.MarkSequencePoint(doc4, 31, 1, 31, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarExpr)
checkVarAsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(TypeTok)
checkVarAsIL.Emit(OpCodes.Stfld, GetType(VarExpr).GetField("VarTyp"))
checkVarAsIL.MarkSequencePoint(doc4, 32, 1, 32, 100)
checkVarAsIL.Emit(OpCodes.Br, cont112)
checkVarAsIL.MarkLabel(fa112)
checkVarAsIL.MarkSequencePoint(doc4, 33, 1, 33, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarExpr)
checkVarAsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
checkVarAsIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
checkVarAsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVarAsIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkVarAsIL.Emit(OpCodes.Stfld, GetType(VarExpr).GetField("VarTyp"))
checkVarAsIL.MarkSequencePoint(doc4, 34, 1, 34, 100)
checkVarAsIL.Emit(OpCodes.Br, cont112)
checkVarAsIL.MarkLabel(cont112)
checkVarAsIL.MarkSequencePoint(doc4, 36, 1, 36, 100)
checkVarAsIL.Emit(OpCodes.Br, cont111)
checkVarAsIL.MarkLabel(fa111)
checkVarAsIL.Emit(OpCodes.Br, cont111)
checkVarAsIL.MarkLabel(cont111)
checkVarAsIL.MarkSequencePoint(doc4, 37, 1, 37, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarExpr)
checkVarAsIL.MarkSequencePoint(doc4, 38, 1, 38, 100)
checkVarAsIL.Emit(OpCodes.Ret)
Dim typ5(-1) As Type
ReDim Preserve typ5(UBound(typ5) + 1)
typ5(UBound(typ5)) = GetType(Ident)
ReDim Preserve typ5(UBound(typ5) + 1)
typ5(UBound(typ5)) = GetType(MethodNameTok)
Dim IdentToMNTok As MethodBuilder = ExprOptimizer.DefineMethod("IdentToMNTok", MethodAttributes.Public, GetType(MethodNameTok), typ5)
Dim IdentToMNTokIL As ILGenerator = IdentToMNTok.GetILGenerator()
Dim IdentToMNTokparam01 As ParameterBuilder = IdentToMNTok.DefineParameter(1, ParameterAttributes.None, "idt")
Dim IdentToMNTokparam02 As ParameterBuilder = IdentToMNTok.DefineParameter(2, ParameterAttributes.None, "mnt")
IdentToMNTokIL.MarkSequencePoint(doc4, 42, 1, 42, 100)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(MethodNameTok)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Ident)
IdentToMNTokIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("DoNeg"))
Typ = GetType(Ident).GetField("DoNeg").FieldType
IdentToMNTokIL.Emit(OpCodes.Stfld, GetType(MethodNameTok).GetField("DoNeg"))
IdentToMNTokIL.MarkSequencePoint(doc4, 43, 1, 43, 100)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(MethodNameTok)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Ident)
IdentToMNTokIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("DoNot"))
Typ = GetType(Ident).GetField("DoNot").FieldType
IdentToMNTokIL.Emit(OpCodes.Stfld, GetType(MethodNameTok).GetField("DoNot"))
IdentToMNTokIL.MarkSequencePoint(doc4, 44, 1, 44, 100)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(MethodNameTok)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Ident)
IdentToMNTokIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Conv"))
Typ = GetType(Ident).GetField("Conv").FieldType
IdentToMNTokIL.Emit(OpCodes.Stfld, GetType(MethodNameTok).GetField("Conv"))
IdentToMNTokIL.MarkSequencePoint(doc4, 45, 1, 45, 100)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(MethodNameTok)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Ident)
IdentToMNTokIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("IsArr"))
Typ = GetType(Ident).GetField("IsArr").FieldType
IdentToMNTokIL.Emit(OpCodes.Stfld, GetType(MethodNameTok).GetField("IsArr"))
IdentToMNTokIL.MarkSequencePoint(doc4, 46, 1, 46, 100)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(MethodNameTok)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Ident)
IdentToMNTokIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("ArrLoc"))
Typ = GetType(Ident).GetField("ArrLoc").FieldType
IdentToMNTokIL.Emit(OpCodes.Stfld, GetType(MethodNameTok).GetField("ArrLoc"))
IdentToMNTokIL.MarkSequencePoint(doc4, 47, 1, 47, 100)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(MethodNameTok)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Ident)
IdentToMNTokIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("IsRef"))
Typ = GetType(Ident).GetField("IsRef").FieldType
IdentToMNTokIL.Emit(OpCodes.Stfld, GetType(MethodNameTok).GetField("IsRef"))
IdentToMNTokIL.MarkSequencePoint(doc4, 48, 1, 48, 100)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(MethodNameTok)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Ident)
IdentToMNTokIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("IsValInRef"))
Typ = GetType(Ident).GetField("IsValInRef").FieldType
IdentToMNTokIL.Emit(OpCodes.Stfld, GetType(MethodNameTok).GetField("IsValInRef"))
IdentToMNTokIL.MarkSequencePoint(doc4, 49, 1, 49, 100)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(MethodNameTok)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Ident)
IdentToMNTokIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("IsRefInst"))
Typ = GetType(Ident).GetField("IsRefInst").FieldType
IdentToMNTokIL.Emit(OpCodes.Stfld, GetType(MethodNameTok).GetField("IsRefInst"))
IdentToMNTokIL.MarkSequencePoint(doc4, 50, 1, 50, 100)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(MethodNameTok)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Ident)
IdentToMNTokIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("IsValInRefInst"))
Typ = GetType(Ident).GetField("IsValInRefInst").FieldType
IdentToMNTokIL.Emit(OpCodes.Stfld, GetType(MethodNameTok).GetField("IsValInRefInst"))
IdentToMNTokIL.MarkSequencePoint(doc4, 51, 1, 51, 100)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(MethodNameTok)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Ident)
IdentToMNTokIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("TTok"))
Typ = GetType(Ident).GetField("TTok").FieldType
IdentToMNTokIL.Emit(OpCodes.Stfld, GetType(MethodNameTok).GetField("TTok"))
IdentToMNTokIL.MarkSequencePoint(doc4, 52, 1, 52, 100)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(MethodNameTok)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Ident)
IdentToMNTokIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("OrdOp"))
Typ = GetType(Ident).GetField("OrdOp").FieldType
IdentToMNTokIL.Emit(OpCodes.Stfld, GetType(MethodNameTok).GetField("OrdOp"))
IdentToMNTokIL.MarkSequencePoint(doc4, 53, 1, 53, 100)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(MethodNameTok)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Ident)
IdentToMNTokIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
IdentToMNTokIL.Emit(OpCodes.Stfld, GetType(MethodNameTok).GetField("Value"))
IdentToMNTokIL.MarkSequencePoint(doc4, 54, 1, 54, 100)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(MethodNameTok)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Ident)
IdentToMNTokIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Line"))
Typ = GetType(Ident).GetField("Line").FieldType
IdentToMNTokIL.Emit(OpCodes.Stfld, GetType(MethodNameTok).GetField("Line"))
IdentToMNTokIL.MarkSequencePoint(doc4, 56, 1, 56, 100)
IdentToMNTokIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(MethodNameTok)
IdentToMNTokIL.MarkSequencePoint(doc4, 57, 1, 57, 100)
IdentToMNTokIL.Emit(OpCodes.Ret)
Dim typ6(-1) As Type
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = GetType(Expr)
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = GetType(System.Int32)
Dim procMethodCall As MethodBuilder = ExprOptimizer.DefineMethod("procMethodCall", MethodAttributes.Public, GetType(Expr), typ6)
Dim procMethodCallIL As ILGenerator = procMethodCall.GetILGenerator()
Dim procMethodCallparam01 As ParameterBuilder = procMethodCall.DefineParameter(1, ParameterAttributes.None, "stm")
Dim procMethodCallparam02 As ParameterBuilder = procMethodCall.DefineParameter(2, ParameterAttributes.None, "i")
procMethodCallIL.MarkSequencePoint(doc4, 61, 1, 61, 100)
Dim locbldr120 As LocalBuilder = procMethodCallIL.DeclareLocal(GetType(MethodNameTok))
locbldr120.SetLocalSymInfo("mn")
procMethodCallIL.Emit(OpCodes.Newobj, GetType(MethodNameTok).GetConstructor(Type.EmptyTypes))
procMethodCallIL.Emit(OpCodes.Stloc, 0)
procMethodCallIL.MarkSequencePoint(doc4, 62, 1, 62, 100)
Dim locbldr121 As LocalBuilder = procMethodCallIL.DeclareLocal(GetType(MethodCallTok))
locbldr121.SetLocalSymInfo("mct")
procMethodCallIL.Emit(OpCodes.Newobj, GetType(MethodCallTok).GetConstructor(Type.EmptyTypes))
procMethodCallIL.Emit(OpCodes.Stloc, 1)
procMethodCallIL.MarkSequencePoint(doc4, 63, 1, 63, 100)
Dim locbldr122 As LocalBuilder = procMethodCallIL.DeclareLocal(GetType(Ident))
locbldr122.SetLocalSymInfo("idt")
procMethodCallIL.Emit(OpCodes.Ldnull)
procMethodCallIL.Emit(OpCodes.Stloc, 2)
procMethodCallIL.MarkSequencePoint(doc4, 64, 1, 64, 100)
Dim locbldr123 As LocalBuilder = procMethodCallIL.DeclareLocal(GetType(Expr))
locbldr123.SetLocalSymInfo("ep2")
procMethodCallIL.Emit(OpCodes.Newobj, GetType(Expr).GetConstructor(Type.EmptyTypes))
procMethodCallIL.Emit(OpCodes.Stloc, 3)
procMethodCallIL.MarkSequencePoint(doc4, 65, 1, 65, 100)
Dim locbldr124 As LocalBuilder = procMethodCallIL.DeclareLocal(GetType(System.Int32))
locbldr124.SetLocalSymInfo("lvl")
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Stloc, 4)
procMethodCallIL.MarkSequencePoint(doc4, 66, 1, 66, 100)
Dim locbldr125 As LocalBuilder = procMethodCallIL.DeclareLocal(GetType(System.Boolean))
locbldr125.SetLocalSymInfo("d")
procMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
procMethodCallIL.Emit(OpCodes.Stloc, 5)
procMethodCallIL.MarkSequencePoint(doc4, 67, 1, 67, 100)
Dim locbldr126 As LocalBuilder = procMethodCallIL.DeclareLocal(GetType(System.Int32))
locbldr126.SetLocalSymInfo("j")
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Stloc, 6)
procMethodCallIL.MarkSequencePoint(doc4, 69, 1, 69, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Sub)
procMethodCallIL.Emit(OpCodes.Starg, 2)
procMethodCallIL.MarkSequencePoint(doc4, 70, 1, 70, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMethodCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
procMethodCallIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
procMethodCallIL.Emit(OpCodes.Stloc, 2)
procMethodCallIL.MarkSequencePoint(doc4, 71, 1, 71, 100)
procMethodCallIL.Emit(OpCodes.Ldarg_0)
Dim typ7(-1) As Type
procMethodCallIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Ident)
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = Typ
procMethodCallIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodNameTok)
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = Typ
procMethodCallIL.Emit(OpCodes.Callvirt, IdentToMNTok)
Typ = IdentToMNTok.ReturnType
procMethodCallIL.Emit(OpCodes.Stloc, 0)
procMethodCallIL.MarkSequencePoint(doc4, 72, 1, 72, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Stloc, 6)
procMethodCallIL.MarkSequencePoint(doc4, 73, 1, 73, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Add)
procMethodCallIL.Emit(OpCodes.Starg, 2)
procMethodCallIL.MarkSequencePoint(doc4, 75, 1, 75, 100)
Dim locbldr127 As LocalBuilder = procMethodCallIL.DeclareLocal(GetType(Token))
locbldr127.SetLocalSymInfo("tok2")
procMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMethodCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
procMethodCallIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
procMethodCallIL.Emit(OpCodes.Stloc, 7)
procMethodCallIL.MarkSequencePoint(doc4, 76, 1, 76, 100)
Dim locbldr128 As LocalBuilder = procMethodCallIL.DeclareLocal(GetType(System.Type))
locbldr128.SetLocalSymInfo("typ2")
procMethodCallIL.MarkSequencePoint(doc4, 77, 1, 77, 100)
Dim locbldr129 As LocalBuilder = procMethodCallIL.DeclareLocal(GetType(System.Boolean))
locbldr129.SetLocalSymInfo("b2")
procMethodCallIL.MarkSequencePoint(doc4, 78, 1, 78, 100)
Dim locbldr130 As LocalBuilder = procMethodCallIL.DeclareLocal(GetType(System.Int32))
locbldr130.SetLocalSymInfo("len")
procMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMethodCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
procMethodCallIL.Emit(OpCodes.Ldlen)
procMethodCallIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Sub)
procMethodCallIL.Emit(OpCodes.Stloc, 10)
procMethodCallIL.MarkSequencePoint(doc4, 80, 1, 80, 100)
Dim typ8(-1) As Type
procMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = Typ
procMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ8))
Typ = Typ03.GetMethod("RemToken", typ8).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
procMethodCallIL.Emit(OpCodes.Pop)
End If
procMethodCallIL.MarkSequencePoint(doc4, 81, 1, 81, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMethodCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
procMethodCallIL.Emit(OpCodes.Ldlen)
procMethodCallIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Sub)
procMethodCallIL.Emit(OpCodes.Stloc, 10)
procMethodCallIL.MarkSequencePoint(doc4, 82, 1, 82, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Sub)
procMethodCallIL.Emit(OpCodes.Starg, 2)
procMethodCallIL.MarkSequencePoint(doc4, 84, 1, 84, 100)
Dim label0 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
procMethodCallIL.MarkSequencePoint(doc4, 85, 1, 85, 100)
Dim label1 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
procMethodCallIL.MarkSequencePoint(doc4, 86, 1, 86, 100)
Dim label2 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
procMethodCallIL.MarkSequencePoint(doc4, 88, 1, 88, 100)
procMethodCallIL.MarkLabel(label0)
procMethodCallIL.MarkSequencePoint(doc4, 91, 1, 91, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Add)
procMethodCallIL.Emit(OpCodes.Starg, 2)
procMethodCallIL.MarkSequencePoint(doc4, 93, 1, 93, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMethodCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
procMethodCallIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
procMethodCallIL.Emit(OpCodes.Stloc, 7)
procMethodCallIL.MarkSequencePoint(doc4, 94, 1, 94, 100)
procMethodCallIL.Emit(OpCodes.Ldtoken, GetType(RParen))
Dim typ9 As Type() = {GetType(System.RuntimeTypeHandle)}
procMethodCallIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ9))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ9).ReturnType
procMethodCallIL.Emit(OpCodes.Stloc, 8)
procMethodCallIL.MarkSequencePoint(doc4, 95, 1, 95, 100)
Dim typ10(-1) As Type
procMethodCallIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
procMethodCallIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(Token)
procMethodCallIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ10(UBound(typ10) + 1)
typ10(UBound(typ10)) = Typ
procMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ10))
Typ = Typ03.GetMethod("IsInstanceOfType", typ10).ReturnType
procMethodCallIL.Emit(OpCodes.Stloc, 9)
procMethodCallIL.MarkSequencePoint(doc4, 96, 1, 96, 100)
procMethodCallIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
procMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa113 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
Dim tru113 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
Dim cont113 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
procMethodCallIL.Emit(OpCodes.Beq, tru113)
procMethodCallIL.Emit(OpCodes.Br, fa113)
procMethodCallIL.MarkLabel(tru113)
procMethodCallIL.MarkSequencePoint(doc4, 97, 1, 97, 100)
procMethodCallIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Sub)
procMethodCallIL.Emit(OpCodes.Stloc, 4)
procMethodCallIL.MarkSequencePoint(doc4, 98, 1, 98, 100)
procMethodCallIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa114 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
Dim tru114 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
Dim cont114 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
procMethodCallIL.Emit(OpCodes.Beq, tru114)
procMethodCallIL.Emit(OpCodes.Br, fa114)
procMethodCallIL.MarkLabel(tru114)
procMethodCallIL.MarkSequencePoint(doc4, 99, 1, 99, 100)
procMethodCallIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
procMethodCallIL.Emit(OpCodes.Stloc, 5)
procMethodCallIL.MarkSequencePoint(doc4, 100, 1, 100, 100)
procMethodCallIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Expr)
procMethodCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
procMethodCallIL.Emit(OpCodes.Ldlen)
procMethodCallIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa115 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
Dim tru115 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
Dim cont115 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
procMethodCallIL.Emit(OpCodes.Bgt, tru115)
procMethodCallIL.Emit(OpCodes.Br, fa115)
procMethodCallIL.MarkLabel(tru115)
procMethodCallIL.MarkSequencePoint(doc4, 101, 1, 101, 100)
Dim typ11(-1) As Type
procMethodCallIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodCallTok)
Typ03 = Typ
procMethodCallIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Expr)
ReDim Preserve typ11(UBound(typ11) + 1)
typ11(UBound(typ11)) = Typ
procMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddParam", typ11))
Typ = Typ03.GetMethod("AddParam", typ11).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
procMethodCallIL.Emit(OpCodes.Pop)
End If
procMethodCallIL.MarkSequencePoint(doc4, 102, 1, 102, 100)
procMethodCallIL.Emit(OpCodes.Br, cont115)
procMethodCallIL.MarkLabel(fa115)
procMethodCallIL.Emit(OpCodes.Br, cont115)
procMethodCallIL.MarkLabel(cont115)
procMethodCallIL.MarkSequencePoint(doc4, 103, 1, 103, 100)
Dim typ12(-1) As Type
procMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
ReDim Preserve typ12(UBound(typ12) + 1)
typ12(UBound(typ12)) = Typ
procMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ12))
Typ = Typ03.GetMethod("RemToken", typ12).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
procMethodCallIL.Emit(OpCodes.Pop)
End If
procMethodCallIL.MarkSequencePoint(doc4, 104, 1, 104, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMethodCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
procMethodCallIL.Emit(OpCodes.Ldlen)
procMethodCallIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Sub)
procMethodCallIL.Emit(OpCodes.Stloc, 10)
procMethodCallIL.MarkSequencePoint(doc4, 105, 1, 105, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Sub)
procMethodCallIL.Emit(OpCodes.Starg, 2)
procMethodCallIL.MarkSequencePoint(doc4, 106, 1, 106, 100)
procMethodCallIL.Emit(OpCodes.Br, label1)
procMethodCallIL.MarkSequencePoint(doc4, 107, 1, 107, 100)
procMethodCallIL.Emit(OpCodes.Br, cont114)
procMethodCallIL.MarkLabel(fa114)
procMethodCallIL.MarkSequencePoint(doc4, 108, 1, 108, 100)
procMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
procMethodCallIL.Emit(OpCodes.Stloc, 5)
procMethodCallIL.MarkSequencePoint(doc4, 109, 1, 109, 100)
procMethodCallIL.Emit(OpCodes.Br, label2)
procMethodCallIL.MarkSequencePoint(doc4, 110, 1, 110, 100)
procMethodCallIL.Emit(OpCodes.Br, cont114)
procMethodCallIL.MarkLabel(cont114)
procMethodCallIL.MarkSequencePoint(doc4, 111, 1, 111, 100)
procMethodCallIL.Emit(OpCodes.Br, label2)
procMethodCallIL.MarkSequencePoint(doc4, 112, 1, 112, 100)
procMethodCallIL.Emit(OpCodes.Br, cont113)
procMethodCallIL.MarkLabel(fa113)
procMethodCallIL.Emit(OpCodes.Br, cont113)
procMethodCallIL.MarkLabel(cont113)
procMethodCallIL.MarkSequencePoint(doc4, 114, 1, 114, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMethodCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
procMethodCallIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
procMethodCallIL.Emit(OpCodes.Stloc, 7)
procMethodCallIL.MarkSequencePoint(doc4, 115, 1, 115, 100)
procMethodCallIL.Emit(OpCodes.Ldtoken, GetType(LParen))
Dim typ13 As Type() = {GetType(System.RuntimeTypeHandle)}
procMethodCallIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ13))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ13).ReturnType
procMethodCallIL.Emit(OpCodes.Stloc, 8)
procMethodCallIL.MarkSequencePoint(doc4, 116, 1, 116, 100)
Dim typ14(-1) As Type
procMethodCallIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
procMethodCallIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(Token)
procMethodCallIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = Typ
procMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ14))
Typ = Typ03.GetMethod("IsInstanceOfType", typ14).ReturnType
procMethodCallIL.Emit(OpCodes.Stloc, 9)
procMethodCallIL.MarkSequencePoint(doc4, 117, 1, 117, 100)
procMethodCallIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
procMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa116 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
Dim tru116 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
Dim cont116 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
procMethodCallIL.Emit(OpCodes.Beq, tru116)
procMethodCallIL.Emit(OpCodes.Br, fa116)
procMethodCallIL.MarkLabel(tru116)
procMethodCallIL.MarkSequencePoint(doc4, 118, 1, 118, 100)
procMethodCallIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Add)
procMethodCallIL.Emit(OpCodes.Stloc, 4)
procMethodCallIL.MarkSequencePoint(doc4, 119, 1, 119, 100)
procMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
procMethodCallIL.Emit(OpCodes.Stloc, 5)
procMethodCallIL.MarkSequencePoint(doc4, 121, 1, 121, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMethodCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
procMethodCallIL.Emit(OpCodes.Ldlen)
procMethodCallIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Sub)
procMethodCallIL.Emit(OpCodes.Stloc, 10)
procMethodCallIL.MarkSequencePoint(doc4, 123, 1, 123, 100)
procMethodCallIL.Emit(OpCodes.Br, label2)
procMethodCallIL.MarkSequencePoint(doc4, 124, 1, 124, 100)
procMethodCallIL.Emit(OpCodes.Br, cont116)
procMethodCallIL.MarkLabel(fa116)
procMethodCallIL.Emit(OpCodes.Br, cont116)
procMethodCallIL.MarkLabel(cont116)
procMethodCallIL.MarkSequencePoint(doc4, 126, 1, 126, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMethodCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
procMethodCallIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
procMethodCallIL.Emit(OpCodes.Stloc, 7)
procMethodCallIL.MarkSequencePoint(doc4, 127, 1, 127, 100)
procMethodCallIL.Emit(OpCodes.Ldtoken, GetType(Comma))
Dim typ15 As Type() = {GetType(System.RuntimeTypeHandle)}
procMethodCallIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ15))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ15).ReturnType
procMethodCallIL.Emit(OpCodes.Stloc, 8)
procMethodCallIL.MarkSequencePoint(doc4, 128, 1, 128, 100)
Dim typ16(-1) As Type
procMethodCallIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
procMethodCallIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(Token)
procMethodCallIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ16(UBound(typ16) + 1)
typ16(UBound(typ16)) = Typ
procMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ16))
Typ = Typ03.GetMethod("IsInstanceOfType", typ16).ReturnType
procMethodCallIL.Emit(OpCodes.Stloc, 9)
procMethodCallIL.MarkSequencePoint(doc4, 129, 1, 129, 100)
procMethodCallIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
procMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa117 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
Dim tru117 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
Dim cont117 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
procMethodCallIL.Emit(OpCodes.Beq, tru117)
procMethodCallIL.Emit(OpCodes.Br, fa117)
procMethodCallIL.MarkLabel(tru117)
procMethodCallIL.MarkSequencePoint(doc4, 130, 1, 130, 100)
procMethodCallIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
Dim fa118 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
Dim tru118 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
Dim cont118 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
procMethodCallIL.Emit(OpCodes.Beq, tru118)
procMethodCallIL.Emit(OpCodes.Br, fa118)
procMethodCallIL.MarkLabel(tru118)
procMethodCallIL.MarkSequencePoint(doc4, 131, 1, 131, 100)
procMethodCallIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
procMethodCallIL.Emit(OpCodes.Stloc, 5)
procMethodCallIL.MarkSequencePoint(doc4, 132, 1, 132, 100)
procMethodCallIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Expr)
procMethodCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
procMethodCallIL.Emit(OpCodes.Ldlen)
procMethodCallIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa119 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
Dim tru119 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
Dim cont119 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
procMethodCallIL.Emit(OpCodes.Bgt, tru119)
procMethodCallIL.Emit(OpCodes.Br, fa119)
procMethodCallIL.MarkLabel(tru119)
procMethodCallIL.MarkSequencePoint(doc4, 133, 1, 133, 100)
Dim typ17(-1) As Type
procMethodCallIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodCallTok)
Typ03 = Typ
procMethodCallIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Expr)
ReDim Preserve typ17(UBound(typ17) + 1)
typ17(UBound(typ17)) = Typ
procMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddParam", typ17))
Typ = Typ03.GetMethod("AddParam", typ17).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
procMethodCallIL.Emit(OpCodes.Pop)
End If
procMethodCallIL.MarkSequencePoint(doc4, 134, 1, 134, 100)
procMethodCallIL.Emit(OpCodes.Br, cont119)
procMethodCallIL.MarkLabel(fa119)
procMethodCallIL.Emit(OpCodes.Br, cont119)
procMethodCallIL.MarkLabel(cont119)
procMethodCallIL.MarkSequencePoint(doc4, 135, 1, 135, 100)
procMethodCallIL.Emit(OpCodes.Newobj, GetType(Expr).GetConstructor(Type.EmptyTypes))
procMethodCallIL.Emit(OpCodes.Stloc, 3)
procMethodCallIL.MarkSequencePoint(doc4, 136, 1, 136, 100)
Dim typ18(-1) As Type
procMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
ReDim Preserve typ18(UBound(typ18) + 1)
typ18(UBound(typ18)) = Typ
procMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ18))
Typ = Typ03.GetMethod("RemToken", typ18).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
procMethodCallIL.Emit(OpCodes.Pop)
End If
procMethodCallIL.MarkSequencePoint(doc4, 137, 1, 137, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMethodCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
procMethodCallIL.Emit(OpCodes.Ldlen)
procMethodCallIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Sub)
procMethodCallIL.Emit(OpCodes.Stloc, 10)
procMethodCallIL.MarkSequencePoint(doc4, 138, 1, 138, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Sub)
procMethodCallIL.Emit(OpCodes.Starg, 2)
procMethodCallIL.MarkSequencePoint(doc4, 139, 1, 139, 100)
procMethodCallIL.Emit(OpCodes.Br, label2)
procMethodCallIL.MarkSequencePoint(doc4, 140, 1, 140, 100)
procMethodCallIL.Emit(OpCodes.Br, cont118)
procMethodCallIL.MarkLabel(fa118)
procMethodCallIL.MarkSequencePoint(doc4, 141, 1, 141, 100)
procMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
procMethodCallIL.Emit(OpCodes.Stloc, 5)
procMethodCallIL.MarkSequencePoint(doc4, 142, 1, 142, 100)
procMethodCallIL.Emit(OpCodes.Br, label2)
procMethodCallIL.MarkSequencePoint(doc4, 143, 1, 143, 100)
procMethodCallIL.Emit(OpCodes.Br, cont118)
procMethodCallIL.MarkLabel(cont118)
procMethodCallIL.MarkSequencePoint(doc4, 144, 1, 144, 100)
procMethodCallIL.Emit(OpCodes.Br, cont117)
procMethodCallIL.MarkLabel(fa117)
procMethodCallIL.MarkSequencePoint(doc4, 145, 1, 145, 100)
procMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
procMethodCallIL.Emit(OpCodes.Stloc, 5)
procMethodCallIL.MarkSequencePoint(doc4, 146, 1, 146, 100)
procMethodCallIL.Emit(OpCodes.Br, label2)
procMethodCallIL.MarkSequencePoint(doc4, 147, 1, 147, 100)
procMethodCallIL.Emit(OpCodes.Br, cont117)
procMethodCallIL.MarkLabel(cont117)
procMethodCallIL.MarkSequencePoint(doc4, 149, 1, 149, 100)
procMethodCallIL.MarkLabel(label2)
procMethodCallIL.MarkSequencePoint(doc4, 151, 1, 151, 100)
procMethodCallIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
procMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa120 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
Dim tru120 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
Dim cont120 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
procMethodCallIL.Emit(OpCodes.Beq, tru120)
procMethodCallIL.Emit(OpCodes.Br, fa120)
procMethodCallIL.MarkLabel(tru120)
procMethodCallIL.MarkSequencePoint(doc4, 152, 1, 152, 100)
Dim typ19(-1) As Type
procMethodCallIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Expr)
Typ03 = Typ
procMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMethodCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
procMethodCallIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ReDim Preserve typ19(UBound(typ19) + 1)
typ19(UBound(typ19)) = Typ
procMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ19))
Typ = Typ03.GetMethod("AddToken", typ19).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
procMethodCallIL.Emit(OpCodes.Pop)
End If
procMethodCallIL.MarkSequencePoint(doc4, 153, 1, 153, 100)
Dim typ20(-1) As Type
procMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
ReDim Preserve typ20(UBound(typ20) + 1)
typ20(UBound(typ20)) = Typ
procMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ20))
Typ = Typ03.GetMethod("RemToken", typ20).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
procMethodCallIL.Emit(OpCodes.Pop)
End If
procMethodCallIL.MarkSequencePoint(doc4, 154, 1, 154, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMethodCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
procMethodCallIL.Emit(OpCodes.Ldlen)
procMethodCallIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Sub)
procMethodCallIL.Emit(OpCodes.Stloc, 10)
procMethodCallIL.MarkSequencePoint(doc4, 155, 1, 155, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Sub)
procMethodCallIL.Emit(OpCodes.Starg, 2)
procMethodCallIL.MarkSequencePoint(doc4, 156, 1, 156, 100)
procMethodCallIL.Emit(OpCodes.Br, cont120)
procMethodCallIL.MarkLabel(fa120)
procMethodCallIL.Emit(OpCodes.Br, cont120)
procMethodCallIL.MarkLabel(cont120)
procMethodCallIL.MarkSequencePoint(doc4, 158, 1, 158, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(System.Int32)
Dim fa121 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
Dim tru121 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
Dim cont121 As System.Reflection.Emit.Label = procMethodCallIL.DefineLabel()
procMethodCallIL.Emit(OpCodes.Beq, tru121)
procMethodCallIL.Emit(OpCodes.Br, fa121)
procMethodCallIL.MarkLabel(tru121)
procMethodCallIL.MarkSequencePoint(doc4, 159, 1, 159, 100)
procMethodCallIL.Emit(OpCodes.Br, label1)
procMethodCallIL.MarkSequencePoint(doc4, 160, 1, 160, 100)
procMethodCallIL.Emit(OpCodes.Br, cont121)
procMethodCallIL.MarkLabel(fa121)
procMethodCallIL.MarkSequencePoint(doc4, 161, 1, 161, 100)
procMethodCallIL.Emit(OpCodes.Br, label0)
procMethodCallIL.MarkSequencePoint(doc4, 162, 1, 162, 100)
procMethodCallIL.Emit(OpCodes.Br, cont121)
procMethodCallIL.MarkLabel(cont121)
procMethodCallIL.MarkSequencePoint(doc4, 164, 1, 164, 100)
procMethodCallIL.MarkLabel(label1)
procMethodCallIL.MarkSequencePoint(doc4, 166, 1, 166, 100)
procMethodCallIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodCallTok)
procMethodCallIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodNameTok)
procMethodCallIL.Emit(OpCodes.Stfld, GetType(MethodCallTok).GetField("Name"))
procMethodCallIL.MarkSequencePoint(doc4, 167, 1, 167, 100)
procMethodCallIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodCallTok)
procMethodCallIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodNameTok)
procMethodCallIL.Emit(OpCodes.Ldfld, GetType(MethodNameTok).GetField("Line"))
Typ = GetType(MethodNameTok).GetField("Line").FieldType
procMethodCallIL.Emit(OpCodes.Stfld, GetType(MethodCallTok).GetField("Line"))
procMethodCallIL.MarkSequencePoint(doc4, 168, 1, 168, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMethodCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
procMethodCallIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
procMethodCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
Typ02 = Typ
procMethodCallIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodCallTok)
Typ = Typ02
procMethodCallIL.Emit(OpCodes.Stelem, Typ.GetElementType())
procMethodCallIL.MarkSequencePoint(doc4, 170, 1, 170, 100)
procMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMethodCallIL.MarkSequencePoint(doc4, 172, 1, 172, 100)
procMethodCallIL.Emit(OpCodes.Ret)
Dim typ21(-1) As Type
ReDim Preserve typ21(UBound(typ21) + 1)
typ21(UBound(typ21)) = GetType(Expr)
ReDim Preserve typ21(UBound(typ21) + 1)
typ21(UBound(typ21)) = GetType(System.Int32)
Dim procNewCall As MethodBuilder = ExprOptimizer.DefineMethod("procNewCall", MethodAttributes.Public, GetType(Expr), typ21)
Dim procNewCallIL As ILGenerator = procNewCall.GetILGenerator()
Dim procNewCallparam01 As ParameterBuilder = procNewCall.DefineParameter(1, ParameterAttributes.None, "stm")
Dim procNewCallparam02 As ParameterBuilder = procNewCall.DefineParameter(2, ParameterAttributes.None, "i")
procNewCallIL.MarkSequencePoint(doc4, 176, 1, 176, 100)
Dim locbldr131 As LocalBuilder = procNewCallIL.DeclareLocal(GetType(NewCallTok))
locbldr131.SetLocalSymInfo("nct")
procNewCallIL.Emit(OpCodes.Newobj, GetType(NewCallTok).GetConstructor(Type.EmptyTypes))
procNewCallIL.Emit(OpCodes.Stloc, 0)
procNewCallIL.MarkSequencePoint(doc4, 177, 1, 177, 100)
Dim locbldr132 As LocalBuilder = procNewCallIL.DeclareLocal(GetType(TypeTok))
locbldr132.SetLocalSymInfo("tt")
procNewCallIL.MarkSequencePoint(doc4, 178, 1, 178, 100)
Dim locbldr133 As LocalBuilder = procNewCallIL.DeclareLocal(GetType(Expr))
locbldr133.SetLocalSymInfo("ep2")
procNewCallIL.Emit(OpCodes.Newobj, GetType(Expr).GetConstructor(Type.EmptyTypes))
procNewCallIL.Emit(OpCodes.Stloc, 2)
procNewCallIL.MarkSequencePoint(doc4, 179, 1, 179, 100)
Dim locbldr134 As LocalBuilder = procNewCallIL.DeclareLocal(GetType(System.Int32))
locbldr134.SetLocalSymInfo("lvl")
procNewCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Stloc, 3)
procNewCallIL.MarkSequencePoint(doc4, 180, 1, 180, 100)
Dim locbldr135 As LocalBuilder = procNewCallIL.DeclareLocal(GetType(System.Boolean))
locbldr135.SetLocalSymInfo("d")
procNewCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
procNewCallIL.Emit(OpCodes.Stloc, 4)
procNewCallIL.MarkSequencePoint(doc4, 181, 1, 181, 100)
Dim locbldr136 As LocalBuilder = procNewCallIL.DeclareLocal(GetType(System.Int32))
locbldr136.SetLocalSymInfo("j")
procNewCallIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Stloc, 5)
procNewCallIL.MarkSequencePoint(doc4, 183, 1, 183, 100)
procNewCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procNewCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
procNewCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
procNewCallIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
procNewCallIL.Emit(OpCodes.Stloc, 1)
procNewCallIL.MarkSequencePoint(doc4, 184, 1, 184, 100)
procNewCallIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(NewCallTok)
procNewCallIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(TypeTok)
procNewCallIL.Emit(OpCodes.Stfld, GetType(NewCallTok).GetField("Name"))
procNewCallIL.MarkSequencePoint(doc4, 185, 1, 185, 100)
procNewCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Stloc, 5)
procNewCallIL.MarkSequencePoint(doc4, 186, 1, 186, 100)
procNewCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Add)
procNewCallIL.Emit(OpCodes.Starg, 2)
procNewCallIL.MarkSequencePoint(doc4, 188, 1, 188, 100)
Dim locbldr137 As LocalBuilder = procNewCallIL.DeclareLocal(GetType(Token))
locbldr137.SetLocalSymInfo("tok2")
procNewCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procNewCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
procNewCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
procNewCallIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
procNewCallIL.Emit(OpCodes.Stloc, 6)
procNewCallIL.MarkSequencePoint(doc4, 189, 1, 189, 100)
Dim locbldr138 As LocalBuilder = procNewCallIL.DeclareLocal(GetType(System.Type))
locbldr138.SetLocalSymInfo("typ2")
procNewCallIL.MarkSequencePoint(doc4, 190, 1, 190, 100)
Dim locbldr139 As LocalBuilder = procNewCallIL.DeclareLocal(GetType(System.Boolean))
locbldr139.SetLocalSymInfo("b2")
procNewCallIL.MarkSequencePoint(doc4, 191, 1, 191, 100)
Dim locbldr140 As LocalBuilder = procNewCallIL.DeclareLocal(GetType(System.Int32))
locbldr140.SetLocalSymInfo("len")
procNewCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procNewCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
procNewCallIL.Emit(OpCodes.Ldlen)
procNewCallIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Sub)
procNewCallIL.Emit(OpCodes.Stloc, 9)
procNewCallIL.MarkSequencePoint(doc4, 193, 1, 193, 100)
Dim typ22(-1) As Type
procNewCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
procNewCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
ReDim Preserve typ22(UBound(typ22) + 1)
typ22(UBound(typ22)) = Typ
procNewCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ22))
Typ = Typ03.GetMethod("RemToken", typ22).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
procNewCallIL.Emit(OpCodes.Pop)
End If
procNewCallIL.MarkSequencePoint(doc4, 194, 1, 194, 100)
procNewCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procNewCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
procNewCallIL.Emit(OpCodes.Ldlen)
procNewCallIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Sub)
procNewCallIL.Emit(OpCodes.Stloc, 9)
procNewCallIL.MarkSequencePoint(doc4, 195, 1, 195, 100)
procNewCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Sub)
procNewCallIL.Emit(OpCodes.Starg, 2)
procNewCallIL.MarkSequencePoint(doc4, 197, 1, 197, 100)
Dim label3 As System.Reflection.Emit.Label = procNewCallIL.DefineLabel()
procNewCallIL.MarkSequencePoint(doc4, 198, 1, 198, 100)
Dim label4 As System.Reflection.Emit.Label = procNewCallIL.DefineLabel()
procNewCallIL.MarkSequencePoint(doc4, 199, 1, 199, 100)
Dim label5 As System.Reflection.Emit.Label = procNewCallIL.DefineLabel()
procNewCallIL.MarkSequencePoint(doc4, 201, 1, 201, 100)
procNewCallIL.MarkLabel(label3)
procNewCallIL.MarkSequencePoint(doc4, 204, 1, 204, 100)
procNewCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Add)
procNewCallIL.Emit(OpCodes.Starg, 2)
procNewCallIL.MarkSequencePoint(doc4, 206, 1, 206, 100)
procNewCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procNewCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
procNewCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
procNewCallIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
procNewCallIL.Emit(OpCodes.Stloc, 6)
procNewCallIL.MarkSequencePoint(doc4, 207, 1, 207, 100)
procNewCallIL.Emit(OpCodes.Ldtoken, GetType(RParen))
Dim typ23 As Type() = {GetType(System.RuntimeTypeHandle)}
procNewCallIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ23))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ23).ReturnType
procNewCallIL.Emit(OpCodes.Stloc, 7)
procNewCallIL.MarkSequencePoint(doc4, 208, 1, 208, 100)
Dim typ24(-1) As Type
procNewCallIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Type)
Typ03 = Typ
procNewCallIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
procNewCallIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ24(UBound(typ24) + 1)
typ24(UBound(typ24)) = Typ
procNewCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ24))
Typ = Typ03.GetMethod("IsInstanceOfType", typ24).ReturnType
procNewCallIL.Emit(OpCodes.Stloc, 8)
procNewCallIL.MarkSequencePoint(doc4, 209, 1, 209, 100)
procNewCallIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
procNewCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa122 As System.Reflection.Emit.Label = procNewCallIL.DefineLabel()
Dim tru122 As System.Reflection.Emit.Label = procNewCallIL.DefineLabel()
Dim cont122 As System.Reflection.Emit.Label = procNewCallIL.DefineLabel()
procNewCallIL.Emit(OpCodes.Beq, tru122)
procNewCallIL.Emit(OpCodes.Br, fa122)
procNewCallIL.MarkLabel(tru122)
procNewCallIL.MarkSequencePoint(doc4, 210, 1, 210, 100)
procNewCallIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Sub)
procNewCallIL.Emit(OpCodes.Stloc, 3)
procNewCallIL.MarkSequencePoint(doc4, 211, 1, 211, 100)
procNewCallIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa123 As System.Reflection.Emit.Label = procNewCallIL.DefineLabel()
Dim tru123 As System.Reflection.Emit.Label = procNewCallIL.DefineLabel()
Dim cont123 As System.Reflection.Emit.Label = procNewCallIL.DefineLabel()
procNewCallIL.Emit(OpCodes.Beq, tru123)
procNewCallIL.Emit(OpCodes.Br, fa123)
procNewCallIL.MarkLabel(tru123)
procNewCallIL.MarkSequencePoint(doc4, 212, 1, 212, 100)
procNewCallIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
procNewCallIL.Emit(OpCodes.Stloc, 4)
procNewCallIL.MarkSequencePoint(doc4, 213, 1, 213, 100)
procNewCallIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Expr)
procNewCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
procNewCallIL.Emit(OpCodes.Ldlen)
procNewCallIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa124 As System.Reflection.Emit.Label = procNewCallIL.DefineLabel()
Dim tru124 As System.Reflection.Emit.Label = procNewCallIL.DefineLabel()
Dim cont124 As System.Reflection.Emit.Label = procNewCallIL.DefineLabel()
procNewCallIL.Emit(OpCodes.Bgt, tru124)
procNewCallIL.Emit(OpCodes.Br, fa124)
procNewCallIL.MarkLabel(tru124)
procNewCallIL.MarkSequencePoint(doc4, 214, 1, 214, 100)
Dim typ25(-1) As Type
procNewCallIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(NewCallTok)
Typ03 = Typ
procNewCallIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Expr)
ReDim Preserve typ25(UBound(typ25) + 1)
typ25(UBound(typ25)) = Typ
procNewCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddParam", typ25))
Typ = Typ03.GetMethod("AddParam", typ25).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
procNewCallIL.Emit(OpCodes.Pop)
End If
procNewCallIL.MarkSequencePoint(doc4, 215, 1, 215, 100)
procNewCallIL.Emit(OpCodes.Br, cont124)
procNewCallIL.MarkLabel(fa124)
procNewCallIL.Emit(OpCodes.Br, cont124)
procNewCallIL.MarkLabel(cont124)
procNewCallIL.MarkSequencePoint(doc4, 216, 1, 216, 100)
Dim typ26(-1) As Type
procNewCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
procNewCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
ReDim Preserve typ26(UBound(typ26) + 1)
typ26(UBound(typ26)) = Typ
procNewCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ26))
Typ = Typ03.GetMethod("RemToken", typ26).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
procNewCallIL.Emit(OpCodes.Pop)
End If
procNewCallIL.MarkSequencePoint(doc4, 217, 1, 217, 100)
procNewCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procNewCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
procNewCallIL.Emit(OpCodes.Ldlen)
procNewCallIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Sub)
procNewCallIL.Emit(OpCodes.Stloc, 9)
procNewCallIL.MarkSequencePoint(doc4, 218, 1, 218, 100)
procNewCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Sub)
procNewCallIL.Emit(OpCodes.Starg, 2)
procNewCallIL.MarkSequencePoint(doc4, 219, 1, 219, 100)
procNewCallIL.Emit(OpCodes.Br, label4)
procNewCallIL.MarkSequencePoint(doc4, 220, 1, 220, 100)
procNewCallIL.Emit(OpCodes.Br, cont123)
procNewCallIL.MarkLabel(fa123)
procNewCallIL.MarkSequencePoint(doc4, 221, 1, 221, 100)
procNewCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
procNewCallIL.Emit(OpCodes.Stloc, 4)
procNewCallIL.MarkSequencePoint(doc4, 222, 1, 222, 100)
procNewCallIL.Emit(OpCodes.Br, label5)
procNewCallIL.MarkSequencePoint(doc4, 223, 1, 223, 100)
procNewCallIL.Emit(OpCodes.Br, cont123)
procNewCallIL.MarkLabel(cont123)
procNewCallIL.MarkSequencePoint(doc4, 224, 1, 224, 100)
procNewCallIL.Emit(OpCodes.Br, label5)
procNewCallIL.MarkSequencePoint(doc4, 225, 1, 225, 100)
procNewCallIL.Emit(OpCodes.Br, cont122)
procNewCallIL.MarkLabel(fa122)
procNewCallIL.Emit(OpCodes.Br, cont122)
procNewCallIL.MarkLabel(cont122)
procNewCallIL.MarkSequencePoint(doc4, 227, 1, 227, 100)
procNewCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procNewCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
procNewCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
procNewCallIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
procNewCallIL.Emit(OpCodes.Stloc, 6)
procNewCallIL.MarkSequencePoint(doc4, 228, 1, 228, 100)
procNewCallIL.Emit(OpCodes.Ldtoken, GetType(LParen))
Dim typ27 As Type() = {GetType(System.RuntimeTypeHandle)}
procNewCallIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ27))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ27).ReturnType
procNewCallIL.Emit(OpCodes.Stloc, 7)
procNewCallIL.MarkSequencePoint(doc4, 229, 1, 229, 100)
Dim typ28(-1) As Type
procNewCallIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Type)
Typ03 = Typ
procNewCallIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
procNewCallIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ28(UBound(typ28) + 1)
typ28(UBound(typ28)) = Typ
procNewCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ28))
Typ = Typ03.GetMethod("IsInstanceOfType", typ28).ReturnType
procNewCallIL.Emit(OpCodes.Stloc, 8)
procNewCallIL.MarkSequencePoint(doc4, 230, 1, 230, 100)
procNewCallIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
procNewCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa125 As System.Reflection.Emit.Label = procNewCallIL.DefineLabel()
Dim tru125 As System.Reflection.Emit.Label = procNewCallIL.DefineLabel()
Dim cont125 As System.Reflection.Emit.Label = procNewCallIL.DefineLabel()
procNewCallIL.Emit(OpCodes.Beq, tru125)
procNewCallIL.Emit(OpCodes.Br, fa125)
procNewCallIL.MarkLabel(tru125)
procNewCallIL.MarkSequencePoint(doc4, 231, 1, 231, 100)
procNewCallIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Add)
procNewCallIL.Emit(OpCodes.Stloc, 3)
procNewCallIL.MarkSequencePoint(doc4, 232, 1, 232, 100)
procNewCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
procNewCallIL.Emit(OpCodes.Stloc, 4)
procNewCallIL.MarkSequencePoint(doc4, 234, 1, 234, 100)
procNewCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procNewCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
procNewCallIL.Emit(OpCodes.Ldlen)
procNewCallIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Sub)
procNewCallIL.Emit(OpCodes.Stloc, 9)
procNewCallIL.MarkSequencePoint(doc4, 236, 1, 236, 100)
procNewCallIL.Emit(OpCodes.Br, label5)
procNewCallIL.MarkSequencePoint(doc4, 237, 1, 237, 100)
procNewCallIL.Emit(OpCodes.Br, cont125)
procNewCallIL.MarkLabel(fa125)
procNewCallIL.Emit(OpCodes.Br, cont125)
procNewCallIL.MarkLabel(cont125)
procNewCallIL.MarkSequencePoint(doc4, 239, 1, 239, 100)
procNewCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procNewCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
procNewCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
procNewCallIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
procNewCallIL.Emit(OpCodes.Stloc, 6)
procNewCallIL.MarkSequencePoint(doc4, 240, 1, 240, 100)
procNewCallIL.Emit(OpCodes.Ldtoken, GetType(Comma))
Dim typ29 As Type() = {GetType(System.RuntimeTypeHandle)}
procNewCallIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ29))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ29).ReturnType
procNewCallIL.Emit(OpCodes.Stloc, 7)
procNewCallIL.MarkSequencePoint(doc4, 241, 1, 241, 100)
Dim typ30(-1) As Type
procNewCallIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Type)
Typ03 = Typ
procNewCallIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
procNewCallIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ30(UBound(typ30) + 1)
typ30(UBound(typ30)) = Typ
procNewCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ30))
Typ = Typ03.GetMethod("IsInstanceOfType", typ30).ReturnType
procNewCallIL.Emit(OpCodes.Stloc, 8)
procNewCallIL.MarkSequencePoint(doc4, 242, 1, 242, 100)
procNewCallIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
procNewCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa126 As System.Reflection.Emit.Label = procNewCallIL.DefineLabel()
Dim tru126 As System.Reflection.Emit.Label = procNewCallIL.DefineLabel()
Dim cont126 As System.Reflection.Emit.Label = procNewCallIL.DefineLabel()
procNewCallIL.Emit(OpCodes.Beq, tru126)
procNewCallIL.Emit(OpCodes.Br, fa126)
procNewCallIL.MarkLabel(tru126)
procNewCallIL.MarkSequencePoint(doc4, 243, 1, 243, 100)
procNewCallIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
Dim fa127 As System.Reflection.Emit.Label = procNewCallIL.DefineLabel()
Dim tru127 As System.Reflection.Emit.Label = procNewCallIL.DefineLabel()
Dim cont127 As System.Reflection.Emit.Label = procNewCallIL.DefineLabel()
procNewCallIL.Emit(OpCodes.Beq, tru127)
procNewCallIL.Emit(OpCodes.Br, fa127)
procNewCallIL.MarkLabel(tru127)
procNewCallIL.MarkSequencePoint(doc4, 244, 1, 244, 100)
procNewCallIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
procNewCallIL.Emit(OpCodes.Stloc, 4)
procNewCallIL.MarkSequencePoint(doc4, 245, 1, 245, 100)
procNewCallIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Expr)
procNewCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
procNewCallIL.Emit(OpCodes.Ldlen)
procNewCallIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa128 As System.Reflection.Emit.Label = procNewCallIL.DefineLabel()
Dim tru128 As System.Reflection.Emit.Label = procNewCallIL.DefineLabel()
Dim cont128 As System.Reflection.Emit.Label = procNewCallIL.DefineLabel()
procNewCallIL.Emit(OpCodes.Bgt, tru128)
procNewCallIL.Emit(OpCodes.Br, fa128)
procNewCallIL.MarkLabel(tru128)
procNewCallIL.MarkSequencePoint(doc4, 246, 1, 246, 100)
Dim typ31(-1) As Type
procNewCallIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(NewCallTok)
Typ03 = Typ
procNewCallIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Expr)
ReDim Preserve typ31(UBound(typ31) + 1)
typ31(UBound(typ31)) = Typ
procNewCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddParam", typ31))
Typ = Typ03.GetMethod("AddParam", typ31).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
procNewCallIL.Emit(OpCodes.Pop)
End If
procNewCallIL.MarkSequencePoint(doc4, 247, 1, 247, 100)
procNewCallIL.Emit(OpCodes.Br, cont128)
procNewCallIL.MarkLabel(fa128)
procNewCallIL.Emit(OpCodes.Br, cont128)
procNewCallIL.MarkLabel(cont128)
procNewCallIL.MarkSequencePoint(doc4, 248, 1, 248, 100)
procNewCallIL.Emit(OpCodes.Newobj, GetType(Expr).GetConstructor(Type.EmptyTypes))
procNewCallIL.Emit(OpCodes.Stloc, 2)
procNewCallIL.MarkSequencePoint(doc4, 249, 1, 249, 100)
Dim typ32(-1) As Type
procNewCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
procNewCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
ReDim Preserve typ32(UBound(typ32) + 1)
typ32(UBound(typ32)) = Typ
procNewCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ32))
Typ = Typ03.GetMethod("RemToken", typ32).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
procNewCallIL.Emit(OpCodes.Pop)
End If
procNewCallIL.MarkSequencePoint(doc4, 250, 1, 250, 100)
procNewCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procNewCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
procNewCallIL.Emit(OpCodes.Ldlen)
procNewCallIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Sub)
procNewCallIL.Emit(OpCodes.Stloc, 9)
procNewCallIL.MarkSequencePoint(doc4, 251, 1, 251, 100)
procNewCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Sub)
procNewCallIL.Emit(OpCodes.Starg, 2)
procNewCallIL.MarkSequencePoint(doc4, 252, 1, 252, 100)
procNewCallIL.Emit(OpCodes.Br, label5)
procNewCallIL.MarkSequencePoint(doc4, 253, 1, 253, 100)
procNewCallIL.Emit(OpCodes.Br, cont127)
procNewCallIL.MarkLabel(fa127)
procNewCallIL.MarkSequencePoint(doc4, 254, 1, 254, 100)
procNewCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
procNewCallIL.Emit(OpCodes.Stloc, 4)
procNewCallIL.MarkSequencePoint(doc4, 255, 1, 255, 100)
procNewCallIL.Emit(OpCodes.Br, label5)
procNewCallIL.MarkSequencePoint(doc4, 256, 1, 256, 100)
procNewCallIL.Emit(OpCodes.Br, cont127)
procNewCallIL.MarkLabel(cont127)
procNewCallIL.MarkSequencePoint(doc4, 257, 1, 257, 100)
procNewCallIL.Emit(OpCodes.Br, cont126)
procNewCallIL.MarkLabel(fa126)
procNewCallIL.MarkSequencePoint(doc4, 258, 1, 258, 100)
procNewCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
procNewCallIL.Emit(OpCodes.Stloc, 4)
procNewCallIL.MarkSequencePoint(doc4, 259, 1, 259, 100)
procNewCallIL.Emit(OpCodes.Br, label5)
procNewCallIL.MarkSequencePoint(doc4, 260, 1, 260, 100)
procNewCallIL.Emit(OpCodes.Br, cont126)
procNewCallIL.MarkLabel(cont126)
procNewCallIL.MarkSequencePoint(doc4, 262, 1, 262, 100)
procNewCallIL.MarkLabel(label5)
procNewCallIL.MarkSequencePoint(doc4, 264, 1, 264, 100)
procNewCallIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
procNewCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa129 As System.Reflection.Emit.Label = procNewCallIL.DefineLabel()
Dim tru129 As System.Reflection.Emit.Label = procNewCallIL.DefineLabel()
Dim cont129 As System.Reflection.Emit.Label = procNewCallIL.DefineLabel()
procNewCallIL.Emit(OpCodes.Beq, tru129)
procNewCallIL.Emit(OpCodes.Br, fa129)
procNewCallIL.MarkLabel(tru129)
procNewCallIL.MarkSequencePoint(doc4, 265, 1, 265, 100)
Dim typ33(-1) As Type
procNewCallIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Expr)
Typ03 = Typ
procNewCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procNewCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
procNewCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
procNewCallIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ReDim Preserve typ33(UBound(typ33) + 1)
typ33(UBound(typ33)) = Typ
procNewCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ33))
Typ = Typ03.GetMethod("AddToken", typ33).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
procNewCallIL.Emit(OpCodes.Pop)
End If
procNewCallIL.MarkSequencePoint(doc4, 266, 1, 266, 100)
Dim typ34(-1) As Type
procNewCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
procNewCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
ReDim Preserve typ34(UBound(typ34) + 1)
typ34(UBound(typ34)) = Typ
procNewCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ34))
Typ = Typ03.GetMethod("RemToken", typ34).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
procNewCallIL.Emit(OpCodes.Pop)
End If
procNewCallIL.MarkSequencePoint(doc4, 267, 1, 267, 100)
procNewCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procNewCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
procNewCallIL.Emit(OpCodes.Ldlen)
procNewCallIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Sub)
procNewCallIL.Emit(OpCodes.Stloc, 9)
procNewCallIL.MarkSequencePoint(doc4, 268, 1, 268, 100)
procNewCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Sub)
procNewCallIL.Emit(OpCodes.Starg, 2)
procNewCallIL.MarkSequencePoint(doc4, 269, 1, 269, 100)
procNewCallIL.Emit(OpCodes.Br, cont129)
procNewCallIL.MarkLabel(fa129)
procNewCallIL.Emit(OpCodes.Br, cont129)
procNewCallIL.MarkLabel(cont129)
procNewCallIL.MarkSequencePoint(doc4, 271, 1, 271, 100)
procNewCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Int32)
Dim fa130 As System.Reflection.Emit.Label = procNewCallIL.DefineLabel()
Dim tru130 As System.Reflection.Emit.Label = procNewCallIL.DefineLabel()
Dim cont130 As System.Reflection.Emit.Label = procNewCallIL.DefineLabel()
procNewCallIL.Emit(OpCodes.Beq, tru130)
procNewCallIL.Emit(OpCodes.Br, fa130)
procNewCallIL.MarkLabel(tru130)
procNewCallIL.MarkSequencePoint(doc4, 272, 1, 272, 100)
procNewCallIL.Emit(OpCodes.Br, label4)
procNewCallIL.MarkSequencePoint(doc4, 273, 1, 273, 100)
procNewCallIL.Emit(OpCodes.Br, cont130)
procNewCallIL.MarkLabel(fa130)
procNewCallIL.MarkSequencePoint(doc4, 274, 1, 274, 100)
procNewCallIL.Emit(OpCodes.Br, label3)
procNewCallIL.MarkSequencePoint(doc4, 275, 1, 275, 100)
procNewCallIL.Emit(OpCodes.Br, cont130)
procNewCallIL.MarkLabel(cont130)
procNewCallIL.MarkSequencePoint(doc4, 277, 1, 277, 100)
procNewCallIL.MarkLabel(label4)
procNewCallIL.MarkSequencePoint(doc4, 279, 1, 279, 100)
procNewCallIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(NewCallTok)
procNewCallIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(TypeTok)
procNewCallIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("Line"))
Typ = GetType(TypeTok).GetField("Line").FieldType
procNewCallIL.Emit(OpCodes.Stfld, GetType(NewCallTok).GetField("Line"))
procNewCallIL.MarkSequencePoint(doc4, 280, 1, 280, 100)
procNewCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procNewCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
procNewCallIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Int32)
procNewCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
Typ02 = Typ
procNewCallIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(NewCallTok)
Typ = Typ02
procNewCallIL.Emit(OpCodes.Stelem, Typ.GetElementType())
procNewCallIL.MarkSequencePoint(doc4, 282, 1, 282, 100)
procNewCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procNewCallIL.MarkSequencePoint(doc4, 284, 1, 284, 100)
procNewCallIL.Emit(OpCodes.Ret)
Dim typ35(-1) As Type
ReDim Preserve typ35(UBound(typ35) + 1)
typ35(UBound(typ35)) = GetType(Expr)
ReDim Preserve typ35(UBound(typ35) + 1)
typ35(UBound(typ35)) = GetType(System.Int32)
Dim procIdentArrayAccess As MethodBuilder = ExprOptimizer.DefineMethod("procIdentArrayAccess", MethodAttributes.Public, GetType(Expr), typ35)
Dim procIdentArrayAccessIL As ILGenerator = procIdentArrayAccess.GetILGenerator()
Dim procIdentArrayAccessparam01 As ParameterBuilder = procIdentArrayAccess.DefineParameter(1, ParameterAttributes.None, "stm")
Dim procIdentArrayAccessparam02 As ParameterBuilder = procIdentArrayAccess.DefineParameter(2, ParameterAttributes.None, "i")
procIdentArrayAccessIL.MarkSequencePoint(doc4, 288, 1, 288, 100)
Dim locbldr141 As LocalBuilder = procIdentArrayAccessIL.DeclareLocal(GetType(Ident))
locbldr141.SetLocalSymInfo("idt")
procIdentArrayAccessIL.Emit(OpCodes.Ldnull)
procIdentArrayAccessIL.Emit(OpCodes.Stloc, 0)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 289, 1, 289, 100)
Dim locbldr142 As LocalBuilder = procIdentArrayAccessIL.DeclareLocal(GetType(Expr))
locbldr142.SetLocalSymInfo("ep2")
procIdentArrayAccessIL.Emit(OpCodes.Newobj, GetType(Expr).GetConstructor(Type.EmptyTypes))
procIdentArrayAccessIL.Emit(OpCodes.Stloc, 1)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 290, 1, 290, 100)
Dim locbldr143 As LocalBuilder = procIdentArrayAccessIL.DeclareLocal(GetType(System.Int32))
locbldr143.SetLocalSymInfo("lvl")
procIdentArrayAccessIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procIdentArrayAccessIL.Emit(OpCodes.Stloc, 2)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 291, 1, 291, 100)
Dim locbldr144 As LocalBuilder = procIdentArrayAccessIL.DeclareLocal(GetType(System.Boolean))
locbldr144.SetLocalSymInfo("d")
procIdentArrayAccessIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
procIdentArrayAccessIL.Emit(OpCodes.Stloc, 3)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 292, 1, 292, 100)
Dim locbldr145 As LocalBuilder = procIdentArrayAccessIL.DeclareLocal(GetType(System.Int32))
locbldr145.SetLocalSymInfo("j")
procIdentArrayAccessIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
procIdentArrayAccessIL.Emit(OpCodes.Stloc, 4)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 294, 1, 294, 100)
procIdentArrayAccessIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procIdentArrayAccessIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procIdentArrayAccessIL.Emit(OpCodes.Sub)
procIdentArrayAccessIL.Emit(OpCodes.Starg, 2)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 295, 1, 295, 100)
procIdentArrayAccessIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procIdentArrayAccessIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
procIdentArrayAccessIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procIdentArrayAccessIL.Emit(OpCodes.Conv_U)
Typ = Typ02
procIdentArrayAccessIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
procIdentArrayAccessIL.Emit(OpCodes.Stloc, 0)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 296, 1, 296, 100)
procIdentArrayAccessIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procIdentArrayAccessIL.Emit(OpCodes.Stloc, 4)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 297, 1, 297, 100)
procIdentArrayAccessIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procIdentArrayAccessIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procIdentArrayAccessIL.Emit(OpCodes.Add)
procIdentArrayAccessIL.Emit(OpCodes.Starg, 2)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 299, 1, 299, 100)
Dim locbldr146 As LocalBuilder = procIdentArrayAccessIL.DeclareLocal(GetType(Token))
locbldr146.SetLocalSymInfo("tok2")
procIdentArrayAccessIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procIdentArrayAccessIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
procIdentArrayAccessIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procIdentArrayAccessIL.Emit(OpCodes.Conv_U)
Typ = Typ02
procIdentArrayAccessIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
procIdentArrayAccessIL.Emit(OpCodes.Stloc, 5)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 300, 1, 300, 100)
Dim locbldr147 As LocalBuilder = procIdentArrayAccessIL.DeclareLocal(GetType(System.Type))
locbldr147.SetLocalSymInfo("typ2")
procIdentArrayAccessIL.MarkSequencePoint(doc4, 301, 1, 301, 100)
Dim locbldr148 As LocalBuilder = procIdentArrayAccessIL.DeclareLocal(GetType(System.Boolean))
locbldr148.SetLocalSymInfo("b2")
procIdentArrayAccessIL.MarkSequencePoint(doc4, 302, 1, 302, 100)
Dim locbldr149 As LocalBuilder = procIdentArrayAccessIL.DeclareLocal(GetType(System.Int32))
locbldr149.SetLocalSymInfo("len")
procIdentArrayAccessIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procIdentArrayAccessIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
procIdentArrayAccessIL.Emit(OpCodes.Ldlen)
procIdentArrayAccessIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
procIdentArrayAccessIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procIdentArrayAccessIL.Emit(OpCodes.Sub)
procIdentArrayAccessIL.Emit(OpCodes.Stloc, 8)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 304, 1, 304, 100)
Dim typ36(-1) As Type
procIdentArrayAccessIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
procIdentArrayAccessIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
ReDim Preserve typ36(UBound(typ36) + 1)
typ36(UBound(typ36)) = Typ
procIdentArrayAccessIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ36))
Typ = Typ03.GetMethod("RemToken", typ36).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
procIdentArrayAccessIL.Emit(OpCodes.Pop)
End If
procIdentArrayAccessIL.MarkSequencePoint(doc4, 305, 1, 305, 100)
procIdentArrayAccessIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procIdentArrayAccessIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
procIdentArrayAccessIL.Emit(OpCodes.Ldlen)
procIdentArrayAccessIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
procIdentArrayAccessIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procIdentArrayAccessIL.Emit(OpCodes.Sub)
procIdentArrayAccessIL.Emit(OpCodes.Stloc, 8)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 306, 1, 306, 100)
procIdentArrayAccessIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procIdentArrayAccessIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procIdentArrayAccessIL.Emit(OpCodes.Sub)
procIdentArrayAccessIL.Emit(OpCodes.Starg, 2)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 308, 1, 308, 100)
Dim label6 As System.Reflection.Emit.Label = procIdentArrayAccessIL.DefineLabel()
procIdentArrayAccessIL.MarkSequencePoint(doc4, 309, 1, 309, 100)
Dim label7 As System.Reflection.Emit.Label = procIdentArrayAccessIL.DefineLabel()
procIdentArrayAccessIL.MarkSequencePoint(doc4, 310, 1, 310, 100)
Dim label8 As System.Reflection.Emit.Label = procIdentArrayAccessIL.DefineLabel()
procIdentArrayAccessIL.MarkSequencePoint(doc4, 312, 1, 312, 100)
procIdentArrayAccessIL.MarkLabel(label6)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 315, 1, 315, 100)
procIdentArrayAccessIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procIdentArrayAccessIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procIdentArrayAccessIL.Emit(OpCodes.Add)
procIdentArrayAccessIL.Emit(OpCodes.Starg, 2)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 317, 1, 317, 100)
procIdentArrayAccessIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procIdentArrayAccessIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
procIdentArrayAccessIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procIdentArrayAccessIL.Emit(OpCodes.Conv_U)
Typ = Typ02
procIdentArrayAccessIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
procIdentArrayAccessIL.Emit(OpCodes.Stloc, 5)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 318, 1, 318, 100)
procIdentArrayAccessIL.Emit(OpCodes.Ldtoken, GetType(RSParen))
Dim typ37 As Type() = {GetType(System.RuntimeTypeHandle)}
procIdentArrayAccessIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ37))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ37).ReturnType
procIdentArrayAccessIL.Emit(OpCodes.Stloc, 6)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 319, 1, 319, 100)
Dim typ38(-1) As Type
procIdentArrayAccessIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Type)
Typ03 = Typ
procIdentArrayAccessIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
procIdentArrayAccessIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ38(UBound(typ38) + 1)
typ38(UBound(typ38)) = Typ
procIdentArrayAccessIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ38))
Typ = Typ03.GetMethod("IsInstanceOfType", typ38).ReturnType
procIdentArrayAccessIL.Emit(OpCodes.Stloc, 7)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 320, 1, 320, 100)
procIdentArrayAccessIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
procIdentArrayAccessIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa131 As System.Reflection.Emit.Label = procIdentArrayAccessIL.DefineLabel()
Dim tru131 As System.Reflection.Emit.Label = procIdentArrayAccessIL.DefineLabel()
Dim cont131 As System.Reflection.Emit.Label = procIdentArrayAccessIL.DefineLabel()
procIdentArrayAccessIL.Emit(OpCodes.Beq, tru131)
procIdentArrayAccessIL.Emit(OpCodes.Br, fa131)
procIdentArrayAccessIL.MarkLabel(tru131)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 321, 1, 321, 100)
procIdentArrayAccessIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
procIdentArrayAccessIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procIdentArrayAccessIL.Emit(OpCodes.Sub)
procIdentArrayAccessIL.Emit(OpCodes.Stloc, 2)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 322, 1, 322, 100)
procIdentArrayAccessIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
procIdentArrayAccessIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa132 As System.Reflection.Emit.Label = procIdentArrayAccessIL.DefineLabel()
Dim tru132 As System.Reflection.Emit.Label = procIdentArrayAccessIL.DefineLabel()
Dim cont132 As System.Reflection.Emit.Label = procIdentArrayAccessIL.DefineLabel()
procIdentArrayAccessIL.Emit(OpCodes.Beq, tru132)
procIdentArrayAccessIL.Emit(OpCodes.Br, fa132)
procIdentArrayAccessIL.MarkLabel(tru132)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 323, 1, 323, 100)
procIdentArrayAccessIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
procIdentArrayAccessIL.Emit(OpCodes.Stloc, 3)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 325, 1, 325, 100)
Dim typ39(-1) As Type
procIdentArrayAccessIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
procIdentArrayAccessIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
ReDim Preserve typ39(UBound(typ39) + 1)
typ39(UBound(typ39)) = Typ
procIdentArrayAccessIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ39))
Typ = Typ03.GetMethod("RemToken", typ39).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
procIdentArrayAccessIL.Emit(OpCodes.Pop)
End If
procIdentArrayAccessIL.MarkSequencePoint(doc4, 326, 1, 326, 100)
procIdentArrayAccessIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procIdentArrayAccessIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
procIdentArrayAccessIL.Emit(OpCodes.Ldlen)
procIdentArrayAccessIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
procIdentArrayAccessIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procIdentArrayAccessIL.Emit(OpCodes.Sub)
procIdentArrayAccessIL.Emit(OpCodes.Stloc, 8)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 327, 1, 327, 100)
procIdentArrayAccessIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procIdentArrayAccessIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procIdentArrayAccessIL.Emit(OpCodes.Sub)
procIdentArrayAccessIL.Emit(OpCodes.Starg, 2)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 328, 1, 328, 100)
procIdentArrayAccessIL.Emit(OpCodes.Br, label7)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 329, 1, 329, 100)
procIdentArrayAccessIL.Emit(OpCodes.Br, cont132)
procIdentArrayAccessIL.MarkLabel(fa132)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 330, 1, 330, 100)
procIdentArrayAccessIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
procIdentArrayAccessIL.Emit(OpCodes.Stloc, 3)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 331, 1, 331, 100)
procIdentArrayAccessIL.Emit(OpCodes.Br, label8)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 332, 1, 332, 100)
procIdentArrayAccessIL.Emit(OpCodes.Br, cont132)
procIdentArrayAccessIL.MarkLabel(cont132)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 333, 1, 333, 100)
procIdentArrayAccessIL.Emit(OpCodes.Br, label8)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 334, 1, 334, 100)
procIdentArrayAccessIL.Emit(OpCodes.Br, cont131)
procIdentArrayAccessIL.MarkLabel(fa131)
procIdentArrayAccessIL.Emit(OpCodes.Br, cont131)
procIdentArrayAccessIL.MarkLabel(cont131)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 336, 1, 336, 100)
procIdentArrayAccessIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procIdentArrayAccessIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
procIdentArrayAccessIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procIdentArrayAccessIL.Emit(OpCodes.Conv_U)
Typ = Typ02
procIdentArrayAccessIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
procIdentArrayAccessIL.Emit(OpCodes.Stloc, 5)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 337, 1, 337, 100)
procIdentArrayAccessIL.Emit(OpCodes.Ldtoken, GetType(LSParen))
Dim typ40 As Type() = {GetType(System.RuntimeTypeHandle)}
procIdentArrayAccessIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ40))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ40).ReturnType
procIdentArrayAccessIL.Emit(OpCodes.Stloc, 6)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 338, 1, 338, 100)
Dim typ41(-1) As Type
procIdentArrayAccessIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Type)
Typ03 = Typ
procIdentArrayAccessIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
procIdentArrayAccessIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ41(UBound(typ41) + 1)
typ41(UBound(typ41)) = Typ
procIdentArrayAccessIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ41))
Typ = Typ03.GetMethod("IsInstanceOfType", typ41).ReturnType
procIdentArrayAccessIL.Emit(OpCodes.Stloc, 7)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 339, 1, 339, 100)
procIdentArrayAccessIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
procIdentArrayAccessIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa133 As System.Reflection.Emit.Label = procIdentArrayAccessIL.DefineLabel()
Dim tru133 As System.Reflection.Emit.Label = procIdentArrayAccessIL.DefineLabel()
Dim cont133 As System.Reflection.Emit.Label = procIdentArrayAccessIL.DefineLabel()
procIdentArrayAccessIL.Emit(OpCodes.Beq, tru133)
procIdentArrayAccessIL.Emit(OpCodes.Br, fa133)
procIdentArrayAccessIL.MarkLabel(tru133)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 340, 1, 340, 100)
procIdentArrayAccessIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
procIdentArrayAccessIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procIdentArrayAccessIL.Emit(OpCodes.Add)
procIdentArrayAccessIL.Emit(OpCodes.Stloc, 2)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 341, 1, 341, 100)
procIdentArrayAccessIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
procIdentArrayAccessIL.Emit(OpCodes.Stloc, 3)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 342, 1, 342, 100)
procIdentArrayAccessIL.Emit(OpCodes.Br, label8)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 343, 1, 343, 100)
procIdentArrayAccessIL.Emit(OpCodes.Br, cont133)
procIdentArrayAccessIL.MarkLabel(fa133)
procIdentArrayAccessIL.Emit(OpCodes.Br, cont133)
procIdentArrayAccessIL.MarkLabel(cont133)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 345, 1, 345, 100)
procIdentArrayAccessIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procIdentArrayAccessIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
procIdentArrayAccessIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procIdentArrayAccessIL.Emit(OpCodes.Conv_U)
Typ = Typ02
procIdentArrayAccessIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
procIdentArrayAccessIL.Emit(OpCodes.Stloc, 5)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 346, 1, 346, 100)
procIdentArrayAccessIL.Emit(OpCodes.Ldtoken, GetType(Comma))
Dim typ42 As Type() = {GetType(System.RuntimeTypeHandle)}
procIdentArrayAccessIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ42))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ42).ReturnType
procIdentArrayAccessIL.Emit(OpCodes.Stloc, 6)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 347, 1, 347, 100)
Dim typ43(-1) As Type
procIdentArrayAccessIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Type)
Typ03 = Typ
procIdentArrayAccessIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
procIdentArrayAccessIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ43(UBound(typ43) + 1)
typ43(UBound(typ43)) = Typ
procIdentArrayAccessIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ43))
Typ = Typ03.GetMethod("IsInstanceOfType", typ43).ReturnType
procIdentArrayAccessIL.Emit(OpCodes.Stloc, 7)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 348, 1, 348, 100)
procIdentArrayAccessIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
procIdentArrayAccessIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa134 As System.Reflection.Emit.Label = procIdentArrayAccessIL.DefineLabel()
Dim tru134 As System.Reflection.Emit.Label = procIdentArrayAccessIL.DefineLabel()
Dim cont134 As System.Reflection.Emit.Label = procIdentArrayAccessIL.DefineLabel()
procIdentArrayAccessIL.Emit(OpCodes.Beq, tru134)
procIdentArrayAccessIL.Emit(OpCodes.Br, fa134)
procIdentArrayAccessIL.MarkLabel(tru134)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 349, 1, 349, 100)
procIdentArrayAccessIL.Emit(OpCodes.Br, cont134)
procIdentArrayAccessIL.MarkLabel(fa134)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 350, 1, 350, 100)
procIdentArrayAccessIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
procIdentArrayAccessIL.Emit(OpCodes.Stloc, 3)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 351, 1, 351, 100)
procIdentArrayAccessIL.Emit(OpCodes.Br, label8)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 352, 1, 352, 100)
procIdentArrayAccessIL.Emit(OpCodes.Br, cont134)
procIdentArrayAccessIL.MarkLabel(cont134)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 354, 1, 354, 100)
procIdentArrayAccessIL.MarkLabel(label8)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 356, 1, 356, 100)
procIdentArrayAccessIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
procIdentArrayAccessIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa135 As System.Reflection.Emit.Label = procIdentArrayAccessIL.DefineLabel()
Dim tru135 As System.Reflection.Emit.Label = procIdentArrayAccessIL.DefineLabel()
Dim cont135 As System.Reflection.Emit.Label = procIdentArrayAccessIL.DefineLabel()
procIdentArrayAccessIL.Emit(OpCodes.Beq, tru135)
procIdentArrayAccessIL.Emit(OpCodes.Br, fa135)
procIdentArrayAccessIL.MarkLabel(tru135)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 357, 1, 357, 100)
Dim typ44(-1) As Type
procIdentArrayAccessIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Expr)
Typ03 = Typ
procIdentArrayAccessIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procIdentArrayAccessIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
procIdentArrayAccessIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procIdentArrayAccessIL.Emit(OpCodes.Conv_U)
Typ = Typ02
procIdentArrayAccessIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ReDim Preserve typ44(UBound(typ44) + 1)
typ44(UBound(typ44)) = Typ
procIdentArrayAccessIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ44))
Typ = Typ03.GetMethod("AddToken", typ44).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
procIdentArrayAccessIL.Emit(OpCodes.Pop)
End If
procIdentArrayAccessIL.MarkSequencePoint(doc4, 358, 1, 358, 100)
Dim typ45(-1) As Type
procIdentArrayAccessIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
procIdentArrayAccessIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
ReDim Preserve typ45(UBound(typ45) + 1)
typ45(UBound(typ45)) = Typ
procIdentArrayAccessIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ45))
Typ = Typ03.GetMethod("RemToken", typ45).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
procIdentArrayAccessIL.Emit(OpCodes.Pop)
End If
procIdentArrayAccessIL.MarkSequencePoint(doc4, 359, 1, 359, 100)
procIdentArrayAccessIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procIdentArrayAccessIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
procIdentArrayAccessIL.Emit(OpCodes.Ldlen)
procIdentArrayAccessIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
procIdentArrayAccessIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procIdentArrayAccessIL.Emit(OpCodes.Sub)
procIdentArrayAccessIL.Emit(OpCodes.Stloc, 8)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 360, 1, 360, 100)
procIdentArrayAccessIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procIdentArrayAccessIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procIdentArrayAccessIL.Emit(OpCodes.Sub)
procIdentArrayAccessIL.Emit(OpCodes.Starg, 2)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 361, 1, 361, 100)
procIdentArrayAccessIL.Emit(OpCodes.Br, cont135)
procIdentArrayAccessIL.MarkLabel(fa135)
procIdentArrayAccessIL.Emit(OpCodes.Br, cont135)
procIdentArrayAccessIL.MarkLabel(cont135)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 363, 1, 363, 100)
procIdentArrayAccessIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procIdentArrayAccessIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Int32)
Dim fa136 As System.Reflection.Emit.Label = procIdentArrayAccessIL.DefineLabel()
Dim tru136 As System.Reflection.Emit.Label = procIdentArrayAccessIL.DefineLabel()
Dim cont136 As System.Reflection.Emit.Label = procIdentArrayAccessIL.DefineLabel()
procIdentArrayAccessIL.Emit(OpCodes.Beq, tru136)
procIdentArrayAccessIL.Emit(OpCodes.Br, fa136)
procIdentArrayAccessIL.MarkLabel(tru136)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 364, 1, 364, 100)
procIdentArrayAccessIL.Emit(OpCodes.Br, label7)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 365, 1, 365, 100)
procIdentArrayAccessIL.Emit(OpCodes.Br, cont136)
procIdentArrayAccessIL.MarkLabel(fa136)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 366, 1, 366, 100)
procIdentArrayAccessIL.Emit(OpCodes.Br, label6)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 367, 1, 367, 100)
procIdentArrayAccessIL.Emit(OpCodes.Br, cont136)
procIdentArrayAccessIL.MarkLabel(cont136)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 369, 1, 369, 100)
procIdentArrayAccessIL.MarkLabel(label7)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 371, 1, 371, 100)
procIdentArrayAccessIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Ident)
procIdentArrayAccessIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Expr)
procIdentArrayAccessIL.Emit(OpCodes.Stfld, GetType(Ident).GetField("ArrLoc"))
procIdentArrayAccessIL.MarkSequencePoint(doc4, 372, 1, 372, 100)
procIdentArrayAccessIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Ident)
procIdentArrayAccessIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
procIdentArrayAccessIL.Emit(OpCodes.Stfld, GetType(Ident).GetField("IsArr"))
procIdentArrayAccessIL.MarkSequencePoint(doc4, 373, 1, 373, 100)
procIdentArrayAccessIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procIdentArrayAccessIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
procIdentArrayAccessIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
procIdentArrayAccessIL.Emit(OpCodes.Conv_U)
Typ = Typ02
Typ02 = Typ
procIdentArrayAccessIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Ident)
Typ = Typ02
procIdentArrayAccessIL.Emit(OpCodes.Stelem, Typ.GetElementType())
procIdentArrayAccessIL.MarkSequencePoint(doc4, 375, 1, 375, 100)
procIdentArrayAccessIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procIdentArrayAccessIL.MarkSequencePoint(doc4, 377, 1, 377, 100)
procIdentArrayAccessIL.Emit(OpCodes.Ret)
Dim typ46(-1) As Type
ReDim Preserve typ46(UBound(typ46) + 1)
typ46(UBound(typ46)) = GetType(Expr)
ReDim Preserve typ46(UBound(typ46) + 1)
typ46(UBound(typ46)) = GetType(System.Int32)
Dim procMtdArrayAccess As MethodBuilder = ExprOptimizer.DefineMethod("procMtdArrayAccess", MethodAttributes.Public, GetType(Expr), typ46)
Dim procMtdArrayAccessIL As ILGenerator = procMtdArrayAccess.GetILGenerator()
Dim procMtdArrayAccessparam01 As ParameterBuilder = procMtdArrayAccess.DefineParameter(1, ParameterAttributes.None, "stm")
Dim procMtdArrayAccessparam02 As ParameterBuilder = procMtdArrayAccess.DefineParameter(2, ParameterAttributes.None, "i")
procMtdArrayAccessIL.MarkSequencePoint(doc4, 381, 1, 381, 100)
Dim locbldr150 As LocalBuilder = procMtdArrayAccessIL.DeclareLocal(GetType(MethodCallTok))
locbldr150.SetLocalSymInfo("mtd")
procMtdArrayAccessIL.Emit(OpCodes.Ldnull)
procMtdArrayAccessIL.Emit(OpCodes.Stloc, 0)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 382, 1, 382, 100)
Dim locbldr151 As LocalBuilder = procMtdArrayAccessIL.DeclareLocal(GetType(MethodNameTok))
locbldr151.SetLocalSymInfo("idt")
procMtdArrayAccessIL.Emit(OpCodes.Ldnull)
procMtdArrayAccessIL.Emit(OpCodes.Stloc, 1)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 383, 1, 383, 100)
Dim locbldr152 As LocalBuilder = procMtdArrayAccessIL.DeclareLocal(GetType(Expr))
locbldr152.SetLocalSymInfo("ep2")
procMtdArrayAccessIL.Emit(OpCodes.Newobj, GetType(Expr).GetConstructor(Type.EmptyTypes))
procMtdArrayAccessIL.Emit(OpCodes.Stloc, 2)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 384, 1, 384, 100)
Dim locbldr153 As LocalBuilder = procMtdArrayAccessIL.DeclareLocal(GetType(System.Int32))
locbldr153.SetLocalSymInfo("lvl")
procMtdArrayAccessIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMtdArrayAccessIL.Emit(OpCodes.Stloc, 3)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 385, 1, 385, 100)
Dim locbldr154 As LocalBuilder = procMtdArrayAccessIL.DeclareLocal(GetType(System.Boolean))
locbldr154.SetLocalSymInfo("d")
procMtdArrayAccessIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
procMtdArrayAccessIL.Emit(OpCodes.Stloc, 4)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 386, 1, 386, 100)
Dim locbldr155 As LocalBuilder = procMtdArrayAccessIL.DeclareLocal(GetType(System.Int32))
locbldr155.SetLocalSymInfo("j")
procMtdArrayAccessIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
procMtdArrayAccessIL.Emit(OpCodes.Stloc, 5)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 388, 1, 388, 100)
procMtdArrayAccessIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMtdArrayAccessIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMtdArrayAccessIL.Emit(OpCodes.Sub)
procMtdArrayAccessIL.Emit(OpCodes.Starg, 2)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 389, 1, 389, 100)
procMtdArrayAccessIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMtdArrayAccessIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
procMtdArrayAccessIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMtdArrayAccessIL.Emit(OpCodes.Conv_U)
Typ = Typ02
procMtdArrayAccessIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
procMtdArrayAccessIL.Emit(OpCodes.Stloc, 0)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 390, 1, 390, 100)
procMtdArrayAccessIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodCallTok)
procMtdArrayAccessIL.Emit(OpCodes.Ldfld, GetType(MethodCallTok).GetField("Name"))
Typ = GetType(MethodCallTok).GetField("Name").FieldType
procMtdArrayAccessIL.Emit(OpCodes.Stloc, 1)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 391, 1, 391, 100)
procMtdArrayAccessIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMtdArrayAccessIL.Emit(OpCodes.Stloc, 5)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 392, 1, 392, 100)
procMtdArrayAccessIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMtdArrayAccessIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMtdArrayAccessIL.Emit(OpCodes.Add)
procMtdArrayAccessIL.Emit(OpCodes.Starg, 2)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 394, 1, 394, 100)
Dim locbldr156 As LocalBuilder = procMtdArrayAccessIL.DeclareLocal(GetType(Token))
locbldr156.SetLocalSymInfo("tok2")
procMtdArrayAccessIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMtdArrayAccessIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
procMtdArrayAccessIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMtdArrayAccessIL.Emit(OpCodes.Conv_U)
Typ = Typ02
procMtdArrayAccessIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
procMtdArrayAccessIL.Emit(OpCodes.Stloc, 6)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 395, 1, 395, 100)
Dim locbldr157 As LocalBuilder = procMtdArrayAccessIL.DeclareLocal(GetType(System.Type))
locbldr157.SetLocalSymInfo("typ2")
procMtdArrayAccessIL.MarkSequencePoint(doc4, 396, 1, 396, 100)
Dim locbldr158 As LocalBuilder = procMtdArrayAccessIL.DeclareLocal(GetType(System.Boolean))
locbldr158.SetLocalSymInfo("b2")
procMtdArrayAccessIL.MarkSequencePoint(doc4, 397, 1, 397, 100)
Dim locbldr159 As LocalBuilder = procMtdArrayAccessIL.DeclareLocal(GetType(System.Int32))
locbldr159.SetLocalSymInfo("len")
procMtdArrayAccessIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMtdArrayAccessIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
procMtdArrayAccessIL.Emit(OpCodes.Ldlen)
procMtdArrayAccessIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
procMtdArrayAccessIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMtdArrayAccessIL.Emit(OpCodes.Sub)
procMtdArrayAccessIL.Emit(OpCodes.Stloc, 9)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 399, 1, 399, 100)
Dim typ47(-1) As Type
procMtdArrayAccessIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
procMtdArrayAccessIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
ReDim Preserve typ47(UBound(typ47) + 1)
typ47(UBound(typ47)) = Typ
procMtdArrayAccessIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ47))
Typ = Typ03.GetMethod("RemToken", typ47).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
procMtdArrayAccessIL.Emit(OpCodes.Pop)
End If
procMtdArrayAccessIL.MarkSequencePoint(doc4, 400, 1, 400, 100)
procMtdArrayAccessIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMtdArrayAccessIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
procMtdArrayAccessIL.Emit(OpCodes.Ldlen)
procMtdArrayAccessIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
procMtdArrayAccessIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMtdArrayAccessIL.Emit(OpCodes.Sub)
procMtdArrayAccessIL.Emit(OpCodes.Stloc, 9)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 401, 1, 401, 100)
procMtdArrayAccessIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMtdArrayAccessIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMtdArrayAccessIL.Emit(OpCodes.Sub)
procMtdArrayAccessIL.Emit(OpCodes.Starg, 2)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 403, 1, 403, 100)
Dim label9 As System.Reflection.Emit.Label = procMtdArrayAccessIL.DefineLabel()
procMtdArrayAccessIL.MarkSequencePoint(doc4, 404, 1, 404, 100)
Dim label10 As System.Reflection.Emit.Label = procMtdArrayAccessIL.DefineLabel()
procMtdArrayAccessIL.MarkSequencePoint(doc4, 405, 1, 405, 100)
Dim label11 As System.Reflection.Emit.Label = procMtdArrayAccessIL.DefineLabel()
procMtdArrayAccessIL.MarkSequencePoint(doc4, 407, 1, 407, 100)
procMtdArrayAccessIL.MarkLabel(label9)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 410, 1, 410, 100)
procMtdArrayAccessIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMtdArrayAccessIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMtdArrayAccessIL.Emit(OpCodes.Add)
procMtdArrayAccessIL.Emit(OpCodes.Starg, 2)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 412, 1, 412, 100)
procMtdArrayAccessIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMtdArrayAccessIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
procMtdArrayAccessIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMtdArrayAccessIL.Emit(OpCodes.Conv_U)
Typ = Typ02
procMtdArrayAccessIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
procMtdArrayAccessIL.Emit(OpCodes.Stloc, 6)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 413, 1, 413, 100)
procMtdArrayAccessIL.Emit(OpCodes.Ldtoken, GetType(RSParen))
Dim typ48 As Type() = {GetType(System.RuntimeTypeHandle)}
procMtdArrayAccessIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ48))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ48).ReturnType
procMtdArrayAccessIL.Emit(OpCodes.Stloc, 7)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 414, 1, 414, 100)
Dim typ49(-1) As Type
procMtdArrayAccessIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Type)
Typ03 = Typ
procMtdArrayAccessIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
procMtdArrayAccessIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ49(UBound(typ49) + 1)
typ49(UBound(typ49)) = Typ
procMtdArrayAccessIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ49))
Typ = Typ03.GetMethod("IsInstanceOfType", typ49).ReturnType
procMtdArrayAccessIL.Emit(OpCodes.Stloc, 8)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 415, 1, 415, 100)
procMtdArrayAccessIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
procMtdArrayAccessIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa137 As System.Reflection.Emit.Label = procMtdArrayAccessIL.DefineLabel()
Dim tru137 As System.Reflection.Emit.Label = procMtdArrayAccessIL.DefineLabel()
Dim cont137 As System.Reflection.Emit.Label = procMtdArrayAccessIL.DefineLabel()
procMtdArrayAccessIL.Emit(OpCodes.Beq, tru137)
procMtdArrayAccessIL.Emit(OpCodes.Br, fa137)
procMtdArrayAccessIL.MarkLabel(tru137)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 416, 1, 416, 100)
procMtdArrayAccessIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
procMtdArrayAccessIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMtdArrayAccessIL.Emit(OpCodes.Sub)
procMtdArrayAccessIL.Emit(OpCodes.Stloc, 3)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 417, 1, 417, 100)
procMtdArrayAccessIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
procMtdArrayAccessIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa138 As System.Reflection.Emit.Label = procMtdArrayAccessIL.DefineLabel()
Dim tru138 As System.Reflection.Emit.Label = procMtdArrayAccessIL.DefineLabel()
Dim cont138 As System.Reflection.Emit.Label = procMtdArrayAccessIL.DefineLabel()
procMtdArrayAccessIL.Emit(OpCodes.Beq, tru138)
procMtdArrayAccessIL.Emit(OpCodes.Br, fa138)
procMtdArrayAccessIL.MarkLabel(tru138)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 418, 1, 418, 100)
procMtdArrayAccessIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
procMtdArrayAccessIL.Emit(OpCodes.Stloc, 4)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 420, 1, 420, 100)
Dim typ50(-1) As Type
procMtdArrayAccessIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
procMtdArrayAccessIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
ReDim Preserve typ50(UBound(typ50) + 1)
typ50(UBound(typ50)) = Typ
procMtdArrayAccessIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ50))
Typ = Typ03.GetMethod("RemToken", typ50).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
procMtdArrayAccessIL.Emit(OpCodes.Pop)
End If
procMtdArrayAccessIL.MarkSequencePoint(doc4, 421, 1, 421, 100)
procMtdArrayAccessIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMtdArrayAccessIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
procMtdArrayAccessIL.Emit(OpCodes.Ldlen)
procMtdArrayAccessIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
procMtdArrayAccessIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMtdArrayAccessIL.Emit(OpCodes.Sub)
procMtdArrayAccessIL.Emit(OpCodes.Stloc, 9)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 422, 1, 422, 100)
procMtdArrayAccessIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMtdArrayAccessIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMtdArrayAccessIL.Emit(OpCodes.Sub)
procMtdArrayAccessIL.Emit(OpCodes.Starg, 2)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 423, 1, 423, 100)
procMtdArrayAccessIL.Emit(OpCodes.Br, label10)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 424, 1, 424, 100)
procMtdArrayAccessIL.Emit(OpCodes.Br, cont138)
procMtdArrayAccessIL.MarkLabel(fa138)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 425, 1, 425, 100)
procMtdArrayAccessIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
procMtdArrayAccessIL.Emit(OpCodes.Stloc, 4)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 426, 1, 426, 100)
procMtdArrayAccessIL.Emit(OpCodes.Br, label11)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 427, 1, 427, 100)
procMtdArrayAccessIL.Emit(OpCodes.Br, cont138)
procMtdArrayAccessIL.MarkLabel(cont138)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 428, 1, 428, 100)
procMtdArrayAccessIL.Emit(OpCodes.Br, label11)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 429, 1, 429, 100)
procMtdArrayAccessIL.Emit(OpCodes.Br, cont137)
procMtdArrayAccessIL.MarkLabel(fa137)
procMtdArrayAccessIL.Emit(OpCodes.Br, cont137)
procMtdArrayAccessIL.MarkLabel(cont137)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 431, 1, 431, 100)
procMtdArrayAccessIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMtdArrayAccessIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
procMtdArrayAccessIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMtdArrayAccessIL.Emit(OpCodes.Conv_U)
Typ = Typ02
procMtdArrayAccessIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
procMtdArrayAccessIL.Emit(OpCodes.Stloc, 6)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 432, 1, 432, 100)
procMtdArrayAccessIL.Emit(OpCodes.Ldtoken, GetType(LSParen))
Dim typ51 As Type() = {GetType(System.RuntimeTypeHandle)}
procMtdArrayAccessIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ51))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ51).ReturnType
procMtdArrayAccessIL.Emit(OpCodes.Stloc, 7)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 433, 1, 433, 100)
Dim typ52(-1) As Type
procMtdArrayAccessIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Type)
Typ03 = Typ
procMtdArrayAccessIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
procMtdArrayAccessIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ52(UBound(typ52) + 1)
typ52(UBound(typ52)) = Typ
procMtdArrayAccessIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ52))
Typ = Typ03.GetMethod("IsInstanceOfType", typ52).ReturnType
procMtdArrayAccessIL.Emit(OpCodes.Stloc, 8)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 434, 1, 434, 100)
procMtdArrayAccessIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
procMtdArrayAccessIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa139 As System.Reflection.Emit.Label = procMtdArrayAccessIL.DefineLabel()
Dim tru139 As System.Reflection.Emit.Label = procMtdArrayAccessIL.DefineLabel()
Dim cont139 As System.Reflection.Emit.Label = procMtdArrayAccessIL.DefineLabel()
procMtdArrayAccessIL.Emit(OpCodes.Beq, tru139)
procMtdArrayAccessIL.Emit(OpCodes.Br, fa139)
procMtdArrayAccessIL.MarkLabel(tru139)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 435, 1, 435, 100)
procMtdArrayAccessIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
procMtdArrayAccessIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMtdArrayAccessIL.Emit(OpCodes.Add)
procMtdArrayAccessIL.Emit(OpCodes.Stloc, 3)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 436, 1, 436, 100)
procMtdArrayAccessIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
procMtdArrayAccessIL.Emit(OpCodes.Stloc, 4)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 437, 1, 437, 100)
procMtdArrayAccessIL.Emit(OpCodes.Br, label11)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 438, 1, 438, 100)
procMtdArrayAccessIL.Emit(OpCodes.Br, cont139)
procMtdArrayAccessIL.MarkLabel(fa139)
procMtdArrayAccessIL.Emit(OpCodes.Br, cont139)
procMtdArrayAccessIL.MarkLabel(cont139)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 440, 1, 440, 100)
procMtdArrayAccessIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMtdArrayAccessIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
procMtdArrayAccessIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMtdArrayAccessIL.Emit(OpCodes.Conv_U)
Typ = Typ02
procMtdArrayAccessIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
procMtdArrayAccessIL.Emit(OpCodes.Stloc, 6)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 441, 1, 441, 100)
procMtdArrayAccessIL.Emit(OpCodes.Ldtoken, GetType(Comma))
Dim typ53 As Type() = {GetType(System.RuntimeTypeHandle)}
procMtdArrayAccessIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ53))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ53).ReturnType
procMtdArrayAccessIL.Emit(OpCodes.Stloc, 7)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 442, 1, 442, 100)
Dim typ54(-1) As Type
procMtdArrayAccessIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Type)
Typ03 = Typ
procMtdArrayAccessIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
procMtdArrayAccessIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ54(UBound(typ54) + 1)
typ54(UBound(typ54)) = Typ
procMtdArrayAccessIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ54))
Typ = Typ03.GetMethod("IsInstanceOfType", typ54).ReturnType
procMtdArrayAccessIL.Emit(OpCodes.Stloc, 8)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 443, 1, 443, 100)
procMtdArrayAccessIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
procMtdArrayAccessIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa140 As System.Reflection.Emit.Label = procMtdArrayAccessIL.DefineLabel()
Dim tru140 As System.Reflection.Emit.Label = procMtdArrayAccessIL.DefineLabel()
Dim cont140 As System.Reflection.Emit.Label = procMtdArrayAccessIL.DefineLabel()
procMtdArrayAccessIL.Emit(OpCodes.Beq, tru140)
procMtdArrayAccessIL.Emit(OpCodes.Br, fa140)
procMtdArrayAccessIL.MarkLabel(tru140)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 444, 1, 444, 100)
procMtdArrayAccessIL.Emit(OpCodes.Br, cont140)
procMtdArrayAccessIL.MarkLabel(fa140)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 445, 1, 445, 100)
procMtdArrayAccessIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
procMtdArrayAccessIL.Emit(OpCodes.Stloc, 4)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 446, 1, 446, 100)
procMtdArrayAccessIL.Emit(OpCodes.Br, label11)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 447, 1, 447, 100)
procMtdArrayAccessIL.Emit(OpCodes.Br, cont140)
procMtdArrayAccessIL.MarkLabel(cont140)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 449, 1, 449, 100)
procMtdArrayAccessIL.MarkLabel(label11)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 451, 1, 451, 100)
procMtdArrayAccessIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
procMtdArrayAccessIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa141 As System.Reflection.Emit.Label = procMtdArrayAccessIL.DefineLabel()
Dim tru141 As System.Reflection.Emit.Label = procMtdArrayAccessIL.DefineLabel()
Dim cont141 As System.Reflection.Emit.Label = procMtdArrayAccessIL.DefineLabel()
procMtdArrayAccessIL.Emit(OpCodes.Beq, tru141)
procMtdArrayAccessIL.Emit(OpCodes.Br, fa141)
procMtdArrayAccessIL.MarkLabel(tru141)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 452, 1, 452, 100)
Dim typ55(-1) As Type
procMtdArrayAccessIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Expr)
Typ03 = Typ
procMtdArrayAccessIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMtdArrayAccessIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
procMtdArrayAccessIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMtdArrayAccessIL.Emit(OpCodes.Conv_U)
Typ = Typ02
procMtdArrayAccessIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ReDim Preserve typ55(UBound(typ55) + 1)
typ55(UBound(typ55)) = Typ
procMtdArrayAccessIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ55))
Typ = Typ03.GetMethod("AddToken", typ55).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
procMtdArrayAccessIL.Emit(OpCodes.Pop)
End If
procMtdArrayAccessIL.MarkSequencePoint(doc4, 453, 1, 453, 100)
Dim typ56(-1) As Type
procMtdArrayAccessIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
procMtdArrayAccessIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
ReDim Preserve typ56(UBound(typ56) + 1)
typ56(UBound(typ56)) = Typ
procMtdArrayAccessIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ56))
Typ = Typ03.GetMethod("RemToken", typ56).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
procMtdArrayAccessIL.Emit(OpCodes.Pop)
End If
procMtdArrayAccessIL.MarkSequencePoint(doc4, 454, 1, 454, 100)
procMtdArrayAccessIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMtdArrayAccessIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
procMtdArrayAccessIL.Emit(OpCodes.Ldlen)
procMtdArrayAccessIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
procMtdArrayAccessIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMtdArrayAccessIL.Emit(OpCodes.Sub)
procMtdArrayAccessIL.Emit(OpCodes.Stloc, 9)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 455, 1, 455, 100)
procMtdArrayAccessIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMtdArrayAccessIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
procMtdArrayAccessIL.Emit(OpCodes.Sub)
procMtdArrayAccessIL.Emit(OpCodes.Starg, 2)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 456, 1, 456, 100)
procMtdArrayAccessIL.Emit(OpCodes.Br, cont141)
procMtdArrayAccessIL.MarkLabel(fa141)
procMtdArrayAccessIL.Emit(OpCodes.Br, cont141)
procMtdArrayAccessIL.MarkLabel(cont141)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 458, 1, 458, 100)
procMtdArrayAccessIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
procMtdArrayAccessIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Int32)
Dim fa142 As System.Reflection.Emit.Label = procMtdArrayAccessIL.DefineLabel()
Dim tru142 As System.Reflection.Emit.Label = procMtdArrayAccessIL.DefineLabel()
Dim cont142 As System.Reflection.Emit.Label = procMtdArrayAccessIL.DefineLabel()
procMtdArrayAccessIL.Emit(OpCodes.Beq, tru142)
procMtdArrayAccessIL.Emit(OpCodes.Br, fa142)
procMtdArrayAccessIL.MarkLabel(tru142)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 459, 1, 459, 100)
procMtdArrayAccessIL.Emit(OpCodes.Br, label10)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 460, 1, 460, 100)
procMtdArrayAccessIL.Emit(OpCodes.Br, cont142)
procMtdArrayAccessIL.MarkLabel(fa142)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 461, 1, 461, 100)
procMtdArrayAccessIL.Emit(OpCodes.Br, label9)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 462, 1, 462, 100)
procMtdArrayAccessIL.Emit(OpCodes.Br, cont142)
procMtdArrayAccessIL.MarkLabel(cont142)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 464, 1, 464, 100)
procMtdArrayAccessIL.MarkLabel(label10)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 466, 1, 466, 100)
procMtdArrayAccessIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodNameTok)
procMtdArrayAccessIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Expr)
procMtdArrayAccessIL.Emit(OpCodes.Stfld, GetType(MethodNameTok).GetField("ArrLoc"))
procMtdArrayAccessIL.MarkSequencePoint(doc4, 467, 1, 467, 100)
procMtdArrayAccessIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodNameTok)
procMtdArrayAccessIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
procMtdArrayAccessIL.Emit(OpCodes.Stfld, GetType(MethodNameTok).GetField("IsArr"))
procMtdArrayAccessIL.MarkSequencePoint(doc4, 468, 1, 468, 100)
procMtdArrayAccessIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodCallTok)
procMtdArrayAccessIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodNameTok)
procMtdArrayAccessIL.Emit(OpCodes.Stfld, GetType(MethodCallTok).GetField("Name"))
procMtdArrayAccessIL.MarkSequencePoint(doc4, 469, 1, 469, 100)
procMtdArrayAccessIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMtdArrayAccessIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
procMtdArrayAccessIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Int32)
procMtdArrayAccessIL.Emit(OpCodes.Conv_U)
Typ = Typ02
Typ02 = Typ
procMtdArrayAccessIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodCallTok)
Typ = Typ02
procMtdArrayAccessIL.Emit(OpCodes.Stelem, Typ.GetElementType())
procMtdArrayAccessIL.MarkSequencePoint(doc4, 471, 1, 471, 100)
procMtdArrayAccessIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
procMtdArrayAccessIL.MarkSequencePoint(doc4, 473, 1, 473, 100)
procMtdArrayAccessIL.Emit(OpCodes.Ret)
Dim typ57(-1) As Type
ReDim Preserve typ57(UBound(typ57) + 1)
typ57(UBound(typ57)) = GetType(Expr)
Dim Optimize As MethodBuilder = ExprOptimizer.DefineMethod("Optimize", MethodAttributes.Public, GetType(Expr), typ57)
Dim OptimizeIL As ILGenerator = Optimize.GetILGenerator()
Dim Optimizeparam01 As ParameterBuilder = Optimize.DefineParameter(1, ParameterAttributes.None, "exp")
OptimizeIL.MarkSequencePoint(doc4, 477, 1, 477, 100)
Dim locbldr160 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.Int32))
locbldr160.SetLocalSymInfo("len")
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
OptimizeIL.Emit(OpCodes.Ldlen)
OptimizeIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Sub)
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc4, 478, 1, 478, 100)
Dim locbldr161 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.Int32))
locbldr161.SetLocalSymInfo("i")
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc4, 479, 1, 479, 100)
Dim locbldr162 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.Int32))
locbldr162.SetLocalSymInfo("j")
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc4, 480, 1, 480, 100)
Dim locbldr163 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.Boolean))
locbldr163.SetLocalSymInfo("identtrnoff")
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc4, 481, 1, 481, 100)
Dim locbldr164 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.Boolean))
locbldr164.SetLocalSymInfo("mcbool")
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc4, 482, 1, 482, 100)
Dim locbldr165 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.Boolean))
locbldr165.SetLocalSymInfo("mcflgc")
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 5)
OptimizeIL.MarkSequencePoint(doc4, 483, 1, 483, 100)
Dim locbldr166 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.Boolean))
locbldr166.SetLocalSymInfo("iflgc")
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 6)
OptimizeIL.MarkSequencePoint(doc4, 484, 1, 484, 100)
Dim locbldr167 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.Boolean))
locbldr167.SetLocalSymInfo("sflgc")
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 7)
OptimizeIL.MarkSequencePoint(doc4, 485, 1, 485, 100)
Dim locbldr168 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(Token))
locbldr168.SetLocalSymInfo("mctok")
OptimizeIL.Emit(OpCodes.Ldnull)
OptimizeIL.Emit(OpCodes.Stloc, 8)
OptimizeIL.MarkSequencePoint(doc4, 486, 1, 486, 100)
Dim locbldr169 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(Token))
locbldr169.SetLocalSymInfo("nctok")
OptimizeIL.Emit(OpCodes.Ldnull)
OptimizeIL.Emit(OpCodes.Stloc, 9)
OptimizeIL.MarkSequencePoint(doc4, 487, 1, 487, 100)
Dim locbldr170 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(TypeTok))
locbldr170.SetLocalSymInfo("ncttok")
OptimizeIL.Emit(OpCodes.Ldnull)
OptimizeIL.Emit(OpCodes.Stloc, 10)
OptimizeIL.MarkSequencePoint(doc4, 488, 1, 488, 100)
Dim locbldr171 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(Token))
locbldr171.SetLocalSymInfo("gtctok")
OptimizeIL.Emit(OpCodes.Ldnull)
OptimizeIL.Emit(OpCodes.Stloc, 11)
OptimizeIL.MarkSequencePoint(doc4, 489, 1, 489, 100)
Dim locbldr172 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(TypeTok))
locbldr172.SetLocalSymInfo("gtcttok")
OptimizeIL.Emit(OpCodes.Ldnull)
OptimizeIL.Emit(OpCodes.Stloc, 12)
OptimizeIL.MarkSequencePoint(doc4, 490, 1, 490, 100)
Dim locbldr173 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(Token))
locbldr173.SetLocalSymInfo("mctok2")
OptimizeIL.Emit(OpCodes.Ldnull)
OptimizeIL.Emit(OpCodes.Stloc, 13)
OptimizeIL.MarkSequencePoint(doc4, 491, 1, 491, 100)
Dim locbldr174 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(Ident))
locbldr174.SetLocalSymInfo("mcident")
OptimizeIL.Emit(OpCodes.Ldnull)
OptimizeIL.Emit(OpCodes.Stloc, 14)
OptimizeIL.MarkSequencePoint(doc4, 492, 1, 492, 100)
Dim locbldr175 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(MethodCallTok))
locbldr175.SetLocalSymInfo("mcmetcall")
OptimizeIL.Emit(OpCodes.Ldnull)
OptimizeIL.Emit(OpCodes.Stloc, 15)
OptimizeIL.MarkSequencePoint(doc4, 493, 1, 493, 100)
Dim locbldr176 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(MethodNameTok))
locbldr176.SetLocalSymInfo("mcmetname")
OptimizeIL.Emit(OpCodes.Ldnull)
OptimizeIL.Emit(OpCodes.Stloc, 16)
OptimizeIL.MarkSequencePoint(doc4, 494, 1, 494, 100)
Dim locbldr177 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(StringLiteral))
locbldr177.SetLocalSymInfo("mcstr")
OptimizeIL.Emit(OpCodes.Ldnull)
OptimizeIL.Emit(OpCodes.Stloc, 17)
OptimizeIL.MarkSequencePoint(doc4, 495, 1, 495, 100)
Dim locbldr178 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.Int32))
locbldr178.SetLocalSymInfo("mcint")
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Stloc, 18)
OptimizeIL.MarkSequencePoint(doc4, 498, 1, 498, 100)
Dim label12 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.MarkSequencePoint(doc4, 499, 1, 499, 100)
Dim label13 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.MarkSequencePoint(doc4, 502, 1, 502, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa143 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru143 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont143 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Blt, tru143)
OptimizeIL.Emit(OpCodes.Br, fa143)
OptimizeIL.MarkLabel(tru143)
OptimizeIL.MarkSequencePoint(doc4, 503, 1, 503, 100)
OptimizeIL.Emit(OpCodes.Br, label13)
OptimizeIL.MarkSequencePoint(doc4, 504, 1, 504, 100)
OptimizeIL.Emit(OpCodes.Br, cont143)
OptimizeIL.MarkLabel(fa143)
OptimizeIL.Emit(OpCodes.Br, cont143)
OptimizeIL.MarkLabel(cont143)
OptimizeIL.MarkSequencePoint(doc4, 506, 1, 506, 100)
OptimizeIL.MarkLabel(label12)
OptimizeIL.MarkSequencePoint(doc4, 508, 1, 508, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("MetChainFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("MetChainFlag").FieldType
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa144 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru144 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont144 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru144)
OptimizeIL.Emit(OpCodes.Br, fa144)
OptimizeIL.MarkLabel(tru144)
OptimizeIL.MarkSequencePoint(doc4, 510, 1, 510, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Add)
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc4, 512, 1, 512, 100)
Dim label14 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.MarkSequencePoint(doc4, 514, 1, 514, 100)
Dim locbldr179 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(Token))
locbldr179.SetLocalSymInfo("tok")
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
OptimizeIL.Emit(OpCodes.Stloc, 19)
OptimizeIL.MarkSequencePoint(doc4, 515, 1, 515, 100)
Dim locbldr180 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.Type))
locbldr180.SetLocalSymInfo("typ")
OptimizeIL.MarkSequencePoint(doc4, 516, 1, 516, 100)
Dim locbldr181 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.Boolean))
locbldr181.SetLocalSymInfo("b")
OptimizeIL.MarkSequencePoint(doc4, 517, 1, 517, 100)
Dim locbldr182 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.String))
locbldr182.SetLocalSymInfo("str")
OptimizeIL.MarkSequencePoint(doc4, 519, 1, 519, 100)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(LRSParen))
Dim typ58 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ58))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ58).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 20)
OptimizeIL.MarkSequencePoint(doc4, 520, 1, 520, 100)
Dim typ59(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(System.Type)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ59(UBound(typ59) + 1)
typ59(UBound(typ59)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ59))
Typ = Typ03.GetMethod("IsInstanceOfType", typ59).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 21)
OptimizeIL.MarkSequencePoint(doc4, 522, 1, 522, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa145 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru145 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont145 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru145)
OptimizeIL.Emit(OpCodes.Br, fa145)
OptimizeIL.MarkLabel(tru145)
OptimizeIL.MarkSequencePoint(doc4, 523, 1, 523, 100)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(TypeTok))
Dim typ60 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ60))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ60).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 20)
OptimizeIL.MarkSequencePoint(doc4, 524, 1, 524, 100)
Dim typ61(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ReDim Preserve typ61(UBound(typ61) + 1)
typ61(UBound(typ61)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ61))
Typ = Typ03.GetMethod("RemToken", typ61).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
OptimizeIL.Emit(OpCodes.Pop)
End If
OptimizeIL.MarkSequencePoint(doc4, 525, 1, 525, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Sub)
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc4, 526, 1, 526, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
OptimizeIL.Emit(OpCodes.Ldlen)
OptimizeIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Sub)
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc4, 527, 1, 527, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
OptimizeIL.Emit(OpCodes.Stloc, 19)
OptimizeIL.MarkSequencePoint(doc4, 528, 1, 528, 100)
Dim typ62(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(System.Type)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ62(UBound(typ62) + 1)
typ62(UBound(typ62)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ62))
Typ = Typ03.GetMethod("IsInstanceOfType", typ62).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 21)
OptimizeIL.MarkSequencePoint(doc4, 530, 1, 530, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa146 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru146 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont146 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, fa146)
OptimizeIL.Emit(OpCodes.Br, tru146)
OptimizeIL.MarkLabel(tru146)
OptimizeIL.MarkSequencePoint(doc4, 531, 1, 531, 100)
Dim locbldr183 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(Token))
locbldr183.SetLocalSymInfo("tk")
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
OptimizeIL.Emit(OpCodes.Stloc, 23)
OptimizeIL.MarkSequencePoint(doc4, 532, 1, 532, 100)
Dim locbldr184 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(TypeTok))
locbldr184.SetLocalSymInfo("ttk")
OptimizeIL.Emit(OpCodes.Newobj, GetType(TypeTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 24)
OptimizeIL.MarkSequencePoint(doc4, 533, 1, 533, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(TypeTok)
OptimizeIL.Emit(OpCodes.Ldloc, 23)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(TypeTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc4, 534, 1, 534, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(TypeTok)
OptimizeIL.Emit(OpCodes.Ldloc, 23)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(TypeTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc4, 535, 1, 535, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(TypeTok)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stfld, GetType(TypeTok).GetField("IsArray"))
OptimizeIL.MarkSequencePoint(doc4, 536, 1, 536, 100)
OptimizeIL.Emit(OpCodes.Br, cont146)
OptimizeIL.MarkLabel(fa146)
OptimizeIL.MarkSequencePoint(doc4, 537, 1, 537, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
OptimizeIL.Emit(OpCodes.Stloc, 24)
OptimizeIL.MarkSequencePoint(doc4, 538, 1, 538, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(TypeTok)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stfld, GetType(TypeTok).GetField("IsArray"))
OptimizeIL.MarkSequencePoint(doc4, 539, 1, 539, 100)
OptimizeIL.Emit(OpCodes.Br, cont146)
OptimizeIL.MarkLabel(cont146)
OptimizeIL.MarkSequencePoint(doc4, 540, 1, 540, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(TypeTok)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Stelem, Typ.GetElementType())
OptimizeIL.MarkSequencePoint(doc4, 541, 1, 541, 100)
OptimizeIL.Emit(OpCodes.Br, label14)
OptimizeIL.MarkSequencePoint(doc4, 542, 1, 542, 100)
OptimizeIL.Emit(OpCodes.Br, cont145)
OptimizeIL.MarkLabel(fa145)
OptimizeIL.Emit(OpCodes.Br, cont145)
OptimizeIL.MarkLabel(cont145)
OptimizeIL.MarkSequencePoint(doc4, 544, 1, 544, 100)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(Ampersand))
Dim typ63 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ63))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ63).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 20)
OptimizeIL.MarkSequencePoint(doc4, 545, 1, 545, 100)
Dim typ64(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(System.Type)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ64(UBound(typ64) + 1)
typ64(UBound(typ64)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ64))
Typ = Typ03.GetMethod("IsInstanceOfType", typ64).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 21)
OptimizeIL.MarkSequencePoint(doc4, 547, 1, 547, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa147 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru147 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont147 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru147)
OptimizeIL.Emit(OpCodes.Br, fa147)
OptimizeIL.MarkLabel(tru147)
OptimizeIL.MarkSequencePoint(doc4, 548, 1, 548, 100)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(TypeTok))
Dim typ65 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ65))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ65).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 20)
OptimizeIL.MarkSequencePoint(doc4, 549, 1, 549, 100)
Dim typ66(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ReDim Preserve typ66(UBound(typ66) + 1)
typ66(UBound(typ66)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ66))
Typ = Typ03.GetMethod("RemToken", typ66).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
OptimizeIL.Emit(OpCodes.Pop)
End If
OptimizeIL.MarkSequencePoint(doc4, 550, 1, 550, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Sub)
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc4, 551, 1, 551, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
OptimizeIL.Emit(OpCodes.Ldlen)
OptimizeIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Sub)
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc4, 552, 1, 552, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
OptimizeIL.Emit(OpCodes.Stloc, 19)
OptimizeIL.MarkSequencePoint(doc4, 553, 1, 553, 100)
Dim typ67(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(System.Type)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ67(UBound(typ67) + 1)
typ67(UBound(typ67)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ67))
Typ = Typ03.GetMethod("IsInstanceOfType", typ67).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 21)
OptimizeIL.MarkSequencePoint(doc4, 555, 1, 555, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa148 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru148 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont148 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, fa148)
OptimizeIL.Emit(OpCodes.Br, tru148)
OptimizeIL.MarkLabel(tru148)
OptimizeIL.MarkSequencePoint(doc4, 556, 1, 556, 100)
Dim locbldr185 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(Token))
locbldr185.SetLocalSymInfo("tk2")
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
OptimizeIL.Emit(OpCodes.Stloc, 25)
OptimizeIL.MarkSequencePoint(doc4, 557, 1, 557, 100)
Dim locbldr186 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(TypeTok))
locbldr186.SetLocalSymInfo("ttk2")
OptimizeIL.Emit(OpCodes.Newobj, GetType(TypeTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 26)
OptimizeIL.MarkSequencePoint(doc4, 558, 1, 558, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 26)
Typ = GetType(TypeTok)
OptimizeIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(TypeTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc4, 559, 1, 559, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 26)
Typ = GetType(TypeTok)
OptimizeIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(TypeTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc4, 560, 1, 560, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 26)
Typ = GetType(TypeTok)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stfld, GetType(TypeTok).GetField("IsByRef"))
OptimizeIL.MarkSequencePoint(doc4, 561, 1, 561, 100)
OptimizeIL.Emit(OpCodes.Br, cont148)
OptimizeIL.MarkLabel(fa148)
OptimizeIL.MarkSequencePoint(doc4, 562, 1, 562, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
OptimizeIL.Emit(OpCodes.Stloc, 26)
OptimizeIL.MarkSequencePoint(doc4, 563, 1, 563, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 26)
Typ = GetType(TypeTok)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stfld, GetType(TypeTok).GetField("IsByRef"))
OptimizeIL.MarkSequencePoint(doc4, 564, 1, 564, 100)
OptimizeIL.Emit(OpCodes.Br, cont148)
OptimizeIL.MarkLabel(cont148)
OptimizeIL.MarkSequencePoint(doc4, 565, 1, 565, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 26)
Typ = GetType(TypeTok)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Stelem, Typ.GetElementType())
OptimizeIL.MarkSequencePoint(doc4, 566, 1, 566, 100)
OptimizeIL.Emit(OpCodes.Br, label14)
OptimizeIL.MarkSequencePoint(doc4, 567, 1, 567, 100)
OptimizeIL.Emit(OpCodes.Br, cont147)
OptimizeIL.MarkLabel(fa147)
OptimizeIL.Emit(OpCodes.Br, cont147)
OptimizeIL.MarkLabel(cont147)
OptimizeIL.MarkSequencePoint(doc4, 569, 1, 569, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("ProcessTTokOnly"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("ProcessTTokOnly").FieldType
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa149 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru149 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont149 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru149)
OptimizeIL.Emit(OpCodes.Br, fa149)
OptimizeIL.MarkLabel(tru149)
OptimizeIL.MarkSequencePoint(doc4, 571, 1, 571, 100)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(DollarSign))
Dim typ68 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ68))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ68).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 20)
OptimizeIL.MarkSequencePoint(doc4, 572, 1, 572, 100)
Dim typ69(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(System.Type)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ69(UBound(typ69) + 1)
typ69(UBound(typ69)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ69))
Typ = Typ03.GetMethod("IsInstanceOfType", typ69).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 21)
OptimizeIL.MarkSequencePoint(doc4, 574, 1, 574, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa150 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru150 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont150 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru150)
OptimizeIL.Emit(OpCodes.Br, fa150)
OptimizeIL.MarkLabel(tru150)
OptimizeIL.MarkSequencePoint(doc4, 575, 1, 575, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("DurConvFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("DurConvFlag").FieldType
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("DurConvFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("DurConvFlag").FieldType
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Not)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("DurConvFlag"))
OptimizeIL.MarkSequencePoint(doc4, 576, 1, 576, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("isChanged"))
OptimizeIL.MarkSequencePoint(doc4, 577, 1, 577, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("DurConvFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("DurConvFlag").FieldType
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa151 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru151 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont151 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, fa151)
OptimizeIL.Emit(OpCodes.Br, tru151)
OptimizeIL.MarkLabel(tru151)
OptimizeIL.MarkSequencePoint(doc4, 578, 1, 578, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("ConvFlag"))
OptimizeIL.MarkSequencePoint(doc4, 579, 1, 579, 100)
Dim typ70(-1) As Type
OptimizeIL.Emit(OpCodes.Ldstr, "conv ")
Typ = GetType(System.String)
ReDim Preserve typ70(UBound(typ70) + 1)
typ70(UBound(typ70)) = Typ
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("OrdOp"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("OrdOp").FieldType
ReDim Preserve typ70(UBound(typ70) + 1)
typ70(UBound(typ70)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ70))
Typ = GetType(String).GetMethod("Concat", typ70).ReturnType
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("OrdOp"))
OptimizeIL.MarkSequencePoint(doc4, 580, 1, 580, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("OrdOp"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("OrdOp").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 22)
OptimizeIL.MarkSequencePoint(doc4, 581, 1, 581, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(System.String)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Trim", Type.EmptyTypes))
Typ = Typ03.GetMethod("Trim", Type.EmptyTypes).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 22)
OptimizeIL.MarkSequencePoint(doc4, 582, 1, 582, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(System.String)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("OrdOp"))
OptimizeIL.MarkSequencePoint(doc4, 583, 1, 583, 100)
OptimizeIL.Emit(OpCodes.Br, cont151)
OptimizeIL.MarkLabel(fa151)
OptimizeIL.Emit(OpCodes.Br, cont151)
OptimizeIL.MarkLabel(cont151)
OptimizeIL.MarkSequencePoint(doc4, 584, 1, 584, 100)
Dim typ72(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ReDim Preserve typ72(UBound(typ72) + 1)
typ72(UBound(typ72)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ72))
Typ = Typ03.GetMethod("RemToken", typ72).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
OptimizeIL.Emit(OpCodes.Pop)
End If
OptimizeIL.MarkSequencePoint(doc4, 585, 1, 585, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Sub)
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc4, 586, 1, 586, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
OptimizeIL.Emit(OpCodes.Ldlen)
OptimizeIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Sub)
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc4, 587, 1, 587, 100)
OptimizeIL.Emit(OpCodes.Br, label14)
OptimizeIL.MarkSequencePoint(doc4, 588, 1, 588, 100)
OptimizeIL.Emit(OpCodes.Br, cont150)
OptimizeIL.MarkLabel(fa150)
OptimizeIL.Emit(OpCodes.Br, cont150)
OptimizeIL.MarkLabel(cont150)
OptimizeIL.MarkSequencePoint(doc4, 590, 1, 590, 100)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(TypeTok))
Dim typ73 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ73))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ73).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 20)
OptimizeIL.MarkSequencePoint(doc4, 591, 1, 591, 100)
Dim typ74(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(System.Type)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ74(UBound(typ74) + 1)
typ74(UBound(typ74)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ74))
Typ = Typ03.GetMethod("IsInstanceOfType", typ74).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 21)
OptimizeIL.MarkSequencePoint(doc4, 593, 1, 593, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa152 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru152 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont152 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru152)
OptimizeIL.Emit(OpCodes.Br, fa152)
OptimizeIL.MarkLabel(tru152)
OptimizeIL.MarkSequencePoint(doc4, 594, 1, 594, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("DurConvFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("DurConvFlag").FieldType
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa153 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru153 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont153 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, fa153)
OptimizeIL.Emit(OpCodes.Br, tru153)
OptimizeIL.MarkLabel(tru153)
OptimizeIL.MarkSequencePoint(doc4, 595, 1, 595, 100)
Dim locbldr187 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(TypeTok))
locbldr187.SetLocalSymInfo("tt1")
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
OptimizeIL.Emit(OpCodes.Stloc, 27)
OptimizeIL.MarkSequencePoint(doc4, 596, 1, 596, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 27)
Typ = GetType(TypeTok)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("ConvTyp"))
OptimizeIL.MarkSequencePoint(doc4, 597, 1, 597, 100)
Dim typ75(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ReDim Preserve typ75(UBound(typ75) + 1)
typ75(UBound(typ75)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ75))
Typ = Typ03.GetMethod("RemToken", typ75).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
OptimizeIL.Emit(OpCodes.Pop)
End If
OptimizeIL.MarkSequencePoint(doc4, 598, 1, 598, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Sub)
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc4, 599, 1, 599, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
OptimizeIL.Emit(OpCodes.Ldlen)
OptimizeIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Sub)
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc4, 600, 1, 600, 100)
OptimizeIL.Emit(OpCodes.Br, cont153)
OptimizeIL.MarkLabel(fa153)
OptimizeIL.MarkSequencePoint(doc4, 601, 1, 601, 100)
OptimizeIL.Emit(OpCodes.Br, cont153)
OptimizeIL.MarkLabel(cont153)
OptimizeIL.MarkSequencePoint(doc4, 602, 1, 602, 100)
OptimizeIL.Emit(OpCodes.Br, label14)
OptimizeIL.MarkSequencePoint(doc4, 603, 1, 603, 100)
OptimizeIL.Emit(OpCodes.Br, cont152)
OptimizeIL.MarkLabel(fa152)
OptimizeIL.Emit(OpCodes.Br, cont152)
OptimizeIL.MarkLabel(cont152)
OptimizeIL.MarkSequencePoint(doc4, 605, 1, 605, 100)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(Ident))
Dim typ76 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ76))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ76).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 20)
OptimizeIL.MarkSequencePoint(doc4, 606, 1, 606, 100)
Dim typ77(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(System.Type)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ77(UBound(typ77) + 1)
typ77(UBound(typ77)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ77))
Typ = Typ03.GetMethod("IsInstanceOfType", typ77).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 21)
OptimizeIL.MarkSequencePoint(doc4, 608, 1, 608, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa154 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru154 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont154 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru154)
OptimizeIL.Emit(OpCodes.Br, fa154)
OptimizeIL.MarkLabel(tru154)
OptimizeIL.MarkSequencePoint(doc4, 609, 1, 609, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("MetCallFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("MetCallFlag").FieldType
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IdentFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IdentFlag").FieldType
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("StringFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("StringFlag").FieldType
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 21)
OptimizeIL.MarkSequencePoint(doc4, 610, 1, 610, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa155 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru155 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont155 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru155)
OptimizeIL.Emit(OpCodes.Br, fa155)
OptimizeIL.MarkLabel(tru155)
OptimizeIL.MarkSequencePoint(doc4, 611, 1, 611, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc4, 612, 1, 612, 100)
OptimizeIL.Emit(OpCodes.Br, cont155)
OptimizeIL.MarkLabel(fa155)
OptimizeIL.Emit(OpCodes.Br, cont155)
OptimizeIL.MarkLabel(cont155)
OptimizeIL.MarkSequencePoint(doc4, 613, 1, 613, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IdentFlag"))
OptimizeIL.MarkSequencePoint(doc4, 614, 1, 614, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("isChanged"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("isChanged").FieldType
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa156 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru156 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont156 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru156)
OptimizeIL.Emit(OpCodes.Br, fa156)
OptimizeIL.MarkLabel(tru156)
OptimizeIL.MarkSequencePoint(doc4, 615, 1, 615, 100)
Dim locbldr188 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(Ident))
locbldr188.SetLocalSymInfo("id1")
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
OptimizeIL.Emit(OpCodes.Stloc, 28)
OptimizeIL.MarkSequencePoint(doc4, 616, 1, 616, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
Typ02 = Typ
Dim typ78(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(Ident)
ReDim Preserve typ78(UBound(typ78) + 1)
typ78(UBound(typ78)) = Typ
OptimizeIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("UpdateIdent", typ78))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("UpdateIdent", typ78).ReturnType
Typ = Typ02
OptimizeIL.Emit(OpCodes.Stelem, Typ.GetElementType())
OptimizeIL.MarkSequencePoint(doc4, 617, 1, 617, 100)
OptimizeIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("SetUnaryFalse", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("SetUnaryFalse", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
OptimizeIL.Emit(OpCodes.Pop)
End If
OptimizeIL.MarkSequencePoint(doc4, 618, 1, 618, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc4, 619, 1, 619, 100)
OptimizeIL.Emit(OpCodes.Br, cont156)
OptimizeIL.MarkLabel(fa156)
OptimizeIL.Emit(OpCodes.Br, cont156)
OptimizeIL.MarkLabel(cont156)
OptimizeIL.MarkSequencePoint(doc4, 620, 1, 620, 100)
OptimizeIL.Emit(OpCodes.Br, label14)
OptimizeIL.MarkSequencePoint(doc4, 621, 1, 621, 100)
OptimizeIL.Emit(OpCodes.Br, cont154)
OptimizeIL.MarkLabel(fa154)
OptimizeIL.Emit(OpCodes.Br, cont154)
OptimizeIL.MarkLabel(cont154)
OptimizeIL.MarkSequencePoint(doc4, 623, 1, 623, 100)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(CharLiteral))
Dim typ79 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ79))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ79).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 20)
OptimizeIL.MarkSequencePoint(doc4, 624, 1, 624, 100)
Dim typ80(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(System.Type)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ80(UBound(typ80) + 1)
typ80(UBound(typ80)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ80))
Typ = Typ03.GetMethod("IsInstanceOfType", typ80).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 21)
OptimizeIL.MarkSequencePoint(doc4, 626, 1, 626, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa157 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru157 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont157 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru157)
OptimizeIL.Emit(OpCodes.Br, fa157)
OptimizeIL.MarkLabel(tru157)
OptimizeIL.MarkSequencePoint(doc4, 627, 1, 627, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("isChanged"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("isChanged").FieldType
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa158 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru158 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont158 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru158)
OptimizeIL.Emit(OpCodes.Br, fa158)
OptimizeIL.MarkLabel(tru158)
OptimizeIL.MarkSequencePoint(doc4, 628, 1, 628, 100)
Dim locbldr189 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(CharLiteral))
locbldr189.SetLocalSymInfo("cl1")
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
OptimizeIL.Emit(OpCodes.Stloc, 29)
OptimizeIL.MarkSequencePoint(doc4, 629, 1, 629, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
Typ02 = Typ
Dim typ81(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 29)
Typ = GetType(CharLiteral)
ReDim Preserve typ81(UBound(typ81) + 1)
typ81(UBound(typ81)) = Typ
OptimizeIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("UpdateCharLit", typ81))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("UpdateCharLit", typ81).ReturnType
Typ = Typ02
OptimizeIL.Emit(OpCodes.Stelem, Typ.GetElementType())
OptimizeIL.MarkSequencePoint(doc4, 630, 1, 630, 100)
OptimizeIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("SetUnaryFalse", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("SetUnaryFalse", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
OptimizeIL.Emit(OpCodes.Pop)
End If
OptimizeIL.MarkSequencePoint(doc4, 631, 1, 631, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc4, 632, 1, 632, 100)
OptimizeIL.Emit(OpCodes.Br, cont158)
OptimizeIL.MarkLabel(fa158)
OptimizeIL.Emit(OpCodes.Br, cont158)
OptimizeIL.MarkLabel(cont158)
OptimizeIL.MarkSequencePoint(doc4, 633, 1, 633, 100)
OptimizeIL.Emit(OpCodes.Br, label14)
OptimizeIL.MarkSequencePoint(doc4, 634, 1, 634, 100)
OptimizeIL.Emit(OpCodes.Br, cont157)
OptimizeIL.MarkLabel(fa157)
OptimizeIL.Emit(OpCodes.Br, cont157)
OptimizeIL.MarkLabel(cont157)
OptimizeIL.MarkSequencePoint(doc4, 636, 1, 636, 100)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(NullLiteral))
Dim typ82 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ82))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ82).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 20)
OptimizeIL.MarkSequencePoint(doc4, 637, 1, 637, 100)
Dim typ83(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(System.Type)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ83(UBound(typ83) + 1)
typ83(UBound(typ83)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ83))
Typ = Typ03.GetMethod("IsInstanceOfType", typ83).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 21)
OptimizeIL.MarkSequencePoint(doc4, 639, 1, 639, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa159 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru159 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont159 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru159)
OptimizeIL.Emit(OpCodes.Br, fa159)
OptimizeIL.MarkLabel(tru159)
OptimizeIL.MarkSequencePoint(doc4, 640, 1, 640, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("isChanged"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("isChanged").FieldType
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa160 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru160 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont160 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru160)
OptimizeIL.Emit(OpCodes.Br, fa160)
OptimizeIL.MarkLabel(tru160)
OptimizeIL.MarkSequencePoint(doc4, 641, 1, 641, 100)
Dim locbldr190 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(NullLiteral))
locbldr190.SetLocalSymInfo("nul1")
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
OptimizeIL.Emit(OpCodes.Stloc, 30)
OptimizeIL.MarkSequencePoint(doc4, 642, 1, 642, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
Typ02 = Typ
Dim typ84(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 30)
Typ = GetType(NullLiteral)
ReDim Preserve typ84(UBound(typ84) + 1)
typ84(UBound(typ84)) = Typ
OptimizeIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("UpdateNullLit", typ84))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("UpdateNullLit", typ84).ReturnType
Typ = Typ02
OptimizeIL.Emit(OpCodes.Stelem, Typ.GetElementType())
OptimizeIL.MarkSequencePoint(doc4, 643, 1, 643, 100)
OptimizeIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("SetUnaryFalse", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("SetUnaryFalse", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
OptimizeIL.Emit(OpCodes.Pop)
End If
OptimizeIL.MarkSequencePoint(doc4, 644, 1, 644, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc4, 645, 1, 645, 100)
OptimizeIL.Emit(OpCodes.Br, cont160)
OptimizeIL.MarkLabel(fa160)
OptimizeIL.Emit(OpCodes.Br, cont160)
OptimizeIL.MarkLabel(cont160)
OptimizeIL.MarkSequencePoint(doc4, 646, 1, 646, 100)
OptimizeIL.Emit(OpCodes.Br, label14)
OptimizeIL.MarkSequencePoint(doc4, 647, 1, 647, 100)
OptimizeIL.Emit(OpCodes.Br, cont159)
OptimizeIL.MarkLabel(fa159)
OptimizeIL.Emit(OpCodes.Br, cont159)
OptimizeIL.MarkLabel(cont159)
OptimizeIL.MarkSequencePoint(doc4, 649, 1, 649, 100)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(StringLiteral))
Dim typ85 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ85))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ85).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 20)
OptimizeIL.MarkSequencePoint(doc4, 650, 1, 650, 100)
Dim typ86(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(System.Type)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ86(UBound(typ86) + 1)
typ86(UBound(typ86)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ86))
Typ = Typ03.GetMethod("IsInstanceOfType", typ86).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 21)
OptimizeIL.MarkSequencePoint(doc4, 652, 1, 652, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa161 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru161 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont161 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru161)
OptimizeIL.Emit(OpCodes.Br, fa161)
OptimizeIL.MarkLabel(tru161)
OptimizeIL.MarkSequencePoint(doc4, 653, 1, 653, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("StringFlag"))
OptimizeIL.MarkSequencePoint(doc4, 654, 1, 654, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("isChanged"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("isChanged").FieldType
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa162 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru162 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont162 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru162)
OptimizeIL.Emit(OpCodes.Br, fa162)
OptimizeIL.MarkLabel(tru162)
OptimizeIL.MarkSequencePoint(doc4, 655, 1, 655, 100)
Dim locbldr191 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(StringLiteral))
locbldr191.SetLocalSymInfo("sl1")
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
OptimizeIL.Emit(OpCodes.Stloc, 31)
OptimizeIL.MarkSequencePoint(doc4, 656, 1, 656, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
Typ02 = Typ
Dim typ87(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(StringLiteral)
ReDim Preserve typ87(UBound(typ87) + 1)
typ87(UBound(typ87)) = Typ
OptimizeIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("UpdateStringLit", typ87))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("UpdateStringLit", typ87).ReturnType
Typ = Typ02
OptimizeIL.Emit(OpCodes.Stelem, Typ.GetElementType())
OptimizeIL.MarkSequencePoint(doc4, 657, 1, 657, 100)
OptimizeIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("SetUnaryFalse", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("SetUnaryFalse", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
OptimizeIL.Emit(OpCodes.Pop)
End If
OptimizeIL.MarkSequencePoint(doc4, 658, 1, 658, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc4, 659, 1, 659, 100)
OptimizeIL.Emit(OpCodes.Br, cont162)
OptimizeIL.MarkLabel(fa162)
OptimizeIL.Emit(OpCodes.Br, cont162)
OptimizeIL.MarkLabel(cont162)
OptimizeIL.MarkSequencePoint(doc4, 660, 1, 660, 100)
OptimizeIL.Emit(OpCodes.Br, label14)
OptimizeIL.MarkSequencePoint(doc4, 661, 1, 661, 100)
OptimizeIL.Emit(OpCodes.Br, cont161)
OptimizeIL.MarkLabel(fa161)
OptimizeIL.Emit(OpCodes.Br, cont161)
OptimizeIL.MarkLabel(cont161)
OptimizeIL.MarkSequencePoint(doc4, 663, 1, 663, 100)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(BooleanLiteral))
Dim typ88 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ88))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ88).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 20)
OptimizeIL.MarkSequencePoint(doc4, 664, 1, 664, 100)
Dim typ89(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(System.Type)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ89(UBound(typ89) + 1)
typ89(UBound(typ89)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ89))
Typ = Typ03.GetMethod("IsInstanceOfType", typ89).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 21)
OptimizeIL.MarkSequencePoint(doc4, 666, 1, 666, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa163 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru163 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont163 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru163)
OptimizeIL.Emit(OpCodes.Br, fa163)
OptimizeIL.MarkLabel(tru163)
OptimizeIL.MarkSequencePoint(doc4, 667, 1, 667, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("isChanged"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("isChanged").FieldType
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa164 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru164 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont164 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru164)
OptimizeIL.Emit(OpCodes.Br, fa164)
OptimizeIL.MarkLabel(tru164)
OptimizeIL.MarkSequencePoint(doc4, 668, 1, 668, 100)
Dim locbldr192 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(BooleanLiteral))
locbldr192.SetLocalSymInfo("bl1")
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
OptimizeIL.Emit(OpCodes.Stloc, 32)
OptimizeIL.MarkSequencePoint(doc4, 669, 1, 669, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
Typ02 = Typ
Dim typ90(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 32)
Typ = GetType(BooleanLiteral)
ReDim Preserve typ90(UBound(typ90) + 1)
typ90(UBound(typ90)) = Typ
OptimizeIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("UpdateBoolLit", typ90))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("UpdateBoolLit", typ90).ReturnType
Typ = Typ02
OptimizeIL.Emit(OpCodes.Stelem, Typ.GetElementType())
OptimizeIL.MarkSequencePoint(doc4, 670, 1, 670, 100)
OptimizeIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("SetUnaryFalse", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("SetUnaryFalse", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
OptimizeIL.Emit(OpCodes.Pop)
End If
OptimizeIL.MarkSequencePoint(doc4, 671, 1, 671, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc4, 672, 1, 672, 100)
OptimizeIL.Emit(OpCodes.Br, cont164)
OptimizeIL.MarkLabel(fa164)
OptimizeIL.Emit(OpCodes.Br, cont164)
OptimizeIL.MarkLabel(cont164)
OptimizeIL.MarkSequencePoint(doc4, 673, 1, 673, 100)
OptimizeIL.Emit(OpCodes.Br, label14)
OptimizeIL.MarkSequencePoint(doc4, 674, 1, 674, 100)
OptimizeIL.Emit(OpCodes.Br, cont163)
OptimizeIL.MarkLabel(fa163)
OptimizeIL.Emit(OpCodes.Br, cont163)
OptimizeIL.MarkLabel(cont163)
OptimizeIL.MarkSequencePoint(doc4, 676, 1, 676, 100)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(NumberLiteral))
Dim typ91 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ91))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ91).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 20)
OptimizeIL.MarkSequencePoint(doc4, 677, 1, 677, 100)
Dim typ92(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(System.Type)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ92(UBound(typ92) + 1)
typ92(UBound(typ92)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ92))
Typ = Typ03.GetMethod("IsInstanceOfType", typ92).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 21)
OptimizeIL.MarkSequencePoint(doc4, 679, 1, 679, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa165 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru165 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont165 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru165)
OptimizeIL.Emit(OpCodes.Br, fa165)
OptimizeIL.MarkLabel(tru165)
OptimizeIL.MarkSequencePoint(doc4, 680, 1, 680, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("isChanged"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("isChanged").FieldType
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa166 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru166 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont166 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru166)
OptimizeIL.Emit(OpCodes.Br, fa166)
OptimizeIL.MarkLabel(tru166)
OptimizeIL.MarkSequencePoint(doc4, 681, 1, 681, 100)
Dim locbldr193 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(NumberLiteral))
locbldr193.SetLocalSymInfo("nl1")
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
OptimizeIL.Emit(OpCodes.Stloc, 33)
OptimizeIL.MarkSequencePoint(doc4, 682, 1, 682, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
Typ02 = Typ
Dim typ93(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 33)
Typ = GetType(NumberLiteral)
ReDim Preserve typ93(UBound(typ93) + 1)
typ93(UBound(typ93)) = Typ
OptimizeIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("UpdateNumLit", typ93))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("UpdateNumLit", typ93).ReturnType
Typ = Typ02
OptimizeIL.Emit(OpCodes.Stelem, Typ.GetElementType())
OptimizeIL.MarkSequencePoint(doc4, 683, 1, 683, 100)
OptimizeIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("SetUnaryFalse", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetMethod("SetUnaryFalse", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
OptimizeIL.Emit(OpCodes.Pop)
End If
OptimizeIL.MarkSequencePoint(doc4, 684, 1, 684, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc4, 685, 1, 685, 100)
OptimizeIL.Emit(OpCodes.Br, cont166)
OptimizeIL.MarkLabel(fa166)
OptimizeIL.Emit(OpCodes.Br, cont166)
OptimizeIL.MarkLabel(cont166)
OptimizeIL.MarkSequencePoint(doc4, 686, 1, 686, 100)
OptimizeIL.Emit(OpCodes.Br, label14)
OptimizeIL.MarkSequencePoint(doc4, 687, 1, 687, 100)
OptimizeIL.Emit(OpCodes.Br, cont165)
OptimizeIL.MarkLabel(fa165)
OptimizeIL.Emit(OpCodes.Br, cont165)
OptimizeIL.MarkLabel(cont165)
OptimizeIL.MarkSequencePoint(doc4, 689, 1, 689, 100)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(NewTok))
Dim typ94 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ94))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ94).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 20)
OptimizeIL.MarkSequencePoint(doc4, 690, 1, 690, 100)
Dim typ95(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(System.Type)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ95(UBound(typ95) + 1)
typ95(UBound(typ95)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ95))
Typ = Typ03.GetMethod("IsInstanceOfType", typ95).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 21)
OptimizeIL.MarkSequencePoint(doc4, 692, 1, 692, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa167 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru167 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont167 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru167)
OptimizeIL.Emit(OpCodes.Br, fa167)
OptimizeIL.MarkLabel(tru167)
OptimizeIL.MarkSequencePoint(doc4, 694, 1, 694, 100)
Dim typ96(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ReDim Preserve typ96(UBound(typ96) + 1)
typ96(UBound(typ96)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ96))
Typ = Typ03.GetMethod("RemToken", typ96).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
OptimizeIL.Emit(OpCodes.Pop)
End If
OptimizeIL.MarkSequencePoint(doc4, 695, 1, 695, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Sub)
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc4, 697, 1, 697, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
OptimizeIL.Emit(OpCodes.Stloc, 9)
OptimizeIL.MarkSequencePoint(doc4, 699, 1, 699, 100)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(TypeTok))
Dim typ97 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ97))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ97).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 20)
OptimizeIL.MarkSequencePoint(doc4, 700, 1, 700, 100)
Dim typ98(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(System.Type)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ98(UBound(typ98) + 1)
typ98(UBound(typ98)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ98))
Typ = Typ03.GetMethod("IsInstanceOfType", typ98).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 21)
OptimizeIL.MarkSequencePoint(doc4, 702, 1, 702, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa168 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru168 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont168 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, fa168)
OptimizeIL.Emit(OpCodes.Br, tru168)
OptimizeIL.MarkLabel(tru168)
OptimizeIL.MarkSequencePoint(doc4, 703, 1, 703, 100)
OptimizeIL.Emit(OpCodes.Newobj, GetType(TypeTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 10)
OptimizeIL.MarkSequencePoint(doc4, 704, 1, 704, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
OptimizeIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(TypeTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc4, 705, 1, 705, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
OptimizeIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(TypeTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc4, 706, 1, 706, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Stelem, Typ.GetElementType())
OptimizeIL.MarkSequencePoint(doc4, 707, 1, 707, 100)
OptimizeIL.Emit(OpCodes.Br, cont168)
OptimizeIL.MarkLabel(fa168)
OptimizeIL.Emit(OpCodes.Br, cont168)
OptimizeIL.MarkLabel(cont168)
OptimizeIL.MarkSequencePoint(doc4, 709, 1, 709, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ99(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ReDim Preserve typ99(UBound(typ99) + 1)
typ99(UBound(typ99)) = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ReDim Preserve typ99(UBound(typ99) + 1)
typ99(UBound(typ99)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, procNewCall)
Typ = procNewCall.ReturnType
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc4, 710, 1, 710, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
OptimizeIL.Emit(OpCodes.Ldlen)
OptimizeIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Sub)
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc4, 712, 1, 712, 100)
Dim locbldr194 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(NewCallTok))
locbldr194.SetLocalSymInfo("nctoken")
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
OptimizeIL.Emit(OpCodes.Stloc, 34)
OptimizeIL.MarkSequencePoint(doc4, 713, 1, 713, 100)
Dim locbldr195 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(Expr).MakeArrayType())
locbldr195.SetLocalSymInfo("ncprs")
OptimizeIL.Emit(OpCodes.Ldloc, 34)
Typ = GetType(NewCallTok)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(NewCallTok).GetField("Params"))
Typ = GetType(NewCallTok).GetField("Params").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 35)
OptimizeIL.MarkSequencePoint(doc4, 714, 1, 714, 100)
Dim locbldr196 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.Int32))
locbldr196.SetLocalSymInfo("ncln2")
OptimizeIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(Expr).MakeArrayType()
OptimizeIL.Emit(OpCodes.Ldlen)
OptimizeIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Sub)
OptimizeIL.Emit(OpCodes.Stloc, 36)
OptimizeIL.MarkSequencePoint(doc4, 716, 1, 716, 100)
Dim locbldr197 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.Int32))
locbldr197.SetLocalSymInfo("nci2")
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Stloc, 37)
OptimizeIL.MarkSequencePoint(doc4, 717, 1, 717, 100)
Dim label15 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.MarkSequencePoint(doc4, 718, 1, 718, 100)
Dim label16 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.MarkSequencePoint(doc4, 720, 1, 720, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 36)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa169 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru169 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont169 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Blt, tru169)
OptimizeIL.Emit(OpCodes.Br, fa169)
OptimizeIL.MarkLabel(tru169)
OptimizeIL.MarkSequencePoint(doc4, 721, 1, 721, 100)
OptimizeIL.Emit(OpCodes.Br, label16)
OptimizeIL.MarkSequencePoint(doc4, 722, 1, 722, 100)
OptimizeIL.Emit(OpCodes.Br, cont169)
OptimizeIL.MarkLabel(fa169)
OptimizeIL.Emit(OpCodes.Br, cont169)
OptimizeIL.MarkLabel(cont169)
OptimizeIL.MarkSequencePoint(doc4, 724, 1, 724, 100)
OptimizeIL.MarkLabel(label15)
OptimizeIL.MarkSequencePoint(doc4, 725, 1, 725, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 37)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Add)
OptimizeIL.Emit(OpCodes.Stloc, 37)
OptimizeIL.MarkSequencePoint(doc4, 726, 1, 726, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(Expr).MakeArrayType()
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 37)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ100(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(Expr).MakeArrayType()
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 37)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, GetType(Expr).MakeArrayType().GetElementType())
Typ = GetType(Expr).MakeArrayType().GetElementType()
ReDim Preserve typ100(UBound(typ100) + 1)
typ100(UBound(typ100)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Optimize)
Typ = Optimize.ReturnType
OptimizeIL.Emit(OpCodes.Stelem, GetType(Expr).MakeArrayType().GetElementType())
OptimizeIL.MarkSequencePoint(doc4, 728, 1, 728, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 37)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldloc, 36)
Typ = GetType(System.Int32)
Dim fa170 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru170 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont170 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru170)
OptimizeIL.Emit(OpCodes.Br, fa170)
OptimizeIL.MarkLabel(tru170)
OptimizeIL.MarkSequencePoint(doc4, 729, 1, 729, 100)
OptimizeIL.Emit(OpCodes.Br, label16)
OptimizeIL.MarkSequencePoint(doc4, 730, 1, 730, 100)
OptimizeIL.Emit(OpCodes.Br, cont170)
OptimizeIL.MarkLabel(fa170)
OptimizeIL.MarkSequencePoint(doc4, 731, 1, 731, 100)
OptimizeIL.Emit(OpCodes.Br, label15)
OptimizeIL.MarkSequencePoint(doc4, 732, 1, 732, 100)
OptimizeIL.Emit(OpCodes.Br, cont170)
OptimizeIL.MarkLabel(cont170)
OptimizeIL.MarkSequencePoint(doc4, 734, 1, 734, 100)
OptimizeIL.MarkLabel(label16)
OptimizeIL.MarkSequencePoint(doc4, 736, 1, 736, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 34)
Typ = GetType(NewCallTok)
OptimizeIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(Expr).MakeArrayType()
OptimizeIL.Emit(OpCodes.Stfld, GetType(NewCallTok).GetField("Params"))
OptimizeIL.MarkSequencePoint(doc4, 738, 1, 738, 100)
OptimizeIL.Emit(OpCodes.Br, label14)
OptimizeIL.MarkSequencePoint(doc4, 739, 1, 739, 100)
OptimizeIL.Emit(OpCodes.Br, cont167)
OptimizeIL.MarkLabel(fa167)
OptimizeIL.Emit(OpCodes.Br, cont167)
OptimizeIL.MarkLabel(cont167)
OptimizeIL.MarkSequencePoint(doc4, 741, 1, 741, 100)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(GettypeTok))
Dim typ101 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ101))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ101).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 20)
OptimizeIL.MarkSequencePoint(doc4, 742, 1, 742, 100)
Dim typ102(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(System.Type)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ102(UBound(typ102) + 1)
typ102(UBound(typ102)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ102))
Typ = Typ03.GetMethod("IsInstanceOfType", typ102).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 21)
OptimizeIL.MarkSequencePoint(doc4, 744, 1, 744, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa171 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru171 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont171 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru171)
OptimizeIL.Emit(OpCodes.Br, fa171)
OptimizeIL.MarkLabel(tru171)
OptimizeIL.MarkSequencePoint(doc4, 746, 1, 746, 100)
Dim typ103(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ReDim Preserve typ103(UBound(typ103) + 1)
typ103(UBound(typ103)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ103))
Typ = Typ03.GetMethod("RemToken", typ103).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
OptimizeIL.Emit(OpCodes.Pop)
End If
OptimizeIL.MarkSequencePoint(doc4, 747, 1, 747, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Sub)
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc4, 749, 1, 749, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
OptimizeIL.Emit(OpCodes.Stloc, 11)
OptimizeIL.MarkSequencePoint(doc4, 751, 1, 751, 100)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(TypeTok))
Dim typ104 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ104))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ104).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 20)
OptimizeIL.MarkSequencePoint(doc4, 752, 1, 752, 100)
Dim typ105(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(System.Type)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ105(UBound(typ105) + 1)
typ105(UBound(typ105)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ105))
Typ = Typ03.GetMethod("IsInstanceOfType", typ105).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 21)
OptimizeIL.MarkSequencePoint(doc4, 754, 1, 754, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa172 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru172 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont172 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, fa172)
OptimizeIL.Emit(OpCodes.Br, tru172)
OptimizeIL.MarkLabel(tru172)
OptimizeIL.MarkSequencePoint(doc4, 755, 1, 755, 100)
OptimizeIL.Emit(OpCodes.Newobj, GetType(TypeTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 12)
OptimizeIL.MarkSequencePoint(doc4, 756, 1, 756, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(TypeTok)
OptimizeIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(TypeTok).GetField("Line"))
OptimizeIL.MarkSequencePoint(doc4, 757, 1, 757, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(TypeTok)
OptimizeIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stfld, GetType(TypeTok).GetField("Value"))
OptimizeIL.MarkSequencePoint(doc4, 758, 1, 758, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(TypeTok)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Stelem, Typ.GetElementType())
OptimizeIL.MarkSequencePoint(doc4, 759, 1, 759, 100)
OptimizeIL.Emit(OpCodes.Br, cont172)
OptimizeIL.MarkLabel(fa172)
OptimizeIL.Emit(OpCodes.Br, cont172)
OptimizeIL.MarkLabel(cont172)
OptimizeIL.MarkSequencePoint(doc4, 761, 1, 761, 100)
Dim locbldr198 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(GettypeCallTok))
locbldr198.SetLocalSymInfo("gtctoken")
OptimizeIL.Emit(OpCodes.Newobj, GetType(GettypeCallTok).GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 38)
OptimizeIL.MarkSequencePoint(doc4, 762, 1, 762, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(GettypeCallTok)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
OptimizeIL.Emit(OpCodes.Stfld, GetType(GettypeCallTok).GetField("Name"))
OptimizeIL.MarkSequencePoint(doc4, 763, 1, 763, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(GettypeCallTok)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Stelem, Typ.GetElementType())
OptimizeIL.MarkSequencePoint(doc4, 765, 1, 765, 100)
OptimizeIL.Emit(OpCodes.Br, label14)
OptimizeIL.MarkSequencePoint(doc4, 766, 1, 766, 100)
OptimizeIL.Emit(OpCodes.Br, cont171)
OptimizeIL.MarkLabel(fa171)
OptimizeIL.Emit(OpCodes.Br, cont171)
OptimizeIL.MarkLabel(cont171)
OptimizeIL.MarkSequencePoint(doc4, 769, 1, 769, 100)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(LParen))
Dim typ106 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ106))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ106).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 20)
OptimizeIL.MarkSequencePoint(doc4, 770, 1, 770, 100)
Dim typ107(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(System.Type)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ107(UBound(typ107) + 1)
typ107(UBound(typ107)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ107))
Typ = Typ03.GetMethod("IsInstanceOfType", typ107).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 21)
OptimizeIL.MarkSequencePoint(doc4, 772, 1, 772, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa173 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru173 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont173 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru173)
OptimizeIL.Emit(OpCodes.Br, fa173)
OptimizeIL.MarkLabel(tru173)
OptimizeIL.MarkSequencePoint(doc4, 773, 1, 773, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("MetCallFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("MetCallFlag").FieldType
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("StringFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("StringFlag").FieldType
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IdentFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IdentFlag").FieldType
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 21)
OptimizeIL.MarkSequencePoint(doc4, 774, 1, 774, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IdentFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IdentFlag").FieldType
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa174 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru174 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont174 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru174)
OptimizeIL.Emit(OpCodes.Br, fa174)
OptimizeIL.MarkLabel(tru174)
OptimizeIL.MarkSequencePoint(doc4, 775, 1, 775, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IdentFlag"))
OptimizeIL.MarkSequencePoint(doc4, 776, 1, 776, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa175 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru175 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont175 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru175)
OptimizeIL.Emit(OpCodes.Br, fa175)
OptimizeIL.MarkLabel(tru175)
OptimizeIL.MarkSequencePoint(doc4, 777, 1, 777, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc4, 778, 1, 778, 100)
OptimizeIL.Emit(OpCodes.Br, cont175)
OptimizeIL.MarkLabel(fa175)
OptimizeIL.Emit(OpCodes.Br, cont175)
OptimizeIL.MarkLabel(cont175)
OptimizeIL.MarkSequencePoint(doc4, 779, 1, 779, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("MetCallFlag"))
OptimizeIL.MarkSequencePoint(doc4, 780, 1, 780, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ108(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ReDim Preserve typ108(UBound(typ108) + 1)
typ108(UBound(typ108)) = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ReDim Preserve typ108(UBound(typ108) + 1)
typ108(UBound(typ108)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, procMethodCall)
Typ = procMethodCall.ReturnType
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc4, 781, 1, 781, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Sub)
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc4, 782, 1, 782, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
OptimizeIL.Emit(OpCodes.Ldlen)
OptimizeIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Sub)
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc4, 784, 1, 784, 100)
Dim locbldr199 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(MethodCallTok))
locbldr199.SetLocalSymInfo("mct")
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
OptimizeIL.Emit(OpCodes.Stloc, 39)
OptimizeIL.MarkSequencePoint(doc4, 785, 1, 785, 100)
Dim locbldr200 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(Expr).MakeArrayType())
locbldr200.SetLocalSymInfo("prs")
OptimizeIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(MethodCallTok)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(MethodCallTok).GetField("Params"))
Typ = GetType(MethodCallTok).GetField("Params").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 40)
OptimizeIL.MarkSequencePoint(doc4, 786, 1, 786, 100)
Dim locbldr201 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.Int32))
locbldr201.SetLocalSymInfo("ln2")
OptimizeIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(Expr).MakeArrayType()
OptimizeIL.Emit(OpCodes.Ldlen)
OptimizeIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Sub)
OptimizeIL.Emit(OpCodes.Stloc, 41)
OptimizeIL.MarkSequencePoint(doc4, 788, 1, 788, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("MetCallFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("MetCallFlag").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 5)
OptimizeIL.MarkSequencePoint(doc4, 789, 1, 789, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IdentFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IdentFlag").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 6)
OptimizeIL.MarkSequencePoint(doc4, 790, 1, 790, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("StringFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("StringFlag").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 7)
OptimizeIL.MarkSequencePoint(doc4, 792, 1, 792, 100)
Dim locbldr202 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.Int32))
locbldr202.SetLocalSymInfo("i2")
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Stloc, 42)
OptimizeIL.MarkSequencePoint(doc4, 793, 1, 793, 100)
Dim label17 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.MarkSequencePoint(doc4, 794, 1, 794, 100)
Dim label18 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.MarkSequencePoint(doc4, 796, 1, 796, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa176 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru176 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont176 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Blt, tru176)
OptimizeIL.Emit(OpCodes.Br, fa176)
OptimizeIL.MarkLabel(tru176)
OptimizeIL.MarkSequencePoint(doc4, 797, 1, 797, 100)
OptimizeIL.Emit(OpCodes.Br, label18)
OptimizeIL.MarkSequencePoint(doc4, 798, 1, 798, 100)
OptimizeIL.Emit(OpCodes.Br, cont176)
OptimizeIL.MarkLabel(fa176)
OptimizeIL.Emit(OpCodes.Br, cont176)
OptimizeIL.MarkLabel(cont176)
OptimizeIL.MarkSequencePoint(doc4, 800, 1, 800, 100)
OptimizeIL.MarkLabel(label17)
OptimizeIL.MarkSequencePoint(doc4, 801, 1, 801, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Add)
OptimizeIL.Emit(OpCodes.Stloc, 42)
OptimizeIL.MarkSequencePoint(doc4, 802, 1, 802, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("MetCallFlag"))
OptimizeIL.MarkSequencePoint(doc4, 803, 1, 803, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IdentFlag"))
OptimizeIL.MarkSequencePoint(doc4, 804, 1, 804, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("StringFlag"))
OptimizeIL.MarkSequencePoint(doc4, 805, 1, 805, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(Expr).MakeArrayType()
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ109(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(Expr).MakeArrayType()
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, GetType(Expr).MakeArrayType().GetElementType())
Typ = GetType(Expr).MakeArrayType().GetElementType()
ReDim Preserve typ109(UBound(typ109) + 1)
typ109(UBound(typ109)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Optimize)
Typ = Optimize.ReturnType
OptimizeIL.Emit(OpCodes.Stelem, GetType(Expr).MakeArrayType().GetElementType())
OptimizeIL.MarkSequencePoint(doc4, 807, 1, 807, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(System.Int32)
Dim fa177 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru177 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont177 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru177)
OptimizeIL.Emit(OpCodes.Br, fa177)
OptimizeIL.MarkLabel(tru177)
OptimizeIL.MarkSequencePoint(doc4, 808, 1, 808, 100)
OptimizeIL.Emit(OpCodes.Br, label18)
OptimizeIL.MarkSequencePoint(doc4, 809, 1, 809, 100)
OptimizeIL.Emit(OpCodes.Br, cont177)
OptimizeIL.MarkLabel(fa177)
OptimizeIL.MarkSequencePoint(doc4, 810, 1, 810, 100)
OptimizeIL.Emit(OpCodes.Br, label17)
OptimizeIL.MarkSequencePoint(doc4, 811, 1, 811, 100)
OptimizeIL.Emit(OpCodes.Br, cont177)
OptimizeIL.MarkLabel(cont177)
OptimizeIL.MarkSequencePoint(doc4, 813, 1, 813, 100)
OptimizeIL.MarkLabel(label18)
OptimizeIL.MarkSequencePoint(doc4, 815, 1, 815, 100)
OptimizeIL.Emit(OpCodes.Br, cont174)
OptimizeIL.MarkLabel(fa174)
OptimizeIL.Emit(OpCodes.Br, cont174)
OptimizeIL.MarkLabel(cont174)
OptimizeIL.MarkSequencePoint(doc4, 817, 1, 817, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("MetCallFlag"))
OptimizeIL.MarkSequencePoint(doc4, 818, 1, 818, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IdentFlag"))
OptimizeIL.MarkSequencePoint(doc4, 819, 1, 819, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("StringFlag"))
OptimizeIL.MarkSequencePoint(doc4, 821, 1, 821, 100)
OptimizeIL.Emit(OpCodes.Br, label14)
OptimizeIL.MarkSequencePoint(doc4, 822, 1, 822, 100)
OptimizeIL.Emit(OpCodes.Br, cont173)
OptimizeIL.MarkLabel(fa173)
OptimizeIL.Emit(OpCodes.Br, cont173)
OptimizeIL.MarkLabel(cont173)
OptimizeIL.MarkSequencePoint(doc4, 829, 1, 829, 100)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(LSParen))
Dim typ110 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ110))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ110).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 20)
OptimizeIL.MarkSequencePoint(doc4, 830, 1, 830, 100)
Dim typ111(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(System.Type)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ111(UBound(typ111) + 1)
typ111(UBound(typ111)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ111))
Typ = Typ03.GetMethod("IsInstanceOfType", typ111).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 21)
OptimizeIL.MarkSequencePoint(doc4, 832, 1, 832, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa178 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru178 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont178 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru178)
OptimizeIL.Emit(OpCodes.Br, fa178)
OptimizeIL.MarkLabel(tru178)
OptimizeIL.MarkSequencePoint(doc4, 833, 1, 833, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IdentFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IdentFlag").FieldType
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa179 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru179 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont179 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru179)
OptimizeIL.Emit(OpCodes.Br, fa179)
OptimizeIL.MarkLabel(tru179)
OptimizeIL.MarkSequencePoint(doc4, 834, 1, 834, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IdentFlag"))
OptimizeIL.MarkSequencePoint(doc4, 835, 1, 835, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ112(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ReDim Preserve typ112(UBound(typ112) + 1)
typ112(UBound(typ112)) = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ReDim Preserve typ112(UBound(typ112) + 1)
typ112(UBound(typ112)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, procIdentArrayAccess)
Typ = procIdentArrayAccess.ReturnType
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc4, 836, 1, 836, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Sub)
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc4, 837, 1, 837, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
OptimizeIL.Emit(OpCodes.Ldlen)
OptimizeIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Sub)
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc4, 839, 1, 839, 100)
Dim locbldr203 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(Ident))
locbldr203.SetLocalSymInfo("aidt")
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
OptimizeIL.Emit(OpCodes.Stloc, 43)
OptimizeIL.MarkSequencePoint(doc4, 840, 1, 840, 100)
Dim locbldr204 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(Expr))
locbldr204.SetLocalSymInfo("arriloc")
OptimizeIL.Emit(OpCodes.Ldloc, 43)
Typ = GetType(Ident)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("ArrLoc"))
Typ = GetType(Ident).GetField("ArrLoc").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 44)
OptimizeIL.MarkSequencePoint(doc4, 841, 1, 841, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ113(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 44)
Typ = GetType(Expr)
ReDim Preserve typ113(UBound(typ113) + 1)
typ113(UBound(typ113)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Optimize)
Typ = Optimize.ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 44)
OptimizeIL.MarkSequencePoint(doc4, 843, 1, 843, 100)
OptimizeIL.Emit(OpCodes.Br, cont179)
OptimizeIL.MarkLabel(fa179)
OptimizeIL.MarkSequencePoint(doc4, 845, 1, 845, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("MetCallFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("MetCallFlag").FieldType
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa180 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru180 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont180 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru180)
OptimizeIL.Emit(OpCodes.Br, fa180)
OptimizeIL.MarkLabel(tru180)
OptimizeIL.MarkSequencePoint(doc4, 846, 1, 846, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("MetCallFlag"))
OptimizeIL.MarkSequencePoint(doc4, 847, 1, 847, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ114(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ReDim Preserve typ114(UBound(typ114) + 1)
typ114(UBound(typ114)) = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ReDim Preserve typ114(UBound(typ114) + 1)
typ114(UBound(typ114)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, procMtdArrayAccess)
Typ = procMtdArrayAccess.ReturnType
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc4, 848, 1, 848, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Sub)
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc4, 849, 1, 849, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
OptimizeIL.Emit(OpCodes.Ldlen)
OptimizeIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Sub)
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc4, 851, 1, 851, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("MetCallFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("MetCallFlag").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 5)
OptimizeIL.MarkSequencePoint(doc4, 852, 1, 852, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IdentFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IdentFlag").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 6)
OptimizeIL.MarkSequencePoint(doc4, 853, 1, 853, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("StringFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("StringFlag").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 7)
OptimizeIL.MarkSequencePoint(doc4, 855, 1, 855, 100)
Dim locbldr205 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(MethodCallTok))
locbldr205.SetLocalSymInfo("amtd")
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
OptimizeIL.Emit(OpCodes.Stloc, 45)
OptimizeIL.MarkSequencePoint(doc4, 856, 1, 856, 100)
Dim locbldr206 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(MethodNameTok))
locbldr206.SetLocalSymInfo("amtdn")
OptimizeIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(MethodCallTok)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(MethodCallTok).GetField("Name"))
Typ = GetType(MethodCallTok).GetField("Name").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 46)
OptimizeIL.MarkSequencePoint(doc4, 857, 1, 857, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 46)
Typ = GetType(MethodNameTok)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(MethodNameTok).GetField("ArrLoc"))
Typ = GetType(MethodNameTok).GetField("ArrLoc").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 44)
OptimizeIL.MarkSequencePoint(doc4, 858, 1, 858, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("MetCallFlag"))
OptimizeIL.MarkSequencePoint(doc4, 859, 1, 859, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IdentFlag"))
OptimizeIL.MarkSequencePoint(doc4, 860, 1, 860, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("StringFlag"))
OptimizeIL.MarkSequencePoint(doc4, 861, 1, 861, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ115(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 44)
Typ = GetType(Expr)
ReDim Preserve typ115(UBound(typ115) + 1)
typ115(UBound(typ115)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Optimize)
Typ = Optimize.ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 44)
OptimizeIL.MarkSequencePoint(doc4, 863, 1, 863, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("MetCallFlag"))
OptimizeIL.MarkSequencePoint(doc4, 864, 1, 864, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IdentFlag"))
OptimizeIL.MarkSequencePoint(doc4, 865, 1, 865, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("StringFlag"))
OptimizeIL.MarkSequencePoint(doc4, 867, 1, 867, 100)
OptimizeIL.Emit(OpCodes.Br, cont180)
OptimizeIL.MarkLabel(fa180)
OptimizeIL.Emit(OpCodes.Br, cont180)
OptimizeIL.MarkLabel(cont180)
OptimizeIL.MarkSequencePoint(doc4, 869, 1, 869, 100)
OptimizeIL.Emit(OpCodes.Br, cont179)
OptimizeIL.MarkLabel(cont179)
OptimizeIL.MarkSequencePoint(doc4, 870, 1, 870, 100)
OptimizeIL.Emit(OpCodes.Br, label14)
OptimizeIL.MarkSequencePoint(doc4, 871, 1, 871, 100)
OptimizeIL.Emit(OpCodes.Br, cont178)
OptimizeIL.MarkLabel(fa178)
OptimizeIL.Emit(OpCodes.Br, cont178)
OptimizeIL.MarkLabel(cont178)
OptimizeIL.MarkSequencePoint(doc4, 873, 1, 873, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa181 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru181 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont181 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Bgt, tru181)
OptimizeIL.Emit(OpCodes.Br, fa181)
OptimizeIL.MarkLabel(tru181)
OptimizeIL.MarkSequencePoint(doc4, 874, 1, 874, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("MetCallFlag"))
OptimizeIL.MarkSequencePoint(doc4, 875, 1, 875, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IdentFlag"))
OptimizeIL.MarkSequencePoint(doc4, 876, 1, 876, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("StringFlag"))
OptimizeIL.MarkSequencePoint(doc4, 877, 1, 877, 100)
OptimizeIL.Emit(OpCodes.Br, cont181)
OptimizeIL.MarkLabel(fa181)
OptimizeIL.Emit(OpCodes.Br, cont181)
OptimizeIL.MarkLabel(cont181)
OptimizeIL.MarkSequencePoint(doc4, 882, 1, 882, 100)
OptimizeIL.Emit(OpCodes.Br, cont149)
OptimizeIL.MarkLabel(fa149)
OptimizeIL.Emit(OpCodes.Br, cont149)
OptimizeIL.MarkLabel(cont149)
OptimizeIL.MarkSequencePoint(doc4, 884, 1, 884, 100)
OptimizeIL.MarkLabel(label14)
OptimizeIL.MarkSequencePoint(doc4, 886, 1, 886, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
Dim fa182 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru182 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont182 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Bge, tru182)
OptimizeIL.Emit(OpCodes.Br, fa182)
OptimizeIL.MarkLabel(tru182)
OptimizeIL.MarkSequencePoint(doc4, 887, 1, 887, 100)
OptimizeIL.Emit(OpCodes.Br, label13)
OptimizeIL.MarkSequencePoint(doc4, 888, 1, 888, 100)
OptimizeIL.Emit(OpCodes.Br, cont182)
OptimizeIL.MarkLabel(fa182)
OptimizeIL.MarkSequencePoint(doc4, 889, 1, 889, 100)
OptimizeIL.Emit(OpCodes.Br, label12)
OptimizeIL.MarkSequencePoint(doc4, 890, 1, 890, 100)
OptimizeIL.Emit(OpCodes.Br, cont182)
OptimizeIL.MarkLabel(cont182)
OptimizeIL.MarkSequencePoint(doc4, 892, 1, 892, 100)
OptimizeIL.Emit(OpCodes.Br, cont144)
OptimizeIL.MarkLabel(fa144)
OptimizeIL.MarkSequencePoint(doc4, 896, 1, 896, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Sub)
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc4, 899, 1, 899, 100)
Dim label19 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.MarkSequencePoint(doc4, 901, 1, 901, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
OptimizeIL.Emit(OpCodes.Stloc, 8)
OptimizeIL.MarkSequencePoint(doc4, 903, 1, 903, 100)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(Ident))
Dim typ116 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ116))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ116).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 20)
OptimizeIL.MarkSequencePoint(doc4, 904, 1, 904, 100)
Dim typ117(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(System.Type)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ117(UBound(typ117) + 1)
typ117(UBound(typ117)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ117))
Typ = Typ03.GetMethod("IsInstanceOfType", typ117).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 21)
OptimizeIL.MarkSequencePoint(doc4, 906, 1, 906, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa183 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru183 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont183 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru183)
OptimizeIL.Emit(OpCodes.Br, fa183)
OptimizeIL.MarkLabel(tru183)
OptimizeIL.MarkSequencePoint(doc4, 907, 1, 907, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Stloc, 14)
OptimizeIL.MarkSequencePoint(doc4, 908, 1, 908, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("MetCallFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("MetCallFlag").FieldType
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IdentFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IdentFlag").FieldType
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 21)
OptimizeIL.MarkSequencePoint(doc4, 909, 1, 909, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa184 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru184 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont184 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru184)
OptimizeIL.Emit(OpCodes.Br, fa184)
OptimizeIL.MarkLabel(tru184)
OptimizeIL.MarkSequencePoint(doc4, 910, 1, 910, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("MetCallFlag"))
OptimizeIL.MarkSequencePoint(doc4, 911, 1, 911, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IdentFlag"))
OptimizeIL.MarkSequencePoint(doc4, 912, 1, 912, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Add)
OptimizeIL.Emit(OpCodes.Stloc, 18)
OptimizeIL.MarkSequencePoint(doc4, 913, 1, 913, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
OptimizeIL.Emit(OpCodes.Stloc, 13)
OptimizeIL.MarkSequencePoint(doc4, 914, 1, 914, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(Ident)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stfld, GetType(Ident).GetField("MemberAccessFlg"))
OptimizeIL.MarkSequencePoint(doc4, 915, 1, 915, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(Ident)
OptimizeIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Stfld, GetType(Ident).GetField("MemberToAccess"))
OptimizeIL.MarkSequencePoint(doc4, 916, 1, 916, 100)
Dim typ118(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32)
ReDim Preserve typ118(UBound(typ118) + 1)
typ118(UBound(typ118)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ118))
Typ = Typ03.GetMethod("RemToken", typ118).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
OptimizeIL.Emit(OpCodes.Pop)
End If
OptimizeIL.MarkSequencePoint(doc4, 917, 1, 917, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(Ident)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Stelem, Typ.GetElementType())
OptimizeIL.MarkSequencePoint(doc4, 918, 1, 918, 100)
OptimizeIL.Emit(OpCodes.Br, cont184)
OptimizeIL.MarkLabel(fa184)
OptimizeIL.Emit(OpCodes.Br, cont184)
OptimizeIL.MarkLabel(cont184)
OptimizeIL.MarkSequencePoint(doc4, 919, 1, 919, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(Ident)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 22)
OptimizeIL.MarkSequencePoint(doc4, 920, 1, 920, 100)
Dim typ119(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(System.String)
ReDim Preserve typ119(UBound(typ119) + 1)
typ119(UBound(typ119)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "::*")
Typ = GetType(System.String)
ReDim Preserve typ119(UBound(typ119) + 1)
typ119(UBound(typ119)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(ParseUtils).GetMethod("LikeOP", typ119))
Typ = GetType(ParseUtils).GetMethod("LikeOP", typ119).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 21)
OptimizeIL.MarkSequencePoint(doc4, 921, 1, 921, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa185 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru185 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont185 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru185)
OptimizeIL.Emit(OpCodes.Br, fa185)
OptimizeIL.MarkLabel(tru185)
OptimizeIL.MarkSequencePoint(doc4, 922, 1, 922, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IdentFlag"))
OptimizeIL.MarkSequencePoint(doc4, 923, 1, 923, 100)
OptimizeIL.Emit(OpCodes.Br, cont185)
OptimizeIL.MarkLabel(fa185)
OptimizeIL.Emit(OpCodes.Br, cont185)
OptimizeIL.MarkLabel(cont185)
OptimizeIL.MarkSequencePoint(doc4, 924, 1, 924, 100)
OptimizeIL.Emit(OpCodes.Br, label19)
OptimizeIL.MarkSequencePoint(doc4, 925, 1, 925, 100)
OptimizeIL.Emit(OpCodes.Br, cont183)
OptimizeIL.MarkLabel(fa183)
OptimizeIL.Emit(OpCodes.Br, cont183)
OptimizeIL.MarkLabel(cont183)
OptimizeIL.MarkSequencePoint(doc4, 927, 1, 927, 100)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(MethodCallTok))
Dim typ120 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ120))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ120).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 20)
OptimizeIL.MarkSequencePoint(doc4, 928, 1, 928, 100)
Dim typ121(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(System.Type)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ121(UBound(typ121) + 1)
typ121(UBound(typ121)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ121))
Typ = Typ03.GetMethod("IsInstanceOfType", typ121).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 21)
OptimizeIL.MarkSequencePoint(doc4, 930, 1, 930, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa186 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru186 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont186 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru186)
OptimizeIL.Emit(OpCodes.Br, fa186)
OptimizeIL.MarkLabel(tru186)
OptimizeIL.MarkSequencePoint(doc4, 931, 1, 931, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Stloc, 15)
OptimizeIL.MarkSequencePoint(doc4, 932, 1, 932, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(MethodCallTok)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(MethodCallTok).GetField("Name"))
Typ = GetType(MethodCallTok).GetField("Name").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 16)
OptimizeIL.MarkSequencePoint(doc4, 933, 1, 933, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("MetCallFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("MetCallFlag").FieldType
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IdentFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IdentFlag").FieldType
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 21)
OptimizeIL.MarkSequencePoint(doc4, 934, 1, 934, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa187 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru187 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont187 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru187)
OptimizeIL.Emit(OpCodes.Br, fa187)
OptimizeIL.MarkLabel(tru187)
OptimizeIL.MarkSequencePoint(doc4, 935, 1, 935, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("MetCallFlag"))
OptimizeIL.MarkSequencePoint(doc4, 936, 1, 936, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IdentFlag"))
OptimizeIL.MarkSequencePoint(doc4, 937, 1, 937, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Add)
OptimizeIL.Emit(OpCodes.Stloc, 18)
OptimizeIL.MarkSequencePoint(doc4, 938, 1, 938, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
OptimizeIL.Emit(OpCodes.Stloc, 13)
OptimizeIL.MarkSequencePoint(doc4, 939, 1, 939, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(MethodNameTok)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stfld, GetType(MethodNameTok).GetField("MemberAccessFlg"))
OptimizeIL.MarkSequencePoint(doc4, 940, 1, 940, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(MethodNameTok)
OptimizeIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Stfld, GetType(MethodNameTok).GetField("MemberToAccess"))
OptimizeIL.MarkSequencePoint(doc4, 941, 1, 941, 100)
Dim typ122(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32)
ReDim Preserve typ122(UBound(typ122) + 1)
typ122(UBound(typ122)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ122))
Typ = Typ03.GetMethod("RemToken", typ122).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
OptimizeIL.Emit(OpCodes.Pop)
End If
OptimizeIL.MarkSequencePoint(doc4, 942, 1, 942, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(MethodCallTok)
OptimizeIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(MethodNameTok)
OptimizeIL.Emit(OpCodes.Stfld, GetType(MethodCallTok).GetField("Name"))
OptimizeIL.MarkSequencePoint(doc4, 943, 1, 943, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(MethodCallTok)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Stelem, Typ.GetElementType())
OptimizeIL.MarkSequencePoint(doc4, 944, 1, 944, 100)
OptimizeIL.Emit(OpCodes.Br, cont187)
OptimizeIL.MarkLabel(fa187)
OptimizeIL.Emit(OpCodes.Br, cont187)
OptimizeIL.MarkLabel(cont187)
OptimizeIL.MarkSequencePoint(doc4, 945, 1, 945, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(MethodNameTok)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(MethodNameTok).GetField("Value"))
Typ = GetType(MethodNameTok).GetField("Value").FieldType
OptimizeIL.Emit(OpCodes.Stloc, 22)
OptimizeIL.MarkSequencePoint(doc4, 946, 1, 946, 100)
Dim typ123(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(System.String)
ReDim Preserve typ123(UBound(typ123) + 1)
typ123(UBound(typ123)) = Typ
OptimizeIL.Emit(OpCodes.Ldstr, "::*")
Typ = GetType(System.String)
ReDim Preserve typ123(UBound(typ123) + 1)
typ123(UBound(typ123)) = Typ
OptimizeIL.Emit(OpCodes.Call, GetType(ParseUtils).GetMethod("LikeOP", typ123))
Typ = GetType(ParseUtils).GetMethod("LikeOP", typ123).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 21)
OptimizeIL.MarkSequencePoint(doc4, 947, 1, 947, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa188 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru188 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont188 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru188)
OptimizeIL.Emit(OpCodes.Br, fa188)
OptimizeIL.MarkLabel(tru188)
OptimizeIL.MarkSequencePoint(doc4, 948, 1, 948, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("MetCallFlag"))
OptimizeIL.MarkSequencePoint(doc4, 949, 1, 949, 100)
OptimizeIL.Emit(OpCodes.Br, cont188)
OptimizeIL.MarkLabel(fa188)
OptimizeIL.Emit(OpCodes.Br, cont188)
OptimizeIL.MarkLabel(cont188)
OptimizeIL.MarkSequencePoint(doc4, 950, 1, 950, 100)
OptimizeIL.Emit(OpCodes.Br, label19)
OptimizeIL.MarkSequencePoint(doc4, 951, 1, 951, 100)
OptimizeIL.Emit(OpCodes.Br, cont186)
OptimizeIL.MarkLabel(fa186)
OptimizeIL.Emit(OpCodes.Br, cont186)
OptimizeIL.MarkLabel(cont186)
OptimizeIL.MarkSequencePoint(doc4, 953, 1, 953, 100)
OptimizeIL.Emit(OpCodes.Ldtoken, GetType(StringLiteral))
Dim typ124 As Type() = {GetType(System.RuntimeTypeHandle)}
OptimizeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ124))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ124).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 20)
OptimizeIL.MarkSequencePoint(doc4, 954, 1, 954, 100)
Dim typ125(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(System.Type)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ125(UBound(typ125) + 1)
typ125(UBound(typ125)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ125))
Typ = Typ03.GetMethod("IsInstanceOfType", typ125).ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 21)
OptimizeIL.MarkSequencePoint(doc4, 956, 1, 956, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa189 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru189 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont189 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru189)
OptimizeIL.Emit(OpCodes.Br, fa189)
OptimizeIL.MarkLabel(tru189)
OptimizeIL.MarkSequencePoint(doc4, 957, 1, 957, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Stloc, 17)
OptimizeIL.MarkSequencePoint(doc4, 958, 1, 958, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("MetCallFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("MetCallFlag").FieldType
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IdentFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IdentFlag").FieldType
OptimizeIL.Emit(OpCodes.Or)
OptimizeIL.Emit(OpCodes.Stloc, 21)
OptimizeIL.MarkSequencePoint(doc4, 959, 1, 959, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa190 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru190 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont190 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru190)
OptimizeIL.Emit(OpCodes.Br, fa190)
OptimizeIL.MarkLabel(tru190)
OptimizeIL.MarkSequencePoint(doc4, 960, 1, 960, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("MetCallFlag"))
OptimizeIL.MarkSequencePoint(doc4, 961, 1, 961, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IdentFlag"))
OptimizeIL.MarkSequencePoint(doc4, 962, 1, 962, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Add)
OptimizeIL.Emit(OpCodes.Stloc, 18)
OptimizeIL.MarkSequencePoint(doc4, 963, 1, 963, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
OptimizeIL.Emit(OpCodes.Stloc, 13)
OptimizeIL.MarkSequencePoint(doc4, 964, 1, 964, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(StringLiteral)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stfld, GetType(StringLiteral).GetField("MemberAccessFlg"))
OptimizeIL.MarkSequencePoint(doc4, 965, 1, 965, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(StringLiteral)
OptimizeIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(Token)
OptimizeIL.Emit(OpCodes.Stfld, GetType(StringLiteral).GetField("MemberToAccess"))
OptimizeIL.MarkSequencePoint(doc4, 966, 1, 966, 100)
Dim typ126(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32)
ReDim Preserve typ126(UBound(typ126) + 1)
typ126(UBound(typ126)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ126))
Typ = Typ03.GetMethod("RemToken", typ126).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
OptimizeIL.Emit(OpCodes.Pop)
End If
OptimizeIL.MarkSequencePoint(doc4, 967, 1, 967, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(StringLiteral)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Stelem, Typ.GetElementType())
OptimizeIL.MarkSequencePoint(doc4, 968, 1, 968, 100)
OptimizeIL.Emit(OpCodes.Br, cont190)
OptimizeIL.MarkLabel(fa190)
OptimizeIL.Emit(OpCodes.Br, cont190)
OptimizeIL.MarkLabel(cont190)
OptimizeIL.MarkSequencePoint(doc4, 969, 1, 969, 100)
OptimizeIL.Emit(OpCodes.Br, label19)
OptimizeIL.MarkSequencePoint(doc4, 970, 1, 970, 100)
OptimizeIL.Emit(OpCodes.Br, cont189)
OptimizeIL.MarkLabel(fa189)
OptimizeIL.Emit(OpCodes.Br, cont189)
OptimizeIL.MarkLabel(cont189)
OptimizeIL.MarkSequencePoint(doc4, 972, 1, 972, 100)
OptimizeIL.MarkLabel(label19)
OptimizeIL.MarkSequencePoint(doc4, 974, 1, 974, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa191 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru191 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont191 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Ble, tru191)
OptimizeIL.Emit(OpCodes.Br, fa191)
OptimizeIL.MarkLabel(tru191)
OptimizeIL.MarkSequencePoint(doc4, 975, 1, 975, 100)
OptimizeIL.Emit(OpCodes.Br, label13)
OptimizeIL.MarkSequencePoint(doc4, 976, 1, 976, 100)
OptimizeIL.Emit(OpCodes.Br, cont191)
OptimizeIL.MarkLabel(fa191)
OptimizeIL.MarkSequencePoint(doc4, 977, 1, 977, 100)
OptimizeIL.Emit(OpCodes.Br, label12)
OptimizeIL.MarkSequencePoint(doc4, 978, 1, 978, 100)
OptimizeIL.Emit(OpCodes.Br, cont191)
OptimizeIL.MarkLabel(cont191)
OptimizeIL.MarkSequencePoint(doc4, 980, 1, 980, 100)
OptimizeIL.Emit(OpCodes.Br, cont144)
OptimizeIL.MarkLabel(cont144)
OptimizeIL.MarkSequencePoint(doc4, 982, 1, 982, 100)
OptimizeIL.MarkLabel(label13)
OptimizeIL.MarkSequencePoint(doc4, 984, 1, 984, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("MetChainFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("MetChainFlag").FieldType
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa192 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru192 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont192 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru192)
OptimizeIL.Emit(OpCodes.Br, fa192)
OptimizeIL.MarkLabel(tru192)
OptimizeIL.MarkSequencePoint(doc4, 985, 1, 985, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa193 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru193 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont193 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru193)
OptimizeIL.Emit(OpCodes.Br, fa193)
OptimizeIL.MarkLabel(tru193)
OptimizeIL.MarkSequencePoint(doc4, 986, 1, 986, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("MetChainFlag"))
OptimizeIL.MarkSequencePoint(doc4, 987, 1, 987, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
OptimizeIL.Emit(OpCodes.Ldlen)
OptimizeIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc4, 988, 1, 988, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc4, 989, 1, 989, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc4, 990, 1, 990, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("MetCallFlag"))
OptimizeIL.MarkSequencePoint(doc4, 991, 1, 991, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IdentFlag"))
OptimizeIL.MarkSequencePoint(doc4, 992, 1, 992, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("StringFlag"))
OptimizeIL.MarkSequencePoint(doc4, 994, 1, 994, 100)
OptimizeIL.Emit(OpCodes.Br, label12)
OptimizeIL.MarkSequencePoint(doc4, 996, 1, 996, 100)
OptimizeIL.Emit(OpCodes.Br, cont193)
OptimizeIL.MarkLabel(fa193)
OptimizeIL.Emit(OpCodes.Br, cont193)
OptimizeIL.MarkLabel(cont193)
OptimizeIL.MarkSequencePoint(doc4, 997, 1, 997, 100)
OptimizeIL.Emit(OpCodes.Br, cont192)
OptimizeIL.MarkLabel(fa192)
OptimizeIL.MarkSequencePoint(doc4, 998, 1, 998, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("MetChainFlag"))
OptimizeIL.MarkSequencePoint(doc4, 999, 1, 999, 100)
OptimizeIL.Emit(OpCodes.Br, cont192)
OptimizeIL.MarkLabel(cont192)
OptimizeIL.MarkSequencePoint(doc4, 1001, 1, 1001, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("MetCallFlag"))
OptimizeIL.MarkSequencePoint(doc4, 1002, 1, 1002, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IdentFlag"))
OptimizeIL.MarkSequencePoint(doc4, 1003, 1, 1003, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("StringFlag"))
OptimizeIL.MarkSequencePoint(doc4, 1005, 1, 1005, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
OptimizeIL.MarkSequencePoint(doc4, 1006, 1, 1006, 100)
OptimizeIL.Emit(OpCodes.Ret)
ExprOptimizer.CreateType()
End Sub


Dim doc5 As ISymbolDocumentWriter

Sub StmtOptimizer()
Dim StmtOptimizer As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.Parser" & "." & "StmtOptimizer", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(Stmt)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Boolean).MakeByRefType()
Dim checkRefasm As MethodBuilder = StmtOptimizer.DefineMethod("checkRefasm", MethodAttributes.Public, GetType(Stmt), typ0)
Dim checkRefasmIL As ILGenerator = checkRefasm.GetILGenerator()
Dim checkRefasmparam01 As ParameterBuilder = checkRefasm.DefineParameter(1, ParameterAttributes.None, "stm")
Dim checkRefasmparam02 As ParameterBuilder = checkRefasm.DefineParameter(2, ParameterAttributes.None, "b")
checkRefasmIL.MarkSequencePoint(doc5, 12, 1, 12, 100)
Dim locbldr207 As LocalBuilder = checkRefasmIL.DeclareLocal(GetType(Token))
locbldr207.SetLocalSymInfo("tok")
checkRefasmIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkRefasmIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkRefasmIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkRefasmIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkRefasmIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkRefasmIL.Emit(OpCodes.Stloc, 0)
checkRefasmIL.MarkSequencePoint(doc5, 13, 1, 13, 100)
Dim locbldr208 As LocalBuilder = checkRefasmIL.DeclareLocal(GetType(System.Type))
locbldr208.SetLocalSymInfo("typ")
checkRefasmIL.Emit(OpCodes.Ldtoken, GetType(RefasmTok))
Dim typ1 As Type() = {GetType(System.RuntimeTypeHandle)}
checkRefasmIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ1))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ1).ReturnType
checkRefasmIL.Emit(OpCodes.Stloc, 1)
checkRefasmIL.MarkSequencePoint(doc5, 14, 1, 14, 100)
checkRefasmIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
Dim typ2(-1) As Type
checkRefasmIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkRefasmIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkRefasmIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = Typ
checkRefasmIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ2))
Typ = Typ03.GetMethod("IsInstanceOfType", typ2).ReturnType
checkRefasmIL.Emit(OpCodes.Stobj, Typ04)
checkRefasmIL.MarkSequencePoint(doc5, 15, 1, 15, 100)
Dim locbldr209 As LocalBuilder = checkRefasmIL.DeclareLocal(GetType(RefasmStmt))
locbldr209.SetLocalSymInfo("refasms")
checkRefasmIL.Emit(OpCodes.Newobj, GetType(RefasmStmt).GetConstructor(Type.EmptyTypes))
checkRefasmIL.Emit(OpCodes.Stloc, 2)
checkRefasmIL.MarkSequencePoint(doc5, 16, 1, 16, 100)
checkRefasmIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
checkRefasmIL.Emit(OpCodes.Ldobj, Typ.GetElementType())
Typ = Typ.GetElementType()
checkRefasmIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa194 As System.Reflection.Emit.Label = checkRefasmIL.DefineLabel()
Dim tru194 As System.Reflection.Emit.Label = checkRefasmIL.DefineLabel()
Dim cont194 As System.Reflection.Emit.Label = checkRefasmIL.DefineLabel()
checkRefasmIL.Emit(OpCodes.Beq, tru194)
checkRefasmIL.Emit(OpCodes.Br, fa194)
checkRefasmIL.MarkLabel(tru194)
checkRefasmIL.MarkSequencePoint(doc5, 17, 1, 17, 100)
checkRefasmIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(RefasmStmt)
checkRefasmIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkRefasmIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
checkRefasmIL.Emit(OpCodes.Stfld, GetType(RefasmStmt).GetField("Line"))
checkRefasmIL.MarkSequencePoint(doc5, 18, 1, 18, 100)
checkRefasmIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(RefasmStmt)
checkRefasmIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkRefasmIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkRefasmIL.Emit(OpCodes.Stfld, GetType(RefasmStmt).GetField("Tokens"))
checkRefasmIL.MarkSequencePoint(doc5, 19, 1, 19, 100)
checkRefasmIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(RefasmStmt)
checkRefasmIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkRefasmIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkRefasmIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkRefasmIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkRefasmIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkRefasmIL.Emit(OpCodes.Stfld, GetType(RefasmStmt).GetField("AsmPath"))
checkRefasmIL.MarkSequencePoint(doc5, 20, 1, 20, 100)
checkRefasmIL.Emit(OpCodes.Br, cont194)
checkRefasmIL.MarkLabel(fa194)
checkRefasmIL.Emit(OpCodes.Br, cont194)
checkRefasmIL.MarkLabel(cont194)
checkRefasmIL.MarkSequencePoint(doc5, 21, 1, 21, 100)
checkRefasmIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(RefasmStmt)
checkRefasmIL.MarkSequencePoint(doc5, 22, 1, 22, 100)
checkRefasmIL.Emit(OpCodes.Ret)
Dim typ3(-1) As Type
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = GetType(Stmt)
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = GetType(System.Boolean).MakeByRefType()
Dim checkIf As MethodBuilder = StmtOptimizer.DefineMethod("checkIf", MethodAttributes.Public, GetType(Stmt), typ3)
Dim checkIfIL As ILGenerator = checkIf.GetILGenerator()
Dim checkIfparam01 As ParameterBuilder = checkIf.DefineParameter(1, ParameterAttributes.None, "stm")
Dim checkIfparam02 As ParameterBuilder = checkIf.DefineParameter(2, ParameterAttributes.None, "b")
checkIfIL.MarkSequencePoint(doc5, 25, 1, 25, 100)
Dim locbldr210 As LocalBuilder = checkIfIL.DeclareLocal(GetType(Token))
locbldr210.SetLocalSymInfo("tok")
checkIfIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkIfIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkIfIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkIfIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkIfIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkIfIL.Emit(OpCodes.Stloc, 0)
checkIfIL.MarkSequencePoint(doc5, 26, 1, 26, 100)
Dim locbldr211 As LocalBuilder = checkIfIL.DeclareLocal(GetType(System.Type))
locbldr211.SetLocalSymInfo("typ")
checkIfIL.Emit(OpCodes.Ldtoken, GetType(IfTok))
Dim typ4 As Type() = {GetType(System.RuntimeTypeHandle)}
checkIfIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ4))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ4).ReturnType
checkIfIL.Emit(OpCodes.Stloc, 1)
checkIfIL.MarkSequencePoint(doc5, 27, 1, 27, 100)
checkIfIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
Dim typ5(-1) As Type
checkIfIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkIfIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkIfIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ5(UBound(typ5) + 1)
typ5(UBound(typ5)) = Typ
checkIfIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ5))
Typ = Typ03.GetMethod("IsInstanceOfType", typ5).ReturnType
checkIfIL.Emit(OpCodes.Stobj, Typ04)
checkIfIL.MarkSequencePoint(doc5, 28, 1, 28, 100)
Dim locbldr212 As LocalBuilder = checkIfIL.DeclareLocal(GetType(IfStmt))
locbldr212.SetLocalSymInfo("ifs")
checkIfIL.Emit(OpCodes.Newobj, GetType(IfStmt).GetConstructor(Type.EmptyTypes))
checkIfIL.Emit(OpCodes.Stloc, 2)
checkIfIL.MarkSequencePoint(doc5, 29, 1, 29, 100)
Dim locbldr213 As LocalBuilder = checkIfIL.DeclareLocal(GetType(Expr))
locbldr213.SetLocalSymInfo("exp")
checkIfIL.Emit(OpCodes.Newobj, GetType(Expr).GetConstructor(Type.EmptyTypes))
checkIfIL.Emit(OpCodes.Stloc, 3)
checkIfIL.MarkSequencePoint(doc5, 31, 1, 31, 100)
checkIfIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
checkIfIL.Emit(OpCodes.Ldobj, Typ.GetElementType())
Typ = Typ.GetElementType()
checkIfIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa195 As System.Reflection.Emit.Label = checkIfIL.DefineLabel()
Dim tru195 As System.Reflection.Emit.Label = checkIfIL.DefineLabel()
Dim cont195 As System.Reflection.Emit.Label = checkIfIL.DefineLabel()
checkIfIL.Emit(OpCodes.Beq, tru195)
checkIfIL.Emit(OpCodes.Br, fa195)
checkIfIL.MarkLabel(tru195)
checkIfIL.MarkSequencePoint(doc5, 33, 1, 33, 100)
checkIfIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(IfStmt)
checkIfIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkIfIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
checkIfIL.Emit(OpCodes.Stfld, GetType(IfStmt).GetField("Line"))
checkIfIL.MarkSequencePoint(doc5, 34, 1, 34, 100)
checkIfIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(IfStmt)
checkIfIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkIfIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkIfIL.Emit(OpCodes.Stfld, GetType(IfStmt).GetField("Tokens"))
checkIfIL.MarkSequencePoint(doc5, 36, 1, 36, 100)
Dim locbldr214 As LocalBuilder = checkIfIL.DeclareLocal(GetType(System.Int32))
locbldr214.SetLocalSymInfo("i")
checkIfIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkIfIL.Emit(OpCodes.Stloc, 4)
checkIfIL.MarkSequencePoint(doc5, 37, 1, 37, 100)
Dim locbldr215 As LocalBuilder = checkIfIL.DeclareLocal(GetType(System.Int32))
locbldr215.SetLocalSymInfo("len")
checkIfIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkIfIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkIfIL.Emit(OpCodes.Ldlen)
checkIfIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
checkIfIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkIfIL.Emit(OpCodes.Sub)
checkIfIL.Emit(OpCodes.Stloc, 5)
checkIfIL.MarkSequencePoint(doc5, 38, 1, 38, 100)
Dim locbldr216 As LocalBuilder = checkIfIL.DeclareLocal(GetType(System.Boolean))
locbldr216.SetLocalSymInfo("b2")
checkIfIL.MarkSequencePoint(doc5, 40, 1, 40, 100)
Dim label0 As System.Reflection.Emit.Label = checkIfIL.DefineLabel()
checkIfIL.MarkSequencePoint(doc5, 41, 1, 41, 100)
Dim label1 As System.Reflection.Emit.Label = checkIfIL.DefineLabel()
checkIfIL.MarkSequencePoint(doc5, 43, 1, 43, 100)
checkIfIL.MarkLabel(label1)
checkIfIL.MarkSequencePoint(doc5, 45, 1, 45, 100)
checkIfIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
checkIfIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkIfIL.Emit(OpCodes.Add)
checkIfIL.Emit(OpCodes.Stloc, 4)
checkIfIL.MarkSequencePoint(doc5, 47, 1, 47, 100)
checkIfIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkIfIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkIfIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
checkIfIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkIfIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkIfIL.Emit(OpCodes.Stloc, 0)
checkIfIL.MarkSequencePoint(doc5, 48, 1, 48, 100)
checkIfIL.Emit(OpCodes.Ldtoken, GetType(ThenTok))
Dim typ6 As Type() = {GetType(System.RuntimeTypeHandle)}
checkIfIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ6))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ6).ReturnType
checkIfIL.Emit(OpCodes.Stloc, 1)
checkIfIL.MarkSequencePoint(doc5, 49, 1, 49, 100)
Dim typ7(-1) As Type
checkIfIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkIfIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkIfIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = Typ
checkIfIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ7))
Typ = Typ03.GetMethod("IsInstanceOfType", typ7).ReturnType
checkIfIL.Emit(OpCodes.Stloc, 6)
checkIfIL.MarkSequencePoint(doc5, 52, 1, 52, 100)
checkIfIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Boolean)
checkIfIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa196 As System.Reflection.Emit.Label = checkIfIL.DefineLabel()
Dim tru196 As System.Reflection.Emit.Label = checkIfIL.DefineLabel()
Dim cont196 As System.Reflection.Emit.Label = checkIfIL.DefineLabel()
checkIfIL.Emit(OpCodes.Beq, tru196)
checkIfIL.Emit(OpCodes.Br, fa196)
checkIfIL.MarkLabel(tru196)
checkIfIL.MarkSequencePoint(doc5, 53, 1, 53, 100)
checkIfIL.Emit(OpCodes.Br, label0)
checkIfIL.MarkSequencePoint(doc5, 54, 1, 54, 100)
checkIfIL.Emit(OpCodes.Br, cont196)
checkIfIL.MarkLabel(fa196)
checkIfIL.MarkSequencePoint(doc5, 55, 1, 55, 100)
Dim typ8(-1) As Type
checkIfIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Expr)
Typ03 = Typ
checkIfIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = Typ
checkIfIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ8))
Typ = Typ03.GetMethod("AddToken", typ8).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
checkIfIL.Emit(OpCodes.Pop)
End If
checkIfIL.MarkSequencePoint(doc5, 56, 1, 56, 100)
checkIfIL.Emit(OpCodes.Br, cont196)
checkIfIL.MarkLabel(cont196)
checkIfIL.MarkSequencePoint(doc5, 58, 1, 58, 100)
checkIfIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
checkIfIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Int32)
Dim fa197 As System.Reflection.Emit.Label = checkIfIL.DefineLabel()
Dim tru197 As System.Reflection.Emit.Label = checkIfIL.DefineLabel()
Dim cont197 As System.Reflection.Emit.Label = checkIfIL.DefineLabel()
checkIfIL.Emit(OpCodes.Beq, tru197)
checkIfIL.Emit(OpCodes.Br, fa197)
checkIfIL.MarkLabel(tru197)
checkIfIL.MarkSequencePoint(doc5, 59, 1, 59, 100)
checkIfIL.Emit(OpCodes.Br, label0)
checkIfIL.MarkSequencePoint(doc5, 60, 1, 60, 100)
checkIfIL.Emit(OpCodes.Br, cont197)
checkIfIL.MarkLabel(fa197)
checkIfIL.MarkSequencePoint(doc5, 61, 1, 61, 100)
checkIfIL.Emit(OpCodes.Br, label1)
checkIfIL.MarkSequencePoint(doc5, 62, 1, 62, 100)
checkIfIL.Emit(OpCodes.Br, cont197)
checkIfIL.MarkLabel(cont197)
checkIfIL.MarkSequencePoint(doc5, 64, 1, 64, 100)
checkIfIL.MarkLabel(label0)
checkIfIL.MarkSequencePoint(doc5, 66, 1, 66, 100)
Dim locbldr217 As LocalBuilder = checkIfIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer"))
locbldr217.SetLocalSymInfo("eop")
checkIfIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer").GetConstructor(Type.EmptyTypes))
checkIfIL.Emit(OpCodes.Stloc, 7)
checkIfIL.MarkSequencePoint(doc5, 67, 1, 67, 100)
Dim typ9(-1) As Type
checkIfIL.Emit(OpCodes.Ldloc, 7)
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer")
Typ03 = Typ
checkIfIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Expr)
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = Typ
checkIfIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Optimize", typ9))
Typ = Typ03.GetMethod("Optimize", typ9).ReturnType
checkIfIL.Emit(OpCodes.Stloc, 3)
checkIfIL.MarkSequencePoint(doc5, 68, 1, 68, 100)
checkIfIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(IfStmt)
checkIfIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Expr)
checkIfIL.Emit(OpCodes.Stfld, GetType(IfStmt).GetField("Exp"))
checkIfIL.MarkSequencePoint(doc5, 70, 1, 70, 100)
checkIfIL.Emit(OpCodes.Br, cont195)
checkIfIL.MarkLabel(fa195)
checkIfIL.Emit(OpCodes.Br, cont195)
checkIfIL.MarkLabel(cont195)
checkIfIL.MarkSequencePoint(doc5, 72, 1, 72, 100)
checkIfIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(IfStmt)
checkIfIL.MarkSequencePoint(doc5, 73, 1, 73, 100)
checkIfIL.Emit(OpCodes.Ret)
Dim typ10(-1) As Type
ReDim Preserve typ10(UBound(typ10) + 1)
typ10(UBound(typ10)) = GetType(Stmt)
ReDim Preserve typ10(UBound(typ10) + 1)
typ10(UBound(typ10)) = GetType(System.Boolean).MakeByRefType()
Dim checkElseIf As MethodBuilder = StmtOptimizer.DefineMethod("checkElseIf", MethodAttributes.Public, GetType(Stmt), typ10)
Dim checkElseIfIL As ILGenerator = checkElseIf.GetILGenerator()
Dim checkElseIfparam01 As ParameterBuilder = checkElseIf.DefineParameter(1, ParameterAttributes.None, "stm")
Dim checkElseIfparam02 As ParameterBuilder = checkElseIf.DefineParameter(2, ParameterAttributes.None, "b")
checkElseIfIL.MarkSequencePoint(doc5, 76, 1, 76, 100)
Dim locbldr218 As LocalBuilder = checkElseIfIL.DeclareLocal(GetType(Token))
locbldr218.SetLocalSymInfo("tok")
checkElseIfIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkElseIfIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkElseIfIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkElseIfIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkElseIfIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkElseIfIL.Emit(OpCodes.Stloc, 0)
checkElseIfIL.MarkSequencePoint(doc5, 77, 1, 77, 100)
Dim locbldr219 As LocalBuilder = checkElseIfIL.DeclareLocal(GetType(System.Type))
locbldr219.SetLocalSymInfo("typ")
checkElseIfIL.Emit(OpCodes.Ldtoken, GetType(ElseIfTok))
Dim typ11 As Type() = {GetType(System.RuntimeTypeHandle)}
checkElseIfIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ11))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ11).ReturnType
checkElseIfIL.Emit(OpCodes.Stloc, 1)
checkElseIfIL.MarkSequencePoint(doc5, 78, 1, 78, 100)
checkElseIfIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
Dim typ12(-1) As Type
checkElseIfIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkElseIfIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkElseIfIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ12(UBound(typ12) + 1)
typ12(UBound(typ12)) = Typ
checkElseIfIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ12))
Typ = Typ03.GetMethod("IsInstanceOfType", typ12).ReturnType
checkElseIfIL.Emit(OpCodes.Stobj, Typ04)
checkElseIfIL.MarkSequencePoint(doc5, 79, 1, 79, 100)
Dim locbldr220 As LocalBuilder = checkElseIfIL.DeclareLocal(GetType(ElseIfStmt))
locbldr220.SetLocalSymInfo("ifs")
checkElseIfIL.Emit(OpCodes.Newobj, GetType(ElseIfStmt).GetConstructor(Type.EmptyTypes))
checkElseIfIL.Emit(OpCodes.Stloc, 2)
checkElseIfIL.MarkSequencePoint(doc5, 80, 1, 80, 100)
Dim locbldr221 As LocalBuilder = checkElseIfIL.DeclareLocal(GetType(Expr))
locbldr221.SetLocalSymInfo("exp")
checkElseIfIL.Emit(OpCodes.Newobj, GetType(Expr).GetConstructor(Type.EmptyTypes))
checkElseIfIL.Emit(OpCodes.Stloc, 3)
checkElseIfIL.MarkSequencePoint(doc5, 82, 1, 82, 100)
checkElseIfIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
checkElseIfIL.Emit(OpCodes.Ldobj, Typ.GetElementType())
Typ = Typ.GetElementType()
checkElseIfIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa198 As System.Reflection.Emit.Label = checkElseIfIL.DefineLabel()
Dim tru198 As System.Reflection.Emit.Label = checkElseIfIL.DefineLabel()
Dim cont198 As System.Reflection.Emit.Label = checkElseIfIL.DefineLabel()
checkElseIfIL.Emit(OpCodes.Beq, tru198)
checkElseIfIL.Emit(OpCodes.Br, fa198)
checkElseIfIL.MarkLabel(tru198)
checkElseIfIL.MarkSequencePoint(doc5, 84, 1, 84, 100)
checkElseIfIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(ElseIfStmt)
checkElseIfIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkElseIfIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
checkElseIfIL.Emit(OpCodes.Stfld, GetType(ElseIfStmt).GetField("Line"))
checkElseIfIL.MarkSequencePoint(doc5, 85, 1, 85, 100)
checkElseIfIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(ElseIfStmt)
checkElseIfIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkElseIfIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkElseIfIL.Emit(OpCodes.Stfld, GetType(ElseIfStmt).GetField("Tokens"))
checkElseIfIL.MarkSequencePoint(doc5, 87, 1, 87, 100)
Dim locbldr222 As LocalBuilder = checkElseIfIL.DeclareLocal(GetType(System.Int32))
locbldr222.SetLocalSymInfo("i")
checkElseIfIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkElseIfIL.Emit(OpCodes.Stloc, 4)
checkElseIfIL.MarkSequencePoint(doc5, 88, 1, 88, 100)
Dim locbldr223 As LocalBuilder = checkElseIfIL.DeclareLocal(GetType(System.Int32))
locbldr223.SetLocalSymInfo("len")
checkElseIfIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkElseIfIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkElseIfIL.Emit(OpCodes.Ldlen)
checkElseIfIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
checkElseIfIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkElseIfIL.Emit(OpCodes.Sub)
checkElseIfIL.Emit(OpCodes.Stloc, 5)
checkElseIfIL.MarkSequencePoint(doc5, 89, 1, 89, 100)
Dim locbldr224 As LocalBuilder = checkElseIfIL.DeclareLocal(GetType(System.Boolean))
locbldr224.SetLocalSymInfo("b2")
checkElseIfIL.MarkSequencePoint(doc5, 91, 1, 91, 100)
Dim label2 As System.Reflection.Emit.Label = checkElseIfIL.DefineLabel()
checkElseIfIL.MarkSequencePoint(doc5, 92, 1, 92, 100)
Dim label3 As System.Reflection.Emit.Label = checkElseIfIL.DefineLabel()
checkElseIfIL.MarkSequencePoint(doc5, 94, 1, 94, 100)
checkElseIfIL.MarkLabel(label3)
checkElseIfIL.MarkSequencePoint(doc5, 96, 1, 96, 100)
checkElseIfIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
checkElseIfIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkElseIfIL.Emit(OpCodes.Add)
checkElseIfIL.Emit(OpCodes.Stloc, 4)
checkElseIfIL.MarkSequencePoint(doc5, 98, 1, 98, 100)
checkElseIfIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkElseIfIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkElseIfIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
checkElseIfIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkElseIfIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkElseIfIL.Emit(OpCodes.Stloc, 0)
checkElseIfIL.MarkSequencePoint(doc5, 99, 1, 99, 100)
checkElseIfIL.Emit(OpCodes.Ldtoken, GetType(ThenTok))
Dim typ13 As Type() = {GetType(System.RuntimeTypeHandle)}
checkElseIfIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ13))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ13).ReturnType
checkElseIfIL.Emit(OpCodes.Stloc, 1)
checkElseIfIL.MarkSequencePoint(doc5, 100, 1, 100, 100)
Dim typ14(-1) As Type
checkElseIfIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkElseIfIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkElseIfIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = Typ
checkElseIfIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ14))
Typ = Typ03.GetMethod("IsInstanceOfType", typ14).ReturnType
checkElseIfIL.Emit(OpCodes.Stloc, 6)
checkElseIfIL.MarkSequencePoint(doc5, 103, 1, 103, 100)
checkElseIfIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Boolean)
checkElseIfIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa199 As System.Reflection.Emit.Label = checkElseIfIL.DefineLabel()
Dim tru199 As System.Reflection.Emit.Label = checkElseIfIL.DefineLabel()
Dim cont199 As System.Reflection.Emit.Label = checkElseIfIL.DefineLabel()
checkElseIfIL.Emit(OpCodes.Beq, tru199)
checkElseIfIL.Emit(OpCodes.Br, fa199)
checkElseIfIL.MarkLabel(tru199)
checkElseIfIL.MarkSequencePoint(doc5, 104, 1, 104, 100)
checkElseIfIL.Emit(OpCodes.Br, label2)
checkElseIfIL.MarkSequencePoint(doc5, 105, 1, 105, 100)
checkElseIfIL.Emit(OpCodes.Br, cont199)
checkElseIfIL.MarkLabel(fa199)
checkElseIfIL.MarkSequencePoint(doc5, 106, 1, 106, 100)
Dim typ15(-1) As Type
checkElseIfIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Expr)
Typ03 = Typ
checkElseIfIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
ReDim Preserve typ15(UBound(typ15) + 1)
typ15(UBound(typ15)) = Typ
checkElseIfIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ15))
Typ = Typ03.GetMethod("AddToken", typ15).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
checkElseIfIL.Emit(OpCodes.Pop)
End If
checkElseIfIL.MarkSequencePoint(doc5, 107, 1, 107, 100)
checkElseIfIL.Emit(OpCodes.Br, cont199)
checkElseIfIL.MarkLabel(cont199)
checkElseIfIL.MarkSequencePoint(doc5, 109, 1, 109, 100)
checkElseIfIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
checkElseIfIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Int32)
Dim fa200 As System.Reflection.Emit.Label = checkElseIfIL.DefineLabel()
Dim tru200 As System.Reflection.Emit.Label = checkElseIfIL.DefineLabel()
Dim cont200 As System.Reflection.Emit.Label = checkElseIfIL.DefineLabel()
checkElseIfIL.Emit(OpCodes.Beq, tru200)
checkElseIfIL.Emit(OpCodes.Br, fa200)
checkElseIfIL.MarkLabel(tru200)
checkElseIfIL.MarkSequencePoint(doc5, 110, 1, 110, 100)
checkElseIfIL.Emit(OpCodes.Br, label2)
checkElseIfIL.MarkSequencePoint(doc5, 111, 1, 111, 100)
checkElseIfIL.Emit(OpCodes.Br, cont200)
checkElseIfIL.MarkLabel(fa200)
checkElseIfIL.MarkSequencePoint(doc5, 112, 1, 112, 100)
checkElseIfIL.Emit(OpCodes.Br, label3)
checkElseIfIL.MarkSequencePoint(doc5, 113, 1, 113, 100)
checkElseIfIL.Emit(OpCodes.Br, cont200)
checkElseIfIL.MarkLabel(cont200)
checkElseIfIL.MarkSequencePoint(doc5, 115, 1, 115, 100)
checkElseIfIL.MarkLabel(label2)
checkElseIfIL.MarkSequencePoint(doc5, 117, 1, 117, 100)
Dim locbldr225 As LocalBuilder = checkElseIfIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer"))
locbldr225.SetLocalSymInfo("eop")
checkElseIfIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer").GetConstructor(Type.EmptyTypes))
checkElseIfIL.Emit(OpCodes.Stloc, 7)
checkElseIfIL.MarkSequencePoint(doc5, 118, 1, 118, 100)
Dim typ16(-1) As Type
checkElseIfIL.Emit(OpCodes.Ldloc, 7)
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer")
Typ03 = Typ
checkElseIfIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Expr)
ReDim Preserve typ16(UBound(typ16) + 1)
typ16(UBound(typ16)) = Typ
checkElseIfIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Optimize", typ16))
Typ = Typ03.GetMethod("Optimize", typ16).ReturnType
checkElseIfIL.Emit(OpCodes.Stloc, 3)
checkElseIfIL.MarkSequencePoint(doc5, 119, 1, 119, 100)
checkElseIfIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(ElseIfStmt)
checkElseIfIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Expr)
checkElseIfIL.Emit(OpCodes.Stfld, GetType(ElseIfStmt).GetField("Exp"))
checkElseIfIL.MarkSequencePoint(doc5, 121, 1, 121, 100)
checkElseIfIL.Emit(OpCodes.Br, cont198)
checkElseIfIL.MarkLabel(fa198)
checkElseIfIL.Emit(OpCodes.Br, cont198)
checkElseIfIL.MarkLabel(cont198)
checkElseIfIL.MarkSequencePoint(doc5, 123, 1, 123, 100)
checkElseIfIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(ElseIfStmt)
checkElseIfIL.MarkSequencePoint(doc5, 124, 1, 124, 100)
checkElseIfIL.Emit(OpCodes.Ret)
Dim typ17(-1) As Type
ReDim Preserve typ17(UBound(typ17) + 1)
typ17(UBound(typ17)) = GetType(Stmt)
ReDim Preserve typ17(UBound(typ17) + 1)
typ17(UBound(typ17)) = GetType(System.Boolean).MakeByRefType()
Dim checkDebug As MethodBuilder = StmtOptimizer.DefineMethod("checkDebug", MethodAttributes.Public, GetType(Stmt), typ17)
Dim checkDebugIL As ILGenerator = checkDebug.GetILGenerator()
Dim checkDebugparam01 As ParameterBuilder = checkDebug.DefineParameter(1, ParameterAttributes.None, "stm")
Dim checkDebugparam02 As ParameterBuilder = checkDebug.DefineParameter(2, ParameterAttributes.None, "b")
checkDebugIL.MarkSequencePoint(doc5, 127, 1, 127, 100)
Dim locbldr226 As LocalBuilder = checkDebugIL.DeclareLocal(GetType(Token))
locbldr226.SetLocalSymInfo("tok")
checkDebugIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkDebugIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkDebugIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkDebugIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkDebugIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkDebugIL.Emit(OpCodes.Stloc, 0)
checkDebugIL.MarkSequencePoint(doc5, 128, 1, 128, 100)
Dim locbldr227 As LocalBuilder = checkDebugIL.DeclareLocal(GetType(System.Type))
locbldr227.SetLocalSymInfo("typ")
checkDebugIL.Emit(OpCodes.Ldtoken, GetType(DebugTok))
Dim typ18 As Type() = {GetType(System.RuntimeTypeHandle)}
checkDebugIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ18))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ18).ReturnType
checkDebugIL.Emit(OpCodes.Stloc, 1)
checkDebugIL.MarkSequencePoint(doc5, 129, 1, 129, 100)
checkDebugIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
Dim typ19(-1) As Type
checkDebugIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkDebugIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkDebugIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ19(UBound(typ19) + 1)
typ19(UBound(typ19)) = Typ
checkDebugIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ19))
Typ = Typ03.GetMethod("IsInstanceOfType", typ19).ReturnType
checkDebugIL.Emit(OpCodes.Stobj, Typ04)
checkDebugIL.MarkSequencePoint(doc5, 130, 1, 130, 100)
Dim locbldr228 As LocalBuilder = checkDebugIL.DeclareLocal(GetType(DebugStmt))
locbldr228.SetLocalSymInfo("dbgs")
checkDebugIL.Emit(OpCodes.Newobj, GetType(DebugStmt).GetConstructor(Type.EmptyTypes))
checkDebugIL.Emit(OpCodes.Stloc, 2)
checkDebugIL.MarkSequencePoint(doc5, 131, 1, 131, 100)
checkDebugIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
checkDebugIL.Emit(OpCodes.Ldobj, Typ.GetElementType())
Typ = Typ.GetElementType()
checkDebugIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa201 As System.Reflection.Emit.Label = checkDebugIL.DefineLabel()
Dim tru201 As System.Reflection.Emit.Label = checkDebugIL.DefineLabel()
Dim cont201 As System.Reflection.Emit.Label = checkDebugIL.DefineLabel()
checkDebugIL.Emit(OpCodes.Beq, tru201)
checkDebugIL.Emit(OpCodes.Br, fa201)
checkDebugIL.MarkLabel(tru201)
checkDebugIL.MarkSequencePoint(doc5, 132, 1, 132, 100)
checkDebugIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(DebugStmt)
checkDebugIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkDebugIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
checkDebugIL.Emit(OpCodes.Stfld, GetType(DebugStmt).GetField("Line"))
checkDebugIL.MarkSequencePoint(doc5, 133, 1, 133, 100)
checkDebugIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(DebugStmt)
checkDebugIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkDebugIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkDebugIL.Emit(OpCodes.Stfld, GetType(DebugStmt).GetField("Tokens"))
checkDebugIL.MarkSequencePoint(doc5, 134, 1, 134, 100)
checkDebugIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(DebugStmt)
checkDebugIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkDebugIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkDebugIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkDebugIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkDebugIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkDebugIL.Emit(OpCodes.Stfld, GetType(DebugStmt).GetField("Opt"))
checkDebugIL.MarkSequencePoint(doc5, 135, 1, 135, 100)
checkDebugIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(DebugStmt)
Typ03 = Typ
checkDebugIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("setFlg", Type.EmptyTypes))
Typ = Typ03.GetMethod("setFlg", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
checkDebugIL.Emit(OpCodes.Pop)
End If
checkDebugIL.MarkSequencePoint(doc5, 136, 1, 136, 100)
checkDebugIL.Emit(OpCodes.Br, cont201)
checkDebugIL.MarkLabel(fa201)
checkDebugIL.Emit(OpCodes.Br, cont201)
checkDebugIL.MarkLabel(cont201)
checkDebugIL.MarkSequencePoint(doc5, 137, 1, 137, 100)
checkDebugIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(DebugStmt)
checkDebugIL.MarkSequencePoint(doc5, 138, 1, 138, 100)
checkDebugIL.Emit(OpCodes.Ret)
Dim typ21(-1) As Type
ReDim Preserve typ21(UBound(typ21) + 1)
typ21(UBound(typ21)) = GetType(Stmt)
ReDim Preserve typ21(UBound(typ21) + 1)
typ21(UBound(typ21)) = GetType(System.Boolean).MakeByRefType()
Dim checkImport As MethodBuilder = StmtOptimizer.DefineMethod("checkImport", MethodAttributes.Public, GetType(Stmt), typ21)
Dim checkImportIL As ILGenerator = checkImport.GetILGenerator()
Dim checkImportparam01 As ParameterBuilder = checkImport.DefineParameter(1, ParameterAttributes.None, "stm")
Dim checkImportparam02 As ParameterBuilder = checkImport.DefineParameter(2, ParameterAttributes.None, "b")
checkImportIL.MarkSequencePoint(doc5, 142, 1, 142, 100)
Dim locbldr229 As LocalBuilder = checkImportIL.DeclareLocal(GetType(Token))
locbldr229.SetLocalSymInfo("tok")
checkImportIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkImportIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkImportIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkImportIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkImportIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkImportIL.Emit(OpCodes.Stloc, 0)
checkImportIL.MarkSequencePoint(doc5, 143, 1, 143, 100)
Dim locbldr230 As LocalBuilder = checkImportIL.DeclareLocal(GetType(System.Type))
locbldr230.SetLocalSymInfo("typ")
checkImportIL.Emit(OpCodes.Ldtoken, GetType(ImportTok))
Dim typ22 As Type() = {GetType(System.RuntimeTypeHandle)}
checkImportIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ22))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ22).ReturnType
checkImportIL.Emit(OpCodes.Stloc, 1)
checkImportIL.MarkSequencePoint(doc5, 144, 1, 144, 100)
checkImportIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
Dim typ23(-1) As Type
checkImportIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkImportIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkImportIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ23(UBound(typ23) + 1)
typ23(UBound(typ23)) = Typ
checkImportIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ23))
Typ = Typ03.GetMethod("IsInstanceOfType", typ23).ReturnType
checkImportIL.Emit(OpCodes.Stobj, Typ04)
checkImportIL.MarkSequencePoint(doc5, 145, 1, 145, 100)
Dim locbldr231 As LocalBuilder = checkImportIL.DeclareLocal(GetType(ImportStmt))
locbldr231.SetLocalSymInfo("imps")
checkImportIL.Emit(OpCodes.Newobj, GetType(ImportStmt).GetConstructor(Type.EmptyTypes))
checkImportIL.Emit(OpCodes.Stloc, 2)
checkImportIL.MarkSequencePoint(doc5, 146, 1, 146, 100)
checkImportIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
checkImportIL.Emit(OpCodes.Ldobj, Typ.GetElementType())
Typ = Typ.GetElementType()
checkImportIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa202 As System.Reflection.Emit.Label = checkImportIL.DefineLabel()
Dim tru202 As System.Reflection.Emit.Label = checkImportIL.DefineLabel()
Dim cont202 As System.Reflection.Emit.Label = checkImportIL.DefineLabel()
checkImportIL.Emit(OpCodes.Beq, tru202)
checkImportIL.Emit(OpCodes.Br, fa202)
checkImportIL.MarkLabel(tru202)
checkImportIL.MarkSequencePoint(doc5, 147, 1, 147, 100)
checkImportIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(ImportStmt)
checkImportIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkImportIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
checkImportIL.Emit(OpCodes.Stfld, GetType(ImportStmt).GetField("Line"))
checkImportIL.MarkSequencePoint(doc5, 148, 1, 148, 100)
checkImportIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(ImportStmt)
checkImportIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkImportIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkImportIL.Emit(OpCodes.Stfld, GetType(ImportStmt).GetField("Tokens"))
checkImportIL.MarkSequencePoint(doc5, 149, 1, 149, 100)
checkImportIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(ImportStmt)
checkImportIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkImportIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkImportIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkImportIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkImportIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkImportIL.Emit(OpCodes.Stfld, GetType(ImportStmt).GetField("NS"))
checkImportIL.MarkSequencePoint(doc5, 150, 1, 150, 100)
checkImportIL.Emit(OpCodes.Br, cont202)
checkImportIL.MarkLabel(fa202)
checkImportIL.Emit(OpCodes.Br, cont202)
checkImportIL.MarkLabel(cont202)
checkImportIL.MarkSequencePoint(doc5, 151, 1, 151, 100)
checkImportIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(ImportStmt)
checkImportIL.MarkSequencePoint(doc5, 152, 1, 152, 100)
checkImportIL.Emit(OpCodes.Ret)
Dim typ24(-1) As Type
ReDim Preserve typ24(UBound(typ24) + 1)
typ24(UBound(typ24)) = GetType(Stmt)
ReDim Preserve typ24(UBound(typ24) + 1)
typ24(UBound(typ24)) = GetType(System.Boolean).MakeByRefType()
Dim checkLocimport As MethodBuilder = StmtOptimizer.DefineMethod("checkLocimport", MethodAttributes.Public, GetType(Stmt), typ24)
Dim checkLocimportIL As ILGenerator = checkLocimport.GetILGenerator()
Dim checkLocimportparam01 As ParameterBuilder = checkLocimport.DefineParameter(1, ParameterAttributes.None, "stm")
Dim checkLocimportparam02 As ParameterBuilder = checkLocimport.DefineParameter(2, ParameterAttributes.None, "b")
checkLocimportIL.MarkSequencePoint(doc5, 155, 1, 155, 100)
Dim locbldr232 As LocalBuilder = checkLocimportIL.DeclareLocal(GetType(Token))
locbldr232.SetLocalSymInfo("tok")
checkLocimportIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkLocimportIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkLocimportIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkLocimportIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkLocimportIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkLocimportIL.Emit(OpCodes.Stloc, 0)
checkLocimportIL.MarkSequencePoint(doc5, 156, 1, 156, 100)
Dim locbldr233 As LocalBuilder = checkLocimportIL.DeclareLocal(GetType(System.Type))
locbldr233.SetLocalSymInfo("typ")
checkLocimportIL.Emit(OpCodes.Ldtoken, GetType(LocimportTok))
Dim typ25 As Type() = {GetType(System.RuntimeTypeHandle)}
checkLocimportIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ25))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ25).ReturnType
checkLocimportIL.Emit(OpCodes.Stloc, 1)
checkLocimportIL.MarkSequencePoint(doc5, 157, 1, 157, 100)
checkLocimportIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
Dim typ26(-1) As Type
checkLocimportIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkLocimportIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkLocimportIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ26(UBound(typ26) + 1)
typ26(UBound(typ26)) = Typ
checkLocimportIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ26))
Typ = Typ03.GetMethod("IsInstanceOfType", typ26).ReturnType
checkLocimportIL.Emit(OpCodes.Stobj, Typ04)
checkLocimportIL.MarkSequencePoint(doc5, 158, 1, 158, 100)
Dim locbldr234 As LocalBuilder = checkLocimportIL.DeclareLocal(GetType(LocimportStmt))
locbldr234.SetLocalSymInfo("limps")
checkLocimportIL.Emit(OpCodes.Newobj, GetType(LocimportStmt).GetConstructor(Type.EmptyTypes))
checkLocimportIL.Emit(OpCodes.Stloc, 2)
checkLocimportIL.MarkSequencePoint(doc5, 159, 1, 159, 100)
checkLocimportIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
checkLocimportIL.Emit(OpCodes.Ldobj, Typ.GetElementType())
Typ = Typ.GetElementType()
checkLocimportIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa203 As System.Reflection.Emit.Label = checkLocimportIL.DefineLabel()
Dim tru203 As System.Reflection.Emit.Label = checkLocimportIL.DefineLabel()
Dim cont203 As System.Reflection.Emit.Label = checkLocimportIL.DefineLabel()
checkLocimportIL.Emit(OpCodes.Beq, tru203)
checkLocimportIL.Emit(OpCodes.Br, fa203)
checkLocimportIL.MarkLabel(tru203)
checkLocimportIL.MarkSequencePoint(doc5, 160, 1, 160, 100)
checkLocimportIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(LocimportStmt)
checkLocimportIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkLocimportIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
checkLocimportIL.Emit(OpCodes.Stfld, GetType(LocimportStmt).GetField("Line"))
checkLocimportIL.MarkSequencePoint(doc5, 161, 1, 161, 100)
checkLocimportIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(LocimportStmt)
checkLocimportIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkLocimportIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkLocimportIL.Emit(OpCodes.Stfld, GetType(LocimportStmt).GetField("Tokens"))
checkLocimportIL.MarkSequencePoint(doc5, 162, 1, 162, 100)
checkLocimportIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(LocimportStmt)
checkLocimportIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkLocimportIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkLocimportIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkLocimportIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkLocimportIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkLocimportIL.Emit(OpCodes.Stfld, GetType(LocimportStmt).GetField("NS"))
checkLocimportIL.MarkSequencePoint(doc5, 163, 1, 163, 100)
checkLocimportIL.Emit(OpCodes.Br, cont203)
checkLocimportIL.MarkLabel(fa203)
checkLocimportIL.Emit(OpCodes.Br, cont203)
checkLocimportIL.MarkLabel(cont203)
checkLocimportIL.MarkSequencePoint(doc5, 164, 1, 164, 100)
checkLocimportIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(LocimportStmt)
checkLocimportIL.MarkSequencePoint(doc5, 165, 1, 165, 100)
checkLocimportIL.Emit(OpCodes.Ret)
Dim typ27(-1) As Type
ReDim Preserve typ27(UBound(typ27) + 1)
typ27(UBound(typ27)) = GetType(Stmt)
ReDim Preserve typ27(UBound(typ27) + 1)
typ27(UBound(typ27)) = GetType(System.Boolean).MakeByRefType()
Dim checkCmt As MethodBuilder = StmtOptimizer.DefineMethod("checkCmt", MethodAttributes.Public, GetType(Stmt), typ27)
Dim checkCmtIL As ILGenerator = checkCmt.GetILGenerator()
Dim checkCmtparam01 As ParameterBuilder = checkCmt.DefineParameter(1, ParameterAttributes.None, "stm")
Dim checkCmtparam02 As ParameterBuilder = checkCmt.DefineParameter(2, ParameterAttributes.None, "b")
checkCmtIL.MarkSequencePoint(doc5, 168, 1, 168, 100)
Dim locbldr235 As LocalBuilder = checkCmtIL.DeclareLocal(GetType(Token))
locbldr235.SetLocalSymInfo("tok")
checkCmtIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkCmtIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkCmtIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkCmtIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkCmtIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkCmtIL.Emit(OpCodes.Stloc, 0)
checkCmtIL.MarkSequencePoint(doc5, 169, 1, 169, 100)
Dim locbldr236 As LocalBuilder = checkCmtIL.DeclareLocal(GetType(System.Type))
locbldr236.SetLocalSymInfo("typ")
checkCmtIL.Emit(OpCodes.Ldtoken, GetType(CommentTok))
Dim typ28 As Type() = {GetType(System.RuntimeTypeHandle)}
checkCmtIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ28))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ28).ReturnType
checkCmtIL.Emit(OpCodes.Stloc, 1)
checkCmtIL.MarkSequencePoint(doc5, 170, 1, 170, 100)
checkCmtIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
Dim typ29(-1) As Type
checkCmtIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkCmtIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkCmtIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ29(UBound(typ29) + 1)
typ29(UBound(typ29)) = Typ
checkCmtIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ29))
Typ = Typ03.GetMethod("IsInstanceOfType", typ29).ReturnType
checkCmtIL.Emit(OpCodes.Stobj, Typ04)
checkCmtIL.MarkSequencePoint(doc5, 171, 1, 171, 100)
Dim locbldr237 As LocalBuilder = checkCmtIL.DeclareLocal(GetType(CommentStmt))
locbldr237.SetLocalSymInfo("cmts")
checkCmtIL.Emit(OpCodes.Newobj, GetType(CommentStmt).GetConstructor(Type.EmptyTypes))
checkCmtIL.Emit(OpCodes.Stloc, 2)
checkCmtIL.MarkSequencePoint(doc5, 172, 1, 172, 100)
checkCmtIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
checkCmtIL.Emit(OpCodes.Ldobj, Typ.GetElementType())
Typ = Typ.GetElementType()
checkCmtIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa204 As System.Reflection.Emit.Label = checkCmtIL.DefineLabel()
Dim tru204 As System.Reflection.Emit.Label = checkCmtIL.DefineLabel()
Dim cont204 As System.Reflection.Emit.Label = checkCmtIL.DefineLabel()
checkCmtIL.Emit(OpCodes.Beq, tru204)
checkCmtIL.Emit(OpCodes.Br, fa204)
checkCmtIL.MarkLabel(tru204)
checkCmtIL.MarkSequencePoint(doc5, 173, 1, 173, 100)
checkCmtIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(CommentStmt)
checkCmtIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkCmtIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
checkCmtIL.Emit(OpCodes.Stfld, GetType(CommentStmt).GetField("Line"))
checkCmtIL.MarkSequencePoint(doc5, 174, 1, 174, 100)
checkCmtIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(CommentStmt)
checkCmtIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkCmtIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkCmtIL.Emit(OpCodes.Stfld, GetType(CommentStmt).GetField("Tokens"))
checkCmtIL.MarkSequencePoint(doc5, 175, 1, 175, 100)
checkCmtIL.Emit(OpCodes.Br, cont204)
checkCmtIL.MarkLabel(fa204)
checkCmtIL.Emit(OpCodes.Br, cont204)
checkCmtIL.MarkLabel(cont204)
checkCmtIL.MarkSequencePoint(doc5, 176, 1, 176, 100)
checkCmtIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(CommentStmt)
checkCmtIL.MarkSequencePoint(doc5, 177, 1, 177, 100)
checkCmtIL.Emit(OpCodes.Ret)
Dim typ30(-1) As Type
ReDim Preserve typ30(UBound(typ30) + 1)
typ30(UBound(typ30)) = GetType(Stmt)
ReDim Preserve typ30(UBound(typ30) + 1)
typ30(UBound(typ30)) = GetType(System.Boolean).MakeByRefType()
Dim checkElse As MethodBuilder = StmtOptimizer.DefineMethod("checkElse", MethodAttributes.Public, GetType(Stmt), typ30)
Dim checkElseIL As ILGenerator = checkElse.GetILGenerator()
Dim checkElseparam01 As ParameterBuilder = checkElse.DefineParameter(1, ParameterAttributes.None, "stm")
Dim checkElseparam02 As ParameterBuilder = checkElse.DefineParameter(2, ParameterAttributes.None, "b")
checkElseIL.MarkSequencePoint(doc5, 180, 1, 180, 100)
checkElseIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkElseIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkElseIL.Emit(OpCodes.Ldlen)
checkElseIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
checkElseIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
Dim fa205 As System.Reflection.Emit.Label = checkElseIL.DefineLabel()
Dim tru205 As System.Reflection.Emit.Label = checkElseIL.DefineLabel()
Dim cont205 As System.Reflection.Emit.Label = checkElseIL.DefineLabel()
checkElseIL.Emit(OpCodes.Blt, tru205)
checkElseIL.Emit(OpCodes.Br, fa205)
checkElseIL.MarkLabel(tru205)
checkElseIL.MarkSequencePoint(doc5, 182, 1, 182, 100)
Dim locbldr238 As LocalBuilder = checkElseIL.DeclareLocal(GetType(Token))
locbldr238.SetLocalSymInfo("tok1")
checkElseIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkElseIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkElseIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkElseIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkElseIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkElseIL.Emit(OpCodes.Stloc, 0)
checkElseIL.MarkSequencePoint(doc5, 183, 1, 183, 100)
Dim locbldr239 As LocalBuilder = checkElseIL.DeclareLocal(GetType(System.Type))
locbldr239.SetLocalSymInfo("typ1")
checkElseIL.Emit(OpCodes.Ldtoken, GetType(ElseTok))
Dim typ31 As Type() = {GetType(System.RuntimeTypeHandle)}
checkElseIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ31))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ31).ReturnType
checkElseIL.Emit(OpCodes.Stloc, 1)
checkElseIL.MarkSequencePoint(doc5, 184, 1, 184, 100)
Dim locbldr240 As LocalBuilder = checkElseIL.DeclareLocal(GetType(System.Boolean))
locbldr240.SetLocalSymInfo("b1")
Dim typ32(-1) As Type
checkElseIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkElseIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkElseIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ32(UBound(typ32) + 1)
typ32(UBound(typ32)) = Typ
checkElseIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ32))
Typ = Typ03.GetMethod("IsInstanceOfType", typ32).ReturnType
checkElseIL.Emit(OpCodes.Stloc, 2)
checkElseIL.MarkSequencePoint(doc5, 186, 1, 186, 100)
checkElseIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
checkElseIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
checkElseIL.Emit(OpCodes.Stobj, Typ04)
checkElseIL.MarkSequencePoint(doc5, 188, 1, 188, 100)
Dim locbldr241 As LocalBuilder = checkElseIL.DeclareLocal(GetType(ElseStmt))
locbldr241.SetLocalSymInfo("els")
checkElseIL.Emit(OpCodes.Newobj, GetType(ElseStmt).GetConstructor(Type.EmptyTypes))
checkElseIL.Emit(OpCodes.Stloc, 3)
checkElseIL.MarkSequencePoint(doc5, 189, 1, 189, 100)
checkElseIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
checkElseIL.Emit(OpCodes.Ldobj, Typ.GetElementType())
Typ = Typ.GetElementType()
checkElseIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa206 As System.Reflection.Emit.Label = checkElseIL.DefineLabel()
Dim tru206 As System.Reflection.Emit.Label = checkElseIL.DefineLabel()
Dim cont206 As System.Reflection.Emit.Label = checkElseIL.DefineLabel()
checkElseIL.Emit(OpCodes.Beq, tru206)
checkElseIL.Emit(OpCodes.Br, fa206)
checkElseIL.MarkLabel(tru206)
checkElseIL.MarkSequencePoint(doc5, 190, 1, 190, 100)
checkElseIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(ElseStmt)
checkElseIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkElseIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
checkElseIL.Emit(OpCodes.Stfld, GetType(ElseStmt).GetField("Line"))
checkElseIL.MarkSequencePoint(doc5, 191, 1, 191, 100)
checkElseIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(ElseStmt)
checkElseIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkElseIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkElseIL.Emit(OpCodes.Stfld, GetType(ElseStmt).GetField("Tokens"))
checkElseIL.MarkSequencePoint(doc5, 192, 1, 192, 100)
checkElseIL.Emit(OpCodes.Br, cont206)
checkElseIL.MarkLabel(fa206)
checkElseIL.Emit(OpCodes.Br, cont206)
checkElseIL.MarkLabel(cont206)
checkElseIL.MarkSequencePoint(doc5, 193, 1, 193, 100)
checkElseIL.Emit(OpCodes.Br, cont205)
checkElseIL.MarkLabel(fa205)
checkElseIL.Emit(OpCodes.Br, cont205)
checkElseIL.MarkLabel(cont205)
checkElseIL.MarkSequencePoint(doc5, 194, 1, 194, 100)
checkElseIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(ElseStmt)
checkElseIL.MarkSequencePoint(doc5, 195, 1, 195, 100)
checkElseIL.Emit(OpCodes.Ret)
Dim typ33(-1) As Type
ReDim Preserve typ33(UBound(typ33) + 1)
typ33(UBound(typ33)) = GetType(Stmt)
ReDim Preserve typ33(UBound(typ33) + 1)
typ33(UBound(typ33)) = GetType(System.Boolean).MakeByRefType()
Dim checkEndIf As MethodBuilder = StmtOptimizer.DefineMethod("checkEndIf", MethodAttributes.Public, GetType(Stmt), typ33)
Dim checkEndIfIL As ILGenerator = checkEndIf.GetILGenerator()
Dim checkEndIfparam01 As ParameterBuilder = checkEndIf.DefineParameter(1, ParameterAttributes.None, "stm")
Dim checkEndIfparam02 As ParameterBuilder = checkEndIf.DefineParameter(2, ParameterAttributes.None, "b")
checkEndIfIL.MarkSequencePoint(doc5, 198, 1, 198, 100)
checkEndIfIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkEndIfIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkEndIfIL.Emit(OpCodes.Ldlen)
checkEndIfIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
checkEndIfIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
Dim fa207 As System.Reflection.Emit.Label = checkEndIfIL.DefineLabel()
Dim tru207 As System.Reflection.Emit.Label = checkEndIfIL.DefineLabel()
Dim cont207 As System.Reflection.Emit.Label = checkEndIfIL.DefineLabel()
checkEndIfIL.Emit(OpCodes.Bge, tru207)
checkEndIfIL.Emit(OpCodes.Br, fa207)
checkEndIfIL.MarkLabel(tru207)
checkEndIfIL.MarkSequencePoint(doc5, 200, 1, 200, 100)
Dim locbldr242 As LocalBuilder = checkEndIfIL.DeclareLocal(GetType(Token))
locbldr242.SetLocalSymInfo("tok1")
checkEndIfIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkEndIfIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkEndIfIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkEndIfIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkEndIfIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkEndIfIL.Emit(OpCodes.Stloc, 0)
checkEndIfIL.MarkSequencePoint(doc5, 201, 1, 201, 100)
Dim locbldr243 As LocalBuilder = checkEndIfIL.DeclareLocal(GetType(System.Type))
locbldr243.SetLocalSymInfo("typ1")
checkEndIfIL.Emit(OpCodes.Ldtoken, GetType(EndTok))
Dim typ34 As Type() = {GetType(System.RuntimeTypeHandle)}
checkEndIfIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ34))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ34).ReturnType
checkEndIfIL.Emit(OpCodes.Stloc, 1)
checkEndIfIL.MarkSequencePoint(doc5, 202, 1, 202, 100)
Dim locbldr244 As LocalBuilder = checkEndIfIL.DeclareLocal(GetType(System.Boolean))
locbldr244.SetLocalSymInfo("b1")
Dim typ35(-1) As Type
checkEndIfIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkEndIfIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkEndIfIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ35(UBound(typ35) + 1)
typ35(UBound(typ35)) = Typ
checkEndIfIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ35))
Typ = Typ03.GetMethod("IsInstanceOfType", typ35).ReturnType
checkEndIfIL.Emit(OpCodes.Stloc, 2)
checkEndIfIL.MarkSequencePoint(doc5, 204, 1, 204, 100)
Dim locbldr245 As LocalBuilder = checkEndIfIL.DeclareLocal(GetType(Token))
locbldr245.SetLocalSymInfo("tok2")
checkEndIfIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkEndIfIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkEndIfIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkEndIfIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkEndIfIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkEndIfIL.Emit(OpCodes.Stloc, 3)
checkEndIfIL.MarkSequencePoint(doc5, 205, 1, 205, 100)
Dim locbldr246 As LocalBuilder = checkEndIfIL.DeclareLocal(GetType(System.Type))
locbldr246.SetLocalSymInfo("typ2")
checkEndIfIL.Emit(OpCodes.Ldtoken, GetType(IfTok))
Dim typ36 As Type() = {GetType(System.RuntimeTypeHandle)}
checkEndIfIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ36))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ36).ReturnType
checkEndIfIL.Emit(OpCodes.Stloc, 4)
checkEndIfIL.MarkSequencePoint(doc5, 206, 1, 206, 100)
Dim locbldr247 As LocalBuilder = checkEndIfIL.DeclareLocal(GetType(System.Boolean))
locbldr247.SetLocalSymInfo("b2")
Dim typ37(-1) As Type
checkEndIfIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Type)
Typ03 = Typ
checkEndIfIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Token)
checkEndIfIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ37(UBound(typ37) + 1)
typ37(UBound(typ37)) = Typ
checkEndIfIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ37))
Typ = Typ03.GetMethod("IsInstanceOfType", typ37).ReturnType
checkEndIfIL.Emit(OpCodes.Stloc, 5)
checkEndIfIL.MarkSequencePoint(doc5, 208, 1, 208, 100)
checkEndIfIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
checkEndIfIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
checkEndIfIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
checkEndIfIL.Emit(OpCodes.And)
checkEndIfIL.Emit(OpCodes.Stobj, Typ04)
checkEndIfIL.MarkSequencePoint(doc5, 210, 1, 210, 100)
Dim locbldr248 As LocalBuilder = checkEndIfIL.DeclareLocal(GetType(EndIfStmt))
locbldr248.SetLocalSymInfo("eifs")
checkEndIfIL.Emit(OpCodes.Newobj, GetType(EndIfStmt).GetConstructor(Type.EmptyTypes))
checkEndIfIL.Emit(OpCodes.Stloc, 6)
checkEndIfIL.MarkSequencePoint(doc5, 211, 1, 211, 100)
checkEndIfIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
checkEndIfIL.Emit(OpCodes.Ldobj, Typ.GetElementType())
Typ = Typ.GetElementType()
checkEndIfIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa208 As System.Reflection.Emit.Label = checkEndIfIL.DefineLabel()
Dim tru208 As System.Reflection.Emit.Label = checkEndIfIL.DefineLabel()
Dim cont208 As System.Reflection.Emit.Label = checkEndIfIL.DefineLabel()
checkEndIfIL.Emit(OpCodes.Beq, tru208)
checkEndIfIL.Emit(OpCodes.Br, fa208)
checkEndIfIL.MarkLabel(tru208)
checkEndIfIL.MarkSequencePoint(doc5, 212, 1, 212, 100)
checkEndIfIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(EndIfStmt)
checkEndIfIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkEndIfIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
checkEndIfIL.Emit(OpCodes.Stfld, GetType(EndIfStmt).GetField("Line"))
checkEndIfIL.MarkSequencePoint(doc5, 213, 1, 213, 100)
checkEndIfIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(EndIfStmt)
checkEndIfIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkEndIfIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkEndIfIL.Emit(OpCodes.Stfld, GetType(EndIfStmt).GetField("Tokens"))
checkEndIfIL.MarkSequencePoint(doc5, 214, 1, 214, 100)
checkEndIfIL.Emit(OpCodes.Br, cont208)
checkEndIfIL.MarkLabel(fa208)
checkEndIfIL.Emit(OpCodes.Br, cont208)
checkEndIfIL.MarkLabel(cont208)
checkEndIfIL.MarkSequencePoint(doc5, 215, 1, 215, 100)
checkEndIfIL.Emit(OpCodes.Br, cont207)
checkEndIfIL.MarkLabel(fa207)
checkEndIfIL.Emit(OpCodes.Br, cont207)
checkEndIfIL.MarkLabel(cont207)
checkEndIfIL.MarkSequencePoint(doc5, 216, 1, 216, 100)
checkEndIfIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(EndIfStmt)
checkEndIfIL.MarkSequencePoint(doc5, 217, 1, 217, 100)
checkEndIfIL.Emit(OpCodes.Ret)
Dim typ38(-1) As Type
ReDim Preserve typ38(UBound(typ38) + 1)
typ38(UBound(typ38)) = GetType(Stmt)
ReDim Preserve typ38(UBound(typ38) + 1)
typ38(UBound(typ38)) = GetType(System.Boolean).MakeByRefType()
Dim checkEndMtd As MethodBuilder = StmtOptimizer.DefineMethod("checkEndMtd", MethodAttributes.Public, GetType(Stmt), typ38)
Dim checkEndMtdIL As ILGenerator = checkEndMtd.GetILGenerator()
Dim checkEndMtdparam01 As ParameterBuilder = checkEndMtd.DefineParameter(1, ParameterAttributes.None, "stm")
Dim checkEndMtdparam02 As ParameterBuilder = checkEndMtd.DefineParameter(2, ParameterAttributes.None, "b")
checkEndMtdIL.MarkSequencePoint(doc5, 221, 1, 221, 100)
checkEndMtdIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkEndMtdIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkEndMtdIL.Emit(OpCodes.Ldlen)
checkEndMtdIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
checkEndMtdIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
Dim fa209 As System.Reflection.Emit.Label = checkEndMtdIL.DefineLabel()
Dim tru209 As System.Reflection.Emit.Label = checkEndMtdIL.DefineLabel()
Dim cont209 As System.Reflection.Emit.Label = checkEndMtdIL.DefineLabel()
checkEndMtdIL.Emit(OpCodes.Bge, tru209)
checkEndMtdIL.Emit(OpCodes.Br, fa209)
checkEndMtdIL.MarkLabel(tru209)
checkEndMtdIL.MarkSequencePoint(doc5, 223, 1, 223, 100)
Dim locbldr249 As LocalBuilder = checkEndMtdIL.DeclareLocal(GetType(Token))
locbldr249.SetLocalSymInfo("tok1")
checkEndMtdIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkEndMtdIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkEndMtdIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkEndMtdIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkEndMtdIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkEndMtdIL.Emit(OpCodes.Stloc, 0)
checkEndMtdIL.MarkSequencePoint(doc5, 224, 1, 224, 100)
Dim locbldr250 As LocalBuilder = checkEndMtdIL.DeclareLocal(GetType(System.Type))
locbldr250.SetLocalSymInfo("typ1")
checkEndMtdIL.Emit(OpCodes.Ldtoken, GetType(EndTok))
Dim typ39 As Type() = {GetType(System.RuntimeTypeHandle)}
checkEndMtdIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ39))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ39).ReturnType
checkEndMtdIL.Emit(OpCodes.Stloc, 1)
checkEndMtdIL.MarkSequencePoint(doc5, 225, 1, 225, 100)
Dim locbldr251 As LocalBuilder = checkEndMtdIL.DeclareLocal(GetType(System.Boolean))
locbldr251.SetLocalSymInfo("b1")
Dim typ40(-1) As Type
checkEndMtdIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkEndMtdIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkEndMtdIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ40(UBound(typ40) + 1)
typ40(UBound(typ40)) = Typ
checkEndMtdIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ40))
Typ = Typ03.GetMethod("IsInstanceOfType", typ40).ReturnType
checkEndMtdIL.Emit(OpCodes.Stloc, 2)
checkEndMtdIL.MarkSequencePoint(doc5, 227, 1, 227, 100)
Dim locbldr252 As LocalBuilder = checkEndMtdIL.DeclareLocal(GetType(Token))
locbldr252.SetLocalSymInfo("tok2")
checkEndMtdIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkEndMtdIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkEndMtdIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkEndMtdIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkEndMtdIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkEndMtdIL.Emit(OpCodes.Stloc, 3)
checkEndMtdIL.MarkSequencePoint(doc5, 228, 1, 228, 100)
Dim locbldr253 As LocalBuilder = checkEndMtdIL.DeclareLocal(GetType(System.Type))
locbldr253.SetLocalSymInfo("typ2")
checkEndMtdIL.Emit(OpCodes.Ldtoken, GetType(MethodTok))
Dim typ41 As Type() = {GetType(System.RuntimeTypeHandle)}
checkEndMtdIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ41))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ41).ReturnType
checkEndMtdIL.Emit(OpCodes.Stloc, 4)
checkEndMtdIL.MarkSequencePoint(doc5, 229, 1, 229, 100)
Dim locbldr254 As LocalBuilder = checkEndMtdIL.DeclareLocal(GetType(System.Boolean))
locbldr254.SetLocalSymInfo("b2")
Dim typ42(-1) As Type
checkEndMtdIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Type)
Typ03 = Typ
checkEndMtdIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Token)
checkEndMtdIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ42(UBound(typ42) + 1)
typ42(UBound(typ42)) = Typ
checkEndMtdIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ42))
Typ = Typ03.GetMethod("IsInstanceOfType", typ42).ReturnType
checkEndMtdIL.Emit(OpCodes.Stloc, 5)
checkEndMtdIL.MarkSequencePoint(doc5, 231, 1, 231, 100)
checkEndMtdIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
checkEndMtdIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
checkEndMtdIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
checkEndMtdIL.Emit(OpCodes.And)
checkEndMtdIL.Emit(OpCodes.Stobj, Typ04)
checkEndMtdIL.MarkSequencePoint(doc5, 233, 1, 233, 100)
Dim locbldr255 As LocalBuilder = checkEndMtdIL.DeclareLocal(GetType(EndMethodStmt))
locbldr255.SetLocalSymInfo("ems")
checkEndMtdIL.Emit(OpCodes.Newobj, GetType(EndMethodStmt).GetConstructor(Type.EmptyTypes))
checkEndMtdIL.Emit(OpCodes.Stloc, 6)
checkEndMtdIL.MarkSequencePoint(doc5, 234, 1, 234, 100)
checkEndMtdIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
checkEndMtdIL.Emit(OpCodes.Ldobj, Typ.GetElementType())
Typ = Typ.GetElementType()
checkEndMtdIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa210 As System.Reflection.Emit.Label = checkEndMtdIL.DefineLabel()
Dim tru210 As System.Reflection.Emit.Label = checkEndMtdIL.DefineLabel()
Dim cont210 As System.Reflection.Emit.Label = checkEndMtdIL.DefineLabel()
checkEndMtdIL.Emit(OpCodes.Beq, tru210)
checkEndMtdIL.Emit(OpCodes.Br, fa210)
checkEndMtdIL.MarkLabel(tru210)
checkEndMtdIL.MarkSequencePoint(doc5, 235, 1, 235, 100)
checkEndMtdIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(EndMethodStmt)
checkEndMtdIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkEndMtdIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
checkEndMtdIL.Emit(OpCodes.Stfld, GetType(EndMethodStmt).GetField("Line"))
checkEndMtdIL.MarkSequencePoint(doc5, 236, 1, 236, 100)
checkEndMtdIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(EndMethodStmt)
checkEndMtdIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkEndMtdIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkEndMtdIL.Emit(OpCodes.Stfld, GetType(EndMethodStmt).GetField("Tokens"))
checkEndMtdIL.MarkSequencePoint(doc5, 237, 1, 237, 100)
checkEndMtdIL.Emit(OpCodes.Br, cont210)
checkEndMtdIL.MarkLabel(fa210)
checkEndMtdIL.Emit(OpCodes.Br, cont210)
checkEndMtdIL.MarkLabel(cont210)
checkEndMtdIL.MarkSequencePoint(doc5, 238, 1, 238, 100)
checkEndMtdIL.Emit(OpCodes.Br, cont209)
checkEndMtdIL.MarkLabel(fa209)
checkEndMtdIL.Emit(OpCodes.Br, cont209)
checkEndMtdIL.MarkLabel(cont209)
checkEndMtdIL.MarkSequencePoint(doc5, 239, 1, 239, 100)
checkEndMtdIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(EndMethodStmt)
checkEndMtdIL.MarkSequencePoint(doc5, 240, 1, 240, 100)
checkEndMtdIL.Emit(OpCodes.Ret)
Dim typ43(-1) As Type
ReDim Preserve typ43(UBound(typ43) + 1)
typ43(UBound(typ43)) = GetType(Stmt)
ReDim Preserve typ43(UBound(typ43) + 1)
typ43(UBound(typ43)) = GetType(System.Boolean).MakeByRefType()
Dim checkEndCls As MethodBuilder = StmtOptimizer.DefineMethod("checkEndCls", MethodAttributes.Public, GetType(Stmt), typ43)
Dim checkEndClsIL As ILGenerator = checkEndCls.GetILGenerator()
Dim checkEndClsparam01 As ParameterBuilder = checkEndCls.DefineParameter(1, ParameterAttributes.None, "stm")
Dim checkEndClsparam02 As ParameterBuilder = checkEndCls.DefineParameter(2, ParameterAttributes.None, "b")
checkEndClsIL.MarkSequencePoint(doc5, 243, 1, 243, 100)
checkEndClsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkEndClsIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkEndClsIL.Emit(OpCodes.Ldlen)
checkEndClsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
checkEndClsIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
Dim fa211 As System.Reflection.Emit.Label = checkEndClsIL.DefineLabel()
Dim tru211 As System.Reflection.Emit.Label = checkEndClsIL.DefineLabel()
Dim cont211 As System.Reflection.Emit.Label = checkEndClsIL.DefineLabel()
checkEndClsIL.Emit(OpCodes.Bge, tru211)
checkEndClsIL.Emit(OpCodes.Br, fa211)
checkEndClsIL.MarkLabel(tru211)
checkEndClsIL.MarkSequencePoint(doc5, 245, 1, 245, 100)
Dim locbldr256 As LocalBuilder = checkEndClsIL.DeclareLocal(GetType(Token))
locbldr256.SetLocalSymInfo("tok1")
checkEndClsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkEndClsIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkEndClsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkEndClsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkEndClsIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkEndClsIL.Emit(OpCodes.Stloc, 0)
checkEndClsIL.MarkSequencePoint(doc5, 246, 1, 246, 100)
Dim locbldr257 As LocalBuilder = checkEndClsIL.DeclareLocal(GetType(System.Type))
locbldr257.SetLocalSymInfo("typ1")
checkEndClsIL.Emit(OpCodes.Ldtoken, GetType(EndTok))
Dim typ44 As Type() = {GetType(System.RuntimeTypeHandle)}
checkEndClsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ44))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ44).ReturnType
checkEndClsIL.Emit(OpCodes.Stloc, 1)
checkEndClsIL.MarkSequencePoint(doc5, 247, 1, 247, 100)
Dim locbldr258 As LocalBuilder = checkEndClsIL.DeclareLocal(GetType(System.Boolean))
locbldr258.SetLocalSymInfo("b1")
Dim typ45(-1) As Type
checkEndClsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkEndClsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkEndClsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ45(UBound(typ45) + 1)
typ45(UBound(typ45)) = Typ
checkEndClsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ45))
Typ = Typ03.GetMethod("IsInstanceOfType", typ45).ReturnType
checkEndClsIL.Emit(OpCodes.Stloc, 2)
checkEndClsIL.MarkSequencePoint(doc5, 249, 1, 249, 100)
Dim locbldr259 As LocalBuilder = checkEndClsIL.DeclareLocal(GetType(Token))
locbldr259.SetLocalSymInfo("tok2")
checkEndClsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkEndClsIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkEndClsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkEndClsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkEndClsIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkEndClsIL.Emit(OpCodes.Stloc, 3)
checkEndClsIL.MarkSequencePoint(doc5, 250, 1, 250, 100)
Dim locbldr260 As LocalBuilder = checkEndClsIL.DeclareLocal(GetType(System.Type))
locbldr260.SetLocalSymInfo("typ2")
checkEndClsIL.Emit(OpCodes.Ldtoken, GetType(ClassTok))
Dim typ46 As Type() = {GetType(System.RuntimeTypeHandle)}
checkEndClsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ46))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ46).ReturnType
checkEndClsIL.Emit(OpCodes.Stloc, 4)
checkEndClsIL.MarkSequencePoint(doc5, 251, 1, 251, 100)
Dim locbldr261 As LocalBuilder = checkEndClsIL.DeclareLocal(GetType(System.Boolean))
locbldr261.SetLocalSymInfo("b2")
Dim typ47(-1) As Type
checkEndClsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Type)
Typ03 = Typ
checkEndClsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Token)
checkEndClsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ47(UBound(typ47) + 1)
typ47(UBound(typ47)) = Typ
checkEndClsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ47))
Typ = Typ03.GetMethod("IsInstanceOfType", typ47).ReturnType
checkEndClsIL.Emit(OpCodes.Stloc, 5)
checkEndClsIL.MarkSequencePoint(doc5, 253, 1, 253, 100)
checkEndClsIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
checkEndClsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
checkEndClsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
checkEndClsIL.Emit(OpCodes.And)
checkEndClsIL.Emit(OpCodes.Stobj, Typ04)
checkEndClsIL.MarkSequencePoint(doc5, 255, 1, 255, 100)
Dim locbldr262 As LocalBuilder = checkEndClsIL.DeclareLocal(GetType(EndClassStmt))
locbldr262.SetLocalSymInfo("ecs")
checkEndClsIL.Emit(OpCodes.Newobj, GetType(EndClassStmt).GetConstructor(Type.EmptyTypes))
checkEndClsIL.Emit(OpCodes.Stloc, 6)
checkEndClsIL.MarkSequencePoint(doc5, 256, 1, 256, 100)
checkEndClsIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
checkEndClsIL.Emit(OpCodes.Ldobj, Typ.GetElementType())
Typ = Typ.GetElementType()
checkEndClsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa212 As System.Reflection.Emit.Label = checkEndClsIL.DefineLabel()
Dim tru212 As System.Reflection.Emit.Label = checkEndClsIL.DefineLabel()
Dim cont212 As System.Reflection.Emit.Label = checkEndClsIL.DefineLabel()
checkEndClsIL.Emit(OpCodes.Beq, tru212)
checkEndClsIL.Emit(OpCodes.Br, fa212)
checkEndClsIL.MarkLabel(tru212)
checkEndClsIL.MarkSequencePoint(doc5, 257, 1, 257, 100)
checkEndClsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(EndClassStmt)
checkEndClsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkEndClsIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
checkEndClsIL.Emit(OpCodes.Stfld, GetType(EndClassStmt).GetField("Line"))
checkEndClsIL.MarkSequencePoint(doc5, 258, 1, 258, 100)
checkEndClsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(EndClassStmt)
checkEndClsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkEndClsIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkEndClsIL.Emit(OpCodes.Stfld, GetType(EndClassStmt).GetField("Tokens"))
checkEndClsIL.MarkSequencePoint(doc5, 259, 1, 259, 100)
checkEndClsIL.Emit(OpCodes.Br, cont212)
checkEndClsIL.MarkLabel(fa212)
checkEndClsIL.Emit(OpCodes.Br, cont212)
checkEndClsIL.MarkLabel(cont212)
checkEndClsIL.MarkSequencePoint(doc5, 260, 1, 260, 100)
checkEndClsIL.Emit(OpCodes.Br, cont211)
checkEndClsIL.MarkLabel(fa211)
checkEndClsIL.Emit(OpCodes.Br, cont211)
checkEndClsIL.MarkLabel(cont211)
checkEndClsIL.MarkSequencePoint(doc5, 261, 1, 261, 100)
checkEndClsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(EndClassStmt)
checkEndClsIL.MarkSequencePoint(doc5, 262, 1, 262, 100)
checkEndClsIL.Emit(OpCodes.Ret)
Dim typ48(-1) As Type
ReDim Preserve typ48(UBound(typ48) + 1)
typ48(UBound(typ48)) = GetType(Stmt)
ReDim Preserve typ48(UBound(typ48) + 1)
typ48(UBound(typ48)) = GetType(System.Boolean).MakeByRefType()
Dim checkAssembly As MethodBuilder = StmtOptimizer.DefineMethod("checkAssembly", MethodAttributes.Public, GetType(Stmt), typ48)
Dim checkAssemblyIL As ILGenerator = checkAssembly.GetILGenerator()
Dim checkAssemblyparam01 As ParameterBuilder = checkAssembly.DefineParameter(1, ParameterAttributes.None, "stm")
Dim checkAssemblyparam02 As ParameterBuilder = checkAssembly.DefineParameter(2, ParameterAttributes.None, "b")
checkAssemblyIL.MarkSequencePoint(doc5, 265, 1, 265, 100)
Dim locbldr263 As LocalBuilder = checkAssemblyIL.DeclareLocal(GetType(Token))
locbldr263.SetLocalSymInfo("tok")
checkAssemblyIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkAssemblyIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkAssemblyIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkAssemblyIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkAssemblyIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkAssemblyIL.Emit(OpCodes.Stloc, 0)
checkAssemblyIL.MarkSequencePoint(doc5, 266, 1, 266, 100)
Dim locbldr264 As LocalBuilder = checkAssemblyIL.DeclareLocal(GetType(System.Type))
locbldr264.SetLocalSymInfo("typ")
checkAssemblyIL.Emit(OpCodes.Ldtoken, GetType(AssemblyTok))
Dim typ49 As Type() = {GetType(System.RuntimeTypeHandle)}
checkAssemblyIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ49))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ49).ReturnType
checkAssemblyIL.Emit(OpCodes.Stloc, 1)
checkAssemblyIL.MarkSequencePoint(doc5, 267, 1, 267, 100)
checkAssemblyIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
Dim typ50(-1) As Type
checkAssemblyIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkAssemblyIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkAssemblyIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ50(UBound(typ50) + 1)
typ50(UBound(typ50)) = Typ
checkAssemblyIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ50))
Typ = Typ03.GetMethod("IsInstanceOfType", typ50).ReturnType
checkAssemblyIL.Emit(OpCodes.Stobj, Typ04)
checkAssemblyIL.MarkSequencePoint(doc5, 268, 1, 268, 100)
Dim locbldr265 As LocalBuilder = checkAssemblyIL.DeclareLocal(GetType(AssemblyStmt))
locbldr265.SetLocalSymInfo("asms")
checkAssemblyIL.Emit(OpCodes.Newobj, GetType(AssemblyStmt).GetConstructor(Type.EmptyTypes))
checkAssemblyIL.Emit(OpCodes.Stloc, 2)
checkAssemblyIL.MarkSequencePoint(doc5, 269, 1, 269, 100)
checkAssemblyIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
checkAssemblyIL.Emit(OpCodes.Ldobj, Typ.GetElementType())
Typ = Typ.GetElementType()
checkAssemblyIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa213 As System.Reflection.Emit.Label = checkAssemblyIL.DefineLabel()
Dim tru213 As System.Reflection.Emit.Label = checkAssemblyIL.DefineLabel()
Dim cont213 As System.Reflection.Emit.Label = checkAssemblyIL.DefineLabel()
checkAssemblyIL.Emit(OpCodes.Beq, tru213)
checkAssemblyIL.Emit(OpCodes.Br, fa213)
checkAssemblyIL.MarkLabel(tru213)
checkAssemblyIL.MarkSequencePoint(doc5, 270, 1, 270, 100)
checkAssemblyIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(AssemblyStmt)
checkAssemblyIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkAssemblyIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
checkAssemblyIL.Emit(OpCodes.Stfld, GetType(AssemblyStmt).GetField("Line"))
checkAssemblyIL.MarkSequencePoint(doc5, 271, 1, 271, 100)
checkAssemblyIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(AssemblyStmt)
checkAssemblyIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkAssemblyIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkAssemblyIL.Emit(OpCodes.Stfld, GetType(AssemblyStmt).GetField("Tokens"))
checkAssemblyIL.MarkSequencePoint(doc5, 272, 1, 272, 100)
checkAssemblyIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(AssemblyStmt)
checkAssemblyIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkAssemblyIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkAssemblyIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkAssemblyIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkAssemblyIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkAssemblyIL.Emit(OpCodes.Stfld, GetType(AssemblyStmt).GetField("AsmName"))
checkAssemblyIL.MarkSequencePoint(doc5, 273, 1, 273, 100)
checkAssemblyIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(AssemblyStmt)
checkAssemblyIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkAssemblyIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkAssemblyIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
checkAssemblyIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkAssemblyIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkAssemblyIL.Emit(OpCodes.Stfld, GetType(AssemblyStmt).GetField("Mode"))
checkAssemblyIL.MarkSequencePoint(doc5, 274, 1, 274, 100)
checkAssemblyIL.Emit(OpCodes.Br, cont213)
checkAssemblyIL.MarkLabel(fa213)
checkAssemblyIL.Emit(OpCodes.Br, cont213)
checkAssemblyIL.MarkLabel(cont213)
checkAssemblyIL.MarkSequencePoint(doc5, 275, 1, 275, 100)
checkAssemblyIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(AssemblyStmt)
checkAssemblyIL.MarkSequencePoint(doc5, 276, 1, 276, 100)
checkAssemblyIL.Emit(OpCodes.Ret)
Dim typ51(-1) As Type
ReDim Preserve typ51(UBound(typ51) + 1)
typ51(UBound(typ51)) = GetType(Stmt)
ReDim Preserve typ51(UBound(typ51) + 1)
typ51(UBound(typ51)) = GetType(System.Boolean).MakeByRefType()
Dim checkVer As MethodBuilder = StmtOptimizer.DefineMethod("checkVer", MethodAttributes.Public, GetType(Stmt), typ51)
Dim checkVerIL As ILGenerator = checkVer.GetILGenerator()
Dim checkVerparam01 As ParameterBuilder = checkVer.DefineParameter(1, ParameterAttributes.None, "stm")
Dim checkVerparam02 As ParameterBuilder = checkVer.DefineParameter(2, ParameterAttributes.None, "b")
checkVerIL.MarkSequencePoint(doc5, 279, 1, 279, 100)
Dim locbldr266 As LocalBuilder = checkVerIL.DeclareLocal(GetType(Token))
locbldr266.SetLocalSymInfo("tok")
checkVerIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkVerIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkVerIL.Emit(OpCodes.Stloc, 0)
checkVerIL.MarkSequencePoint(doc5, 280, 1, 280, 100)
Dim locbldr267 As LocalBuilder = checkVerIL.DeclareLocal(GetType(System.Type))
locbldr267.SetLocalSymInfo("typ")
checkVerIL.Emit(OpCodes.Ldtoken, GetType(VerTok))
Dim typ52 As Type() = {GetType(System.RuntimeTypeHandle)}
checkVerIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ52))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ52).ReturnType
checkVerIL.Emit(OpCodes.Stloc, 1)
checkVerIL.MarkSequencePoint(doc5, 281, 1, 281, 100)
checkVerIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
Dim typ53(-1) As Type
checkVerIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkVerIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkVerIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ53(UBound(typ53) + 1)
typ53(UBound(typ53)) = Typ
checkVerIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ53))
Typ = Typ03.GetMethod("IsInstanceOfType", typ53).ReturnType
checkVerIL.Emit(OpCodes.Stobj, Typ04)
checkVerIL.MarkSequencePoint(doc5, 282, 1, 282, 100)
Dim locbldr268 As LocalBuilder = checkVerIL.DeclareLocal(GetType(VerStmt))
locbldr268.SetLocalSymInfo("vers")
checkVerIL.Emit(OpCodes.Newobj, GetType(VerStmt).GetConstructor(Type.EmptyTypes))
checkVerIL.Emit(OpCodes.Stloc, 2)
checkVerIL.MarkSequencePoint(doc5, 283, 1, 283, 100)
checkVerIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
checkVerIL.Emit(OpCodes.Ldobj, Typ.GetElementType())
Typ = Typ.GetElementType()
checkVerIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa214 As System.Reflection.Emit.Label = checkVerIL.DefineLabel()
Dim tru214 As System.Reflection.Emit.Label = checkVerIL.DefineLabel()
Dim cont214 As System.Reflection.Emit.Label = checkVerIL.DefineLabel()
checkVerIL.Emit(OpCodes.Beq, tru214)
checkVerIL.Emit(OpCodes.Br, fa214)
checkVerIL.MarkLabel(tru214)
checkVerIL.MarkSequencePoint(doc5, 284, 1, 284, 100)
checkVerIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VerStmt)
checkVerIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkVerIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
checkVerIL.Emit(OpCodes.Stfld, GetType(VerStmt).GetField("Line"))
checkVerIL.MarkSequencePoint(doc5, 285, 1, 285, 100)
checkVerIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VerStmt)
checkVerIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkVerIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkVerIL.Emit(OpCodes.Stfld, GetType(VerStmt).GetField("Tokens"))
checkVerIL.MarkSequencePoint(doc5, 286, 1, 286, 100)
checkVerIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkVerIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkVerIL.Emit(OpCodes.Stloc, 0)
checkVerIL.MarkSequencePoint(doc5, 287, 1, 287, 100)
Dim locbldr269 As LocalBuilder = checkVerIL.DeclareLocal(GetType(System.String).MakeArrayType())
locbldr269.SetLocalSymInfo("ars")
Dim typ54(-1) As Type
checkVerIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkVerIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ54(UBound(typ54) + 1)
typ54(UBound(typ54)) = Typ
checkVerIL.Emit(OpCodes.Ldstr, ".")
Typ = GetType(System.String)
ReDim Preserve typ54(UBound(typ54) + 1)
typ54(UBound(typ54)) = Typ
checkVerIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("StringParser", typ54))
Typ = GetType(Utils.ParseUtils).GetMethod("StringParser", typ54).ReturnType
checkVerIL.Emit(OpCodes.Stloc, 3)
checkVerIL.MarkSequencePoint(doc5, 288, 1, 288, 100)
Dim locbldr270 As LocalBuilder = checkVerIL.DeclareLocal(GetType(System.Int32).MakeArrayType())
locbldr270.SetLocalSymInfo("ari")
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(4))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
checkVerIL.Emit(OpCodes.Newarr, GetType(System.Int32))
checkVerIL.Emit(OpCodes.Stloc, 4)
checkVerIL.MarkSequencePoint(doc5, 289, 1, 289, 100)
checkVerIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
Dim typ55 As Type() = {Typ}
checkVerIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToInt32", typ55))
Typ = GetType(System.Convert).GetMethod("ToInt32", typ55).ReturnType
checkVerIL.Emit(OpCodes.Stelem, GetType(System.Int32).MakeArrayType().GetElementType())
checkVerIL.MarkSequencePoint(doc5, 290, 1, 290, 100)
checkVerIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
Dim typ56 As Type() = {Typ}
checkVerIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToInt32", typ56))
Typ = GetType(System.Convert).GetMethod("ToInt32", typ56).ReturnType
checkVerIL.Emit(OpCodes.Stelem, GetType(System.Int32).MakeArrayType().GetElementType())
checkVerIL.MarkSequencePoint(doc5, 291, 1, 291, 100)
checkVerIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
Dim typ57 As Type() = {Typ}
checkVerIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToInt32", typ57))
Typ = GetType(System.Convert).GetMethod("ToInt32", typ57).ReturnType
checkVerIL.Emit(OpCodes.Stelem, GetType(System.Int32).MakeArrayType().GetElementType())
checkVerIL.MarkSequencePoint(doc5, 292, 1, 292, 100)
checkVerIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
Dim typ58 As Type() = {Typ}
checkVerIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToInt32", typ58))
Typ = GetType(System.Convert).GetMethod("ToInt32", typ58).ReturnType
checkVerIL.Emit(OpCodes.Stelem, GetType(System.Int32).MakeArrayType().GetElementType())
checkVerIL.MarkSequencePoint(doc5, 293, 1, 293, 100)
Dim locbldr271 As LocalBuilder = checkVerIL.DeclareLocal(GetType(IntLiteral).MakeArrayType())
locbldr271.SetLocalSymInfo("intla")
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(4))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
checkVerIL.Emit(OpCodes.Newarr, GetType(IntLiteral))
checkVerIL.Emit(OpCodes.Stloc, 5)
checkVerIL.MarkSequencePoint(doc5, 294, 1, 294, 100)
Dim locbldr272 As LocalBuilder = checkVerIL.DeclareLocal(GetType(IntLiteral))
locbldr272.SetLocalSymInfo("intl")
checkVerIL.Emit(OpCodes.Ldnull)
checkVerIL.Emit(OpCodes.Stloc, 6)
checkVerIL.MarkSequencePoint(doc5, 295, 1, 295, 100)
Dim typ59(-1) As Type
checkVerIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ59(UBound(typ59) + 1)
typ59(UBound(typ59)) = Typ
checkVerIL.Emit(OpCodes.Newobj, GetType(IntLiteral).GetConstructor(typ59))
checkVerIL.Emit(OpCodes.Stloc, 6)
checkVerIL.MarkSequencePoint(doc5, 296, 1, 296, 100)
checkVerIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(IntLiteral)
checkVerIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkVerIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
checkVerIL.Emit(OpCodes.Stfld, GetType(IntLiteral).GetField("Line"))
checkVerIL.MarkSequencePoint(doc5, 297, 1, 297, 100)
checkVerIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(IntLiteral)
checkVerIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldelem, GetType(System.Int32).MakeArrayType().GetElementType())
Typ = GetType(System.Int32).MakeArrayType().GetElementType()
checkVerIL.Emit(OpCodes.Stfld, GetType(IntLiteral).GetField("NumVal"))
checkVerIL.MarkSequencePoint(doc5, 298, 1, 298, 100)
checkVerIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(IntLiteral).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(IntLiteral)
checkVerIL.Emit(OpCodes.Stelem, GetType(IntLiteral).MakeArrayType().GetElementType())
checkVerIL.MarkSequencePoint(doc5, 299, 1, 299, 100)
Dim typ60(-1) As Type
checkVerIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ60(UBound(typ60) + 1)
typ60(UBound(typ60)) = Typ
checkVerIL.Emit(OpCodes.Newobj, GetType(IntLiteral).GetConstructor(typ60))
checkVerIL.Emit(OpCodes.Stloc, 6)
checkVerIL.MarkSequencePoint(doc5, 300, 1, 300, 100)
checkVerIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(IntLiteral)
checkVerIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkVerIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
checkVerIL.Emit(OpCodes.Stfld, GetType(IntLiteral).GetField("Line"))
checkVerIL.MarkSequencePoint(doc5, 301, 1, 301, 100)
checkVerIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(IntLiteral)
checkVerIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldelem, GetType(System.Int32).MakeArrayType().GetElementType())
Typ = GetType(System.Int32).MakeArrayType().GetElementType()
checkVerIL.Emit(OpCodes.Stfld, GetType(IntLiteral).GetField("NumVal"))
checkVerIL.MarkSequencePoint(doc5, 302, 1, 302, 100)
checkVerIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(IntLiteral).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(IntLiteral)
checkVerIL.Emit(OpCodes.Stelem, GetType(IntLiteral).MakeArrayType().GetElementType())
checkVerIL.MarkSequencePoint(doc5, 303, 1, 303, 100)
Dim typ61(-1) As Type
checkVerIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ61(UBound(typ61) + 1)
typ61(UBound(typ61)) = Typ
checkVerIL.Emit(OpCodes.Newobj, GetType(IntLiteral).GetConstructor(typ61))
checkVerIL.Emit(OpCodes.Stloc, 6)
checkVerIL.MarkSequencePoint(doc5, 304, 1, 304, 100)
checkVerIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(IntLiteral)
checkVerIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkVerIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
checkVerIL.Emit(OpCodes.Stfld, GetType(IntLiteral).GetField("Line"))
checkVerIL.MarkSequencePoint(doc5, 305, 1, 305, 100)
checkVerIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(IntLiteral)
checkVerIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldelem, GetType(System.Int32).MakeArrayType().GetElementType())
Typ = GetType(System.Int32).MakeArrayType().GetElementType()
checkVerIL.Emit(OpCodes.Stfld, GetType(IntLiteral).GetField("NumVal"))
checkVerIL.MarkSequencePoint(doc5, 306, 1, 306, 100)
checkVerIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(IntLiteral).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(IntLiteral)
checkVerIL.Emit(OpCodes.Stelem, GetType(IntLiteral).MakeArrayType().GetElementType())
checkVerIL.MarkSequencePoint(doc5, 307, 1, 307, 100)
Dim typ62(-1) As Type
checkVerIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ62(UBound(typ62) + 1)
typ62(UBound(typ62)) = Typ
checkVerIL.Emit(OpCodes.Newobj, GetType(IntLiteral).GetConstructor(typ62))
checkVerIL.Emit(OpCodes.Stloc, 6)
checkVerIL.MarkSequencePoint(doc5, 308, 1, 308, 100)
checkVerIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(IntLiteral)
checkVerIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkVerIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
checkVerIL.Emit(OpCodes.Stfld, GetType(IntLiteral).GetField("Line"))
checkVerIL.MarkSequencePoint(doc5, 309, 1, 309, 100)
checkVerIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(IntLiteral)
checkVerIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldelem, GetType(System.Int32).MakeArrayType().GetElementType())
Typ = GetType(System.Int32).MakeArrayType().GetElementType()
checkVerIL.Emit(OpCodes.Stfld, GetType(IntLiteral).GetField("NumVal"))
checkVerIL.MarkSequencePoint(doc5, 310, 1, 310, 100)
checkVerIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(IntLiteral).MakeArrayType()
Typ02 = Typ
checkVerIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
checkVerIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVerIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(IntLiteral)
checkVerIL.Emit(OpCodes.Stelem, GetType(IntLiteral).MakeArrayType().GetElementType())
checkVerIL.MarkSequencePoint(doc5, 311, 1, 311, 100)
checkVerIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VerStmt)
checkVerIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(IntLiteral).MakeArrayType()
checkVerIL.Emit(OpCodes.Stfld, GetType(VerStmt).GetField("VersionNos"))
checkVerIL.MarkSequencePoint(doc5, 312, 1, 312, 100)
checkVerIL.Emit(OpCodes.Br, cont214)
checkVerIL.MarkLabel(fa214)
checkVerIL.Emit(OpCodes.Br, cont214)
checkVerIL.MarkLabel(cont214)
checkVerIL.MarkSequencePoint(doc5, 313, 1, 313, 100)
checkVerIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VerStmt)
checkVerIL.MarkSequencePoint(doc5, 314, 1, 314, 100)
checkVerIL.Emit(OpCodes.Ret)
Dim typ63(-1) As Type
ReDim Preserve typ63(UBound(typ63) + 1)
typ63(UBound(typ63)) = GetType(Stmt)
ReDim Preserve typ63(UBound(typ63) + 1)
typ63(UBound(typ63)) = GetType(System.Boolean).MakeByRefType()
Dim checkClass As MethodBuilder = StmtOptimizer.DefineMethod("checkClass", MethodAttributes.Public, GetType(Stmt), typ63)
Dim checkClassIL As ILGenerator = checkClass.GetILGenerator()
Dim checkClassparam01 As ParameterBuilder = checkClass.DefineParameter(1, ParameterAttributes.None, "stm")
Dim checkClassparam02 As ParameterBuilder = checkClass.DefineParameter(2, ParameterAttributes.None, "b")
checkClassIL.MarkSequencePoint(doc5, 317, 1, 317, 100)
Dim locbldr273 As LocalBuilder = checkClassIL.DeclareLocal(GetType(Token))
locbldr273.SetLocalSymInfo("tok")
checkClassIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkClassIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkClassIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkClassIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkClassIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkClassIL.Emit(OpCodes.Stloc, 0)
checkClassIL.MarkSequencePoint(doc5, 318, 1, 318, 100)
Dim locbldr274 As LocalBuilder = checkClassIL.DeclareLocal(GetType(System.Type))
locbldr274.SetLocalSymInfo("typ")
checkClassIL.Emit(OpCodes.Ldtoken, GetType(ClassTok))
Dim typ64 As Type() = {GetType(System.RuntimeTypeHandle)}
checkClassIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ64))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ64).ReturnType
checkClassIL.Emit(OpCodes.Stloc, 1)
checkClassIL.MarkSequencePoint(doc5, 319, 1, 319, 100)
checkClassIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
Dim typ65(-1) As Type
checkClassIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkClassIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkClassIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ65(UBound(typ65) + 1)
typ65(UBound(typ65)) = Typ
checkClassIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ65))
Typ = Typ03.GetMethod("IsInstanceOfType", typ65).ReturnType
checkClassIL.Emit(OpCodes.Stobj, Typ04)
checkClassIL.MarkSequencePoint(doc5, 320, 1, 320, 100)
Dim locbldr275 As LocalBuilder = checkClassIL.DeclareLocal(GetType(ClassStmt))
locbldr275.SetLocalSymInfo("clss")
checkClassIL.Emit(OpCodes.Newobj, GetType(ClassStmt).GetConstructor(Type.EmptyTypes))
checkClassIL.Emit(OpCodes.Stloc, 2)
checkClassIL.MarkSequencePoint(doc5, 321, 1, 321, 100)
Dim locbldr276 As LocalBuilder = checkClassIL.DeclareLocal(GetType(Attributes.Attribute))
locbldr276.SetLocalSymInfo("att")
checkClassIL.Emit(OpCodes.Ldnull)
checkClassIL.Emit(OpCodes.Stloc, 3)
checkClassIL.MarkSequencePoint(doc5, 322, 1, 322, 100)
checkClassIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
checkClassIL.Emit(OpCodes.Ldobj, Typ.GetElementType())
Typ = Typ.GetElementType()
checkClassIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa215 As System.Reflection.Emit.Label = checkClassIL.DefineLabel()
Dim tru215 As System.Reflection.Emit.Label = checkClassIL.DefineLabel()
Dim cont215 As System.Reflection.Emit.Label = checkClassIL.DefineLabel()
checkClassIL.Emit(OpCodes.Beq, tru215)
checkClassIL.Emit(OpCodes.Br, fa215)
checkClassIL.MarkLabel(tru215)
checkClassIL.MarkSequencePoint(doc5, 324, 1, 324, 100)
checkClassIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(ClassStmt)
checkClassIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkClassIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
checkClassIL.Emit(OpCodes.Stfld, GetType(ClassStmt).GetField("Line"))
checkClassIL.MarkSequencePoint(doc5, 325, 1, 325, 100)
checkClassIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(ClassStmt)
checkClassIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkClassIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkClassIL.Emit(OpCodes.Stfld, GetType(ClassStmt).GetField("Tokens"))
checkClassIL.MarkSequencePoint(doc5, 327, 1, 327, 100)
Dim label4 As System.Reflection.Emit.Label = checkClassIL.DefineLabel()
checkClassIL.MarkSequencePoint(doc5, 328, 1, 328, 100)
Dim label5 As System.Reflection.Emit.Label = checkClassIL.DefineLabel()
checkClassIL.MarkSequencePoint(doc5, 330, 1, 330, 100)
Dim locbldr277 As LocalBuilder = checkClassIL.DeclareLocal(GetType(System.Int32))
locbldr277.SetLocalSymInfo("i")
checkClassIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkClassIL.Emit(OpCodes.Stloc, 4)
checkClassIL.MarkSequencePoint(doc5, 331, 1, 331, 100)
Dim locbldr278 As LocalBuilder = checkClassIL.DeclareLocal(GetType(System.Int32))
locbldr278.SetLocalSymInfo("len")
checkClassIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkClassIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkClassIL.Emit(OpCodes.Ldlen)
checkClassIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
checkClassIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkClassIL.Emit(OpCodes.Sub)
checkClassIL.Emit(OpCodes.Stloc, 5)
checkClassIL.MarkSequencePoint(doc5, 332, 1, 332, 100)
Dim locbldr279 As LocalBuilder = checkClassIL.DeclareLocal(GetType(System.Boolean))
locbldr279.SetLocalSymInfo("bl")
checkClassIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
checkClassIL.Emit(OpCodes.Stloc, 6)
checkClassIL.MarkSequencePoint(doc5, 334, 1, 334, 100)
checkClassIL.MarkLabel(label4)
checkClassIL.MarkSequencePoint(doc5, 336, 1, 336, 100)
checkClassIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
checkClassIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkClassIL.Emit(OpCodes.Add)
checkClassIL.Emit(OpCodes.Stloc, 4)
checkClassIL.MarkSequencePoint(doc5, 337, 1, 337, 100)
checkClassIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkClassIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkClassIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
checkClassIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkClassIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkClassIL.Emit(OpCodes.Stloc, 0)
checkClassIL.MarkSequencePoint(doc5, 338, 1, 338, 100)
checkClassIL.Emit(OpCodes.Ldtoken, GetType(Attributes.Attribute))
Dim typ66 As Type() = {GetType(System.RuntimeTypeHandle)}
checkClassIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ66))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ66).ReturnType
checkClassIL.Emit(OpCodes.Stloc, 1)
checkClassIL.MarkSequencePoint(doc5, 339, 1, 339, 100)
Dim typ67(-1) As Type
checkClassIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkClassIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkClassIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ67(UBound(typ67) + 1)
typ67(UBound(typ67)) = Typ
checkClassIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ67))
Typ = Typ03.GetMethod("IsInstanceOfType", typ67).ReturnType
checkClassIL.Emit(OpCodes.Stloc, 6)
checkClassIL.MarkSequencePoint(doc5, 341, 1, 341, 100)
checkClassIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Boolean)
checkClassIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa216 As System.Reflection.Emit.Label = checkClassIL.DefineLabel()
Dim tru216 As System.Reflection.Emit.Label = checkClassIL.DefineLabel()
Dim cont216 As System.Reflection.Emit.Label = checkClassIL.DefineLabel()
checkClassIL.Emit(OpCodes.Beq, tru216)
checkClassIL.Emit(OpCodes.Br, fa216)
checkClassIL.MarkLabel(tru216)
checkClassIL.MarkSequencePoint(doc5, 342, 1, 342, 100)
checkClassIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkClassIL.Emit(OpCodes.Stloc, 3)
checkClassIL.MarkSequencePoint(doc5, 343, 1, 343, 100)
Dim typ68(-1) As Type
checkClassIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(ClassStmt)
Typ03 = Typ
checkClassIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Attributes.Attribute)
ReDim Preserve typ68(UBound(typ68) + 1)
typ68(UBound(typ68)) = Typ
checkClassIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddAttr", typ68))
Typ = Typ03.GetMethod("AddAttr", typ68).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
checkClassIL.Emit(OpCodes.Pop)
End If
checkClassIL.MarkSequencePoint(doc5, 344, 1, 344, 100)
checkClassIL.Emit(OpCodes.Br, cont216)
checkClassIL.MarkLabel(fa216)
checkClassIL.MarkSequencePoint(doc5, 346, 1, 346, 100)
Dim locbldr280 As LocalBuilder = checkClassIL.DeclareLocal(GetType(Token))
locbldr280.SetLocalSymInfo("tok2")
checkClassIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkClassIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkClassIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
checkClassIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkClassIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkClassIL.Emit(OpCodes.Stloc, 7)
checkClassIL.MarkSequencePoint(doc5, 347, 1, 347, 100)
Dim locbldr281 As LocalBuilder = checkClassIL.DeclareLocal(GetType(System.Type))
locbldr281.SetLocalSymInfo("typ2")
checkClassIL.Emit(OpCodes.Ldtoken, GetType(ExtendsTok))
Dim typ69 As Type() = {GetType(System.RuntimeTypeHandle)}
checkClassIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ69))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ69).ReturnType
checkClassIL.Emit(OpCodes.Stloc, 8)
checkClassIL.MarkSequencePoint(doc5, 348, 1, 348, 100)
Dim locbldr282 As LocalBuilder = checkClassIL.DeclareLocal(GetType(System.Boolean))
locbldr282.SetLocalSymInfo("b2")
Dim typ70(-1) As Type
checkClassIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
checkClassIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(Token)
checkClassIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ70(UBound(typ70) + 1)
typ70(UBound(typ70)) = Typ
checkClassIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ70))
Typ = Typ03.GetMethod("IsInstanceOfType", typ70).ReturnType
checkClassIL.Emit(OpCodes.Stloc, 9)
checkClassIL.MarkSequencePoint(doc5, 350, 1, 350, 100)
checkClassIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
checkClassIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa217 As System.Reflection.Emit.Label = checkClassIL.DefineLabel()
Dim tru217 As System.Reflection.Emit.Label = checkClassIL.DefineLabel()
Dim cont217 As System.Reflection.Emit.Label = checkClassIL.DefineLabel()
checkClassIL.Emit(OpCodes.Beq, tru217)
checkClassIL.Emit(OpCodes.Br, fa217)
checkClassIL.MarkLabel(tru217)
checkClassIL.MarkSequencePoint(doc5, 351, 1, 351, 100)
checkClassIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
checkClassIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkClassIL.Emit(OpCodes.Add)
checkClassIL.Emit(OpCodes.Stloc, 4)
checkClassIL.MarkSequencePoint(doc5, 352, 1, 352, 100)
checkClassIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkClassIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkClassIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
checkClassIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkClassIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkClassIL.Emit(OpCodes.Stloc, 7)
checkClassIL.MarkSequencePoint(doc5, 353, 1, 353, 100)
checkClassIL.Emit(OpCodes.Ldtoken, GetType(TypeTok))
Dim typ71 As Type() = {GetType(System.RuntimeTypeHandle)}
checkClassIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ71))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ71).ReturnType
checkClassIL.Emit(OpCodes.Stloc, 8)
checkClassIL.MarkSequencePoint(doc5, 354, 1, 354, 100)
Dim typ72(-1) As Type
checkClassIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
checkClassIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(Token)
checkClassIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ72(UBound(typ72) + 1)
typ72(UBound(typ72)) = Typ
checkClassIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ72))
Typ = Typ03.GetMethod("IsInstanceOfType", typ72).ReturnType
checkClassIL.Emit(OpCodes.Stloc, 9)
checkClassIL.MarkSequencePoint(doc5, 356, 1, 356, 100)
checkClassIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
checkClassIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa218 As System.Reflection.Emit.Label = checkClassIL.DefineLabel()
Dim tru218 As System.Reflection.Emit.Label = checkClassIL.DefineLabel()
Dim cont218 As System.Reflection.Emit.Label = checkClassIL.DefineLabel()
checkClassIL.Emit(OpCodes.Beq, fa218)
checkClassIL.Emit(OpCodes.Br, tru218)
checkClassIL.MarkLabel(tru218)
checkClassIL.MarkSequencePoint(doc5, 357, 1, 357, 100)
Dim locbldr283 As LocalBuilder = checkClassIL.DeclareLocal(GetType(Token))
locbldr283.SetLocalSymInfo("t")
checkClassIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkClassIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkClassIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
checkClassIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkClassIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkClassIL.Emit(OpCodes.Stloc, 10)
checkClassIL.MarkSequencePoint(doc5, 358, 1, 358, 100)
Dim locbldr284 As LocalBuilder = checkClassIL.DeclareLocal(GetType(TypeTok))
locbldr284.SetLocalSymInfo("tt")
checkClassIL.Emit(OpCodes.Newobj, GetType(TypeTok).GetConstructor(Type.EmptyTypes))
checkClassIL.Emit(OpCodes.Stloc, 11)
checkClassIL.MarkSequencePoint(doc5, 359, 1, 359, 100)
checkClassIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(TypeTok)
checkClassIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(Token)
checkClassIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
checkClassIL.Emit(OpCodes.Stfld, GetType(TypeTok).GetField("Line"))
checkClassIL.MarkSequencePoint(doc5, 360, 1, 360, 100)
checkClassIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(TypeTok)
checkClassIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(Token)
checkClassIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
checkClassIL.Emit(OpCodes.Stfld, GetType(TypeTok).GetField("Value"))
checkClassIL.MarkSequencePoint(doc5, 361, 1, 361, 100)
checkClassIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(ClassStmt)
checkClassIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(TypeTok)
checkClassIL.Emit(OpCodes.Stfld, GetType(ClassStmt).GetField("InhClass"))
checkClassIL.MarkSequencePoint(doc5, 362, 1, 362, 100)
checkClassIL.Emit(OpCodes.Br, cont218)
checkClassIL.MarkLabel(fa218)
checkClassIL.MarkSequencePoint(doc5, 363, 1, 363, 100)
checkClassIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(ClassStmt)
checkClassIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkClassIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkClassIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
checkClassIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkClassIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkClassIL.Emit(OpCodes.Stfld, GetType(ClassStmt).GetField("InhClass"))
checkClassIL.MarkSequencePoint(doc5, 364, 1, 364, 100)
checkClassIL.Emit(OpCodes.Br, cont218)
checkClassIL.MarkLabel(cont218)
checkClassIL.MarkSequencePoint(doc5, 365, 1, 365, 100)
checkClassIL.Emit(OpCodes.Br, cont217)
checkClassIL.MarkLabel(fa217)
checkClassIL.MarkSequencePoint(doc5, 366, 1, 366, 100)
checkClassIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(ClassStmt)
checkClassIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkClassIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkClassIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
checkClassIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkClassIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkClassIL.Emit(OpCodes.Stfld, GetType(ClassStmt).GetField("ClassName"))
checkClassIL.MarkSequencePoint(doc5, 367, 1, 367, 100)
checkClassIL.Emit(OpCodes.Br, cont217)
checkClassIL.MarkLabel(cont217)
checkClassIL.MarkSequencePoint(doc5, 369, 1, 369, 100)
checkClassIL.Emit(OpCodes.Br, cont216)
checkClassIL.MarkLabel(cont216)
checkClassIL.MarkSequencePoint(doc5, 371, 1, 371, 100)
checkClassIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
checkClassIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Int32)
Dim fa219 As System.Reflection.Emit.Label = checkClassIL.DefineLabel()
Dim tru219 As System.Reflection.Emit.Label = checkClassIL.DefineLabel()
Dim cont219 As System.Reflection.Emit.Label = checkClassIL.DefineLabel()
checkClassIL.Emit(OpCodes.Beq, tru219)
checkClassIL.Emit(OpCodes.Br, fa219)
checkClassIL.MarkLabel(tru219)
checkClassIL.MarkSequencePoint(doc5, 372, 1, 372, 100)
checkClassIL.Emit(OpCodes.Br, label5)
checkClassIL.MarkSequencePoint(doc5, 373, 1, 373, 100)
checkClassIL.Emit(OpCodes.Br, cont219)
checkClassIL.MarkLabel(fa219)
checkClassIL.MarkSequencePoint(doc5, 374, 1, 374, 100)
checkClassIL.Emit(OpCodes.Br, label4)
checkClassIL.MarkSequencePoint(doc5, 375, 1, 375, 100)
checkClassIL.Emit(OpCodes.Br, cont219)
checkClassIL.MarkLabel(cont219)
checkClassIL.MarkSequencePoint(doc5, 377, 1, 377, 100)
checkClassIL.MarkLabel(label5)
checkClassIL.MarkSequencePoint(doc5, 379, 1, 379, 100)
checkClassIL.Emit(OpCodes.Br, cont215)
checkClassIL.MarkLabel(fa215)
checkClassIL.Emit(OpCodes.Br, cont215)
checkClassIL.MarkLabel(cont215)
checkClassIL.MarkSequencePoint(doc5, 381, 1, 381, 100)
checkClassIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(ClassStmt)
checkClassIL.MarkSequencePoint(doc5, 382, 1, 382, 100)
checkClassIL.Emit(OpCodes.Ret)
Dim typ73(-1) As Type
ReDim Preserve typ73(UBound(typ73) + 1)
typ73(UBound(typ73)) = GetType(Stmt)
ReDim Preserve typ73(UBound(typ73) + 1)
typ73(UBound(typ73)) = GetType(System.Boolean).MakeByRefType()
Dim checkField As MethodBuilder = StmtOptimizer.DefineMethod("checkField", MethodAttributes.Public, GetType(Stmt), typ73)
Dim checkFieldIL As ILGenerator = checkField.GetILGenerator()
Dim checkFieldparam01 As ParameterBuilder = checkField.DefineParameter(1, ParameterAttributes.None, "stm")
Dim checkFieldparam02 As ParameterBuilder = checkField.DefineParameter(2, ParameterAttributes.None, "b")
checkFieldIL.MarkSequencePoint(doc5, 386, 1, 386, 100)
Dim locbldr285 As LocalBuilder = checkFieldIL.DeclareLocal(GetType(Token))
locbldr285.SetLocalSymInfo("tok")
checkFieldIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkFieldIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkFieldIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkFieldIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkFieldIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkFieldIL.Emit(OpCodes.Stloc, 0)
checkFieldIL.MarkSequencePoint(doc5, 387, 1, 387, 100)
Dim locbldr286 As LocalBuilder = checkFieldIL.DeclareLocal(GetType(System.Type))
locbldr286.SetLocalSymInfo("typ")
checkFieldIL.Emit(OpCodes.Ldtoken, GetType(FieldTok))
Dim typ74 As Type() = {GetType(System.RuntimeTypeHandle)}
checkFieldIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ74))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ74).ReturnType
checkFieldIL.Emit(OpCodes.Stloc, 1)
checkFieldIL.MarkSequencePoint(doc5, 388, 1, 388, 100)
checkFieldIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
Dim typ75(-1) As Type
checkFieldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkFieldIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkFieldIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ75(UBound(typ75) + 1)
typ75(UBound(typ75)) = Typ
checkFieldIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ75))
Typ = Typ03.GetMethod("IsInstanceOfType", typ75).ReturnType
checkFieldIL.Emit(OpCodes.Stobj, Typ04)
checkFieldIL.MarkSequencePoint(doc5, 389, 1, 389, 100)
Dim locbldr287 As LocalBuilder = checkFieldIL.DeclareLocal(GetType(FieldStmt))
locbldr287.SetLocalSymInfo("flss")
checkFieldIL.Emit(OpCodes.Newobj, GetType(FieldStmt).GetConstructor(Type.EmptyTypes))
checkFieldIL.Emit(OpCodes.Stloc, 2)
checkFieldIL.MarkSequencePoint(doc5, 390, 1, 390, 100)
Dim locbldr288 As LocalBuilder = checkFieldIL.DeclareLocal(GetType(Attributes.Attribute))
locbldr288.SetLocalSymInfo("att")
checkFieldIL.Emit(OpCodes.Ldnull)
checkFieldIL.Emit(OpCodes.Stloc, 3)
checkFieldIL.MarkSequencePoint(doc5, 392, 1, 392, 100)
checkFieldIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
checkFieldIL.Emit(OpCodes.Ldobj, Typ.GetElementType())
Typ = Typ.GetElementType()
checkFieldIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa220 As System.Reflection.Emit.Label = checkFieldIL.DefineLabel()
Dim tru220 As System.Reflection.Emit.Label = checkFieldIL.DefineLabel()
Dim cont220 As System.Reflection.Emit.Label = checkFieldIL.DefineLabel()
checkFieldIL.Emit(OpCodes.Beq, tru220)
checkFieldIL.Emit(OpCodes.Br, fa220)
checkFieldIL.MarkLabel(tru220)
checkFieldIL.MarkSequencePoint(doc5, 394, 1, 394, 100)
Dim locbldr289 As LocalBuilder = checkFieldIL.DeclareLocal(GetType(Expr))
locbldr289.SetLocalSymInfo("tempexp")
checkFieldIL.Emit(OpCodes.Newobj, GetType(Expr).GetConstructor(Type.EmptyTypes))
checkFieldIL.Emit(OpCodes.Stloc, 4)
checkFieldIL.MarkSequencePoint(doc5, 395, 1, 395, 100)
checkFieldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(Expr)
checkFieldIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkFieldIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkFieldIL.Emit(OpCodes.Stfld, GetType(Expr).GetField("Tokens"))
checkFieldIL.MarkSequencePoint(doc5, 396, 1, 396, 100)
Dim locbldr290 As LocalBuilder = checkFieldIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer"))
locbldr290.SetLocalSymInfo("eop")
checkFieldIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer").GetConstructor(Type.EmptyTypes))
checkFieldIL.Emit(OpCodes.Stloc, 5)
checkFieldIL.MarkSequencePoint(doc5, 397, 1, 397, 100)
checkFieldIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
checkFieldIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("ProcessTTokOnly"))
checkFieldIL.MarkSequencePoint(doc5, 398, 1, 398, 100)
Dim typ76(-1) As Type
checkFieldIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer")
Typ03 = Typ
checkFieldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(Expr)
ReDim Preserve typ76(UBound(typ76) + 1)
typ76(UBound(typ76)) = Typ
checkFieldIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Optimize", typ76))
Typ = Typ03.GetMethod("Optimize", typ76).ReturnType
checkFieldIL.Emit(OpCodes.Stloc, 4)
checkFieldIL.MarkSequencePoint(doc5, 399, 1, 399, 100)
checkFieldIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
checkFieldIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("ProcessTTokOnly"))
checkFieldIL.MarkSequencePoint(doc5, 400, 1, 400, 100)
checkFieldIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkFieldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(Expr)
checkFieldIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
checkFieldIL.Emit(OpCodes.Stfld, GetType(Stmt).GetField("Tokens"))
checkFieldIL.MarkSequencePoint(doc5, 402, 1, 402, 100)
checkFieldIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(FieldStmt)
checkFieldIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkFieldIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
checkFieldIL.Emit(OpCodes.Stfld, GetType(FieldStmt).GetField("Line"))
checkFieldIL.MarkSequencePoint(doc5, 403, 1, 403, 100)
checkFieldIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(FieldStmt)
checkFieldIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkFieldIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkFieldIL.Emit(OpCodes.Stfld, GetType(FieldStmt).GetField("Tokens"))
checkFieldIL.MarkSequencePoint(doc5, 405, 1, 405, 100)
Dim label6 As System.Reflection.Emit.Label = checkFieldIL.DefineLabel()
checkFieldIL.MarkSequencePoint(doc5, 406, 1, 406, 100)
Dim label7 As System.Reflection.Emit.Label = checkFieldIL.DefineLabel()
checkFieldIL.MarkSequencePoint(doc5, 408, 1, 408, 100)
Dim locbldr291 As LocalBuilder = checkFieldIL.DeclareLocal(GetType(System.Int32))
locbldr291.SetLocalSymInfo("i")
checkFieldIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkFieldIL.Emit(OpCodes.Stloc, 6)
checkFieldIL.MarkSequencePoint(doc5, 409, 1, 409, 100)
Dim locbldr292 As LocalBuilder = checkFieldIL.DeclareLocal(GetType(System.Int32))
locbldr292.SetLocalSymInfo("len")
checkFieldIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkFieldIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkFieldIL.Emit(OpCodes.Ldlen)
checkFieldIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
checkFieldIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
checkFieldIL.Emit(OpCodes.Sub)
checkFieldIL.Emit(OpCodes.Stloc, 7)
checkFieldIL.MarkSequencePoint(doc5, 410, 1, 410, 100)
Dim locbldr293 As LocalBuilder = checkFieldIL.DeclareLocal(GetType(System.Boolean))
locbldr293.SetLocalSymInfo("bl")
checkFieldIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
checkFieldIL.Emit(OpCodes.Stloc, 8)
checkFieldIL.MarkSequencePoint(doc5, 412, 1, 412, 100)
checkFieldIL.MarkLabel(label6)
checkFieldIL.MarkSequencePoint(doc5, 414, 1, 414, 100)
checkFieldIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
checkFieldIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkFieldIL.Emit(OpCodes.Add)
checkFieldIL.Emit(OpCodes.Stloc, 6)
checkFieldIL.MarkSequencePoint(doc5, 415, 1, 415, 100)
checkFieldIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkFieldIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkFieldIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
checkFieldIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkFieldIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkFieldIL.Emit(OpCodes.Stloc, 0)
checkFieldIL.MarkSequencePoint(doc5, 416, 1, 416, 100)
checkFieldIL.Emit(OpCodes.Ldtoken, GetType(Attributes.Attribute))
Dim typ77 As Type() = {GetType(System.RuntimeTypeHandle)}
checkFieldIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ77))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ77).ReturnType
checkFieldIL.Emit(OpCodes.Stloc, 1)
checkFieldIL.MarkSequencePoint(doc5, 417, 1, 417, 100)
Dim typ78(-1) As Type
checkFieldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkFieldIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkFieldIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ78(UBound(typ78) + 1)
typ78(UBound(typ78)) = Typ
checkFieldIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ78))
Typ = Typ03.GetMethod("IsInstanceOfType", typ78).ReturnType
checkFieldIL.Emit(OpCodes.Stloc, 8)
checkFieldIL.MarkSequencePoint(doc5, 419, 1, 419, 100)
checkFieldIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
checkFieldIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa221 As System.Reflection.Emit.Label = checkFieldIL.DefineLabel()
Dim tru221 As System.Reflection.Emit.Label = checkFieldIL.DefineLabel()
Dim cont221 As System.Reflection.Emit.Label = checkFieldIL.DefineLabel()
checkFieldIL.Emit(OpCodes.Beq, tru221)
checkFieldIL.Emit(OpCodes.Br, fa221)
checkFieldIL.MarkLabel(tru221)
checkFieldIL.MarkSequencePoint(doc5, 420, 1, 420, 100)
checkFieldIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkFieldIL.Emit(OpCodes.Stloc, 3)
checkFieldIL.MarkSequencePoint(doc5, 421, 1, 421, 100)
Dim typ79(-1) As Type
checkFieldIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(FieldStmt)
Typ03 = Typ
checkFieldIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Attributes.Attribute)
ReDim Preserve typ79(UBound(typ79) + 1)
typ79(UBound(typ79)) = Typ
checkFieldIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddAttr", typ79))
Typ = Typ03.GetMethod("AddAttr", typ79).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
checkFieldIL.Emit(OpCodes.Pop)
End If
checkFieldIL.MarkSequencePoint(doc5, 422, 1, 422, 100)
checkFieldIL.Emit(OpCodes.Br, cont221)
checkFieldIL.MarkLabel(fa221)
checkFieldIL.Emit(OpCodes.Br, cont221)
checkFieldIL.MarkLabel(cont221)
checkFieldIL.MarkSequencePoint(doc5, 424, 1, 424, 100)
checkFieldIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
checkFieldIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
Dim fa222 As System.Reflection.Emit.Label = checkFieldIL.DefineLabel()
Dim tru222 As System.Reflection.Emit.Label = checkFieldIL.DefineLabel()
Dim cont222 As System.Reflection.Emit.Label = checkFieldIL.DefineLabel()
checkFieldIL.Emit(OpCodes.Beq, tru222)
checkFieldIL.Emit(OpCodes.Br, fa222)
checkFieldIL.MarkLabel(tru222)
checkFieldIL.MarkSequencePoint(doc5, 425, 1, 425, 100)
checkFieldIL.Emit(OpCodes.Br, label7)
checkFieldIL.MarkSequencePoint(doc5, 426, 1, 426, 100)
checkFieldIL.Emit(OpCodes.Br, cont222)
checkFieldIL.MarkLabel(fa222)
checkFieldIL.MarkSequencePoint(doc5, 427, 1, 427, 100)
checkFieldIL.Emit(OpCodes.Br, label6)
checkFieldIL.MarkSequencePoint(doc5, 428, 1, 428, 100)
checkFieldIL.Emit(OpCodes.Br, cont222)
checkFieldIL.MarkLabel(cont222)
checkFieldIL.MarkSequencePoint(doc5, 430, 1, 430, 100)
checkFieldIL.MarkLabel(label7)
checkFieldIL.MarkSequencePoint(doc5, 432, 1, 432, 100)
checkFieldIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
checkFieldIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkFieldIL.Emit(OpCodes.Add)
checkFieldIL.Emit(OpCodes.Stloc, 6)
checkFieldIL.MarkSequencePoint(doc5, 433, 1, 433, 100)
Dim locbldr294 As LocalBuilder = checkFieldIL.DeclareLocal(GetType(Token))
locbldr294.SetLocalSymInfo("tok2")
checkFieldIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkFieldIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkFieldIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
checkFieldIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkFieldIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkFieldIL.Emit(OpCodes.Stloc, 9)
checkFieldIL.MarkSequencePoint(doc5, 434, 1, 434, 100)
Dim locbldr295 As LocalBuilder = checkFieldIL.DeclareLocal(GetType(System.Type))
locbldr295.SetLocalSymInfo("typ2")
checkFieldIL.Emit(OpCodes.Ldtoken, GetType(TypeTok))
Dim typ80 As Type() = {GetType(System.RuntimeTypeHandle)}
checkFieldIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ80))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ80).ReturnType
checkFieldIL.Emit(OpCodes.Stloc, 10)
checkFieldIL.MarkSequencePoint(doc5, 435, 1, 435, 100)
Dim locbldr296 As LocalBuilder = checkFieldIL.DeclareLocal(GetType(System.Boolean))
locbldr296.SetLocalSymInfo("b2")
Dim typ81(-1) As Type
checkFieldIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(System.Type)
Typ03 = Typ
checkFieldIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
checkFieldIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ81(UBound(typ81) + 1)
typ81(UBound(typ81)) = Typ
checkFieldIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ81))
Typ = Typ03.GetMethod("IsInstanceOfType", typ81).ReturnType
checkFieldIL.Emit(OpCodes.Stloc, 11)
checkFieldIL.MarkSequencePoint(doc5, 437, 1, 437, 100)
checkFieldIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Boolean)
checkFieldIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa223 As System.Reflection.Emit.Label = checkFieldIL.DefineLabel()
Dim tru223 As System.Reflection.Emit.Label = checkFieldIL.DefineLabel()
Dim cont223 As System.Reflection.Emit.Label = checkFieldIL.DefineLabel()
checkFieldIL.Emit(OpCodes.Beq, fa223)
checkFieldIL.Emit(OpCodes.Br, tru223)
checkFieldIL.MarkLabel(tru223)
checkFieldIL.MarkSequencePoint(doc5, 438, 1, 438, 100)
Dim locbldr297 As LocalBuilder = checkFieldIL.DeclareLocal(GetType(Token))
locbldr297.SetLocalSymInfo("t")
checkFieldIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkFieldIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkFieldIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
checkFieldIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkFieldIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkFieldIL.Emit(OpCodes.Stloc, 12)
checkFieldIL.MarkSequencePoint(doc5, 439, 1, 439, 100)
Dim locbldr298 As LocalBuilder = checkFieldIL.DeclareLocal(GetType(TypeTok))
locbldr298.SetLocalSymInfo("tt")
checkFieldIL.Emit(OpCodes.Newobj, GetType(TypeTok).GetConstructor(Type.EmptyTypes))
checkFieldIL.Emit(OpCodes.Stloc, 13)
checkFieldIL.MarkSequencePoint(doc5, 440, 1, 440, 100)
checkFieldIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(TypeTok)
checkFieldIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(Token)
checkFieldIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
checkFieldIL.Emit(OpCodes.Stfld, GetType(TypeTok).GetField("Line"))
checkFieldIL.MarkSequencePoint(doc5, 441, 1, 441, 100)
checkFieldIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(TypeTok)
checkFieldIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(Token)
checkFieldIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
checkFieldIL.Emit(OpCodes.Stfld, GetType(TypeTok).GetField("Value"))
checkFieldIL.MarkSequencePoint(doc5, 442, 1, 442, 100)
checkFieldIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(FieldStmt)
checkFieldIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(TypeTok)
checkFieldIL.Emit(OpCodes.Stfld, GetType(FieldStmt).GetField("FieldTyp"))
checkFieldIL.MarkSequencePoint(doc5, 443, 1, 443, 100)
checkFieldIL.Emit(OpCodes.Br, cont223)
checkFieldIL.MarkLabel(fa223)
checkFieldIL.MarkSequencePoint(doc5, 444, 1, 444, 100)
checkFieldIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(FieldStmt)
checkFieldIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkFieldIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkFieldIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
checkFieldIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkFieldIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkFieldIL.Emit(OpCodes.Stfld, GetType(FieldStmt).GetField("FieldTyp"))
checkFieldIL.MarkSequencePoint(doc5, 445, 1, 445, 100)
checkFieldIL.Emit(OpCodes.Br, cont223)
checkFieldIL.MarkLabel(cont223)
checkFieldIL.MarkSequencePoint(doc5, 447, 1, 447, 100)
checkFieldIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
checkFieldIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkFieldIL.Emit(OpCodes.Add)
checkFieldIL.Emit(OpCodes.Stloc, 6)
checkFieldIL.MarkSequencePoint(doc5, 448, 1, 448, 100)
checkFieldIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(FieldStmt)
checkFieldIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkFieldIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkFieldIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
checkFieldIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkFieldIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkFieldIL.Emit(OpCodes.Stfld, GetType(FieldStmt).GetField("FieldName"))
checkFieldIL.MarkSequencePoint(doc5, 450, 1, 450, 100)
checkFieldIL.Emit(OpCodes.Br, cont220)
checkFieldIL.MarkLabel(fa220)
checkFieldIL.Emit(OpCodes.Br, cont220)
checkFieldIL.MarkLabel(cont220)
checkFieldIL.MarkSequencePoint(doc5, 452, 1, 452, 100)
checkFieldIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(FieldStmt)
checkFieldIL.MarkSequencePoint(doc5, 453, 1, 453, 100)
checkFieldIL.Emit(OpCodes.Ret)
Dim typ82(-1) As Type
ReDim Preserve typ82(UBound(typ82) + 1)
typ82(UBound(typ82)) = GetType(Stmt)
ReDim Preserve typ82(UBound(typ82) + 1)
typ82(UBound(typ82)) = GetType(System.Boolean).MakeByRefType()
Dim checkMethod As MethodBuilder = StmtOptimizer.DefineMethod("checkMethod", MethodAttributes.Public, GetType(Stmt), typ82)
Dim checkMethodIL As ILGenerator = checkMethod.GetILGenerator()
Dim checkMethodparam01 As ParameterBuilder = checkMethod.DefineParameter(1, ParameterAttributes.None, "stm")
Dim checkMethodparam02 As ParameterBuilder = checkMethod.DefineParameter(2, ParameterAttributes.None, "b")
checkMethodIL.MarkSequencePoint(doc5, 457, 1, 457, 100)
Dim locbldr299 As LocalBuilder = checkMethodIL.DeclareLocal(GetType(Token))
locbldr299.SetLocalSymInfo("tok")
checkMethodIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodIL.Emit(OpCodes.Stloc, 0)
checkMethodIL.MarkSequencePoint(doc5, 458, 1, 458, 100)
Dim locbldr300 As LocalBuilder = checkMethodIL.DeclareLocal(GetType(System.Type))
locbldr300.SetLocalSymInfo("typ")
checkMethodIL.Emit(OpCodes.Ldtoken, GetType(MethodTok))
Dim typ83 As Type() = {GetType(System.RuntimeTypeHandle)}
checkMethodIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ83))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ83).ReturnType
checkMethodIL.Emit(OpCodes.Stloc, 1)
checkMethodIL.MarkSequencePoint(doc5, 459, 1, 459, 100)
checkMethodIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
Dim typ84(-1) As Type
checkMethodIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkMethodIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ84(UBound(typ84) + 1)
typ84(UBound(typ84)) = Typ
checkMethodIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ84))
Typ = Typ03.GetMethod("IsInstanceOfType", typ84).ReturnType
checkMethodIL.Emit(OpCodes.Stobj, Typ04)
checkMethodIL.MarkSequencePoint(doc5, 460, 1, 460, 100)
Dim locbldr301 As LocalBuilder = checkMethodIL.DeclareLocal(GetType(MethodStmt))
locbldr301.SetLocalSymInfo("mtss")
checkMethodIL.Emit(OpCodes.Newobj, GetType(MethodStmt).GetConstructor(Type.EmptyTypes))
checkMethodIL.Emit(OpCodes.Stloc, 2)
checkMethodIL.MarkSequencePoint(doc5, 461, 1, 461, 100)
Dim locbldr302 As LocalBuilder = checkMethodIL.DeclareLocal(GetType(Attributes.Attribute))
locbldr302.SetLocalSymInfo("att")
checkMethodIL.Emit(OpCodes.Newobj, GetType(Attributes.Attribute).GetConstructor(Type.EmptyTypes))
checkMethodIL.Emit(OpCodes.Stloc, 3)
checkMethodIL.MarkSequencePoint(doc5, 462, 1, 462, 100)
Dim locbldr303 As LocalBuilder = checkMethodIL.DeclareLocal(GetType(Ident))
locbldr303.SetLocalSymInfo("mn")
checkMethodIL.Emit(OpCodes.Newobj, GetType(Ident).GetConstructor(Type.EmptyTypes))
checkMethodIL.Emit(OpCodes.Stloc, 4)
checkMethodIL.MarkSequencePoint(doc5, 463, 1, 463, 100)
Dim locbldr304 As LocalBuilder = checkMethodIL.DeclareLocal(GetType(Expr))
locbldr304.SetLocalSymInfo("exp")
checkMethodIL.Emit(OpCodes.Ldnull)
checkMethodIL.Emit(OpCodes.Stloc, 5)
checkMethodIL.MarkSequencePoint(doc5, 464, 1, 464, 100)
Dim locbldr305 As LocalBuilder = checkMethodIL.DeclareLocal(GetType(System.Boolean))
locbldr305.SetLocalSymInfo("d")
checkMethodIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
checkMethodIL.Emit(OpCodes.Stloc, 6)
checkMethodIL.MarkSequencePoint(doc5, 466, 1, 466, 100)
checkMethodIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
checkMethodIL.Emit(OpCodes.Ldobj, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa224 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim tru224 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim cont224 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.Emit(OpCodes.Beq, tru224)
checkMethodIL.Emit(OpCodes.Br, fa224)
checkMethodIL.MarkLabel(tru224)
checkMethodIL.MarkSequencePoint(doc5, 468, 1, 468, 100)
Dim locbldr306 As LocalBuilder = checkMethodIL.DeclareLocal(GetType(Expr))
locbldr306.SetLocalSymInfo("tempexp")
checkMethodIL.Emit(OpCodes.Newobj, GetType(Expr).GetConstructor(Type.EmptyTypes))
checkMethodIL.Emit(OpCodes.Stloc, 7)
checkMethodIL.MarkSequencePoint(doc5, 469, 1, 469, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(Expr)
checkMethodIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkMethodIL.Emit(OpCodes.Stfld, GetType(Expr).GetField("Tokens"))
checkMethodIL.MarkSequencePoint(doc5, 470, 1, 470, 100)
Dim locbldr307 As LocalBuilder = checkMethodIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer"))
locbldr307.SetLocalSymInfo("eop")
checkMethodIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer").GetConstructor(Type.EmptyTypes))
checkMethodIL.Emit(OpCodes.Stloc, 8)
checkMethodIL.MarkSequencePoint(doc5, 471, 1, 471, 100)
checkMethodIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
checkMethodIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("ProcessTTokOnly"))
checkMethodIL.MarkSequencePoint(doc5, 472, 1, 472, 100)
Dim typ85(-1) As Type
checkMethodIL.Emit(OpCodes.Ldloc, 8)
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer")
Typ03 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(Expr)
ReDim Preserve typ85(UBound(typ85) + 1)
typ85(UBound(typ85)) = Typ
checkMethodIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Optimize", typ85))
Typ = Typ03.GetMethod("Optimize", typ85).ReturnType
checkMethodIL.Emit(OpCodes.Stloc, 7)
checkMethodIL.MarkSequencePoint(doc5, 473, 1, 473, 100)
checkMethodIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
checkMethodIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("ProcessTTokOnly"))
checkMethodIL.MarkSequencePoint(doc5, 474, 1, 474, 100)
checkMethodIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(Expr)
checkMethodIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
checkMethodIL.Emit(OpCodes.Stfld, GetType(Stmt).GetField("Tokens"))
checkMethodIL.MarkSequencePoint(doc5, 476, 1, 476, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodStmt)
checkMethodIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
checkMethodIL.Emit(OpCodes.Stfld, GetType(MethodStmt).GetField("Line"))
checkMethodIL.MarkSequencePoint(doc5, 477, 1, 477, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodStmt)
checkMethodIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkMethodIL.Emit(OpCodes.Stfld, GetType(MethodStmt).GetField("Tokens"))
checkMethodIL.MarkSequencePoint(doc5, 479, 1, 479, 100)
Dim label8 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.MarkSequencePoint(doc5, 480, 1, 480, 100)
Dim label9 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.MarkSequencePoint(doc5, 481, 1, 481, 100)
Dim label10 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.MarkSequencePoint(doc5, 483, 1, 483, 100)
Dim locbldr308 As LocalBuilder = checkMethodIL.DeclareLocal(GetType(System.Int32))
locbldr308.SetLocalSymInfo("i")
checkMethodIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Stloc, 9)
checkMethodIL.MarkSequencePoint(doc5, 484, 1, 484, 100)
Dim locbldr309 As LocalBuilder = checkMethodIL.DeclareLocal(GetType(System.Int32))
locbldr309.SetLocalSymInfo("len")
checkMethodIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkMethodIL.Emit(OpCodes.Ldlen)
checkMethodIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Sub)
checkMethodIL.Emit(OpCodes.Stloc, 10)
checkMethodIL.MarkSequencePoint(doc5, 485, 1, 485, 100)
Dim locbldr310 As LocalBuilder = checkMethodIL.DeclareLocal(GetType(System.Boolean))
locbldr310.SetLocalSymInfo("bl")
checkMethodIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
checkMethodIL.Emit(OpCodes.Stloc, 11)
checkMethodIL.MarkSequencePoint(doc5, 488, 1, 488, 100)
checkMethodIL.MarkLabel(label8)
checkMethodIL.MarkSequencePoint(doc5, 490, 1, 490, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Add)
checkMethodIL.Emit(OpCodes.Stloc, 9)
checkMethodIL.MarkSequencePoint(doc5, 491, 1, 491, 100)
checkMethodIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodIL.Emit(OpCodes.Stloc, 0)
checkMethodIL.MarkSequencePoint(doc5, 492, 1, 492, 100)
checkMethodIL.Emit(OpCodes.Ldtoken, GetType(Attributes.Attribute))
Dim typ86 As Type() = {GetType(System.RuntimeTypeHandle)}
checkMethodIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ86))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ86).ReturnType
checkMethodIL.Emit(OpCodes.Stloc, 1)
checkMethodIL.MarkSequencePoint(doc5, 493, 1, 493, 100)
Dim typ87(-1) As Type
checkMethodIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkMethodIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ87(UBound(typ87) + 1)
typ87(UBound(typ87)) = Typ
checkMethodIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ87))
Typ = Typ03.GetMethod("IsInstanceOfType", typ87).ReturnType
checkMethodIL.Emit(OpCodes.Stloc, 11)
checkMethodIL.MarkSequencePoint(doc5, 495, 1, 495, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Boolean)
checkMethodIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa225 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim tru225 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim cont225 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.Emit(OpCodes.Beq, tru225)
checkMethodIL.Emit(OpCodes.Br, fa225)
checkMethodIL.MarkLabel(tru225)
checkMethodIL.MarkSequencePoint(doc5, 496, 1, 496, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkMethodIL.Emit(OpCodes.Stloc, 3)
checkMethodIL.MarkSequencePoint(doc5, 497, 1, 497, 100)
Dim typ88(-1) As Type
checkMethodIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodStmt)
Typ03 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Attributes.Attribute)
ReDim Preserve typ88(UBound(typ88) + 1)
typ88(UBound(typ88)) = Typ
checkMethodIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddAttr", typ88))
Typ = Typ03.GetMethod("AddAttr", typ88).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
checkMethodIL.Emit(OpCodes.Pop)
End If
checkMethodIL.MarkSequencePoint(doc5, 498, 1, 498, 100)
checkMethodIL.Emit(OpCodes.Br, cont225)
checkMethodIL.MarkLabel(fa225)
checkMethodIL.MarkSequencePoint(doc5, 499, 1, 499, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Sub)
checkMethodIL.Emit(OpCodes.Stloc, 9)
checkMethodIL.MarkSequencePoint(doc5, 500, 1, 500, 100)
checkMethodIL.Emit(OpCodes.Br, label10)
checkMethodIL.MarkSequencePoint(doc5, 501, 1, 501, 100)
checkMethodIL.Emit(OpCodes.Br, cont225)
checkMethodIL.MarkLabel(cont225)
checkMethodIL.MarkSequencePoint(doc5, 503, 1, 503, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(System.Int32)
Dim fa226 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim tru226 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim cont226 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.Emit(OpCodes.Beq, tru226)
checkMethodIL.Emit(OpCodes.Br, fa226)
checkMethodIL.MarkLabel(tru226)
checkMethodIL.MarkSequencePoint(doc5, 504, 1, 504, 100)
checkMethodIL.Emit(OpCodes.Br, label9)
checkMethodIL.MarkSequencePoint(doc5, 505, 1, 505, 100)
checkMethodIL.Emit(OpCodes.Br, cont226)
checkMethodIL.MarkLabel(fa226)
checkMethodIL.MarkSequencePoint(doc5, 506, 1, 506, 100)
checkMethodIL.Emit(OpCodes.Br, label8)
checkMethodIL.MarkSequencePoint(doc5, 507, 1, 507, 100)
checkMethodIL.Emit(OpCodes.Br, cont226)
checkMethodIL.MarkLabel(cont226)
checkMethodIL.MarkSequencePoint(doc5, 509, 1, 509, 100)
checkMethodIL.MarkLabel(label9)
checkMethodIL.MarkSequencePoint(doc5, 511, 1, 511, 100)
checkMethodIL.MarkLabel(label10)
checkMethodIL.MarkSequencePoint(doc5, 514, 1, 514, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Add)
checkMethodIL.Emit(OpCodes.Stloc, 9)
checkMethodIL.MarkSequencePoint(doc5, 516, 1, 516, 100)
Dim locbldr311 As LocalBuilder = checkMethodIL.DeclareLocal(GetType(Token))
locbldr311.SetLocalSymInfo("tok2")
checkMethodIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodIL.Emit(OpCodes.Stloc, 12)
checkMethodIL.MarkSequencePoint(doc5, 517, 1, 517, 100)
Dim locbldr312 As LocalBuilder = checkMethodIL.DeclareLocal(GetType(System.Type))
locbldr312.SetLocalSymInfo("typ2")
checkMethodIL.MarkSequencePoint(doc5, 518, 1, 518, 100)
Dim locbldr313 As LocalBuilder = checkMethodIL.DeclareLocal(GetType(System.Boolean))
locbldr313.SetLocalSymInfo("b2")
checkMethodIL.MarkSequencePoint(doc5, 520, 1, 520, 100)
checkMethodIL.Emit(OpCodes.Ldtoken, GetType(TypeTok))
Dim typ89 As Type() = {GetType(System.RuntimeTypeHandle)}
checkMethodIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ89))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ89).ReturnType
checkMethodIL.Emit(OpCodes.Stloc, 13)
checkMethodIL.MarkSequencePoint(doc5, 521, 1, 521, 100)
Dim typ90(-1) As Type
checkMethodIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(System.Type)
Typ03 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(Token)
checkMethodIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ90(UBound(typ90) + 1)
typ90(UBound(typ90)) = Typ
checkMethodIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ90))
Typ = Typ03.GetMethod("IsInstanceOfType", typ90).ReturnType
checkMethodIL.Emit(OpCodes.Stloc, 14)
checkMethodIL.MarkSequencePoint(doc5, 523, 1, 523, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(System.Boolean)
checkMethodIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa227 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim tru227 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim cont227 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.Emit(OpCodes.Beq, fa227)
checkMethodIL.Emit(OpCodes.Br, tru227)
checkMethodIL.MarkLabel(tru227)
checkMethodIL.MarkSequencePoint(doc5, 524, 1, 524, 100)
Dim locbldr314 As LocalBuilder = checkMethodIL.DeclareLocal(GetType(Token))
locbldr314.SetLocalSymInfo("t")
checkMethodIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodIL.Emit(OpCodes.Stloc, 15)
checkMethodIL.MarkSequencePoint(doc5, 525, 1, 525, 100)
Dim locbldr315 As LocalBuilder = checkMethodIL.DeclareLocal(GetType(TypeTok))
locbldr315.SetLocalSymInfo("tt")
checkMethodIL.Emit(OpCodes.Newobj, GetType(TypeTok).GetConstructor(Type.EmptyTypes))
checkMethodIL.Emit(OpCodes.Stloc, 16)
checkMethodIL.MarkSequencePoint(doc5, 526, 1, 526, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(TypeTok)
checkMethodIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(Token)
checkMethodIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
checkMethodIL.Emit(OpCodes.Stfld, GetType(TypeTok).GetField("Line"))
checkMethodIL.MarkSequencePoint(doc5, 527, 1, 527, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(TypeTok)
checkMethodIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(Token)
checkMethodIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
checkMethodIL.Emit(OpCodes.Stfld, GetType(TypeTok).GetField("Value"))
checkMethodIL.MarkSequencePoint(doc5, 528, 1, 528, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodStmt)
checkMethodIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(TypeTok)
checkMethodIL.Emit(OpCodes.Stfld, GetType(MethodStmt).GetField("RetTyp"))
checkMethodIL.MarkSequencePoint(doc5, 529, 1, 529, 100)
checkMethodIL.Emit(OpCodes.Br, cont227)
checkMethodIL.MarkLabel(fa227)
checkMethodIL.MarkSequencePoint(doc5, 530, 1, 530, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodStmt)
checkMethodIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodIL.Emit(OpCodes.Stfld, GetType(MethodStmt).GetField("RetTyp"))
checkMethodIL.MarkSequencePoint(doc5, 531, 1, 531, 100)
checkMethodIL.Emit(OpCodes.Br, cont227)
checkMethodIL.MarkLabel(cont227)
checkMethodIL.MarkSequencePoint(doc5, 533, 1, 533, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Add)
checkMethodIL.Emit(OpCodes.Stloc, 9)
checkMethodIL.MarkSequencePoint(doc5, 535, 1, 535, 100)
checkMethodIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodIL.Emit(OpCodes.Stloc, 12)
checkMethodIL.MarkSequencePoint(doc5, 536, 1, 536, 100)
checkMethodIL.Emit(OpCodes.Ldtoken, GetType(Ident))
Dim typ91 As Type() = {GetType(System.RuntimeTypeHandle)}
checkMethodIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ91))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ91).ReturnType
checkMethodIL.Emit(OpCodes.Stloc, 13)
checkMethodIL.MarkSequencePoint(doc5, 537, 1, 537, 100)
Dim typ92(-1) As Type
checkMethodIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(System.Type)
Typ03 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(Token)
checkMethodIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ92(UBound(typ92) + 1)
typ92(UBound(typ92)) = Typ
checkMethodIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ92))
Typ = Typ03.GetMethod("IsInstanceOfType", typ92).ReturnType
checkMethodIL.Emit(OpCodes.Stloc, 14)
checkMethodIL.MarkSequencePoint(doc5, 538, 1, 538, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(System.Boolean)
checkMethodIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa228 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim tru228 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim cont228 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.Emit(OpCodes.Beq, tru228)
checkMethodIL.Emit(OpCodes.Br, fa228)
checkMethodIL.MarkLabel(tru228)
checkMethodIL.MarkSequencePoint(doc5, 539, 1, 539, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodStmt)
checkMethodIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(Token)
checkMethodIL.Emit(OpCodes.Stfld, GetType(MethodStmt).GetField("MethodName"))
checkMethodIL.MarkSequencePoint(doc5, 540, 1, 540, 100)
checkMethodIL.Emit(OpCodes.Br, cont228)
checkMethodIL.MarkLabel(fa228)
checkMethodIL.Emit(OpCodes.Br, cont228)
checkMethodIL.MarkLabel(cont228)
checkMethodIL.MarkSequencePoint(doc5, 542, 1, 542, 100)
Dim label11 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.MarkSequencePoint(doc5, 543, 1, 543, 100)
Dim label12 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.MarkSequencePoint(doc5, 545, 1, 545, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Add)
checkMethodIL.Emit(OpCodes.Stloc, 9)
checkMethodIL.MarkSequencePoint(doc5, 546, 1, 546, 100)
checkMethodIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodIL.Emit(OpCodes.Stloc, 12)
checkMethodIL.MarkSequencePoint(doc5, 547, 1, 547, 100)
checkMethodIL.Emit(OpCodes.Ldtoken, GetType(LParen))
Dim typ93 As Type() = {GetType(System.RuntimeTypeHandle)}
checkMethodIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ93))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ93).ReturnType
checkMethodIL.Emit(OpCodes.Stloc, 13)
checkMethodIL.MarkSequencePoint(doc5, 548, 1, 548, 100)
Dim typ94(-1) As Type
checkMethodIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(System.Type)
Typ03 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(Token)
checkMethodIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ94(UBound(typ94) + 1)
typ94(UBound(typ94)) = Typ
checkMethodIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ94))
Typ = Typ03.GetMethod("IsInstanceOfType", typ94).ReturnType
checkMethodIL.Emit(OpCodes.Stloc, 14)
checkMethodIL.MarkSequencePoint(doc5, 549, 1, 549, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(System.Boolean)
checkMethodIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa229 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim tru229 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim cont229 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.Emit(OpCodes.Beq, tru229)
checkMethodIL.Emit(OpCodes.Br, fa229)
checkMethodIL.MarkLabel(tru229)
checkMethodIL.MarkSequencePoint(doc5, 551, 1, 551, 100)
checkMethodIL.MarkLabel(label11)
checkMethodIL.MarkSequencePoint(doc5, 554, 1, 554, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Add)
checkMethodIL.Emit(OpCodes.Stloc, 9)
checkMethodIL.MarkSequencePoint(doc5, 556, 1, 556, 100)
checkMethodIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodIL.Emit(OpCodes.Stloc, 12)
checkMethodIL.MarkSequencePoint(doc5, 557, 1, 557, 100)
checkMethodIL.Emit(OpCodes.Ldtoken, GetType(RParen))
Dim typ95 As Type() = {GetType(System.RuntimeTypeHandle)}
checkMethodIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ95))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ95).ReturnType
checkMethodIL.Emit(OpCodes.Stloc, 13)
checkMethodIL.MarkSequencePoint(doc5, 558, 1, 558, 100)
Dim typ96(-1) As Type
checkMethodIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(System.Type)
Typ03 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(Token)
checkMethodIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ96(UBound(typ96) + 1)
typ96(UBound(typ96)) = Typ
checkMethodIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ96))
Typ = Typ03.GetMethod("IsInstanceOfType", typ96).ReturnType
checkMethodIL.Emit(OpCodes.Stloc, 14)
checkMethodIL.MarkSequencePoint(doc5, 559, 1, 559, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(System.Boolean)
checkMethodIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa230 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim tru230 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim cont230 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.Emit(OpCodes.Beq, tru230)
checkMethodIL.Emit(OpCodes.Br, fa230)
checkMethodIL.MarkLabel(tru230)
checkMethodIL.MarkSequencePoint(doc5, 560, 1, 560, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Boolean)
checkMethodIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa231 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim tru231 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim cont231 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.Emit(OpCodes.Beq, tru231)
checkMethodIL.Emit(OpCodes.Br, fa231)
checkMethodIL.MarkLabel(tru231)
checkMethodIL.MarkSequencePoint(doc5, 561, 1, 561, 100)
Dim locbldr316 As LocalBuilder = checkMethodIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer"))
locbldr316.SetLocalSymInfo("eopt2")
checkMethodIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer").GetConstructor(Type.EmptyTypes))
checkMethodIL.Emit(OpCodes.Stloc, 17)
checkMethodIL.MarkSequencePoint(doc5, 562, 1, 562, 100)
Dim typ97(-1) As Type
checkMethodIL.Emit(OpCodes.Ldloc, 17)
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer")
Typ03 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Expr)
ReDim Preserve typ97(UBound(typ97) + 1)
typ97(UBound(typ97)) = Typ
checkMethodIL.Emit(OpCodes.Ldloca, 11)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ97(UBound(typ97) + 1)
typ97(UBound(typ97)) = Typ
checkMethodIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("checkVarAs", typ97))
Typ = Typ03.GetMethod("checkVarAs", typ97).ReturnType
checkMethodIL.Emit(OpCodes.Stloc, 5)
checkMethodIL.MarkSequencePoint(doc5, 563, 1, 563, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Boolean)
checkMethodIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa232 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim tru232 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim cont232 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.Emit(OpCodes.Beq, tru232)
checkMethodIL.Emit(OpCodes.Br, fa232)
checkMethodIL.MarkLabel(tru232)
checkMethodIL.MarkSequencePoint(doc5, 564, 1, 564, 100)
Dim typ98(-1) As Type
checkMethodIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodStmt)
Typ03 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Expr)
ReDim Preserve typ98(UBound(typ98) + 1)
typ98(UBound(typ98)) = Typ
checkMethodIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddParam", typ98))
Typ = Typ03.GetMethod("AddParam", typ98).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
checkMethodIL.Emit(OpCodes.Pop)
End If
checkMethodIL.MarkSequencePoint(doc5, 565, 1, 565, 100)
checkMethodIL.Emit(OpCodes.Br, cont232)
checkMethodIL.MarkLabel(fa232)
checkMethodIL.Emit(OpCodes.Br, cont232)
checkMethodIL.MarkLabel(cont232)
checkMethodIL.MarkSequencePoint(doc5, 566, 1, 566, 100)
checkMethodIL.Emit(OpCodes.Br, cont231)
checkMethodIL.MarkLabel(fa231)
checkMethodIL.Emit(OpCodes.Br, cont231)
checkMethodIL.MarkLabel(cont231)
checkMethodIL.MarkSequencePoint(doc5, 567, 1, 567, 100)
checkMethodIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
checkMethodIL.Emit(OpCodes.Stloc, 6)
checkMethodIL.MarkSequencePoint(doc5, 568, 1, 568, 100)
checkMethodIL.Emit(OpCodes.Br, label12)
checkMethodIL.MarkSequencePoint(doc5, 569, 1, 569, 100)
checkMethodIL.Emit(OpCodes.Br, cont230)
checkMethodIL.MarkLabel(fa230)
checkMethodIL.Emit(OpCodes.Br, cont230)
checkMethodIL.MarkLabel(cont230)
checkMethodIL.MarkSequencePoint(doc5, 571, 1, 571, 100)
checkMethodIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodIL.Emit(OpCodes.Stloc, 12)
checkMethodIL.MarkSequencePoint(doc5, 572, 1, 572, 100)
checkMethodIL.Emit(OpCodes.Ldtoken, GetType(VarTok))
Dim typ99 As Type() = {GetType(System.RuntimeTypeHandle)}
checkMethodIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ99))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ99).ReturnType
checkMethodIL.Emit(OpCodes.Stloc, 13)
checkMethodIL.MarkSequencePoint(doc5, 573, 1, 573, 100)
Dim typ100(-1) As Type
checkMethodIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(System.Type)
Typ03 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(Token)
checkMethodIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ100(UBound(typ100) + 1)
typ100(UBound(typ100)) = Typ
checkMethodIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ100))
Typ = Typ03.GetMethod("IsInstanceOfType", typ100).ReturnType
checkMethodIL.Emit(OpCodes.Stloc, 14)
checkMethodIL.MarkSequencePoint(doc5, 574, 1, 574, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(System.Boolean)
checkMethodIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa233 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim tru233 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim cont233 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.Emit(OpCodes.Beq, tru233)
checkMethodIL.Emit(OpCodes.Br, fa233)
checkMethodIL.MarkLabel(tru233)
checkMethodIL.MarkSequencePoint(doc5, 575, 1, 575, 100)
checkMethodIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
checkMethodIL.Emit(OpCodes.Stloc, 6)
checkMethodIL.MarkSequencePoint(doc5, 576, 1, 576, 100)
checkMethodIL.Emit(OpCodes.Newobj, GetType(Expr).GetConstructor(Type.EmptyTypes))
checkMethodIL.Emit(OpCodes.Stloc, 5)
checkMethodIL.MarkSequencePoint(doc5, 577, 1, 577, 100)
checkMethodIL.Emit(OpCodes.Br, cont233)
checkMethodIL.MarkLabel(fa233)
checkMethodIL.Emit(OpCodes.Br, cont233)
checkMethodIL.MarkLabel(cont233)
checkMethodIL.MarkSequencePoint(doc5, 579, 1, 579, 100)
checkMethodIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodIL.Emit(OpCodes.Stloc, 12)
checkMethodIL.MarkSequencePoint(doc5, 580, 1, 580, 100)
checkMethodIL.Emit(OpCodes.Ldtoken, GetType(Comma))
Dim typ101 As Type() = {GetType(System.RuntimeTypeHandle)}
checkMethodIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ101))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ101).ReturnType
checkMethodIL.Emit(OpCodes.Stloc, 13)
checkMethodIL.MarkSequencePoint(doc5, 581, 1, 581, 100)
Dim typ102(-1) As Type
checkMethodIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(System.Type)
Typ03 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(Token)
checkMethodIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ102(UBound(typ102) + 1)
typ102(UBound(typ102)) = Typ
checkMethodIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ102))
Typ = Typ03.GetMethod("IsInstanceOfType", typ102).ReturnType
checkMethodIL.Emit(OpCodes.Stloc, 14)
checkMethodIL.MarkSequencePoint(doc5, 582, 1, 582, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(System.Boolean)
checkMethodIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa234 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim tru234 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim cont234 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.Emit(OpCodes.Beq, tru234)
checkMethodIL.Emit(OpCodes.Br, fa234)
checkMethodIL.MarkLabel(tru234)
checkMethodIL.MarkSequencePoint(doc5, 583, 1, 583, 100)
Dim locbldr317 As LocalBuilder = checkMethodIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer"))
locbldr317.SetLocalSymInfo("eopt1")
checkMethodIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer").GetConstructor(Type.EmptyTypes))
checkMethodIL.Emit(OpCodes.Stloc, 18)
checkMethodIL.MarkSequencePoint(doc5, 584, 1, 584, 100)
Dim typ103(-1) As Type
checkMethodIL.Emit(OpCodes.Ldloc, 18)
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer")
Typ03 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Expr)
ReDim Preserve typ103(UBound(typ103) + 1)
typ103(UBound(typ103)) = Typ
checkMethodIL.Emit(OpCodes.Ldloca, 11)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ103(UBound(typ103) + 1)
typ103(UBound(typ103)) = Typ
checkMethodIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("checkVarAs", typ103))
Typ = Typ03.GetMethod("checkVarAs", typ103).ReturnType
checkMethodIL.Emit(OpCodes.Stloc, 5)
checkMethodIL.MarkSequencePoint(doc5, 585, 1, 585, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Boolean)
checkMethodIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa235 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim tru235 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim cont235 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.Emit(OpCodes.Beq, tru235)
checkMethodIL.Emit(OpCodes.Br, fa235)
checkMethodIL.MarkLabel(tru235)
checkMethodIL.MarkSequencePoint(doc5, 586, 1, 586, 100)
Dim typ104(-1) As Type
checkMethodIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodStmt)
Typ03 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Expr)
ReDim Preserve typ104(UBound(typ104) + 1)
typ104(UBound(typ104)) = Typ
checkMethodIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddParam", typ104))
Typ = Typ03.GetMethod("AddParam", typ104).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
checkMethodIL.Emit(OpCodes.Pop)
End If
checkMethodIL.MarkSequencePoint(doc5, 587, 1, 587, 100)
checkMethodIL.Emit(OpCodes.Br, cont235)
checkMethodIL.MarkLabel(fa235)
checkMethodIL.Emit(OpCodes.Br, cont235)
checkMethodIL.MarkLabel(cont235)
checkMethodIL.MarkSequencePoint(doc5, 588, 1, 588, 100)
checkMethodIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
checkMethodIL.Emit(OpCodes.Stloc, 6)
checkMethodIL.MarkSequencePoint(doc5, 589, 1, 589, 100)
checkMethodIL.Emit(OpCodes.Br, cont234)
checkMethodIL.MarkLabel(fa234)
checkMethodIL.Emit(OpCodes.Br, cont234)
checkMethodIL.MarkLabel(cont234)
checkMethodIL.MarkSequencePoint(doc5, 591, 1, 591, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Boolean)
checkMethodIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa236 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim tru236 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim cont236 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.Emit(OpCodes.Beq, tru236)
checkMethodIL.Emit(OpCodes.Br, fa236)
checkMethodIL.MarkLabel(tru236)
checkMethodIL.MarkSequencePoint(doc5, 592, 1, 592, 100)
Dim typ105(-1) As Type
checkMethodIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Expr)
Typ03 = Typ
checkMethodIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ReDim Preserve typ105(UBound(typ105) + 1)
typ105(UBound(typ105)) = Typ
checkMethodIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ105))
Typ = Typ03.GetMethod("AddToken", typ105).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
checkMethodIL.Emit(OpCodes.Pop)
End If
checkMethodIL.MarkSequencePoint(doc5, 593, 1, 593, 100)
checkMethodIL.Emit(OpCodes.Br, cont236)
checkMethodIL.MarkLabel(fa236)
checkMethodIL.Emit(OpCodes.Br, cont236)
checkMethodIL.MarkLabel(cont236)
checkMethodIL.MarkSequencePoint(doc5, 596, 1, 596, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Int32)
checkMethodIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(System.Int32)
Dim fa237 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim tru237 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
Dim cont237 As System.Reflection.Emit.Label = checkMethodIL.DefineLabel()
checkMethodIL.Emit(OpCodes.Beq, tru237)
checkMethodIL.Emit(OpCodes.Br, fa237)
checkMethodIL.MarkLabel(tru237)
checkMethodIL.MarkSequencePoint(doc5, 597, 1, 597, 100)
checkMethodIL.Emit(OpCodes.Br, label12)
checkMethodIL.MarkSequencePoint(doc5, 598, 1, 598, 100)
checkMethodIL.Emit(OpCodes.Br, cont237)
checkMethodIL.MarkLabel(fa237)
checkMethodIL.MarkSequencePoint(doc5, 599, 1, 599, 100)
checkMethodIL.Emit(OpCodes.Br, label11)
checkMethodIL.MarkSequencePoint(doc5, 600, 1, 600, 100)
checkMethodIL.Emit(OpCodes.Br, cont237)
checkMethodIL.MarkLabel(cont237)
checkMethodIL.MarkSequencePoint(doc5, 602, 1, 602, 100)
checkMethodIL.MarkLabel(label12)
checkMethodIL.MarkSequencePoint(doc5, 604, 1, 604, 100)
checkMethodIL.Emit(OpCodes.Br, cont229)
checkMethodIL.MarkLabel(fa229)
checkMethodIL.Emit(OpCodes.Br, cont229)
checkMethodIL.MarkLabel(cont229)
checkMethodIL.MarkSequencePoint(doc5, 606, 1, 606, 100)
checkMethodIL.Emit(OpCodes.Br, cont224)
checkMethodIL.MarkLabel(fa224)
checkMethodIL.Emit(OpCodes.Br, cont224)
checkMethodIL.MarkLabel(cont224)
checkMethodIL.MarkSequencePoint(doc5, 607, 1, 607, 100)
checkMethodIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodStmt)
checkMethodIL.MarkSequencePoint(doc5, 608, 1, 608, 100)
checkMethodIL.Emit(OpCodes.Ret)
Dim typ106(-1) As Type
ReDim Preserve typ106(UBound(typ106) + 1)
typ106(UBound(typ106)) = GetType(Stmt)
ReDim Preserve typ106(UBound(typ106) + 1)
typ106(UBound(typ106)) = GetType(System.Boolean).MakeByRefType()
Dim checkMethodCall As MethodBuilder = StmtOptimizer.DefineMethod("checkMethodCall", MethodAttributes.Public, GetType(Stmt), typ106)
Dim checkMethodCallIL As ILGenerator = checkMethodCall.GetILGenerator()
Dim checkMethodCallparam01 As ParameterBuilder = checkMethodCall.DefineParameter(1, ParameterAttributes.None, "stm")
Dim checkMethodCallparam02 As ParameterBuilder = checkMethodCall.DefineParameter(2, ParameterAttributes.None, "b")
checkMethodCallIL.MarkSequencePoint(doc5, 612, 1, 612, 100)
checkMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodCallIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkMethodCallIL.Emit(OpCodes.Ldlen)
checkMethodCallIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
Dim fa238 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim tru238 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim cont238 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
checkMethodCallIL.Emit(OpCodes.Bgt, tru238)
checkMethodCallIL.Emit(OpCodes.Br, fa238)
checkMethodCallIL.MarkLabel(tru238)
checkMethodCallIL.MarkSequencePoint(doc5, 613, 1, 613, 100)
Dim locbldr318 As LocalBuilder = checkMethodCallIL.DeclareLocal(GetType(Token))
locbldr318.SetLocalSymInfo("tok")
checkMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodCallIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodCallIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodCallIL.Emit(OpCodes.Stloc, 0)
checkMethodCallIL.MarkSequencePoint(doc5, 614, 1, 614, 100)
Dim locbldr319 As LocalBuilder = checkMethodCallIL.DeclareLocal(GetType(System.Type))
locbldr319.SetLocalSymInfo("typ")
checkMethodCallIL.Emit(OpCodes.Ldtoken, GetType(Ident))
Dim typ107 As Type() = {GetType(System.RuntimeTypeHandle)}
checkMethodCallIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ107))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ107).ReturnType
checkMethodCallIL.Emit(OpCodes.Stloc, 1)
checkMethodCallIL.MarkSequencePoint(doc5, 615, 1, 615, 100)
Dim locbldr320 As LocalBuilder = checkMethodCallIL.DeclareLocal(GetType(Token))
locbldr320.SetLocalSymInfo("tokb")
checkMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodCallIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodCallIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodCallIL.Emit(OpCodes.Stloc, 2)
checkMethodCallIL.MarkSequencePoint(doc5, 616, 1, 616, 100)
Dim locbldr321 As LocalBuilder = checkMethodCallIL.DeclareLocal(GetType(System.Type))
locbldr321.SetLocalSymInfo("typb")
checkMethodCallIL.Emit(OpCodes.Ldtoken, GetType(LParen))
Dim typ108 As Type() = {GetType(System.RuntimeTypeHandle)}
checkMethodCallIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ108))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ108).ReturnType
checkMethodCallIL.Emit(OpCodes.Stloc, 3)
checkMethodCallIL.MarkSequencePoint(doc5, 617, 1, 617, 100)
Dim locbldr322 As LocalBuilder = checkMethodCallIL.DeclareLocal(GetType(System.Boolean))
locbldr322.SetLocalSymInfo("ba")
Dim typ109(-1) As Type
checkMethodCallIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkMethodCallIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkMethodCallIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ109(UBound(typ109) + 1)
typ109(UBound(typ109)) = Typ
checkMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ109))
Typ = Typ03.GetMethod("IsInstanceOfType", typ109).ReturnType
checkMethodCallIL.Emit(OpCodes.Stloc, 4)
checkMethodCallIL.MarkSequencePoint(doc5, 618, 1, 618, 100)
Dim locbldr323 As LocalBuilder = checkMethodCallIL.DeclareLocal(GetType(System.Boolean))
locbldr323.SetLocalSymInfo("bb")
Dim typ110(-1) As Type
checkMethodCallIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Type)
Typ03 = Typ
checkMethodCallIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Token)
checkMethodCallIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ110(UBound(typ110) + 1)
typ110(UBound(typ110)) = Typ
checkMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ110))
Typ = Typ03.GetMethod("IsInstanceOfType", typ110).ReturnType
checkMethodCallIL.Emit(OpCodes.Stloc, 5)
checkMethodCallIL.MarkSequencePoint(doc5, 620, 1, 620, 100)
checkMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
checkMethodCallIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
checkMethodCallIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
checkMethodCallIL.Emit(OpCodes.And)
checkMethodCallIL.Emit(OpCodes.Stobj, Typ04)
checkMethodCallIL.MarkSequencePoint(doc5, 622, 1, 622, 100)
Dim locbldr324 As LocalBuilder = checkMethodCallIL.DeclareLocal(GetType(MethodCallStmt))
locbldr324.SetLocalSymInfo("mtcss")
checkMethodCallIL.Emit(OpCodes.Newobj, GetType(MethodCallStmt).GetConstructor(Type.EmptyTypes))
checkMethodCallIL.Emit(OpCodes.Stloc, 6)
checkMethodCallIL.MarkSequencePoint(doc5, 623, 1, 623, 100)
Dim locbldr325 As LocalBuilder = checkMethodCallIL.DeclareLocal(GetType(MethodNameTok))
locbldr325.SetLocalSymInfo("mn")
checkMethodCallIL.Emit(OpCodes.Newobj, GetType(MethodNameTok).GetConstructor(Type.EmptyTypes))
checkMethodCallIL.Emit(OpCodes.Stloc, 7)
checkMethodCallIL.MarkSequencePoint(doc5, 624, 1, 624, 100)
Dim locbldr326 As LocalBuilder = checkMethodCallIL.DeclareLocal(GetType(MethodCallTok))
locbldr326.SetLocalSymInfo("mct")
checkMethodCallIL.Emit(OpCodes.Newobj, GetType(MethodCallTok).GetConstructor(Type.EmptyTypes))
checkMethodCallIL.Emit(OpCodes.Stloc, 8)
checkMethodCallIL.MarkSequencePoint(doc5, 625, 1, 625, 100)
Dim locbldr327 As LocalBuilder = checkMethodCallIL.DeclareLocal(GetType(Ident))
locbldr327.SetLocalSymInfo("idt")
checkMethodCallIL.Emit(OpCodes.Ldnull)
checkMethodCallIL.Emit(OpCodes.Stloc, 9)
checkMethodCallIL.MarkSequencePoint(doc5, 626, 1, 626, 100)
Dim locbldr328 As LocalBuilder = checkMethodCallIL.DeclareLocal(GetType(Expr))
locbldr328.SetLocalSymInfo("exp")
checkMethodCallIL.Emit(OpCodes.Newobj, GetType(Expr).GetConstructor(Type.EmptyTypes))
checkMethodCallIL.Emit(OpCodes.Stloc, 10)
checkMethodCallIL.MarkSequencePoint(doc5, 627, 1, 627, 100)
Dim locbldr329 As LocalBuilder = checkMethodCallIL.DeclareLocal(GetType(System.Int32))
locbldr329.SetLocalSymInfo("lvl")
checkMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Stloc, 11)
checkMethodCallIL.MarkSequencePoint(doc5, 628, 1, 628, 100)
Dim locbldr330 As LocalBuilder = checkMethodCallIL.DeclareLocal(GetType(System.Boolean))
locbldr330.SetLocalSymInfo("d")
checkMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
checkMethodCallIL.Emit(OpCodes.Stloc, 12)
checkMethodCallIL.MarkSequencePoint(doc5, 629, 1, 629, 100)
Dim locbldr331 As LocalBuilder = checkMethodCallIL.DeclareLocal(GetType(System.Int32))
locbldr331.SetLocalSymInfo("i")
checkMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Stloc, 13)
checkMethodCallIL.MarkSequencePoint(doc5, 631, 1, 631, 100)
checkMethodCallIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
checkMethodCallIL.Emit(OpCodes.Ldobj, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa239 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim tru239 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim cont239 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
checkMethodCallIL.Emit(OpCodes.Beq, tru239)
checkMethodCallIL.Emit(OpCodes.Br, fa239)
checkMethodCallIL.MarkLabel(tru239)
checkMethodCallIL.MarkSequencePoint(doc5, 633, 1, 633, 100)
checkMethodCallIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(MethodCallStmt)
checkMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodCallIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
checkMethodCallIL.Emit(OpCodes.Stfld, GetType(MethodCallStmt).GetField("Line"))
checkMethodCallIL.MarkSequencePoint(doc5, 634, 1, 634, 100)
checkMethodCallIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(MethodCallStmt)
checkMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodCallIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkMethodCallIL.Emit(OpCodes.Stfld, GetType(MethodCallStmt).GetField("Tokens"))
checkMethodCallIL.MarkSequencePoint(doc5, 636, 1, 636, 100)
checkMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodCallIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodCallIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodCallIL.Emit(OpCodes.Stloc, 9)
checkMethodCallIL.MarkSequencePoint(doc5, 637, 1, 637, 100)
checkMethodCallIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(MethodNameTok)
checkMethodCallIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Ident)
checkMethodCallIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Line"))
Typ = GetType(Ident).GetField("Line").FieldType
checkMethodCallIL.Emit(OpCodes.Stfld, GetType(MethodNameTok).GetField("Line"))
checkMethodCallIL.MarkSequencePoint(doc5, 638, 1, 638, 100)
checkMethodCallIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(MethodNameTok)
checkMethodCallIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Ident)
checkMethodCallIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
checkMethodCallIL.Emit(OpCodes.Stfld, GetType(MethodNameTok).GetField("Value"))
checkMethodCallIL.MarkSequencePoint(doc5, 640, 1, 640, 100)
Dim locbldr332 As LocalBuilder = checkMethodCallIL.DeclareLocal(GetType(Token))
locbldr332.SetLocalSymInfo("tok2")
checkMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodCallIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodCallIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodCallIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodCallIL.Emit(OpCodes.Stloc, 14)
checkMethodCallIL.MarkSequencePoint(doc5, 641, 1, 641, 100)
Dim locbldr333 As LocalBuilder = checkMethodCallIL.DeclareLocal(GetType(System.Type))
locbldr333.SetLocalSymInfo("typ2")
checkMethodCallIL.MarkSequencePoint(doc5, 642, 1, 642, 100)
Dim locbldr334 As LocalBuilder = checkMethodCallIL.DeclareLocal(GetType(System.Boolean))
locbldr334.SetLocalSymInfo("b2")
checkMethodCallIL.MarkSequencePoint(doc5, 643, 1, 643, 100)
Dim locbldr335 As LocalBuilder = checkMethodCallIL.DeclareLocal(GetType(System.Int32))
locbldr335.SetLocalSymInfo("len")
checkMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodCallIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkMethodCallIL.Emit(OpCodes.Ldlen)
checkMethodCallIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Stloc, 17)
checkMethodCallIL.MarkSequencePoint(doc5, 644, 1, 644, 100)
Dim locbldr336 As LocalBuilder = checkMethodCallIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer"))
locbldr336.SetLocalSymInfo("eopt")
checkMethodCallIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer").GetConstructor(Type.EmptyTypes))
checkMethodCallIL.Emit(OpCodes.Stloc, 18)
checkMethodCallIL.MarkSequencePoint(doc5, 646, 1, 646, 100)
Dim label13 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
checkMethodCallIL.MarkSequencePoint(doc5, 647, 1, 647, 100)
Dim label14 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
checkMethodCallIL.MarkSequencePoint(doc5, 648, 1, 648, 100)
Dim label15 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
checkMethodCallIL.MarkSequencePoint(doc5, 650, 1, 650, 100)
checkMethodCallIL.MarkLabel(label13)
checkMethodCallIL.MarkSequencePoint(doc5, 653, 1, 653, 100)
checkMethodCallIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Add)
checkMethodCallIL.Emit(OpCodes.Stloc, 13)
checkMethodCallIL.MarkSequencePoint(doc5, 655, 1, 655, 100)
checkMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodCallIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodCallIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodCallIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodCallIL.Emit(OpCodes.Stloc, 14)
checkMethodCallIL.MarkSequencePoint(doc5, 656, 1, 656, 100)
checkMethodCallIL.Emit(OpCodes.Ldtoken, GetType(RParen))
Dim typ111 As Type() = {GetType(System.RuntimeTypeHandle)}
checkMethodCallIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ111))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ111).ReturnType
checkMethodCallIL.Emit(OpCodes.Stloc, 15)
checkMethodCallIL.MarkSequencePoint(doc5, 657, 1, 657, 100)
Dim typ112(-1) As Type
checkMethodCallIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(System.Type)
Typ03 = Typ
checkMethodCallIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(Token)
checkMethodCallIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ112(UBound(typ112) + 1)
typ112(UBound(typ112)) = Typ
checkMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ112))
Typ = Typ03.GetMethod("IsInstanceOfType", typ112).ReturnType
checkMethodCallIL.Emit(OpCodes.Stloc, 16)
checkMethodCallIL.MarkSequencePoint(doc5, 658, 1, 658, 100)
checkMethodCallIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(System.Boolean)
checkMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa240 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim tru240 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim cont240 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
checkMethodCallIL.Emit(OpCodes.Beq, tru240)
checkMethodCallIL.Emit(OpCodes.Br, fa240)
checkMethodCallIL.MarkLabel(tru240)
checkMethodCallIL.MarkSequencePoint(doc5, 659, 1, 659, 100)
checkMethodCallIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Sub)
checkMethodCallIL.Emit(OpCodes.Stloc, 11)
checkMethodCallIL.MarkSequencePoint(doc5, 660, 1, 660, 100)
checkMethodCallIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa241 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim tru241 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim cont241 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
checkMethodCallIL.Emit(OpCodes.Beq, tru241)
checkMethodCallIL.Emit(OpCodes.Br, fa241)
checkMethodCallIL.MarkLabel(tru241)
checkMethodCallIL.MarkSequencePoint(doc5, 661, 1, 661, 100)
checkMethodCallIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
checkMethodCallIL.Emit(OpCodes.Stloc, 12)
checkMethodCallIL.MarkSequencePoint(doc5, 662, 1, 662, 100)
Dim typ113(-1) As Type
checkMethodCallIL.Emit(OpCodes.Ldloc, 18)
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer")
Typ03 = Typ
checkMethodCallIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(Expr)
ReDim Preserve typ113(UBound(typ113) + 1)
typ113(UBound(typ113)) = Typ
checkMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Optimize", typ113))
Typ = Typ03.GetMethod("Optimize", typ113).ReturnType
checkMethodCallIL.Emit(OpCodes.Stloc, 10)
checkMethodCallIL.MarkSequencePoint(doc5, 663, 1, 663, 100)
checkMethodCallIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(Expr)
checkMethodCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
checkMethodCallIL.Emit(OpCodes.Ldlen)
checkMethodCallIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa242 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim tru242 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim cont242 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
checkMethodCallIL.Emit(OpCodes.Bgt, tru242)
checkMethodCallIL.Emit(OpCodes.Br, fa242)
checkMethodCallIL.MarkLabel(tru242)
checkMethodCallIL.MarkSequencePoint(doc5, 664, 1, 664, 100)
Dim typ114(-1) As Type
checkMethodCallIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(MethodCallTok)
Typ03 = Typ
checkMethodCallIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(Expr)
ReDim Preserve typ114(UBound(typ114) + 1)
typ114(UBound(typ114)) = Typ
checkMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddParam", typ114))
Typ = Typ03.GetMethod("AddParam", typ114).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
checkMethodCallIL.Emit(OpCodes.Pop)
End If
checkMethodCallIL.MarkSequencePoint(doc5, 665, 1, 665, 100)
checkMethodCallIL.Emit(OpCodes.Br, cont242)
checkMethodCallIL.MarkLabel(fa242)
checkMethodCallIL.Emit(OpCodes.Br, cont242)
checkMethodCallIL.MarkLabel(cont242)
checkMethodCallIL.MarkSequencePoint(doc5, 666, 1, 666, 100)
checkMethodCallIL.Emit(OpCodes.Br, label14)
checkMethodCallIL.MarkSequencePoint(doc5, 667, 1, 667, 100)
checkMethodCallIL.Emit(OpCodes.Br, cont241)
checkMethodCallIL.MarkLabel(fa241)
checkMethodCallIL.MarkSequencePoint(doc5, 668, 1, 668, 100)
checkMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
checkMethodCallIL.Emit(OpCodes.Stloc, 12)
checkMethodCallIL.MarkSequencePoint(doc5, 669, 1, 669, 100)
checkMethodCallIL.Emit(OpCodes.Br, label15)
checkMethodCallIL.MarkSequencePoint(doc5, 670, 1, 670, 100)
checkMethodCallIL.Emit(OpCodes.Br, cont241)
checkMethodCallIL.MarkLabel(cont241)
checkMethodCallIL.MarkSequencePoint(doc5, 671, 1, 671, 100)
checkMethodCallIL.Emit(OpCodes.Br, label15)
checkMethodCallIL.MarkSequencePoint(doc5, 672, 1, 672, 100)
checkMethodCallIL.Emit(OpCodes.Br, cont240)
checkMethodCallIL.MarkLabel(fa240)
checkMethodCallIL.Emit(OpCodes.Br, cont240)
checkMethodCallIL.MarkLabel(cont240)
checkMethodCallIL.MarkSequencePoint(doc5, 674, 1, 674, 100)
checkMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodCallIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodCallIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodCallIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodCallIL.Emit(OpCodes.Stloc, 14)
checkMethodCallIL.MarkSequencePoint(doc5, 675, 1, 675, 100)
checkMethodCallIL.Emit(OpCodes.Ldtoken, GetType(LParen))
Dim typ115 As Type() = {GetType(System.RuntimeTypeHandle)}
checkMethodCallIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ115))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ115).ReturnType
checkMethodCallIL.Emit(OpCodes.Stloc, 15)
checkMethodCallIL.MarkSequencePoint(doc5, 676, 1, 676, 100)
Dim typ116(-1) As Type
checkMethodCallIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(System.Type)
Typ03 = Typ
checkMethodCallIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(Token)
checkMethodCallIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ116(UBound(typ116) + 1)
typ116(UBound(typ116)) = Typ
checkMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ116))
Typ = Typ03.GetMethod("IsInstanceOfType", typ116).ReturnType
checkMethodCallIL.Emit(OpCodes.Stloc, 16)
checkMethodCallIL.MarkSequencePoint(doc5, 677, 1, 677, 100)
checkMethodCallIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(System.Boolean)
checkMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa243 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim tru243 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim cont243 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
checkMethodCallIL.Emit(OpCodes.Beq, tru243)
checkMethodCallIL.Emit(OpCodes.Br, fa243)
checkMethodCallIL.MarkLabel(tru243)
checkMethodCallIL.MarkSequencePoint(doc5, 678, 1, 678, 100)
checkMethodCallIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Add)
checkMethodCallIL.Emit(OpCodes.Stloc, 11)
checkMethodCallIL.MarkSequencePoint(doc5, 679, 1, 679, 100)
checkMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
checkMethodCallIL.Emit(OpCodes.Stloc, 12)
checkMethodCallIL.MarkSequencePoint(doc5, 680, 1, 680, 100)
checkMethodCallIL.Emit(OpCodes.Br, label15)
checkMethodCallIL.MarkSequencePoint(doc5, 681, 1, 681, 100)
checkMethodCallIL.Emit(OpCodes.Br, cont243)
checkMethodCallIL.MarkLabel(fa243)
checkMethodCallIL.Emit(OpCodes.Br, cont243)
checkMethodCallIL.MarkLabel(cont243)
checkMethodCallIL.MarkSequencePoint(doc5, 683, 1, 683, 100)
checkMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodCallIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodCallIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodCallIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkMethodCallIL.Emit(OpCodes.Stloc, 14)
checkMethodCallIL.MarkSequencePoint(doc5, 684, 1, 684, 100)
checkMethodCallIL.Emit(OpCodes.Ldtoken, GetType(Comma))
Dim typ117 As Type() = {GetType(System.RuntimeTypeHandle)}
checkMethodCallIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ117))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ117).ReturnType
checkMethodCallIL.Emit(OpCodes.Stloc, 15)
checkMethodCallIL.MarkSequencePoint(doc5, 685, 1, 685, 100)
Dim typ118(-1) As Type
checkMethodCallIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(System.Type)
Typ03 = Typ
checkMethodCallIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(Token)
checkMethodCallIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ118(UBound(typ118) + 1)
typ118(UBound(typ118)) = Typ
checkMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ118))
Typ = Typ03.GetMethod("IsInstanceOfType", typ118).ReturnType
checkMethodCallIL.Emit(OpCodes.Stloc, 16)
checkMethodCallIL.MarkSequencePoint(doc5, 686, 1, 686, 100)
checkMethodCallIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(System.Boolean)
checkMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa244 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim tru244 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim cont244 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
checkMethodCallIL.Emit(OpCodes.Beq, tru244)
checkMethodCallIL.Emit(OpCodes.Br, fa244)
checkMethodCallIL.MarkLabel(tru244)
checkMethodCallIL.MarkSequencePoint(doc5, 687, 1, 687, 100)
checkMethodCallIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
Dim fa245 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim tru245 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim cont245 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
checkMethodCallIL.Emit(OpCodes.Beq, tru245)
checkMethodCallIL.Emit(OpCodes.Br, fa245)
checkMethodCallIL.MarkLabel(tru245)
checkMethodCallIL.MarkSequencePoint(doc5, 688, 1, 688, 100)
checkMethodCallIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
checkMethodCallIL.Emit(OpCodes.Stloc, 12)
checkMethodCallIL.MarkSequencePoint(doc5, 689, 1, 689, 100)
Dim typ119(-1) As Type
checkMethodCallIL.Emit(OpCodes.Ldloc, 18)
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer")
Typ03 = Typ
checkMethodCallIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(Expr)
ReDim Preserve typ119(UBound(typ119) + 1)
typ119(UBound(typ119)) = Typ
checkMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Optimize", typ119))
Typ = Typ03.GetMethod("Optimize", typ119).ReturnType
checkMethodCallIL.Emit(OpCodes.Stloc, 10)
checkMethodCallIL.MarkSequencePoint(doc5, 690, 1, 690, 100)
checkMethodCallIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(Expr)
checkMethodCallIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
checkMethodCallIL.Emit(OpCodes.Ldlen)
checkMethodCallIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa246 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim tru246 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim cont246 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
checkMethodCallIL.Emit(OpCodes.Bgt, tru246)
checkMethodCallIL.Emit(OpCodes.Br, fa246)
checkMethodCallIL.MarkLabel(tru246)
checkMethodCallIL.MarkSequencePoint(doc5, 691, 1, 691, 100)
Dim typ120(-1) As Type
checkMethodCallIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(MethodCallTok)
Typ03 = Typ
checkMethodCallIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(Expr)
ReDim Preserve typ120(UBound(typ120) + 1)
typ120(UBound(typ120)) = Typ
checkMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddParam", typ120))
Typ = Typ03.GetMethod("AddParam", typ120).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
checkMethodCallIL.Emit(OpCodes.Pop)
End If
checkMethodCallIL.MarkSequencePoint(doc5, 692, 1, 692, 100)
checkMethodCallIL.Emit(OpCodes.Br, cont246)
checkMethodCallIL.MarkLabel(fa246)
checkMethodCallIL.Emit(OpCodes.Br, cont246)
checkMethodCallIL.MarkLabel(cont246)
checkMethodCallIL.MarkSequencePoint(doc5, 693, 1, 693, 100)
checkMethodCallIL.Emit(OpCodes.Newobj, GetType(Expr).GetConstructor(Type.EmptyTypes))
checkMethodCallIL.Emit(OpCodes.Stloc, 10)
checkMethodCallIL.MarkSequencePoint(doc5, 694, 1, 694, 100)
checkMethodCallIL.Emit(OpCodes.Br, label15)
checkMethodCallIL.MarkSequencePoint(doc5, 695, 1, 695, 100)
checkMethodCallIL.Emit(OpCodes.Br, cont245)
checkMethodCallIL.MarkLabel(fa245)
checkMethodCallIL.MarkSequencePoint(doc5, 696, 1, 696, 100)
checkMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
checkMethodCallIL.Emit(OpCodes.Stloc, 12)
checkMethodCallIL.MarkSequencePoint(doc5, 697, 1, 697, 100)
checkMethodCallIL.Emit(OpCodes.Br, label15)
checkMethodCallIL.MarkSequencePoint(doc5, 698, 1, 698, 100)
checkMethodCallIL.Emit(OpCodes.Br, cont245)
checkMethodCallIL.MarkLabel(cont245)
checkMethodCallIL.MarkSequencePoint(doc5, 699, 1, 699, 100)
checkMethodCallIL.Emit(OpCodes.Br, cont244)
checkMethodCallIL.MarkLabel(fa244)
checkMethodCallIL.MarkSequencePoint(doc5, 700, 1, 700, 100)
checkMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
checkMethodCallIL.Emit(OpCodes.Stloc, 12)
checkMethodCallIL.MarkSequencePoint(doc5, 701, 1, 701, 100)
checkMethodCallIL.Emit(OpCodes.Br, label15)
checkMethodCallIL.MarkSequencePoint(doc5, 702, 1, 702, 100)
checkMethodCallIL.Emit(OpCodes.Br, cont244)
checkMethodCallIL.MarkLabel(cont244)
checkMethodCallIL.MarkSequencePoint(doc5, 704, 1, 704, 100)
checkMethodCallIL.MarkLabel(label15)
checkMethodCallIL.MarkSequencePoint(doc5, 706, 1, 706, 100)
checkMethodCallIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(System.Boolean)
checkMethodCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa247 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim tru247 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim cont247 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
checkMethodCallIL.Emit(OpCodes.Beq, tru247)
checkMethodCallIL.Emit(OpCodes.Br, fa247)
checkMethodCallIL.MarkLabel(tru247)
checkMethodCallIL.MarkSequencePoint(doc5, 707, 1, 707, 100)
Dim typ121(-1) As Type
checkMethodCallIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(Expr)
Typ03 = Typ
checkMethodCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkMethodCallIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkMethodCallIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkMethodCallIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ReDim Preserve typ121(UBound(typ121) + 1)
typ121(UBound(typ121)) = Typ
checkMethodCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ121))
Typ = Typ03.GetMethod("AddToken", typ121).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
checkMethodCallIL.Emit(OpCodes.Pop)
End If
checkMethodCallIL.MarkSequencePoint(doc5, 708, 1, 708, 100)
checkMethodCallIL.Emit(OpCodes.Br, cont247)
checkMethodCallIL.MarkLabel(fa247)
checkMethodCallIL.Emit(OpCodes.Br, cont247)
checkMethodCallIL.MarkLabel(cont247)
checkMethodCallIL.MarkSequencePoint(doc5, 710, 1, 710, 100)
checkMethodCallIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(System.Int32)
checkMethodCallIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(System.Int32)
Dim fa248 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim tru248 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
Dim cont248 As System.Reflection.Emit.Label = checkMethodCallIL.DefineLabel()
checkMethodCallIL.Emit(OpCodes.Beq, tru248)
checkMethodCallIL.Emit(OpCodes.Br, fa248)
checkMethodCallIL.MarkLabel(tru248)
checkMethodCallIL.MarkSequencePoint(doc5, 711, 1, 711, 100)
checkMethodCallIL.Emit(OpCodes.Br, label14)
checkMethodCallIL.MarkSequencePoint(doc5, 712, 1, 712, 100)
checkMethodCallIL.Emit(OpCodes.Br, cont248)
checkMethodCallIL.MarkLabel(fa248)
checkMethodCallIL.MarkSequencePoint(doc5, 713, 1, 713, 100)
checkMethodCallIL.Emit(OpCodes.Br, label13)
checkMethodCallIL.MarkSequencePoint(doc5, 714, 1, 714, 100)
checkMethodCallIL.Emit(OpCodes.Br, cont248)
checkMethodCallIL.MarkLabel(cont248)
checkMethodCallIL.MarkSequencePoint(doc5, 716, 1, 716, 100)
checkMethodCallIL.MarkLabel(label14)
checkMethodCallIL.MarkSequencePoint(doc5, 718, 1, 718, 100)
checkMethodCallIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(MethodCallTok)
checkMethodCallIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(MethodNameTok)
checkMethodCallIL.Emit(OpCodes.Stfld, GetType(MethodCallTok).GetField("Name"))
checkMethodCallIL.MarkSequencePoint(doc5, 719, 1, 719, 100)
checkMethodCallIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(MethodCallStmt)
checkMethodCallIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(MethodCallTok)
checkMethodCallIL.Emit(OpCodes.Stfld, GetType(MethodCallStmt).GetField("MethodToken"))
checkMethodCallIL.MarkSequencePoint(doc5, 721, 1, 721, 100)
checkMethodCallIL.Emit(OpCodes.Br, cont239)
checkMethodCallIL.MarkLabel(fa239)
checkMethodCallIL.Emit(OpCodes.Br, cont239)
checkMethodCallIL.MarkLabel(cont239)
checkMethodCallIL.MarkSequencePoint(doc5, 723, 1, 723, 100)
checkMethodCallIL.Emit(OpCodes.Br, cont238)
checkMethodCallIL.MarkLabel(fa238)
checkMethodCallIL.Emit(OpCodes.Br, cont238)
checkMethodCallIL.MarkLabel(cont238)
checkMethodCallIL.MarkSequencePoint(doc5, 724, 1, 724, 100)
checkMethodCallIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(MethodCallStmt)
checkMethodCallIL.MarkSequencePoint(doc5, 725, 1, 725, 100)
checkMethodCallIL.Emit(OpCodes.Ret)
Dim typ122(-1) As Type
ReDim Preserve typ122(UBound(typ122) + 1)
typ122(UBound(typ122)) = GetType(Stmt)
ReDim Preserve typ122(UBound(typ122) + 1)
typ122(UBound(typ122)) = GetType(System.Boolean).MakeByRefType()
Dim checkVarAs As MethodBuilder = StmtOptimizer.DefineMethod("checkVarAs", MethodAttributes.Public, GetType(Stmt), typ122)
Dim checkVarAsIL As ILGenerator = checkVarAs.GetILGenerator()
Dim checkVarAsparam01 As ParameterBuilder = checkVarAs.DefineParameter(1, ParameterAttributes.None, "stm")
Dim checkVarAsparam02 As ParameterBuilder = checkVarAs.DefineParameter(2, ParameterAttributes.None, "b")
checkVarAsIL.MarkSequencePoint(doc5, 728, 1, 728, 100)
Dim locbldr337 As LocalBuilder = checkVarAsIL.DeclareLocal(GetType(Token))
locbldr337.SetLocalSymInfo("tok")
checkVarAsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkVarAsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkVarAsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVarAsIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkVarAsIL.Emit(OpCodes.Stloc, 0)
checkVarAsIL.MarkSequencePoint(doc5, 729, 1, 729, 100)
Dim locbldr338 As LocalBuilder = checkVarAsIL.DeclareLocal(GetType(System.Type))
locbldr338.SetLocalSymInfo("typ")
checkVarAsIL.Emit(OpCodes.Ldtoken, GetType(VarTok))
Dim typ123 As Type() = {GetType(System.RuntimeTypeHandle)}
checkVarAsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ123))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ123).ReturnType
checkVarAsIL.Emit(OpCodes.Stloc, 1)
checkVarAsIL.MarkSequencePoint(doc5, 730, 1, 730, 100)
checkVarAsIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
Dim typ124(-1) As Type
checkVarAsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkVarAsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
checkVarAsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ124(UBound(typ124) + 1)
typ124(UBound(typ124)) = Typ
checkVarAsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ124))
Typ = Typ03.GetMethod("IsInstanceOfType", typ124).ReturnType
checkVarAsIL.Emit(OpCodes.Stobj, Typ04)
checkVarAsIL.MarkSequencePoint(doc5, 731, 1, 731, 100)
Dim locbldr339 As LocalBuilder = checkVarAsIL.DeclareLocal(GetType(VarStmt))
locbldr339.SetLocalSymInfo("vars")
checkVarAsIL.Emit(OpCodes.Newobj, GetType(VarStmt).GetConstructor(Type.EmptyTypes))
checkVarAsIL.Emit(OpCodes.Stloc, 2)
checkVarAsIL.MarkSequencePoint(doc5, 733, 1, 733, 100)
checkVarAsIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
checkVarAsIL.Emit(OpCodes.Ldobj, Typ.GetElementType())
Typ = Typ.GetElementType()
checkVarAsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa249 As System.Reflection.Emit.Label = checkVarAsIL.DefineLabel()
Dim tru249 As System.Reflection.Emit.Label = checkVarAsIL.DefineLabel()
Dim cont249 As System.Reflection.Emit.Label = checkVarAsIL.DefineLabel()
checkVarAsIL.Emit(OpCodes.Beq, tru249)
checkVarAsIL.Emit(OpCodes.Br, fa249)
checkVarAsIL.MarkLabel(tru249)
checkVarAsIL.MarkSequencePoint(doc5, 734, 1, 734, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarStmt)
checkVarAsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkVarAsIL.Emit(OpCodes.Stfld, GetType(VarStmt).GetField("Tokens"))
checkVarAsIL.MarkSequencePoint(doc5, 735, 1, 735, 100)
Dim locbldr340 As LocalBuilder = checkVarAsIL.DeclareLocal(GetType(Expr))
locbldr340.SetLocalSymInfo("tempexp")
checkVarAsIL.Emit(OpCodes.Newobj, GetType(Expr).GetConstructor(Type.EmptyTypes))
checkVarAsIL.Emit(OpCodes.Stloc, 3)
checkVarAsIL.MarkSequencePoint(doc5, 736, 1, 736, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Expr)
checkVarAsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarStmt)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(VarStmt).GetField("Tokens"))
Typ = GetType(VarStmt).GetField("Tokens").FieldType
checkVarAsIL.Emit(OpCodes.Stfld, GetType(Expr).GetField("Tokens"))
checkVarAsIL.MarkSequencePoint(doc5, 737, 1, 737, 100)
Dim locbldr341 As LocalBuilder = checkVarAsIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer"))
locbldr341.SetLocalSymInfo("eop")
checkVarAsIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer").GetConstructor(Type.EmptyTypes))
checkVarAsIL.Emit(OpCodes.Stloc, 4)
checkVarAsIL.MarkSequencePoint(doc5, 738, 1, 738, 100)
Dim typ125(-1) As Type
checkVarAsIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer")
Typ03 = Typ
checkVarAsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Expr)
ReDim Preserve typ125(UBound(typ125) + 1)
typ125(UBound(typ125)) = Typ
checkVarAsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Optimize", typ125))
Typ = Typ03.GetMethod("Optimize", typ125).ReturnType
checkVarAsIL.Emit(OpCodes.Stloc, 3)
checkVarAsIL.MarkSequencePoint(doc5, 739, 1, 739, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarStmt)
checkVarAsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Expr)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
checkVarAsIL.Emit(OpCodes.Stfld, GetType(VarStmt).GetField("Tokens"))
checkVarAsIL.MarkSequencePoint(doc5, 740, 1, 740, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarStmt)
checkVarAsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
checkVarAsIL.Emit(OpCodes.Stfld, GetType(VarStmt).GetField("Line"))
checkVarAsIL.MarkSequencePoint(doc5, 741, 1, 741, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarStmt)
checkVarAsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkVarAsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkVarAsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVarAsIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkVarAsIL.Emit(OpCodes.Stfld, GetType(VarStmt).GetField("VarName"))
checkVarAsIL.MarkSequencePoint(doc5, 743, 1, 743, 100)
Dim locbldr342 As LocalBuilder = checkVarAsIL.DeclareLocal(GetType(Token))
locbldr342.SetLocalSymInfo("tok2")
checkVarAsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkVarAsIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
checkVarAsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVarAsIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkVarAsIL.Emit(OpCodes.Stloc, 5)
checkVarAsIL.MarkSequencePoint(doc5, 744, 1, 744, 100)
Dim locbldr343 As LocalBuilder = checkVarAsIL.DeclareLocal(GetType(System.Type))
locbldr343.SetLocalSymInfo("typ2")
checkVarAsIL.Emit(OpCodes.Ldtoken, GetType(TypeTok))
Dim typ126 As Type() = {GetType(System.RuntimeTypeHandle)}
checkVarAsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ126))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ126).ReturnType
checkVarAsIL.Emit(OpCodes.Stloc, 6)
checkVarAsIL.MarkSequencePoint(doc5, 745, 1, 745, 100)
Dim locbldr344 As LocalBuilder = checkVarAsIL.DeclareLocal(GetType(System.Boolean))
locbldr344.SetLocalSymInfo("b2")
Dim typ127(-1) As Type
checkVarAsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Type)
Typ03 = Typ
checkVarAsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
checkVarAsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ127(UBound(typ127) + 1)
typ127(UBound(typ127)) = Typ
checkVarAsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ127))
Typ = Typ03.GetMethod("IsInstanceOfType", typ127).ReturnType
checkVarAsIL.Emit(OpCodes.Stloc, 7)
checkVarAsIL.MarkSequencePoint(doc5, 747, 1, 747, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
checkVarAsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa250 As System.Reflection.Emit.Label = checkVarAsIL.DefineLabel()
Dim tru250 As System.Reflection.Emit.Label = checkVarAsIL.DefineLabel()
Dim cont250 As System.Reflection.Emit.Label = checkVarAsIL.DefineLabel()
checkVarAsIL.Emit(OpCodes.Beq, fa250)
checkVarAsIL.Emit(OpCodes.Br, tru250)
checkVarAsIL.MarkLabel(tru250)
checkVarAsIL.MarkSequencePoint(doc5, 748, 1, 748, 100)
Dim locbldr345 As LocalBuilder = checkVarAsIL.DeclareLocal(GetType(Token))
locbldr345.SetLocalSymInfo("t")
checkVarAsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkVarAsIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
checkVarAsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVarAsIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkVarAsIL.Emit(OpCodes.Stloc, 8)
checkVarAsIL.MarkSequencePoint(doc5, 749, 1, 749, 100)
Dim locbldr346 As LocalBuilder = checkVarAsIL.DeclareLocal(GetType(TypeTok))
locbldr346.SetLocalSymInfo("tt")
checkVarAsIL.Emit(OpCodes.Newobj, GetType(TypeTok).GetConstructor(Type.EmptyTypes))
checkVarAsIL.Emit(OpCodes.Stloc, 9)
checkVarAsIL.MarkSequencePoint(doc5, 750, 1, 750, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(TypeTok)
checkVarAsIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(Token)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
checkVarAsIL.Emit(OpCodes.Stfld, GetType(TypeTok).GetField("Line"))
checkVarAsIL.MarkSequencePoint(doc5, 751, 1, 751, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(TypeTok)
checkVarAsIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(Token)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
checkVarAsIL.Emit(OpCodes.Stfld, GetType(TypeTok).GetField("Value"))
checkVarAsIL.MarkSequencePoint(doc5, 752, 1, 752, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarStmt)
checkVarAsIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(TypeTok)
checkVarAsIL.Emit(OpCodes.Stfld, GetType(VarStmt).GetField("VarTyp"))
checkVarAsIL.MarkSequencePoint(doc5, 753, 1, 753, 100)
checkVarAsIL.Emit(OpCodes.Br, cont250)
checkVarAsIL.MarkLabel(fa250)
checkVarAsIL.MarkSequencePoint(doc5, 754, 1, 754, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarStmt)
checkVarAsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkVarAsIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkVarAsIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
checkVarAsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkVarAsIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkVarAsIL.Emit(OpCodes.Stfld, GetType(VarStmt).GetField("VarTyp"))
checkVarAsIL.MarkSequencePoint(doc5, 755, 1, 755, 100)
checkVarAsIL.Emit(OpCodes.Br, cont250)
checkVarAsIL.MarkLabel(cont250)
checkVarAsIL.MarkSequencePoint(doc5, 757, 1, 757, 100)
checkVarAsIL.Emit(OpCodes.Br, cont249)
checkVarAsIL.MarkLabel(fa249)
checkVarAsIL.Emit(OpCodes.Br, cont249)
checkVarAsIL.MarkLabel(cont249)
checkVarAsIL.MarkSequencePoint(doc5, 758, 1, 758, 100)
checkVarAsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarStmt)
checkVarAsIL.MarkSequencePoint(doc5, 759, 1, 759, 100)
checkVarAsIL.Emit(OpCodes.Ret)
Dim typ128(-1) As Type
ReDim Preserve typ128(UBound(typ128) + 1)
typ128(UBound(typ128)) = GetType(Stmt)
Dim AssOpt As MethodBuilder = StmtOptimizer.DefineMethod("AssOpt", MethodAttributes.Public, GetType(Stmt), typ128)
Dim AssOptIL As ILGenerator = AssOpt.GetILGenerator()
Dim AssOptparam01 As ParameterBuilder = AssOpt.DefineParameter(1, ParameterAttributes.None, "stm")
AssOptIL.MarkSequencePoint(doc5, 763, 1, 763, 100)
Dim locbldr347 As LocalBuilder = AssOptIL.DeclareLocal(GetType(AssignStmt))
locbldr347.SetLocalSymInfo("asss")
AssOptIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
AssOptIL.Emit(OpCodes.Stloc, 0)
AssOptIL.MarkSequencePoint(doc5, 764, 1, 764, 100)
Dim locbldr348 As LocalBuilder = AssOptIL.DeclareLocal(GetType(Expr))
locbldr348.SetLocalSymInfo("le")
AssOptIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(AssignStmt)
AssOptIL.Emit(OpCodes.Ldfld, GetType(AssignStmt).GetField("LExp"))
Typ = GetType(AssignStmt).GetField("LExp").FieldType
AssOptIL.Emit(OpCodes.Stloc, 1)
AssOptIL.MarkSequencePoint(doc5, 765, 1, 765, 100)
Dim locbldr349 As LocalBuilder = AssOptIL.DeclareLocal(GetType(Token))
locbldr349.SetLocalSymInfo("tok")
AssOptIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Expr)
AssOptIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
AssOptIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
AssOptIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AssOptIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AssOptIL.Emit(OpCodes.Stloc, 2)
AssOptIL.MarkSequencePoint(doc5, 766, 1, 766, 100)
Dim locbldr350 As LocalBuilder = AssOptIL.DeclareLocal(GetType(System.Type))
locbldr350.SetLocalSymInfo("typ")
AssOptIL.Emit(OpCodes.Ldtoken, GetType(VarTok))
Dim typ129 As Type() = {GetType(System.RuntimeTypeHandle)}
AssOptIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ129))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ129).ReturnType
AssOptIL.Emit(OpCodes.Stloc, 3)
AssOptIL.MarkSequencePoint(doc5, 767, 1, 767, 100)
Dim locbldr351 As LocalBuilder = AssOptIL.DeclareLocal(GetType(System.Boolean))
locbldr351.SetLocalSymInfo("b")
Dim typ130(-1) As Type
AssOptIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Type)
Typ03 = Typ
AssOptIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Token)
AssOptIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ130(UBound(typ130) + 1)
typ130(UBound(typ130)) = Typ
AssOptIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ130))
Typ = Typ03.GetMethod("IsInstanceOfType", typ130).ReturnType
AssOptIL.Emit(OpCodes.Stloc, 4)
AssOptIL.MarkSequencePoint(doc5, 768, 1, 768, 100)
Dim locbldr352 As LocalBuilder = AssOptIL.DeclareLocal(GetType(VarAsgnStmt))
locbldr352.SetLocalSymInfo("vass")
AssOptIL.Emit(OpCodes.Newobj, GetType(VarAsgnStmt).GetConstructor(Type.EmptyTypes))
AssOptIL.Emit(OpCodes.Stloc, 5)
AssOptIL.MarkSequencePoint(doc5, 769, 1, 769, 100)
AssOptIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
AssOptIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa251 As System.Reflection.Emit.Label = AssOptIL.DefineLabel()
Dim tru251 As System.Reflection.Emit.Label = AssOptIL.DefineLabel()
Dim cont251 As System.Reflection.Emit.Label = AssOptIL.DefineLabel()
AssOptIL.Emit(OpCodes.Beq, tru251)
AssOptIL.Emit(OpCodes.Br, fa251)
AssOptIL.MarkLabel(tru251)
AssOptIL.MarkSequencePoint(doc5, 770, 1, 770, 100)
AssOptIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(VarAsgnStmt)
AssOptIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(AssignStmt)
AssOptIL.Emit(OpCodes.Ldfld, GetType(AssignStmt).GetField("Tokens"))
Typ = GetType(AssignStmt).GetField("Tokens").FieldType
AssOptIL.Emit(OpCodes.Stfld, GetType(VarAsgnStmt).GetField("Tokens"))
AssOptIL.MarkSequencePoint(doc5, 771, 1, 771, 100)
AssOptIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(VarAsgnStmt)
AssOptIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(AssignStmt)
AssOptIL.Emit(OpCodes.Ldfld, GetType(AssignStmt).GetField("Line"))
Typ = GetType(AssignStmt).GetField("Line").FieldType
AssOptIL.Emit(OpCodes.Stfld, GetType(VarAsgnStmt).GetField("Line"))
AssOptIL.MarkSequencePoint(doc5, 772, 1, 772, 100)
AssOptIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(VarAsgnStmt)
AssOptIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Expr)
AssOptIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
AssOptIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AssOptIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AssOptIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AssOptIL.Emit(OpCodes.Stfld, GetType(VarAsgnStmt).GetField("VarName"))
AssOptIL.MarkSequencePoint(doc5, 774, 1, 774, 100)
Dim locbldr353 As LocalBuilder = AssOptIL.DeclareLocal(GetType(Token))
locbldr353.SetLocalSymInfo("tok2")
AssOptIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Expr)
AssOptIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
AssOptIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
AssOptIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AssOptIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AssOptIL.Emit(OpCodes.Stloc, 6)
AssOptIL.MarkSequencePoint(doc5, 775, 1, 775, 100)
Dim locbldr354 As LocalBuilder = AssOptIL.DeclareLocal(GetType(System.Type))
locbldr354.SetLocalSymInfo("typ2")
AssOptIL.Emit(OpCodes.Ldtoken, GetType(TypeTok))
Dim typ131 As Type() = {GetType(System.RuntimeTypeHandle)}
AssOptIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ131))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ131).ReturnType
AssOptIL.Emit(OpCodes.Stloc, 7)
AssOptIL.MarkSequencePoint(doc5, 776, 1, 776, 100)
Dim locbldr355 As LocalBuilder = AssOptIL.DeclareLocal(GetType(System.Boolean))
locbldr355.SetLocalSymInfo("b2")
Dim typ132(-1) As Type
AssOptIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Type)
Typ03 = Typ
AssOptIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
AssOptIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ132(UBound(typ132) + 1)
typ132(UBound(typ132)) = Typ
AssOptIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ132))
Typ = Typ03.GetMethod("IsInstanceOfType", typ132).ReturnType
AssOptIL.Emit(OpCodes.Stloc, 8)
AssOptIL.MarkSequencePoint(doc5, 778, 1, 778, 100)
AssOptIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
AssOptIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa252 As System.Reflection.Emit.Label = AssOptIL.DefineLabel()
Dim tru252 As System.Reflection.Emit.Label = AssOptIL.DefineLabel()
Dim cont252 As System.Reflection.Emit.Label = AssOptIL.DefineLabel()
AssOptIL.Emit(OpCodes.Beq, fa252)
AssOptIL.Emit(OpCodes.Br, tru252)
AssOptIL.MarkLabel(tru252)
AssOptIL.MarkSequencePoint(doc5, 779, 1, 779, 100)
Dim locbldr356 As LocalBuilder = AssOptIL.DeclareLocal(GetType(Token))
locbldr356.SetLocalSymInfo("t")
AssOptIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Expr)
AssOptIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
AssOptIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
AssOptIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AssOptIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AssOptIL.Emit(OpCodes.Stloc, 9)
AssOptIL.MarkSequencePoint(doc5, 780, 1, 780, 100)
Dim locbldr357 As LocalBuilder = AssOptIL.DeclareLocal(GetType(TypeTok))
locbldr357.SetLocalSymInfo("tt")
AssOptIL.Emit(OpCodes.Newobj, GetType(TypeTok).GetConstructor(Type.EmptyTypes))
AssOptIL.Emit(OpCodes.Stloc, 10)
AssOptIL.MarkSequencePoint(doc5, 781, 1, 781, 100)
AssOptIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
AssOptIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
AssOptIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Line"))
Typ = GetType(Token).GetField("Line").FieldType
AssOptIL.Emit(OpCodes.Stfld, GetType(TypeTok).GetField("Line"))
AssOptIL.MarkSequencePoint(doc5, 782, 1, 782, 100)
AssOptIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
AssOptIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
AssOptIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
AssOptIL.Emit(OpCodes.Stfld, GetType(TypeTok).GetField("Value"))
AssOptIL.MarkSequencePoint(doc5, 783, 1, 783, 100)
AssOptIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(VarAsgnStmt)
AssOptIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
AssOptIL.Emit(OpCodes.Stfld, GetType(VarAsgnStmt).GetField("VarTyp"))
AssOptIL.MarkSequencePoint(doc5, 784, 1, 784, 100)
AssOptIL.Emit(OpCodes.Br, cont252)
AssOptIL.MarkLabel(fa252)
AssOptIL.MarkSequencePoint(doc5, 785, 1, 785, 100)
AssOptIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(VarAsgnStmt)
AssOptIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Expr)
AssOptIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
AssOptIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
AssOptIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AssOptIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AssOptIL.Emit(OpCodes.Stfld, GetType(VarAsgnStmt).GetField("VarTyp"))
AssOptIL.MarkSequencePoint(doc5, 786, 1, 786, 100)
AssOptIL.Emit(OpCodes.Br, cont252)
AssOptIL.MarkLabel(cont252)
AssOptIL.MarkSequencePoint(doc5, 788, 1, 788, 100)
AssOptIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(VarAsgnStmt)
AssOptIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(AssignStmt)
AssOptIL.Emit(OpCodes.Ldfld, GetType(AssignStmt).GetField("RExp"))
Typ = GetType(AssignStmt).GetField("RExp").FieldType
AssOptIL.Emit(OpCodes.Stfld, GetType(VarAsgnStmt).GetField("RExpr"))
AssOptIL.MarkSequencePoint(doc5, 789, 1, 789, 100)
Dim locbldr358 As LocalBuilder = AssOptIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer"))
locbldr358.SetLocalSymInfo("eop")
AssOptIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer").GetConstructor(Type.EmptyTypes))
AssOptIL.Emit(OpCodes.Stloc, 11)
AssOptIL.MarkSequencePoint(doc5, 790, 1, 790, 100)
AssOptIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(VarAsgnStmt)
Dim typ133(-1) As Type
AssOptIL.Emit(OpCodes.Ldloc, 11)
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer")
Typ03 = Typ
AssOptIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(VarAsgnStmt)
AssOptIL.Emit(OpCodes.Ldfld, GetType(VarAsgnStmt).GetField("RExpr"))
Typ = GetType(VarAsgnStmt).GetField("RExpr").FieldType
ReDim Preserve typ133(UBound(typ133) + 1)
typ133(UBound(typ133)) = Typ
AssOptIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Optimize", typ133))
Typ = Typ03.GetMethod("Optimize", typ133).ReturnType
AssOptIL.Emit(OpCodes.Stfld, GetType(VarAsgnStmt).GetField("RExpr"))
AssOptIL.MarkSequencePoint(doc5, 792, 1, 792, 100)
AssOptIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(VarAsgnStmt)
AssOptIL.MarkSequencePoint(doc5, 793, 1, 793, 100)
AssOptIL.Emit(OpCodes.Br, cont251)
AssOptIL.MarkLabel(fa251)
AssOptIL.MarkSequencePoint(doc5, 794, 1, 794, 100)
AssOptIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
AssOptIL.MarkSequencePoint(doc5, 795, 1, 795, 100)
AssOptIL.Emit(OpCodes.Br, cont251)
AssOptIL.MarkLabel(cont251)
AssOptIL.MarkSequencePoint(doc5, 797, 1, 797, 100)
AssOptIL.Emit(OpCodes.Ret)
Dim typ134(-1) As Type
ReDim Preserve typ134(UBound(typ134) + 1)
typ134(UBound(typ134)) = GetType(Stmt)
ReDim Preserve typ134(UBound(typ134) + 1)
typ134(UBound(typ134)) = GetType(System.Boolean).MakeByRefType()
Dim checkAssign As MethodBuilder = StmtOptimizer.DefineMethod("checkAssign", MethodAttributes.Public, GetType(Stmt), typ134)
Dim checkAssignIL As ILGenerator = checkAssign.GetILGenerator()
Dim checkAssignparam01 As ParameterBuilder = checkAssign.DefineParameter(1, ParameterAttributes.None, "stm")
Dim checkAssignparam02 As ParameterBuilder = checkAssign.DefineParameter(2, ParameterAttributes.None, "b")
checkAssignIL.MarkSequencePoint(doc5, 800, 1, 800, 100)
Dim locbldr359 As LocalBuilder = checkAssignIL.DeclareLocal(GetType(Token))
locbldr359.SetLocalSymInfo("tok")
checkAssignIL.Emit(OpCodes.Ldnull)
checkAssignIL.Emit(OpCodes.Stloc, 0)
checkAssignIL.MarkSequencePoint(doc5, 801, 1, 801, 100)
Dim locbldr360 As LocalBuilder = checkAssignIL.DeclareLocal(GetType(System.Type))
locbldr360.SetLocalSymInfo("typ")
checkAssignIL.Emit(OpCodes.Ldtoken, GetType(AssignOp))
Dim typ135 As Type() = {GetType(System.RuntimeTypeHandle)}
checkAssignIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ135))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ135).ReturnType
checkAssignIL.Emit(OpCodes.Stloc, 1)
checkAssignIL.MarkSequencePoint(doc5, 802, 1, 802, 100)
Dim locbldr361 As LocalBuilder = checkAssignIL.DeclareLocal(GetType(AssignStmt))
locbldr361.SetLocalSymInfo("asss")
checkAssignIL.Emit(OpCodes.Newobj, GetType(AssignStmt).GetConstructor(Type.EmptyTypes))
checkAssignIL.Emit(OpCodes.Stloc, 2)
checkAssignIL.MarkSequencePoint(doc5, 803, 1, 803, 100)
Dim locbldr362 As LocalBuilder = checkAssignIL.DeclareLocal(GetType(System.Boolean))
locbldr362.SetLocalSymInfo("c")
checkAssignIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
checkAssignIL.Emit(OpCodes.Stloc, 3)
checkAssignIL.MarkSequencePoint(doc5, 804, 1, 804, 100)
Dim locbldr363 As LocalBuilder = checkAssignIL.DeclareLocal(GetType(Expr))
locbldr363.SetLocalSymInfo("re")
checkAssignIL.Emit(OpCodes.Newobj, GetType(Expr).GetConstructor(Type.EmptyTypes))
checkAssignIL.Emit(OpCodes.Stloc, 4)
checkAssignIL.MarkSequencePoint(doc5, 805, 1, 805, 100)
Dim locbldr364 As LocalBuilder = checkAssignIL.DeclareLocal(GetType(Expr))
locbldr364.SetLocalSymInfo("le")
checkAssignIL.Emit(OpCodes.Newobj, GetType(Expr).GetConstructor(Type.EmptyTypes))
checkAssignIL.Emit(OpCodes.Stloc, 5)
checkAssignIL.MarkSequencePoint(doc5, 806, 1, 806, 100)
Dim locbldr365 As LocalBuilder = checkAssignIL.DeclareLocal(GetType(System.Int32))
locbldr365.SetLocalSymInfo("i")
checkAssignIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Stloc, 6)
checkAssignIL.MarkSequencePoint(doc5, 807, 1, 807, 100)
Dim locbldr366 As LocalBuilder = checkAssignIL.DeclareLocal(GetType(System.Int32))
locbldr366.SetLocalSymInfo("len")
checkAssignIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkAssignIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkAssignIL.Emit(OpCodes.Ldlen)
checkAssignIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Sub)
checkAssignIL.Emit(OpCodes.Stloc, 7)
checkAssignIL.MarkSequencePoint(doc5, 808, 1, 808, 100)
Dim locbldr367 As LocalBuilder = checkAssignIL.DeclareLocal(GetType(System.Int32))
locbldr367.SetLocalSymInfo("assind")
checkAssignIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Stloc, 8)
checkAssignIL.MarkSequencePoint(doc5, 810, 1, 810, 100)
Dim label16 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
checkAssignIL.MarkSequencePoint(doc5, 811, 1, 811, 100)
Dim label17 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
checkAssignIL.MarkSequencePoint(doc5, 813, 1, 813, 100)
checkAssignIL.MarkLabel(label16)
checkAssignIL.MarkSequencePoint(doc5, 815, 1, 815, 100)
checkAssignIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Add)
checkAssignIL.Emit(OpCodes.Stloc, 6)
checkAssignIL.MarkSequencePoint(doc5, 817, 1, 817, 100)
checkAssignIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkAssignIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkAssignIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkAssignIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
checkAssignIL.Emit(OpCodes.Stloc, 0)
checkAssignIL.MarkSequencePoint(doc5, 818, 1, 818, 100)
Dim typ136(-1) As Type
checkAssignIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
checkAssignIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
ReDim Preserve typ136(UBound(typ136) + 1)
typ136(UBound(typ136)) = Typ
checkAssignIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ136))
Typ = Typ03.GetMethod("IsInstanceOfType", typ136).ReturnType
checkAssignIL.Emit(OpCodes.Stloc, 3)
checkAssignIL.MarkSequencePoint(doc5, 820, 1, 820, 100)
checkAssignIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
checkAssignIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa253 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
Dim tru253 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
Dim cont253 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
checkAssignIL.Emit(OpCodes.Beq, tru253)
checkAssignIL.Emit(OpCodes.Br, fa253)
checkAssignIL.MarkLabel(tru253)
checkAssignIL.MarkSequencePoint(doc5, 821, 1, 821, 100)
checkAssignIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Stloc, 8)
checkAssignIL.MarkSequencePoint(doc5, 822, 1, 822, 100)
checkAssignIL.Emit(OpCodes.Br, label17)
checkAssignIL.MarkSequencePoint(doc5, 823, 1, 823, 100)
checkAssignIL.Emit(OpCodes.Br, cont253)
checkAssignIL.MarkLabel(fa253)
checkAssignIL.Emit(OpCodes.Br, cont253)
checkAssignIL.MarkLabel(cont253)
checkAssignIL.MarkSequencePoint(doc5, 825, 1, 825, 100)
checkAssignIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
Dim fa254 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
Dim tru254 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
Dim cont254 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
checkAssignIL.Emit(OpCodes.Beq, tru254)
checkAssignIL.Emit(OpCodes.Br, fa254)
checkAssignIL.MarkLabel(tru254)
checkAssignIL.MarkSequencePoint(doc5, 826, 1, 826, 100)
checkAssignIL.Emit(OpCodes.Br, label17)
checkAssignIL.MarkSequencePoint(doc5, 827, 1, 827, 100)
checkAssignIL.Emit(OpCodes.Br, cont254)
checkAssignIL.MarkLabel(fa254)
checkAssignIL.MarkSequencePoint(doc5, 828, 1, 828, 100)
checkAssignIL.Emit(OpCodes.Br, label16)
checkAssignIL.MarkSequencePoint(doc5, 829, 1, 829, 100)
checkAssignIL.Emit(OpCodes.Br, cont254)
checkAssignIL.MarkLabel(cont254)
checkAssignIL.MarkSequencePoint(doc5, 831, 1, 831, 100)
checkAssignIL.MarkLabel(label17)
checkAssignIL.MarkSequencePoint(doc5, 833, 1, 833, 100)
checkAssignIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa255 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
Dim tru255 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
Dim cont255 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
checkAssignIL.Emit(OpCodes.Beq, fa255)
checkAssignIL.Emit(OpCodes.Br, tru255)
checkAssignIL.MarkLabel(tru255)
checkAssignIL.MarkSequencePoint(doc5, 835, 1, 835, 100)
checkAssignIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Stloc, 6)
checkAssignIL.MarkSequencePoint(doc5, 836, 1, 836, 100)
checkAssignIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Sub)
checkAssignIL.Emit(OpCodes.Stloc, 7)
checkAssignIL.MarkSequencePoint(doc5, 838, 1, 838, 100)
Dim label18 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
checkAssignIL.MarkSequencePoint(doc5, 839, 1, 839, 100)
Dim label19 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
checkAssignIL.MarkSequencePoint(doc5, 841, 1, 841, 100)
checkAssignIL.MarkLabel(label18)
checkAssignIL.MarkSequencePoint(doc5, 843, 1, 843, 100)
checkAssignIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Add)
checkAssignIL.Emit(OpCodes.Stloc, 6)
checkAssignIL.MarkSequencePoint(doc5, 845, 1, 845, 100)
Dim typ137(-1) As Type
checkAssignIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Expr)
Typ03 = Typ
checkAssignIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkAssignIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkAssignIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkAssignIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ReDim Preserve typ137(UBound(typ137) + 1)
typ137(UBound(typ137)) = Typ
checkAssignIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ137))
Typ = Typ03.GetMethod("AddToken", typ137).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
checkAssignIL.Emit(OpCodes.Pop)
End If
checkAssignIL.MarkSequencePoint(doc5, 847, 1, 847, 100)
checkAssignIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
Dim fa256 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
Dim tru256 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
Dim cont256 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
checkAssignIL.Emit(OpCodes.Beq, tru256)
checkAssignIL.Emit(OpCodes.Br, fa256)
checkAssignIL.MarkLabel(tru256)
checkAssignIL.MarkSequencePoint(doc5, 848, 1, 848, 100)
checkAssignIL.Emit(OpCodes.Br, label19)
checkAssignIL.MarkSequencePoint(doc5, 849, 1, 849, 100)
checkAssignIL.Emit(OpCodes.Br, cont256)
checkAssignIL.MarkLabel(fa256)
checkAssignIL.MarkSequencePoint(doc5, 850, 1, 850, 100)
checkAssignIL.Emit(OpCodes.Br, label18)
checkAssignIL.MarkSequencePoint(doc5, 851, 1, 851, 100)
checkAssignIL.Emit(OpCodes.Br, cont256)
checkAssignIL.MarkLabel(cont256)
checkAssignIL.MarkSequencePoint(doc5, 853, 1, 853, 100)
checkAssignIL.MarkLabel(label19)
checkAssignIL.MarkSequencePoint(doc5, 856, 1, 856, 100)
checkAssignIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Stloc, 6)
checkAssignIL.MarkSequencePoint(doc5, 857, 1, 857, 100)
checkAssignIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkAssignIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkAssignIL.Emit(OpCodes.Ldlen)
checkAssignIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Sub)
checkAssignIL.Emit(OpCodes.Stloc, 7)
checkAssignIL.MarkSequencePoint(doc5, 859, 1, 859, 100)
Dim label20 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
checkAssignIL.MarkSequencePoint(doc5, 860, 1, 860, 100)
Dim label21 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
checkAssignIL.MarkSequencePoint(doc5, 862, 1, 862, 100)
checkAssignIL.MarkLabel(label20)
checkAssignIL.MarkSequencePoint(doc5, 864, 1, 864, 100)
checkAssignIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Add)
checkAssignIL.Emit(OpCodes.Stloc, 6)
checkAssignIL.MarkSequencePoint(doc5, 866, 1, 866, 100)
Dim typ138(-1) As Type
checkAssignIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(Expr)
Typ03 = Typ
checkAssignIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkAssignIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
checkAssignIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Conv_U)
Typ = Typ02
checkAssignIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ReDim Preserve typ138(UBound(typ138) + 1)
typ138(UBound(typ138)) = Typ
checkAssignIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ138))
Typ = Typ03.GetMethod("AddToken", typ138).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
checkAssignIL.Emit(OpCodes.Pop)
End If
checkAssignIL.MarkSequencePoint(doc5, 868, 1, 868, 100)
checkAssignIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
checkAssignIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
Dim fa257 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
Dim tru257 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
Dim cont257 As System.Reflection.Emit.Label = checkAssignIL.DefineLabel()
checkAssignIL.Emit(OpCodes.Beq, tru257)
checkAssignIL.Emit(OpCodes.Br, fa257)
checkAssignIL.MarkLabel(tru257)
checkAssignIL.MarkSequencePoint(doc5, 869, 1, 869, 100)
checkAssignIL.Emit(OpCodes.Br, label21)
checkAssignIL.MarkSequencePoint(doc5, 870, 1, 870, 100)
checkAssignIL.Emit(OpCodes.Br, cont257)
checkAssignIL.MarkLabel(fa257)
checkAssignIL.MarkSequencePoint(doc5, 871, 1, 871, 100)
checkAssignIL.Emit(OpCodes.Br, label20)
checkAssignIL.MarkSequencePoint(doc5, 872, 1, 872, 100)
checkAssignIL.Emit(OpCodes.Br, cont257)
checkAssignIL.MarkLabel(cont257)
checkAssignIL.MarkSequencePoint(doc5, 874, 1, 874, 100)
checkAssignIL.MarkLabel(label21)
checkAssignIL.MarkSequencePoint(doc5, 876, 1, 876, 100)
Dim locbldr368 As LocalBuilder = checkAssignIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer"))
locbldr368.SetLocalSymInfo("eop")
checkAssignIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer").GetConstructor(Type.EmptyTypes))
checkAssignIL.Emit(OpCodes.Stloc, 9)
checkAssignIL.MarkSequencePoint(doc5, 877, 1, 877, 100)
Dim typ139(-1) As Type
checkAssignIL.Emit(OpCodes.Ldloc, 9)
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer")
Typ03 = Typ
checkAssignIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(Expr)
ReDim Preserve typ139(UBound(typ139) + 1)
typ139(UBound(typ139)) = Typ
checkAssignIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Optimize", typ139))
Typ = Typ03.GetMethod("Optimize", typ139).ReturnType
checkAssignIL.Emit(OpCodes.Stloc, 4)
checkAssignIL.MarkSequencePoint(doc5, 878, 1, 878, 100)
Dim typ140(-1) As Type
checkAssignIL.Emit(OpCodes.Ldloc, 9)
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ExprOptimizer")
Typ03 = Typ
checkAssignIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Expr)
ReDim Preserve typ140(UBound(typ140) + 1)
typ140(UBound(typ140)) = Typ
checkAssignIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Optimize", typ140))
Typ = Typ03.GetMethod("Optimize", typ140).ReturnType
checkAssignIL.Emit(OpCodes.Stloc, 5)
checkAssignIL.MarkSequencePoint(doc5, 880, 1, 880, 100)
checkAssignIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(AssignStmt)
checkAssignIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkAssignIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
checkAssignIL.Emit(OpCodes.Stfld, GetType(AssignStmt).GetField("Line"))
checkAssignIL.MarkSequencePoint(doc5, 881, 1, 881, 100)
checkAssignIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(AssignStmt)
checkAssignIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkAssignIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
checkAssignIL.Emit(OpCodes.Stfld, GetType(AssignStmt).GetField("Tokens"))
checkAssignIL.MarkSequencePoint(doc5, 882, 1, 882, 100)
checkAssignIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(AssignStmt)
checkAssignIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Expr)
checkAssignIL.Emit(OpCodes.Stfld, GetType(AssignStmt).GetField("LExp"))
checkAssignIL.MarkSequencePoint(doc5, 883, 1, 883, 100)
checkAssignIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(AssignStmt)
checkAssignIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(Expr)
checkAssignIL.Emit(OpCodes.Stfld, GetType(AssignStmt).GetField("RExp"))
checkAssignIL.MarkSequencePoint(doc5, 885, 1, 885, 100)
checkAssignIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
checkAssignIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
checkAssignIL.Emit(OpCodes.Stobj, Typ04)
checkAssignIL.MarkSequencePoint(doc5, 887, 1, 887, 100)
checkAssignIL.Emit(OpCodes.Ldarg_0)
Dim typ141(-1) As Type
checkAssignIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(AssignStmt)
ReDim Preserve typ141(UBound(typ141) + 1)
typ141(UBound(typ141)) = Typ
checkAssignIL.Emit(OpCodes.Callvirt, AssOpt)
Typ = AssOpt.ReturnType
checkAssignIL.Emit(OpCodes.Stloc, 2)
checkAssignIL.MarkSequencePoint(doc5, 889, 1, 889, 100)
checkAssignIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(AssignStmt)
checkAssignIL.MarkSequencePoint(doc5, 891, 1, 891, 100)
checkAssignIL.Emit(OpCodes.Br, cont255)
checkAssignIL.MarkLabel(fa255)
checkAssignIL.MarkSequencePoint(doc5, 892, 1, 892, 100)
checkAssignIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean).MakeByRefType()
Typ04 = Typ.GetElementType()
checkAssignIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
checkAssignIL.Emit(OpCodes.Stobj, Typ04)
checkAssignIL.MarkSequencePoint(doc5, 893, 1, 893, 100)
checkAssignIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
checkAssignIL.MarkSequencePoint(doc5, 895, 1, 895, 100)
checkAssignIL.Emit(OpCodes.Br, cont255)
checkAssignIL.MarkLabel(cont255)
checkAssignIL.MarkSequencePoint(doc5, 897, 1, 897, 100)
checkAssignIL.Emit(OpCodes.Ret)
Dim typ142(-1) As Type
ReDim Preserve typ142(UBound(typ142) + 1)
typ142(UBound(typ142)) = GetType(Stmt)
Dim Optimize As MethodBuilder = StmtOptimizer.DefineMethod("Optimize", MethodAttributes.Public, GetType(Stmt), typ142)
Dim OptimizeIL As ILGenerator = Optimize.GetILGenerator()
Dim Optimizeparam01 As ParameterBuilder = Optimize.DefineParameter(1, ParameterAttributes.None, "stm")
OptimizeIL.MarkSequencePoint(doc5, 903, 1, 903, 100)
Dim locbldr369 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.Int32))
locbldr369.SetLocalSymInfo("i")
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc5, 904, 1, 904, 100)
Dim locbldr370 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.Int32))
locbldr370.SetLocalSymInfo("len")
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
OptimizeIL.Emit(OpCodes.Ldlen)
OptimizeIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc5, 905, 1, 905, 100)
Dim locbldr371 As LocalBuilder = OptimizeIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.Parser.TokenOptimizer"))
locbldr371.SetLocalSymInfo("to")
OptimizeIL.Emit(OpCodes.Ldnull)
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc5, 906, 1, 906, 100)
Dim locbldr372 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(Stmt))
locbldr372.SetLocalSymInfo("tmpstm")
OptimizeIL.Emit(OpCodes.Ldnull)
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc5, 907, 1, 907, 100)
Dim locbldr373 As LocalBuilder = OptimizeIL.DeclareLocal(GetType(System.Boolean))
locbldr373.SetLocalSymInfo("compb")
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stloc, 4)
OptimizeIL.MarkSequencePoint(doc5, 908, 1, 908, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Sub)
OptimizeIL.Emit(OpCodes.Stloc, 1)
OptimizeIL.MarkSequencePoint(doc5, 910, 1, 910, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("IfFlag"))
OptimizeIL.MarkSequencePoint(doc5, 911, 1, 911, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("CmtFlag"))
OptimizeIL.MarkSequencePoint(doc5, 912, 1, 912, 100)
OptimizeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("NoOptFlag"))
OptimizeIL.MarkSequencePoint(doc5, 914, 1, 914, 100)
Dim label22 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.MarkSequencePoint(doc5, 915, 1, 915, 100)
Dim label23 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.MarkSequencePoint(doc5, 916, 1, 916, 100)
Dim label24 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.MarkSequencePoint(doc5, 918, 1, 918, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa258 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru258 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont258 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Blt, tru258)
OptimizeIL.Emit(OpCodes.Br, fa258)
OptimizeIL.MarkLabel(tru258)
OptimizeIL.MarkSequencePoint(doc5, 919, 1, 919, 100)
OptimizeIL.Emit(OpCodes.Br, label23)
OptimizeIL.MarkSequencePoint(doc5, 920, 1, 920, 100)
OptimizeIL.Emit(OpCodes.Br, cont258)
OptimizeIL.MarkLabel(fa258)
OptimizeIL.Emit(OpCodes.Br, cont258)
OptimizeIL.MarkLabel(cont258)
OptimizeIL.MarkSequencePoint(doc5, 922, 1, 922, 100)
OptimizeIL.MarkLabel(label22)
OptimizeIL.MarkSequencePoint(doc5, 924, 1, 924, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Add)
OptimizeIL.Emit(OpCodes.Stloc, 0)
OptimizeIL.MarkSequencePoint(doc5, 926, 1, 926, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("CmtFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("CmtFlag").FieldType
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa259 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru259 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont259 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru259)
OptimizeIL.Emit(OpCodes.Br, fa259)
OptimizeIL.MarkLabel(tru259)
OptimizeIL.MarkSequencePoint(doc5, 927, 1, 927, 100)
OptimizeIL.Emit(OpCodes.Br, label23)
OptimizeIL.MarkSequencePoint(doc5, 928, 1, 928, 100)
OptimizeIL.Emit(OpCodes.Br, cont259)
OptimizeIL.MarkLabel(fa259)
OptimizeIL.Emit(OpCodes.Br, cont259)
OptimizeIL.MarkLabel(cont259)
OptimizeIL.MarkSequencePoint(doc5, 931, 1, 931, 100)
OptimizeIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("NoOptFlag"))
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.ParserFlags").GetField("NoOptFlag").FieldType
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa260 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru260 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont260 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru260)
OptimizeIL.Emit(OpCodes.Br, fa260)
OptimizeIL.MarkLabel(tru260)
OptimizeIL.MarkSequencePoint(doc5, 932, 1, 932, 100)
OptimizeIL.Emit(OpCodes.Br, label23)
OptimizeIL.MarkSequencePoint(doc5, 933, 1, 933, 100)
OptimizeIL.Emit(OpCodes.Br, cont260)
OptimizeIL.MarkLabel(fa260)
OptimizeIL.Emit(OpCodes.Br, cont260)
OptimizeIL.MarkLabel(cont260)
OptimizeIL.MarkSequencePoint(doc5, 935, 1, 935, 100)
OptimizeIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.Parser.TokenOptimizer").GetConstructor(Type.EmptyTypes))
OptimizeIL.Emit(OpCodes.Stloc, 2)
OptimizeIL.MarkSequencePoint(doc5, 936, 1, 936, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
Typ02 = Typ
Dim typ143(-1) As Type
OptimizeIL.Emit(OpCodes.Ldloc, 2)
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.TokenOptimizer")
Typ03 = Typ
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
Typ02 = Typ
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Conv_U)
Typ = Typ02
OptimizeIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ReDim Preserve typ143(UBound(typ143) + 1)
typ143(UBound(typ143)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Optimize", typ143))
Typ = Typ03.GetMethod("Optimize", typ143).ReturnType
Typ = Typ02
OptimizeIL.Emit(OpCodes.Stelem, Typ.GetElementType())
OptimizeIL.MarkSequencePoint(doc5, 938, 1, 938, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
Dim fa261 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru261 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont261 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru261)
OptimizeIL.Emit(OpCodes.Br, fa261)
OptimizeIL.MarkLabel(tru261)
OptimizeIL.MarkSequencePoint(doc5, 939, 1, 939, 100)
OptimizeIL.Emit(OpCodes.Br, label23)
OptimizeIL.MarkSequencePoint(doc5, 940, 1, 940, 100)
OptimizeIL.Emit(OpCodes.Br, cont261)
OptimizeIL.MarkLabel(fa261)
OptimizeIL.MarkSequencePoint(doc5, 941, 1, 941, 100)
OptimizeIL.Emit(OpCodes.Br, label22)
OptimizeIL.MarkSequencePoint(doc5, 942, 1, 942, 100)
OptimizeIL.Emit(OpCodes.Br, cont261)
OptimizeIL.MarkLabel(cont261)
OptimizeIL.MarkSequencePoint(doc5, 944, 1, 944, 100)
OptimizeIL.MarkLabel(label23)
OptimizeIL.MarkSequencePoint(doc5, 946, 1, 946, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Tokens"))
Typ = GetType(Stmt).GetField("Tokens").FieldType
OptimizeIL.Emit(OpCodes.Ldlen)
OptimizeIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
OptimizeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa262 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru262 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont262 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru262)
OptimizeIL.Emit(OpCodes.Br, fa262)
OptimizeIL.MarkLabel(tru262)
OptimizeIL.MarkSequencePoint(doc5, 947, 1, 947, 100)
OptimizeIL.Emit(OpCodes.Br, label24)
OptimizeIL.MarkSequencePoint(doc5, 948, 1, 948, 100)
OptimizeIL.Emit(OpCodes.Br, cont262)
OptimizeIL.MarkLabel(fa262)
OptimizeIL.Emit(OpCodes.Br, cont262)
OptimizeIL.MarkLabel(cont262)
OptimizeIL.MarkSequencePoint(doc5, 950, 1, 950, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ144(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReDim Preserve typ144(UBound(typ144) + 1)
typ144(UBound(typ144)) = Typ
OptimizeIL.Emit(OpCodes.Ldloca, 4)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ144(UBound(typ144) + 1)
typ144(UBound(typ144)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, checkCmt)
Typ = checkCmt.ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc5, 952, 1, 952, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa263 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru263 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont263 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru263)
OptimizeIL.Emit(OpCodes.Br, fa263)
OptimizeIL.MarkLabel(tru263)
OptimizeIL.MarkSequencePoint(doc5, 953, 1, 953, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc5, 954, 1, 954, 100)
OptimizeIL.Emit(OpCodes.Br, label24)
OptimizeIL.MarkSequencePoint(doc5, 955, 1, 955, 100)
OptimizeIL.Emit(OpCodes.Br, cont263)
OptimizeIL.MarkLabel(fa263)
OptimizeIL.Emit(OpCodes.Br, cont263)
OptimizeIL.MarkLabel(cont263)
OptimizeIL.MarkSequencePoint(doc5, 957, 1, 957, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ145(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReDim Preserve typ145(UBound(typ145) + 1)
typ145(UBound(typ145)) = Typ
OptimizeIL.Emit(OpCodes.Ldloca, 4)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ145(UBound(typ145) + 1)
typ145(UBound(typ145)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, checkImport)
Typ = checkImport.ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc5, 959, 1, 959, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa264 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru264 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont264 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru264)
OptimizeIL.Emit(OpCodes.Br, fa264)
OptimizeIL.MarkLabel(tru264)
OptimizeIL.MarkSequencePoint(doc5, 960, 1, 960, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc5, 961, 1, 961, 100)
OptimizeIL.Emit(OpCodes.Br, label24)
OptimizeIL.MarkSequencePoint(doc5, 962, 1, 962, 100)
OptimizeIL.Emit(OpCodes.Br, cont264)
OptimizeIL.MarkLabel(fa264)
OptimizeIL.Emit(OpCodes.Br, cont264)
OptimizeIL.MarkLabel(cont264)
OptimizeIL.MarkSequencePoint(doc5, 964, 1, 964, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ146(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReDim Preserve typ146(UBound(typ146) + 1)
typ146(UBound(typ146)) = Typ
OptimizeIL.Emit(OpCodes.Ldloca, 4)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ146(UBound(typ146) + 1)
typ146(UBound(typ146)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, checkLocimport)
Typ = checkLocimport.ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc5, 966, 1, 966, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa265 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru265 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont265 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru265)
OptimizeIL.Emit(OpCodes.Br, fa265)
OptimizeIL.MarkLabel(tru265)
OptimizeIL.MarkSequencePoint(doc5, 967, 1, 967, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc5, 968, 1, 968, 100)
OptimizeIL.Emit(OpCodes.Br, label24)
OptimizeIL.MarkSequencePoint(doc5, 969, 1, 969, 100)
OptimizeIL.Emit(OpCodes.Br, cont265)
OptimizeIL.MarkLabel(fa265)
OptimizeIL.Emit(OpCodes.Br, cont265)
OptimizeIL.MarkLabel(cont265)
OptimizeIL.MarkSequencePoint(doc5, 971, 1, 971, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ147(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReDim Preserve typ147(UBound(typ147) + 1)
typ147(UBound(typ147)) = Typ
OptimizeIL.Emit(OpCodes.Ldloca, 4)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ147(UBound(typ147) + 1)
typ147(UBound(typ147)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, checkAssembly)
Typ = checkAssembly.ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc5, 973, 1, 973, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa266 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru266 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont266 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru266)
OptimizeIL.Emit(OpCodes.Br, fa266)
OptimizeIL.MarkLabel(tru266)
OptimizeIL.MarkSequencePoint(doc5, 974, 1, 974, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc5, 975, 1, 975, 100)
OptimizeIL.Emit(OpCodes.Br, label24)
OptimizeIL.MarkSequencePoint(doc5, 976, 1, 976, 100)
OptimizeIL.Emit(OpCodes.Br, cont266)
OptimizeIL.MarkLabel(fa266)
OptimizeIL.Emit(OpCodes.Br, cont266)
OptimizeIL.MarkLabel(cont266)
OptimizeIL.MarkSequencePoint(doc5, 978, 1, 978, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ148(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReDim Preserve typ148(UBound(typ148) + 1)
typ148(UBound(typ148)) = Typ
OptimizeIL.Emit(OpCodes.Ldloca, 4)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ148(UBound(typ148) + 1)
typ148(UBound(typ148)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, checkVer)
Typ = checkVer.ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc5, 980, 1, 980, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa267 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru267 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont267 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru267)
OptimizeIL.Emit(OpCodes.Br, fa267)
OptimizeIL.MarkLabel(tru267)
OptimizeIL.MarkSequencePoint(doc5, 981, 1, 981, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc5, 982, 1, 982, 100)
OptimizeIL.Emit(OpCodes.Br, label24)
OptimizeIL.MarkSequencePoint(doc5, 983, 1, 983, 100)
OptimizeIL.Emit(OpCodes.Br, cont267)
OptimizeIL.MarkLabel(fa267)
OptimizeIL.Emit(OpCodes.Br, cont267)
OptimizeIL.MarkLabel(cont267)
OptimizeIL.MarkSequencePoint(doc5, 985, 1, 985, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ149(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReDim Preserve typ149(UBound(typ149) + 1)
typ149(UBound(typ149)) = Typ
OptimizeIL.Emit(OpCodes.Ldloca, 4)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ149(UBound(typ149) + 1)
typ149(UBound(typ149)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, checkClass)
Typ = checkClass.ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc5, 987, 1, 987, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa268 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru268 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont268 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru268)
OptimizeIL.Emit(OpCodes.Br, fa268)
OptimizeIL.MarkLabel(tru268)
OptimizeIL.MarkSequencePoint(doc5, 988, 1, 988, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc5, 989, 1, 989, 100)
OptimizeIL.Emit(OpCodes.Br, label24)
OptimizeIL.MarkSequencePoint(doc5, 990, 1, 990, 100)
OptimizeIL.Emit(OpCodes.Br, cont268)
OptimizeIL.MarkLabel(fa268)
OptimizeIL.Emit(OpCodes.Br, cont268)
OptimizeIL.MarkLabel(cont268)
OptimizeIL.MarkSequencePoint(doc5, 992, 1, 992, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ150(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReDim Preserve typ150(UBound(typ150) + 1)
typ150(UBound(typ150)) = Typ
OptimizeIL.Emit(OpCodes.Ldloca, 4)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ150(UBound(typ150) + 1)
typ150(UBound(typ150)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, checkField)
Typ = checkField.ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc5, 994, 1, 994, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa269 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru269 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont269 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru269)
OptimizeIL.Emit(OpCodes.Br, fa269)
OptimizeIL.MarkLabel(tru269)
OptimizeIL.MarkSequencePoint(doc5, 995, 1, 995, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc5, 996, 1, 996, 100)
OptimizeIL.Emit(OpCodes.Br, label24)
OptimizeIL.MarkSequencePoint(doc5, 997, 1, 997, 100)
OptimizeIL.Emit(OpCodes.Br, cont269)
OptimizeIL.MarkLabel(fa269)
OptimizeIL.Emit(OpCodes.Br, cont269)
OptimizeIL.MarkLabel(cont269)
OptimizeIL.MarkSequencePoint(doc5, 999, 1, 999, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ151(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReDim Preserve typ151(UBound(typ151) + 1)
typ151(UBound(typ151)) = Typ
OptimizeIL.Emit(OpCodes.Ldloca, 4)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ151(UBound(typ151) + 1)
typ151(UBound(typ151)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, checkMethod)
Typ = checkMethod.ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc5, 1001, 1, 1001, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa270 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru270 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont270 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru270)
OptimizeIL.Emit(OpCodes.Br, fa270)
OptimizeIL.MarkLabel(tru270)
OptimizeIL.MarkSequencePoint(doc5, 1002, 1, 1002, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc5, 1003, 1, 1003, 100)
OptimizeIL.Emit(OpCodes.Br, label24)
OptimizeIL.MarkSequencePoint(doc5, 1004, 1, 1004, 100)
OptimizeIL.Emit(OpCodes.Br, cont270)
OptimizeIL.MarkLabel(fa270)
OptimizeIL.Emit(OpCodes.Br, cont270)
OptimizeIL.MarkLabel(cont270)
OptimizeIL.MarkSequencePoint(doc5, 1006, 1, 1006, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ152(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReDim Preserve typ152(UBound(typ152) + 1)
typ152(UBound(typ152)) = Typ
OptimizeIL.Emit(OpCodes.Ldloca, 4)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ152(UBound(typ152) + 1)
typ152(UBound(typ152)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, checkMethodCall)
Typ = checkMethodCall.ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc5, 1008, 1, 1008, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa271 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru271 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont271 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru271)
OptimizeIL.Emit(OpCodes.Br, fa271)
OptimizeIL.MarkLabel(tru271)
OptimizeIL.MarkSequencePoint(doc5, 1009, 1, 1009, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc5, 1010, 1, 1010, 100)
OptimizeIL.Emit(OpCodes.Br, label24)
OptimizeIL.MarkSequencePoint(doc5, 1011, 1, 1011, 100)
OptimizeIL.Emit(OpCodes.Br, cont271)
OptimizeIL.MarkLabel(fa271)
OptimizeIL.Emit(OpCodes.Br, cont271)
OptimizeIL.MarkLabel(cont271)
OptimizeIL.MarkSequencePoint(doc5, 1013, 1, 1013, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ153(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReDim Preserve typ153(UBound(typ153) + 1)
typ153(UBound(typ153)) = Typ
OptimizeIL.Emit(OpCodes.Ldloca, 4)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ153(UBound(typ153) + 1)
typ153(UBound(typ153)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, checkAssign)
Typ = checkAssign.ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc5, 1015, 1, 1015, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa272 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru272 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont272 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru272)
OptimizeIL.Emit(OpCodes.Br, fa272)
OptimizeIL.MarkLabel(tru272)
OptimizeIL.MarkSequencePoint(doc5, 1016, 1, 1016, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc5, 1017, 1, 1017, 100)
OptimizeIL.Emit(OpCodes.Br, label24)
OptimizeIL.MarkSequencePoint(doc5, 1018, 1, 1018, 100)
OptimizeIL.Emit(OpCodes.Br, cont272)
OptimizeIL.MarkLabel(fa272)
OptimizeIL.Emit(OpCodes.Br, cont272)
OptimizeIL.MarkLabel(cont272)
OptimizeIL.MarkSequencePoint(doc5, 1020, 1, 1020, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ154(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReDim Preserve typ154(UBound(typ154) + 1)
typ154(UBound(typ154)) = Typ
OptimizeIL.Emit(OpCodes.Ldloca, 4)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ154(UBound(typ154) + 1)
typ154(UBound(typ154)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, checkVarAs)
Typ = checkVarAs.ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc5, 1022, 1, 1022, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa273 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru273 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont273 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru273)
OptimizeIL.Emit(OpCodes.Br, fa273)
OptimizeIL.MarkLabel(tru273)
OptimizeIL.MarkSequencePoint(doc5, 1023, 1, 1023, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc5, 1024, 1, 1024, 100)
OptimizeIL.Emit(OpCodes.Br, label24)
OptimizeIL.MarkSequencePoint(doc5, 1025, 1, 1025, 100)
OptimizeIL.Emit(OpCodes.Br, cont273)
OptimizeIL.MarkLabel(fa273)
OptimizeIL.Emit(OpCodes.Br, cont273)
OptimizeIL.MarkLabel(cont273)
OptimizeIL.MarkSequencePoint(doc5, 1027, 1, 1027, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ155(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReDim Preserve typ155(UBound(typ155) + 1)
typ155(UBound(typ155)) = Typ
OptimizeIL.Emit(OpCodes.Ldloca, 4)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ155(UBound(typ155) + 1)
typ155(UBound(typ155)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, checkEndMtd)
Typ = checkEndMtd.ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc5, 1029, 1, 1029, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa274 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru274 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont274 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru274)
OptimizeIL.Emit(OpCodes.Br, fa274)
OptimizeIL.MarkLabel(tru274)
OptimizeIL.MarkSequencePoint(doc5, 1030, 1, 1030, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc5, 1031, 1, 1031, 100)
OptimizeIL.Emit(OpCodes.Br, label24)
OptimizeIL.MarkSequencePoint(doc5, 1032, 1, 1032, 100)
OptimizeIL.Emit(OpCodes.Br, cont274)
OptimizeIL.MarkLabel(fa274)
OptimizeIL.Emit(OpCodes.Br, cont274)
OptimizeIL.MarkLabel(cont274)
OptimizeIL.MarkSequencePoint(doc5, 1034, 1, 1034, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ156(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReDim Preserve typ156(UBound(typ156) + 1)
typ156(UBound(typ156)) = Typ
OptimizeIL.Emit(OpCodes.Ldloca, 4)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ156(UBound(typ156) + 1)
typ156(UBound(typ156)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, checkEndCls)
Typ = checkEndCls.ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc5, 1036, 1, 1036, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa275 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru275 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont275 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru275)
OptimizeIL.Emit(OpCodes.Br, fa275)
OptimizeIL.MarkLabel(tru275)
OptimizeIL.MarkSequencePoint(doc5, 1037, 1, 1037, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc5, 1038, 1, 1038, 100)
OptimizeIL.Emit(OpCodes.Br, label24)
OptimizeIL.MarkSequencePoint(doc5, 1039, 1, 1039, 100)
OptimizeIL.Emit(OpCodes.Br, cont275)
OptimizeIL.MarkLabel(fa275)
OptimizeIL.Emit(OpCodes.Br, cont275)
OptimizeIL.MarkLabel(cont275)
OptimizeIL.MarkSequencePoint(doc5, 1041, 1, 1041, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ157(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReDim Preserve typ157(UBound(typ157) + 1)
typ157(UBound(typ157)) = Typ
OptimizeIL.Emit(OpCodes.Ldloca, 4)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ157(UBound(typ157) + 1)
typ157(UBound(typ157)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, checkDebug)
Typ = checkDebug.ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc5, 1043, 1, 1043, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa276 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru276 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont276 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru276)
OptimizeIL.Emit(OpCodes.Br, fa276)
OptimizeIL.MarkLabel(tru276)
OptimizeIL.MarkSequencePoint(doc5, 1044, 1, 1044, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc5, 1045, 1, 1045, 100)
OptimizeIL.Emit(OpCodes.Br, label24)
OptimizeIL.MarkSequencePoint(doc5, 1046, 1, 1046, 100)
OptimizeIL.Emit(OpCodes.Br, cont276)
OptimizeIL.MarkLabel(fa276)
OptimizeIL.Emit(OpCodes.Br, cont276)
OptimizeIL.MarkLabel(cont276)
OptimizeIL.MarkSequencePoint(doc5, 1048, 1, 1048, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ158(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReDim Preserve typ158(UBound(typ158) + 1)
typ158(UBound(typ158)) = Typ
OptimizeIL.Emit(OpCodes.Ldloca, 4)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ158(UBound(typ158) + 1)
typ158(UBound(typ158)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, checkRefasm)
Typ = checkRefasm.ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc5, 1050, 1, 1050, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa277 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru277 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont277 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru277)
OptimizeIL.Emit(OpCodes.Br, fa277)
OptimizeIL.MarkLabel(tru277)
OptimizeIL.MarkSequencePoint(doc5, 1051, 1, 1051, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc5, 1052, 1, 1052, 100)
OptimizeIL.Emit(OpCodes.Br, label24)
OptimizeIL.MarkSequencePoint(doc5, 1053, 1, 1053, 100)
OptimizeIL.Emit(OpCodes.Br, cont277)
OptimizeIL.MarkLabel(fa277)
OptimizeIL.Emit(OpCodes.Br, cont277)
OptimizeIL.MarkLabel(cont277)
OptimizeIL.MarkSequencePoint(doc5, 1055, 1, 1055, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ159(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReDim Preserve typ159(UBound(typ159) + 1)
typ159(UBound(typ159)) = Typ
OptimizeIL.Emit(OpCodes.Ldloca, 4)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ159(UBound(typ159) + 1)
typ159(UBound(typ159)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, checkIf)
Typ = checkIf.ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc5, 1057, 1, 1057, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa278 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru278 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont278 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru278)
OptimizeIL.Emit(OpCodes.Br, fa278)
OptimizeIL.MarkLabel(tru278)
OptimizeIL.MarkSequencePoint(doc5, 1058, 1, 1058, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc5, 1059, 1, 1059, 100)
OptimizeIL.Emit(OpCodes.Br, label24)
OptimizeIL.MarkSequencePoint(doc5, 1060, 1, 1060, 100)
OptimizeIL.Emit(OpCodes.Br, cont278)
OptimizeIL.MarkLabel(fa278)
OptimizeIL.Emit(OpCodes.Br, cont278)
OptimizeIL.MarkLabel(cont278)
OptimizeIL.MarkSequencePoint(doc5, 1062, 1, 1062, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ160(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReDim Preserve typ160(UBound(typ160) + 1)
typ160(UBound(typ160)) = Typ
OptimizeIL.Emit(OpCodes.Ldloca, 4)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ160(UBound(typ160) + 1)
typ160(UBound(typ160)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, checkElseIf)
Typ = checkElseIf.ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc5, 1064, 1, 1064, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa279 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru279 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont279 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru279)
OptimizeIL.Emit(OpCodes.Br, fa279)
OptimizeIL.MarkLabel(tru279)
OptimizeIL.MarkSequencePoint(doc5, 1065, 1, 1065, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc5, 1066, 1, 1066, 100)
OptimizeIL.Emit(OpCodes.Br, label24)
OptimizeIL.MarkSequencePoint(doc5, 1067, 1, 1067, 100)
OptimizeIL.Emit(OpCodes.Br, cont279)
OptimizeIL.MarkLabel(fa279)
OptimizeIL.Emit(OpCodes.Br, cont279)
OptimizeIL.MarkLabel(cont279)
OptimizeIL.MarkSequencePoint(doc5, 1069, 1, 1069, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ161(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReDim Preserve typ161(UBound(typ161) + 1)
typ161(UBound(typ161)) = Typ
OptimizeIL.Emit(OpCodes.Ldloca, 4)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ161(UBound(typ161) + 1)
typ161(UBound(typ161)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, checkElse)
Typ = checkElse.ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc5, 1071, 1, 1071, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa280 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru280 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont280 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru280)
OptimizeIL.Emit(OpCodes.Br, fa280)
OptimizeIL.MarkLabel(tru280)
OptimizeIL.MarkSequencePoint(doc5, 1072, 1, 1072, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc5, 1073, 1, 1073, 100)
OptimizeIL.Emit(OpCodes.Br, label24)
OptimizeIL.MarkSequencePoint(doc5, 1074, 1, 1074, 100)
OptimizeIL.Emit(OpCodes.Br, cont280)
OptimizeIL.MarkLabel(fa280)
OptimizeIL.Emit(OpCodes.Br, cont280)
OptimizeIL.MarkLabel(cont280)
OptimizeIL.MarkSequencePoint(doc5, 1076, 1, 1076, 100)
OptimizeIL.Emit(OpCodes.Ldarg_0)
Dim typ162(-1) As Type
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReDim Preserve typ162(UBound(typ162) + 1)
typ162(UBound(typ162)) = Typ
OptimizeIL.Emit(OpCodes.Ldloca, 4)
Typ = GetType(System.Boolean).MakeByRefType()
ReDim Preserve typ162(UBound(typ162) + 1)
typ162(UBound(typ162)) = Typ
OptimizeIL.Emit(OpCodes.Callvirt, checkEndIf)
Typ = checkEndIf.ReturnType
OptimizeIL.Emit(OpCodes.Stloc, 3)
OptimizeIL.MarkSequencePoint(doc5, 1078, 1, 1078, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
OptimizeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa281 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim tru281 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
Dim cont281 As System.Reflection.Emit.Label = OptimizeIL.DefineLabel()
OptimizeIL.Emit(OpCodes.Beq, tru281)
OptimizeIL.Emit(OpCodes.Br, fa281)
OptimizeIL.MarkLabel(tru281)
OptimizeIL.MarkSequencePoint(doc5, 1079, 1, 1079, 100)
OptimizeIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Stmt)
OptimizeIL.Emit(OpCodes.Starg, 1)
OptimizeIL.MarkSequencePoint(doc5, 1080, 1, 1080, 100)
OptimizeIL.Emit(OpCodes.Br, label24)
OptimizeIL.MarkSequencePoint(doc5, 1081, 1, 1081, 100)
OptimizeIL.Emit(OpCodes.Br, cont281)
OptimizeIL.MarkLabel(fa281)
OptimizeIL.Emit(OpCodes.Br, cont281)
OptimizeIL.MarkLabel(cont281)
OptimizeIL.MarkSequencePoint(doc5, 1083, 1, 1083, 100)
OptimizeIL.MarkLabel(label24)
OptimizeIL.MarkSequencePoint(doc5, 1085, 1, 1085, 100)
OptimizeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
OptimizeIL.MarkSequencePoint(doc5, 1086, 1, 1086, 100)
OptimizeIL.Emit(OpCodes.Ret)
StmtOptimizer.CreateType()
End Sub


Dim doc6 As ISymbolDocumentWriter

Sub Parser()
Dim Parser As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.Parser" & "." & "Parser", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(StmtSet)
Dim Parse As MethodBuilder = Parser.DefineMethod("Parse", MethodAttributes.Public, GetType(StmtSet), typ0)
Dim ParseIL As ILGenerator = Parse.GetILGenerator()
Dim Parseparam01 As ParameterBuilder = Parse.DefineParameter(1, ParameterAttributes.None, "stms")
ParseIL.MarkSequencePoint(doc6, 12, 1, 12, 100)
Dim locbldr374 As LocalBuilder = ParseIL.DeclareLocal(GetType(System.Int32))
locbldr374.SetLocalSymInfo("i")
ParseIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ParseIL.Emit(OpCodes.Stloc, 0)
ParseIL.MarkSequencePoint(doc6, 13, 1, 13, 100)
Dim locbldr375 As LocalBuilder = ParseIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.Parser.StmtOptimizer"))
locbldr375.SetLocalSymInfo("so")
ParseIL.Emit(OpCodes.Ldnull)
ParseIL.Emit(OpCodes.Stloc, 1)
ParseIL.MarkSequencePoint(doc6, 14, 1, 14, 100)
Dim locbldr376 As LocalBuilder = ParseIL.DeclareLocal(GetType(System.Int32))
locbldr376.SetLocalSymInfo("len")
ParseIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(StmtSet)
ParseIL.Emit(OpCodes.Ldfld, GetType(StmtSet).GetField("Stmts"))
Typ = GetType(StmtSet).GetField("Stmts").FieldType
ParseIL.Emit(OpCodes.Ldlen)
ParseIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ParseIL.Emit(OpCodes.Stloc, 2)
ParseIL.MarkSequencePoint(doc6, 15, 1, 15, 100)
ParseIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
ParseIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ParseIL.Emit(OpCodes.Sub)
ParseIL.Emit(OpCodes.Stloc, 2)
ParseIL.MarkSequencePoint(doc6, 17, 1, 17, 100)
Dim label0 As System.Reflection.Emit.Label = ParseIL.DefineLabel()
ParseIL.MarkSequencePoint(doc6, 18, 1, 18, 100)
Dim label1 As System.Reflection.Emit.Label = ParseIL.DefineLabel()
ParseIL.MarkSequencePoint(doc6, 20, 1, 20, 100)
ParseIL.MarkLabel(label0)
ParseIL.MarkSequencePoint(doc6, 22, 1, 22, 100)
ParseIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
ParseIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ParseIL.Emit(OpCodes.Add)
ParseIL.Emit(OpCodes.Stloc, 0)
ParseIL.MarkSequencePoint(doc6, 23, 1, 23, 100)
ParseIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.Parser.StmtOptimizer").GetConstructor(Type.EmptyTypes))
ParseIL.Emit(OpCodes.Stloc, 1)
ParseIL.MarkSequencePoint(doc6, 24, 1, 24, 100)
ParseIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(StmtSet)
ParseIL.Emit(OpCodes.Ldfld, GetType(StmtSet).GetField("Stmts"))
Typ = GetType(StmtSet).GetField("Stmts").FieldType
Typ02 = Typ
ParseIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
ParseIL.Emit(OpCodes.Conv_U)
Typ = Typ02
Typ02 = Typ
Dim typ1(-1) As Type
ParseIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.Parser.StmtOptimizer")
Typ03 = Typ
ParseIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(StmtSet)
ParseIL.Emit(OpCodes.Ldfld, GetType(StmtSet).GetField("Stmts"))
Typ = GetType(StmtSet).GetField("Stmts").FieldType
Typ02 = Typ
ParseIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
ParseIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ParseIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = Typ
ParseIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Optimize", typ1))
Typ = Typ03.GetMethod("Optimize", typ1).ReturnType
Typ = Typ02
ParseIL.Emit(OpCodes.Stelem, Typ.GetElementType())
ParseIL.MarkSequencePoint(doc6, 26, 1, 26, 100)
ParseIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
ParseIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa282 As System.Reflection.Emit.Label = ParseIL.DefineLabel()
Dim tru282 As System.Reflection.Emit.Label = ParseIL.DefineLabel()
Dim cont282 As System.Reflection.Emit.Label = ParseIL.DefineLabel()
ParseIL.Emit(OpCodes.Beq, tru282)
ParseIL.Emit(OpCodes.Br, fa282)
ParseIL.MarkLabel(tru282)
ParseIL.MarkSequencePoint(doc6, 27, 1, 27, 100)
ParseIL.Emit(OpCodes.Br, label1)
ParseIL.MarkSequencePoint(doc6, 28, 1, 28, 100)
ParseIL.Emit(OpCodes.Br, cont282)
ParseIL.MarkLabel(fa282)
ParseIL.MarkSequencePoint(doc6, 29, 1, 29, 100)
ParseIL.Emit(OpCodes.Br, label0)
ParseIL.MarkSequencePoint(doc6, 30, 1, 30, 100)
ParseIL.Emit(OpCodes.Br, cont282)
ParseIL.MarkLabel(cont282)
ParseIL.MarkSequencePoint(doc6, 32, 1, 32, 100)
ParseIL.MarkLabel(label1)
ParseIL.MarkSequencePoint(doc6, 34, 1, 34, 100)
ParseIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(StmtSet)
ParseIL.MarkSequencePoint(doc6, 35, 1, 35, 100)
ParseIL.Emit(OpCodes.Ret)
Parser.CreateType()
End Sub

Sub Main()

asmName = New AssemblyName("tokenizer.Parser")
asmName.Version = New System.Version(11, 2, 7, 5)
asm  = AppDomain.CurrentDomain.DefineDynamicAssembly(asmName, AssemblyBuilderAccess.Save, CStr("E:\Code\dylannet\compiler\"))
mdl = asm.DefineDynamicModule(asmName.Name & ".dll" , asmName.Name & ".dll", True)
resw = mdl.DefineResource("tokenizer.Parser.resources" ,  "Description")
doc = mdl.DefineDocument("E:\Code\dylannet\compiler\tokenizer.Parser.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc2 = mdl.DefineDocument("E:\Code\dylannet\compiler\parser\parserflags.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc3 = mdl.DefineDocument("E:\Code\dylannet\compiler\parser\tokenoptimizer.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc4 = mdl.DefineDocument("E:\Code\dylannet\compiler\parser\exproptimizer.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc5 = mdl.DefineDocument("E:\Code\dylannet\compiler\parser\stmtoptimizer.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc6 = mdl.DefineDocument("E:\Code\dylannet\compiler\parser\parser.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
addstr("tokenizer.Parser")
addasm(asm)
Dim daType As Type = GetType(DebuggableAttribute)
Dim daCtor As ConstructorInfo = daType.GetConstructor(New Type() { GetType(DebuggableAttribute.DebuggingModes) })
Dim daBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(daCtor, New Object() {DebuggableAttribute.DebuggingModes.DisableOptimizations Or _
DebuggableAttribute.DebuggingModes.Default })
asm.SetCustomAttribute(daBuilder)

ParserFlags()
TokenOptimizer()
ExprOptimizer()
StmtOptimizer()
Parser()
Dim vaType As Type = GetType(AssemblyFileVersionAttribute)
Dim vaCtor As ConstructorInfo = vaType.GetConstructor(New Type() { GetType(String) })
Dim vaBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(vaCtor, New Object() {"11.2.7.5"})
asm.SetCustomAttribute(vaBuilder)

Dim paType As Type = GetType(AssemblyProductAttribute)
Dim paCtor As ConstructorInfo = paType.GetConstructor(New Type() { GetType(String) })
Dim paBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(paCtor, New Object() {"tokenizer.Parser"})
asm.SetCustomAttribute(paBuilder)

Dim ataType As Type = GetType(AssemblyTitleAttribute)
Dim ataCtor As ConstructorInfo = ataType.GetConstructor(New Type() { GetType(String) })
Dim ataBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(ataCtor, New Object() {"tokenizer.Parser"})
asm.SetCustomAttribute(ataBuilder)

Dim deaType As Type = GetType(AssemblyDescriptionAttribute)
Dim deaCtor As ConstructorInfo = deaType.GetConstructor(New Type() { GetType(String) })
Dim deaBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(deaCtor, New Object() {"tokenizer.Parser"})
asm.SetCustomAttribute(deaBuilder)


asm.DefineVersionInfoResource()
asm.Save(asmName.Name & ".dll")
End Sub


End Module