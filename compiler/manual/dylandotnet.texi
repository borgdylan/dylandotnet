\input texinfo
@settitle dylan.NET Programmer's Manual
@setfilename dylandotnet.info
@afourpaper

@copying
This is the manual documenting the syntax of the dylan.NET programming language.
Copyright @copyright{} 2013 Dylan Borg
@end copying

@titlepage
@title @code{dylan.NET} Programmer's Manual
@sp 2
@subtitle This is the manual documenting the syntax of the @code{dylan.NET} programming language.
@author Dylan Borg
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage
@headings single

@contents

@ifnottex
@node Top
@top dylan.NET Programmer's Manual
@end ifnottex

@menu
* Introduction::
* Syntax::
* Practical Examples::
@end menu

@node Introduction
@chapter Introduction

@indent
@code{dylan.NET} is a new programming language for the @acronym{CLR, Common Language Runtime} which produces bytecode in @acronym{MSIL, Microsoft Intermediate Language} format that is suitable for input to the Xamarin Mono and/or Microsoft .NET Framework virtual machines. The compiler itself i.e. @command{dylandotnet} runs on the latter virtual machines as well and is in fact @dfn{self-hosting, compiles itself}. The intent of this literature is not to explain the command-line invocation of the compiler but rather to explain the syntax of the language (as of v. 11.3.1.4) and to provide some examples that may be used in practice.
@sp 1
@strong{Note:} @emph{Some of the example code in this manual may be an extract from the sample programs accompanying the compiler source code or may be extracts from the compiler source code itself. In such case the source file for the particular extract will be quoted.}
@sp 1
To whet your appetite for the next chapter, below is the standard @samp{Hello, World!} program written in @code{dylan.NET}:

@float
@example
@verbatim
#refstdasm "mscorlib.dll"

import System

#debug on

assembly helloworld exe
ver 1.2.0.0

class public auto ansi static Program

	method public static void main()
		Console::WriteLine("Hello, World!")	
	end method

end class
@end verbatim
@end example
@caption{@cite{Adapted from the @file{helloworld.dyl} sample program.}}
@end float

@node Syntax
@chapter Syntax

@indent
The aim of this chapter is to explain the structure of of a @code{dylan.NET} program/library. This will be followed by explanations of the various statement types available in the @code{dylan.NET} programming language.

@menu
* General Structure::
* Referencing Libraries::
* Importing Namespaces::
* Debug Mode::
* Declaring an Assembly::
* Specifying the Assembly Version::
* Declaring a Class::
* Declaring a Field::
* Declaring a Method::
* Declaring a Constructor::
* Conditional Compilation::
@end menu

@node General Structure
@section General Structure

@indent
With reference to the sample program presented in @ref{Introduction}, the structure of a @code{dylan.NET} program/library is as follows:
@sp 1
@itemize
@item
@code{#refstdasm} and/or @code{#refasm} statements which are used to reference class libraries.

@item
@code{import} statements which import namespaces from the libraries.

@item
An optional turning on of debugging as a @code{#debug} statement. 

@item
The declarations of the assembly name and its version as @code{assembly} and @code{ver} statements.

@item
The actual code for the program/library as a set of classes and their members. @emph{The name @samp{main} when used with a method indicates that it is the entry point of the program.}
@end itemize

@node Referencing Libraries
@section Referencing Libraries

@indent
Sometimes one may require the use of already defined functions and classes that are not part of the current program's/library's sources. The @code{#refasm} and @code{#refstdasm} statements allow the referencing of a .NET library inside @code{dylan.NET} source code. @code{#refstdasm} allows the refercning of the standard libraries which ship with the .NET runtime. Because of the more organised way used by Mono in installing its libraries, the @code{#refstdasm} statement can allow referencing any library in the runtime directory (paths are in relation to it) of the .NET profile being used. In the case of @code{#refasm}, the paths specified are relative to the current working directory.
@sp 1
@strong{Note:} @emph{In both statements, enclosing the path in double-quotes is recommended so as to prevent the compiler's lexer from breaking the path into many tokens, as would happen with @samp{UNIX} style paths which include the @samp{/} and or @samp{-} characters which for @code{dylan.NET} are the division and subtraction operators repectively.}
@sp 1
Some examples of referencing some standard libraries and one non-standard library:

@example
@code{//#refstdasm @var{standardlib.dll}}
@code{#refstdasm "mscorlib.dll"}
@code{#refstdasm "System.dll"}
@code{#refstdasm "System.Xml.Linq.dll"}
@code{#refstdasm "System.Core.dll"}
@code{//#refasm @var{path/to/lib.dll}}
@code{#refasm "lib/mylibrary.dll"}
@end example

@node Importing Namespaces
@section Importing Namespaces

@indent
The @code{import} statement allows the import of namespaces. This implies that one does not need to use the full name of classes when writing a class' name since the compiler always tries to prepend imported namespaces with a supplied class name while searching inside the imported libraries and in the generated code for the sources being compiled. The @samp{Console} class being used in the code sample in @ref{Introduction} is in fact named @samp{System.Console} and is found in the @samp{mscorlib.dll} library. The @code{import System} line in the sources allowed the omission of the namespace part of the class name while calling the @samp{WriteLine} method.
@sp 1
@strong{Note:} @emph{Enclosing the namespace in double-quotes is needed in certain cases, so as to prevent the compiler's lexer from breaking the namespace spcified into many tokens, as would happen with @samp{UNIX} style paths which include the @samp{/} and or @samp{-} characters which for @code{dylan.NET} are the division and subtraction operators repectively.}
@sp 1
Some examples of importing some standard namespaces:
@example
@code{//import @var{namespace}}
@code{import System}
@code{import System.Xml.Linq}
@code{import System.Collections.Generic}
@code{import System.Linq}
@end example
@sp 1
@strong{Note:} @emph{In the rare cases when using two or more classes that are @strong{named the same}, but are @strong{from different namsepaces}, the @code{dylan.NET} compiler will select the class from the namespace that is imported first.}

To make sure the actually needed class gets selected in the latter case, one would need to prepend the namespace to the class' name everytime the class is used. Since the latter methodology is inefficient and requires extra typing, @samp{aliased namespaces} can be used instead to be able to assign a short alias to the namepace.  As an example, to set the alias @samp{SCG} to the @samp{System.Coillections.Generic} namespace one would use the following code:
@sp 1
@example
@code{//import @var{alias} = @var{namespace}}
@code{import SCG = System.Collections.Generic}
@end example
@sp 1
With the above alias, specifiying the alias as the namespace part of a class name will make the compiler swap it by the namespace assigned to the particular alias.

@node Debug Mode
@section Debug Mode

@indent
The @code{#debug} statement is used to turn on/off the production of debugging symbols in @samp{.mdb} (Mono) or @samp{.pdb} (.NET) format. By default debug mode is @code{off}. Turning the debug symbol making @code{on} will also imply @code{#define DEBUG}. For more info on the latter, @pxref{Conditional Compilation}. To turn debug symbol making on, use @code{#debug on} or use @code{#debug off} to make it clearer that no debug symbols will b made. @strong{This statement should occur before the @code{assembly} and @code{ver} statements.}

@node Declaring an Assembly
@section Declaring an Assembly

@indent
The @code{assembly} statement is used to declare an assembly given its name which has to be a single identifier token and mode which can be @dfn{@code{exe}, executable program} or @dfn{@code{dll}, dynamically linked library}. @strong{This statement should occur before the @code{ver} statement.} See the examples below:
@example
@code{//assembly @var{assembly_name} exe|dll}
@code{assembly testprog exe}
@code{assembly testlib dll}
@end example

@node Specifying the Assembly Version
@section Specifying the Assembly Version

@indent
The @code{ver} statement defines the version for the assembly declared using a preceding @code{assembly} statement and actually triggers the creation of a new @samp{assembly} by the compiler. The version number is made up of 4 integers, all of which must be specified. For more information on .NET version numbers look up @samp{System.Version} on @cite{@url{http://msdn.microsoft.com/en-us/library/system.version.aspx,MSDN}}. @strong{The @code{ver} statement should occur immediately after the @code{assembly} statement.} An example usage would be:
@example
@code{ver 1.1.0.0}
@end example

@node Declaring a Class
@section Declaring a Class

@indent
The @code{class} statement is used when declaring a new class and has the following format:
@example
@code{class @var{attributes} @var{class_name} [extends @var{parent_class}] [implements @var{interfaces}] }
@indent @indent @indent @indent @var{class_body}
@code{end class}
@end example
The @var{class_name}  has to be a valid identifier (current namespace is prepended to the class name in the format @var{namespace}.@var{classs_name}) while the @var{parentclass} and every member of the comma delimeted list @var{interfaces} must be valid type names. A valid type name should be similar in form to the following examples:
@example
@code{//non-generic}
@code{Console}
@code{Version}
@code{//generic}
@code{IEnumerable<of string>}
@code{IDictionary<of string, object>}
@end example
The @var{attributes} list may contain one of the following type attributes:
@table @code
@item public
Makes the class visible to all classes no matter where they are declared
@item private
Makes the class be visible only to the assembly in which it is declared
@item auto
Lets the runtime lay the class members in its own order
@item autochar
@item ansi
@item sequential
Forces the runtime to lay the class members in the order they were declared
@item abstract
Marks the class as being @samp{abstract}
@item interface
Marks the class as being @samp{interface} (should also use @code{abstract})
@item beforefieldinit
Runs the static constructor exactly once, before the first use of the class
@item sealed
Disallows inheritance of the class by other classes
@item static
Same as specifying all of @code{sealed}, @code{beforefieldinit} and @code{abstract}
@end table

@node Declaring a Field
@section Declaring a Field

@node  Declaring a Method
@section Declaring a Method

@node Declaring a Constructor
@section Declaring a Constructor

@node Conditional Compilation
@section Conditional Compilation

@node Practical Examples
@chapter Practical Examples


@bye
