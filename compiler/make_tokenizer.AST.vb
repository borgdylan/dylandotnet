Imports System.Linq
Imports System.Collections.Generic
Imports System.Collections
Imports Microsoft.VisualBasic
Imports System.Xml
Imports System.Xml.Linq
Imports System.Data

Imports System
Imports System.Diagnostics
Imports System.Diagnostics.SymbolStore
Imports System.Reflection
Imports System.Resources
Imports System.Reflection.Emit
Module Module1

Public asmName As AssemblyName
Public asm As AssemblyBuilder
Public Typ As Type
Public Typ02 As Type
Public Typ03 As Type
Public Typ04 As Type
Public impstr(-1) As String
Public impasm(-1) As Assembly
Public interfacebool As Boolean
Public mdl As ModuleBuilder
Public resw As IResourceWriter
Public resobj As Object

Dim doc As ISymbolDocumentWriter

Sub addstr(ByVal str As String)
ReDim Preserve impstr(UBound(impstr) + 1)
impstr(UBound(impstr)) = str
End Sub

Sub addasm(ByVal asm As Assembly)
ReDim Preserve impasm(UBound(impasm) + 1)
impasm(UBound(impasm)) = asm
End Sub

Function MakeGetType(ByVal TypeName As String) As Type
Dim attachbrackets As Boolean = False
If TypeName Like "*[[]*]" Then
Dim split As String() = TypeName.Split(New [Char] () {"[","]"})
TypeName = split(0)
attachbrackets = True
End If
Dim ind As Integer = -1
Dim i As Integer = -1
Dim len As Integer = impstr.Length - 1
Do Until i = len
i = i + 1
If TypeName Like impstr(i) & "*" Then
ind = i
End If
Loop
If ind <> -1 Then
Dim assem As Assembly = impasm(ind)
If attachbrackets = True Then
TypeName = TypeName & "[]"
End If
MakeGetType = assem.GetType(TypeName)
Else
If attachbrackets = True Then
TypeName = TypeName & "[]"
End If
MakeGetType = Type.GetType(TypeName)
End If
Return MakeGetType
End Function

Dim doc2 As ISymbolDocumentWriter

Sub Token()
Dim Token As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "Token", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim Value As FieldBuilder = Token.DefineField("Value", GetType(System.String), FieldAttributes.Public)
Dim Line As FieldBuilder = Token.DefineField("Line", GetType(System.Int32), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = Token.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc2, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc2, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, Value)
ctor0IL.MarkSequencePoint(doc2, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, Line)
ctor0IL.MarkSequencePoint(doc2, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = Token.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc2, 21, 1, 21, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc2, 22, 1, 22, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, Value)
ctor1IL.MarkSequencePoint(doc2, 23, 1, 23, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, Line)
ctor1IL.MarkSequencePoint(doc2, 24, 1, 24, 100)
ctor1IL.Emit(OpCodes.Ret)
Token.CreateType()
End Sub


Dim doc3 As ISymbolDocumentWriter

Sub Expr()
Dim Expr As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Exprs" & "." & "Expr", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim Tokens As FieldBuilder = Expr.DefineField("Tokens", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").MakeArrayType(), FieldAttributes.Public)
Dim Line As FieldBuilder = Expr.DefineField("Line", GetType(System.Int32), FieldAttributes.Public)
Dim ResultTyp As FieldBuilder = Expr.DefineField("ResultTyp", GetType(System.Type), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = Expr.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc3, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc3, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, Tokens)
ctor0IL.MarkSequencePoint(doc3, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, Line)
ctor0IL.MarkSequencePoint(doc3, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, ResultTyp)
ctor0IL.MarkSequencePoint(doc3, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token")
Dim AddToken As MethodBuilder = Expr.DefineMethod("AddToken", MethodAttributes.Public, GetType(System.Void), typ0)
Dim AddTokenIL As ILGenerator = AddToken.GetILGenerator()
Dim AddTokenparam01 As ParameterBuilder = AddToken.DefineParameter(1, ParameterAttributes.None, "toktoadd")
AddTokenIL.MarkSequencePoint(doc3, 24, 1, 24, 100)
Dim locbldr0 As LocalBuilder = AddTokenIL.DeclareLocal(GetType(System.Int32))
locbldr0.SetLocalSymInfo("len")
AddTokenIL.Emit(OpCodes.Ldarg_0)
AddTokenIL.Emit(OpCodes.Ldfld, Tokens)
Typ = Tokens.FieldType
AddTokenIL.Emit(OpCodes.Ldlen)
AddTokenIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddTokenIL.Emit(OpCodes.Stloc, 0)
AddTokenIL.MarkSequencePoint(doc3, 25, 1, 25, 100)
Dim locbldr1 As LocalBuilder = AddTokenIL.DeclareLocal(GetType(System.Int32))
locbldr1.SetLocalSymInfo("destl")
AddTokenIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddTokenIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddTokenIL.Emit(OpCodes.Add)
AddTokenIL.Emit(OpCodes.Stloc, 1)
AddTokenIL.MarkSequencePoint(doc3, 26, 1, 26, 100)
Dim locbldr2 As LocalBuilder = AddTokenIL.DeclareLocal(GetType(System.Int32))
locbldr2.SetLocalSymInfo("stopel")
AddTokenIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddTokenIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddTokenIL.Emit(OpCodes.Sub)
AddTokenIL.Emit(OpCodes.Stloc, 2)
AddTokenIL.MarkSequencePoint(doc3, 27, 1, 27, 100)
Dim locbldr3 As LocalBuilder = AddTokenIL.DeclareLocal(GetType(System.Int32))
locbldr3.SetLocalSymInfo("i")
AddTokenIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddTokenIL.Emit(OpCodes.Stloc, 3)
AddTokenIL.MarkSequencePoint(doc3, 29, 1, 29, 100)
Dim locbldr4 As LocalBuilder = AddTokenIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").MakeArrayType())
locbldr4.SetLocalSymInfo("destarr")
AddTokenIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddTokenIL.Emit(OpCodes.Conv_U)
AddTokenIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
AddTokenIL.Emit(OpCodes.Stloc, 4)
AddTokenIL.MarkSequencePoint(doc3, 31, 1, 31, 100)
Dim label0 As System.Reflection.Emit.Label = AddTokenIL.DefineLabel()
AddTokenIL.MarkSequencePoint(doc3, 32, 1, 32, 100)
Dim label1 As System.Reflection.Emit.Label = AddTokenIL.DefineLabel()
AddTokenIL.MarkSequencePoint(doc3, 34, 1, 34, 100)
AddTokenIL.MarkLabel(label0)
AddTokenIL.MarkSequencePoint(doc3, 36, 1, 36, 100)
AddTokenIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddTokenIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddTokenIL.Emit(OpCodes.Add)
AddTokenIL.Emit(OpCodes.Stloc, 3)
AddTokenIL.MarkSequencePoint(doc3, 38, 1, 38, 100)
AddTokenIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddTokenIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa0 As System.Reflection.Emit.Label = AddTokenIL.DefineLabel()
Dim tru0 As System.Reflection.Emit.Label = AddTokenIL.DefineLabel()
Dim cont0 As System.Reflection.Emit.Label = AddTokenIL.DefineLabel()
AddTokenIL.Emit(OpCodes.Bgt, tru0)
AddTokenIL.Emit(OpCodes.Br, fa0)
AddTokenIL.MarkLabel(tru0)
AddTokenIL.MarkSequencePoint(doc3, 40, 1, 40, 100)
AddTokenIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").MakeArrayType()
Typ02 = Typ
AddTokenIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddTokenIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddTokenIL.Emit(OpCodes.Ldarg_0)
AddTokenIL.Emit(OpCodes.Ldfld, Tokens)
Typ = Tokens.FieldType
Typ02 = Typ
AddTokenIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddTokenIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddTokenIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddTokenIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").MakeArrayType().GetElementType())
AddTokenIL.MarkSequencePoint(doc3, 42, 1, 42, 100)
AddTokenIL.Emit(OpCodes.Br, cont0)
AddTokenIL.MarkLabel(fa0)
AddTokenIL.Emit(OpCodes.Br, cont0)
AddTokenIL.MarkLabel(cont0)
AddTokenIL.MarkSequencePoint(doc3, 44, 1, 44, 100)
AddTokenIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddTokenIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa1 As System.Reflection.Emit.Label = AddTokenIL.DefineLabel()
Dim tru1 As System.Reflection.Emit.Label = AddTokenIL.DefineLabel()
Dim cont1 As System.Reflection.Emit.Label = AddTokenIL.DefineLabel()
AddTokenIL.Emit(OpCodes.Beq, tru1)
AddTokenIL.Emit(OpCodes.Br, fa1)
AddTokenIL.MarkLabel(tru1)
AddTokenIL.MarkSequencePoint(doc3, 45, 1, 45, 100)
AddTokenIL.Emit(OpCodes.Br, label1)
AddTokenIL.MarkSequencePoint(doc3, 46, 1, 46, 100)
AddTokenIL.Emit(OpCodes.Br, cont1)
AddTokenIL.MarkLabel(fa1)
AddTokenIL.MarkSequencePoint(doc3, 47, 1, 47, 100)
AddTokenIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddTokenIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa2 As System.Reflection.Emit.Label = AddTokenIL.DefineLabel()
Dim tru2 As System.Reflection.Emit.Label = AddTokenIL.DefineLabel()
Dim cont2 As System.Reflection.Emit.Label = AddTokenIL.DefineLabel()
AddTokenIL.Emit(OpCodes.Beq, fa2)
AddTokenIL.Emit(OpCodes.Br, tru2)
AddTokenIL.MarkLabel(tru2)
AddTokenIL.MarkSequencePoint(doc3, 48, 1, 48, 100)
AddTokenIL.Emit(OpCodes.Br, label0)
AddTokenIL.MarkSequencePoint(doc3, 49, 1, 49, 100)
AddTokenIL.Emit(OpCodes.Br, cont2)
AddTokenIL.MarkLabel(fa2)
AddTokenIL.MarkSequencePoint(doc3, 50, 1, 50, 100)
AddTokenIL.Emit(OpCodes.Br, label1)
AddTokenIL.MarkSequencePoint(doc3, 51, 1, 51, 100)
AddTokenIL.Emit(OpCodes.Br, cont2)
AddTokenIL.MarkLabel(cont2)
AddTokenIL.MarkSequencePoint(doc3, 52, 1, 52, 100)
AddTokenIL.Emit(OpCodes.Br, cont1)
AddTokenIL.MarkLabel(cont1)
AddTokenIL.MarkSequencePoint(doc3, 54, 1, 54, 100)
AddTokenIL.MarkLabel(label1)
AddTokenIL.MarkSequencePoint(doc3, 56, 1, 56, 100)
AddTokenIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddTokenIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa3 As System.Reflection.Emit.Label = AddTokenIL.DefineLabel()
Dim tru3 As System.Reflection.Emit.Label = AddTokenIL.DefineLabel()
Dim cont3 As System.Reflection.Emit.Label = AddTokenIL.DefineLabel()
AddTokenIL.Emit(OpCodes.Beq, tru3)
AddTokenIL.Emit(OpCodes.Br, fa3)
AddTokenIL.MarkLabel(tru3)
AddTokenIL.MarkSequencePoint(doc3, 57, 1, 57, 100)
AddTokenIL.Emit(OpCodes.Ldarg_0)
AddTokenIL.Emit(OpCodes.Ldarg, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token")
AddTokenIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetField("Line"))
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetField("Line").FieldType
AddTokenIL.Emit(OpCodes.Stfld, Line)
AddTokenIL.MarkSequencePoint(doc3, 58, 1, 58, 100)
AddTokenIL.Emit(OpCodes.Br, cont3)
AddTokenIL.MarkLabel(fa3)
AddTokenIL.Emit(OpCodes.Br, cont3)
AddTokenIL.MarkLabel(cont3)
AddTokenIL.MarkSequencePoint(doc3, 60, 1, 60, 100)
AddTokenIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").MakeArrayType()
Typ02 = Typ
AddTokenIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddTokenIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddTokenIL.Emit(OpCodes.Ldarg, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token")
AddTokenIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").MakeArrayType().GetElementType())
AddTokenIL.MarkSequencePoint(doc3, 62, 1, 62, 100)
AddTokenIL.Emit(OpCodes.Ldarg_0)
AddTokenIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").MakeArrayType()
AddTokenIL.Emit(OpCodes.Stfld, Tokens)
AddTokenIL.MarkSequencePoint(doc3, 64, 1, 64, 100)
AddTokenIL.Emit(OpCodes.Ret)
Dim typ1(-1) As Type
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = GetType(System.Int32)
Dim RemToken As MethodBuilder = Expr.DefineMethod("RemToken", MethodAttributes.Public, GetType(System.Void), typ1)
Dim RemTokenIL As ILGenerator = RemToken.GetILGenerator()
Dim RemTokenparam01 As ParameterBuilder = RemToken.DefineParameter(1, ParameterAttributes.None, "ind")
RemTokenIL.MarkSequencePoint(doc3, 68, 1, 68, 100)
Dim locbldr5 As LocalBuilder = RemTokenIL.DeclareLocal(GetType(System.Int32))
locbldr5.SetLocalSymInfo("len")
RemTokenIL.Emit(OpCodes.Ldarg_0)
RemTokenIL.Emit(OpCodes.Ldfld, Tokens)
Typ = Tokens.FieldType
RemTokenIL.Emit(OpCodes.Ldlen)
RemTokenIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
RemTokenIL.Emit(OpCodes.Stloc, 0)
RemTokenIL.MarkSequencePoint(doc3, 69, 1, 69, 100)
Dim locbldr6 As LocalBuilder = RemTokenIL.DeclareLocal(GetType(System.Int32))
locbldr6.SetLocalSymInfo("destl")
RemTokenIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
RemTokenIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
RemTokenIL.Emit(OpCodes.Sub)
RemTokenIL.Emit(OpCodes.Stloc, 1)
RemTokenIL.MarkSequencePoint(doc3, 70, 1, 70, 100)
Dim locbldr7 As LocalBuilder = RemTokenIL.DeclareLocal(GetType(System.Int32))
locbldr7.SetLocalSymInfo("stopel")
RemTokenIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
RemTokenIL.Emit(OpCodes.Stloc, 2)
RemTokenIL.MarkSequencePoint(doc3, 71, 1, 71, 100)
Dim locbldr8 As LocalBuilder = RemTokenIL.DeclareLocal(GetType(System.Int32))
locbldr8.SetLocalSymInfo("i")
RemTokenIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
RemTokenIL.Emit(OpCodes.Stloc, 3)
RemTokenIL.MarkSequencePoint(doc3, 72, 1, 72, 100)
Dim locbldr9 As LocalBuilder = RemTokenIL.DeclareLocal(GetType(System.Int32))
locbldr9.SetLocalSymInfo("j")
RemTokenIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
RemTokenIL.Emit(OpCodes.Stloc, 4)
RemTokenIL.MarkSequencePoint(doc3, 74, 1, 74, 100)
Dim locbldr10 As LocalBuilder = RemTokenIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").MakeArrayType())
locbldr10.SetLocalSymInfo("destarr")
RemTokenIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
RemTokenIL.Emit(OpCodes.Conv_U)
RemTokenIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
RemTokenIL.Emit(OpCodes.Stloc, 5)
RemTokenIL.MarkSequencePoint(doc3, 76, 1, 76, 100)
Dim label2 As System.Reflection.Emit.Label = RemTokenIL.DefineLabel()
RemTokenIL.MarkSequencePoint(doc3, 77, 1, 77, 100)
Dim label3 As System.Reflection.Emit.Label = RemTokenIL.DefineLabel()
RemTokenIL.MarkSequencePoint(doc3, 79, 1, 79, 100)
RemTokenIL.MarkLabel(label2)
RemTokenIL.MarkSequencePoint(doc3, 81, 1, 81, 100)
RemTokenIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
RemTokenIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
RemTokenIL.Emit(OpCodes.Add)
RemTokenIL.Emit(OpCodes.Stloc, 3)
RemTokenIL.MarkSequencePoint(doc3, 83, 1, 83, 100)
RemTokenIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
RemTokenIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa4 As System.Reflection.Emit.Label = RemTokenIL.DefineLabel()
Dim tru4 As System.Reflection.Emit.Label = RemTokenIL.DefineLabel()
Dim cont4 As System.Reflection.Emit.Label = RemTokenIL.DefineLabel()
RemTokenIL.Emit(OpCodes.Bgt, tru4)
RemTokenIL.Emit(OpCodes.Br, fa4)
RemTokenIL.MarkLabel(tru4)
RemTokenIL.MarkSequencePoint(doc3, 85, 1, 85, 100)
RemTokenIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
RemTokenIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Int32)
Dim fa5 As System.Reflection.Emit.Label = RemTokenIL.DefineLabel()
Dim tru5 As System.Reflection.Emit.Label = RemTokenIL.DefineLabel()
Dim cont5 As System.Reflection.Emit.Label = RemTokenIL.DefineLabel()
RemTokenIL.Emit(OpCodes.Beq, fa5)
RemTokenIL.Emit(OpCodes.Br, tru5)
RemTokenIL.MarkLabel(tru5)
RemTokenIL.MarkSequencePoint(doc3, 86, 1, 86, 100)
RemTokenIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
RemTokenIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
RemTokenIL.Emit(OpCodes.Add)
RemTokenIL.Emit(OpCodes.Stloc, 4)
RemTokenIL.MarkSequencePoint(doc3, 87, 1, 87, 100)
RemTokenIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").MakeArrayType()
Typ02 = Typ
RemTokenIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
RemTokenIL.Emit(OpCodes.Conv_U)
Typ = Typ02
RemTokenIL.Emit(OpCodes.Ldarg_0)
RemTokenIL.Emit(OpCodes.Ldfld, Tokens)
Typ = Tokens.FieldType
Typ02 = Typ
RemTokenIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
RemTokenIL.Emit(OpCodes.Conv_U)
Typ = Typ02
RemTokenIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
RemTokenIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").MakeArrayType().GetElementType())
RemTokenIL.MarkSequencePoint(doc3, 88, 1, 88, 100)
RemTokenIL.Emit(OpCodes.Br, cont5)
RemTokenIL.MarkLabel(fa5)
RemTokenIL.Emit(OpCodes.Br, cont5)
RemTokenIL.MarkLabel(cont5)
RemTokenIL.MarkSequencePoint(doc3, 90, 1, 90, 100)
RemTokenIL.Emit(OpCodes.Br, cont4)
RemTokenIL.MarkLabel(fa4)
RemTokenIL.Emit(OpCodes.Br, cont4)
RemTokenIL.MarkLabel(cont4)
RemTokenIL.MarkSequencePoint(doc3, 92, 1, 92, 100)
RemTokenIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
RemTokenIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa6 As System.Reflection.Emit.Label = RemTokenIL.DefineLabel()
Dim tru6 As System.Reflection.Emit.Label = RemTokenIL.DefineLabel()
Dim cont6 As System.Reflection.Emit.Label = RemTokenIL.DefineLabel()
RemTokenIL.Emit(OpCodes.Beq, tru6)
RemTokenIL.Emit(OpCodes.Br, fa6)
RemTokenIL.MarkLabel(tru6)
RemTokenIL.MarkSequencePoint(doc3, 93, 1, 93, 100)
RemTokenIL.Emit(OpCodes.Br, label3)
RemTokenIL.MarkSequencePoint(doc3, 94, 1, 94, 100)
RemTokenIL.Emit(OpCodes.Br, cont6)
RemTokenIL.MarkLabel(fa6)
RemTokenIL.MarkSequencePoint(doc3, 95, 1, 95, 100)
RemTokenIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
RemTokenIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa7 As System.Reflection.Emit.Label = RemTokenIL.DefineLabel()
Dim tru7 As System.Reflection.Emit.Label = RemTokenIL.DefineLabel()
Dim cont7 As System.Reflection.Emit.Label = RemTokenIL.DefineLabel()
RemTokenIL.Emit(OpCodes.Beq, fa7)
RemTokenIL.Emit(OpCodes.Br, tru7)
RemTokenIL.MarkLabel(tru7)
RemTokenIL.MarkSequencePoint(doc3, 96, 1, 96, 100)
RemTokenIL.Emit(OpCodes.Br, label2)
RemTokenIL.MarkSequencePoint(doc3, 97, 1, 97, 100)
RemTokenIL.Emit(OpCodes.Br, cont7)
RemTokenIL.MarkLabel(fa7)
RemTokenIL.MarkSequencePoint(doc3, 98, 1, 98, 100)
RemTokenIL.Emit(OpCodes.Br, label3)
RemTokenIL.MarkSequencePoint(doc3, 99, 1, 99, 100)
RemTokenIL.Emit(OpCodes.Br, cont7)
RemTokenIL.MarkLabel(cont7)
RemTokenIL.MarkSequencePoint(doc3, 100, 1, 100, 100)
RemTokenIL.Emit(OpCodes.Br, cont6)
RemTokenIL.MarkLabel(cont6)
RemTokenIL.MarkSequencePoint(doc3, 102, 1, 102, 100)
RemTokenIL.MarkLabel(label3)
RemTokenIL.MarkSequencePoint(doc3, 104, 1, 104, 100)
RemTokenIL.Emit(OpCodes.Ldarg_0)
RemTokenIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").MakeArrayType()
RemTokenIL.Emit(OpCodes.Stfld, Tokens)
RemTokenIL.MarkSequencePoint(doc3, 106, 1, 106, 100)
RemTokenIL.Emit(OpCodes.Ret)
Expr.CreateType()
End Sub


Dim doc4 As ISymbolDocumentWriter

Sub Stmt()
Dim Stmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "Stmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim Tokens As FieldBuilder = Stmt.DefineField("Tokens", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").MakeArrayType(), FieldAttributes.Public)
Dim Line As FieldBuilder = Stmt.DefineField("Line", GetType(System.Int32), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = Stmt.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc4, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc4, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, Tokens)
ctor0IL.MarkSequencePoint(doc4, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, Line)
ctor0IL.MarkSequencePoint(doc4, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token")
Dim AddToken As MethodBuilder = Stmt.DefineMethod("AddToken", MethodAttributes.Public, GetType(System.Void), typ0)
Dim AddTokenIL As ILGenerator = AddToken.GetILGenerator()
Dim AddTokenparam01 As ParameterBuilder = AddToken.DefineParameter(1, ParameterAttributes.None, "toktoadd")
AddTokenIL.MarkSequencePoint(doc4, 22, 1, 22, 100)
Dim locbldr11 As LocalBuilder = AddTokenIL.DeclareLocal(GetType(System.Int32))
locbldr11.SetLocalSymInfo("len")
AddTokenIL.Emit(OpCodes.Ldarg_0)
AddTokenIL.Emit(OpCodes.Ldfld, Tokens)
Typ = Tokens.FieldType
AddTokenIL.Emit(OpCodes.Ldlen)
AddTokenIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddTokenIL.Emit(OpCodes.Stloc, 0)
AddTokenIL.MarkSequencePoint(doc4, 23, 1, 23, 100)
Dim locbldr12 As LocalBuilder = AddTokenIL.DeclareLocal(GetType(System.Int32))
locbldr12.SetLocalSymInfo("destl")
AddTokenIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddTokenIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddTokenIL.Emit(OpCodes.Add)
AddTokenIL.Emit(OpCodes.Stloc, 1)
AddTokenIL.MarkSequencePoint(doc4, 24, 1, 24, 100)
Dim locbldr13 As LocalBuilder = AddTokenIL.DeclareLocal(GetType(System.Int32))
locbldr13.SetLocalSymInfo("stopel")
AddTokenIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddTokenIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddTokenIL.Emit(OpCodes.Sub)
AddTokenIL.Emit(OpCodes.Stloc, 2)
AddTokenIL.MarkSequencePoint(doc4, 25, 1, 25, 100)
Dim locbldr14 As LocalBuilder = AddTokenIL.DeclareLocal(GetType(System.Int32))
locbldr14.SetLocalSymInfo("i")
AddTokenIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddTokenIL.Emit(OpCodes.Stloc, 3)
AddTokenIL.MarkSequencePoint(doc4, 27, 1, 27, 100)
Dim locbldr15 As LocalBuilder = AddTokenIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").MakeArrayType())
locbldr15.SetLocalSymInfo("destarr")
AddTokenIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddTokenIL.Emit(OpCodes.Conv_U)
AddTokenIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
AddTokenIL.Emit(OpCodes.Stloc, 4)
AddTokenIL.MarkSequencePoint(doc4, 29, 1, 29, 100)
Dim label0 As System.Reflection.Emit.Label = AddTokenIL.DefineLabel()
AddTokenIL.MarkSequencePoint(doc4, 30, 1, 30, 100)
Dim label1 As System.Reflection.Emit.Label = AddTokenIL.DefineLabel()
AddTokenIL.MarkSequencePoint(doc4, 32, 1, 32, 100)
AddTokenIL.MarkLabel(label0)
AddTokenIL.MarkSequencePoint(doc4, 34, 1, 34, 100)
AddTokenIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddTokenIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddTokenIL.Emit(OpCodes.Add)
AddTokenIL.Emit(OpCodes.Stloc, 3)
AddTokenIL.MarkSequencePoint(doc4, 36, 1, 36, 100)
AddTokenIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddTokenIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa8 As System.Reflection.Emit.Label = AddTokenIL.DefineLabel()
Dim tru8 As System.Reflection.Emit.Label = AddTokenIL.DefineLabel()
Dim cont8 As System.Reflection.Emit.Label = AddTokenIL.DefineLabel()
AddTokenIL.Emit(OpCodes.Bgt, tru8)
AddTokenIL.Emit(OpCodes.Br, fa8)
AddTokenIL.MarkLabel(tru8)
AddTokenIL.MarkSequencePoint(doc4, 38, 1, 38, 100)
AddTokenIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").MakeArrayType()
Typ02 = Typ
AddTokenIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddTokenIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddTokenIL.Emit(OpCodes.Ldarg_0)
AddTokenIL.Emit(OpCodes.Ldfld, Tokens)
Typ = Tokens.FieldType
Typ02 = Typ
AddTokenIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddTokenIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddTokenIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddTokenIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").MakeArrayType().GetElementType())
AddTokenIL.MarkSequencePoint(doc4, 40, 1, 40, 100)
AddTokenIL.Emit(OpCodes.Br, cont8)
AddTokenIL.MarkLabel(fa8)
AddTokenIL.Emit(OpCodes.Br, cont8)
AddTokenIL.MarkLabel(cont8)
AddTokenIL.MarkSequencePoint(doc4, 42, 1, 42, 100)
AddTokenIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddTokenIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa9 As System.Reflection.Emit.Label = AddTokenIL.DefineLabel()
Dim tru9 As System.Reflection.Emit.Label = AddTokenIL.DefineLabel()
Dim cont9 As System.Reflection.Emit.Label = AddTokenIL.DefineLabel()
AddTokenIL.Emit(OpCodes.Beq, tru9)
AddTokenIL.Emit(OpCodes.Br, fa9)
AddTokenIL.MarkLabel(tru9)
AddTokenIL.MarkSequencePoint(doc4, 43, 1, 43, 100)
AddTokenIL.Emit(OpCodes.Br, label1)
AddTokenIL.MarkSequencePoint(doc4, 44, 1, 44, 100)
AddTokenIL.Emit(OpCodes.Br, cont9)
AddTokenIL.MarkLabel(fa9)
AddTokenIL.MarkSequencePoint(doc4, 45, 1, 45, 100)
AddTokenIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddTokenIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa10 As System.Reflection.Emit.Label = AddTokenIL.DefineLabel()
Dim tru10 As System.Reflection.Emit.Label = AddTokenIL.DefineLabel()
Dim cont10 As System.Reflection.Emit.Label = AddTokenIL.DefineLabel()
AddTokenIL.Emit(OpCodes.Beq, fa10)
AddTokenIL.Emit(OpCodes.Br, tru10)
AddTokenIL.MarkLabel(tru10)
AddTokenIL.MarkSequencePoint(doc4, 46, 1, 46, 100)
AddTokenIL.Emit(OpCodes.Br, label0)
AddTokenIL.MarkSequencePoint(doc4, 47, 1, 47, 100)
AddTokenIL.Emit(OpCodes.Br, cont10)
AddTokenIL.MarkLabel(fa10)
AddTokenIL.MarkSequencePoint(doc4, 48, 1, 48, 100)
AddTokenIL.Emit(OpCodes.Br, label1)
AddTokenIL.MarkSequencePoint(doc4, 49, 1, 49, 100)
AddTokenIL.Emit(OpCodes.Br, cont10)
AddTokenIL.MarkLabel(cont10)
AddTokenIL.MarkSequencePoint(doc4, 50, 1, 50, 100)
AddTokenIL.Emit(OpCodes.Br, cont9)
AddTokenIL.MarkLabel(cont9)
AddTokenIL.MarkSequencePoint(doc4, 52, 1, 52, 100)
AddTokenIL.MarkLabel(label1)
AddTokenIL.MarkSequencePoint(doc4, 54, 1, 54, 100)
AddTokenIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").MakeArrayType()
Typ02 = Typ
AddTokenIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddTokenIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddTokenIL.Emit(OpCodes.Ldarg, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token")
AddTokenIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").MakeArrayType().GetElementType())
AddTokenIL.MarkSequencePoint(doc4, 56, 1, 56, 100)
AddTokenIL.Emit(OpCodes.Ldarg_0)
AddTokenIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").MakeArrayType()
AddTokenIL.Emit(OpCodes.Stfld, Tokens)
AddTokenIL.MarkSequencePoint(doc4, 58, 1, 58, 100)
AddTokenIL.Emit(OpCodes.Ret)
Stmt.CreateType()
End Sub

Sub StmtSet()
Dim StmtSet As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "StmtSet", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim Stmts As FieldBuilder = StmtSet.DefineField("Stmts", asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").MakeArrayType(), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = StmtSet.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc4, 67, 1, 67, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc4, 68, 1, 68, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
ctor0IL.Emit(OpCodes.Stfld, Stmts)
ctor0IL.MarkSequencePoint(doc4, 69, 1, 69, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt")
Dim AddStmt As MethodBuilder = StmtSet.DefineMethod("AddStmt", MethodAttributes.Public, GetType(System.Void), typ0)
Dim AddStmtIL As ILGenerator = AddStmt.GetILGenerator()
Dim AddStmtparam01 As ParameterBuilder = AddStmt.DefineParameter(1, ParameterAttributes.None, "stmttoadd")
AddStmtIL.MarkSequencePoint(doc4, 73, 1, 73, 100)
Dim locbldr16 As LocalBuilder = AddStmtIL.DeclareLocal(GetType(System.Int32))
locbldr16.SetLocalSymInfo("len")
AddStmtIL.Emit(OpCodes.Ldarg_0)
AddStmtIL.Emit(OpCodes.Ldfld, Stmts)
Typ = Stmts.FieldType
AddStmtIL.Emit(OpCodes.Ldlen)
AddStmtIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddStmtIL.Emit(OpCodes.Stloc, 0)
AddStmtIL.MarkSequencePoint(doc4, 74, 1, 74, 100)
Dim locbldr17 As LocalBuilder = AddStmtIL.DeclareLocal(GetType(System.Int32))
locbldr17.SetLocalSymInfo("destl")
AddStmtIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddStmtIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddStmtIL.Emit(OpCodes.Add)
AddStmtIL.Emit(OpCodes.Stloc, 1)
AddStmtIL.MarkSequencePoint(doc4, 75, 1, 75, 100)
Dim locbldr18 As LocalBuilder = AddStmtIL.DeclareLocal(GetType(System.Int32))
locbldr18.SetLocalSymInfo("stopel")
AddStmtIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddStmtIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddStmtIL.Emit(OpCodes.Sub)
AddStmtIL.Emit(OpCodes.Stloc, 2)
AddStmtIL.MarkSequencePoint(doc4, 76, 1, 76, 100)
Dim locbldr19 As LocalBuilder = AddStmtIL.DeclareLocal(GetType(System.Int32))
locbldr19.SetLocalSymInfo("i")
AddStmtIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddStmtIL.Emit(OpCodes.Stloc, 3)
AddStmtIL.MarkSequencePoint(doc4, 78, 1, 78, 100)
Dim locbldr20 As LocalBuilder = AddStmtIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").MakeArrayType())
locbldr20.SetLocalSymInfo("destarr")
AddStmtIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddStmtIL.Emit(OpCodes.Conv_U)
AddStmtIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
AddStmtIL.Emit(OpCodes.Stloc, 4)
AddStmtIL.MarkSequencePoint(doc4, 80, 1, 80, 100)
Dim label0 As System.Reflection.Emit.Label = AddStmtIL.DefineLabel()
AddStmtIL.MarkSequencePoint(doc4, 81, 1, 81, 100)
Dim label1 As System.Reflection.Emit.Label = AddStmtIL.DefineLabel()
AddStmtIL.MarkSequencePoint(doc4, 83, 1, 83, 100)
AddStmtIL.MarkLabel(label0)
AddStmtIL.MarkSequencePoint(doc4, 85, 1, 85, 100)
AddStmtIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddStmtIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddStmtIL.Emit(OpCodes.Add)
AddStmtIL.Emit(OpCodes.Stloc, 3)
AddStmtIL.MarkSequencePoint(doc4, 87, 1, 87, 100)
AddStmtIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddStmtIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa11 As System.Reflection.Emit.Label = AddStmtIL.DefineLabel()
Dim tru11 As System.Reflection.Emit.Label = AddStmtIL.DefineLabel()
Dim cont11 As System.Reflection.Emit.Label = AddStmtIL.DefineLabel()
AddStmtIL.Emit(OpCodes.Bgt, tru11)
AddStmtIL.Emit(OpCodes.Br, fa11)
AddStmtIL.MarkLabel(tru11)
AddStmtIL.MarkSequencePoint(doc4, 89, 1, 89, 100)
AddStmtIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").MakeArrayType()
Typ02 = Typ
AddStmtIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddStmtIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddStmtIL.Emit(OpCodes.Ldarg_0)
AddStmtIL.Emit(OpCodes.Ldfld, Stmts)
Typ = Stmts.FieldType
Typ02 = Typ
AddStmtIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddStmtIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddStmtIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddStmtIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").MakeArrayType().GetElementType())
AddStmtIL.MarkSequencePoint(doc4, 91, 1, 91, 100)
AddStmtIL.Emit(OpCodes.Br, cont11)
AddStmtIL.MarkLabel(fa11)
AddStmtIL.Emit(OpCodes.Br, cont11)
AddStmtIL.MarkLabel(cont11)
AddStmtIL.MarkSequencePoint(doc4, 93, 1, 93, 100)
AddStmtIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddStmtIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa12 As System.Reflection.Emit.Label = AddStmtIL.DefineLabel()
Dim tru12 As System.Reflection.Emit.Label = AddStmtIL.DefineLabel()
Dim cont12 As System.Reflection.Emit.Label = AddStmtIL.DefineLabel()
AddStmtIL.Emit(OpCodes.Beq, tru12)
AddStmtIL.Emit(OpCodes.Br, fa12)
AddStmtIL.MarkLabel(tru12)
AddStmtIL.MarkSequencePoint(doc4, 94, 1, 94, 100)
AddStmtIL.Emit(OpCodes.Br, label1)
AddStmtIL.MarkSequencePoint(doc4, 95, 1, 95, 100)
AddStmtIL.Emit(OpCodes.Br, cont12)
AddStmtIL.MarkLabel(fa12)
AddStmtIL.MarkSequencePoint(doc4, 96, 1, 96, 100)
AddStmtIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddStmtIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa13 As System.Reflection.Emit.Label = AddStmtIL.DefineLabel()
Dim tru13 As System.Reflection.Emit.Label = AddStmtIL.DefineLabel()
Dim cont13 As System.Reflection.Emit.Label = AddStmtIL.DefineLabel()
AddStmtIL.Emit(OpCodes.Beq, fa13)
AddStmtIL.Emit(OpCodes.Br, tru13)
AddStmtIL.MarkLabel(tru13)
AddStmtIL.MarkSequencePoint(doc4, 97, 1, 97, 100)
AddStmtIL.Emit(OpCodes.Br, label0)
AddStmtIL.MarkSequencePoint(doc4, 98, 1, 98, 100)
AddStmtIL.Emit(OpCodes.Br, cont13)
AddStmtIL.MarkLabel(fa13)
AddStmtIL.MarkSequencePoint(doc4, 99, 1, 99, 100)
AddStmtIL.Emit(OpCodes.Br, label1)
AddStmtIL.MarkSequencePoint(doc4, 100, 1, 100, 100)
AddStmtIL.Emit(OpCodes.Br, cont13)
AddStmtIL.MarkLabel(cont13)
AddStmtIL.MarkSequencePoint(doc4, 101, 1, 101, 100)
AddStmtIL.Emit(OpCodes.Br, cont12)
AddStmtIL.MarkLabel(cont12)
AddStmtIL.MarkSequencePoint(doc4, 103, 1, 103, 100)
AddStmtIL.MarkLabel(label1)
AddStmtIL.MarkSequencePoint(doc4, 105, 1, 105, 100)
AddStmtIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").MakeArrayType()
Typ02 = Typ
AddStmtIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddStmtIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddStmtIL.Emit(OpCodes.Ldarg, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt")
AddStmtIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").MakeArrayType().GetElementType())
AddStmtIL.MarkSequencePoint(doc4, 107, 1, 107, 100)
AddStmtIL.Emit(OpCodes.Ldarg_0)
AddStmtIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").MakeArrayType()
AddStmtIL.Emit(OpCodes.Stfld, Stmts)
AddStmtIL.MarkSequencePoint(doc4, 109, 1, 109, 100)
AddStmtIL.Emit(OpCodes.Ret)
StmtSet.CreateType()
End Sub


Dim doc5 As ISymbolDocumentWriter

Sub Op()
Dim Op As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Ops" & "." & "Op", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
Dim PrecNo As FieldBuilder = Op.DefineField("PrecNo", GetType(System.Int32), FieldAttributes.Public)
Dim LChild As FieldBuilder = Op.DefineField("LChild", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"), FieldAttributes.Public)
Dim RChild As FieldBuilder = Op.DefineField("RChild", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = Op.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc5, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc5, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, PrecNo)
ctor0IL.MarkSequencePoint(doc5, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, LChild)
ctor0IL.MarkSequencePoint(doc5, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, RChild)
ctor0IL.MarkSequencePoint(doc5, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ret)
Op.CreateType()
End Sub

Sub AssignOp()
Dim AssignOp As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Ops" & "." & "AssignOp", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.Op"))
Dim ctor0 As ConstructorBuilder = AssignOp.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc5, 28, 1, 28, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.Op").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc5, 29, 1, 29, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.Op").GetField("PrecNo"))
ctor0IL.MarkSequencePoint(doc5, 30, 1, 30, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.Op").GetField("LChild"))
ctor0IL.MarkSequencePoint(doc5, 31, 1, 31, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.Op").GetField("RChild"))
ctor0IL.MarkSequencePoint(doc5, 32, 1, 32, 100)
ctor0IL.Emit(OpCodes.Ret)
AssignOp.CreateType()
End Sub


Dim doc6 As ISymbolDocumentWriter

Sub AritOp()
Dim AritOp As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Ops" & "." & "AritOp", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.Op"))
AritOp.CreateType()
End Sub

Sub AddOp()
Dim AddOp As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Ops" & "." & "AddOp", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp"))
Dim ctor0 As ConstructorBuilder = AddOp.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc6, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc6, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(11))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp").GetField("PrecNo"))
ctor0IL.MarkSequencePoint(doc6, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp").GetField("LChild"))
ctor0IL.MarkSequencePoint(doc6, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp").GetField("RChild"))
ctor0IL.MarkSequencePoint(doc6, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ret)
AddOp.CreateType()
End Sub

Sub MulOp()
Dim MulOp As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Ops" & "." & "MulOp", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp"))
Dim ctor0 As ConstructorBuilder = MulOp.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc6, 28, 1, 28, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc6, 29, 1, 29, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(12))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp").GetField("PrecNo"))
ctor0IL.MarkSequencePoint(doc6, 30, 1, 30, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp").GetField("LChild"))
ctor0IL.MarkSequencePoint(doc6, 31, 1, 31, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp").GetField("RChild"))
ctor0IL.MarkSequencePoint(doc6, 32, 1, 32, 100)
ctor0IL.Emit(OpCodes.Ret)
MulOp.CreateType()
End Sub

Sub SubOp()
Dim SubOp As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Ops" & "." & "SubOp", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp"))
Dim ctor0 As ConstructorBuilder = SubOp.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc6, 40, 1, 40, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc6, 41, 1, 41, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(11))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp").GetField("PrecNo"))
ctor0IL.MarkSequencePoint(doc6, 42, 1, 42, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp").GetField("LChild"))
ctor0IL.MarkSequencePoint(doc6, 43, 1, 43, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp").GetField("RChild"))
ctor0IL.MarkSequencePoint(doc6, 44, 1, 44, 100)
ctor0IL.Emit(OpCodes.Ret)
SubOp.CreateType()
End Sub

Sub DivOp()
Dim DivOp As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Ops" & "." & "DivOp", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp"))
Dim ctor0 As ConstructorBuilder = DivOp.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc6, 53, 1, 53, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc6, 54, 1, 54, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(12))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp").GetField("PrecNo"))
ctor0IL.MarkSequencePoint(doc6, 55, 1, 55, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp").GetField("LChild"))
ctor0IL.MarkSequencePoint(doc6, 56, 1, 56, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp").GetField("RChild"))
ctor0IL.MarkSequencePoint(doc6, 57, 1, 57, 100)
ctor0IL.Emit(OpCodes.Ret)
DivOp.CreateType()
End Sub

Sub ModOp()
Dim ModOp As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Ops" & "." & "ModOp", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp"))
Dim ctor0 As ConstructorBuilder = ModOp.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc6, 65, 1, 65, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc6, 66, 1, 66, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(12))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp").GetField("PrecNo"))
ctor0IL.MarkSequencePoint(doc6, 67, 1, 67, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp").GetField("LChild"))
ctor0IL.MarkSequencePoint(doc6, 68, 1, 68, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp").GetField("RChild"))
ctor0IL.MarkSequencePoint(doc6, 69, 1, 69, 100)
ctor0IL.Emit(OpCodes.Ret)
ModOp.CreateType()
End Sub

Sub IncOp()
Dim IncOp As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Ops" & "." & "IncOp", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp"))
Dim ctor0 As ConstructorBuilder = IncOp.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc6, 77, 1, 77, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc6, 78, 1, 78, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(13))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp").GetField("PrecNo"))
ctor0IL.MarkSequencePoint(doc6, 79, 1, 79, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp").GetField("LChild"))
ctor0IL.MarkSequencePoint(doc6, 80, 1, 80, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp").GetField("RChild"))
ctor0IL.MarkSequencePoint(doc6, 81, 1, 81, 100)
ctor0IL.Emit(OpCodes.Ret)
IncOp.CreateType()
End Sub

Sub DecOp()
Dim DecOp As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Ops" & "." & "DecOp", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp"))
Dim ctor0 As ConstructorBuilder = DecOp.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc6, 89, 1, 89, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc6, 90, 1, 90, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(13))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp").GetField("PrecNo"))
ctor0IL.MarkSequencePoint(doc6, 91, 1, 91, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp").GetField("LChild"))
ctor0IL.MarkSequencePoint(doc6, 92, 1, 92, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp").GetField("RChild"))
ctor0IL.MarkSequencePoint(doc6, 93, 1, 93, 100)
ctor0IL.Emit(OpCodes.Ret)
DecOp.CreateType()
End Sub

Sub ShlOp()
Dim ShlOp As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Ops" & "." & "ShlOp", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp"))
Dim ctor0 As ConstructorBuilder = ShlOp.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc6, 101, 1, 101, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc6, 102, 1, 102, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(10))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp").GetField("PrecNo"))
ctor0IL.MarkSequencePoint(doc6, 103, 1, 103, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp").GetField("LChild"))
ctor0IL.MarkSequencePoint(doc6, 104, 1, 104, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp").GetField("RChild"))
ctor0IL.MarkSequencePoint(doc6, 105, 1, 105, 100)
ctor0IL.Emit(OpCodes.Ret)
ShlOp.CreateType()
End Sub

Sub ShrOp()
Dim ShrOp As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Ops" & "." & "ShrOp", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp"))
Dim ctor0 As ConstructorBuilder = ShrOp.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc6, 113, 1, 113, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc6, 114, 1, 114, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(10))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp").GetField("PrecNo"))
ctor0IL.MarkSequencePoint(doc6, 115, 1, 115, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp").GetField("LChild"))
ctor0IL.MarkSequencePoint(doc6, 116, 1, 116, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp").GetField("RChild"))
ctor0IL.MarkSequencePoint(doc6, 117, 1, 117, 100)
ctor0IL.Emit(OpCodes.Ret)
ShrOp.CreateType()
End Sub


Dim doc7 As ISymbolDocumentWriter

Sub LogicalOp()
Dim LogicalOp As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Ops" & "." & "LogicalOp", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.Op"))
LogicalOp.CreateType()
End Sub

Sub AndOp()
Dim AndOp As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Ops" & "." & "AndOp", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp"))
Dim ctor0 As ConstructorBuilder = AndOp.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc7, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc7, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(7))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp").GetField("PrecNo"))
ctor0IL.MarkSequencePoint(doc7, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp").GetField("LChild"))
ctor0IL.MarkSequencePoint(doc7, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp").GetField("RChild"))
ctor0IL.MarkSequencePoint(doc7, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ret)
AndOp.CreateType()
End Sub

Sub OrOp()
Dim OrOp As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Ops" & "." & "OrOp", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp"))
Dim ctor0 As ConstructorBuilder = OrOp.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc7, 27, 1, 27, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc7, 28, 1, 28, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(5))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp").GetField("PrecNo"))
ctor0IL.MarkSequencePoint(doc7, 29, 1, 29, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp").GetField("LChild"))
ctor0IL.MarkSequencePoint(doc7, 30, 1, 30, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp").GetField("RChild"))
ctor0IL.MarkSequencePoint(doc7, 31, 1, 31, 100)
ctor0IL.Emit(OpCodes.Ret)
OrOp.CreateType()
End Sub

Sub NandOp()
Dim NandOp As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Ops" & "." & "NandOp", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp"))
Dim ctor0 As ConstructorBuilder = NandOp.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc7, 38, 1, 38, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc7, 39, 1, 39, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(7))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp").GetField("PrecNo"))
ctor0IL.MarkSequencePoint(doc7, 40, 1, 40, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp").GetField("LChild"))
ctor0IL.MarkSequencePoint(doc7, 41, 1, 41, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp").GetField("RChild"))
ctor0IL.MarkSequencePoint(doc7, 42, 1, 42, 100)
ctor0IL.Emit(OpCodes.Ret)
NandOp.CreateType()
End Sub

Sub NorOp()
Dim NorOp As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Ops" & "." & "NorOp", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp"))
Dim ctor0 As ConstructorBuilder = NorOp.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc7, 49, 1, 49, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc7, 50, 1, 50, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(5))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp").GetField("PrecNo"))
ctor0IL.MarkSequencePoint(doc7, 51, 1, 51, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp").GetField("LChild"))
ctor0IL.MarkSequencePoint(doc7, 52, 1, 52, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp").GetField("RChild"))
ctor0IL.MarkSequencePoint(doc7, 53, 1, 53, 100)
ctor0IL.Emit(OpCodes.Ret)
NorOp.CreateType()
End Sub

Sub XorOp()
Dim XorOp As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Ops" & "." & "XorOp", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp"))
Dim ctor0 As ConstructorBuilder = XorOp.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc7, 60, 1, 60, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc7, 61, 1, 61, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(6))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp").GetField("PrecNo"))
ctor0IL.MarkSequencePoint(doc7, 62, 1, 62, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp").GetField("LChild"))
ctor0IL.MarkSequencePoint(doc7, 63, 1, 63, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp").GetField("RChild"))
ctor0IL.MarkSequencePoint(doc7, 64, 1, 64, 100)
ctor0IL.Emit(OpCodes.Ret)
XorOp.CreateType()
End Sub

Sub XnorOp()
Dim XnorOp As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Ops" & "." & "XnorOp", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp"))
Dim ctor0 As ConstructorBuilder = XnorOp.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc7, 71, 1, 71, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc7, 72, 1, 72, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(6))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp").GetField("PrecNo"))
ctor0IL.MarkSequencePoint(doc7, 73, 1, 73, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp").GetField("LChild"))
ctor0IL.MarkSequencePoint(doc7, 74, 1, 74, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp").GetField("RChild"))
ctor0IL.MarkSequencePoint(doc7, 75, 1, 75, 100)
ctor0IL.Emit(OpCodes.Ret)
XnorOp.CreateType()
End Sub

Sub NotOp()
Dim NotOp As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Ops" & "." & "NotOp", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp"))
Dim ctor0 As ConstructorBuilder = NotOp.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc7, 82, 1, 82, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc7, 83, 1, 83, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(13))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp").GetField("PrecNo"))
ctor0IL.MarkSequencePoint(doc7, 84, 1, 84, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp").GetField("LChild"))
ctor0IL.MarkSequencePoint(doc7, 85, 1, 85, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp").GetField("RChild"))
ctor0IL.MarkSequencePoint(doc7, 86, 1, 86, 100)
ctor0IL.Emit(OpCodes.Ret)
NotOp.CreateType()
End Sub

Sub NegOp()
Dim NegOp As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Ops" & "." & "NegOp", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp"))
Dim ctor0 As ConstructorBuilder = NegOp.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc7, 93, 1, 93, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc7, 94, 1, 94, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(13))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp").GetField("PrecNo"))
ctor0IL.MarkSequencePoint(doc7, 95, 1, 95, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp").GetField("LChild"))
ctor0IL.MarkSequencePoint(doc7, 96, 1, 96, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp").GetField("RChild"))
ctor0IL.MarkSequencePoint(doc7, 97, 1, 97, 100)
ctor0IL.Emit(OpCodes.Ret)
NegOp.CreateType()
End Sub


Dim doc8 As ISymbolDocumentWriter

Sub TypeTok()
Dim TypeTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.TypeToks" & "." & "TypeTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
Dim IsArray As FieldBuilder = TypeTok.DefineField("IsArray", GetType(System.Boolean), FieldAttributes.Public)
Dim IsByRef As FieldBuilder = TypeTok.DefineField("IsByRef", GetType(System.Boolean), FieldAttributes.Public)
Dim RefTyp As FieldBuilder = TypeTok.DefineField("RefTyp", GetType(Type), FieldAttributes.Public)
Dim OrdOp As FieldBuilder = TypeTok.DefineField("OrdOp", GetType(System.String), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = TypeTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc8, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc8, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetField("Value"))
ctor0IL.MarkSequencePoint(doc8, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetField("Line"))
ctor0IL.MarkSequencePoint(doc8, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, IsArray)
ctor0IL.MarkSequencePoint(doc8, 21, 1, 21, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, IsByRef)
ctor0IL.MarkSequencePoint(doc8, 22, 1, 22, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, RefTyp)
ctor0IL.MarkSequencePoint(doc8, 23, 1, 23, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, OrdOp)
ctor0IL.MarkSequencePoint(doc8, 24, 1, 24, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = TypeTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc8, 27, 1, 27, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc8, 28, 1, 28, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetField("Value"))
ctor1IL.MarkSequencePoint(doc8, 29, 1, 29, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetField("Line"))
ctor1IL.MarkSequencePoint(doc8, 30, 1, 30, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, IsArray)
ctor1IL.MarkSequencePoint(doc8, 31, 1, 31, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, IsByRef)
ctor1IL.MarkSequencePoint(doc8, 32, 1, 32, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldnull)
ctor1IL.Emit(OpCodes.Stfld, RefTyp)
ctor1IL.MarkSequencePoint(doc8, 33, 1, 33, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, OrdOp)
ctor1IL.MarkSequencePoint(doc8, 34, 1, 34, 100)
ctor1IL.Emit(OpCodes.Ret)
TypeTok.CreateType()
End Sub

Sub GenericTypeTok()
Dim GenericTypeTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.TypeToks" & "." & "GenericTypeTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"))
Dim Params As FieldBuilder = GenericTypeTok.DefineField("Params", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").MakeArrayType(), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = GenericTypeTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc8, 43, 1, 43, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc8, 44, 1, 44, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Value"))
ctor0IL.MarkSequencePoint(doc8, 45, 1, 45, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Line"))
ctor0IL.MarkSequencePoint(doc8, 46, 1, 46, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsArray"))
ctor0IL.MarkSequencePoint(doc8, 47, 1, 47, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsByRef"))
ctor0IL.MarkSequencePoint(doc8, 48, 1, 48, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("RefTyp"))
ctor0IL.MarkSequencePoint(doc8, 49, 1, 49, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("OrdOp"))
ctor0IL.MarkSequencePoint(doc8, 50, 1, 50, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"))
ctor0IL.Emit(OpCodes.Stfld, Params)
ctor0IL.MarkSequencePoint(doc8, 51, 1, 51, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = GenericTypeTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc8, 54, 1, 54, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc8, 55, 1, 55, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Value"))
ctor1IL.MarkSequencePoint(doc8, 56, 1, 56, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Line"))
ctor1IL.MarkSequencePoint(doc8, 57, 1, 57, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsArray"))
ctor1IL.MarkSequencePoint(doc8, 58, 1, 58, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsByRef"))
ctor1IL.MarkSequencePoint(doc8, 59, 1, 59, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldnull)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("RefTyp"))
ctor1IL.MarkSequencePoint(doc8, 60, 1, 60, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("OrdOp"))
ctor1IL.MarkSequencePoint(doc8, 61, 1, 61, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Conv_U)
ctor1IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"))
ctor1IL.Emit(OpCodes.Stfld, Params)
ctor1IL.MarkSequencePoint(doc8, 62, 1, 62, 100)
ctor1IL.Emit(OpCodes.Ret)
Dim typ1(-1) As Type
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok")
Dim AddParam As MethodBuilder = GenericTypeTok.DefineMethod("AddParam", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ1)
Dim AddParamIL As ILGenerator = AddParam.GetILGenerator()
Dim AddParamparam01 As ParameterBuilder = AddParam.DefineParameter(1, ParameterAttributes.None, "param")
AddParamIL.MarkSequencePoint(doc8, 66, 1, 66, 100)
Dim locbldr21 As LocalBuilder = AddParamIL.DeclareLocal(GetType(System.Int32))
locbldr21.SetLocalSymInfo("len")
AddParamIL.Emit(OpCodes.Ldarg_0)
AddParamIL.Emit(OpCodes.Ldfld, Params)
Typ = Params.FieldType
AddParamIL.Emit(OpCodes.Ldlen)
AddParamIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Stloc, 0)
AddParamIL.MarkSequencePoint(doc8, 67, 1, 67, 100)
Dim locbldr22 As LocalBuilder = AddParamIL.DeclareLocal(GetType(System.Int32))
locbldr22.SetLocalSymInfo("destl")
AddParamIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Add)
AddParamIL.Emit(OpCodes.Stloc, 1)
AddParamIL.MarkSequencePoint(doc8, 68, 1, 68, 100)
Dim locbldr23 As LocalBuilder = AddParamIL.DeclareLocal(GetType(System.Int32))
locbldr23.SetLocalSymInfo("stopel")
AddParamIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Sub)
AddParamIL.Emit(OpCodes.Stloc, 2)
AddParamIL.MarkSequencePoint(doc8, 69, 1, 69, 100)
Dim locbldr24 As LocalBuilder = AddParamIL.DeclareLocal(GetType(System.Int32))
locbldr24.SetLocalSymInfo("i")
AddParamIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Stloc, 3)
AddParamIL.MarkSequencePoint(doc8, 71, 1, 71, 100)
Dim locbldr25 As LocalBuilder = AddParamIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").MakeArrayType())
locbldr25.SetLocalSymInfo("destarr")
AddParamIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Conv_U)
AddParamIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"))
AddParamIL.Emit(OpCodes.Stloc, 4)
AddParamIL.MarkSequencePoint(doc8, 73, 1, 73, 100)
Dim label0 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
AddParamIL.MarkSequencePoint(doc8, 74, 1, 74, 100)
Dim label1 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
AddParamIL.MarkSequencePoint(doc8, 76, 1, 76, 100)
AddParamIL.MarkLabel(label0)
AddParamIL.MarkSequencePoint(doc8, 78, 1, 78, 100)
AddParamIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Add)
AddParamIL.Emit(OpCodes.Stloc, 3)
AddParamIL.MarkSequencePoint(doc8, 80, 1, 80, 100)
AddParamIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa14 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
Dim tru14 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
Dim cont14 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
AddParamIL.Emit(OpCodes.Bgt, tru14)
AddParamIL.Emit(OpCodes.Br, fa14)
AddParamIL.MarkLabel(tru14)
AddParamIL.MarkSequencePoint(doc8, 82, 1, 82, 100)
AddParamIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").MakeArrayType()
Typ02 = Typ
AddParamIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddParamIL.Emit(OpCodes.Ldarg_0)
AddParamIL.Emit(OpCodes.Ldfld, Params)
Typ = Params.FieldType
Typ02 = Typ
AddParamIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddParamIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddParamIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").MakeArrayType().GetElementType())
AddParamIL.MarkSequencePoint(doc8, 84, 1, 84, 100)
AddParamIL.Emit(OpCodes.Br, cont14)
AddParamIL.MarkLabel(fa14)
AddParamIL.Emit(OpCodes.Br, cont14)
AddParamIL.MarkLabel(cont14)
AddParamIL.MarkSequencePoint(doc8, 86, 1, 86, 100)
AddParamIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa15 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
Dim tru15 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
Dim cont15 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
AddParamIL.Emit(OpCodes.Beq, tru15)
AddParamIL.Emit(OpCodes.Br, fa15)
AddParamIL.MarkLabel(tru15)
AddParamIL.MarkSequencePoint(doc8, 87, 1, 87, 100)
AddParamIL.Emit(OpCodes.Br, label1)
AddParamIL.MarkSequencePoint(doc8, 88, 1, 88, 100)
AddParamIL.Emit(OpCodes.Br, cont15)
AddParamIL.MarkLabel(fa15)
AddParamIL.MarkSequencePoint(doc8, 89, 1, 89, 100)
AddParamIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa16 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
Dim tru16 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
Dim cont16 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
AddParamIL.Emit(OpCodes.Beq, fa16)
AddParamIL.Emit(OpCodes.Br, tru16)
AddParamIL.MarkLabel(tru16)
AddParamIL.MarkSequencePoint(doc8, 90, 1, 90, 100)
AddParamIL.Emit(OpCodes.Br, label0)
AddParamIL.MarkSequencePoint(doc8, 91, 1, 91, 100)
AddParamIL.Emit(OpCodes.Br, cont16)
AddParamIL.MarkLabel(fa16)
AddParamIL.MarkSequencePoint(doc8, 92, 1, 92, 100)
AddParamIL.Emit(OpCodes.Br, label1)
AddParamIL.MarkSequencePoint(doc8, 93, 1, 93, 100)
AddParamIL.Emit(OpCodes.Br, cont16)
AddParamIL.MarkLabel(cont16)
AddParamIL.MarkSequencePoint(doc8, 94, 1, 94, 100)
AddParamIL.Emit(OpCodes.Br, cont15)
AddParamIL.MarkLabel(cont15)
AddParamIL.MarkSequencePoint(doc8, 96, 1, 96, 100)
AddParamIL.MarkLabel(label1)
AddParamIL.MarkSequencePoint(doc8, 98, 1, 98, 100)
AddParamIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").MakeArrayType()
Typ02 = Typ
AddParamIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddParamIL.Emit(OpCodes.Ldarg, 0)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok")
AddParamIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").MakeArrayType().GetElementType())
AddParamIL.MarkSequencePoint(doc8, 100, 1, 100, 100)
AddParamIL.Emit(OpCodes.Ldarg_0)
AddParamIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").MakeArrayType()
AddParamIL.Emit(OpCodes.Stfld, Params)
AddParamIL.MarkSequencePoint(doc8, 102, 1, 102, 100)
AddParamIL.Emit(OpCodes.Ret)
GenericTypeTok.CreateType()
End Sub

Sub StringTok()
Dim StringTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.TypeToks" & "." & "StringTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"))
Dim ctor0 As ConstructorBuilder = StringTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc8, 110, 1, 110, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc8, 111, 1, 111, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Value"))
ctor0IL.MarkSequencePoint(doc8, 112, 1, 112, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Line"))
ctor0IL.MarkSequencePoint(doc8, 113, 1, 113, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsArray"))
ctor0IL.MarkSequencePoint(doc8, 114, 1, 114, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsByRef"))
ctor0IL.MarkSequencePoint(doc8, 115, 1, 115, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldtoken, GetType(System.String))
Dim typ0 As Type() = {GetType(System.RuntimeTypeHandle)}
ctor0IL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ0))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ0).ReturnType
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("RefTyp"))
ctor0IL.MarkSequencePoint(doc8, 116, 1, 116, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("OrdOp"))
ctor0IL.MarkSequencePoint(doc8, 117, 1, 117, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ1(-1) As Type
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = StringTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ1)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc8, 120, 1, 120, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc8, 121, 1, 121, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Value"))
ctor1IL.MarkSequencePoint(doc8, 122, 1, 122, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Line"))
ctor1IL.MarkSequencePoint(doc8, 123, 1, 123, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsArray"))
ctor1IL.MarkSequencePoint(doc8, 124, 1, 124, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsByRef"))
ctor1IL.MarkSequencePoint(doc8, 125, 1, 125, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldtoken, GetType(System.String))
Dim typ2 As Type() = {GetType(System.RuntimeTypeHandle)}
ctor1IL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ2))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ2).ReturnType
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("RefTyp"))
ctor1IL.MarkSequencePoint(doc8, 126, 1, 126, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("OrdOp"))
ctor1IL.MarkSequencePoint(doc8, 127, 1, 127, 100)
ctor1IL.Emit(OpCodes.Ret)
StringTok.CreateType()
End Sub

Sub IntegerTok()
Dim IntegerTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.TypeToks" & "." & "IntegerTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"))
Dim ctor0 As ConstructorBuilder = IntegerTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc8, 134, 1, 134, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc8, 135, 1, 135, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Value"))
ctor0IL.MarkSequencePoint(doc8, 136, 1, 136, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Line"))
ctor0IL.MarkSequencePoint(doc8, 137, 1, 137, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsArray"))
ctor0IL.MarkSequencePoint(doc8, 138, 1, 138, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsByRef"))
ctor0IL.MarkSequencePoint(doc8, 139, 1, 139, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldtoken, GetType(System.Int32))
Dim typ0 As Type() = {GetType(System.RuntimeTypeHandle)}
ctor0IL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ0))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ0).ReturnType
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("RefTyp"))
ctor0IL.MarkSequencePoint(doc8, 140, 1, 140, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("OrdOp"))
ctor0IL.MarkSequencePoint(doc8, 141, 1, 141, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ1(-1) As Type
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = IntegerTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ1)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc8, 144, 1, 144, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc8, 145, 1, 145, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Value"))
ctor1IL.MarkSequencePoint(doc8, 146, 1, 146, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Line"))
ctor1IL.MarkSequencePoint(doc8, 147, 1, 147, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsArray"))
ctor1IL.MarkSequencePoint(doc8, 148, 1, 148, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsByRef"))
ctor1IL.MarkSequencePoint(doc8, 149, 1, 149, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldtoken, GetType(System.Int32))
Dim typ2 As Type() = {GetType(System.RuntimeTypeHandle)}
ctor1IL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ2))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ2).ReturnType
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("RefTyp"))
ctor1IL.MarkSequencePoint(doc8, 150, 1, 150, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("OrdOp"))
ctor1IL.MarkSequencePoint(doc8, 151, 1, 151, 100)
ctor1IL.Emit(OpCodes.Ret)
IntegerTok.CreateType()
End Sub

Sub DoubleTok()
Dim DoubleTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.TypeToks" & "." & "DoubleTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"))
Dim ctor0 As ConstructorBuilder = DoubleTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc8, 158, 1, 158, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc8, 159, 1, 159, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Value"))
ctor0IL.MarkSequencePoint(doc8, 160, 1, 160, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Line"))
ctor0IL.MarkSequencePoint(doc8, 161, 1, 161, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsArray"))
ctor0IL.MarkSequencePoint(doc8, 162, 1, 162, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsByRef"))
ctor0IL.MarkSequencePoint(doc8, 163, 1, 163, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldtoken, GetType(System.Double))
Dim typ0 As Type() = {GetType(System.RuntimeTypeHandle)}
ctor0IL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ0))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ0).ReturnType
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("RefTyp"))
ctor0IL.MarkSequencePoint(doc8, 164, 1, 164, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("OrdOp"))
ctor0IL.MarkSequencePoint(doc8, 165, 1, 165, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ1(-1) As Type
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = DoubleTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ1)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc8, 168, 1, 168, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc8, 169, 1, 169, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Value"))
ctor1IL.MarkSequencePoint(doc8, 170, 1, 170, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Line"))
ctor1IL.MarkSequencePoint(doc8, 171, 1, 171, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsArray"))
ctor1IL.MarkSequencePoint(doc8, 172, 1, 172, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsByRef"))
ctor1IL.MarkSequencePoint(doc8, 173, 1, 173, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldtoken, GetType(System.Double))
Dim typ2 As Type() = {GetType(System.RuntimeTypeHandle)}
ctor1IL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ2))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ2).ReturnType
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("RefTyp"))
ctor1IL.MarkSequencePoint(doc8, 174, 1, 174, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("OrdOp"))
ctor1IL.MarkSequencePoint(doc8, 175, 1, 175, 100)
ctor1IL.Emit(OpCodes.Ret)
DoubleTok.CreateType()
End Sub

Sub BooleanTok()
Dim BooleanTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.TypeToks" & "." & "BooleanTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"))
Dim ctor0 As ConstructorBuilder = BooleanTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc8, 182, 1, 182, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc8, 183, 1, 183, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Value"))
ctor0IL.MarkSequencePoint(doc8, 184, 1, 184, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Line"))
ctor0IL.MarkSequencePoint(doc8, 185, 1, 185, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsArray"))
ctor0IL.MarkSequencePoint(doc8, 186, 1, 186, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsByRef"))
ctor0IL.MarkSequencePoint(doc8, 187, 1, 187, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldtoken, GetType(System.Boolean))
Dim typ0 As Type() = {GetType(System.RuntimeTypeHandle)}
ctor0IL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ0))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ0).ReturnType
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("RefTyp"))
ctor0IL.MarkSequencePoint(doc8, 188, 1, 188, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("OrdOp"))
ctor0IL.MarkSequencePoint(doc8, 189, 1, 189, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ1(-1) As Type
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = BooleanTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ1)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc8, 192, 1, 192, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc8, 193, 1, 193, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Value"))
ctor1IL.MarkSequencePoint(doc8, 194, 1, 194, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Line"))
ctor1IL.MarkSequencePoint(doc8, 195, 1, 195, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsArray"))
ctor1IL.MarkSequencePoint(doc8, 196, 1, 196, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsByRef"))
ctor1IL.MarkSequencePoint(doc8, 197, 1, 197, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldtoken, GetType(System.Boolean))
Dim typ2 As Type() = {GetType(System.RuntimeTypeHandle)}
ctor1IL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ2))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ2).ReturnType
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("RefTyp"))
ctor1IL.MarkSequencePoint(doc8, 198, 1, 198, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("OrdOp"))
ctor1IL.MarkSequencePoint(doc8, 199, 1, 199, 100)
ctor1IL.Emit(OpCodes.Ret)
BooleanTok.CreateType()
End Sub

Sub CharTok()
Dim CharTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.TypeToks" & "." & "CharTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"))
Dim ctor0 As ConstructorBuilder = CharTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc8, 206, 1, 206, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc8, 207, 1, 207, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Value"))
ctor0IL.MarkSequencePoint(doc8, 208, 1, 208, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Line"))
ctor0IL.MarkSequencePoint(doc8, 209, 1, 209, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsArray"))
ctor0IL.MarkSequencePoint(doc8, 210, 1, 210, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsByRef"))
ctor0IL.MarkSequencePoint(doc8, 211, 1, 211, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldtoken, GetType(System.Char))
Dim typ0 As Type() = {GetType(System.RuntimeTypeHandle)}
ctor0IL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ0))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ0).ReturnType
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("RefTyp"))
ctor0IL.MarkSequencePoint(doc8, 212, 1, 212, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("OrdOp"))
ctor0IL.MarkSequencePoint(doc8, 213, 1, 213, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ1(-1) As Type
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = CharTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ1)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc8, 216, 1, 216, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc8, 217, 1, 217, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Value"))
ctor1IL.MarkSequencePoint(doc8, 218, 1, 218, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Line"))
ctor1IL.MarkSequencePoint(doc8, 219, 1, 219, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsArray"))
ctor1IL.MarkSequencePoint(doc8, 220, 1, 220, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsByRef"))
ctor1IL.MarkSequencePoint(doc8, 221, 1, 221, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldtoken, GetType(System.Char))
Dim typ2 As Type() = {GetType(System.RuntimeTypeHandle)}
ctor1IL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ2))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ2).ReturnType
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("RefTyp"))
ctor1IL.MarkSequencePoint(doc8, 222, 1, 222, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("OrdOp"))
ctor1IL.MarkSequencePoint(doc8, 223, 1, 223, 100)
ctor1IL.Emit(OpCodes.Ret)
CharTok.CreateType()
End Sub

Sub DecimalTok()
Dim DecimalTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.TypeToks" & "." & "DecimalTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"))
Dim ctor0 As ConstructorBuilder = DecimalTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc8, 230, 1, 230, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc8, 231, 1, 231, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Value"))
ctor0IL.MarkSequencePoint(doc8, 232, 1, 232, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Line"))
ctor0IL.MarkSequencePoint(doc8, 233, 1, 233, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsArray"))
ctor0IL.MarkSequencePoint(doc8, 234, 1, 234, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsByRef"))
ctor0IL.MarkSequencePoint(doc8, 235, 1, 235, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldtoken, GetType(System.Decimal))
Dim typ0 As Type() = {GetType(System.RuntimeTypeHandle)}
ctor0IL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ0))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ0).ReturnType
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("RefTyp"))
ctor0IL.MarkSequencePoint(doc8, 236, 1, 236, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("OrdOp"))
ctor0IL.MarkSequencePoint(doc8, 237, 1, 237, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ1(-1) As Type
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = DecimalTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ1)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc8, 240, 1, 240, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc8, 241, 1, 241, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Value"))
ctor1IL.MarkSequencePoint(doc8, 242, 1, 242, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Line"))
ctor1IL.MarkSequencePoint(doc8, 243, 1, 243, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsArray"))
ctor1IL.MarkSequencePoint(doc8, 244, 1, 244, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsByRef"))
ctor1IL.MarkSequencePoint(doc8, 245, 1, 245, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldtoken, GetType(System.Decimal))
Dim typ2 As Type() = {GetType(System.RuntimeTypeHandle)}
ctor1IL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ2))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ2).ReturnType
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("RefTyp"))
ctor1IL.MarkSequencePoint(doc8, 246, 1, 246, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("OrdOp"))
ctor1IL.MarkSequencePoint(doc8, 247, 1, 247, 100)
ctor1IL.Emit(OpCodes.Ret)
DecimalTok.CreateType()
End Sub

Sub LongTok()
Dim LongTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.TypeToks" & "." & "LongTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"))
Dim ctor0 As ConstructorBuilder = LongTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc8, 254, 1, 254, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc8, 255, 1, 255, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Value"))
ctor0IL.MarkSequencePoint(doc8, 256, 1, 256, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Line"))
ctor0IL.MarkSequencePoint(doc8, 257, 1, 257, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsArray"))
ctor0IL.MarkSequencePoint(doc8, 258, 1, 258, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsByRef"))
ctor0IL.MarkSequencePoint(doc8, 259, 1, 259, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldtoken, GetType(System.Int64))
Dim typ0 As Type() = {GetType(System.RuntimeTypeHandle)}
ctor0IL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ0))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ0).ReturnType
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("RefTyp"))
ctor0IL.MarkSequencePoint(doc8, 260, 1, 260, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("OrdOp"))
ctor0IL.MarkSequencePoint(doc8, 261, 1, 261, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ1(-1) As Type
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = LongTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ1)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc8, 264, 1, 264, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc8, 265, 1, 265, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Value"))
ctor1IL.MarkSequencePoint(doc8, 266, 1, 266, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Line"))
ctor1IL.MarkSequencePoint(doc8, 267, 1, 267, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsArray"))
ctor1IL.MarkSequencePoint(doc8, 268, 1, 268, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsByRef"))
ctor1IL.MarkSequencePoint(doc8, 269, 1, 269, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldtoken, GetType(System.Int64))
Dim typ2 As Type() = {GetType(System.RuntimeTypeHandle)}
ctor1IL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ2))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ2).ReturnType
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("RefTyp"))
ctor1IL.MarkSequencePoint(doc8, 270, 1, 270, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("OrdOp"))
ctor1IL.MarkSequencePoint(doc8, 271, 1, 271, 100)
ctor1IL.Emit(OpCodes.Ret)
LongTok.CreateType()
End Sub

Sub SByteTok()
Dim SByteTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.TypeToks" & "." & "SByteTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"))
Dim ctor0 As ConstructorBuilder = SByteTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc8, 278, 1, 278, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc8, 279, 1, 279, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Value"))
ctor0IL.MarkSequencePoint(doc8, 280, 1, 280, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Line"))
ctor0IL.MarkSequencePoint(doc8, 281, 1, 281, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsArray"))
ctor0IL.MarkSequencePoint(doc8, 282, 1, 282, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsByRef"))
ctor0IL.MarkSequencePoint(doc8, 283, 1, 283, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldtoken, GetType(System.SByte))
Dim typ0 As Type() = {GetType(System.RuntimeTypeHandle)}
ctor0IL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ0))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ0).ReturnType
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("RefTyp"))
ctor0IL.MarkSequencePoint(doc8, 284, 1, 284, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("OrdOp"))
ctor0IL.MarkSequencePoint(doc8, 285, 1, 285, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ1(-1) As Type
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = SByteTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ1)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc8, 288, 1, 288, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc8, 289, 1, 289, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Value"))
ctor1IL.MarkSequencePoint(doc8, 290, 1, 290, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Line"))
ctor1IL.MarkSequencePoint(doc8, 291, 1, 291, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsArray"))
ctor1IL.MarkSequencePoint(doc8, 292, 1, 292, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsByRef"))
ctor1IL.MarkSequencePoint(doc8, 293, 1, 293, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldtoken, GetType(System.SByte))
Dim typ2 As Type() = {GetType(System.RuntimeTypeHandle)}
ctor1IL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ2))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ2).ReturnType
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("RefTyp"))
ctor1IL.MarkSequencePoint(doc8, 294, 1, 294, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("OrdOp"))
ctor1IL.MarkSequencePoint(doc8, 295, 1, 295, 100)
ctor1IL.Emit(OpCodes.Ret)
SByteTok.CreateType()
End Sub

Sub ShortTok()
Dim ShortTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.TypeToks" & "." & "ShortTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"))
Dim ctor0 As ConstructorBuilder = ShortTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc8, 302, 1, 302, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc8, 303, 1, 303, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Value"))
ctor0IL.MarkSequencePoint(doc8, 304, 1, 304, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Line"))
ctor0IL.MarkSequencePoint(doc8, 305, 1, 305, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsArray"))
ctor0IL.MarkSequencePoint(doc8, 306, 1, 306, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsByRef"))
ctor0IL.MarkSequencePoint(doc8, 307, 1, 307, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldtoken, GetType(System.Int16))
Dim typ0 As Type() = {GetType(System.RuntimeTypeHandle)}
ctor0IL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ0))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ0).ReturnType
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("RefTyp"))
ctor0IL.MarkSequencePoint(doc8, 308, 1, 308, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("OrdOp"))
ctor0IL.MarkSequencePoint(doc8, 309, 1, 309, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ1(-1) As Type
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = ShortTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ1)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc8, 312, 1, 312, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc8, 313, 1, 313, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Value"))
ctor1IL.MarkSequencePoint(doc8, 314, 1, 314, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Line"))
ctor1IL.MarkSequencePoint(doc8, 315, 1, 315, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsArray"))
ctor1IL.MarkSequencePoint(doc8, 316, 1, 316, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsByRef"))
ctor1IL.MarkSequencePoint(doc8, 317, 1, 317, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldtoken, GetType(System.Int16))
Dim typ2 As Type() = {GetType(System.RuntimeTypeHandle)}
ctor1IL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ2))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ2).ReturnType
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("RefTyp"))
ctor1IL.MarkSequencePoint(doc8, 318, 1, 318, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("OrdOp"))
ctor1IL.MarkSequencePoint(doc8, 319, 1, 319, 100)
ctor1IL.Emit(OpCodes.Ret)
ShortTok.CreateType()
End Sub

Sub SingleTok()
Dim SingleTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.TypeToks" & "." & "SingleTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"))
Dim ctor0 As ConstructorBuilder = SingleTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc8, 326, 1, 326, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc8, 327, 1, 327, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Value"))
ctor0IL.MarkSequencePoint(doc8, 328, 1, 328, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Line"))
ctor0IL.MarkSequencePoint(doc8, 329, 1, 329, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsArray"))
ctor0IL.MarkSequencePoint(doc8, 330, 1, 330, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsByRef"))
ctor0IL.MarkSequencePoint(doc8, 331, 1, 331, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldtoken, GetType(System.Single))
Dim typ0 As Type() = {GetType(System.RuntimeTypeHandle)}
ctor0IL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ0))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ0).ReturnType
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("RefTyp"))
ctor0IL.MarkSequencePoint(doc8, 332, 1, 332, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("OrdOp"))
ctor0IL.MarkSequencePoint(doc8, 333, 1, 333, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ1(-1) As Type
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = SingleTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ1)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc8, 336, 1, 336, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc8, 337, 1, 337, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Value"))
ctor1IL.MarkSequencePoint(doc8, 338, 1, 338, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Line"))
ctor1IL.MarkSequencePoint(doc8, 339, 1, 339, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsArray"))
ctor1IL.MarkSequencePoint(doc8, 340, 1, 340, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsByRef"))
ctor1IL.MarkSequencePoint(doc8, 341, 1, 341, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldtoken, GetType(System.Single))
Dim typ2 As Type() = {GetType(System.RuntimeTypeHandle)}
ctor1IL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ2))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ2).ReturnType
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("RefTyp"))
ctor1IL.MarkSequencePoint(doc8, 342, 1, 342, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("OrdOp"))
ctor1IL.MarkSequencePoint(doc8, 343, 1, 343, 100)
ctor1IL.Emit(OpCodes.Ret)
SingleTok.CreateType()
End Sub

Sub ObjectTok()
Dim ObjectTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.TypeToks" & "." & "ObjectTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"))
Dim ctor0 As ConstructorBuilder = ObjectTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc8, 350, 1, 350, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc8, 351, 1, 351, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Value"))
ctor0IL.MarkSequencePoint(doc8, 352, 1, 352, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Line"))
ctor0IL.MarkSequencePoint(doc8, 353, 1, 353, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsArray"))
ctor0IL.MarkSequencePoint(doc8, 354, 1, 354, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsByRef"))
ctor0IL.MarkSequencePoint(doc8, 355, 1, 355, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldtoken, GetType(System.Object))
Dim typ0 As Type() = {GetType(System.RuntimeTypeHandle)}
ctor0IL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ0))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ0).ReturnType
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("RefTyp"))
ctor0IL.MarkSequencePoint(doc8, 356, 1, 356, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("OrdOp"))
ctor0IL.MarkSequencePoint(doc8, 357, 1, 357, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ1(-1) As Type
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = ObjectTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ1)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc8, 360, 1, 360, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc8, 361, 1, 361, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Value"))
ctor1IL.MarkSequencePoint(doc8, 362, 1, 362, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Line"))
ctor1IL.MarkSequencePoint(doc8, 363, 1, 363, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsArray"))
ctor1IL.MarkSequencePoint(doc8, 364, 1, 364, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsByRef"))
ctor1IL.MarkSequencePoint(doc8, 365, 1, 365, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldtoken, GetType(System.Object))
Dim typ2 As Type() = {GetType(System.RuntimeTypeHandle)}
ctor1IL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ2))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ2).ReturnType
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("RefTyp"))
ctor1IL.MarkSequencePoint(doc8, 366, 1, 366, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("OrdOp"))
ctor1IL.MarkSequencePoint(doc8, 367, 1, 367, 100)
ctor1IL.Emit(OpCodes.Ret)
ObjectTok.CreateType()
End Sub

Sub VoidTok()
Dim VoidTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.TypeToks" & "." & "VoidTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"))
Dim ctor0 As ConstructorBuilder = VoidTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc8, 374, 1, 374, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc8, 375, 1, 375, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Value"))
ctor0IL.MarkSequencePoint(doc8, 376, 1, 376, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Line"))
ctor0IL.MarkSequencePoint(doc8, 377, 1, 377, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsArray"))
ctor0IL.MarkSequencePoint(doc8, 378, 1, 378, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsByRef"))
ctor0IL.MarkSequencePoint(doc8, 379, 1, 379, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldtoken, GetType(System.Void))
Dim typ0 As Type() = {GetType(System.RuntimeTypeHandle)}
ctor0IL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ0))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ0).ReturnType
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("RefTyp"))
ctor0IL.MarkSequencePoint(doc8, 380, 1, 380, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("OrdOp"))
ctor0IL.MarkSequencePoint(doc8, 381, 1, 381, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ1(-1) As Type
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = VoidTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ1)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc8, 384, 1, 384, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc8, 385, 1, 385, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Value"))
ctor1IL.MarkSequencePoint(doc8, 386, 1, 386, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Line"))
ctor1IL.MarkSequencePoint(doc8, 387, 1, 387, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsArray"))
ctor1IL.MarkSequencePoint(doc8, 388, 1, 388, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsByRef"))
ctor1IL.MarkSequencePoint(doc8, 389, 1, 389, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldtoken, GetType(System.Void))
Dim typ2 As Type() = {GetType(System.RuntimeTypeHandle)}
ctor1IL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ2))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ2).ReturnType
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("RefTyp"))
ctor1IL.MarkSequencePoint(doc8, 390, 1, 390, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("OrdOp"))
ctor1IL.MarkSequencePoint(doc8, 391, 1, 391, 100)
ctor1IL.Emit(OpCodes.Ret)
VoidTok.CreateType()
End Sub

Sub MeTok()
Dim MeTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.TypeToks" & "." & "MeTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"))
MeTok.CreateType()
End Sub

Sub UIntegerTok()
Dim UIntegerTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.TypeToks" & "." & "UIntegerTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"))
Dim ctor0 As ConstructorBuilder = UIntegerTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc8, 402, 1, 402, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc8, 403, 1, 403, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Value"))
ctor0IL.MarkSequencePoint(doc8, 404, 1, 404, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Line"))
ctor0IL.MarkSequencePoint(doc8, 405, 1, 405, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsArray"))
ctor0IL.MarkSequencePoint(doc8, 406, 1, 406, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsByRef"))
ctor0IL.MarkSequencePoint(doc8, 407, 1, 407, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldtoken, GetType(UInt32))
Dim typ0 As Type() = {GetType(System.RuntimeTypeHandle)}
ctor0IL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ0))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ0).ReturnType
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("RefTyp"))
ctor0IL.MarkSequencePoint(doc8, 408, 1, 408, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("OrdOp"))
ctor0IL.MarkSequencePoint(doc8, 409, 1, 409, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ1(-1) As Type
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = UIntegerTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ1)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc8, 412, 1, 412, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc8, 413, 1, 413, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Value"))
ctor1IL.MarkSequencePoint(doc8, 414, 1, 414, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Line"))
ctor1IL.MarkSequencePoint(doc8, 415, 1, 415, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsArray"))
ctor1IL.MarkSequencePoint(doc8, 416, 1, 416, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsByRef"))
ctor1IL.MarkSequencePoint(doc8, 417, 1, 417, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldtoken, GetType(UInt32))
Dim typ2 As Type() = {GetType(System.RuntimeTypeHandle)}
ctor1IL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ2))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ2).ReturnType
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("RefTyp"))
ctor1IL.MarkSequencePoint(doc8, 418, 1, 418, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("OrdOp"))
ctor1IL.MarkSequencePoint(doc8, 419, 1, 419, 100)
ctor1IL.Emit(OpCodes.Ret)
UIntegerTok.CreateType()
End Sub

Sub ULongTok()
Dim ULongTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.TypeToks" & "." & "ULongTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"))
Dim ctor0 As ConstructorBuilder = ULongTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc8, 426, 1, 426, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc8, 427, 1, 427, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Value"))
ctor0IL.MarkSequencePoint(doc8, 428, 1, 428, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Line"))
ctor0IL.MarkSequencePoint(doc8, 429, 1, 429, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsArray"))
ctor0IL.MarkSequencePoint(doc8, 430, 1, 430, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsByRef"))
ctor0IL.MarkSequencePoint(doc8, 431, 1, 431, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldtoken, GetType(UInt64))
Dim typ0 As Type() = {GetType(System.RuntimeTypeHandle)}
ctor0IL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ0))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ0).ReturnType
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("RefTyp"))
ctor0IL.MarkSequencePoint(doc8, 432, 1, 432, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("OrdOp"))
ctor0IL.MarkSequencePoint(doc8, 433, 1, 433, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ1(-1) As Type
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = ULongTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ1)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc8, 436, 1, 436, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc8, 437, 1, 437, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Value"))
ctor1IL.MarkSequencePoint(doc8, 438, 1, 438, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Line"))
ctor1IL.MarkSequencePoint(doc8, 439, 1, 439, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsArray"))
ctor1IL.MarkSequencePoint(doc8, 440, 1, 440, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsByRef"))
ctor1IL.MarkSequencePoint(doc8, 441, 1, 441, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldtoken, GetType(UInt64))
Dim typ2 As Type() = {GetType(System.RuntimeTypeHandle)}
ctor1IL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ2))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ2).ReturnType
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("RefTyp"))
ctor1IL.MarkSequencePoint(doc8, 442, 1, 442, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("OrdOp"))
ctor1IL.MarkSequencePoint(doc8, 443, 1, 443, 100)
ctor1IL.Emit(OpCodes.Ret)
ULongTok.CreateType()
End Sub

Sub ByteTok()
Dim ByteTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.TypeToks" & "." & "ByteTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"))
Dim ctor0 As ConstructorBuilder = ByteTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc8, 450, 1, 450, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc8, 451, 1, 451, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Value"))
ctor0IL.MarkSequencePoint(doc8, 452, 1, 452, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Line"))
ctor0IL.MarkSequencePoint(doc8, 453, 1, 453, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsArray"))
ctor0IL.MarkSequencePoint(doc8, 454, 1, 454, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsByRef"))
ctor0IL.MarkSequencePoint(doc8, 455, 1, 455, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldtoken, GetType(Byte))
Dim typ0 As Type() = {GetType(System.RuntimeTypeHandle)}
ctor0IL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ0))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ0).ReturnType
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("RefTyp"))
ctor0IL.MarkSequencePoint(doc8, 456, 1, 456, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("OrdOp"))
ctor0IL.MarkSequencePoint(doc8, 457, 1, 457, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ1(-1) As Type
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = ByteTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ1)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc8, 460, 1, 460, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc8, 461, 1, 461, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Value"))
ctor1IL.MarkSequencePoint(doc8, 462, 1, 462, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Line"))
ctor1IL.MarkSequencePoint(doc8, 463, 1, 463, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsArray"))
ctor1IL.MarkSequencePoint(doc8, 464, 1, 464, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsByRef"))
ctor1IL.MarkSequencePoint(doc8, 465, 1, 465, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldtoken, GetType(Byte))
Dim typ2 As Type() = {GetType(System.RuntimeTypeHandle)}
ctor1IL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ2))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ2).ReturnType
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("RefTyp"))
ctor1IL.MarkSequencePoint(doc8, 466, 1, 466, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("OrdOp"))
ctor1IL.MarkSequencePoint(doc8, 467, 1, 467, 100)
ctor1IL.Emit(OpCodes.Ret)
ByteTok.CreateType()
End Sub

Sub UShortTok()
Dim UShortTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.TypeToks" & "." & "UShortTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"))
Dim ctor0 As ConstructorBuilder = UShortTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc8, 474, 1, 474, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc8, 475, 1, 475, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Value"))
ctor0IL.MarkSequencePoint(doc8, 476, 1, 476, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Line"))
ctor0IL.MarkSequencePoint(doc8, 477, 1, 477, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsArray"))
ctor0IL.MarkSequencePoint(doc8, 478, 1, 478, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsByRef"))
ctor0IL.MarkSequencePoint(doc8, 479, 1, 479, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldtoken, GetType(UInt16))
Dim typ0 As Type() = {GetType(System.RuntimeTypeHandle)}
ctor0IL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ0))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ0).ReturnType
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("RefTyp"))
ctor0IL.MarkSequencePoint(doc8, 480, 1, 480, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("OrdOp"))
ctor0IL.MarkSequencePoint(doc8, 481, 1, 481, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ1(-1) As Type
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = UShortTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ1)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc8, 484, 1, 484, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc8, 485, 1, 485, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Value"))
ctor1IL.MarkSequencePoint(doc8, 486, 1, 486, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Line"))
ctor1IL.MarkSequencePoint(doc8, 487, 1, 487, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsArray"))
ctor1IL.MarkSequencePoint(doc8, 488, 1, 488, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsByRef"))
ctor1IL.MarkSequencePoint(doc8, 489, 1, 489, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldtoken, GetType(UInt16))
Dim typ2 As Type() = {GetType(System.RuntimeTypeHandle)}
ctor1IL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ2))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ2).ReturnType
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("RefTyp"))
ctor1IL.MarkSequencePoint(doc8, 490, 1, 490, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("OrdOp"))
ctor1IL.MarkSequencePoint(doc8, 491, 1, 491, 100)
ctor1IL.Emit(OpCodes.Ret)
UShortTok.CreateType()
End Sub

Sub IntPtrTok()
Dim IntPtrTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.TypeToks" & "." & "IntPtrTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"))
Dim ctor0 As ConstructorBuilder = IntPtrTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc8, 498, 1, 498, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc8, 499, 1, 499, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Value"))
ctor0IL.MarkSequencePoint(doc8, 500, 1, 500, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Line"))
ctor0IL.MarkSequencePoint(doc8, 501, 1, 501, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsArray"))
ctor0IL.MarkSequencePoint(doc8, 502, 1, 502, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsByRef"))
ctor0IL.MarkSequencePoint(doc8, 503, 1, 503, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldtoken, GetType(IntPtr))
Dim typ0 As Type() = {GetType(System.RuntimeTypeHandle)}
ctor0IL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ0))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ0).ReturnType
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("RefTyp"))
ctor0IL.MarkSequencePoint(doc8, 504, 1, 504, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("OrdOp"))
ctor0IL.MarkSequencePoint(doc8, 505, 1, 505, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ1(-1) As Type
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = IntPtrTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ1)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc8, 508, 1, 508, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc8, 509, 1, 509, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Value"))
ctor1IL.MarkSequencePoint(doc8, 510, 1, 510, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("Line"))
ctor1IL.MarkSequencePoint(doc8, 511, 1, 511, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsArray"))
ctor1IL.MarkSequencePoint(doc8, 512, 1, 512, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("IsByRef"))
ctor1IL.MarkSequencePoint(doc8, 513, 1, 513, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldtoken, GetType(IntPtr))
Dim typ2 As Type() = {GetType(System.RuntimeTypeHandle)}
ctor1IL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ2))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ2).ReturnType
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("RefTyp"))
ctor1IL.MarkSequencePoint(doc8, 514, 1, 514, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetField("OrdOp"))
ctor1IL.MarkSequencePoint(doc8, 515, 1, 515, 100)
ctor1IL.Emit(OpCodes.Ret)
IntPtrTok.CreateType()
End Sub


Dim doc9 As ISymbolDocumentWriter

Sub Literal()
Dim Literal As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Literals" & "." & "Literal", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
Dim LitTyp As FieldBuilder = Literal.DefineField("LitTyp", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"), FieldAttributes.Public)
Dim Conv As FieldBuilder = Literal.DefineField("Conv", GetType(System.Boolean), FieldAttributes.Public)
Dim TTok As FieldBuilder = Literal.DefineField("TTok", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = Literal.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc9, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc9, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetField("Value"))
ctor0IL.MarkSequencePoint(doc9, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetField("Line"))
ctor0IL.MarkSequencePoint(doc9, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, LitTyp)
ctor0IL.MarkSequencePoint(doc9, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, Conv)
ctor0IL.MarkSequencePoint(doc9, 21, 1, 21, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, TTok)
ctor0IL.MarkSequencePoint(doc9, 22, 1, 22, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = Literal.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc9, 25, 1, 25, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc9, 26, 1, 26, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetField("Value"))
ctor1IL.MarkSequencePoint(doc9, 27, 1, 27, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetField("Line"))
ctor1IL.MarkSequencePoint(doc9, 28, 1, 28, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldnull)
ctor1IL.Emit(OpCodes.Stfld, LitTyp)
ctor1IL.MarkSequencePoint(doc9, 29, 1, 29, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, Conv)
ctor1IL.MarkSequencePoint(doc9, 30, 1, 30, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldnull)
ctor1IL.Emit(OpCodes.Stfld, TTok)
ctor1IL.MarkSequencePoint(doc9, 31, 1, 31, 100)
ctor1IL.Emit(OpCodes.Ret)
Literal.CreateType()
End Sub

Sub NullLiteral()
Dim NullLiteral As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Literals" & "." & "NullLiteral", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal"))
Dim NullVal As FieldBuilder = NullLiteral.DefineField("NullVal", GetType(System.Object), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = NullLiteral.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc9, 40, 1, 40, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc9, 41, 1, 41, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("Value"))
ctor0IL.MarkSequencePoint(doc9, 42, 1, 42, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("Line"))
ctor0IL.MarkSequencePoint(doc9, 43, 1, 43, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, NullVal)
ctor0IL.MarkSequencePoint(doc9, 44, 1, 44, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("Conv"))
ctor0IL.MarkSequencePoint(doc9, 45, 1, 45, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.ObjectTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("LitTyp"))
ctor0IL.MarkSequencePoint(doc9, 46, 1, 46, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("TTok"))
ctor0IL.MarkSequencePoint(doc9, 47, 1, 47, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = NullLiteral.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc9, 50, 1, 50, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc9, 51, 1, 51, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("Value"))
ctor1IL.MarkSequencePoint(doc9, 52, 1, 52, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("Line"))
ctor1IL.MarkSequencePoint(doc9, 53, 1, 53, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldnull)
ctor1IL.Emit(OpCodes.Stfld, NullVal)
ctor1IL.MarkSequencePoint(doc9, 54, 1, 54, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("Conv"))
ctor1IL.MarkSequencePoint(doc9, 55, 1, 55, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.ObjectTok").GetConstructor(Type.EmptyTypes))
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("LitTyp"))
ctor1IL.MarkSequencePoint(doc9, 56, 1, 56, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldnull)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("TTok"))
ctor1IL.MarkSequencePoint(doc9, 57, 1, 57, 100)
ctor1IL.Emit(OpCodes.Ret)
NullLiteral.CreateType()
End Sub

Sub StringLiteral()
Dim StringLiteral As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Literals" & "." & "StringLiteral", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal"))
Dim OrdOp As FieldBuilder = StringLiteral.DefineField("OrdOp", GetType(System.String), FieldAttributes.Public)
Dim MemberAccessFlg As FieldBuilder = StringLiteral.DefineField("MemberAccessFlg", GetType(System.Boolean), FieldAttributes.Public)
Dim MemberToAccess As FieldBuilder = StringLiteral.DefineField("MemberToAccess", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = StringLiteral.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc9, 68, 1, 68, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc9, 69, 1, 69, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("Value"))
ctor0IL.MarkSequencePoint(doc9, 70, 1, 70, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("Line"))
ctor0IL.MarkSequencePoint(doc9, 71, 1, 71, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("Conv"))
ctor0IL.MarkSequencePoint(doc9, 72, 1, 72, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.StringTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("LitTyp"))
ctor0IL.MarkSequencePoint(doc9, 73, 1, 73, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("TTok"))
ctor0IL.MarkSequencePoint(doc9, 74, 1, 74, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, OrdOp)
ctor0IL.MarkSequencePoint(doc9, 75, 1, 75, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, MemberAccessFlg)
ctor0IL.MarkSequencePoint(doc9, 76, 1, 76, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, MemberToAccess)
ctor0IL.MarkSequencePoint(doc9, 77, 1, 77, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = StringLiteral.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc9, 80, 1, 80, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc9, 81, 1, 81, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("Value"))
ctor1IL.MarkSequencePoint(doc9, 82, 1, 82, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("Line"))
ctor1IL.MarkSequencePoint(doc9, 83, 1, 83, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("Conv"))
ctor1IL.MarkSequencePoint(doc9, 84, 1, 84, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.StringTok").GetConstructor(Type.EmptyTypes))
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("LitTyp"))
ctor1IL.MarkSequencePoint(doc9, 85, 1, 85, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldnull)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("TTok"))
ctor1IL.MarkSequencePoint(doc9, 86, 1, 86, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, OrdOp)
ctor1IL.MarkSequencePoint(doc9, 87, 1, 87, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, MemberAccessFlg)
ctor1IL.MarkSequencePoint(doc9, 88, 1, 88, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetConstructor(Type.EmptyTypes))
ctor1IL.Emit(OpCodes.Stfld, MemberToAccess)
ctor1IL.MarkSequencePoint(doc9, 89, 1, 89, 100)
ctor1IL.Emit(OpCodes.Ret)
StringLiteral.CreateType()
End Sub

Sub CharLiteral()
Dim CharLiteral As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Literals" & "." & "CharLiteral", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal"))
Dim CharVal As FieldBuilder = CharLiteral.DefineField("CharVal", GetType(System.Char), FieldAttributes.Public)
Dim OrdOp As FieldBuilder = CharLiteral.DefineField("OrdOp", GetType(System.String), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = CharLiteral.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc9, 99, 1, 99, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc9, 100, 1, 100, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("Value"))
ctor0IL.MarkSequencePoint(doc9, 101, 1, 101, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("Line"))
ctor0IL.MarkSequencePoint(doc9, 102, 1, 102, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "a")
Typ = GetType(System.String)
Dim typ0 As Type() = {Typ}
ctor0IL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ0))
Typ = GetType(System.Convert).GetMethod("ToChar", typ0).ReturnType
ctor0IL.Emit(OpCodes.Stfld, CharVal)
ctor0IL.MarkSequencePoint(doc9, 103, 1, 103, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("Conv"))
ctor0IL.MarkSequencePoint(doc9, 104, 1, 104, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.CharTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("LitTyp"))
ctor0IL.MarkSequencePoint(doc9, 105, 1, 105, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("TTok"))
ctor0IL.MarkSequencePoint(doc9, 106, 1, 106, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, OrdOp)
ctor0IL.MarkSequencePoint(doc9, 107, 1, 107, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ1(-1) As Type
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = CharLiteral.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ1)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc9, 110, 1, 110, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc9, 111, 1, 111, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("Value"))
ctor1IL.MarkSequencePoint(doc9, 112, 1, 112, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("Line"))
ctor1IL.MarkSequencePoint(doc9, 113, 1, 113, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldstr, "a")
Typ = GetType(System.String)
Dim typ2 As Type() = {Typ}
ctor1IL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ2))
Typ = GetType(System.Convert).GetMethod("ToChar", typ2).ReturnType
ctor1IL.Emit(OpCodes.Stfld, CharVal)
ctor1IL.MarkSequencePoint(doc9, 114, 1, 114, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("Conv"))
ctor1IL.MarkSequencePoint(doc9, 115, 1, 115, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.CharTok").GetConstructor(Type.EmptyTypes))
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("LitTyp"))
ctor1IL.MarkSequencePoint(doc9, 116, 1, 116, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldnull)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("TTok"))
ctor1IL.MarkSequencePoint(doc9, 117, 1, 117, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, OrdOp)
ctor1IL.MarkSequencePoint(doc9, 118, 1, 118, 100)
ctor1IL.Emit(OpCodes.Ret)
CharLiteral.CreateType()
End Sub

Sub BooleanLiteral()
Dim BooleanLiteral As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Literals" & "." & "BooleanLiteral", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal"))
Dim BoolVal As FieldBuilder = BooleanLiteral.DefineField("BoolVal", GetType(System.Boolean), FieldAttributes.Public)
Dim OrdOp As FieldBuilder = BooleanLiteral.DefineField("OrdOp", GetType(System.String), FieldAttributes.Public)
Dim DoNot As FieldBuilder = BooleanLiteral.DefineField("DoNot", GetType(System.Boolean), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = BooleanLiteral.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc9, 129, 1, 129, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc9, 130, 1, 130, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("Value"))
ctor0IL.MarkSequencePoint(doc9, 131, 1, 131, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("Line"))
ctor0IL.MarkSequencePoint(doc9, 132, 1, 132, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, BoolVal)
ctor0IL.MarkSequencePoint(doc9, 133, 1, 133, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("Conv"))
ctor0IL.MarkSequencePoint(doc9, 134, 1, 134, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.BooleanTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("LitTyp"))
ctor0IL.MarkSequencePoint(doc9, 135, 1, 135, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("TTok"))
ctor0IL.MarkSequencePoint(doc9, 136, 1, 136, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, OrdOp)
ctor0IL.MarkSequencePoint(doc9, 137, 1, 137, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, DoNot)
ctor0IL.MarkSequencePoint(doc9, 138, 1, 138, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = BooleanLiteral.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc9, 141, 1, 141, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc9, 142, 1, 142, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("Value"))
ctor1IL.MarkSequencePoint(doc9, 143, 1, 143, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("Line"))
ctor1IL.MarkSequencePoint(doc9, 144, 1, 144, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, BoolVal)
ctor1IL.MarkSequencePoint(doc9, 145, 1, 145, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("Conv"))
ctor1IL.MarkSequencePoint(doc9, 146, 1, 146, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.BooleanTok").GetConstructor(Type.EmptyTypes))
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("LitTyp"))
ctor1IL.MarkSequencePoint(doc9, 147, 1, 147, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldnull)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("TTok"))
ctor1IL.MarkSequencePoint(doc9, 148, 1, 148, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, OrdOp)
ctor1IL.MarkSequencePoint(doc9, 149, 1, 149, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, DoNot)
ctor1IL.MarkSequencePoint(doc9, 150, 1, 150, 100)
ctor1IL.Emit(OpCodes.Ret)
BooleanLiteral.CreateType()
End Sub

Sub NumberLiteral()
Dim NumberLiteral As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Literals" & "." & "NumberLiteral", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal"))
Dim OrdOp As FieldBuilder = NumberLiteral.DefineField("OrdOp", GetType(System.String), FieldAttributes.Public)
Dim DoNot As FieldBuilder = NumberLiteral.DefineField("DoNot", GetType(System.Boolean), FieldAttributes.Public)
Dim DoNeg As FieldBuilder = NumberLiteral.DefineField("DoNeg", GetType(System.Boolean), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = NumberLiteral.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc9, 162, 1, 162, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc9, 163, 1, 163, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("Value"))
ctor0IL.MarkSequencePoint(doc9, 164, 1, 164, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("Line"))
ctor0IL.MarkSequencePoint(doc9, 165, 1, 165, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("Conv"))
ctor0IL.MarkSequencePoint(doc9, 166, 1, 166, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("LitTyp"))
ctor0IL.MarkSequencePoint(doc9, 167, 1, 167, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("TTok"))
ctor0IL.MarkSequencePoint(doc9, 168, 1, 168, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, OrdOp)
ctor0IL.MarkSequencePoint(doc9, 169, 1, 169, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, DoNot)
ctor0IL.MarkSequencePoint(doc9, 170, 1, 170, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, DoNeg)
ctor0IL.MarkSequencePoint(doc9, 171, 1, 171, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = NumberLiteral.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc9, 174, 1, 174, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc9, 175, 1, 175, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("Value"))
ctor1IL.MarkSequencePoint(doc9, 176, 1, 176, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("Line"))
ctor1IL.MarkSequencePoint(doc9, 177, 1, 177, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("Conv"))
ctor1IL.MarkSequencePoint(doc9, 178, 1, 178, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldnull)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("LitTyp"))
ctor1IL.MarkSequencePoint(doc9, 179, 1, 179, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldnull)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.Literal").GetField("TTok"))
ctor1IL.MarkSequencePoint(doc9, 180, 1, 180, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, OrdOp)
ctor1IL.MarkSequencePoint(doc9, 181, 1, 181, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, DoNot)
ctor1IL.MarkSequencePoint(doc9, 182, 1, 182, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, DoNeg)
ctor1IL.MarkSequencePoint(doc9, 183, 1, 183, 100)
ctor1IL.Emit(OpCodes.Ret)
NumberLiteral.CreateType()
End Sub

Sub IntLiteral()
Dim IntLiteral As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Literals" & "." & "IntLiteral", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral"))
Dim NumVal As FieldBuilder = IntLiteral.DefineField("NumVal", GetType(System.Int32), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = IntLiteral.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc9, 192, 1, 192, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc9, 193, 1, 193, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Value"))
ctor0IL.MarkSequencePoint(doc9, 194, 1, 194, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Line"))
ctor0IL.MarkSequencePoint(doc9, 195, 1, 195, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, NumVal)
ctor0IL.MarkSequencePoint(doc9, 196, 1, 196, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Conv"))
ctor0IL.MarkSequencePoint(doc9, 197, 1, 197, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.IntegerTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("LitTyp"))
ctor0IL.MarkSequencePoint(doc9, 198, 1, 198, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("TTok"))
ctor0IL.MarkSequencePoint(doc9, 199, 1, 199, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("OrdOp"))
ctor0IL.MarkSequencePoint(doc9, 200, 1, 200, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNot"))
ctor0IL.MarkSequencePoint(doc9, 201, 1, 201, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNeg"))
ctor0IL.MarkSequencePoint(doc9, 202, 1, 202, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = IntLiteral.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc9, 205, 1, 205, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc9, 206, 1, 206, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Value"))
ctor1IL.MarkSequencePoint(doc9, 207, 1, 207, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Line"))
ctor1IL.MarkSequencePoint(doc9, 208, 1, 208, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, NumVal)
ctor1IL.MarkSequencePoint(doc9, 209, 1, 209, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Conv"))
ctor1IL.MarkSequencePoint(doc9, 210, 1, 210, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.IntegerTok").GetConstructor(Type.EmptyTypes))
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("LitTyp"))
ctor1IL.MarkSequencePoint(doc9, 211, 1, 211, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldnull)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("TTok"))
ctor1IL.MarkSequencePoint(doc9, 212, 1, 212, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("OrdOp"))
ctor1IL.MarkSequencePoint(doc9, 213, 1, 213, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNot"))
ctor1IL.MarkSequencePoint(doc9, 214, 1, 214, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNeg"))
ctor1IL.MarkSequencePoint(doc9, 215, 1, 215, 100)
ctor1IL.Emit(OpCodes.Ret)
IntLiteral.CreateType()
End Sub

Sub DoubleLiteral()
Dim DoubleLiteral As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Literals" & "." & "DoubleLiteral", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral"))
Dim NumVal As FieldBuilder = DoubleLiteral.DefineField("NumVal", GetType(System.Double), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = DoubleLiteral.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc9, 224, 1, 224, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc9, 225, 1, 225, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Value"))
ctor0IL.MarkSequencePoint(doc9, 226, 1, 226, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Line"))
ctor0IL.MarkSequencePoint(doc9, 227, 1, 227, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_R8, CDbl(0))
Typ = GetType(System.Double)
ctor0IL.Emit(OpCodes.Stfld, NumVal)
ctor0IL.MarkSequencePoint(doc9, 228, 1, 228, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Conv"))
ctor0IL.MarkSequencePoint(doc9, 229, 1, 229, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.DoubleTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("LitTyp"))
ctor0IL.MarkSequencePoint(doc9, 230, 1, 230, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("TTok"))
ctor0IL.MarkSequencePoint(doc9, 231, 1, 231, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("OrdOp"))
ctor0IL.MarkSequencePoint(doc9, 232, 1, 232, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNot"))
ctor0IL.MarkSequencePoint(doc9, 233, 1, 233, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNeg"))
ctor0IL.MarkSequencePoint(doc9, 234, 1, 234, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = DoubleLiteral.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc9, 237, 1, 237, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc9, 238, 1, 238, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Value"))
ctor1IL.MarkSequencePoint(doc9, 239, 1, 239, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Line"))
ctor1IL.MarkSequencePoint(doc9, 240, 1, 240, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_R8, CDbl(0))
Typ = GetType(System.Double)
ctor1IL.Emit(OpCodes.Stfld, NumVal)
ctor1IL.MarkSequencePoint(doc9, 241, 1, 241, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Conv"))
ctor1IL.MarkSequencePoint(doc9, 242, 1, 242, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.DoubleTok").GetConstructor(Type.EmptyTypes))
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("LitTyp"))
ctor1IL.MarkSequencePoint(doc9, 243, 1, 243, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldnull)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("TTok"))
ctor1IL.MarkSequencePoint(doc9, 244, 1, 244, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("OrdOp"))
ctor1IL.MarkSequencePoint(doc9, 245, 1, 245, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNot"))
ctor1IL.MarkSequencePoint(doc9, 246, 1, 246, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNeg"))
ctor1IL.MarkSequencePoint(doc9, 247, 1, 247, 100)
ctor1IL.Emit(OpCodes.Ret)
DoubleLiteral.CreateType()
End Sub

Sub SByteLiteral()
Dim SByteLiteral As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Literals" & "." & "SByteLiteral", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral"))
Dim NumVal As FieldBuilder = SByteLiteral.DefineField("NumVal", GetType(System.SByte), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = SByteLiteral.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc9, 256, 1, 256, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc9, 257, 1, 257, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Value"))
ctor0IL.MarkSequencePoint(doc9, 258, 1, 258, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Line"))
ctor0IL.MarkSequencePoint(doc9, 259, 1, 259, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4_S, CSByte(0))
Typ = GetType(System.SByte)
ctor0IL.Emit(OpCodes.Stfld, NumVal)
ctor0IL.MarkSequencePoint(doc9, 260, 1, 260, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Conv"))
ctor0IL.MarkSequencePoint(doc9, 261, 1, 261, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.SByteTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("LitTyp"))
ctor0IL.MarkSequencePoint(doc9, 262, 1, 262, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("TTok"))
ctor0IL.MarkSequencePoint(doc9, 263, 1, 263, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("OrdOp"))
ctor0IL.MarkSequencePoint(doc9, 264, 1, 264, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNot"))
ctor0IL.MarkSequencePoint(doc9, 265, 1, 265, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNeg"))
ctor0IL.MarkSequencePoint(doc9, 266, 1, 266, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = SByteLiteral.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc9, 269, 1, 269, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc9, 270, 1, 270, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Value"))
ctor1IL.MarkSequencePoint(doc9, 271, 1, 271, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Line"))
ctor1IL.MarkSequencePoint(doc9, 272, 1, 272, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4_S, CSByte(0))
Typ = GetType(System.SByte)
ctor1IL.Emit(OpCodes.Stfld, NumVal)
ctor1IL.MarkSequencePoint(doc9, 273, 1, 273, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Conv"))
ctor1IL.MarkSequencePoint(doc9, 274, 1, 274, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.SByteTok").GetConstructor(Type.EmptyTypes))
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("LitTyp"))
ctor1IL.MarkSequencePoint(doc9, 275, 1, 275, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldnull)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("TTok"))
ctor1IL.MarkSequencePoint(doc9, 276, 1, 276, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("OrdOp"))
ctor1IL.MarkSequencePoint(doc9, 277, 1, 277, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNot"))
ctor1IL.MarkSequencePoint(doc9, 278, 1, 278, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNeg"))
ctor1IL.MarkSequencePoint(doc9, 279, 1, 279, 100)
ctor1IL.Emit(OpCodes.Ret)
SByteLiteral.CreateType()
End Sub

Sub ShortLiteral()
Dim ShortLiteral As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Literals" & "." & "ShortLiteral", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral"))
Dim NumVal As FieldBuilder = ShortLiteral.DefineField("NumVal", GetType(System.Int16), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = ShortLiteral.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc9, 288, 1, 288, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc9, 289, 1, 289, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Value"))
ctor0IL.MarkSequencePoint(doc9, 290, 1, 290, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Line"))
ctor0IL.MarkSequencePoint(doc9, 291, 1, 291, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int16)
ctor0IL.Emit(OpCodes.Stfld, NumVal)
ctor0IL.MarkSequencePoint(doc9, 292, 1, 292, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Conv"))
ctor0IL.MarkSequencePoint(doc9, 293, 1, 293, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.ShortTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("LitTyp"))
ctor0IL.MarkSequencePoint(doc9, 294, 1, 294, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("TTok"))
ctor0IL.MarkSequencePoint(doc9, 295, 1, 295, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("OrdOp"))
ctor0IL.MarkSequencePoint(doc9, 296, 1, 296, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNot"))
ctor0IL.MarkSequencePoint(doc9, 297, 1, 297, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNeg"))
ctor0IL.MarkSequencePoint(doc9, 298, 1, 298, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = ShortLiteral.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc9, 301, 1, 301, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc9, 302, 1, 302, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Value"))
ctor1IL.MarkSequencePoint(doc9, 303, 1, 303, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Line"))
ctor1IL.MarkSequencePoint(doc9, 304, 1, 304, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int16)
ctor1IL.Emit(OpCodes.Stfld, NumVal)
ctor1IL.MarkSequencePoint(doc9, 305, 1, 305, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Conv"))
ctor1IL.MarkSequencePoint(doc9, 306, 1, 306, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.ShortTok").GetConstructor(Type.EmptyTypes))
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("LitTyp"))
ctor1IL.MarkSequencePoint(doc9, 307, 1, 307, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldnull)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("TTok"))
ctor1IL.MarkSequencePoint(doc9, 308, 1, 308, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("OrdOp"))
ctor1IL.MarkSequencePoint(doc9, 309, 1, 309, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNot"))
ctor1IL.MarkSequencePoint(doc9, 310, 1, 310, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNeg"))
ctor1IL.MarkSequencePoint(doc9, 311, 1, 311, 100)
ctor1IL.Emit(OpCodes.Ret)
ShortLiteral.CreateType()
End Sub

Sub LongLiteral()
Dim LongLiteral As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Literals" & "." & "LongLiteral", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral"))
Dim NumVal As FieldBuilder = LongLiteral.DefineField("NumVal", GetType(System.Int64), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = LongLiteral.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc9, 320, 1, 320, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc9, 321, 1, 321, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Value"))
ctor0IL.MarkSequencePoint(doc9, 322, 1, 322, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Line"))
ctor0IL.MarkSequencePoint(doc9, 323, 1, 323, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I8, CLng(0))
Typ = GetType(System.Int64)
ctor0IL.Emit(OpCodes.Stfld, NumVal)
ctor0IL.MarkSequencePoint(doc9, 324, 1, 324, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Conv"))
ctor0IL.MarkSequencePoint(doc9, 325, 1, 325, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.LongTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("LitTyp"))
ctor0IL.MarkSequencePoint(doc9, 326, 1, 326, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("TTok"))
ctor0IL.MarkSequencePoint(doc9, 327, 1, 327, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("OrdOp"))
ctor0IL.MarkSequencePoint(doc9, 328, 1, 328, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNot"))
ctor0IL.MarkSequencePoint(doc9, 329, 1, 329, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNeg"))
ctor0IL.MarkSequencePoint(doc9, 330, 1, 330, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = LongLiteral.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc9, 333, 1, 333, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc9, 334, 1, 334, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Value"))
ctor1IL.MarkSequencePoint(doc9, 335, 1, 335, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Line"))
ctor1IL.MarkSequencePoint(doc9, 336, 1, 336, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I8, CLng(0))
Typ = GetType(System.Int64)
ctor1IL.Emit(OpCodes.Stfld, NumVal)
ctor1IL.MarkSequencePoint(doc9, 337, 1, 337, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Conv"))
ctor1IL.MarkSequencePoint(doc9, 338, 1, 338, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.LongTok").GetConstructor(Type.EmptyTypes))
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("LitTyp"))
ctor1IL.MarkSequencePoint(doc9, 339, 1, 339, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldnull)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("TTok"))
ctor1IL.MarkSequencePoint(doc9, 340, 1, 340, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("OrdOp"))
ctor1IL.MarkSequencePoint(doc9, 341, 1, 341, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNot"))
ctor1IL.MarkSequencePoint(doc9, 342, 1, 342, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNeg"))
ctor1IL.MarkSequencePoint(doc9, 343, 1, 343, 100)
ctor1IL.Emit(OpCodes.Ret)
LongLiteral.CreateType()
End Sub

Sub FloatLiteral()
Dim FloatLiteral As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Literals" & "." & "FloatLiteral", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral"))
Dim NumVal As FieldBuilder = FloatLiteral.DefineField("NumVal", GetType(System.Single), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = FloatLiteral.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc9, 352, 1, 352, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc9, 353, 1, 353, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Value"))
ctor0IL.MarkSequencePoint(doc9, 354, 1, 354, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Line"))
ctor0IL.MarkSequencePoint(doc9, 355, 1, 355, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_R4, CSng(0))
Typ = GetType(System.Single)
ctor0IL.Emit(OpCodes.Stfld, NumVal)
ctor0IL.MarkSequencePoint(doc9, 356, 1, 356, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Conv"))
ctor0IL.MarkSequencePoint(doc9, 357, 1, 357, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.SingleTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("LitTyp"))
ctor0IL.MarkSequencePoint(doc9, 358, 1, 358, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("TTok"))
ctor0IL.MarkSequencePoint(doc9, 359, 1, 359, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("OrdOp"))
ctor0IL.MarkSequencePoint(doc9, 360, 1, 360, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNot"))
ctor0IL.MarkSequencePoint(doc9, 361, 1, 361, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNeg"))
ctor0IL.MarkSequencePoint(doc9, 362, 1, 362, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = FloatLiteral.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc9, 365, 1, 365, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc9, 366, 1, 366, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Value"))
ctor1IL.MarkSequencePoint(doc9, 367, 1, 367, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Line"))
ctor1IL.MarkSequencePoint(doc9, 368, 1, 368, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_R4, CSng(0))
Typ = GetType(System.Single)
ctor1IL.Emit(OpCodes.Stfld, NumVal)
ctor1IL.MarkSequencePoint(doc9, 369, 1, 369, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Conv"))
ctor1IL.MarkSequencePoint(doc9, 370, 1, 370, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.SingleTok").GetConstructor(Type.EmptyTypes))
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("LitTyp"))
ctor1IL.MarkSequencePoint(doc9, 371, 1, 371, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldnull)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("TTok"))
ctor1IL.MarkSequencePoint(doc9, 372, 1, 372, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("OrdOp"))
ctor1IL.MarkSequencePoint(doc9, 373, 1, 373, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNot"))
ctor1IL.MarkSequencePoint(doc9, 374, 1, 374, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNeg"))
ctor1IL.MarkSequencePoint(doc9, 375, 1, 375, 100)
ctor1IL.Emit(OpCodes.Ret)
FloatLiteral.CreateType()
End Sub

Sub UIntLiteral()
Dim UIntLiteral As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Literals" & "." & "UIntLiteral", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral"))
Dim NumVal As FieldBuilder = UIntLiteral.DefineField("NumVal", GetType(System.UInt32), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = UIntLiteral.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc9, 384, 1, 384, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc9, 385, 1, 385, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Value"))
ctor0IL.MarkSequencePoint(doc9, 386, 1, 386, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Line"))
ctor0IL.MarkSequencePoint(doc9, 387, 1, 387, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
Dim typ0(-1) As Type
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = Typ
ctor0IL.Emit(OpCodes.Call, GetType(Convert).GetMethod("ToUInt32", typ0))
Typ = GetType(Convert).GetMethod("ToUInt32", typ0).ReturnType
ctor0IL.Emit(OpCodes.Stfld, NumVal)
ctor0IL.MarkSequencePoint(doc9, 388, 1, 388, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Conv"))
ctor0IL.MarkSequencePoint(doc9, 389, 1, 389, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.UIntegerTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("LitTyp"))
ctor0IL.MarkSequencePoint(doc9, 390, 1, 390, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("TTok"))
ctor0IL.MarkSequencePoint(doc9, 391, 1, 391, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("OrdOp"))
ctor0IL.MarkSequencePoint(doc9, 392, 1, 392, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNot"))
ctor0IL.MarkSequencePoint(doc9, 393, 1, 393, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNeg"))
ctor0IL.MarkSequencePoint(doc9, 394, 1, 394, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ1(-1) As Type
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = UIntLiteral.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ1)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc9, 397, 1, 397, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc9, 398, 1, 398, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Value"))
ctor1IL.MarkSequencePoint(doc9, 399, 1, 399, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Line"))
ctor1IL.MarkSequencePoint(doc9, 400, 1, 400, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
Dim typ2(-1) As Type
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = Typ
ctor1IL.Emit(OpCodes.Call, GetType(Convert).GetMethod("ToUInt32", typ2))
Typ = GetType(Convert).GetMethod("ToUInt32", typ2).ReturnType
ctor1IL.Emit(OpCodes.Stfld, NumVal)
ctor1IL.MarkSequencePoint(doc9, 401, 1, 401, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Conv"))
ctor1IL.MarkSequencePoint(doc9, 402, 1, 402, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.UIntegerTok").GetConstructor(Type.EmptyTypes))
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("LitTyp"))
ctor1IL.MarkSequencePoint(doc9, 403, 1, 403, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldnull)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("TTok"))
ctor1IL.MarkSequencePoint(doc9, 404, 1, 404, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("OrdOp"))
ctor1IL.MarkSequencePoint(doc9, 405, 1, 405, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNot"))
ctor1IL.MarkSequencePoint(doc9, 406, 1, 406, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNeg"))
ctor1IL.MarkSequencePoint(doc9, 407, 1, 407, 100)
ctor1IL.Emit(OpCodes.Ret)
UIntLiteral.CreateType()
End Sub

Sub ByteLiteral()
Dim ByteLiteral As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Literals" & "." & "ByteLiteral", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral"))
Dim NumVal As FieldBuilder = ByteLiteral.DefineField("NumVal", GetType(System.Byte), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = ByteLiteral.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc9, 415, 1, 415, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc9, 416, 1, 416, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Value"))
ctor0IL.MarkSequencePoint(doc9, 417, 1, 417, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Line"))
ctor0IL.MarkSequencePoint(doc9, 418, 1, 418, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
Dim typ0(-1) As Type
ctor0IL.Emit(OpCodes.Ldc_I4_S, CSByte(0))
Typ = GetType(System.SByte)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = Typ
ctor0IL.Emit(OpCodes.Call, GetType(Convert).GetMethod("ToByte", typ0))
Typ = GetType(Convert).GetMethod("ToByte", typ0).ReturnType
ctor0IL.Emit(OpCodes.Stfld, NumVal)
ctor0IL.MarkSequencePoint(doc9, 419, 1, 419, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Conv"))
ctor0IL.MarkSequencePoint(doc9, 420, 1, 420, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.ByteTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("LitTyp"))
ctor0IL.MarkSequencePoint(doc9, 421, 1, 421, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("TTok"))
ctor0IL.MarkSequencePoint(doc9, 422, 1, 422, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("OrdOp"))
ctor0IL.MarkSequencePoint(doc9, 423, 1, 423, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNot"))
ctor0IL.MarkSequencePoint(doc9, 424, 1, 424, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNeg"))
ctor0IL.MarkSequencePoint(doc9, 425, 1, 425, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ1(-1) As Type
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = ByteLiteral.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ1)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc9, 428, 1, 428, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc9, 429, 1, 429, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Value"))
ctor1IL.MarkSequencePoint(doc9, 430, 1, 430, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Line"))
ctor1IL.MarkSequencePoint(doc9, 431, 1, 431, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
Dim typ2(-1) As Type
ctor1IL.Emit(OpCodes.Ldc_I4_S, CSByte(0))
Typ = GetType(System.SByte)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = Typ
ctor1IL.Emit(OpCodes.Call, GetType(Convert).GetMethod("ToByte", typ2))
Typ = GetType(Convert).GetMethod("ToByte", typ2).ReturnType
ctor1IL.Emit(OpCodes.Stfld, NumVal)
ctor1IL.MarkSequencePoint(doc9, 432, 1, 432, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Conv"))
ctor1IL.MarkSequencePoint(doc9, 433, 1, 433, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.ByteTok").GetConstructor(Type.EmptyTypes))
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("LitTyp"))
ctor1IL.MarkSequencePoint(doc9, 434, 1, 434, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldnull)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("TTok"))
ctor1IL.MarkSequencePoint(doc9, 435, 1, 435, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("OrdOp"))
ctor1IL.MarkSequencePoint(doc9, 436, 1, 436, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNot"))
ctor1IL.MarkSequencePoint(doc9, 437, 1, 437, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNeg"))
ctor1IL.MarkSequencePoint(doc9, 438, 1, 438, 100)
ctor1IL.Emit(OpCodes.Ret)
ByteLiteral.CreateType()
End Sub

Sub UShortLiteral()
Dim UShortLiteral As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Literals" & "." & "UShortLiteral", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral"))
Dim NumVal As FieldBuilder = UShortLiteral.DefineField("NumVal", GetType(SYstem.UInt16), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = UShortLiteral.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc9, 447, 1, 447, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc9, 448, 1, 448, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Value"))
ctor0IL.MarkSequencePoint(doc9, 449, 1, 449, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Line"))
ctor0IL.MarkSequencePoint(doc9, 450, 1, 450, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
Dim typ0(-1) As Type
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int16)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = Typ
ctor0IL.Emit(OpCodes.Call, GetType(Convert).GetMethod("ToUInt16", typ0))
Typ = GetType(Convert).GetMethod("ToUInt16", typ0).ReturnType
ctor0IL.Emit(OpCodes.Stfld, NumVal)
ctor0IL.MarkSequencePoint(doc9, 451, 1, 451, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Conv"))
ctor0IL.MarkSequencePoint(doc9, 452, 1, 452, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.UShortTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("LitTyp"))
ctor0IL.MarkSequencePoint(doc9, 453, 1, 453, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("TTok"))
ctor0IL.MarkSequencePoint(doc9, 454, 1, 454, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("OrdOp"))
ctor0IL.MarkSequencePoint(doc9, 455, 1, 455, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNot"))
ctor0IL.MarkSequencePoint(doc9, 456, 1, 456, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNeg"))
ctor0IL.MarkSequencePoint(doc9, 457, 1, 457, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ1(-1) As Type
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = UShortLiteral.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ1)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc9, 460, 1, 460, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc9, 461, 1, 461, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Value"))
ctor1IL.MarkSequencePoint(doc9, 462, 1, 462, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Line"))
ctor1IL.MarkSequencePoint(doc9, 463, 1, 463, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
Dim typ2(-1) As Type
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int16)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = Typ
ctor1IL.Emit(OpCodes.Call, GetType(Convert).GetMethod("ToUInt16", typ2))
Typ = GetType(Convert).GetMethod("ToUInt16", typ2).ReturnType
ctor1IL.Emit(OpCodes.Stfld, NumVal)
ctor1IL.MarkSequencePoint(doc9, 464, 1, 464, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Conv"))
ctor1IL.MarkSequencePoint(doc9, 465, 1, 465, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.UShortTok").GetConstructor(Type.EmptyTypes))
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("LitTyp"))
ctor1IL.MarkSequencePoint(doc9, 466, 1, 466, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldnull)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("TTok"))
ctor1IL.MarkSequencePoint(doc9, 467, 1, 467, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("OrdOp"))
ctor1IL.MarkSequencePoint(doc9, 468, 1, 468, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNot"))
ctor1IL.MarkSequencePoint(doc9, 469, 1, 469, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNeg"))
ctor1IL.MarkSequencePoint(doc9, 470, 1, 470, 100)
ctor1IL.Emit(OpCodes.Ret)
UShortLiteral.CreateType()
End Sub

Sub ULongLiteral()
Dim ULongLiteral As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Literals" & "." & "ULongLiteral", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral"))
Dim NumVal As FieldBuilder = ULongLiteral.DefineField("NumVal", GetType(System.UInt64), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = ULongLiteral.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc9, 479, 1, 479, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc9, 480, 1, 480, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Value"))
ctor0IL.MarkSequencePoint(doc9, 481, 1, 481, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Line"))
ctor0IL.MarkSequencePoint(doc9, 482, 1, 482, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
Dim typ0(-1) As Type
ctor0IL.Emit(OpCodes.Ldc_I8, CLng(0))
Typ = GetType(System.Int64)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = Typ
ctor0IL.Emit(OpCodes.Call, GetType(Convert).GetMethod("ToUInt64", typ0))
Typ = GetType(Convert).GetMethod("ToUInt64", typ0).ReturnType
ctor0IL.Emit(OpCodes.Stfld, NumVal)
ctor0IL.MarkSequencePoint(doc9, 483, 1, 483, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Conv"))
ctor0IL.MarkSequencePoint(doc9, 484, 1, 484, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.ULongTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("LitTyp"))
ctor0IL.MarkSequencePoint(doc9, 485, 1, 485, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("TTok"))
ctor0IL.MarkSequencePoint(doc9, 486, 1, 486, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("OrdOp"))
ctor0IL.MarkSequencePoint(doc9, 487, 1, 487, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNot"))
ctor0IL.MarkSequencePoint(doc9, 488, 1, 488, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNeg"))
ctor0IL.MarkSequencePoint(doc9, 489, 1, 489, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ1(-1) As Type
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = ULongLiteral.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ1)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc9, 492, 1, 492, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc9, 493, 1, 493, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Value"))
ctor1IL.MarkSequencePoint(doc9, 494, 1, 494, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Line"))
ctor1IL.MarkSequencePoint(doc9, 495, 1, 495, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
Dim typ2(-1) As Type
ctor1IL.Emit(OpCodes.Ldc_I8, CLng(0))
Typ = GetType(System.Int64)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = Typ
ctor1IL.Emit(OpCodes.Call, GetType(Convert).GetMethod("ToUInt64", typ2))
Typ = GetType(Convert).GetMethod("ToUInt64", typ2).ReturnType
ctor1IL.Emit(OpCodes.Stfld, NumVal)
ctor1IL.MarkSequencePoint(doc9, 496, 1, 496, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Conv"))
ctor1IL.MarkSequencePoint(doc9, 497, 1, 497, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.ULongTok").GetConstructor(Type.EmptyTypes))
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("LitTyp"))
ctor1IL.MarkSequencePoint(doc9, 498, 1, 498, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldnull)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("TTok"))
ctor1IL.MarkSequencePoint(doc9, 499, 1, 499, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("OrdOp"))
ctor1IL.MarkSequencePoint(doc9, 500, 1, 500, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNot"))
ctor1IL.MarkSequencePoint(doc9, 501, 1, 501, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNeg"))
ctor1IL.MarkSequencePoint(doc9, 502, 1, 502, 100)
ctor1IL.Emit(OpCodes.Ret)
ULongLiteral.CreateType()
End Sub

Sub IntPtrLiteral()
Dim IntPtrLiteral As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Literals" & "." & "IntPtrLiteral", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral"))
Dim NumVal As FieldBuilder = IntPtrLiteral.DefineField("NumVal", GetType(IntPtr), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = IntPtrLiteral.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc9, 511, 1, 511, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc9, 512, 1, 512, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Value"))
ctor0IL.MarkSequencePoint(doc9, 513, 1, 513, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Line"))
ctor0IL.MarkSequencePoint(doc9, 514, 1, 514, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
Dim typ0(-1) As Type
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = Typ
ctor0IL.Emit(OpCodes.Newobj, GetType(IntPtr).GetConstructor(typ0))
ctor0IL.Emit(OpCodes.Stfld, NumVal)
ctor0IL.MarkSequencePoint(doc9, 515, 1, 515, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Conv"))
ctor0IL.MarkSequencePoint(doc9, 516, 1, 516, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.IntPtrTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("LitTyp"))
ctor0IL.MarkSequencePoint(doc9, 517, 1, 517, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("TTok"))
ctor0IL.MarkSequencePoint(doc9, 518, 1, 518, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("OrdOp"))
ctor0IL.MarkSequencePoint(doc9, 519, 1, 519, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNot"))
ctor0IL.MarkSequencePoint(doc9, 520, 1, 520, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNeg"))
ctor0IL.MarkSequencePoint(doc9, 521, 1, 521, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ1(-1) As Type
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = IntPtrLiteral.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ1)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc9, 524, 1, 524, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc9, 525, 1, 525, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Value"))
ctor1IL.MarkSequencePoint(doc9, 526, 1, 526, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Line"))
ctor1IL.MarkSequencePoint(doc9, 527, 1, 527, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
Dim typ2(-1) As Type
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = Typ
ctor1IL.Emit(OpCodes.Newobj, GetType(IntPtr).GetConstructor(typ2))
ctor1IL.Emit(OpCodes.Stfld, NumVal)
ctor1IL.MarkSequencePoint(doc9, 528, 1, 528, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("Conv"))
ctor1IL.MarkSequencePoint(doc9, 529, 1, 529, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.IntPtrTok").GetConstructor(Type.EmptyTypes))
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("LitTyp"))
ctor1IL.MarkSequencePoint(doc9, 530, 1, 530, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldnull)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("TTok"))
ctor1IL.MarkSequencePoint(doc9, 531, 1, 531, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("OrdOp"))
ctor1IL.MarkSequencePoint(doc9, 532, 1, 532, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNot"))
ctor1IL.MarkSequencePoint(doc9, 533, 1, 533, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral").GetField("DoNeg"))
ctor1IL.MarkSequencePoint(doc9, 534, 1, 534, 100)
ctor1IL.Emit(OpCodes.Ret)
IntPtrLiteral.CreateType()
End Sub


Dim doc10 As ISymbolDocumentWriter

Sub Ident()
Dim Ident As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "Ident", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
Dim IsRef As FieldBuilder = Ident.DefineField("IsRef", GetType(System.Boolean), FieldAttributes.Public)
Dim IsValInRef As FieldBuilder = Ident.DefineField("IsValInRef", GetType(System.Boolean), FieldAttributes.Public)
Dim IsRefInst As FieldBuilder = Ident.DefineField("IsRefInst", GetType(System.Boolean), FieldAttributes.Public)
Dim IsValInRefInst As FieldBuilder = Ident.DefineField("IsValInRefInst", GetType(System.Boolean), FieldAttributes.Public)
Dim Conv As FieldBuilder = Ident.DefineField("Conv", GetType(System.Boolean), FieldAttributes.Public)
Dim TTok As FieldBuilder = Ident.DefineField("TTok", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"), FieldAttributes.Public)
Dim IsArr As FieldBuilder = Ident.DefineField("IsArr", GetType(System.Boolean), FieldAttributes.Public)
Dim ArrLoc As FieldBuilder = Ident.DefineField("ArrLoc", asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr"), FieldAttributes.Public)
Dim DoNeg As FieldBuilder = Ident.DefineField("DoNeg", GetType(System.Boolean), FieldAttributes.Public)
Dim DoNot As FieldBuilder = Ident.DefineField("DoNot", GetType(System.Boolean), FieldAttributes.Public)
Dim OrdOp As FieldBuilder = Ident.DefineField("OrdOp", GetType(System.String), FieldAttributes.Public)
Dim MemberAccessFlg As FieldBuilder = Ident.DefineField("MemberAccessFlg", GetType(System.Boolean), FieldAttributes.Public)
Dim MemberToAccess As FieldBuilder = Ident.DefineField("MemberToAccess", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = Ident.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc10, 26, 1, 26, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc10, 27, 1, 27, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetField("Value"))
ctor0IL.MarkSequencePoint(doc10, 28, 1, 28, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetField("Line"))
ctor0IL.MarkSequencePoint(doc10, 29, 1, 29, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, IsRef)
ctor0IL.MarkSequencePoint(doc10, 30, 1, 30, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, IsValInRef)
ctor0IL.MarkSequencePoint(doc10, 31, 1, 31, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, IsRef)
ctor0IL.MarkSequencePoint(doc10, 32, 1, 32, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, IsValInRef)
ctor0IL.MarkSequencePoint(doc10, 33, 1, 33, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, Conv)
ctor0IL.MarkSequencePoint(doc10, 34, 1, 34, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, TTok)
ctor0IL.MarkSequencePoint(doc10, 35, 1, 35, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, IsArr)
ctor0IL.MarkSequencePoint(doc10, 36, 1, 36, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, ArrLoc)
ctor0IL.MarkSequencePoint(doc10, 37, 1, 37, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, DoNeg)
ctor0IL.MarkSequencePoint(doc10, 38, 1, 38, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, DoNot)
ctor0IL.MarkSequencePoint(doc10, 39, 1, 39, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, OrdOp)
ctor0IL.MarkSequencePoint(doc10, 40, 1, 40, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, MemberAccessFlg)
ctor0IL.MarkSequencePoint(doc10, 41, 1, 41, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, MemberToAccess)
ctor0IL.MarkSequencePoint(doc10, 42, 1, 42, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = Ident.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc10, 45, 1, 45, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc10, 46, 1, 46, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetField("Value"))
ctor1IL.MarkSequencePoint(doc10, 47, 1, 47, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetField("Line"))
ctor1IL.MarkSequencePoint(doc10, 48, 1, 48, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, IsRef)
ctor1IL.MarkSequencePoint(doc10, 49, 1, 49, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, IsValInRef)
ctor1IL.MarkSequencePoint(doc10, 50, 1, 50, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, IsRef)
ctor1IL.MarkSequencePoint(doc10, 51, 1, 51, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, IsValInRef)
ctor1IL.MarkSequencePoint(doc10, 52, 1, 52, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, Conv)
ctor1IL.MarkSequencePoint(doc10, 53, 1, 53, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor1IL.Emit(OpCodes.Stfld, TTok)
ctor1IL.MarkSequencePoint(doc10, 54, 1, 54, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, IsArr)
ctor1IL.MarkSequencePoint(doc10, 55, 1, 55, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetConstructor(Type.EmptyTypes))
ctor1IL.Emit(OpCodes.Stfld, ArrLoc)
ctor1IL.MarkSequencePoint(doc10, 56, 1, 56, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, DoNeg)
ctor1IL.MarkSequencePoint(doc10, 57, 1, 57, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, DoNot)
ctor1IL.MarkSequencePoint(doc10, 58, 1, 58, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, OrdOp)
ctor1IL.MarkSequencePoint(doc10, 59, 1, 59, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, MemberAccessFlg)
ctor1IL.MarkSequencePoint(doc10, 60, 1, 60, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetConstructor(Type.EmptyTypes))
ctor1IL.Emit(OpCodes.Stfld, MemberToAccess)
ctor1IL.MarkSequencePoint(doc10, 61, 1, 61, 100)
ctor1IL.Emit(OpCodes.Ret)
Ident.CreateType()
End Sub


Dim doc11 As ISymbolDocumentWriter

Sub Attribute()
Dim Attribute As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Attributes" & "." & "Attribute", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
Attribute.CreateType()
End Sub

Sub HideBySigAttr()
Dim HideBySigAttr As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Attributes" & "." & "HideBySigAttr", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute"))
HideBySigAttr.CreateType()
End Sub

Sub SpecialNameAttr()
Dim SpecialNameAttr As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Attributes" & "." & "SpecialNameAttr", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute"))
SpecialNameAttr.CreateType()
End Sub

Sub PrivateAttr()
Dim PrivateAttr As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Attributes" & "." & "PrivateAttr", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute"))
PrivateAttr.CreateType()
End Sub

Sub PublicAttr()
Dim PublicAttr As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Attributes" & "." & "PublicAttr", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute"))
PublicAttr.CreateType()
End Sub

Sub StaticAttr()
Dim StaticAttr As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Attributes" & "." & "StaticAttr", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute"))
StaticAttr.CreateType()
End Sub

Sub VirtualAttr()
Dim VirtualAttr As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Attributes" & "." & "VirtualAttr", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute"))
VirtualAttr.CreateType()
End Sub

Sub AbstractAttr()
Dim AbstractAttr As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Attributes" & "." & "AbstractAttr", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute"))
AbstractAttr.CreateType()
End Sub

Sub NewSlotAttr()
Dim NewSlotAttr As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Attributes" & "." & "NewSlotAttr", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute"))
NewSlotAttr.CreateType()
End Sub

Sub PinvokeImplAttr()
Dim PinvokeImplAttr As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Attributes" & "." & "PinvokeImplAttr", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute"))
PinvokeImplAttr.CreateType()
End Sub

Sub HasDefaultAttr()
Dim HasDefaultAttr As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Attributes" & "." & "HasDefaultAttr", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute"))
HasDefaultAttr.CreateType()
End Sub

Sub NoneAttr()
Dim NoneAttr As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Attributes" & "." & "NoneAttr", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute"))
NoneAttr.CreateType()
End Sub

Sub AutoClassAttr()
Dim AutoClassAttr As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Attributes" & "." & "AutoClassAttr", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute"))
AutoClassAttr.CreateType()
End Sub

Sub AnsiClassAttr()
Dim AnsiClassAttr As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Attributes" & "." & "AnsiClassAttr", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute"))
AnsiClassAttr.CreateType()
End Sub

Sub BeforeFieldInitAttr()
Dim BeforeFieldInitAttr As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Attributes" & "." & "BeforeFieldInitAttr", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute"))
BeforeFieldInitAttr.CreateType()
End Sub

Sub SealedAttr()
Dim SealedAttr As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Attributes" & "." & "SealedAttr", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute"))
SealedAttr.CreateType()
End Sub

Sub InterfaceAttr()
Dim InterfaceAttr As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Attributes" & "." & "InterfaceAttr", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute"))
InterfaceAttr.CreateType()
End Sub

Sub InitOnlyAttr()
Dim InitOnlyAttr As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Attributes" & "." & "InitOnlyAttr", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute"))
InitOnlyAttr.CreateType()
End Sub

Sub LiteralAttr()
Dim LiteralAttr As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Attributes" & "." & "LiteralAttr", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute"))
LiteralAttr.CreateType()
End Sub

Sub AssemblyAttr()
Dim AssemblyAttr As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Attributes" & "." & "AssemblyAttr", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute"))
AssemblyAttr.CreateType()
End Sub

Sub SequentialLayoutAttr()
Dim SequentialLayoutAttr As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Attributes" & "." & "SequentialLayoutAttr", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute"))
SequentialLayoutAttr.CreateType()
End Sub

Sub AutoLayoutAttr()
Dim AutoLayoutAttr As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Attributes" & "." & "AutoLayoutAttr", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute"))
AutoLayoutAttr.CreateType()
End Sub


Dim doc12 As ISymbolDocumentWriter

Sub ConditionalOp()
Dim ConditionalOp As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Ops" & "." & "ConditionalOp", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.Op"))
ConditionalOp.CreateType()
End Sub

Sub EqOp()
Dim EqOp As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Ops" & "." & "EqOp", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp"))
Dim ctor0 As ConstructorBuilder = EqOp.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc12, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc12, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(8))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp").GetField("PrecNo"))
ctor0IL.MarkSequencePoint(doc12, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp").GetField("LChild"))
ctor0IL.MarkSequencePoint(doc12, 21, 1, 21, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp").GetField("RChild"))
ctor0IL.MarkSequencePoint(doc12, 22, 1, 22, 100)
ctor0IL.Emit(OpCodes.Ret)
EqOp.CreateType()
End Sub

Sub LikeOp()
Dim LikeOp As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Ops" & "." & "LikeOp", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp"))
Dim ctor0 As ConstructorBuilder = LikeOp.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc12, 30, 1, 30, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc12, 31, 1, 31, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(8))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp").GetField("PrecNo"))
ctor0IL.MarkSequencePoint(doc12, 32, 1, 32, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp").GetField("LChild"))
ctor0IL.MarkSequencePoint(doc12, 33, 1, 33, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp").GetField("RChild"))
ctor0IL.MarkSequencePoint(doc12, 34, 1, 34, 100)
ctor0IL.Emit(OpCodes.Ret)
LikeOp.CreateType()
End Sub

Sub NeqOp()
Dim NeqOp As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Ops" & "." & "NeqOp", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp"))
Dim ctor0 As ConstructorBuilder = NeqOp.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc12, 44, 1, 44, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc12, 45, 1, 45, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(8))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp").GetField("PrecNo"))
ctor0IL.MarkSequencePoint(doc12, 46, 1, 46, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp").GetField("LChild"))
ctor0IL.MarkSequencePoint(doc12, 47, 1, 47, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp").GetField("RChild"))
ctor0IL.MarkSequencePoint(doc12, 48, 1, 48, 100)
ctor0IL.Emit(OpCodes.Ret)
NeqOp.CreateType()
End Sub

Sub NLikeOp()
Dim NLikeOp As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Ops" & "." & "NLikeOp", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp"))
Dim ctor0 As ConstructorBuilder = NLikeOp.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc12, 56, 1, 56, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc12, 57, 1, 57, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(8))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp").GetField("PrecNo"))
ctor0IL.MarkSequencePoint(doc12, 58, 1, 58, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp").GetField("LChild"))
ctor0IL.MarkSequencePoint(doc12, 59, 1, 59, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp").GetField("RChild"))
ctor0IL.MarkSequencePoint(doc12, 60, 1, 60, 100)
ctor0IL.Emit(OpCodes.Ret)
NLikeOp.CreateType()
End Sub

Sub GtOp()
Dim GtOp As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Ops" & "." & "GtOp", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp"))
Dim ctor0 As ConstructorBuilder = GtOp.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc12, 69, 1, 69, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc12, 70, 1, 70, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(9))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp").GetField("PrecNo"))
ctor0IL.MarkSequencePoint(doc12, 71, 1, 71, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp").GetField("LChild"))
ctor0IL.MarkSequencePoint(doc12, 72, 1, 72, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp").GetField("RChild"))
ctor0IL.MarkSequencePoint(doc12, 73, 1, 73, 100)
ctor0IL.Emit(OpCodes.Ret)
GtOp.CreateType()
End Sub

Sub LtOp()
Dim LtOp As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Ops" & "." & "LtOp", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp"))
Dim ctor0 As ConstructorBuilder = LtOp.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc12, 81, 1, 81, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc12, 82, 1, 82, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(9))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp").GetField("PrecNo"))
ctor0IL.MarkSequencePoint(doc12, 83, 1, 83, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp").GetField("LChild"))
ctor0IL.MarkSequencePoint(doc12, 84, 1, 84, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp").GetField("RChild"))
ctor0IL.MarkSequencePoint(doc12, 85, 1, 85, 100)
ctor0IL.Emit(OpCodes.Ret)
LtOp.CreateType()
End Sub

Sub GeOp()
Dim GeOp As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Ops" & "." & "GeOp", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp"))
Dim ctor0 As ConstructorBuilder = GeOp.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc12, 93, 1, 93, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc12, 94, 1, 94, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(9))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp").GetField("PrecNo"))
ctor0IL.MarkSequencePoint(doc12, 95, 1, 95, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp").GetField("LChild"))
ctor0IL.MarkSequencePoint(doc12, 96, 1, 96, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp").GetField("RChild"))
ctor0IL.MarkSequencePoint(doc12, 97, 1, 97, 100)
ctor0IL.Emit(OpCodes.Ret)
GeOp.CreateType()
End Sub

Sub LeOp()
Dim LeOp As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Ops" & "." & "LeOp", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp"))
Dim ctor0 As ConstructorBuilder = LeOp.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc12, 105, 1, 105, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc12, 106, 1, 106, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(9))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp").GetField("PrecNo"))
ctor0IL.MarkSequencePoint(doc12, 107, 1, 107, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp").GetField("LChild"))
ctor0IL.MarkSequencePoint(doc12, 108, 1, 108, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp").GetField("RChild"))
ctor0IL.MarkSequencePoint(doc12, 109, 1, 109, 100)
ctor0IL.Emit(OpCodes.Ret)
LeOp.CreateType()
End Sub


Dim doc13 As ISymbolDocumentWriter

Sub NewarrTok()
Dim NewarrTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "NewarrTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
NewarrTok.CreateType()
End Sub

Sub NewTok()
Dim NewTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "NewTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
NewTok.CreateType()
End Sub

Sub CastclassTok()
Dim CastclassTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "CastclassTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
CastclassTok.CreateType()
End Sub

Sub GettypeTok()
Dim GettypeTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "GettypeTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
GettypeTok.CreateType()
End Sub

Sub PtrTok()
Dim PtrTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "PtrTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
PtrTok.CreateType()
End Sub

Sub DependTok()
Dim DependTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "DependTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
DependTok.CreateType()
End Sub

Sub StdasmTok()
Dim StdasmTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "StdasmTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
StdasmTok.CreateType()
End Sub

Sub SwitchTok()
Dim SwitchTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "SwitchTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
SwitchTok.CreateType()
End Sub

Sub OnTok()
Dim OnTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "OnTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.SwitchTok"))
OnTok.CreateType()
End Sub

Sub OfTok()
Dim OfTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "OfTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
OfTok.CreateType()
End Sub

Sub OffTok()
Dim OffTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "OffTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.SwitchTok"))
OffTok.CreateType()
End Sub

Sub SingTok()
Dim SingTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "SingTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
SingTok.CreateType()
End Sub

Sub DebugTok()
Dim DebugTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "DebugTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
DebugTok.CreateType()
End Sub

Sub MakeasmTok()
Dim MakeasmTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "MakeasmTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
MakeasmTok.CreateType()
End Sub

Sub RefasmTok()
Dim RefasmTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "RefasmTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
RefasmTok.CreateType()
End Sub

Sub NewresTok()
Dim NewresTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "NewresTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
NewresTok.CreateType()
End Sub

Sub ImageTok()
Dim ImageTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "ImageTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ImageTok.CreateType()
End Sub

Sub ImportTok()
Dim ImportTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "ImportTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ImportTok.CreateType()
End Sub

Sub LocimportTok()
Dim LocimportTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "LocimportTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
LocimportTok.CreateType()
End Sub

Sub AssemblyTok()
Dim AssemblyTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "AssemblyTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
AssemblyTok.CreateType()
End Sub

Sub ExeTok()
Dim ExeTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "ExeTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ExeTok.CreateType()
End Sub

Sub DllTok()
Dim DllTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "DllTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
DllTok.CreateType()
End Sub

Sub VerTok()
Dim VerTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "VerTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
VerTok.CreateType()
End Sub

Sub IncludeTok()
Dim IncludeTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "IncludeTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
IncludeTok.CreateType()
End Sub

Sub XmldocTok()
Dim XmldocTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "XmldocTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
XmldocTok.CreateType()
End Sub

Sub NamespaceTok()
Dim NamespaceTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "NamespaceTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
NamespaceTok.CreateType()
End Sub

Sub ClassTok()
Dim ClassTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "ClassTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ClassTok.CreateType()
End Sub

Sub ExtendsTok()
Dim ExtendsTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "ExtendsTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ExtendsTok.CreateType()
End Sub

Sub EnumTok()
Dim EnumTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "EnumTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
EnumTok.CreateType()
End Sub

Sub FieldTok()
Dim FieldTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "FieldTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
FieldTok.CreateType()
End Sub

Sub PropertyTok()
Dim PropertyTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "PropertyTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
PropertyTok.CreateType()
End Sub

Sub GetTok()
Dim GetTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "GetTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
GetTok.CreateType()
End Sub

Sub SetTok()
Dim SetTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "SetTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
SetTok.CreateType()
End Sub

Sub MethodTok()
Dim MethodTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "MethodTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
MethodTok.CreateType()
End Sub

Sub TryTok()
Dim TryTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "TryTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
TryTok.CreateType()
End Sub

Sub CatchTok()
Dim CatchTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "CatchTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
CatchTok.CreateType()
End Sub

Sub AsTok()
Dim AsTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "AsTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
AsTok.CreateType()
End Sub

Sub FinallyTok()
Dim FinallyTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "FinallyTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
FinallyTok.CreateType()
End Sub

Sub LabelTok()
Dim LabelTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "LabelTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
LabelTok.CreateType()
End Sub

Sub PlaceTok()
Dim PlaceTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "PlaceTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
PlaceTok.CreateType()
End Sub

Sub GotoTok()
Dim GotoTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "GotoTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
GotoTok.CreateType()
End Sub

Sub IfTok()
Dim IfTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "IfTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
IfTok.CreateType()
End Sub

Sub ElseIfTok()
Dim ElseIfTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "ElseIfTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ElseIfTok.CreateType()
End Sub

Sub ThenTok()
Dim ThenTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "ThenTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ThenTok.CreateType()
End Sub

Sub LiteralTok()
Dim LiteralTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "LiteralTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
LiteralTok.CreateType()
End Sub

Sub VarTok()
Dim VarTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "VarTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
VarTok.CreateType()
End Sub

Sub ElseTok()
Dim ElseTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "ElseTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ElseTok.CreateType()
End Sub

Sub ReturnTok()
Dim ReturnTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "ReturnTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ReturnTok.CreateType()
End Sub

Sub ThrowTok()
Dim ThrowTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "ThrowTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ThrowTok.CreateType()
End Sub

Sub EndTok()
Dim EndTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "EndTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
EndTok.CreateType()
End Sub


Dim doc14 As ISymbolDocumentWriter

Sub CommentTok()
Dim CommentTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "CommentTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
CommentTok.CreateType()
End Sub


Dim doc15 As ISymbolDocumentWriter

Sub MethodNameTok()
Dim MethodNameTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "MethodNameTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ident"))
MethodNameTok.CreateType()
End Sub

Sub MethodCallTok()
Dim MethodCallTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "MethodCallTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
Dim Name As FieldBuilder = MethodCallTok.DefineField("Name", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.MethodNameTok"), FieldAttributes.Public)
Dim Params As FieldBuilder = MethodCallTok.DefineField("Params", asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").MakeArrayType(), FieldAttributes.Public)
Dim PopFlg As FieldBuilder = MethodCallTok.DefineField("PopFlg", GetType(System.Boolean), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = MethodCallTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc15, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc15, 21, 1, 21, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetField("Value"))
ctor0IL.MarkSequencePoint(doc15, 22, 1, 22, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetField("Line"))
ctor0IL.MarkSequencePoint(doc15, 23, 1, 23, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.MethodNameTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, Name)
ctor0IL.MarkSequencePoint(doc15, 24, 1, 24, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, PopFlg)
ctor0IL.MarkSequencePoint(doc15, 25, 1, 25, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr"))
ctor0IL.Emit(OpCodes.Stfld, Params)
ctor0IL.MarkSequencePoint(doc15, 26, 1, 26, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = MethodCallTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc15, 29, 1, 29, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc15, 30, 1, 30, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetField("Value"))
ctor1IL.MarkSequencePoint(doc15, 31, 1, 31, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetField("Line"))
ctor1IL.MarkSequencePoint(doc15, 32, 1, 32, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.MethodNameTok").GetConstructor(Type.EmptyTypes))
ctor1IL.Emit(OpCodes.Stfld, Name)
ctor1IL.MarkSequencePoint(doc15, 33, 1, 33, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, PopFlg)
ctor1IL.MarkSequencePoint(doc15, 34, 1, 34, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Conv_U)
ctor1IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr"))
ctor1IL.Emit(OpCodes.Stfld, Params)
ctor1IL.MarkSequencePoint(doc15, 35, 1, 35, 100)
ctor1IL.Emit(OpCodes.Ret)
Dim typ1(-1) As Type
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr")
Dim AddParam As MethodBuilder = MethodCallTok.DefineMethod("AddParam", MethodAttributes.Public, GetType(System.Void), typ1)
Dim AddParamIL As ILGenerator = AddParam.GetILGenerator()
Dim AddParamparam01 As ParameterBuilder = AddParam.DefineParameter(1, ParameterAttributes.None, "paramtoadd")
AddParamIL.MarkSequencePoint(doc15, 39, 1, 39, 100)
Dim locbldr26 As LocalBuilder = AddParamIL.DeclareLocal(GetType(System.Int32))
locbldr26.SetLocalSymInfo("len")
AddParamIL.Emit(OpCodes.Ldarg_0)
AddParamIL.Emit(OpCodes.Ldfld, Params)
Typ = Params.FieldType
AddParamIL.Emit(OpCodes.Ldlen)
AddParamIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Stloc, 0)
AddParamIL.MarkSequencePoint(doc15, 40, 1, 40, 100)
Dim locbldr27 As LocalBuilder = AddParamIL.DeclareLocal(GetType(System.Int32))
locbldr27.SetLocalSymInfo("destl")
AddParamIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Add)
AddParamIL.Emit(OpCodes.Stloc, 1)
AddParamIL.MarkSequencePoint(doc15, 41, 1, 41, 100)
Dim locbldr28 As LocalBuilder = AddParamIL.DeclareLocal(GetType(System.Int32))
locbldr28.SetLocalSymInfo("stopel")
AddParamIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Sub)
AddParamIL.Emit(OpCodes.Stloc, 2)
AddParamIL.MarkSequencePoint(doc15, 42, 1, 42, 100)
Dim locbldr29 As LocalBuilder = AddParamIL.DeclareLocal(GetType(System.Int32))
locbldr29.SetLocalSymInfo("i")
AddParamIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Stloc, 3)
AddParamIL.MarkSequencePoint(doc15, 44, 1, 44, 100)
Dim locbldr30 As LocalBuilder = AddParamIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").MakeArrayType())
locbldr30.SetLocalSymInfo("destarr")
AddParamIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Conv_U)
AddParamIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr"))
AddParamIL.Emit(OpCodes.Stloc, 4)
AddParamIL.MarkSequencePoint(doc15, 46, 1, 46, 100)
Dim label0 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
AddParamIL.MarkSequencePoint(doc15, 47, 1, 47, 100)
Dim label1 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
AddParamIL.MarkSequencePoint(doc15, 49, 1, 49, 100)
AddParamIL.MarkLabel(label0)
AddParamIL.MarkSequencePoint(doc15, 51, 1, 51, 100)
AddParamIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Add)
AddParamIL.Emit(OpCodes.Stloc, 3)
AddParamIL.MarkSequencePoint(doc15, 53, 1, 53, 100)
AddParamIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa17 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
Dim tru17 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
Dim cont17 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
AddParamIL.Emit(OpCodes.Bgt, tru17)
AddParamIL.Emit(OpCodes.Br, fa17)
AddParamIL.MarkLabel(tru17)
AddParamIL.MarkSequencePoint(doc15, 55, 1, 55, 100)
AddParamIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").MakeArrayType()
Typ02 = Typ
AddParamIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddParamIL.Emit(OpCodes.Ldarg_0)
AddParamIL.Emit(OpCodes.Ldfld, Params)
Typ = Params.FieldType
Typ02 = Typ
AddParamIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddParamIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddParamIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").MakeArrayType().GetElementType())
AddParamIL.MarkSequencePoint(doc15, 57, 1, 57, 100)
AddParamIL.Emit(OpCodes.Br, cont17)
AddParamIL.MarkLabel(fa17)
AddParamIL.Emit(OpCodes.Br, cont17)
AddParamIL.MarkLabel(cont17)
AddParamIL.MarkSequencePoint(doc15, 59, 1, 59, 100)
AddParamIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa18 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
Dim tru18 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
Dim cont18 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
AddParamIL.Emit(OpCodes.Beq, tru18)
AddParamIL.Emit(OpCodes.Br, fa18)
AddParamIL.MarkLabel(tru18)
AddParamIL.MarkSequencePoint(doc15, 60, 1, 60, 100)
AddParamIL.Emit(OpCodes.Br, label1)
AddParamIL.MarkSequencePoint(doc15, 61, 1, 61, 100)
AddParamIL.Emit(OpCodes.Br, cont18)
AddParamIL.MarkLabel(fa18)
AddParamIL.MarkSequencePoint(doc15, 62, 1, 62, 100)
AddParamIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa19 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
Dim tru19 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
Dim cont19 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
AddParamIL.Emit(OpCodes.Beq, fa19)
AddParamIL.Emit(OpCodes.Br, tru19)
AddParamIL.MarkLabel(tru19)
AddParamIL.MarkSequencePoint(doc15, 63, 1, 63, 100)
AddParamIL.Emit(OpCodes.Br, label0)
AddParamIL.MarkSequencePoint(doc15, 64, 1, 64, 100)
AddParamIL.Emit(OpCodes.Br, cont19)
AddParamIL.MarkLabel(fa19)
AddParamIL.MarkSequencePoint(doc15, 65, 1, 65, 100)
AddParamIL.Emit(OpCodes.Br, label1)
AddParamIL.MarkSequencePoint(doc15, 66, 1, 66, 100)
AddParamIL.Emit(OpCodes.Br, cont19)
AddParamIL.MarkLabel(cont19)
AddParamIL.MarkSequencePoint(doc15, 67, 1, 67, 100)
AddParamIL.Emit(OpCodes.Br, cont18)
AddParamIL.MarkLabel(cont18)
AddParamIL.MarkSequencePoint(doc15, 69, 1, 69, 100)
AddParamIL.MarkLabel(label1)
AddParamIL.MarkSequencePoint(doc15, 71, 1, 71, 100)
AddParamIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa20 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
Dim tru20 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
Dim cont20 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
AddParamIL.Emit(OpCodes.Beq, tru20)
AddParamIL.Emit(OpCodes.Br, fa20)
AddParamIL.MarkLabel(tru20)
AddParamIL.MarkSequencePoint(doc15, 72, 1, 72, 100)
AddParamIL.Emit(OpCodes.Ldarg_0)
AddParamIL.Emit(OpCodes.Ldarg, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr")
AddParamIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetField("Line"))
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetField("Line").FieldType
AddParamIL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetField("Line"))
AddParamIL.MarkSequencePoint(doc15, 73, 1, 73, 100)
AddParamIL.Emit(OpCodes.Br, cont20)
AddParamIL.MarkLabel(fa20)
AddParamIL.Emit(OpCodes.Br, cont20)
AddParamIL.MarkLabel(cont20)
AddParamIL.MarkSequencePoint(doc15, 75, 1, 75, 100)
AddParamIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").MakeArrayType()
Typ02 = Typ
AddParamIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddParamIL.Emit(OpCodes.Ldarg, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr")
AddParamIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").MakeArrayType().GetElementType())
AddParamIL.MarkSequencePoint(doc15, 77, 1, 77, 100)
AddParamIL.Emit(OpCodes.Ldarg_0)
AddParamIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").MakeArrayType()
AddParamIL.Emit(OpCodes.Stfld, Params)
AddParamIL.MarkSequencePoint(doc15, 79, 1, 79, 100)
AddParamIL.Emit(OpCodes.Ret)
MethodCallTok.CreateType()
End Sub

Sub NewCallTok()
Dim NewCallTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "NewCallTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
Dim Name As FieldBuilder = NewCallTok.DefineField("Name", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"), FieldAttributes.Public)
Dim Params As FieldBuilder = NewCallTok.DefineField("Params", asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").MakeArrayType(), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = NewCallTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc15, 90, 1, 90, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc15, 91, 1, 91, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetField("Value"))
ctor0IL.MarkSequencePoint(doc15, 92, 1, 92, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetField("Line"))
ctor0IL.MarkSequencePoint(doc15, 93, 1, 93, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, Name)
ctor0IL.MarkSequencePoint(doc15, 94, 1, 94, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr"))
ctor0IL.Emit(OpCodes.Stfld, Params)
ctor0IL.MarkSequencePoint(doc15, 95, 1, 95, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = NewCallTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc15, 98, 1, 98, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc15, 99, 1, 99, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetField("Value"))
ctor1IL.MarkSequencePoint(doc15, 100, 1, 100, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetField("Line"))
ctor1IL.MarkSequencePoint(doc15, 101, 1, 101, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor1IL.Emit(OpCodes.Stfld, Name)
ctor1IL.MarkSequencePoint(doc15, 102, 1, 102, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Conv_U)
ctor1IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr"))
ctor1IL.Emit(OpCodes.Stfld, Params)
ctor1IL.MarkSequencePoint(doc15, 103, 1, 103, 100)
ctor1IL.Emit(OpCodes.Ret)
Dim typ1(-1) As Type
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr")
Dim AddParam As MethodBuilder = NewCallTok.DefineMethod("AddParam", MethodAttributes.Public, GetType(System.Void), typ1)
Dim AddParamIL As ILGenerator = AddParam.GetILGenerator()
Dim AddParamparam01 As ParameterBuilder = AddParam.DefineParameter(1, ParameterAttributes.None, "paramtoadd")
AddParamIL.MarkSequencePoint(doc15, 107, 1, 107, 100)
Dim locbldr31 As LocalBuilder = AddParamIL.DeclareLocal(GetType(System.Int32))
locbldr31.SetLocalSymInfo("len")
AddParamIL.Emit(OpCodes.Ldarg_0)
AddParamIL.Emit(OpCodes.Ldfld, Params)
Typ = Params.FieldType
AddParamIL.Emit(OpCodes.Ldlen)
AddParamIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Stloc, 0)
AddParamIL.MarkSequencePoint(doc15, 108, 1, 108, 100)
Dim locbldr32 As LocalBuilder = AddParamIL.DeclareLocal(GetType(System.Int32))
locbldr32.SetLocalSymInfo("destl")
AddParamIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Add)
AddParamIL.Emit(OpCodes.Stloc, 1)
AddParamIL.MarkSequencePoint(doc15, 109, 1, 109, 100)
Dim locbldr33 As LocalBuilder = AddParamIL.DeclareLocal(GetType(System.Int32))
locbldr33.SetLocalSymInfo("stopel")
AddParamIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Sub)
AddParamIL.Emit(OpCodes.Stloc, 2)
AddParamIL.MarkSequencePoint(doc15, 110, 1, 110, 100)
Dim locbldr34 As LocalBuilder = AddParamIL.DeclareLocal(GetType(System.Int32))
locbldr34.SetLocalSymInfo("i")
AddParamIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Stloc, 3)
AddParamIL.MarkSequencePoint(doc15, 112, 1, 112, 100)
Dim locbldr35 As LocalBuilder = AddParamIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").MakeArrayType())
locbldr35.SetLocalSymInfo("destarr")
AddParamIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Conv_U)
AddParamIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr"))
AddParamIL.Emit(OpCodes.Stloc, 4)
AddParamIL.MarkSequencePoint(doc15, 114, 1, 114, 100)
Dim label0 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
AddParamIL.MarkSequencePoint(doc15, 115, 1, 115, 100)
Dim label1 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
AddParamIL.MarkSequencePoint(doc15, 117, 1, 117, 100)
AddParamIL.MarkLabel(label0)
AddParamIL.MarkSequencePoint(doc15, 119, 1, 119, 100)
AddParamIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Add)
AddParamIL.Emit(OpCodes.Stloc, 3)
AddParamIL.MarkSequencePoint(doc15, 121, 1, 121, 100)
AddParamIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa21 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
Dim tru21 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
Dim cont21 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
AddParamIL.Emit(OpCodes.Bgt, tru21)
AddParamIL.Emit(OpCodes.Br, fa21)
AddParamIL.MarkLabel(tru21)
AddParamIL.MarkSequencePoint(doc15, 123, 1, 123, 100)
AddParamIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").MakeArrayType()
Typ02 = Typ
AddParamIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddParamIL.Emit(OpCodes.Ldarg_0)
AddParamIL.Emit(OpCodes.Ldfld, Params)
Typ = Params.FieldType
Typ02 = Typ
AddParamIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddParamIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddParamIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").MakeArrayType().GetElementType())
AddParamIL.MarkSequencePoint(doc15, 125, 1, 125, 100)
AddParamIL.Emit(OpCodes.Br, cont21)
AddParamIL.MarkLabel(fa21)
AddParamIL.Emit(OpCodes.Br, cont21)
AddParamIL.MarkLabel(cont21)
AddParamIL.MarkSequencePoint(doc15, 127, 1, 127, 100)
AddParamIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa22 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
Dim tru22 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
Dim cont22 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
AddParamIL.Emit(OpCodes.Beq, tru22)
AddParamIL.Emit(OpCodes.Br, fa22)
AddParamIL.MarkLabel(tru22)
AddParamIL.MarkSequencePoint(doc15, 128, 1, 128, 100)
AddParamIL.Emit(OpCodes.Br, label1)
AddParamIL.MarkSequencePoint(doc15, 129, 1, 129, 100)
AddParamIL.Emit(OpCodes.Br, cont22)
AddParamIL.MarkLabel(fa22)
AddParamIL.MarkSequencePoint(doc15, 130, 1, 130, 100)
AddParamIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa23 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
Dim tru23 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
Dim cont23 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
AddParamIL.Emit(OpCodes.Beq, fa23)
AddParamIL.Emit(OpCodes.Br, tru23)
AddParamIL.MarkLabel(tru23)
AddParamIL.MarkSequencePoint(doc15, 131, 1, 131, 100)
AddParamIL.Emit(OpCodes.Br, label0)
AddParamIL.MarkSequencePoint(doc15, 132, 1, 132, 100)
AddParamIL.Emit(OpCodes.Br, cont23)
AddParamIL.MarkLabel(fa23)
AddParamIL.MarkSequencePoint(doc15, 133, 1, 133, 100)
AddParamIL.Emit(OpCodes.Br, label1)
AddParamIL.MarkSequencePoint(doc15, 134, 1, 134, 100)
AddParamIL.Emit(OpCodes.Br, cont23)
AddParamIL.MarkLabel(cont23)
AddParamIL.MarkSequencePoint(doc15, 135, 1, 135, 100)
AddParamIL.Emit(OpCodes.Br, cont22)
AddParamIL.MarkLabel(cont22)
AddParamIL.MarkSequencePoint(doc15, 137, 1, 137, 100)
AddParamIL.MarkLabel(label1)
AddParamIL.MarkSequencePoint(doc15, 139, 1, 139, 100)
AddParamIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa24 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
Dim tru24 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
Dim cont24 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
AddParamIL.Emit(OpCodes.Beq, tru24)
AddParamIL.Emit(OpCodes.Br, fa24)
AddParamIL.MarkLabel(tru24)
AddParamIL.MarkSequencePoint(doc15, 140, 1, 140, 100)
AddParamIL.Emit(OpCodes.Ldarg_0)
AddParamIL.Emit(OpCodes.Ldarg, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr")
AddParamIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetField("Line"))
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetField("Line").FieldType
AddParamIL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetField("Line"))
AddParamIL.MarkSequencePoint(doc15, 141, 1, 141, 100)
AddParamIL.Emit(OpCodes.Br, cont24)
AddParamIL.MarkLabel(fa24)
AddParamIL.Emit(OpCodes.Br, cont24)
AddParamIL.MarkLabel(cont24)
AddParamIL.MarkSequencePoint(doc15, 143, 1, 143, 100)
AddParamIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").MakeArrayType()
Typ02 = Typ
AddParamIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddParamIL.Emit(OpCodes.Ldarg, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr")
AddParamIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").MakeArrayType().GetElementType())
AddParamIL.MarkSequencePoint(doc15, 145, 1, 145, 100)
AddParamIL.Emit(OpCodes.Ldarg_0)
AddParamIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").MakeArrayType()
AddParamIL.Emit(OpCodes.Stfld, Params)
AddParamIL.MarkSequencePoint(doc15, 147, 1, 147, 100)
AddParamIL.Emit(OpCodes.Ret)
NewCallTok.CreateType()
End Sub

Sub GettypeCallTok()
Dim GettypeCallTok As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens" & "." & "GettypeCallTok", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
Dim Name As FieldBuilder = GettypeCallTok.DefineField("Name", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = GettypeCallTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc15, 157, 1, 157, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc15, 158, 1, 158, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetField("Value"))
ctor0IL.MarkSequencePoint(doc15, 159, 1, 159, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetField("Line"))
ctor0IL.MarkSequencePoint(doc15, 160, 1, 160, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, Name)
ctor0IL.MarkSequencePoint(doc15, 161, 1, 161, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
Dim ctor1 As ConstructorBuilder = GettypeCallTok.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "value")
ctor1IL.MarkSequencePoint(doc15, 164, 1, 164, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc15, 165, 1, 165, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetField("Value"))
ctor1IL.MarkSequencePoint(doc15, 166, 1, 166, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetField("Line"))
ctor1IL.MarkSequencePoint(doc15, 167, 1, 167, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor1IL.Emit(OpCodes.Stfld, Name)
ctor1IL.MarkSequencePoint(doc15, 168, 1, 168, 100)
ctor1IL.Emit(OpCodes.Ret)
GettypeCallTok.CreateType()
End Sub


Dim doc16 As ISymbolDocumentWriter

Sub Character()
Dim Character As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Chars" & "." & "Character", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
Character.CreateType()
End Sub

Sub RSParen()
Dim RSParen As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Chars" & "." & "RSParen", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Chars.Character"))
RSParen.CreateType()
End Sub

Sub LSParen()
Dim LSParen As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Chars" & "." & "LSParen", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Chars.Character"))
LSParen.CreateType()
End Sub

Sub LRSParen()
Dim LRSParen As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Chars" & "." & "LRSParen", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Chars.Character"))
LRSParen.CreateType()
End Sub

Sub RAParen()
Dim RAParen As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Chars" & "." & "RAParen", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Chars.Character"))
RAParen.CreateType()
End Sub

Sub LAParen()
Dim LAParen As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Chars" & "." & "LAParen", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Chars.Character"))
LAParen.CreateType()
End Sub

Sub RParen()
Dim RParen As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Chars" & "." & "RParen", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Chars.Character"))
RParen.CreateType()
End Sub

Sub LParen()
Dim LParen As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Chars" & "." & "LParen", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Chars.Character"))
LParen.CreateType()
End Sub

Sub Comma()
Dim Comma As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Chars" & "." & "Comma", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Chars.Character"))
Comma.CreateType()
End Sub

Sub CrLf()
Dim CrLf As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Chars" & "." & "CrLf", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Chars.Character"))
CrLf.CreateType()
End Sub

Sub Cr()
Dim Cr As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Chars" & "." & "Cr", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Chars.Character"))
Cr.CreateType()
End Sub

Sub Lf()
Dim Lf As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Chars" & "." & "Lf", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Chars.Character"))
Lf.CreateType()
End Sub

Sub Pipe()
Dim Pipe As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Chars" & "." & "Pipe", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Chars.Character"))
Pipe.CreateType()
End Sub

Sub Ampersand()
Dim Ampersand As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Chars" & "." & "Ampersand", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Chars.Character"))
Ampersand.CreateType()
End Sub

Sub DollarSign()
Dim DollarSign As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Tokens.Chars" & "." & "DollarSign", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Chars.Character"))
DollarSign.CreateType()
End Sub


Dim doc17 As ISymbolDocumentWriter

Sub NewarrExpr()
Dim NewarrExpr As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Exprs" & "." & "NewarrExpr", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr"))
Dim ArrayType As FieldBuilder = NewarrExpr.DefineField("ArrayType", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"), FieldAttributes.Public)
Dim ArrayLen As FieldBuilder = NewarrExpr.DefineField("ArrayLen", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = NewarrExpr.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc17, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc17, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc17, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetField("Line"))
ctor0IL.MarkSequencePoint(doc17, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, ArrayType)
ctor0IL.MarkSequencePoint(doc17, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, ArrayLen)
ctor0IL.MarkSequencePoint(doc17, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetField("ResultTyp"))
ctor0IL.MarkSequencePoint(doc17, 21, 1, 21, 100)
ctor0IL.Emit(OpCodes.Ret)
NewarrExpr.CreateType()
End Sub


Dim doc18 As ISymbolDocumentWriter

Sub NewExpr()
Dim NewExpr As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Exprs" & "." & "NewExpr", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr"))
Dim MetToCall As FieldBuilder = NewExpr.DefineField("MetToCall", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.MethodCallTok"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = NewExpr.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc18, 14, 1, 14, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc18, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc18, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetField("Line"))
ctor0IL.MarkSequencePoint(doc18, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.MethodCallTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, MetToCall)
ctor0IL.MarkSequencePoint(doc18, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetField("ResultTyp"))
ctor0IL.MarkSequencePoint(doc18, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ret)
NewExpr.CreateType()
End Sub


Dim doc19 As ISymbolDocumentWriter

Sub CastclassExpr()
Dim CastclassExpr As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Exprs" & "." & "CastclassExpr", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr"))
Dim Obj As FieldBuilder = CastclassExpr.DefineField("Obj", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"), FieldAttributes.Public)
Dim DestType As FieldBuilder = CastclassExpr.DefineField("DestType", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = CastclassExpr.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc19, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc19, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc19, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetField("Line"))
ctor0IL.MarkSequencePoint(doc19, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, Obj)
ctor0IL.MarkSequencePoint(doc19, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, DestType)
ctor0IL.MarkSequencePoint(doc19, 21, 1, 21, 100)
ctor0IL.Emit(OpCodes.Ret)
CastclassExpr.CreateType()
End Sub


Dim doc20 As ISymbolDocumentWriter

Sub GettypeExpr()
Dim GettypeExpr As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Exprs" & "." & "GettypeExpr", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr"))
Dim TypeToGet As FieldBuilder = GettypeExpr.DefineField("TypeToGet", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = GettypeExpr.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc20, 14, 1, 14, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc20, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc20, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetField("Line"))
ctor0IL.MarkSequencePoint(doc20, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, TypeToGet)
ctor0IL.MarkSequencePoint(doc20, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ret)
GettypeExpr.CreateType()
End Sub


Dim doc21 As ISymbolDocumentWriter

Sub PtrExpr()
Dim PtrExpr As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Exprs" & "." & "PtrExpr", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr"))
Dim MetToCall As FieldBuilder = PtrExpr.DefineField("MetToCall", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.MethodCallTok"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = PtrExpr.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc21, 14, 1, 14, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc21, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc21, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetField("Line"))
ctor0IL.MarkSequencePoint(doc21, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.MethodCallTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, MetToCall)
ctor0IL.MarkSequencePoint(doc21, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetField("ResultTyp"))
ctor0IL.MarkSequencePoint(doc21, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ret)
PtrExpr.CreateType()
End Sub


Dim doc22 As ISymbolDocumentWriter

Sub AritExpr()
Dim AritExpr As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Exprs" & "." & "AritExpr", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr"))
AritExpr.CreateType()
End Sub

Sub LogicExpr()
Dim LogicExpr As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Exprs" & "." & "LogicExpr", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr"))
LogicExpr.CreateType()
End Sub

Sub VarExpr()
Dim VarExpr As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Exprs" & "." & "VarExpr", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr"))
Dim VarTyp As FieldBuilder = VarExpr.DefineField("VarTyp", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"), FieldAttributes.Public)
Dim VarName As FieldBuilder = VarExpr.DefineField("VarName", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ident"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = VarExpr.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc22, 23, 1, 23, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc22, 24, 1, 24, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc22, 25, 1, 25, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetField("Line"))
ctor0IL.MarkSequencePoint(doc22, 26, 1, 26, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetField("ResultTyp"))
ctor0IL.MarkSequencePoint(doc22, 27, 1, 27, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, VarTyp)
ctor0IL.MarkSequencePoint(doc22, 28, 1, 28, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ident").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, VarName)
ctor0IL.MarkSequencePoint(doc22, 29, 1, 29, 100)
ctor0IL.Emit(OpCodes.Ret)
VarExpr.CreateType()
End Sub


Dim doc23 As ISymbolDocumentWriter

Sub ConditionalExpr()
Dim ConditionalExpr As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Exprs" & "." & "ConditionalExpr", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr"))
Dim LtExpr As FieldBuilder = ConditionalExpr.DefineField("LtExpr", asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr"), FieldAttributes.Public)
Dim RtExpr As FieldBuilder = ConditionalExpr.DefineField("RtExpr", asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr"), FieldAttributes.Public)
Dim CondOP As FieldBuilder = ConditionalExpr.DefineField("CondOP", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = ConditionalExpr.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc23, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc23, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc23, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetField("Line"))
ctor0IL.MarkSequencePoint(doc23, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, LtExpr)
ctor0IL.MarkSequencePoint(doc23, 21, 1, 21, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, RtExpr)
ctor0IL.MarkSequencePoint(doc23, 22, 1, 22, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, CondOP)
ctor0IL.MarkSequencePoint(doc23, 23, 1, 23, 100)
ctor0IL.Emit(OpCodes.Ret)
ConditionalExpr.CreateType()
End Sub


Dim doc24 As ISymbolDocumentWriter

Sub DependStmt()
Dim DependStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "DependStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
Dim Path As FieldBuilder = DependStmt.DefineField("Path", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = DependStmt.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc24, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc24, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc24, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Line"))
ctor0IL.MarkSequencePoint(doc24, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, Path)
ctor0IL.MarkSequencePoint(doc24, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ret)
DependStmt.CreateType()
End Sub


Dim doc25 As ISymbolDocumentWriter

Sub StdasmStmt()
Dim StdasmStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "StdasmStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
Dim Opt As FieldBuilder = StdasmStmt.DefineField("Opt", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.SwitchTok"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = StdasmStmt.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc25, 14, 1, 14, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc25, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc25, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Line"))
ctor0IL.MarkSequencePoint(doc25, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.SwitchTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, Opt)
ctor0IL.MarkSequencePoint(doc25, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ret)
StdasmStmt.CreateType()
End Sub


Dim doc26 As ISymbolDocumentWriter

Sub SingStmt()
Dim SingStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "SingStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
SingStmt.CreateType()
End Sub


Dim doc27 As ISymbolDocumentWriter

Sub DebugStmt()
Dim DebugStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "DebugStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
Dim Opt As FieldBuilder = DebugStmt.DefineField("Opt", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.SwitchTok"), FieldAttributes.Public)
Dim Flg As FieldBuilder = DebugStmt.DefineField("Flg", GetType(System.Boolean), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = DebugStmt.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc27, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc27, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc27, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Line"))
ctor0IL.MarkSequencePoint(doc27, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.SwitchTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, Opt)
ctor0IL.MarkSequencePoint(doc27, 21, 1, 21, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, Flg)
ctor0IL.MarkSequencePoint(doc27, 22, 1, 22, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim setFlg As MethodBuilder = DebugStmt.DefineMethod("setFlg", MethodAttributes.Public, GetType(System.Void), Type.EmptyTypes)
Dim setFlgIL As ILGenerator = setFlg.GetILGenerator()
setFlgIL.MarkSequencePoint(doc27, 26, 1, 26, 100)
Dim label0 As System.Reflection.Emit.Label = setFlgIL.DefineLabel()
setFlgIL.MarkSequencePoint(doc27, 28, 1, 28, 100)
Dim locbldr36 As LocalBuilder = setFlgIL.DeclareLocal(GetType(System.Type))
locbldr36.SetLocalSymInfo("typ")
setFlgIL.MarkSequencePoint(doc27, 29, 1, 29, 100)
Dim locbldr37 As LocalBuilder = setFlgIL.DeclareLocal(GetType(System.Boolean))
locbldr37.SetLocalSymInfo("b")
setFlgIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
setFlgIL.Emit(OpCodes.Stloc, 1)
setFlgIL.MarkSequencePoint(doc27, 31, 1, 31, 100)
setFlgIL.Emit(OpCodes.Ldtoken, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.OnTok"))
Dim typ0 As Type() = {GetType(System.RuntimeTypeHandle)}
setFlgIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ0))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ0).ReturnType
setFlgIL.Emit(OpCodes.Stloc, 0)
setFlgIL.MarkSequencePoint(doc27, 32, 1, 32, 100)
Dim typ1(-1) As Type
setFlgIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
setFlgIL.Emit(OpCodes.Ldarg_0)
setFlgIL.Emit(OpCodes.Ldfld, Opt)
Typ = Opt.FieldType
setFlgIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = Typ
setFlgIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ1))
Typ = Typ03.GetMethod("IsInstanceOfType", typ1).ReturnType
setFlgIL.Emit(OpCodes.Stloc, 1)
setFlgIL.MarkSequencePoint(doc27, 34, 1, 34, 100)
setFlgIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
setFlgIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa25 As System.Reflection.Emit.Label = setFlgIL.DefineLabel()
Dim tru25 As System.Reflection.Emit.Label = setFlgIL.DefineLabel()
Dim cont25 As System.Reflection.Emit.Label = setFlgIL.DefineLabel()
setFlgIL.Emit(OpCodes.Beq, tru25)
setFlgIL.Emit(OpCodes.Br, fa25)
setFlgIL.MarkLabel(tru25)
setFlgIL.MarkSequencePoint(doc27, 35, 1, 35, 100)
setFlgIL.Emit(OpCodes.Ldarg_0)
setFlgIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
setFlgIL.Emit(OpCodes.Stfld, Flg)
setFlgIL.MarkSequencePoint(doc27, 36, 1, 36, 100)
setFlgIL.Emit(OpCodes.Br, label0)
setFlgIL.MarkSequencePoint(doc27, 37, 1, 37, 100)
setFlgIL.Emit(OpCodes.Br, cont25)
setFlgIL.MarkLabel(fa25)
setFlgIL.Emit(OpCodes.Br, cont25)
setFlgIL.MarkLabel(cont25)
setFlgIL.MarkSequencePoint(doc27, 39, 1, 39, 100)
setFlgIL.Emit(OpCodes.Ldtoken, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.OffTok"))
Dim typ2 As Type() = {GetType(System.RuntimeTypeHandle)}
setFlgIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ2))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ2).ReturnType
setFlgIL.Emit(OpCodes.Stloc, 0)
setFlgIL.MarkSequencePoint(doc27, 40, 1, 40, 100)
Dim typ3(-1) As Type
setFlgIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
setFlgIL.Emit(OpCodes.Ldarg_0)
setFlgIL.Emit(OpCodes.Ldfld, Opt)
Typ = Opt.FieldType
setFlgIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = Typ
setFlgIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ3))
Typ = Typ03.GetMethod("IsInstanceOfType", typ3).ReturnType
setFlgIL.Emit(OpCodes.Stloc, 1)
setFlgIL.MarkSequencePoint(doc27, 42, 1, 42, 100)
setFlgIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
setFlgIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa26 As System.Reflection.Emit.Label = setFlgIL.DefineLabel()
Dim tru26 As System.Reflection.Emit.Label = setFlgIL.DefineLabel()
Dim cont26 As System.Reflection.Emit.Label = setFlgIL.DefineLabel()
setFlgIL.Emit(OpCodes.Beq, tru26)
setFlgIL.Emit(OpCodes.Br, fa26)
setFlgIL.MarkLabel(tru26)
setFlgIL.MarkSequencePoint(doc27, 43, 1, 43, 100)
setFlgIL.Emit(OpCodes.Ldarg_0)
setFlgIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
setFlgIL.Emit(OpCodes.Stfld, Flg)
setFlgIL.MarkSequencePoint(doc27, 44, 1, 44, 100)
setFlgIL.Emit(OpCodes.Br, label0)
setFlgIL.MarkSequencePoint(doc27, 45, 1, 45, 100)
setFlgIL.Emit(OpCodes.Br, cont26)
setFlgIL.MarkLabel(fa26)
setFlgIL.Emit(OpCodes.Br, cont26)
setFlgIL.MarkLabel(cont26)
setFlgIL.MarkSequencePoint(doc27, 48, 1, 48, 100)
setFlgIL.MarkLabel(label0)
setFlgIL.MarkSequencePoint(doc27, 50, 1, 50, 100)
setFlgIL.Emit(OpCodes.Ret)
DebugStmt.CreateType()
End Sub


Dim doc28 As ISymbolDocumentWriter

Sub MakeasmStmt()
Dim MakeasmStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "MakeasmStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
Dim Opt As FieldBuilder = MakeasmStmt.DefineField("Opt", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.SwitchTok"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = MakeasmStmt.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc28, 14, 1, 14, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc28, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc28, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Line"))
ctor0IL.MarkSequencePoint(doc28, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.SwitchTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, Opt)
ctor0IL.MarkSequencePoint(doc28, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ret)
MakeasmStmt.CreateType()
End Sub


Dim doc29 As ISymbolDocumentWriter

Sub RefasmStmt()
Dim RefasmStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "RefasmStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
Dim AsmPath As FieldBuilder = RefasmStmt.DefineField("AsmPath", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = RefasmStmt.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc29, 14, 1, 14, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc29, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc29, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Line"))
ctor0IL.MarkSequencePoint(doc29, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, AsmPath)
ctor0IL.MarkSequencePoint(doc29, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ret)
RefasmStmt.CreateType()
End Sub


Dim doc30 As ISymbolDocumentWriter

Sub NewresStmt()
Dim NewresStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "NewresStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
Dim Path As FieldBuilder = NewresStmt.DefineField("Path", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"), FieldAttributes.Public)
Dim ResType As FieldBuilder = NewresStmt.DefineField("ResType", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = NewresStmt.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc30, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc30, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc30, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Line"))
ctor0IL.MarkSequencePoint(doc30, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, Path)
ctor0IL.MarkSequencePoint(doc30, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, ResType)
ctor0IL.MarkSequencePoint(doc30, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ret)
NewresStmt.CreateType()
End Sub


Dim doc31 As ISymbolDocumentWriter

Sub ImportStmt()
Dim ImportStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "ImportStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
Dim NS As FieldBuilder = ImportStmt.DefineField("NS", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = ImportStmt.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc31, 14, 1, 14, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc31, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc31, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Line"))
ctor0IL.MarkSequencePoint(doc31, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, NS)
ctor0IL.MarkSequencePoint(doc31, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ret)
ImportStmt.CreateType()
End Sub

Sub LocimportStmt()
Dim LocimportStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "LocimportStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
Dim NS As FieldBuilder = LocimportStmt.DefineField("NS", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = LocimportStmt.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc31, 27, 1, 27, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc31, 28, 1, 28, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc31, 29, 1, 29, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Line"))
ctor0IL.MarkSequencePoint(doc31, 30, 1, 30, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, NS)
ctor0IL.MarkSequencePoint(doc31, 31, 1, 31, 100)
ctor0IL.Emit(OpCodes.Ret)
LocimportStmt.CreateType()
End Sub


Dim doc32 As ISymbolDocumentWriter

Sub AssemblyStmt()
Dim AssemblyStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "AssemblyStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
Dim Mode As FieldBuilder = AssemblyStmt.DefineField("Mode", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"), FieldAttributes.Public)
Dim AsmName As FieldBuilder = AssemblyStmt.DefineField("AsmName", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ident"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = AssemblyStmt.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc32, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc32, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc32, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Line"))
ctor0IL.MarkSequencePoint(doc32, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, Mode)
ctor0IL.MarkSequencePoint(doc32, 21, 1, 21, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ident").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, AsmName)
ctor0IL.MarkSequencePoint(doc32, 22, 1, 22, 100)
ctor0IL.Emit(OpCodes.Ret)
AssemblyStmt.CreateType()
End Sub


Dim doc33 As ISymbolDocumentWriter

Sub VerStmt()
Dim VerStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "VerStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
Dim VersionNos As FieldBuilder = VerStmt.DefineField("VersionNos", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.IntLiteral").MakeArrayType(), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = VerStmt.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc33, 14, 1, 14, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc33, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc33, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Line"))
ctor0IL.MarkSequencePoint(doc33, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(4))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Literals.IntLiteral"))
ctor0IL.Emit(OpCodes.Stfld, VersionNos)
ctor0IL.MarkSequencePoint(doc33, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ret)
VerStmt.CreateType()
End Sub


Dim doc34 As ISymbolDocumentWriter

Sub IncludeStmt()
Dim IncludeStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "IncludeStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
Dim Path As FieldBuilder = IncludeStmt.DefineField("Path", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = IncludeStmt.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc34, 14, 1, 14, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc34, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc34, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Line"))
ctor0IL.MarkSequencePoint(doc34, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, Path)
ctor0IL.MarkSequencePoint(doc34, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ret)
IncludeStmt.CreateType()
End Sub


Dim doc35 As ISymbolDocumentWriter

Sub XmlDocStmt()
Dim XmlDocStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "XmlDocStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
Dim NodeType As FieldBuilder = XmlDocStmt.DefineField("NodeType", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"), FieldAttributes.Public)
Dim NodePath As FieldBuilder = XmlDocStmt.DefineField("NodePath", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = XmlDocStmt.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc35, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc35, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc35, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Line"))
ctor0IL.MarkSequencePoint(doc35, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, NodeType)
ctor0IL.MarkSequencePoint(doc35, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, NodePath)
ctor0IL.MarkSequencePoint(doc35, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ret)
XmlDocStmt.CreateType()
End Sub


Dim doc36 As ISymbolDocumentWriter

Sub NSStmt()
Dim NSStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "NSStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
Dim NS As FieldBuilder = NSStmt.DefineField("NS", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = NSStmt.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc36, 14, 1, 14, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc36, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc36, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Line"))
ctor0IL.MarkSequencePoint(doc36, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, NS)
ctor0IL.MarkSequencePoint(doc36, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ret)
NSStmt.CreateType()
End Sub


Dim doc37 As ISymbolDocumentWriter

Sub ClassStmt()
Dim ClassStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "ClassStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
Dim Attrs As FieldBuilder = ClassStmt.DefineField("Attrs", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute").MakeArrayType(), FieldAttributes.Public)
Dim ClassName As FieldBuilder = ClassStmt.DefineField("ClassName", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ident"), FieldAttributes.Public)
Dim InhClass As FieldBuilder = ClassStmt.DefineField("InhClass", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = ClassStmt.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc37, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc37, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc37, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Line"))
ctor0IL.MarkSequencePoint(doc37, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute"))
ctor0IL.Emit(OpCodes.Stfld, Attrs)
ctor0IL.MarkSequencePoint(doc37, 21, 1, 21, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ident").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, ClassName)
ctor0IL.MarkSequencePoint(doc37, 22, 1, 22, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, InhClass)
ctor0IL.MarkSequencePoint(doc37, 23, 1, 23, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute")
Dim AddAttr As MethodBuilder = ClassStmt.DefineMethod("AddAttr", MethodAttributes.Public, GetType(System.Void), typ0)
Dim AddAttrIL As ILGenerator = AddAttr.GetILGenerator()
Dim AddAttrparam01 As ParameterBuilder = AddAttr.DefineParameter(1, ParameterAttributes.None, "attrtoadd")
AddAttrIL.MarkSequencePoint(doc37, 27, 1, 27, 100)
Dim locbldr38 As LocalBuilder = AddAttrIL.DeclareLocal(GetType(System.Int32))
locbldr38.SetLocalSymInfo("len")
AddAttrIL.Emit(OpCodes.Ldarg_0)
AddAttrIL.Emit(OpCodes.Ldfld, Attrs)
Typ = Attrs.FieldType
AddAttrIL.Emit(OpCodes.Ldlen)
AddAttrIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Stloc, 0)
AddAttrIL.MarkSequencePoint(doc37, 28, 1, 28, 100)
Dim locbldr39 As LocalBuilder = AddAttrIL.DeclareLocal(GetType(System.Int32))
locbldr39.SetLocalSymInfo("destl")
AddAttrIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Add)
AddAttrIL.Emit(OpCodes.Stloc, 1)
AddAttrIL.MarkSequencePoint(doc37, 29, 1, 29, 100)
Dim locbldr40 As LocalBuilder = AddAttrIL.DeclareLocal(GetType(System.Int32))
locbldr40.SetLocalSymInfo("stopel")
AddAttrIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Sub)
AddAttrIL.Emit(OpCodes.Stloc, 2)
AddAttrIL.MarkSequencePoint(doc37, 30, 1, 30, 100)
Dim locbldr41 As LocalBuilder = AddAttrIL.DeclareLocal(GetType(System.Int32))
locbldr41.SetLocalSymInfo("i")
AddAttrIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Stloc, 3)
AddAttrIL.MarkSequencePoint(doc37, 32, 1, 32, 100)
Dim locbldr42 As LocalBuilder = AddAttrIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute").MakeArrayType())
locbldr42.SetLocalSymInfo("destarr")
AddAttrIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Conv_U)
AddAttrIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute"))
AddAttrIL.Emit(OpCodes.Stloc, 4)
AddAttrIL.MarkSequencePoint(doc37, 34, 1, 34, 100)
Dim label0 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
AddAttrIL.MarkSequencePoint(doc37, 35, 1, 35, 100)
Dim label1 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
AddAttrIL.MarkSequencePoint(doc37, 37, 1, 37, 100)
AddAttrIL.MarkLabel(label0)
AddAttrIL.MarkSequencePoint(doc37, 39, 1, 39, 100)
AddAttrIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Add)
AddAttrIL.Emit(OpCodes.Stloc, 3)
AddAttrIL.MarkSequencePoint(doc37, 41, 1, 41, 100)
AddAttrIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa27 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
Dim tru27 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
Dim cont27 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
AddAttrIL.Emit(OpCodes.Bgt, tru27)
AddAttrIL.Emit(OpCodes.Br, fa27)
AddAttrIL.MarkLabel(tru27)
AddAttrIL.MarkSequencePoint(doc37, 43, 1, 43, 100)
AddAttrIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute").MakeArrayType()
Typ02 = Typ
AddAttrIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddAttrIL.Emit(OpCodes.Ldarg_0)
AddAttrIL.Emit(OpCodes.Ldfld, Attrs)
Typ = Attrs.FieldType
Typ02 = Typ
AddAttrIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddAttrIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddAttrIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute").MakeArrayType().GetElementType())
AddAttrIL.MarkSequencePoint(doc37, 45, 1, 45, 100)
AddAttrIL.Emit(OpCodes.Br, cont27)
AddAttrIL.MarkLabel(fa27)
AddAttrIL.Emit(OpCodes.Br, cont27)
AddAttrIL.MarkLabel(cont27)
AddAttrIL.MarkSequencePoint(doc37, 47, 1, 47, 100)
AddAttrIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa28 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
Dim tru28 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
Dim cont28 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
AddAttrIL.Emit(OpCodes.Beq, tru28)
AddAttrIL.Emit(OpCodes.Br, fa28)
AddAttrIL.MarkLabel(tru28)
AddAttrIL.MarkSequencePoint(doc37, 48, 1, 48, 100)
AddAttrIL.Emit(OpCodes.Br, label1)
AddAttrIL.MarkSequencePoint(doc37, 49, 1, 49, 100)
AddAttrIL.Emit(OpCodes.Br, cont28)
AddAttrIL.MarkLabel(fa28)
AddAttrIL.MarkSequencePoint(doc37, 50, 1, 50, 100)
AddAttrIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa29 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
Dim tru29 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
Dim cont29 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
AddAttrIL.Emit(OpCodes.Beq, fa29)
AddAttrIL.Emit(OpCodes.Br, tru29)
AddAttrIL.MarkLabel(tru29)
AddAttrIL.MarkSequencePoint(doc37, 51, 1, 51, 100)
AddAttrIL.Emit(OpCodes.Br, label0)
AddAttrIL.MarkSequencePoint(doc37, 52, 1, 52, 100)
AddAttrIL.Emit(OpCodes.Br, cont29)
AddAttrIL.MarkLabel(fa29)
AddAttrIL.MarkSequencePoint(doc37, 53, 1, 53, 100)
AddAttrIL.Emit(OpCodes.Br, label1)
AddAttrIL.MarkSequencePoint(doc37, 54, 1, 54, 100)
AddAttrIL.Emit(OpCodes.Br, cont29)
AddAttrIL.MarkLabel(cont29)
AddAttrIL.MarkSequencePoint(doc37, 55, 1, 55, 100)
AddAttrIL.Emit(OpCodes.Br, cont28)
AddAttrIL.MarkLabel(cont28)
AddAttrIL.MarkSequencePoint(doc37, 57, 1, 57, 100)
AddAttrIL.MarkLabel(label1)
AddAttrIL.MarkSequencePoint(doc37, 59, 1, 59, 100)
AddAttrIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute").MakeArrayType()
Typ02 = Typ
AddAttrIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddAttrIL.Emit(OpCodes.Ldarg, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute")
AddAttrIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute").MakeArrayType().GetElementType())
AddAttrIL.MarkSequencePoint(doc37, 61, 1, 61, 100)
AddAttrIL.Emit(OpCodes.Ldarg_0)
AddAttrIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute").MakeArrayType()
AddAttrIL.Emit(OpCodes.Stfld, Attrs)
AddAttrIL.MarkSequencePoint(doc37, 63, 1, 63, 100)
AddAttrIL.Emit(OpCodes.Ret)
ClassStmt.CreateType()
End Sub


Dim doc38 As ISymbolDocumentWriter

Sub EnumStmt()
Dim EnumStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "EnumStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
Dim Attrs As FieldBuilder = EnumStmt.DefineField("Attrs", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute").MakeArrayType(), FieldAttributes.Public)
Dim EnumName As FieldBuilder = EnumStmt.DefineField("EnumName", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ident"), FieldAttributes.Public)
Dim EnumTyp As FieldBuilder = EnumStmt.DefineField("EnumTyp", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = EnumStmt.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc38, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc38, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc38, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Line"))
ctor0IL.MarkSequencePoint(doc38, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute"))
ctor0IL.Emit(OpCodes.Stfld, Attrs)
ctor0IL.MarkSequencePoint(doc38, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ident").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, EnumName)
ctor0IL.MarkSequencePoint(doc38, 21, 1, 21, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, EnumTyp)
ctor0IL.MarkSequencePoint(doc38, 22, 1, 22, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute")
Dim AddAttr As MethodBuilder = EnumStmt.DefineMethod("AddAttr", MethodAttributes.Public, GetType(System.Void), typ0)
Dim AddAttrIL As ILGenerator = AddAttr.GetILGenerator()
Dim AddAttrparam01 As ParameterBuilder = AddAttr.DefineParameter(1, ParameterAttributes.None, "attrtoadd")
AddAttrIL.MarkSequencePoint(doc38, 26, 1, 26, 100)
Dim locbldr43 As LocalBuilder = AddAttrIL.DeclareLocal(GetType(System.Int32))
locbldr43.SetLocalSymInfo("len")
AddAttrIL.Emit(OpCodes.Ldarg_0)
AddAttrIL.Emit(OpCodes.Ldfld, Attrs)
Typ = Attrs.FieldType
AddAttrIL.Emit(OpCodes.Ldlen)
AddAttrIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Stloc, 0)
AddAttrIL.MarkSequencePoint(doc38, 27, 1, 27, 100)
Dim locbldr44 As LocalBuilder = AddAttrIL.DeclareLocal(GetType(System.Int32))
locbldr44.SetLocalSymInfo("destl")
AddAttrIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Add)
AddAttrIL.Emit(OpCodes.Stloc, 1)
AddAttrIL.MarkSequencePoint(doc38, 28, 1, 28, 100)
Dim locbldr45 As LocalBuilder = AddAttrIL.DeclareLocal(GetType(System.Int32))
locbldr45.SetLocalSymInfo("stopel")
AddAttrIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Sub)
AddAttrIL.Emit(OpCodes.Stloc, 2)
AddAttrIL.MarkSequencePoint(doc38, 29, 1, 29, 100)
Dim locbldr46 As LocalBuilder = AddAttrIL.DeclareLocal(GetType(System.Int32))
locbldr46.SetLocalSymInfo("i")
AddAttrIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Stloc, 3)
AddAttrIL.MarkSequencePoint(doc38, 31, 1, 31, 100)
Dim locbldr47 As LocalBuilder = AddAttrIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute").MakeArrayType())
locbldr47.SetLocalSymInfo("destarr")
AddAttrIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Conv_U)
AddAttrIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute"))
AddAttrIL.Emit(OpCodes.Stloc, 4)
AddAttrIL.MarkSequencePoint(doc38, 33, 1, 33, 100)
Dim label0 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
AddAttrIL.MarkSequencePoint(doc38, 34, 1, 34, 100)
Dim label1 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
AddAttrIL.MarkSequencePoint(doc38, 36, 1, 36, 100)
AddAttrIL.MarkLabel(label0)
AddAttrIL.MarkSequencePoint(doc38, 38, 1, 38, 100)
AddAttrIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Add)
AddAttrIL.Emit(OpCodes.Stloc, 3)
AddAttrIL.MarkSequencePoint(doc38, 40, 1, 40, 100)
AddAttrIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa30 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
Dim tru30 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
Dim cont30 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
AddAttrIL.Emit(OpCodes.Bgt, tru30)
AddAttrIL.Emit(OpCodes.Br, fa30)
AddAttrIL.MarkLabel(tru30)
AddAttrIL.MarkSequencePoint(doc38, 42, 1, 42, 100)
AddAttrIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute").MakeArrayType()
Typ02 = Typ
AddAttrIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddAttrIL.Emit(OpCodes.Ldarg_0)
AddAttrIL.Emit(OpCodes.Ldfld, Attrs)
Typ = Attrs.FieldType
Typ02 = Typ
AddAttrIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddAttrIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddAttrIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute").MakeArrayType().GetElementType())
AddAttrIL.MarkSequencePoint(doc38, 44, 1, 44, 100)
AddAttrIL.Emit(OpCodes.Br, cont30)
AddAttrIL.MarkLabel(fa30)
AddAttrIL.Emit(OpCodes.Br, cont30)
AddAttrIL.MarkLabel(cont30)
AddAttrIL.MarkSequencePoint(doc38, 46, 1, 46, 100)
AddAttrIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa31 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
Dim tru31 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
Dim cont31 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
AddAttrIL.Emit(OpCodes.Beq, tru31)
AddAttrIL.Emit(OpCodes.Br, fa31)
AddAttrIL.MarkLabel(tru31)
AddAttrIL.MarkSequencePoint(doc38, 47, 1, 47, 100)
AddAttrIL.Emit(OpCodes.Br, label1)
AddAttrIL.MarkSequencePoint(doc38, 48, 1, 48, 100)
AddAttrIL.Emit(OpCodes.Br, cont31)
AddAttrIL.MarkLabel(fa31)
AddAttrIL.MarkSequencePoint(doc38, 49, 1, 49, 100)
AddAttrIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa32 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
Dim tru32 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
Dim cont32 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
AddAttrIL.Emit(OpCodes.Beq, fa32)
AddAttrIL.Emit(OpCodes.Br, tru32)
AddAttrIL.MarkLabel(tru32)
AddAttrIL.MarkSequencePoint(doc38, 50, 1, 50, 100)
AddAttrIL.Emit(OpCodes.Br, label0)
AddAttrIL.MarkSequencePoint(doc38, 51, 1, 51, 100)
AddAttrIL.Emit(OpCodes.Br, cont32)
AddAttrIL.MarkLabel(fa32)
AddAttrIL.MarkSequencePoint(doc38, 52, 1, 52, 100)
AddAttrIL.Emit(OpCodes.Br, label1)
AddAttrIL.MarkSequencePoint(doc38, 53, 1, 53, 100)
AddAttrIL.Emit(OpCodes.Br, cont32)
AddAttrIL.MarkLabel(cont32)
AddAttrIL.MarkSequencePoint(doc38, 54, 1, 54, 100)
AddAttrIL.Emit(OpCodes.Br, cont31)
AddAttrIL.MarkLabel(cont31)
AddAttrIL.MarkSequencePoint(doc38, 56, 1, 56, 100)
AddAttrIL.MarkLabel(label1)
AddAttrIL.MarkSequencePoint(doc38, 58, 1, 58, 100)
AddAttrIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute").MakeArrayType()
Typ02 = Typ
AddAttrIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddAttrIL.Emit(OpCodes.Ldarg, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute")
AddAttrIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute").MakeArrayType().GetElementType())
AddAttrIL.MarkSequencePoint(doc38, 60, 1, 60, 100)
AddAttrIL.Emit(OpCodes.Ldarg_0)
AddAttrIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute").MakeArrayType()
AddAttrIL.Emit(OpCodes.Stfld, Attrs)
AddAttrIL.MarkSequencePoint(doc38, 62, 1, 62, 100)
AddAttrIL.Emit(OpCodes.Ret)
EnumStmt.CreateType()
End Sub

Sub LiteralStmt()
Dim LiteralStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "LiteralStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
Dim RExp As FieldBuilder = LiteralStmt.DefineField("RExp", asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr"), FieldAttributes.Public)
Dim LitName As FieldBuilder = LiteralStmt.DefineField("LitName", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ident"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = LiteralStmt.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc38, 73, 1, 73, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc38, 74, 1, 74, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc38, 75, 1, 75, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Line"))
ctor0IL.MarkSequencePoint(doc38, 76, 1, 76, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, RExp)
ctor0IL.MarkSequencePoint(doc38, 77, 1, 77, 100)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ident").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc38, 78, 1, 78, 100)
ctor0IL.Emit(OpCodes.Ret)
LiteralStmt.CreateType()
End Sub


Dim doc39 As ISymbolDocumentWriter

Sub PropertyStmt()
Dim PropertyStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "PropertyStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
Dim Attrs As FieldBuilder = PropertyStmt.DefineField("Attrs", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute").MakeArrayType(), FieldAttributes.Public)
Dim PropertyName As FieldBuilder = PropertyStmt.DefineField("PropertyName", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ident"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = PropertyStmt.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc39, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc39, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc39, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Line"))
ctor0IL.MarkSequencePoint(doc39, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute"))
ctor0IL.Emit(OpCodes.Stfld, Attrs)
ctor0IL.MarkSequencePoint(doc39, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ident").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, PropertyName)
ctor0IL.MarkSequencePoint(doc39, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute")
Dim AddAttr As MethodBuilder = PropertyStmt.DefineMethod("AddAttr", MethodAttributes.Public, GetType(System.Void), typ0)
Dim AddAttrIL As ILGenerator = AddAttr.GetILGenerator()
Dim AddAttrparam01 As ParameterBuilder = AddAttr.DefineParameter(1, ParameterAttributes.None, "attrtoadd")
AddAttrIL.MarkSequencePoint(doc39, 24, 1, 24, 100)
Dim locbldr48 As LocalBuilder = AddAttrIL.DeclareLocal(GetType(System.Int32))
locbldr48.SetLocalSymInfo("len")
AddAttrIL.Emit(OpCodes.Ldarg_0)
AddAttrIL.Emit(OpCodes.Ldfld, Attrs)
Typ = Attrs.FieldType
AddAttrIL.Emit(OpCodes.Ldlen)
AddAttrIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Stloc, 0)
AddAttrIL.MarkSequencePoint(doc39, 25, 1, 25, 100)
Dim locbldr49 As LocalBuilder = AddAttrIL.DeclareLocal(GetType(System.Int32))
locbldr49.SetLocalSymInfo("destl")
AddAttrIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Add)
AddAttrIL.Emit(OpCodes.Stloc, 1)
AddAttrIL.MarkSequencePoint(doc39, 26, 1, 26, 100)
Dim locbldr50 As LocalBuilder = AddAttrIL.DeclareLocal(GetType(System.Int32))
locbldr50.SetLocalSymInfo("stopel")
AddAttrIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Sub)
AddAttrIL.Emit(OpCodes.Stloc, 2)
AddAttrIL.MarkSequencePoint(doc39, 27, 1, 27, 100)
Dim locbldr51 As LocalBuilder = AddAttrIL.DeclareLocal(GetType(System.Int32))
locbldr51.SetLocalSymInfo("i")
AddAttrIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Stloc, 3)
AddAttrIL.MarkSequencePoint(doc39, 29, 1, 29, 100)
Dim locbldr52 As LocalBuilder = AddAttrIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute").MakeArrayType())
locbldr52.SetLocalSymInfo("destarr")
AddAttrIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Conv_U)
AddAttrIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute"))
AddAttrIL.Emit(OpCodes.Stloc, 4)
AddAttrIL.MarkSequencePoint(doc39, 31, 1, 31, 100)
Dim label0 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
AddAttrIL.MarkSequencePoint(doc39, 32, 1, 32, 100)
Dim label1 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
AddAttrIL.MarkSequencePoint(doc39, 34, 1, 34, 100)
AddAttrIL.MarkLabel(label0)
AddAttrIL.MarkSequencePoint(doc39, 36, 1, 36, 100)
AddAttrIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Add)
AddAttrIL.Emit(OpCodes.Stloc, 3)
AddAttrIL.MarkSequencePoint(doc39, 38, 1, 38, 100)
AddAttrIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa33 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
Dim tru33 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
Dim cont33 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
AddAttrIL.Emit(OpCodes.Bgt, tru33)
AddAttrIL.Emit(OpCodes.Br, fa33)
AddAttrIL.MarkLabel(tru33)
AddAttrIL.MarkSequencePoint(doc39, 40, 1, 40, 100)
AddAttrIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute").MakeArrayType()
Typ02 = Typ
AddAttrIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddAttrIL.Emit(OpCodes.Ldarg_0)
AddAttrIL.Emit(OpCodes.Ldfld, Attrs)
Typ = Attrs.FieldType
Typ02 = Typ
AddAttrIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddAttrIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddAttrIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute").MakeArrayType().GetElementType())
AddAttrIL.MarkSequencePoint(doc39, 42, 1, 42, 100)
AddAttrIL.Emit(OpCodes.Br, cont33)
AddAttrIL.MarkLabel(fa33)
AddAttrIL.Emit(OpCodes.Br, cont33)
AddAttrIL.MarkLabel(cont33)
AddAttrIL.MarkSequencePoint(doc39, 44, 1, 44, 100)
AddAttrIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa34 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
Dim tru34 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
Dim cont34 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
AddAttrIL.Emit(OpCodes.Beq, tru34)
AddAttrIL.Emit(OpCodes.Br, fa34)
AddAttrIL.MarkLabel(tru34)
AddAttrIL.MarkSequencePoint(doc39, 45, 1, 45, 100)
AddAttrIL.Emit(OpCodes.Br, label1)
AddAttrIL.MarkSequencePoint(doc39, 46, 1, 46, 100)
AddAttrIL.Emit(OpCodes.Br, cont34)
AddAttrIL.MarkLabel(fa34)
AddAttrIL.MarkSequencePoint(doc39, 47, 1, 47, 100)
AddAttrIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa35 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
Dim tru35 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
Dim cont35 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
AddAttrIL.Emit(OpCodes.Beq, fa35)
AddAttrIL.Emit(OpCodes.Br, tru35)
AddAttrIL.MarkLabel(tru35)
AddAttrIL.MarkSequencePoint(doc39, 48, 1, 48, 100)
AddAttrIL.Emit(OpCodes.Br, label0)
AddAttrIL.MarkSequencePoint(doc39, 49, 1, 49, 100)
AddAttrIL.Emit(OpCodes.Br, cont35)
AddAttrIL.MarkLabel(fa35)
AddAttrIL.MarkSequencePoint(doc39, 50, 1, 50, 100)
AddAttrIL.Emit(OpCodes.Br, label1)
AddAttrIL.MarkSequencePoint(doc39, 51, 1, 51, 100)
AddAttrIL.Emit(OpCodes.Br, cont35)
AddAttrIL.MarkLabel(cont35)
AddAttrIL.MarkSequencePoint(doc39, 52, 1, 52, 100)
AddAttrIL.Emit(OpCodes.Br, cont34)
AddAttrIL.MarkLabel(cont34)
AddAttrIL.MarkSequencePoint(doc39, 54, 1, 54, 100)
AddAttrIL.MarkLabel(label1)
AddAttrIL.MarkSequencePoint(doc39, 56, 1, 56, 100)
AddAttrIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute").MakeArrayType()
Typ02 = Typ
AddAttrIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddAttrIL.Emit(OpCodes.Ldarg, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute")
AddAttrIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute").MakeArrayType().GetElementType())
AddAttrIL.MarkSequencePoint(doc39, 58, 1, 58, 100)
AddAttrIL.Emit(OpCodes.Ldarg_0)
AddAttrIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute").MakeArrayType()
AddAttrIL.Emit(OpCodes.Stfld, Attrs)
AddAttrIL.MarkSequencePoint(doc39, 60, 1, 60, 100)
AddAttrIL.Emit(OpCodes.Ret)
PropertyStmt.CreateType()
End Sub

Sub PropertySetStmt()
Dim PropertySetStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "PropertySetStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
Dim Setter As FieldBuilder = PropertySetStmt.DefineField("Setter", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.MethodNameTok"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = PropertySetStmt.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc39, 69, 1, 69, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc39, 70, 1, 70, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc39, 71, 1, 71, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Line"))
ctor0IL.MarkSequencePoint(doc39, 72, 1, 72, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.MethodNameTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, Setter)
ctor0IL.MarkSequencePoint(doc39, 73, 1, 73, 100)
ctor0IL.Emit(OpCodes.Ret)
PropertySetStmt.CreateType()
End Sub

Sub PropertyGetStmt()
Dim PropertyGetStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "PropertyGetStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
Dim Getter As FieldBuilder = PropertyGetStmt.DefineField("Getter", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.MethodNameTok"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = PropertyGetStmt.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc39, 82, 1, 82, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc39, 83, 1, 83, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc39, 84, 1, 84, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Line"))
ctor0IL.MarkSequencePoint(doc39, 85, 1, 85, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.MethodNameTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, Getter)
ctor0IL.MarkSequencePoint(doc39, 86, 1, 86, 100)
ctor0IL.Emit(OpCodes.Ret)
PropertyGetStmt.CreateType()
End Sub


Dim doc40 As ISymbolDocumentWriter

Sub MethodStmt()
Dim MethodStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "MethodStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
Dim Attrs As FieldBuilder = MethodStmt.DefineField("Attrs", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute").MakeArrayType(), FieldAttributes.Public)
Dim MethodName As FieldBuilder = MethodStmt.DefineField("MethodName", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ident"), FieldAttributes.Public)
Dim RetTyp As FieldBuilder = MethodStmt.DefineField("RetTyp", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"), FieldAttributes.Public)
Dim Params As FieldBuilder = MethodStmt.DefineField("Params", asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").MakeArrayType(), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = MethodStmt.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc40, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc40, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc40, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Line"))
ctor0IL.MarkSequencePoint(doc40, 21, 1, 21, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute"))
ctor0IL.Emit(OpCodes.Stfld, Attrs)
ctor0IL.MarkSequencePoint(doc40, 22, 1, 22, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ident").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, MethodName)
ctor0IL.MarkSequencePoint(doc40, 23, 1, 23, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr"))
ctor0IL.Emit(OpCodes.Stfld, Params)
ctor0IL.MarkSequencePoint(doc40, 25, 1, 25, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, RetTyp)
ctor0IL.MarkSequencePoint(doc40, 26, 1, 26, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute")
Dim AddAttr As MethodBuilder = MethodStmt.DefineMethod("AddAttr", MethodAttributes.Public, GetType(System.Void), typ0)
Dim AddAttrIL As ILGenerator = AddAttr.GetILGenerator()
Dim AddAttrparam01 As ParameterBuilder = AddAttr.DefineParameter(1, ParameterAttributes.None, "attrtoadd")
AddAttrIL.MarkSequencePoint(doc40, 30, 1, 30, 100)
Dim locbldr53 As LocalBuilder = AddAttrIL.DeclareLocal(GetType(System.Int32))
locbldr53.SetLocalSymInfo("len")
AddAttrIL.Emit(OpCodes.Ldarg_0)
AddAttrIL.Emit(OpCodes.Ldfld, Attrs)
Typ = Attrs.FieldType
AddAttrIL.Emit(OpCodes.Ldlen)
AddAttrIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Stloc, 0)
AddAttrIL.MarkSequencePoint(doc40, 31, 1, 31, 100)
Dim locbldr54 As LocalBuilder = AddAttrIL.DeclareLocal(GetType(System.Int32))
locbldr54.SetLocalSymInfo("destl")
AddAttrIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Add)
AddAttrIL.Emit(OpCodes.Stloc, 1)
AddAttrIL.MarkSequencePoint(doc40, 32, 1, 32, 100)
Dim locbldr55 As LocalBuilder = AddAttrIL.DeclareLocal(GetType(System.Int32))
locbldr55.SetLocalSymInfo("stopel")
AddAttrIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Sub)
AddAttrIL.Emit(OpCodes.Stloc, 2)
AddAttrIL.MarkSequencePoint(doc40, 33, 1, 33, 100)
Dim locbldr56 As LocalBuilder = AddAttrIL.DeclareLocal(GetType(System.Int32))
locbldr56.SetLocalSymInfo("i")
AddAttrIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Stloc, 3)
AddAttrIL.MarkSequencePoint(doc40, 35, 1, 35, 100)
Dim locbldr57 As LocalBuilder = AddAttrIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute").MakeArrayType())
locbldr57.SetLocalSymInfo("destarr")
AddAttrIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Conv_U)
AddAttrIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute"))
AddAttrIL.Emit(OpCodes.Stloc, 4)
AddAttrIL.MarkSequencePoint(doc40, 37, 1, 37, 100)
Dim label0 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
AddAttrIL.MarkSequencePoint(doc40, 38, 1, 38, 100)
Dim label1 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
AddAttrIL.MarkSequencePoint(doc40, 40, 1, 40, 100)
AddAttrIL.MarkLabel(label0)
AddAttrIL.MarkSequencePoint(doc40, 42, 1, 42, 100)
AddAttrIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Add)
AddAttrIL.Emit(OpCodes.Stloc, 3)
AddAttrIL.MarkSequencePoint(doc40, 44, 1, 44, 100)
AddAttrIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa36 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
Dim tru36 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
Dim cont36 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
AddAttrIL.Emit(OpCodes.Bgt, tru36)
AddAttrIL.Emit(OpCodes.Br, fa36)
AddAttrIL.MarkLabel(tru36)
AddAttrIL.MarkSequencePoint(doc40, 46, 1, 46, 100)
AddAttrIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute").MakeArrayType()
Typ02 = Typ
AddAttrIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddAttrIL.Emit(OpCodes.Ldarg_0)
AddAttrIL.Emit(OpCodes.Ldfld, Attrs)
Typ = Attrs.FieldType
Typ02 = Typ
AddAttrIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddAttrIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddAttrIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute").MakeArrayType().GetElementType())
AddAttrIL.MarkSequencePoint(doc40, 48, 1, 48, 100)
AddAttrIL.Emit(OpCodes.Br, cont36)
AddAttrIL.MarkLabel(fa36)
AddAttrIL.Emit(OpCodes.Br, cont36)
AddAttrIL.MarkLabel(cont36)
AddAttrIL.MarkSequencePoint(doc40, 50, 1, 50, 100)
AddAttrIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa37 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
Dim tru37 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
Dim cont37 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
AddAttrIL.Emit(OpCodes.Beq, tru37)
AddAttrIL.Emit(OpCodes.Br, fa37)
AddAttrIL.MarkLabel(tru37)
AddAttrIL.MarkSequencePoint(doc40, 51, 1, 51, 100)
AddAttrIL.Emit(OpCodes.Br, label1)
AddAttrIL.MarkSequencePoint(doc40, 52, 1, 52, 100)
AddAttrIL.Emit(OpCodes.Br, cont37)
AddAttrIL.MarkLabel(fa37)
AddAttrIL.MarkSequencePoint(doc40, 53, 1, 53, 100)
AddAttrIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa38 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
Dim tru38 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
Dim cont38 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
AddAttrIL.Emit(OpCodes.Beq, fa38)
AddAttrIL.Emit(OpCodes.Br, tru38)
AddAttrIL.MarkLabel(tru38)
AddAttrIL.MarkSequencePoint(doc40, 54, 1, 54, 100)
AddAttrIL.Emit(OpCodes.Br, label0)
AddAttrIL.MarkSequencePoint(doc40, 55, 1, 55, 100)
AddAttrIL.Emit(OpCodes.Br, cont38)
AddAttrIL.MarkLabel(fa38)
AddAttrIL.MarkSequencePoint(doc40, 56, 1, 56, 100)
AddAttrIL.Emit(OpCodes.Br, label1)
AddAttrIL.MarkSequencePoint(doc40, 57, 1, 57, 100)
AddAttrIL.Emit(OpCodes.Br, cont38)
AddAttrIL.MarkLabel(cont38)
AddAttrIL.MarkSequencePoint(doc40, 58, 1, 58, 100)
AddAttrIL.Emit(OpCodes.Br, cont37)
AddAttrIL.MarkLabel(cont37)
AddAttrIL.MarkSequencePoint(doc40, 60, 1, 60, 100)
AddAttrIL.MarkLabel(label1)
AddAttrIL.MarkSequencePoint(doc40, 62, 1, 62, 100)
AddAttrIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute").MakeArrayType()
Typ02 = Typ
AddAttrIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddAttrIL.Emit(OpCodes.Ldarg, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute")
AddAttrIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute").MakeArrayType().GetElementType())
AddAttrIL.MarkSequencePoint(doc40, 64, 1, 64, 100)
AddAttrIL.Emit(OpCodes.Ldarg_0)
AddAttrIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute").MakeArrayType()
AddAttrIL.Emit(OpCodes.Stfld, Attrs)
AddAttrIL.MarkSequencePoint(doc40, 66, 1, 66, 100)
AddAttrIL.Emit(OpCodes.Ret)
Dim typ1(-1) As Type
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr")
Dim AddParam As MethodBuilder = MethodStmt.DefineMethod("AddParam", MethodAttributes.Public, GetType(System.Void), typ1)
Dim AddParamIL As ILGenerator = AddParam.GetILGenerator()
Dim AddParamparam01 As ParameterBuilder = AddParam.DefineParameter(1, ParameterAttributes.None, "paramtoadd")
AddParamIL.MarkSequencePoint(doc40, 70, 1, 70, 100)
Dim locbldr58 As LocalBuilder = AddParamIL.DeclareLocal(GetType(System.Int32))
locbldr58.SetLocalSymInfo("len")
AddParamIL.Emit(OpCodes.Ldarg_0)
AddParamIL.Emit(OpCodes.Ldfld, Params)
Typ = Params.FieldType
AddParamIL.Emit(OpCodes.Ldlen)
AddParamIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Stloc, 0)
AddParamIL.MarkSequencePoint(doc40, 71, 1, 71, 100)
Dim locbldr59 As LocalBuilder = AddParamIL.DeclareLocal(GetType(System.Int32))
locbldr59.SetLocalSymInfo("destl")
AddParamIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Add)
AddParamIL.Emit(OpCodes.Stloc, 1)
AddParamIL.MarkSequencePoint(doc40, 72, 1, 72, 100)
Dim locbldr60 As LocalBuilder = AddParamIL.DeclareLocal(GetType(System.Int32))
locbldr60.SetLocalSymInfo("stopel")
AddParamIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Sub)
AddParamIL.Emit(OpCodes.Stloc, 2)
AddParamIL.MarkSequencePoint(doc40, 73, 1, 73, 100)
Dim locbldr61 As LocalBuilder = AddParamIL.DeclareLocal(GetType(System.Int32))
locbldr61.SetLocalSymInfo("i")
AddParamIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Stloc, 3)
AddParamIL.MarkSequencePoint(doc40, 75, 1, 75, 100)
Dim locbldr62 As LocalBuilder = AddParamIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").MakeArrayType())
locbldr62.SetLocalSymInfo("destarr")
AddParamIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Conv_U)
AddParamIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr"))
AddParamIL.Emit(OpCodes.Stloc, 4)
AddParamIL.MarkSequencePoint(doc40, 77, 1, 77, 100)
Dim label2 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
AddParamIL.MarkSequencePoint(doc40, 78, 1, 78, 100)
Dim label3 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
AddParamIL.MarkSequencePoint(doc40, 80, 1, 80, 100)
AddParamIL.MarkLabel(label2)
AddParamIL.MarkSequencePoint(doc40, 82, 1, 82, 100)
AddParamIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Add)
AddParamIL.Emit(OpCodes.Stloc, 3)
AddParamIL.MarkSequencePoint(doc40, 84, 1, 84, 100)
AddParamIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa39 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
Dim tru39 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
Dim cont39 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
AddParamIL.Emit(OpCodes.Bgt, tru39)
AddParamIL.Emit(OpCodes.Br, fa39)
AddParamIL.MarkLabel(tru39)
AddParamIL.MarkSequencePoint(doc40, 86, 1, 86, 100)
AddParamIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").MakeArrayType()
Typ02 = Typ
AddParamIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddParamIL.Emit(OpCodes.Ldarg_0)
AddParamIL.Emit(OpCodes.Ldfld, Params)
Typ = Params.FieldType
Typ02 = Typ
AddParamIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddParamIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddParamIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").MakeArrayType().GetElementType())
AddParamIL.MarkSequencePoint(doc40, 88, 1, 88, 100)
AddParamIL.Emit(OpCodes.Br, cont39)
AddParamIL.MarkLabel(fa39)
AddParamIL.Emit(OpCodes.Br, cont39)
AddParamIL.MarkLabel(cont39)
AddParamIL.MarkSequencePoint(doc40, 90, 1, 90, 100)
AddParamIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa40 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
Dim tru40 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
Dim cont40 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
AddParamIL.Emit(OpCodes.Beq, tru40)
AddParamIL.Emit(OpCodes.Br, fa40)
AddParamIL.MarkLabel(tru40)
AddParamIL.MarkSequencePoint(doc40, 91, 1, 91, 100)
AddParamIL.Emit(OpCodes.Br, label3)
AddParamIL.MarkSequencePoint(doc40, 92, 1, 92, 100)
AddParamIL.Emit(OpCodes.Br, cont40)
AddParamIL.MarkLabel(fa40)
AddParamIL.MarkSequencePoint(doc40, 93, 1, 93, 100)
AddParamIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa41 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
Dim tru41 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
Dim cont41 As System.Reflection.Emit.Label = AddParamIL.DefineLabel()
AddParamIL.Emit(OpCodes.Beq, fa41)
AddParamIL.Emit(OpCodes.Br, tru41)
AddParamIL.MarkLabel(tru41)
AddParamIL.MarkSequencePoint(doc40, 94, 1, 94, 100)
AddParamIL.Emit(OpCodes.Br, label2)
AddParamIL.MarkSequencePoint(doc40, 95, 1, 95, 100)
AddParamIL.Emit(OpCodes.Br, cont41)
AddParamIL.MarkLabel(fa41)
AddParamIL.MarkSequencePoint(doc40, 96, 1, 96, 100)
AddParamIL.Emit(OpCodes.Br, label3)
AddParamIL.MarkSequencePoint(doc40, 97, 1, 97, 100)
AddParamIL.Emit(OpCodes.Br, cont41)
AddParamIL.MarkLabel(cont41)
AddParamIL.MarkSequencePoint(doc40, 98, 1, 98, 100)
AddParamIL.Emit(OpCodes.Br, cont40)
AddParamIL.MarkLabel(cont40)
AddParamIL.MarkSequencePoint(doc40, 100, 1, 100, 100)
AddParamIL.MarkLabel(label3)
AddParamIL.MarkSequencePoint(doc40, 102, 1, 102, 100)
AddParamIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").MakeArrayType()
Typ02 = Typ
AddParamIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddParamIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddParamIL.Emit(OpCodes.Ldarg, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr")
AddParamIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").MakeArrayType().GetElementType())
AddParamIL.MarkSequencePoint(doc40, 104, 1, 104, 100)
AddParamIL.Emit(OpCodes.Ldarg_0)
AddParamIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").MakeArrayType()
AddParamIL.Emit(OpCodes.Stfld, Params)
AddParamIL.MarkSequencePoint(doc40, 107, 1, 107, 100)
AddParamIL.Emit(OpCodes.Ret)
MethodStmt.CreateType()
End Sub


Dim doc41 As ISymbolDocumentWriter

Sub FieldStmt()
Dim FieldStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "FieldStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
Dim Attrs As FieldBuilder = FieldStmt.DefineField("Attrs", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute").MakeArrayType(), FieldAttributes.Public)
Dim FieldName As FieldBuilder = FieldStmt.DefineField("FieldName", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ident"), FieldAttributes.Public)
Dim FieldTyp As FieldBuilder = FieldStmt.DefineField("FieldTyp", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = FieldStmt.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc41, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc41, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc41, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Line"))
ctor0IL.MarkSequencePoint(doc41, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute"))
ctor0IL.Emit(OpCodes.Stfld, Attrs)
ctor0IL.MarkSequencePoint(doc41, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ident").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, FieldName)
ctor0IL.MarkSequencePoint(doc41, 21, 1, 21, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, FieldTyp)
ctor0IL.MarkSequencePoint(doc41, 22, 1, 22, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute")
Dim AddAttr As MethodBuilder = FieldStmt.DefineMethod("AddAttr", MethodAttributes.Public, GetType(System.Void), typ0)
Dim AddAttrIL As ILGenerator = AddAttr.GetILGenerator()
Dim AddAttrparam01 As ParameterBuilder = AddAttr.DefineParameter(1, ParameterAttributes.None, "attrtoadd")
AddAttrIL.MarkSequencePoint(doc41, 26, 1, 26, 100)
Dim locbldr63 As LocalBuilder = AddAttrIL.DeclareLocal(GetType(System.Int32))
locbldr63.SetLocalSymInfo("len")
AddAttrIL.Emit(OpCodes.Ldarg_0)
AddAttrIL.Emit(OpCodes.Ldfld, Attrs)
Typ = Attrs.FieldType
AddAttrIL.Emit(OpCodes.Ldlen)
AddAttrIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Stloc, 0)
AddAttrIL.MarkSequencePoint(doc41, 27, 1, 27, 100)
Dim locbldr64 As LocalBuilder = AddAttrIL.DeclareLocal(GetType(System.Int32))
locbldr64.SetLocalSymInfo("destl")
AddAttrIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Add)
AddAttrIL.Emit(OpCodes.Stloc, 1)
AddAttrIL.MarkSequencePoint(doc41, 28, 1, 28, 100)
Dim locbldr65 As LocalBuilder = AddAttrIL.DeclareLocal(GetType(System.Int32))
locbldr65.SetLocalSymInfo("stopel")
AddAttrIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Sub)
AddAttrIL.Emit(OpCodes.Stloc, 2)
AddAttrIL.MarkSequencePoint(doc41, 29, 1, 29, 100)
Dim locbldr66 As LocalBuilder = AddAttrIL.DeclareLocal(GetType(System.Int32))
locbldr66.SetLocalSymInfo("i")
AddAttrIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Stloc, 3)
AddAttrIL.MarkSequencePoint(doc41, 31, 1, 31, 100)
Dim locbldr67 As LocalBuilder = AddAttrIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute").MakeArrayType())
locbldr67.SetLocalSymInfo("destarr")
AddAttrIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Conv_U)
AddAttrIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute"))
AddAttrIL.Emit(OpCodes.Stloc, 4)
AddAttrIL.MarkSequencePoint(doc41, 33, 1, 33, 100)
Dim label0 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
AddAttrIL.MarkSequencePoint(doc41, 34, 1, 34, 100)
Dim label1 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
AddAttrIL.MarkSequencePoint(doc41, 36, 1, 36, 100)
AddAttrIL.MarkLabel(label0)
AddAttrIL.MarkSequencePoint(doc41, 38, 1, 38, 100)
AddAttrIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Add)
AddAttrIL.Emit(OpCodes.Stloc, 3)
AddAttrIL.MarkSequencePoint(doc41, 40, 1, 40, 100)
AddAttrIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa42 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
Dim tru42 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
Dim cont42 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
AddAttrIL.Emit(OpCodes.Bgt, tru42)
AddAttrIL.Emit(OpCodes.Br, fa42)
AddAttrIL.MarkLabel(tru42)
AddAttrIL.MarkSequencePoint(doc41, 42, 1, 42, 100)
AddAttrIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute").MakeArrayType()
Typ02 = Typ
AddAttrIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddAttrIL.Emit(OpCodes.Ldarg_0)
AddAttrIL.Emit(OpCodes.Ldfld, Attrs)
Typ = Attrs.FieldType
Typ02 = Typ
AddAttrIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddAttrIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddAttrIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute").MakeArrayType().GetElementType())
AddAttrIL.MarkSequencePoint(doc41, 44, 1, 44, 100)
AddAttrIL.Emit(OpCodes.Br, cont42)
AddAttrIL.MarkLabel(fa42)
AddAttrIL.Emit(OpCodes.Br, cont42)
AddAttrIL.MarkLabel(cont42)
AddAttrIL.MarkSequencePoint(doc41, 46, 1, 46, 100)
AddAttrIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa43 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
Dim tru43 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
Dim cont43 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
AddAttrIL.Emit(OpCodes.Beq, tru43)
AddAttrIL.Emit(OpCodes.Br, fa43)
AddAttrIL.MarkLabel(tru43)
AddAttrIL.MarkSequencePoint(doc41, 47, 1, 47, 100)
AddAttrIL.Emit(OpCodes.Br, label1)
AddAttrIL.MarkSequencePoint(doc41, 48, 1, 48, 100)
AddAttrIL.Emit(OpCodes.Br, cont43)
AddAttrIL.MarkLabel(fa43)
AddAttrIL.MarkSequencePoint(doc41, 49, 1, 49, 100)
AddAttrIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa44 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
Dim tru44 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
Dim cont44 As System.Reflection.Emit.Label = AddAttrIL.DefineLabel()
AddAttrIL.Emit(OpCodes.Beq, fa44)
AddAttrIL.Emit(OpCodes.Br, tru44)
AddAttrIL.MarkLabel(tru44)
AddAttrIL.MarkSequencePoint(doc41, 50, 1, 50, 100)
AddAttrIL.Emit(OpCodes.Br, label0)
AddAttrIL.MarkSequencePoint(doc41, 51, 1, 51, 100)
AddAttrIL.Emit(OpCodes.Br, cont44)
AddAttrIL.MarkLabel(fa44)
AddAttrIL.MarkSequencePoint(doc41, 52, 1, 52, 100)
AddAttrIL.Emit(OpCodes.Br, label1)
AddAttrIL.MarkSequencePoint(doc41, 53, 1, 53, 100)
AddAttrIL.Emit(OpCodes.Br, cont44)
AddAttrIL.MarkLabel(cont44)
AddAttrIL.MarkSequencePoint(doc41, 54, 1, 54, 100)
AddAttrIL.Emit(OpCodes.Br, cont43)
AddAttrIL.MarkLabel(cont43)
AddAttrIL.MarkSequencePoint(doc41, 56, 1, 56, 100)
AddAttrIL.MarkLabel(label1)
AddAttrIL.MarkSequencePoint(doc41, 58, 1, 58, 100)
AddAttrIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute").MakeArrayType()
Typ02 = Typ
AddAttrIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
AddAttrIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddAttrIL.Emit(OpCodes.Ldarg, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute")
AddAttrIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute").MakeArrayType().GetElementType())
AddAttrIL.MarkSequencePoint(doc41, 60, 1, 60, 100)
AddAttrIL.Emit(OpCodes.Ldarg_0)
AddAttrIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute").MakeArrayType()
AddAttrIL.Emit(OpCodes.Stfld, Attrs)
AddAttrIL.MarkSequencePoint(doc41, 62, 1, 62, 100)
AddAttrIL.Emit(OpCodes.Ret)
FieldStmt.CreateType()
End Sub


Dim doc42 As ISymbolDocumentWriter

Sub TryStmt()
Dim TryStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "TryStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
TryStmt.CreateType()
End Sub

Sub CatchStmt()
Dim CatchStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "CatchStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
Dim ExName As FieldBuilder = CatchStmt.DefineField("ExName", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ident"), FieldAttributes.Public)
Dim ExTyp As FieldBuilder = CatchStmt.DefineField("ExTyp", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = CatchStmt.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc42, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc42, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc42, 21, 1, 21, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Line"))
ctor0IL.MarkSequencePoint(doc42, 22, 1, 22, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ident").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, ExName)
ctor0IL.MarkSequencePoint(doc42, 23, 1, 23, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, ExTyp)
ctor0IL.MarkSequencePoint(doc42, 24, 1, 24, 100)
ctor0IL.Emit(OpCodes.Ret)
CatchStmt.CreateType()
End Sub

Sub FinallyStmt()
Dim FinallyStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "FinallyStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
FinallyStmt.CreateType()
End Sub

Sub ThrowStmt()
Dim ThrowStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "ThrowStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
Dim RExp As FieldBuilder = ThrowStmt.DefineField("RExp", asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = ThrowStmt.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc42, 37, 1, 37, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc42, 38, 1, 38, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc42, 39, 1, 39, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Line"))
ctor0IL.MarkSequencePoint(doc42, 40, 1, 40, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, RExp)
ctor0IL.MarkSequencePoint(doc42, 41, 1, 41, 100)
ctor0IL.Emit(OpCodes.Ret)
ThrowStmt.CreateType()
End Sub


Dim doc43 As ISymbolDocumentWriter

Sub LabelStmt()
Dim LabelStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "LabelStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
Dim LabelName As FieldBuilder = LabelStmt.DefineField("LabelName", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ident"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = LabelStmt.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc43, 14, 1, 14, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc43, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc43, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Line"))
ctor0IL.MarkSequencePoint(doc43, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ident").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, LabelName)
ctor0IL.MarkSequencePoint(doc43, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ret)
LabelStmt.CreateType()
End Sub

Sub PlaceStmt()
Dim PlaceStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "PlaceStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
Dim LabelName As FieldBuilder = PlaceStmt.DefineField("LabelName", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ident"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = PlaceStmt.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc43, 27, 1, 27, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc43, 28, 1, 28, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc43, 29, 1, 29, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Line"))
ctor0IL.MarkSequencePoint(doc43, 30, 1, 30, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ident").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, LabelName)
ctor0IL.MarkSequencePoint(doc43, 31, 1, 31, 100)
ctor0IL.Emit(OpCodes.Ret)
PlaceStmt.CreateType()
End Sub

Sub GotoStmt()
Dim GotoStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "GotoStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
Dim LabelName As FieldBuilder = GotoStmt.DefineField("LabelName", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ident"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = GotoStmt.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc43, 40, 1, 40, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc43, 41, 1, 41, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc43, 42, 1, 42, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Line"))
ctor0IL.MarkSequencePoint(doc43, 43, 1, 43, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ident").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, LabelName)
ctor0IL.MarkSequencePoint(doc43, 44, 1, 44, 100)
ctor0IL.Emit(OpCodes.Ret)
GotoStmt.CreateType()
End Sub


Dim doc44 As ISymbolDocumentWriter

Sub IfStmt()
Dim IfStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "IfStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
Dim Exp As FieldBuilder = IfStmt.DefineField("Exp", asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = IfStmt.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc44, 14, 1, 14, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc44, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc44, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Line"))
ctor0IL.MarkSequencePoint(doc44, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, Exp)
ctor0IL.MarkSequencePoint(doc44, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ret)
IfStmt.CreateType()
End Sub

Sub ElseIfStmt()
Dim ElseIfStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "ElseIfStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
Dim Exp As FieldBuilder = ElseIfStmt.DefineField("Exp", asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = ElseIfStmt.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc44, 27, 1, 27, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc44, 28, 1, 28, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc44, 29, 1, 29, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Line"))
ctor0IL.MarkSequencePoint(doc44, 30, 1, 30, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, Exp)
ctor0IL.MarkSequencePoint(doc44, 31, 1, 31, 100)
ctor0IL.Emit(OpCodes.Ret)
ElseIfStmt.CreateType()
End Sub

Sub ElseStmt()
Dim ElseStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "ElseStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
ElseStmt.CreateType()
End Sub

Sub EndIfStmt()
Dim EndIfStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "EndIfStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
EndIfStmt.CreateType()
End Sub


Dim doc45 As ISymbolDocumentWriter

Sub VarStmt()
Dim VarStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "VarStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
Dim VarTyp As FieldBuilder = VarStmt.DefineField("VarTyp", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"), FieldAttributes.Public)
Dim VarName As FieldBuilder = VarStmt.DefineField("VarName", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ident"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = VarStmt.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc45, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc45, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc45, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Line"))
ctor0IL.MarkSequencePoint(doc45, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, VarTyp)
ctor0IL.MarkSequencePoint(doc45, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ident").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, VarName)
ctor0IL.MarkSequencePoint(doc45, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ret)
VarStmt.CreateType()
End Sub

Sub VarAsgnStmt()
Dim VarAsgnStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "VarAsgnStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
Dim VarTyp As FieldBuilder = VarAsgnStmt.DefineField("VarTyp", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok"), FieldAttributes.Public)
Dim VarName As FieldBuilder = VarAsgnStmt.DefineField("VarName", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ident"), FieldAttributes.Public)
Dim RExpr As FieldBuilder = VarAsgnStmt.DefineField("RExpr", asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = VarAsgnStmt.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc45, 31, 1, 31, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc45, 32, 1, 32, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc45, 33, 1, 33, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Line"))
ctor0IL.MarkSequencePoint(doc45, 34, 1, 34, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, VarTyp)
ctor0IL.MarkSequencePoint(doc45, 35, 1, 35, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ident").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, VarName)
ctor0IL.MarkSequencePoint(doc45, 36, 1, 36, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, RExpr)
ctor0IL.MarkSequencePoint(doc45, 37, 1, 37, 100)
ctor0IL.Emit(OpCodes.Ret)
VarAsgnStmt.CreateType()
End Sub


Dim doc46 As ISymbolDocumentWriter

Sub AssignStmt()
Dim AssignStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "AssignStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
Dim LExp As FieldBuilder = AssignStmt.DefineField("LExp", asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr"), FieldAttributes.Public)
Dim RExp As FieldBuilder = AssignStmt.DefineField("RExp", asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = AssignStmt.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc46, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc46, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc46, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Line"))
ctor0IL.MarkSequencePoint(doc46, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, LExp)
ctor0IL.MarkSequencePoint(doc46, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, RExp)
ctor0IL.MarkSequencePoint(doc46, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ret)
AssignStmt.CreateType()
End Sub

Sub IncStmt()
Dim IncStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "IncStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
Dim NumVar As FieldBuilder = IncStmt.DefineField("NumVar", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ident"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = IncStmt.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc46, 29, 1, 29, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc46, 30, 1, 30, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc46, 31, 1, 31, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Line"))
ctor0IL.MarkSequencePoint(doc46, 32, 1, 32, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ident").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, NumVar)
ctor0IL.MarkSequencePoint(doc46, 33, 1, 33, 100)
ctor0IL.Emit(OpCodes.Ret)
IncStmt.CreateType()
End Sub

Sub DecStmt()
Dim DecStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "DecStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
Dim NumVar As FieldBuilder = DecStmt.DefineField("NumVar", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ident"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = DecStmt.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc46, 42, 1, 42, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc46, 43, 1, 43, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc46, 44, 1, 44, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Line"))
ctor0IL.MarkSequencePoint(doc46, 45, 1, 45, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Ident").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, NumVar)
ctor0IL.MarkSequencePoint(doc46, 46, 1, 46, 100)
ctor0IL.Emit(OpCodes.Ret)
DecStmt.CreateType()
End Sub

Sub ReturnStmt()
Dim ReturnStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "ReturnStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
Dim RExp As FieldBuilder = ReturnStmt.DefineField("RExp", asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = ReturnStmt.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc46, 55, 1, 55, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc46, 56, 1, 56, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc46, 57, 1, 57, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Line"))
ctor0IL.MarkSequencePoint(doc46, 58, 1, 58, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Exprs.Expr").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, RExp)
ctor0IL.MarkSequencePoint(doc46, 59, 1, 59, 100)
ctor0IL.Emit(OpCodes.Ret)
ReturnStmt.CreateType()
End Sub

Sub MethodCallStmt()
Dim MethodCallStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "MethodCallStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
Dim MethodToken As FieldBuilder = MethodCallStmt.DefineField("MethodToken", asm.GetType("dylan.NET.Tokenizer.AST.Tokens.MethodCallTok"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = MethodCallStmt.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc46, 68, 1, 68, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc46, 69, 1, 69, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.Token"))
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Tokens"))
ctor0IL.MarkSequencePoint(doc46, 70, 1, 70, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt").GetField("Line"))
ctor0IL.MarkSequencePoint(doc46, 71, 1, 71, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.AST.Tokens.MethodCallTok").GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, MethodToken)
ctor0IL.MarkSequencePoint(doc46, 72, 1, 72, 100)
ctor0IL.Emit(OpCodes.Ret)
MethodCallStmt.CreateType()
End Sub

Sub EndMethodStmt()
Dim EndMethodStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "EndMethodStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
EndMethodStmt.CreateType()
End Sub

Sub EndEnumStmt()
Dim EndEnumStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "EndEnumStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
EndEnumStmt.CreateType()
End Sub

Sub EndClassStmt()
Dim EndClassStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "EndClassStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
EndClassStmt.CreateType()
End Sub

Sub EndNSStmt()
Dim EndNSStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "EndNSStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
EndNSStmt.CreateType()
End Sub

Sub EndXmlDocStmt()
Dim EndXmlDocStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "EndXmlDocStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
EndXmlDocStmt.CreateType()
End Sub

Sub EndTryStmt()
Dim EndTryStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "EndTryStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
EndTryStmt.CreateType()
End Sub

Sub EndPropStmt()
Dim EndPropStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "EndPropStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
EndPropStmt.CreateType()
End Sub

Sub CommentStmt()
Dim CommentStmt As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.AST.Stmts" & "." & "CommentStmt", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, asm.GetType("dylan.NET.Tokenizer.AST.Stmts.Stmt"))
CommentStmt.CreateType()
End Sub

Sub Main()

asmName = New AssemblyName("tokenizer.AST")
asmName.Version = New System.Version(11, 2, 7, 5)
asm  = AppDomain.CurrentDomain.DefineDynamicAssembly(asmName, AssemblyBuilderAccess.Save, CStr("E:\Code\dylannet\compiler\"))
mdl = asm.DefineDynamicModule(asmName.Name & ".dll" , asmName.Name & ".dll", True)
resw = mdl.DefineResource("tokenizer.AST.resources" ,  "Description")
doc = mdl.DefineDocument("E:\Code\dylannet\compiler\tokenizer.AST.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc2 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\token.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc3 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\expr.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc4 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\stmt.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc5 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\op.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc6 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\aritops.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc7 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\logicalops.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc8 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\typetoks.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc9 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\literals.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc10 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\ident.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc11 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\attributes.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc12 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\conditionalops.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc13 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\otherkeywords.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc14 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\comment.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc15 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\methods.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc16 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\chars.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc17 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\newarrexpr.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc18 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\newexpr.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc19 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\castclassexpr.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc20 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\gettypeexpr.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc21 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\ptrexpr.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc22 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\otherexpr.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc23 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\conditionalexpr.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc24 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\dependstmt.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc25 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\stdasmstmt.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc26 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\singstmt.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc27 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\debugstmt.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc28 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\makeasmstmt.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc29 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\refasmstmt.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc30 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\newresstmt.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc31 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\importstmts.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc32 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\asmstmt.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc33 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\verstmt.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc34 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\includestmt.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc35 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\xmldocstmt.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc36 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\nsstmt.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc37 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\classstmt.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc38 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\enumstmt.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc39 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\propstmt.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc40 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\metstmt.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc41 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\fieldstmt.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc42 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\exceptionstmts.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc43 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\labelstmts.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc44 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\ifstmts.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc45 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\varstmts.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc46 = mdl.DefineDocument("E:\Code\dylannet\compiler\ast\otherstmts.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
addstr("tokenizer.AST")
addasm(asm)
Dim daType As Type = GetType(DebuggableAttribute)
Dim daCtor As ConstructorInfo = daType.GetConstructor(New Type() { GetType(DebuggableAttribute.DebuggingModes) })
Dim daBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(daCtor, New Object() {DebuggableAttribute.DebuggingModes.DisableOptimizations Or _
DebuggableAttribute.DebuggingModes.Default })
asm.SetCustomAttribute(daBuilder)

Token()
Expr()
Stmt()
StmtSet()
Op()
AssignOp()
AritOp()
AddOp()
MulOp()
SubOp()
DivOp()
ModOp()
IncOp()
DecOp()
ShlOp()
ShrOp()
LogicalOp()
AndOp()
OrOp()
NandOp()
NorOp()
XorOp()
XnorOp()
NotOp()
NegOp()
TypeTok()
GenericTypeTok()
StringTok()
IntegerTok()
DoubleTok()
BooleanTok()
CharTok()
DecimalTok()
LongTok()
SByteTok()
ShortTok()
SingleTok()
ObjectTok()
VoidTok()
MeTok()
UIntegerTok()
ULongTok()
ByteTok()
UShortTok()
IntPtrTok()
Literal()
NullLiteral()
StringLiteral()
CharLiteral()
BooleanLiteral()
NumberLiteral()
IntLiteral()
DoubleLiteral()
SByteLiteral()
ShortLiteral()
LongLiteral()
FloatLiteral()
UIntLiteral()
ByteLiteral()
UShortLiteral()
ULongLiteral()
IntPtrLiteral()
Ident()
Attribute()
HideBySigAttr()
SpecialNameAttr()
PrivateAttr()
PublicAttr()
StaticAttr()
VirtualAttr()
AbstractAttr()
NewSlotAttr()
PinvokeImplAttr()
HasDefaultAttr()
NoneAttr()
AutoClassAttr()
AnsiClassAttr()
BeforeFieldInitAttr()
SealedAttr()
InterfaceAttr()
InitOnlyAttr()
LiteralAttr()
AssemblyAttr()
SequentialLayoutAttr()
AutoLayoutAttr()
ConditionalOp()
EqOp()
LikeOp()
NeqOp()
NLikeOp()
GtOp()
LtOp()
GeOp()
LeOp()
NewarrTok()
NewTok()
CastclassTok()
GettypeTok()
PtrTok()
DependTok()
StdasmTok()
SwitchTok()
OnTok()
OfTok()
OffTok()
SingTok()
DebugTok()
MakeasmTok()
RefasmTok()
NewresTok()
ImageTok()
ImportTok()
LocimportTok()
AssemblyTok()
ExeTok()
DllTok()
VerTok()
IncludeTok()
XmldocTok()
NamespaceTok()
ClassTok()
ExtendsTok()
EnumTok()
FieldTok()
PropertyTok()
GetTok()
SetTok()
MethodTok()
TryTok()
CatchTok()
AsTok()
FinallyTok()
LabelTok()
PlaceTok()
GotoTok()
IfTok()
ElseIfTok()
ThenTok()
LiteralTok()
VarTok()
ElseTok()
ReturnTok()
ThrowTok()
EndTok()
CommentTok()
MethodNameTok()
MethodCallTok()
NewCallTok()
GettypeCallTok()
Character()
RSParen()
LSParen()
LRSParen()
RAParen()
LAParen()
RParen()
LParen()
Comma()
CrLf()
Cr()
Lf()
Pipe()
Ampersand()
DollarSign()
NewarrExpr()
NewExpr()
CastclassExpr()
GettypeExpr()
PtrExpr()
AritExpr()
LogicExpr()
VarExpr()
ConditionalExpr()
DependStmt()
StdasmStmt()
SingStmt()
DebugStmt()
MakeasmStmt()
RefasmStmt()
NewresStmt()
ImportStmt()
LocimportStmt()
AssemblyStmt()
VerStmt()
IncludeStmt()
XmlDocStmt()
NSStmt()
ClassStmt()
EnumStmt()
LiteralStmt()
PropertyStmt()
PropertySetStmt()
PropertyGetStmt()
MethodStmt()
FieldStmt()
TryStmt()
CatchStmt()
FinallyStmt()
ThrowStmt()
LabelStmt()
PlaceStmt()
GotoStmt()
IfStmt()
ElseIfStmt()
ElseStmt()
EndIfStmt()
VarStmt()
VarAsgnStmt()
AssignStmt()
IncStmt()
DecStmt()
ReturnStmt()
MethodCallStmt()
EndMethodStmt()
EndEnumStmt()
EndClassStmt()
EndNSStmt()
EndXmlDocStmt()
EndTryStmt()
EndPropStmt()
CommentStmt()
Dim vaType As Type = GetType(AssemblyFileVersionAttribute)
Dim vaCtor As ConstructorInfo = vaType.GetConstructor(New Type() { GetType(String) })
Dim vaBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(vaCtor, New Object() {"11.2.7.5"})
asm.SetCustomAttribute(vaBuilder)

Dim paType As Type = GetType(AssemblyProductAttribute)
Dim paCtor As ConstructorInfo = paType.GetConstructor(New Type() { GetType(String) })
Dim paBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(paCtor, New Object() {"tokenizer.AST"})
asm.SetCustomAttribute(paBuilder)

Dim ataType As Type = GetType(AssemblyTitleAttribute)
Dim ataCtor As ConstructorInfo = ataType.GetConstructor(New Type() { GetType(String) })
Dim ataBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(ataCtor, New Object() {"tokenizer.AST"})
asm.SetCustomAttribute(ataBuilder)

Dim deaType As Type = GetType(AssemblyDescriptionAttribute)
Dim deaCtor As ConstructorInfo = deaType.GetConstructor(New Type() { GetType(String) })
Dim deaBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(deaCtor, New Object() {"tokenizer.AST"})
asm.SetCustomAttribute(deaBuilder)


asm.DefineVersionInfoResource()
asm.Save(asmName.Name & ".dll")
End Sub


End Module