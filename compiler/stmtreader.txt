class public auto ansi StmtReader

method public void Read(var stm as Stmt)

var typ as System.Type
var b as boolean = false

label fin

typ = gettype RefasmStmt
b = typ::IsInstanceOfType($object$stm)

if b = true then
var rastm as RefasmStmt = stm
var ap as Token = rastm::AsmPath

var tmpstr as string = String::Concat(Utils.Constants::quot,"*",Utils.Constants::quot)
var compb as boolean = Utils.ParseUtils::LikeOP(ap::Value, tmpstr)

if compb = true then
tmpstr = ap::Value
var tmpchrarr as char[] = newarr char 1
tmpchrarr[0] = $char$Utils.Constants::quot
tmpstr = tmpstr::Trim(tmpchrarr)
ap::Value = tmpstr
end if

var asm as Assembly = Assembly::LoadFrom(ap::Value)
Console::Write("Referencing Assembly: ")
Console::WriteLine(ap::Value)
Importer::AddAsm(asm)
goto fin
end if

typ = gettype ImportStmt
b = typ::IsInstanceOfType($object$stm)

if b = true then
var istm as ImportStmt = stm
var ina as Token = istm::NS

tmpstr = String::Concat(Utils.Constants::quot,"*",Utils.Constants::quot)
compb = Utils.ParseUtils::LikeOP(ina::Value, tmpstr)

if compb = true then
tmpstr = ina::Value
tmpchrarr = newarr char 1
tmpchrarr[0] = $char$Utils.Constants::quot
tmpstr = tmpstr::Trim(tmpchrarr)
ina::Value = tmpstr
end if

Console::Write("Importing Namespace: ")
Console::WriteLine(ina::Value)

Importer::AddImp(ina::Value)
goto fin
end if

typ = gettype LocimportStmt
b = typ::IsInstanceOfType($object$stm)

if b = true then
var listm as LocimportStmt = stm
var lina as Token = listm::NS

tmpstr = String::Concat(Utils.Constants::quot,"*",Utils.Constants::quot)
compb = Utils.ParseUtils::LikeOP(lina::Value, tmpstr)

if compb = true then
tmpstr = lina::Value
tmpchrarr = newarr char 1
tmpchrarr[0] = $char$Utils.Constants::quot
tmpstr = tmpstr::Trim(tmpchrarr)
lina::Value = tmpstr
end if

Console::Write("Importing Namespace: ")
Console::WriteLine(lina::Value)

Importer::AddLocImp(lina::Value)
goto fin
end if

typ = gettype AssemblyStmt
b = typ::IsInstanceOfType($object$stm)

if b = true then

var asms as AssemblyStmt = stm
var asmn as Ident = asms::AsmName
AsmFactory::AsmNameStr = new AssemblyName(asmn::Value)
var asmm as Token = asms::Mode
AsmFactory::AsmMode = asmm::Value
AsmFactory::DfltNS = asmn::Value
AsmFactory::CurnNS = asmn::Value

Console::Write("Beginning Assembly: ")
Console::WriteLine(asmn::Value)

goto fin

end if

typ = gettype VerStmt
b = typ::IsInstanceOfType($object$stm)

if b = true then
var asmv as VerStmt = stm
var vns as IntLiteral[] = asmv::VersionNos
var vne as IntLiteral
var vernos as integer[] = newarr integer 4
vne = vns[0]
vernos[0] = vne::NumVal
vne = vns[1]
vernos[1] = vne::NumVal
vne = vns[2]
vernos[2] = vne::NumVal
vne = vns[3]
vernos[3] = vne::NumVal
var asmver as Version = new Version(vernos[0], vernos[1], vernos[2], vernos[3])
var asmnm as AssemblyName = AsmFactory::AsmNameStr
asmnm::set_Version(asmver)
AsmFactory::AsmNameStr = asmnm
var cad as AppDomain = AppDomain::get_CurrentDomain()
var aasv as AssemblyBuilderAccess = 2
var curd as string = Directory::GetCurrentDirectory()
AsmFactory::AsmB = cad::DefineDynamicAssembly(asmnm, aasv, curd)
var asmnme as string = asmnm::get_Name()
asmnme = String::Concat(asmnme, ".", AsmFactory::AsmMode)
var ab as AssemblyBuilder = AsmFactory::AsmB
AsmFactory::MdlB = ab::DefineDynamicModule(asmnme, asmnme, AsmFactory::DebugFlg)
AsmFactory::AsmFile = asmnme
goto fin
end if

typ = gettype DebugStmt
b = typ::IsInstanceOfType($object$stm)

if b = true then
var dbgs as DebugStmt = stm
AsmFactory::DebugFlg = dbgs::Flg
goto fin
end if

typ = gettype ClassStmt
b = typ::IsInstanceOfType($object$stm)

if b = true then
var clss as ClassStmt = stm

if AsmFactory::inClass = true then
AsmFactory::isNested = true
end if

if AsmFactory::isNested = false then
AsmFactory::inClass = true
end if

var attrs as Attributes.Attribute[] = clss::Attrs
var ta as TypeAttributes = Helpers::ProcessClassAttrs(attrs)
var clssnam as Ident = clss::ClassName
var clsnamstr as string = clssnam::Value
var inhclstok as TypeTok = clss::InhClass
var inhtyp as System.Type = null
var reft as System.Type  = inhclstok::RefTyp
var cmp as integer = String::Compare(inhclstok::Value, "")

if reft = null then
if cmp = 0 then
inhtyp = gettype object
else
inhtyp = Loader::LoadClass(inhclstok::Value)
end if
else
inhtyp = reft 
end if


if AsmFactory::isNested = false then
var mdlbld as ModuleBuilder = AsmFactory::MdlB
clsnamstr = String::Concat(AsmFactory::CurnNS, ".", clsnamstr)
AsmFactory::CurnTypB = mdlbld::DefineType(clsnamstr, ta, inhtyp)

Console::Write("Adding Class: ")
Console::WriteLine(clsnamstr)
else
AsmFactory::CurnTypB2 = AsmFactory::CurnTypB
var ctb2 as TypeBuilder = AsmFactory::CurnTypB2
Console::Write("Adding Nested Class: ")
Console::WriteLine(clsnamstr)
AsmFactory::CurnTypB = ctb2::DefineNestedType(clsnamstr, ta, inhtyp)
end if

goto fin
end if

typ = gettype FieldStmt
b = typ::IsInstanceOfType($object$stm)

if b = true then
var flss as FieldStmt = stm

var fattrs as Attributes.Attribute[] = flss::Attrs
var fa as FieldAttributes = Helpers::ProcessFieldAttrs(fattrs)
var flssnam as Ident = flss::FieldName
var flsnamstr as string = flssnam::Value
var ftyptok as TypeTok = flss::FieldTyp
var ftyp as System.Type = null
var reft3 as System.Type  = ftyptok::RefTyp

if reft3 = null then
Loader::MakeArr = ftyptok::IsArray
Loader::MakeRef = ftyptok::IsByRef
ftyp = Loader::LoadClass(ftyptok::Value)
else
Loader::MakeArr = ftyptok::IsArray
Loader::MakeRef = ftyptok::IsByRef
ftyp = Loader::ProcessType(reft3) 
end if

var typb2 as TypeBuilder = AsmFactory::CurnTypB
AsmFactory::CurnFldB = typb2::DefineField(flsnamstr, ftyp, fa)

Console::Write("Adding Field: ")
Console::WriteLine(flsnamstr)

goto fin
end if


typ = gettype EndClassStmt
b = typ::IsInstanceOfType($object$stm)

if b = true then
AsmFactory::CreateTyp()
if AsmFactory::isNested = false then
AsmFactory::inClass = false
end if
if AsmFactory::isNested = true then
AsmFactory::CurnTypB = AsmFactory::CurnTypB2
AsmFactory::isNested = false
end if
goto fin
end if

typ = gettype MethodStmt
b = typ::IsInstanceOfType($object$stm)

if b = true then
var mtss as MethodStmt = stm


var mattrs as Attributes.Attribute[] = mtss::Attrs
var ma as MethodAttributes = Helpers::ProcessMethodAttrs(mattrs)
var mtssnam as Ident = mtss::MethodName
var mtssnamstr as string = mtssnam::Value
var paramarr as Expr[] = mtss::Params
var paramlen as integer = paramarr[l]
var rettyptok as TypeTok = mtss::RetTyp
var rettyp as System.Type = null
reft  = rettyptok::RefTyp
cmp = String::Compare(rettyptok::Value, "")

if reft = null then
if cmp = 0 then
else
Loader::MakeArr = rettyptok::IsArray
Loader::MakeRef = rettyptok::IsByRef
rettyp = Loader::LoadClass(rettyptok::Value)
end if
else
Loader::MakeArr = rettyptok::IsArray
Loader::MakeRef = rettyptok::IsByRef
rettyp = Loader::ProcessType(reft) 
end if

AsmFactory::TypArr = newarr System.Type 0

if paramlen = 0 then
else
Helpers::ProcessParams(paramarr)
end if

var typb as TypeBuilder = AsmFactory::CurnTypB
AsmFactory::CurnMetB = typb::DefineMethod(mtssnamstr, ma, rettyp, AsmFactory::TypArr)
AsmFactory::InitMtd()
Console::Write("Adding Method: ")
Console::WriteLine(mtssnamstr)

if paramlen = 0 then
else
Helpers::PostProcessParams(paramarr)
end if

goto fin
end if

typ = gettype EndMethodStmt
b = typ::IsInstanceOfType($object$stm)

if b = true then
ILEmitter::EmitRet()
goto fin
end if


place fin

end method

end class