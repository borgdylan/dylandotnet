Imports dylan.NET.Tokenizer.Parser
Imports dylan.NET.Tokenizer.AST.Tokens.Chars
Imports dylan.NET.Tokenizer.AST.Tokens.Attributes
Imports dylan.NET.Tokenizer.AST.Tokens.Literals
Imports dylan.NET.Tokenizer.AST.Tokens.TypeToks
Imports dylan.NET.Tokenizer.AST.Tokens.Ops
Imports dylan.NET.Tokenizer.AST.Stmts
Imports dylan.NET.Tokenizer.AST.Exprs
Imports dylan.NET.Tokenizer.AST.Tokens
Imports dylan.NET.Tokenizer.AST
Imports dylan.NET.Tokenizer.Lexer
Imports dylan.NET.Reflection
Imports dylan.NET.Utils
Imports dylan.NET
Imports System.Runtime.InteropServices
Imports System.Linq
Imports System.Collections.Generic
Imports System.Collections
Imports System.IO
Imports Microsoft.VisualBasic
Imports System.Xml
Imports System.Xml.Linq
Imports System.Data

Imports System
Imports System.Diagnostics
Imports System.Diagnostics.SymbolStore
Imports System.Reflection
Imports System.Resources
Imports System.Reflection.Emit
Module Module1

Public asmName As AssemblyName
Public asm As AssemblyBuilder
Public Typ As Type
Public Typ02 As Type
Public Typ03 As Type
Public Typ04 As Type
Public impstr(-1) As String
Public impasm(-1) As Assembly
Public interfacebool As Boolean
Public mdl As ModuleBuilder
Public resw As IResourceWriter
Public resobj As Object

Dim doc As ISymbolDocumentWriter

Sub addstr(ByVal str As String)
ReDim Preserve impstr(UBound(impstr) + 1)
impstr(UBound(impstr)) = str
End Sub

Sub addasm(ByVal asm As Assembly)
ReDim Preserve impasm(UBound(impasm) + 1)
impasm(UBound(impasm)) = asm
End Sub

Function MakeGetType(ByVal TypeName As String) As Type
Dim attachbrackets As Boolean = False
If TypeName Like "*[[]*]" Then
Dim split As String() = TypeName.Split(New [Char] () {"[","]"})
TypeName = split(0)
attachbrackets = True
End If
Dim ind As Integer = -1
Dim i As Integer = -1
Dim len As Integer = impstr.Length - 1
Do Until i = len
i = i + 1
If TypeName Like impstr(i) & "*" Then
ind = i
End If
Loop
If ind <> -1 Then
Dim assem As Assembly = impasm(ind)
If attachbrackets = True Then
TypeName = TypeName & "[]"
End If
MakeGetType = assem.GetType(TypeName)
Else
If attachbrackets = True Then
TypeName = TypeName & "[]"
End If
MakeGetType = Type.GetType(TypeName)
End If
Return MakeGetType
End Function

Dim doc2 As ISymbolDocumentWriter

Sub VarItem()
Dim VarItem As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "VarItem", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim Name As FieldBuilder = VarItem.DefineField("Name", GetType(System.String), FieldAttributes.Public)
Dim LocArg As FieldBuilder = VarItem.DefineField("LocArg", GetType(System.Boolean), FieldAttributes.Public)
Dim Index As FieldBuilder = VarItem.DefineField("Index", GetType(System.Int32), FieldAttributes.Public)
Dim VarTyp As FieldBuilder = VarItem.DefineField("VarTyp", GetType(System.Type), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = VarItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc2, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc2, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, Name)
ctor0IL.MarkSequencePoint(doc2, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, LocArg)
ctor0IL.MarkSequencePoint(doc2, 21, 1, 21, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, Index)
ctor0IL.MarkSequencePoint(doc2, 22, 1, 22, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, VarTyp)
ctor0IL.MarkSequencePoint(doc2, 23, 1, 23, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Boolean)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Int32)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Type)
Dim ctor1 As ConstructorBuilder = VarItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "nme")
Dim ctor1param02 As ParameterBuilder = ctor1.DefineParameter(2, ParameterAttributes.None, "la")
Dim ctor1param03 As ParameterBuilder = ctor1.DefineParameter(3, ParameterAttributes.None, "ind")
Dim ctor1param04 As ParameterBuilder = ctor1.DefineParameter(4, ParameterAttributes.None, "typ")
ctor1IL.MarkSequencePoint(doc2, 26, 1, 26, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc2, 27, 1, 27, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, Name)
ctor1IL.MarkSequencePoint(doc2, 28, 1, 28, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, LocArg)
ctor1IL.MarkSequencePoint(doc2, 29, 1, 29, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 3)
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, Index)
ctor1IL.MarkSequencePoint(doc2, 30, 1, 30, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 4)
Typ = GetType(System.Type)
ctor1IL.Emit(OpCodes.Stfld, VarTyp)
ctor1IL.MarkSequencePoint(doc2, 31, 1, 31, 100)
ctor1IL.Emit(OpCodes.Ret)
VarItem.CreateType()
End Sub


Dim doc3 As ISymbolDocumentWriter

Sub FieldItem()
Dim FieldItem As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "FieldItem", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim Name As FieldBuilder = FieldItem.DefineField("Name", GetType(System.String), FieldAttributes.Public)
Dim FieldTyp As FieldBuilder = FieldItem.DefineField("FieldTyp", GetType(System.Type), FieldAttributes.Public)
Dim FieldBldr As FieldBuilder = FieldItem.DefineField("FieldBldr", GetType(FieldBuilder), FieldAttributes.Public)
Dim LitVal As FieldBuilder = FieldItem.DefineField("LitVal", GetType(Literal), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = FieldItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc3, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc3, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, Name)
ctor0IL.MarkSequencePoint(doc3, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, FieldTyp)
ctor0IL.MarkSequencePoint(doc3, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, FieldBldr)
ctor0IL.MarkSequencePoint(doc3, 21, 1, 21, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, LitVal)
ctor0IL.MarkSequencePoint(doc3, 22, 1, 22, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Type)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(FieldBuilder)
Dim ctor1 As ConstructorBuilder = FieldItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "nme")
Dim ctor1param02 As ParameterBuilder = ctor1.DefineParameter(2, ParameterAttributes.None, "typ")
Dim ctor1param03 As ParameterBuilder = ctor1.DefineParameter(3, ParameterAttributes.None, "bld")
ctor1IL.MarkSequencePoint(doc3, 25, 1, 25, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc3, 26, 1, 26, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, Name)
ctor1IL.MarkSequencePoint(doc3, 27, 1, 27, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Type)
ctor1IL.Emit(OpCodes.Stfld, FieldTyp)
ctor1IL.MarkSequencePoint(doc3, 28, 1, 28, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 3)
Typ = GetType(FieldBuilder)
ctor1IL.Emit(OpCodes.Stfld, FieldBldr)
ctor1IL.MarkSequencePoint(doc3, 29, 1, 29, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldnull)
ctor1IL.Emit(OpCodes.Stfld, LitVal)
ctor1IL.MarkSequencePoint(doc3, 30, 1, 30, 100)
ctor1IL.Emit(OpCodes.Ret)
FieldItem.CreateType()
End Sub


Dim doc4 As ISymbolDocumentWriter

Sub MethodItem()
Dim MethodItem As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "MethodItem", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim Name As FieldBuilder = MethodItem.DefineField("Name", GetType(System.String), FieldAttributes.Public)
Dim MethodTyp As FieldBuilder = MethodItem.DefineField("MethodTyp", GetType(System.Type), FieldAttributes.Public)
Dim ParamTyps As FieldBuilder = MethodItem.DefineField("ParamTyps", GetType(System.Type).MakeArrayType(), FieldAttributes.Public)
Dim MethodBldr As FieldBuilder = MethodItem.DefineField("MethodBldr", GetType(MethodBuilder), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = MethodItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc4, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc4, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, Name)
ctor0IL.MarkSequencePoint(doc4, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, MethodTyp)
ctor0IL.MarkSequencePoint(doc4, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, MethodBldr)
ctor0IL.MarkSequencePoint(doc4, 21, 1, 21, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, GetType(System.Type))
ctor0IL.Emit(OpCodes.Stfld, ParamTyps)
ctor0IL.MarkSequencePoint(doc4, 22, 1, 22, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Type)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Type).MakeArrayType()
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(MethodBuilder)
Dim ctor1 As ConstructorBuilder = MethodItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "nme")
Dim ctor1param02 As ParameterBuilder = ctor1.DefineParameter(2, ParameterAttributes.None, "typ")
Dim ctor1param03 As ParameterBuilder = ctor1.DefineParameter(3, ParameterAttributes.None, "ptyps")
Dim ctor1param04 As ParameterBuilder = ctor1.DefineParameter(4, ParameterAttributes.None, "bld")
ctor1IL.MarkSequencePoint(doc4, 25, 1, 25, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc4, 26, 1, 26, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, Name)
ctor1IL.MarkSequencePoint(doc4, 27, 1, 27, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Type)
ctor1IL.Emit(OpCodes.Stfld, MethodTyp)
ctor1IL.MarkSequencePoint(doc4, 28, 1, 28, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 4)
Typ = GetType(MethodBuilder)
ctor1IL.Emit(OpCodes.Stfld, MethodBldr)
ctor1IL.MarkSequencePoint(doc4, 29, 1, 29, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 3)
Typ = GetType(System.Type).MakeArrayType()
ctor1IL.Emit(OpCodes.Stfld, ParamTyps)
ctor1IL.MarkSequencePoint(doc4, 30, 1, 30, 100)
ctor1IL.Emit(OpCodes.Ret)
MethodItem.CreateType()
End Sub


Dim doc5 As ISymbolDocumentWriter

Sub CtorItem()
Dim CtorItem As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "CtorItem", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim ParamTyps As FieldBuilder = CtorItem.DefineField("ParamTyps", GetType(System.Type).MakeArrayType(), FieldAttributes.Public)
Dim CtorBldr As FieldBuilder = CtorItem.DefineField("CtorBldr", GetType(ConstructorBuilder), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = CtorItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc5, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc5, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, CtorBldr)
ctor0IL.MarkSequencePoint(doc5, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, GetType(System.Type))
ctor0IL.Emit(OpCodes.Stfld, ParamTyps)
ctor0IL.MarkSequencePoint(doc5, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Type).MakeArrayType()
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(ConstructorBuilder)
Dim ctor1 As ConstructorBuilder = CtorItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "ptyps")
Dim ctor1param02 As ParameterBuilder = ctor1.DefineParameter(2, ParameterAttributes.None, "bld")
ctor1IL.MarkSequencePoint(doc5, 21, 1, 21, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc5, 22, 1, 22, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(ConstructorBuilder)
ctor1IL.Emit(OpCodes.Stfld, CtorBldr)
ctor1IL.MarkSequencePoint(doc5, 23, 1, 23, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type).MakeArrayType()
ctor1IL.Emit(OpCodes.Stfld, ParamTyps)
ctor1IL.MarkSequencePoint(doc5, 24, 1, 24, 100)
ctor1IL.Emit(OpCodes.Ret)
CtorItem.CreateType()
End Sub


Dim doc6 As ISymbolDocumentWriter

Sub LabelItem()
Dim LabelItem As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "LabelItem", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim Lbl As FieldBuilder = LabelItem.DefineField("Lbl", GetType(Emit.Label), FieldAttributes.Public)
Dim LblName As FieldBuilder = LabelItem.DefineField("LblName", GetType(System.String), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = LabelItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc6, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc6, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, LblName)
ctor0IL.MarkSequencePoint(doc6, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(Emit.Label)
Dim ctor1 As ConstructorBuilder = LabelItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "ln")
Dim ctor1param02 As ParameterBuilder = ctor1.DefineParameter(2, ParameterAttributes.None, "l")
ctor1IL.MarkSequencePoint(doc6, 20, 1, 20, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc6, 21, 1, 21, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, LblName)
ctor1IL.MarkSequencePoint(doc6, 22, 1, 22, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(Emit.Label)
ctor1IL.Emit(OpCodes.Stfld, Lbl)
ctor1IL.MarkSequencePoint(doc6, 23, 1, 23, 100)
ctor1IL.Emit(OpCodes.Ret)
LabelItem.CreateType()
End Sub


Dim doc7 As ISymbolDocumentWriter

Sub IfItem()
Dim IfItem As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "IfItem", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim EndLabel As FieldBuilder = IfItem.DefineField("EndLabel", GetType(Emit.Label), FieldAttributes.Public)
Dim NextBlkLabel As FieldBuilder = IfItem.DefineField("NextBlkLabel", GetType(Emit.Label), FieldAttributes.Public)
Dim ElsePass As FieldBuilder = IfItem.DefineField("ElsePass", GetType(System.Boolean), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = IfItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc7, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc7, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, ElsePass)
ctor0IL.MarkSequencePoint(doc7, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(Emit.Label)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(Emit.Label)
Dim ctor1 As ConstructorBuilder = IfItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "endl")
Dim ctor1param02 As ParameterBuilder = ctor1.DefineParameter(2, ParameterAttributes.None, "nbl")
ctor1IL.MarkSequencePoint(doc7, 21, 1, 21, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc7, 22, 1, 22, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Emit.Label)
ctor1IL.Emit(OpCodes.Stfld, EndLabel)
ctor1IL.MarkSequencePoint(doc7, 23, 1, 23, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(Emit.Label)
ctor1IL.Emit(OpCodes.Stfld, NextBlkLabel)
ctor1IL.MarkSequencePoint(doc7, 24, 1, 24, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, ElsePass)
ctor1IL.MarkSequencePoint(doc7, 25, 1, 25, 100)
ctor1IL.Emit(OpCodes.Ret)
IfItem.CreateType()
End Sub


Dim doc8 As ISymbolDocumentWriter

Sub TypeArr()
Dim TypeArr As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "TypeArr", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim Arr As FieldBuilder = TypeArr.DefineField("Arr", GetType(System.Type).MakeArrayType(), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = TypeArr.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc8, 14, 1, 14, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc8, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, GetType(System.Type))
ctor0IL.Emit(OpCodes.Stfld, Arr)
ctor0IL.MarkSequencePoint(doc8, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ret)
TypeArr.CreateType()
End Sub


Dim doc9 As ISymbolDocumentWriter

Sub SymTable()
Dim SymTable As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "SymTable", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass Or TypeAttributes.BeforeFieldInit, GetType(System.Object))
Dim VarLst As FieldBuilder = SymTable.DefineField("VarLst", asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").MakeArrayType(), FieldAttributes.Public Or FieldAttributes.Static)
Dim FldLst As FieldBuilder = SymTable.DefineField("FldLst", asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType(), FieldAttributes.Public Or FieldAttributes.Static)
Dim NestedFldLst As FieldBuilder = SymTable.DefineField("NestedFldLst", asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType(), FieldAttributes.Public Or FieldAttributes.Static)
Dim MetLst As FieldBuilder = SymTable.DefineField("MetLst", asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType(), FieldAttributes.Public Or FieldAttributes.Static)
Dim NestedMetLst As FieldBuilder = SymTable.DefineField("NestedMetLst", asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType(), FieldAttributes.Public Or FieldAttributes.Static)
Dim CtorLst As FieldBuilder = SymTable.DefineField("CtorLst", asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType(), FieldAttributes.Public Or FieldAttributes.Static)
Dim NestedCtorLst As FieldBuilder = SymTable.DefineField("NestedCtorLst", asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType(), FieldAttributes.Public Or FieldAttributes.Static)
Dim IfLst As FieldBuilder = SymTable.DefineField("IfLst", asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").MakeArrayType(), FieldAttributes.Public Or FieldAttributes.Static)
Dim LblLst As FieldBuilder = SymTable.DefineField("LblLst", asm.GetType("dylan.NET.Tokenizer.CodeGen.LabelItem").MakeArrayType(), FieldAttributes.Public Or FieldAttributes.Static)
Dim TypLst As FieldBuilder = SymTable.DefineField("TypLst", asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr").MakeArrayType(), FieldAttributes.Public Or FieldAttributes.Static)
Dim ctor0 As ConstructorBuilder = SymTable.DefineConstructor(MethodAttributes.Public Or MethodAttributes.Static,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc9, 23, 1, 23, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"))
ctor0IL.Emit(OpCodes.Stsfld, VarLst)
ctor0IL.MarkSequencePoint(doc9, 24, 1, 24, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
ctor0IL.Emit(OpCodes.Stsfld, FldLst)
ctor0IL.MarkSequencePoint(doc9, 25, 1, 25, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
ctor0IL.Emit(OpCodes.Stsfld, NestedFldLst)
ctor0IL.MarkSequencePoint(doc9, 26, 1, 26, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
ctor0IL.Emit(OpCodes.Stsfld, MetLst)
ctor0IL.MarkSequencePoint(doc9, 27, 1, 27, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
ctor0IL.Emit(OpCodes.Stsfld, NestedMetLst)
ctor0IL.MarkSequencePoint(doc9, 28, 1, 28, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
ctor0IL.Emit(OpCodes.Stsfld, CtorLst)
ctor0IL.MarkSequencePoint(doc9, 29, 1, 29, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
ctor0IL.Emit(OpCodes.Stsfld, NestedCtorLst)
ctor0IL.MarkSequencePoint(doc9, 30, 1, 30, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem"))
ctor0IL.Emit(OpCodes.Stsfld, IfLst)
ctor0IL.MarkSequencePoint(doc9, 31, 1, 31, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.LabelItem"))
ctor0IL.Emit(OpCodes.Stsfld, LblLst)
ctor0IL.MarkSequencePoint(doc9, 32, 1, 32, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr"))
ctor0IL.Emit(OpCodes.Stsfld, TypLst)
ctor0IL.MarkSequencePoint(doc9, 33, 1, 33, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim ResetIf As MethodBuilder = SymTable.DefineMethod("ResetIf", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim ResetIfIL As ILGenerator = ResetIf.GetILGenerator()
ResetIfIL.MarkSequencePoint(doc9, 36, 1, 36, 100)
ResetIfIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ResetIfIL.Emit(OpCodes.Conv_U)
ResetIfIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem"))
ResetIfIL.Emit(OpCodes.Stsfld, IfLst)
ResetIfIL.MarkSequencePoint(doc9, 37, 1, 37, 100)
ResetIfIL.Emit(OpCodes.Ret)
Dim ResetLbl As MethodBuilder = SymTable.DefineMethod("ResetLbl", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim ResetLblIL As ILGenerator = ResetLbl.GetILGenerator()
ResetLblIL.MarkSequencePoint(doc9, 40, 1, 40, 100)
ResetLblIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ResetLblIL.Emit(OpCodes.Conv_U)
ResetLblIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.LabelItem"))
ResetLblIL.Emit(OpCodes.Stsfld, LblLst)
ResetLblIL.MarkSequencePoint(doc9, 41, 1, 41, 100)
ResetLblIL.Emit(OpCodes.Ret)
Dim ResetVar As MethodBuilder = SymTable.DefineMethod("ResetVar", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim ResetVarIL As ILGenerator = ResetVar.GetILGenerator()
ResetVarIL.MarkSequencePoint(doc9, 44, 1, 44, 100)
ResetVarIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ResetVarIL.Emit(OpCodes.Conv_U)
ResetVarIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"))
ResetVarIL.Emit(OpCodes.Stsfld, VarLst)
ResetVarIL.MarkSequencePoint(doc9, 45, 1, 45, 100)
ResetVarIL.Emit(OpCodes.Ret)
Dim ResetFld As MethodBuilder = SymTable.DefineMethod("ResetFld", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim ResetFldIL As ILGenerator = ResetFld.GetILGenerator()
ResetFldIL.MarkSequencePoint(doc9, 48, 1, 48, 100)
ResetFldIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ResetFldIL.Emit(OpCodes.Conv_U)
ResetFldIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
ResetFldIL.Emit(OpCodes.Stsfld, FldLst)
ResetFldIL.MarkSequencePoint(doc9, 49, 1, 49, 100)
ResetFldIL.Emit(OpCodes.Ret)
Dim ResetNestedFld As MethodBuilder = SymTable.DefineMethod("ResetNestedFld", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim ResetNestedFldIL As ILGenerator = ResetNestedFld.GetILGenerator()
ResetNestedFldIL.MarkSequencePoint(doc9, 52, 1, 52, 100)
ResetNestedFldIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ResetNestedFldIL.Emit(OpCodes.Conv_U)
ResetNestedFldIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
ResetNestedFldIL.Emit(OpCodes.Stsfld, NestedFldLst)
ResetNestedFldIL.MarkSequencePoint(doc9, 53, 1, 53, 100)
ResetNestedFldIL.Emit(OpCodes.Ret)
Dim ResetMet As MethodBuilder = SymTable.DefineMethod("ResetMet", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim ResetMetIL As ILGenerator = ResetMet.GetILGenerator()
ResetMetIL.MarkSequencePoint(doc9, 56, 1, 56, 100)
ResetMetIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ResetMetIL.Emit(OpCodes.Conv_U)
ResetMetIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
ResetMetIL.Emit(OpCodes.Stsfld, MetLst)
ResetMetIL.MarkSequencePoint(doc9, 57, 1, 57, 100)
ResetMetIL.Emit(OpCodes.Ret)
Dim ResetNestedMet As MethodBuilder = SymTable.DefineMethod("ResetNestedMet", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim ResetNestedMetIL As ILGenerator = ResetNestedMet.GetILGenerator()
ResetNestedMetIL.MarkSequencePoint(doc9, 60, 1, 60, 100)
ResetNestedMetIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ResetNestedMetIL.Emit(OpCodes.Conv_U)
ResetNestedMetIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
ResetNestedMetIL.Emit(OpCodes.Stsfld, NestedMetLst)
ResetNestedMetIL.MarkSequencePoint(doc9, 61, 1, 61, 100)
ResetNestedMetIL.Emit(OpCodes.Ret)
Dim ResetCtor As MethodBuilder = SymTable.DefineMethod("ResetCtor", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim ResetCtorIL As ILGenerator = ResetCtor.GetILGenerator()
ResetCtorIL.MarkSequencePoint(doc9, 64, 1, 64, 100)
ResetCtorIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ResetCtorIL.Emit(OpCodes.Conv_U)
ResetCtorIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
ResetCtorIL.Emit(OpCodes.Stsfld, CtorLst)
ResetCtorIL.MarkSequencePoint(doc9, 65, 1, 65, 100)
ResetCtorIL.Emit(OpCodes.Ret)
Dim ResetNestedCtor As MethodBuilder = SymTable.DefineMethod("ResetNestedCtor", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim ResetNestedCtorIL As ILGenerator = ResetNestedCtor.GetILGenerator()
ResetNestedCtorIL.MarkSequencePoint(doc9, 68, 1, 68, 100)
ResetNestedCtorIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ResetNestedCtorIL.Emit(OpCodes.Conv_U)
ResetNestedCtorIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
ResetNestedCtorIL.Emit(OpCodes.Stsfld, NestedCtorLst)
ResetNestedCtorIL.MarkSequencePoint(doc9, 69, 1, 69, 100)
ResetNestedCtorIL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Boolean)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Int32)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Type)
Dim AddVar As MethodBuilder = SymTable.DefineMethod("AddVar", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ0)
Dim AddVarIL As ILGenerator = AddVar.GetILGenerator()
Dim AddVarparam01 As ParameterBuilder = AddVar.DefineParameter(1, ParameterAttributes.None, "nme")
Dim AddVarparam02 As ParameterBuilder = AddVar.DefineParameter(2, ParameterAttributes.None, "la")
Dim AddVarparam03 As ParameterBuilder = AddVar.DefineParameter(3, ParameterAttributes.None, "ind")
Dim AddVarparam04 As ParameterBuilder = AddVar.DefineParameter(4, ParameterAttributes.None, "typ")
AddVarIL.MarkSequencePoint(doc9, 73, 1, 73, 100)
Dim locbldr0 As LocalBuilder = AddVarIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"))
locbldr0.SetLocalSymInfo("vr")
Dim typ1(-1) As Type
AddVarIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = Typ
AddVarIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = Typ
AddVarIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = Typ
AddVarIL.Emit(OpCodes.Ldarg, 3)
Typ = GetType(System.Type)
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = Typ
AddVarIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetConstructor(typ1))
AddVarIL.Emit(OpCodes.Stloc, 0)
AddVarIL.MarkSequencePoint(doc9, 75, 1, 75, 100)
Dim locbldr1 As LocalBuilder = AddVarIL.DeclareLocal(GetType(System.Int32))
locbldr1.SetLocalSymInfo("len")
AddVarIL.Emit(OpCodes.Ldsfld, VarLst)
Typ = VarLst.FieldType
AddVarIL.Emit(OpCodes.Ldlen)
AddVarIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Stloc, 1)
AddVarIL.MarkSequencePoint(doc9, 76, 1, 76, 100)
Dim locbldr2 As LocalBuilder = AddVarIL.DeclareLocal(GetType(System.Int32))
locbldr2.SetLocalSymInfo("destl")
AddVarIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Add)
AddVarIL.Emit(OpCodes.Stloc, 2)
AddVarIL.MarkSequencePoint(doc9, 77, 1, 77, 100)
Dim locbldr3 As LocalBuilder = AddVarIL.DeclareLocal(GetType(System.Int32))
locbldr3.SetLocalSymInfo("stopel")
AddVarIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Sub)
AddVarIL.Emit(OpCodes.Stloc, 3)
AddVarIL.MarkSequencePoint(doc9, 78, 1, 78, 100)
Dim locbldr4 As LocalBuilder = AddVarIL.DeclareLocal(GetType(System.Int32))
locbldr4.SetLocalSymInfo("i")
AddVarIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Stloc, 4)
AddVarIL.MarkSequencePoint(doc9, 80, 1, 80, 100)
Dim locbldr5 As LocalBuilder = AddVarIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").MakeArrayType())
locbldr5.SetLocalSymInfo("destarr")
AddVarIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Conv_U)
AddVarIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"))
AddVarIL.Emit(OpCodes.Stloc, 5)
AddVarIL.MarkSequencePoint(doc9, 82, 1, 82, 100)
Dim label0 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
AddVarIL.MarkSequencePoint(doc9, 83, 1, 83, 100)
Dim label1 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
AddVarIL.MarkSequencePoint(doc9, 85, 1, 85, 100)
AddVarIL.MarkLabel(label0)
AddVarIL.MarkSequencePoint(doc9, 87, 1, 87, 100)
AddVarIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Add)
AddVarIL.Emit(OpCodes.Stloc, 4)
AddVarIL.MarkSequencePoint(doc9, 89, 1, 89, 100)
AddVarIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa0 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
Dim tru0 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
Dim cont0 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
AddVarIL.Emit(OpCodes.Bgt, tru0)
AddVarIL.Emit(OpCodes.Br, fa0)
AddVarIL.MarkLabel(tru0)
AddVarIL.MarkSequencePoint(doc9, 91, 1, 91, 100)
AddVarIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").MakeArrayType()
Typ02 = Typ
AddVarIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddVarIL.Emit(OpCodes.Ldsfld, VarLst)
Typ = VarLst.FieldType
Typ02 = Typ
AddVarIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddVarIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddVarIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").MakeArrayType().GetElementType())
AddVarIL.MarkSequencePoint(doc9, 93, 1, 93, 100)
AddVarIL.Emit(OpCodes.Br, cont0)
AddVarIL.MarkLabel(fa0)
AddVarIL.Emit(OpCodes.Br, cont0)
AddVarIL.MarkLabel(cont0)
AddVarIL.MarkSequencePoint(doc9, 95, 1, 95, 100)
AddVarIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
Dim fa1 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
Dim tru1 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
Dim cont1 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
AddVarIL.Emit(OpCodes.Beq, tru1)
AddVarIL.Emit(OpCodes.Br, fa1)
AddVarIL.MarkLabel(tru1)
AddVarIL.MarkSequencePoint(doc9, 96, 1, 96, 100)
AddVarIL.Emit(OpCodes.Br, label1)
AddVarIL.MarkSequencePoint(doc9, 97, 1, 97, 100)
AddVarIL.Emit(OpCodes.Br, cont1)
AddVarIL.MarkLabel(fa1)
AddVarIL.MarkSequencePoint(doc9, 98, 1, 98, 100)
AddVarIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa2 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
Dim tru2 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
Dim cont2 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
AddVarIL.Emit(OpCodes.Beq, fa2)
AddVarIL.Emit(OpCodes.Br, tru2)
AddVarIL.MarkLabel(tru2)
AddVarIL.MarkSequencePoint(doc9, 99, 1, 99, 100)
AddVarIL.Emit(OpCodes.Br, label0)
AddVarIL.MarkSequencePoint(doc9, 100, 1, 100, 100)
AddVarIL.Emit(OpCodes.Br, cont2)
AddVarIL.MarkLabel(fa2)
AddVarIL.MarkSequencePoint(doc9, 101, 1, 101, 100)
AddVarIL.Emit(OpCodes.Br, label1)
AddVarIL.MarkSequencePoint(doc9, 102, 1, 102, 100)
AddVarIL.Emit(OpCodes.Br, cont2)
AddVarIL.MarkLabel(cont2)
AddVarIL.MarkSequencePoint(doc9, 103, 1, 103, 100)
AddVarIL.Emit(OpCodes.Br, cont1)
AddVarIL.MarkLabel(cont1)
AddVarIL.MarkSequencePoint(doc9, 105, 1, 105, 100)
AddVarIL.MarkLabel(label1)
AddVarIL.MarkSequencePoint(doc9, 107, 1, 107, 100)
AddVarIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").MakeArrayType()
Typ02 = Typ
AddVarIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddVarIL.Emit(OpCodes.Ldloc, 0)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
AddVarIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").MakeArrayType().GetElementType())
AddVarIL.MarkSequencePoint(doc9, 109, 1, 109, 100)
AddVarIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").MakeArrayType()
AddVarIL.Emit(OpCodes.Stsfld, VarLst)
AddVarIL.MarkSequencePoint(doc9, 111, 1, 111, 100)
AddVarIL.Emit(OpCodes.Ret)
Dim typ2(-1) As Type
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = GetType(System.Type).MakeArrayType()
Dim AddTypArr As MethodBuilder = SymTable.DefineMethod("AddTypArr", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Int32), typ2)
Dim AddTypArrIL As ILGenerator = AddTypArr.GetILGenerator()
Dim AddTypArrparam01 As ParameterBuilder = AddTypArr.DefineParameter(1, ParameterAttributes.None, "arr")
AddTypArrIL.MarkSequencePoint(doc9, 115, 1, 115, 100)
Dim locbldr6 As LocalBuilder = AddTypArrIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr"))
locbldr6.SetLocalSymInfo("vr")
AddTypArrIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr").GetConstructor(Type.EmptyTypes))
AddTypArrIL.Emit(OpCodes.Stloc, 0)
AddTypArrIL.MarkSequencePoint(doc9, 116, 1, 116, 100)
AddTypArrIL.Emit(OpCodes.Ldloc, 0)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr")
AddTypArrIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type).MakeArrayType()
AddTypArrIL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr").GetField("Arr"))
AddTypArrIL.MarkSequencePoint(doc9, 118, 1, 118, 100)
Dim locbldr7 As LocalBuilder = AddTypArrIL.DeclareLocal(GetType(System.Int32))
locbldr7.SetLocalSymInfo("len")
AddTypArrIL.Emit(OpCodes.Ldsfld, TypLst)
Typ = TypLst.FieldType
AddTypArrIL.Emit(OpCodes.Ldlen)
AddTypArrIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddTypArrIL.Emit(OpCodes.Stloc, 1)
AddTypArrIL.MarkSequencePoint(doc9, 119, 1, 119, 100)
Dim locbldr8 As LocalBuilder = AddTypArrIL.DeclareLocal(GetType(System.Int32))
locbldr8.SetLocalSymInfo("destl")
AddTypArrIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddTypArrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddTypArrIL.Emit(OpCodes.Add)
AddTypArrIL.Emit(OpCodes.Stloc, 2)
AddTypArrIL.MarkSequencePoint(doc9, 120, 1, 120, 100)
Dim locbldr9 As LocalBuilder = AddTypArrIL.DeclareLocal(GetType(System.Int32))
locbldr9.SetLocalSymInfo("stopel")
AddTypArrIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddTypArrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddTypArrIL.Emit(OpCodes.Sub)
AddTypArrIL.Emit(OpCodes.Stloc, 3)
AddTypArrIL.MarkSequencePoint(doc9, 121, 1, 121, 100)
Dim locbldr10 As LocalBuilder = AddTypArrIL.DeclareLocal(GetType(System.Int32))
locbldr10.SetLocalSymInfo("i")
AddTypArrIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddTypArrIL.Emit(OpCodes.Stloc, 4)
AddTypArrIL.MarkSequencePoint(doc9, 123, 1, 123, 100)
Dim locbldr11 As LocalBuilder = AddTypArrIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr").MakeArrayType())
locbldr11.SetLocalSymInfo("destarr")
AddTypArrIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddTypArrIL.Emit(OpCodes.Conv_U)
AddTypArrIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr"))
AddTypArrIL.Emit(OpCodes.Stloc, 5)
AddTypArrIL.MarkSequencePoint(doc9, 125, 1, 125, 100)
Dim label2 As System.Reflection.Emit.Label = AddTypArrIL.DefineLabel()
AddTypArrIL.MarkSequencePoint(doc9, 126, 1, 126, 100)
Dim label3 As System.Reflection.Emit.Label = AddTypArrIL.DefineLabel()
AddTypArrIL.MarkSequencePoint(doc9, 128, 1, 128, 100)
AddTypArrIL.MarkLabel(label2)
AddTypArrIL.MarkSequencePoint(doc9, 130, 1, 130, 100)
AddTypArrIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddTypArrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddTypArrIL.Emit(OpCodes.Add)
AddTypArrIL.Emit(OpCodes.Stloc, 4)
AddTypArrIL.MarkSequencePoint(doc9, 132, 1, 132, 100)
AddTypArrIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddTypArrIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa3 As System.Reflection.Emit.Label = AddTypArrIL.DefineLabel()
Dim tru3 As System.Reflection.Emit.Label = AddTypArrIL.DefineLabel()
Dim cont3 As System.Reflection.Emit.Label = AddTypArrIL.DefineLabel()
AddTypArrIL.Emit(OpCodes.Bgt, tru3)
AddTypArrIL.Emit(OpCodes.Br, fa3)
AddTypArrIL.MarkLabel(tru3)
AddTypArrIL.MarkSequencePoint(doc9, 134, 1, 134, 100)
AddTypArrIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr").MakeArrayType()
Typ02 = Typ
AddTypArrIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddTypArrIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddTypArrIL.Emit(OpCodes.Ldsfld, TypLst)
Typ = TypLst.FieldType
Typ02 = Typ
AddTypArrIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddTypArrIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddTypArrIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddTypArrIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr").MakeArrayType().GetElementType())
AddTypArrIL.MarkSequencePoint(doc9, 136, 1, 136, 100)
AddTypArrIL.Emit(OpCodes.Br, cont3)
AddTypArrIL.MarkLabel(fa3)
AddTypArrIL.Emit(OpCodes.Br, cont3)
AddTypArrIL.MarkLabel(cont3)
AddTypArrIL.MarkSequencePoint(doc9, 138, 1, 138, 100)
AddTypArrIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddTypArrIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
Dim fa4 As System.Reflection.Emit.Label = AddTypArrIL.DefineLabel()
Dim tru4 As System.Reflection.Emit.Label = AddTypArrIL.DefineLabel()
Dim cont4 As System.Reflection.Emit.Label = AddTypArrIL.DefineLabel()
AddTypArrIL.Emit(OpCodes.Beq, tru4)
AddTypArrIL.Emit(OpCodes.Br, fa4)
AddTypArrIL.MarkLabel(tru4)
AddTypArrIL.MarkSequencePoint(doc9, 139, 1, 139, 100)
AddTypArrIL.Emit(OpCodes.Br, label3)
AddTypArrIL.MarkSequencePoint(doc9, 140, 1, 140, 100)
AddTypArrIL.Emit(OpCodes.Br, cont4)
AddTypArrIL.MarkLabel(fa4)
AddTypArrIL.MarkSequencePoint(doc9, 141, 1, 141, 100)
AddTypArrIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddTypArrIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa5 As System.Reflection.Emit.Label = AddTypArrIL.DefineLabel()
Dim tru5 As System.Reflection.Emit.Label = AddTypArrIL.DefineLabel()
Dim cont5 As System.Reflection.Emit.Label = AddTypArrIL.DefineLabel()
AddTypArrIL.Emit(OpCodes.Beq, fa5)
AddTypArrIL.Emit(OpCodes.Br, tru5)
AddTypArrIL.MarkLabel(tru5)
AddTypArrIL.MarkSequencePoint(doc9, 142, 1, 142, 100)
AddTypArrIL.Emit(OpCodes.Br, label2)
AddTypArrIL.MarkSequencePoint(doc9, 143, 1, 143, 100)
AddTypArrIL.Emit(OpCodes.Br, cont5)
AddTypArrIL.MarkLabel(fa5)
AddTypArrIL.MarkSequencePoint(doc9, 144, 1, 144, 100)
AddTypArrIL.Emit(OpCodes.Br, label3)
AddTypArrIL.MarkSequencePoint(doc9, 145, 1, 145, 100)
AddTypArrIL.Emit(OpCodes.Br, cont5)
AddTypArrIL.MarkLabel(cont5)
AddTypArrIL.MarkSequencePoint(doc9, 146, 1, 146, 100)
AddTypArrIL.Emit(OpCodes.Br, cont4)
AddTypArrIL.MarkLabel(cont4)
AddTypArrIL.MarkSequencePoint(doc9, 148, 1, 148, 100)
AddTypArrIL.MarkLabel(label3)
AddTypArrIL.MarkSequencePoint(doc9, 150, 1, 150, 100)
AddTypArrIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr").MakeArrayType()
Typ02 = Typ
AddTypArrIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddTypArrIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddTypArrIL.Emit(OpCodes.Ldloc, 0)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr")
AddTypArrIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr").MakeArrayType().GetElementType())
AddTypArrIL.MarkSequencePoint(doc9, 152, 1, 152, 100)
AddTypArrIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr").MakeArrayType()
AddTypArrIL.Emit(OpCodes.Stsfld, TypLst)
AddTypArrIL.MarkSequencePoint(doc9, 154, 1, 154, 100)
AddTypArrIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddTypArrIL.MarkSequencePoint(doc9, 155, 1, 155, 100)
AddTypArrIL.Emit(OpCodes.Ret)
Dim PopTypArr As MethodBuilder = SymTable.DefineMethod("PopTypArr", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Type).MakeArrayType(), Type.EmptyTypes)
Dim PopTypArrIL As ILGenerator = PopTypArr.GetILGenerator()
PopTypArrIL.MarkSequencePoint(doc9, 159, 1, 159, 100)
Dim locbldr12 As LocalBuilder = PopTypArrIL.DeclareLocal(GetType(System.Type).MakeArrayType())
locbldr12.SetLocalSymInfo("a")
PopTypArrIL.Emit(OpCodes.Ldnull)
PopTypArrIL.Emit(OpCodes.Stloc, 0)
PopTypArrIL.MarkSequencePoint(doc9, 160, 1, 160, 100)
Dim locbldr13 As LocalBuilder = PopTypArrIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr"))
locbldr13.SetLocalSymInfo("b")
PopTypArrIL.Emit(OpCodes.Ldnull)
PopTypArrIL.Emit(OpCodes.Stloc, 1)
PopTypArrIL.MarkSequencePoint(doc9, 161, 1, 161, 100)
Dim locbldr14 As LocalBuilder = PopTypArrIL.DeclareLocal(GetType(System.Int32))
locbldr14.SetLocalSymInfo("len")
PopTypArrIL.Emit(OpCodes.Ldsfld, TypLst)
Typ = TypLst.FieldType
PopTypArrIL.Emit(OpCodes.Ldlen)
PopTypArrIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
PopTypArrIL.Emit(OpCodes.Stloc, 2)
PopTypArrIL.MarkSequencePoint(doc9, 162, 1, 162, 100)
Dim locbldr15 As LocalBuilder = PopTypArrIL.DeclareLocal(GetType(System.Int32))
locbldr15.SetLocalSymInfo("destl")
PopTypArrIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
PopTypArrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PopTypArrIL.Emit(OpCodes.Sub)
PopTypArrIL.Emit(OpCodes.Stloc, 3)
PopTypArrIL.MarkSequencePoint(doc9, 163, 1, 163, 100)
Dim locbldr16 As LocalBuilder = PopTypArrIL.DeclareLocal(GetType(System.Int32))
locbldr16.SetLocalSymInfo("stopel")
PopTypArrIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
PopTypArrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PopTypArrIL.Emit(OpCodes.Sub)
PopTypArrIL.Emit(OpCodes.Stloc, 4)
PopTypArrIL.MarkSequencePoint(doc9, 164, 1, 164, 100)
Dim locbldr17 As LocalBuilder = PopTypArrIL.DeclareLocal(GetType(System.Int32))
locbldr17.SetLocalSymInfo("i")
PopTypArrIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
PopTypArrIL.Emit(OpCodes.Stloc, 5)
PopTypArrIL.MarkSequencePoint(doc9, 165, 1, 165, 100)
Dim locbldr18 As LocalBuilder = PopTypArrIL.DeclareLocal(GetType(System.Int32))
locbldr18.SetLocalSymInfo("j")
PopTypArrIL.MarkSequencePoint(doc9, 167, 1, 167, 100)
Dim locbldr19 As LocalBuilder = PopTypArrIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr").MakeArrayType())
locbldr19.SetLocalSymInfo("destarr")
PopTypArrIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
PopTypArrIL.Emit(OpCodes.Conv_U)
PopTypArrIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr"))
PopTypArrIL.Emit(OpCodes.Stloc, 7)
PopTypArrIL.MarkSequencePoint(doc9, 169, 1, 169, 100)
Dim label4 As System.Reflection.Emit.Label = PopTypArrIL.DefineLabel()
PopTypArrIL.MarkSequencePoint(doc9, 170, 1, 170, 100)
Dim label5 As System.Reflection.Emit.Label = PopTypArrIL.DefineLabel()
PopTypArrIL.MarkSequencePoint(doc9, 172, 1, 172, 100)
PopTypArrIL.MarkLabel(label4)
PopTypArrIL.MarkSequencePoint(doc9, 174, 1, 174, 100)
PopTypArrIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Int32)
PopTypArrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PopTypArrIL.Emit(OpCodes.Add)
PopTypArrIL.Emit(OpCodes.Stloc, 5)
PopTypArrIL.MarkSequencePoint(doc9, 176, 1, 176, 100)
PopTypArrIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
PopTypArrIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa6 As System.Reflection.Emit.Label = PopTypArrIL.DefineLabel()
Dim tru6 As System.Reflection.Emit.Label = PopTypArrIL.DefineLabel()
Dim cont6 As System.Reflection.Emit.Label = PopTypArrIL.DefineLabel()
PopTypArrIL.Emit(OpCodes.Bgt, tru6)
PopTypArrIL.Emit(OpCodes.Br, fa6)
PopTypArrIL.MarkLabel(tru6)
PopTypArrIL.MarkSequencePoint(doc9, 179, 1, 179, 100)
PopTypArrIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
PopTypArrIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa7 As System.Reflection.Emit.Label = PopTypArrIL.DefineLabel()
Dim tru7 As System.Reflection.Emit.Label = PopTypArrIL.DefineLabel()
Dim cont7 As System.Reflection.Emit.Label = PopTypArrIL.DefineLabel()
PopTypArrIL.Emit(OpCodes.Bgt, tru7)
PopTypArrIL.Emit(OpCodes.Br, fa7)
PopTypArrIL.MarkLabel(tru7)
PopTypArrIL.MarkSequencePoint(doc9, 181, 1, 181, 100)
PopTypArrIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Int32)
PopTypArrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PopTypArrIL.Emit(OpCodes.Sub)
PopTypArrIL.Emit(OpCodes.Stloc, 6)
PopTypArrIL.MarkSequencePoint(doc9, 182, 1, 182, 100)
PopTypArrIL.Emit(OpCodes.Ldloc, 7)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr").MakeArrayType()
Typ02 = Typ
PopTypArrIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
PopTypArrIL.Emit(OpCodes.Conv_U)
Typ = Typ02
PopTypArrIL.Emit(OpCodes.Ldsfld, TypLst)
Typ = TypLst.FieldType
Typ02 = Typ
PopTypArrIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Int32)
PopTypArrIL.Emit(OpCodes.Conv_U)
Typ = Typ02
PopTypArrIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
PopTypArrIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr").MakeArrayType().GetElementType())
PopTypArrIL.MarkSequencePoint(doc9, 184, 1, 184, 100)
PopTypArrIL.Emit(OpCodes.Br, cont7)
PopTypArrIL.MarkLabel(fa7)
PopTypArrIL.Emit(OpCodes.Br, cont7)
PopTypArrIL.MarkLabel(cont7)
PopTypArrIL.MarkSequencePoint(doc9, 186, 1, 186, 100)
PopTypArrIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Int32)
PopTypArrIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
Dim fa8 As System.Reflection.Emit.Label = PopTypArrIL.DefineLabel()
Dim tru8 As System.Reflection.Emit.Label = PopTypArrIL.DefineLabel()
Dim cont8 As System.Reflection.Emit.Label = PopTypArrIL.DefineLabel()
PopTypArrIL.Emit(OpCodes.Beq, tru8)
PopTypArrIL.Emit(OpCodes.Br, fa8)
PopTypArrIL.MarkLabel(tru8)
PopTypArrIL.MarkSequencePoint(doc9, 187, 1, 187, 100)
PopTypArrIL.Emit(OpCodes.Br, label5)
PopTypArrIL.MarkSequencePoint(doc9, 188, 1, 188, 100)
PopTypArrIL.Emit(OpCodes.Br, cont8)
PopTypArrIL.MarkLabel(fa8)
PopTypArrIL.MarkSequencePoint(doc9, 189, 1, 189, 100)
PopTypArrIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
PopTypArrIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa9 As System.Reflection.Emit.Label = PopTypArrIL.DefineLabel()
Dim tru9 As System.Reflection.Emit.Label = PopTypArrIL.DefineLabel()
Dim cont9 As System.Reflection.Emit.Label = PopTypArrIL.DefineLabel()
PopTypArrIL.Emit(OpCodes.Beq, fa9)
PopTypArrIL.Emit(OpCodes.Br, tru9)
PopTypArrIL.MarkLabel(tru9)
PopTypArrIL.MarkSequencePoint(doc9, 190, 1, 190, 100)
PopTypArrIL.Emit(OpCodes.Br, label4)
PopTypArrIL.MarkSequencePoint(doc9, 191, 1, 191, 100)
PopTypArrIL.Emit(OpCodes.Br, cont9)
PopTypArrIL.MarkLabel(fa9)
PopTypArrIL.MarkSequencePoint(doc9, 192, 1, 192, 100)
PopTypArrIL.Emit(OpCodes.Br, label5)
PopTypArrIL.MarkSequencePoint(doc9, 193, 1, 193, 100)
PopTypArrIL.Emit(OpCodes.Br, cont9)
PopTypArrIL.MarkLabel(cont9)
PopTypArrIL.MarkSequencePoint(doc9, 194, 1, 194, 100)
PopTypArrIL.Emit(OpCodes.Br, cont8)
PopTypArrIL.MarkLabel(cont8)
PopTypArrIL.MarkSequencePoint(doc9, 196, 1, 196, 100)
PopTypArrIL.Emit(OpCodes.Br, cont6)
PopTypArrIL.MarkLabel(fa6)
PopTypArrIL.Emit(OpCodes.Br, cont6)
PopTypArrIL.MarkLabel(cont6)
PopTypArrIL.MarkSequencePoint(doc9, 199, 1, 199, 100)
PopTypArrIL.MarkLabel(label5)
PopTypArrIL.MarkSequencePoint(doc9, 201, 1, 201, 100)
PopTypArrIL.Emit(OpCodes.Ldsfld, TypLst)
Typ = TypLst.FieldType
Typ02 = Typ
PopTypArrIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
PopTypArrIL.Emit(OpCodes.Conv_U)
Typ = Typ02
PopTypArrIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
PopTypArrIL.Emit(OpCodes.Stloc, 1)
PopTypArrIL.MarkSequencePoint(doc9, 202, 1, 202, 100)
PopTypArrIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr")
PopTypArrIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr").GetField("Arr"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr").GetField("Arr").FieldType
PopTypArrIL.Emit(OpCodes.Stloc, 0)
PopTypArrIL.MarkSequencePoint(doc9, 204, 1, 204, 100)
PopTypArrIL.Emit(OpCodes.Ldloc, 7)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr").MakeArrayType()
PopTypArrIL.Emit(OpCodes.Stsfld, TypLst)
PopTypArrIL.MarkSequencePoint(doc9, 206, 1, 206, 100)
PopTypArrIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type).MakeArrayType()
PopTypArrIL.MarkSequencePoint(doc9, 208, 1, 208, 100)
PopTypArrIL.Emit(OpCodes.Ret)
Dim typ3(-1) As Type
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = GetType(System.String)
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = GetType(System.Type)
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = GetType(FieldBuilder)
Dim AddFld As MethodBuilder = SymTable.DefineMethod("AddFld", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ3)
Dim AddFldIL As ILGenerator = AddFld.GetILGenerator()
Dim AddFldparam01 As ParameterBuilder = AddFld.DefineParameter(1, ParameterAttributes.None, "nme")
Dim AddFldparam02 As ParameterBuilder = AddFld.DefineParameter(2, ParameterAttributes.None, "typ")
Dim AddFldparam03 As ParameterBuilder = AddFld.DefineParameter(3, ParameterAttributes.None, "fld")
AddFldIL.MarkSequencePoint(doc9, 213, 1, 213, 100)
Dim locbldr20 As LocalBuilder = AddFldIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
locbldr20.SetLocalSymInfo("vr")
Dim typ4(-1) As Type
AddFldIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
AddFldIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
AddFldIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(FieldBuilder)
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
AddFldIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").GetConstructor(typ4))
AddFldIL.Emit(OpCodes.Stloc, 0)
AddFldIL.MarkSequencePoint(doc9, 215, 1, 215, 100)
Dim locbldr21 As LocalBuilder = AddFldIL.DeclareLocal(GetType(System.Int32))
locbldr21.SetLocalSymInfo("len")
AddFldIL.Emit(OpCodes.Ldsfld, FldLst)
Typ = FldLst.FieldType
AddFldIL.Emit(OpCodes.Ldlen)
AddFldIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Stloc, 1)
AddFldIL.MarkSequencePoint(doc9, 216, 1, 216, 100)
Dim locbldr22 As LocalBuilder = AddFldIL.DeclareLocal(GetType(System.Int32))
locbldr22.SetLocalSymInfo("destl")
AddFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Add)
AddFldIL.Emit(OpCodes.Stloc, 2)
AddFldIL.MarkSequencePoint(doc9, 217, 1, 217, 100)
Dim locbldr23 As LocalBuilder = AddFldIL.DeclareLocal(GetType(System.Int32))
locbldr23.SetLocalSymInfo("stopel")
AddFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Sub)
AddFldIL.Emit(OpCodes.Stloc, 3)
AddFldIL.MarkSequencePoint(doc9, 218, 1, 218, 100)
Dim locbldr24 As LocalBuilder = AddFldIL.DeclareLocal(GetType(System.Int32))
locbldr24.SetLocalSymInfo("i")
AddFldIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Stloc, 4)
AddFldIL.MarkSequencePoint(doc9, 220, 1, 220, 100)
Dim locbldr25 As LocalBuilder = AddFldIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType())
locbldr25.SetLocalSymInfo("destarr")
AddFldIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Conv_U)
AddFldIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
AddFldIL.Emit(OpCodes.Stloc, 5)
AddFldIL.MarkSequencePoint(doc9, 222, 1, 222, 100)
Dim label6 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
AddFldIL.MarkSequencePoint(doc9, 223, 1, 223, 100)
Dim label7 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
AddFldIL.MarkSequencePoint(doc9, 225, 1, 225, 100)
AddFldIL.MarkLabel(label6)
AddFldIL.MarkSequencePoint(doc9, 227, 1, 227, 100)
AddFldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Add)
AddFldIL.Emit(OpCodes.Stloc, 4)
AddFldIL.MarkSequencePoint(doc9, 229, 1, 229, 100)
AddFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa10 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
Dim tru10 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
Dim cont10 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
AddFldIL.Emit(OpCodes.Bgt, tru10)
AddFldIL.Emit(OpCodes.Br, fa10)
AddFldIL.MarkLabel(tru10)
AddFldIL.MarkSequencePoint(doc9, 231, 1, 231, 100)
AddFldIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType()
Typ02 = Typ
AddFldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddFldIL.Emit(OpCodes.Ldsfld, FldLst)
Typ = FldLst.FieldType
Typ02 = Typ
AddFldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddFldIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddFldIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType().GetElementType())
AddFldIL.MarkSequencePoint(doc9, 233, 1, 233, 100)
AddFldIL.Emit(OpCodes.Br, cont10)
AddFldIL.MarkLabel(fa10)
AddFldIL.Emit(OpCodes.Br, cont10)
AddFldIL.MarkLabel(cont10)
AddFldIL.MarkSequencePoint(doc9, 235, 1, 235, 100)
AddFldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
Dim fa11 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
Dim tru11 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
Dim cont11 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
AddFldIL.Emit(OpCodes.Beq, tru11)
AddFldIL.Emit(OpCodes.Br, fa11)
AddFldIL.MarkLabel(tru11)
AddFldIL.MarkSequencePoint(doc9, 236, 1, 236, 100)
AddFldIL.Emit(OpCodes.Br, label7)
AddFldIL.MarkSequencePoint(doc9, 237, 1, 237, 100)
AddFldIL.Emit(OpCodes.Br, cont11)
AddFldIL.MarkLabel(fa11)
AddFldIL.MarkSequencePoint(doc9, 238, 1, 238, 100)
AddFldIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa12 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
Dim tru12 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
Dim cont12 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
AddFldIL.Emit(OpCodes.Beq, fa12)
AddFldIL.Emit(OpCodes.Br, tru12)
AddFldIL.MarkLabel(tru12)
AddFldIL.MarkSequencePoint(doc9, 239, 1, 239, 100)
AddFldIL.Emit(OpCodes.Br, label6)
AddFldIL.MarkSequencePoint(doc9, 240, 1, 240, 100)
AddFldIL.Emit(OpCodes.Br, cont12)
AddFldIL.MarkLabel(fa12)
AddFldIL.MarkSequencePoint(doc9, 241, 1, 241, 100)
AddFldIL.Emit(OpCodes.Br, label7)
AddFldIL.MarkSequencePoint(doc9, 242, 1, 242, 100)
AddFldIL.Emit(OpCodes.Br, cont12)
AddFldIL.MarkLabel(cont12)
AddFldIL.MarkSequencePoint(doc9, 243, 1, 243, 100)
AddFldIL.Emit(OpCodes.Br, cont11)
AddFldIL.MarkLabel(cont11)
AddFldIL.MarkSequencePoint(doc9, 245, 1, 245, 100)
AddFldIL.MarkLabel(label7)
AddFldIL.MarkSequencePoint(doc9, 247, 1, 247, 100)
AddFldIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType()
Typ02 = Typ
AddFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddFldIL.Emit(OpCodes.Ldloc, 0)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem")
AddFldIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType().GetElementType())
AddFldIL.MarkSequencePoint(doc9, 249, 1, 249, 100)
AddFldIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType()
AddFldIL.Emit(OpCodes.Stsfld, FldLst)
AddFldIL.MarkSequencePoint(doc9, 251, 1, 251, 100)
AddFldIL.Emit(OpCodes.Ret)
Dim typ5(-1) As Type
ReDim Preserve typ5(UBound(typ5) + 1)
typ5(UBound(typ5)) = GetType(System.String)
ReDim Preserve typ5(UBound(typ5) + 1)
typ5(UBound(typ5)) = GetType(System.Type)
ReDim Preserve typ5(UBound(typ5) + 1)
typ5(UBound(typ5)) = GetType(FieldBuilder)
Dim AddNestedFld As MethodBuilder = SymTable.DefineMethod("AddNestedFld", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ5)
Dim AddNestedFldIL As ILGenerator = AddNestedFld.GetILGenerator()
Dim AddNestedFldparam01 As ParameterBuilder = AddNestedFld.DefineParameter(1, ParameterAttributes.None, "nme")
Dim AddNestedFldparam02 As ParameterBuilder = AddNestedFld.DefineParameter(2, ParameterAttributes.None, "typ")
Dim AddNestedFldparam03 As ParameterBuilder = AddNestedFld.DefineParameter(3, ParameterAttributes.None, "fld")
AddNestedFldIL.MarkSequencePoint(doc9, 255, 1, 255, 100)
Dim locbldr26 As LocalBuilder = AddNestedFldIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
locbldr26.SetLocalSymInfo("vr")
Dim typ6(-1) As Type
AddNestedFldIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = Typ
AddNestedFldIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = Typ
AddNestedFldIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(FieldBuilder)
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = Typ
AddNestedFldIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").GetConstructor(typ6))
AddNestedFldIL.Emit(OpCodes.Stloc, 0)
AddNestedFldIL.MarkSequencePoint(doc9, 257, 1, 257, 100)
Dim locbldr27 As LocalBuilder = AddNestedFldIL.DeclareLocal(GetType(System.Int32))
locbldr27.SetLocalSymInfo("len")
AddNestedFldIL.Emit(OpCodes.Ldsfld, NestedFldLst)
Typ = NestedFldLst.FieldType
AddNestedFldIL.Emit(OpCodes.Ldlen)
AddNestedFldIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Stloc, 1)
AddNestedFldIL.MarkSequencePoint(doc9, 258, 1, 258, 100)
Dim locbldr28 As LocalBuilder = AddNestedFldIL.DeclareLocal(GetType(System.Int32))
locbldr28.SetLocalSymInfo("destl")
AddNestedFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Add)
AddNestedFldIL.Emit(OpCodes.Stloc, 2)
AddNestedFldIL.MarkSequencePoint(doc9, 259, 1, 259, 100)
Dim locbldr29 As LocalBuilder = AddNestedFldIL.DeclareLocal(GetType(System.Int32))
locbldr29.SetLocalSymInfo("stopel")
AddNestedFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Sub)
AddNestedFldIL.Emit(OpCodes.Stloc, 3)
AddNestedFldIL.MarkSequencePoint(doc9, 260, 1, 260, 100)
Dim locbldr30 As LocalBuilder = AddNestedFldIL.DeclareLocal(GetType(System.Int32))
locbldr30.SetLocalSymInfo("i")
AddNestedFldIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Stloc, 4)
AddNestedFldIL.MarkSequencePoint(doc9, 262, 1, 262, 100)
Dim locbldr31 As LocalBuilder = AddNestedFldIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType())
locbldr31.SetLocalSymInfo("destarr")
AddNestedFldIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Conv_U)
AddNestedFldIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
AddNestedFldIL.Emit(OpCodes.Stloc, 5)
AddNestedFldIL.MarkSequencePoint(doc9, 264, 1, 264, 100)
Dim label8 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
AddNestedFldIL.MarkSequencePoint(doc9, 265, 1, 265, 100)
Dim label9 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
AddNestedFldIL.MarkSequencePoint(doc9, 267, 1, 267, 100)
AddNestedFldIL.MarkLabel(label8)
AddNestedFldIL.MarkSequencePoint(doc9, 269, 1, 269, 100)
AddNestedFldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Add)
AddNestedFldIL.Emit(OpCodes.Stloc, 4)
AddNestedFldIL.MarkSequencePoint(doc9, 271, 1, 271, 100)
AddNestedFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa13 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
Dim tru13 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
Dim cont13 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
AddNestedFldIL.Emit(OpCodes.Bgt, tru13)
AddNestedFldIL.Emit(OpCodes.Br, fa13)
AddNestedFldIL.MarkLabel(tru13)
AddNestedFldIL.MarkSequencePoint(doc9, 273, 1, 273, 100)
AddNestedFldIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType()
Typ02 = Typ
AddNestedFldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNestedFldIL.Emit(OpCodes.Ldsfld, NestedFldLst)
Typ = NestedFldLst.FieldType
Typ02 = Typ
AddNestedFldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNestedFldIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddNestedFldIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType().GetElementType())
AddNestedFldIL.MarkSequencePoint(doc9, 275, 1, 275, 100)
AddNestedFldIL.Emit(OpCodes.Br, cont13)
AddNestedFldIL.MarkLabel(fa13)
AddNestedFldIL.Emit(OpCodes.Br, cont13)
AddNestedFldIL.MarkLabel(cont13)
AddNestedFldIL.MarkSequencePoint(doc9, 277, 1, 277, 100)
AddNestedFldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
Dim fa14 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
Dim tru14 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
Dim cont14 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
AddNestedFldIL.Emit(OpCodes.Beq, tru14)
AddNestedFldIL.Emit(OpCodes.Br, fa14)
AddNestedFldIL.MarkLabel(tru14)
AddNestedFldIL.MarkSequencePoint(doc9, 278, 1, 278, 100)
AddNestedFldIL.Emit(OpCodes.Br, label9)
AddNestedFldIL.MarkSequencePoint(doc9, 279, 1, 279, 100)
AddNestedFldIL.Emit(OpCodes.Br, cont14)
AddNestedFldIL.MarkLabel(fa14)
AddNestedFldIL.MarkSequencePoint(doc9, 280, 1, 280, 100)
AddNestedFldIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa15 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
Dim tru15 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
Dim cont15 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
AddNestedFldIL.Emit(OpCodes.Beq, fa15)
AddNestedFldIL.Emit(OpCodes.Br, tru15)
AddNestedFldIL.MarkLabel(tru15)
AddNestedFldIL.MarkSequencePoint(doc9, 281, 1, 281, 100)
AddNestedFldIL.Emit(OpCodes.Br, label8)
AddNestedFldIL.MarkSequencePoint(doc9, 282, 1, 282, 100)
AddNestedFldIL.Emit(OpCodes.Br, cont15)
AddNestedFldIL.MarkLabel(fa15)
AddNestedFldIL.MarkSequencePoint(doc9, 283, 1, 283, 100)
AddNestedFldIL.Emit(OpCodes.Br, label9)
AddNestedFldIL.MarkSequencePoint(doc9, 284, 1, 284, 100)
AddNestedFldIL.Emit(OpCodes.Br, cont15)
AddNestedFldIL.MarkLabel(cont15)
AddNestedFldIL.MarkSequencePoint(doc9, 285, 1, 285, 100)
AddNestedFldIL.Emit(OpCodes.Br, cont14)
AddNestedFldIL.MarkLabel(cont14)
AddNestedFldIL.MarkSequencePoint(doc9, 287, 1, 287, 100)
AddNestedFldIL.MarkLabel(label9)
AddNestedFldIL.MarkSequencePoint(doc9, 289, 1, 289, 100)
AddNestedFldIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType()
Typ02 = Typ
AddNestedFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNestedFldIL.Emit(OpCodes.Ldloc, 0)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem")
AddNestedFldIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType().GetElementType())
AddNestedFldIL.MarkSequencePoint(doc9, 291, 1, 291, 100)
AddNestedFldIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType()
AddNestedFldIL.Emit(OpCodes.Stsfld, NestedFldLst)
AddNestedFldIL.MarkSequencePoint(doc9, 293, 1, 293, 100)
AddNestedFldIL.Emit(OpCodes.Ret)
Dim typ7(-1) As Type
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = GetType(System.String)
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = GetType(System.Type)
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = GetType(System.Type).MakeArrayType()
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = GetType(MethodBuilder)
Dim AddMet As MethodBuilder = SymTable.DefineMethod("AddMet", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ7)
Dim AddMetIL As ILGenerator = AddMet.GetILGenerator()
Dim AddMetparam01 As ParameterBuilder = AddMet.DefineParameter(1, ParameterAttributes.None, "nme")
Dim AddMetparam02 As ParameterBuilder = AddMet.DefineParameter(2, ParameterAttributes.None, "typ")
Dim AddMetparam03 As ParameterBuilder = AddMet.DefineParameter(3, ParameterAttributes.None, "ptyps")
Dim AddMetparam04 As ParameterBuilder = AddMet.DefineParameter(4, ParameterAttributes.None, "met")
AddMetIL.MarkSequencePoint(doc9, 298, 1, 298, 100)
Dim locbldr32 As LocalBuilder = AddMetIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
locbldr32.SetLocalSymInfo("vr")
Dim typ8(-1) As Type
AddMetIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = Typ
AddMetIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = Typ
AddMetIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = Typ
AddMetIL.Emit(OpCodes.Ldarg, 3)
Typ = GetType(MethodBuilder)
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = Typ
AddMetIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").GetConstructor(typ8))
AddMetIL.Emit(OpCodes.Stloc, 0)
AddMetIL.MarkSequencePoint(doc9, 300, 1, 300, 100)
Dim locbldr33 As LocalBuilder = AddMetIL.DeclareLocal(GetType(System.Int32))
locbldr33.SetLocalSymInfo("len")
AddMetIL.Emit(OpCodes.Ldsfld, MetLst)
Typ = MetLst.FieldType
AddMetIL.Emit(OpCodes.Ldlen)
AddMetIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Stloc, 1)
AddMetIL.MarkSequencePoint(doc9, 301, 1, 301, 100)
Dim locbldr34 As LocalBuilder = AddMetIL.DeclareLocal(GetType(System.Int32))
locbldr34.SetLocalSymInfo("destl")
AddMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Add)
AddMetIL.Emit(OpCodes.Stloc, 2)
AddMetIL.MarkSequencePoint(doc9, 302, 1, 302, 100)
Dim locbldr35 As LocalBuilder = AddMetIL.DeclareLocal(GetType(System.Int32))
locbldr35.SetLocalSymInfo("stopel")
AddMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Sub)
AddMetIL.Emit(OpCodes.Stloc, 3)
AddMetIL.MarkSequencePoint(doc9, 303, 1, 303, 100)
Dim locbldr36 As LocalBuilder = AddMetIL.DeclareLocal(GetType(System.Int32))
locbldr36.SetLocalSymInfo("i")
AddMetIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Stloc, 4)
AddMetIL.MarkSequencePoint(doc9, 305, 1, 305, 100)
Dim locbldr37 As LocalBuilder = AddMetIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType())
locbldr37.SetLocalSymInfo("destarr")
AddMetIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Conv_U)
AddMetIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
AddMetIL.Emit(OpCodes.Stloc, 5)
AddMetIL.MarkSequencePoint(doc9, 307, 1, 307, 100)
Dim label10 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
AddMetIL.MarkSequencePoint(doc9, 308, 1, 308, 100)
Dim label11 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
AddMetIL.MarkSequencePoint(doc9, 310, 1, 310, 100)
AddMetIL.MarkLabel(label10)
AddMetIL.MarkSequencePoint(doc9, 312, 1, 312, 100)
AddMetIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Add)
AddMetIL.Emit(OpCodes.Stloc, 4)
AddMetIL.MarkSequencePoint(doc9, 314, 1, 314, 100)
AddMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa16 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
Dim tru16 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
Dim cont16 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
AddMetIL.Emit(OpCodes.Bgt, tru16)
AddMetIL.Emit(OpCodes.Br, fa16)
AddMetIL.MarkLabel(tru16)
AddMetIL.MarkSequencePoint(doc9, 316, 1, 316, 100)
AddMetIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType()
Typ02 = Typ
AddMetIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddMetIL.Emit(OpCodes.Ldsfld, MetLst)
Typ = MetLst.FieldType
Typ02 = Typ
AddMetIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddMetIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddMetIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType().GetElementType())
AddMetIL.MarkSequencePoint(doc9, 318, 1, 318, 100)
AddMetIL.Emit(OpCodes.Br, cont16)
AddMetIL.MarkLabel(fa16)
AddMetIL.Emit(OpCodes.Br, cont16)
AddMetIL.MarkLabel(cont16)
AddMetIL.MarkSequencePoint(doc9, 320, 1, 320, 100)
AddMetIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
Dim fa17 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
Dim tru17 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
Dim cont17 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
AddMetIL.Emit(OpCodes.Beq, tru17)
AddMetIL.Emit(OpCodes.Br, fa17)
AddMetIL.MarkLabel(tru17)
AddMetIL.MarkSequencePoint(doc9, 321, 1, 321, 100)
AddMetIL.Emit(OpCodes.Br, label11)
AddMetIL.MarkSequencePoint(doc9, 322, 1, 322, 100)
AddMetIL.Emit(OpCodes.Br, cont17)
AddMetIL.MarkLabel(fa17)
AddMetIL.MarkSequencePoint(doc9, 323, 1, 323, 100)
AddMetIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa18 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
Dim tru18 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
Dim cont18 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
AddMetIL.Emit(OpCodes.Beq, fa18)
AddMetIL.Emit(OpCodes.Br, tru18)
AddMetIL.MarkLabel(tru18)
AddMetIL.MarkSequencePoint(doc9, 324, 1, 324, 100)
AddMetIL.Emit(OpCodes.Br, label10)
AddMetIL.MarkSequencePoint(doc9, 325, 1, 325, 100)
AddMetIL.Emit(OpCodes.Br, cont18)
AddMetIL.MarkLabel(fa18)
AddMetIL.MarkSequencePoint(doc9, 326, 1, 326, 100)
AddMetIL.Emit(OpCodes.Br, label11)
AddMetIL.MarkSequencePoint(doc9, 327, 1, 327, 100)
AddMetIL.Emit(OpCodes.Br, cont18)
AddMetIL.MarkLabel(cont18)
AddMetIL.MarkSequencePoint(doc9, 328, 1, 328, 100)
AddMetIL.Emit(OpCodes.Br, cont17)
AddMetIL.MarkLabel(cont17)
AddMetIL.MarkSequencePoint(doc9, 330, 1, 330, 100)
AddMetIL.MarkLabel(label11)
AddMetIL.MarkSequencePoint(doc9, 332, 1, 332, 100)
AddMetIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType()
Typ02 = Typ
AddMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddMetIL.Emit(OpCodes.Ldloc, 0)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem")
AddMetIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType().GetElementType())
AddMetIL.MarkSequencePoint(doc9, 334, 1, 334, 100)
AddMetIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType()
AddMetIL.Emit(OpCodes.Stsfld, MetLst)
AddMetIL.MarkSequencePoint(doc9, 336, 1, 336, 100)
AddMetIL.Emit(OpCodes.Ret)
Dim typ9(-1) As Type
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = GetType(System.String)
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = GetType(System.Type)
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = GetType(System.Type).MakeArrayType()
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = GetType(MethodBuilder)
Dim AddNestedMet As MethodBuilder = SymTable.DefineMethod("AddNestedMet", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ9)
Dim AddNestedMetIL As ILGenerator = AddNestedMet.GetILGenerator()
Dim AddNestedMetparam01 As ParameterBuilder = AddNestedMet.DefineParameter(1, ParameterAttributes.None, "nme")
Dim AddNestedMetparam02 As ParameterBuilder = AddNestedMet.DefineParameter(2, ParameterAttributes.None, "typ")
Dim AddNestedMetparam03 As ParameterBuilder = AddNestedMet.DefineParameter(3, ParameterAttributes.None, "ptyps")
Dim AddNestedMetparam04 As ParameterBuilder = AddNestedMet.DefineParameter(4, ParameterAttributes.None, "met")
AddNestedMetIL.MarkSequencePoint(doc9, 341, 1, 341, 100)
Dim locbldr38 As LocalBuilder = AddNestedMetIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
locbldr38.SetLocalSymInfo("vr")
Dim typ10(-1) As Type
AddNestedMetIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ10(UBound(typ10) + 1)
typ10(UBound(typ10)) = Typ
AddNestedMetIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ10(UBound(typ10) + 1)
typ10(UBound(typ10)) = Typ
AddNestedMetIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ10(UBound(typ10) + 1)
typ10(UBound(typ10)) = Typ
AddNestedMetIL.Emit(OpCodes.Ldarg, 3)
Typ = GetType(MethodBuilder)
ReDim Preserve typ10(UBound(typ10) + 1)
typ10(UBound(typ10)) = Typ
AddNestedMetIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").GetConstructor(typ10))
AddNestedMetIL.Emit(OpCodes.Stloc, 0)
AddNestedMetIL.MarkSequencePoint(doc9, 343, 1, 343, 100)
Dim locbldr39 As LocalBuilder = AddNestedMetIL.DeclareLocal(GetType(System.Int32))
locbldr39.SetLocalSymInfo("len")
AddNestedMetIL.Emit(OpCodes.Ldsfld, NestedMetLst)
Typ = NestedMetLst.FieldType
AddNestedMetIL.Emit(OpCodes.Ldlen)
AddNestedMetIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Stloc, 1)
AddNestedMetIL.MarkSequencePoint(doc9, 344, 1, 344, 100)
Dim locbldr40 As LocalBuilder = AddNestedMetIL.DeclareLocal(GetType(System.Int32))
locbldr40.SetLocalSymInfo("destl")
AddNestedMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Add)
AddNestedMetIL.Emit(OpCodes.Stloc, 2)
AddNestedMetIL.MarkSequencePoint(doc9, 345, 1, 345, 100)
Dim locbldr41 As LocalBuilder = AddNestedMetIL.DeclareLocal(GetType(System.Int32))
locbldr41.SetLocalSymInfo("stopel")
AddNestedMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Sub)
AddNestedMetIL.Emit(OpCodes.Stloc, 3)
AddNestedMetIL.MarkSequencePoint(doc9, 346, 1, 346, 100)
Dim locbldr42 As LocalBuilder = AddNestedMetIL.DeclareLocal(GetType(System.Int32))
locbldr42.SetLocalSymInfo("i")
AddNestedMetIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Stloc, 4)
AddNestedMetIL.MarkSequencePoint(doc9, 348, 1, 348, 100)
Dim locbldr43 As LocalBuilder = AddNestedMetIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType())
locbldr43.SetLocalSymInfo("destarr")
AddNestedMetIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Conv_U)
AddNestedMetIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
AddNestedMetIL.Emit(OpCodes.Stloc, 5)
AddNestedMetIL.MarkSequencePoint(doc9, 350, 1, 350, 100)
Dim label12 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
AddNestedMetIL.MarkSequencePoint(doc9, 351, 1, 351, 100)
Dim label13 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
AddNestedMetIL.MarkSequencePoint(doc9, 353, 1, 353, 100)
AddNestedMetIL.MarkLabel(label12)
AddNestedMetIL.MarkSequencePoint(doc9, 355, 1, 355, 100)
AddNestedMetIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Add)
AddNestedMetIL.Emit(OpCodes.Stloc, 4)
AddNestedMetIL.MarkSequencePoint(doc9, 357, 1, 357, 100)
AddNestedMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa19 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
Dim tru19 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
Dim cont19 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
AddNestedMetIL.Emit(OpCodes.Bgt, tru19)
AddNestedMetIL.Emit(OpCodes.Br, fa19)
AddNestedMetIL.MarkLabel(tru19)
AddNestedMetIL.MarkSequencePoint(doc9, 359, 1, 359, 100)
AddNestedMetIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType()
Typ02 = Typ
AddNestedMetIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNestedMetIL.Emit(OpCodes.Ldsfld, NestedMetLst)
Typ = NestedMetLst.FieldType
Typ02 = Typ
AddNestedMetIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNestedMetIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddNestedMetIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType().GetElementType())
AddNestedMetIL.MarkSequencePoint(doc9, 361, 1, 361, 100)
AddNestedMetIL.Emit(OpCodes.Br, cont19)
AddNestedMetIL.MarkLabel(fa19)
AddNestedMetIL.Emit(OpCodes.Br, cont19)
AddNestedMetIL.MarkLabel(cont19)
AddNestedMetIL.MarkSequencePoint(doc9, 363, 1, 363, 100)
AddNestedMetIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
Dim fa20 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
Dim tru20 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
Dim cont20 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
AddNestedMetIL.Emit(OpCodes.Beq, tru20)
AddNestedMetIL.Emit(OpCodes.Br, fa20)
AddNestedMetIL.MarkLabel(tru20)
AddNestedMetIL.MarkSequencePoint(doc9, 364, 1, 364, 100)
AddNestedMetIL.Emit(OpCodes.Br, label13)
AddNestedMetIL.MarkSequencePoint(doc9, 365, 1, 365, 100)
AddNestedMetIL.Emit(OpCodes.Br, cont20)
AddNestedMetIL.MarkLabel(fa20)
AddNestedMetIL.MarkSequencePoint(doc9, 366, 1, 366, 100)
AddNestedMetIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa21 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
Dim tru21 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
Dim cont21 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
AddNestedMetIL.Emit(OpCodes.Beq, fa21)
AddNestedMetIL.Emit(OpCodes.Br, tru21)
AddNestedMetIL.MarkLabel(tru21)
AddNestedMetIL.MarkSequencePoint(doc9, 367, 1, 367, 100)
AddNestedMetIL.Emit(OpCodes.Br, label12)
AddNestedMetIL.MarkSequencePoint(doc9, 368, 1, 368, 100)
AddNestedMetIL.Emit(OpCodes.Br, cont21)
AddNestedMetIL.MarkLabel(fa21)
AddNestedMetIL.MarkSequencePoint(doc9, 369, 1, 369, 100)
AddNestedMetIL.Emit(OpCodes.Br, label13)
AddNestedMetIL.MarkSequencePoint(doc9, 370, 1, 370, 100)
AddNestedMetIL.Emit(OpCodes.Br, cont21)
AddNestedMetIL.MarkLabel(cont21)
AddNestedMetIL.MarkSequencePoint(doc9, 371, 1, 371, 100)
AddNestedMetIL.Emit(OpCodes.Br, cont20)
AddNestedMetIL.MarkLabel(cont20)
AddNestedMetIL.MarkSequencePoint(doc9, 373, 1, 373, 100)
AddNestedMetIL.MarkLabel(label13)
AddNestedMetIL.MarkSequencePoint(doc9, 375, 1, 375, 100)
AddNestedMetIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType()
Typ02 = Typ
AddNestedMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNestedMetIL.Emit(OpCodes.Ldloc, 0)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem")
AddNestedMetIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType().GetElementType())
AddNestedMetIL.MarkSequencePoint(doc9, 377, 1, 377, 100)
AddNestedMetIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType()
AddNestedMetIL.Emit(OpCodes.Stsfld, NestedMetLst)
AddNestedMetIL.MarkSequencePoint(doc9, 379, 1, 379, 100)
AddNestedMetIL.Emit(OpCodes.Ret)
Dim typ11(-1) As Type
ReDim Preserve typ11(UBound(typ11) + 1)
typ11(UBound(typ11)) = GetType(System.Type).MakeArrayType()
ReDim Preserve typ11(UBound(typ11) + 1)
typ11(UBound(typ11)) = GetType(ConstructorBuilder)
Dim AddCtor As MethodBuilder = SymTable.DefineMethod("AddCtor", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ11)
Dim AddCtorIL As ILGenerator = AddCtor.GetILGenerator()
Dim AddCtorparam01 As ParameterBuilder = AddCtor.DefineParameter(1, ParameterAttributes.None, "ptyps")
Dim AddCtorparam02 As ParameterBuilder = AddCtor.DefineParameter(2, ParameterAttributes.None, "met")
AddCtorIL.MarkSequencePoint(doc9, 384, 1, 384, 100)
Dim locbldr44 As LocalBuilder = AddCtorIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
locbldr44.SetLocalSymInfo("vr")
Dim typ12(-1) As Type
AddCtorIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ12(UBound(typ12) + 1)
typ12(UBound(typ12)) = Typ
AddCtorIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(ConstructorBuilder)
ReDim Preserve typ12(UBound(typ12) + 1)
typ12(UBound(typ12)) = Typ
AddCtorIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").GetConstructor(typ12))
AddCtorIL.Emit(OpCodes.Stloc, 0)
AddCtorIL.MarkSequencePoint(doc9, 386, 1, 386, 100)
Dim locbldr45 As LocalBuilder = AddCtorIL.DeclareLocal(GetType(System.Int32))
locbldr45.SetLocalSymInfo("len")
AddCtorIL.Emit(OpCodes.Ldsfld, CtorLst)
Typ = CtorLst.FieldType
AddCtorIL.Emit(OpCodes.Ldlen)
AddCtorIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Stloc, 1)
AddCtorIL.MarkSequencePoint(doc9, 387, 1, 387, 100)
Dim locbldr46 As LocalBuilder = AddCtorIL.DeclareLocal(GetType(System.Int32))
locbldr46.SetLocalSymInfo("destl")
AddCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Add)
AddCtorIL.Emit(OpCodes.Stloc, 2)
AddCtorIL.MarkSequencePoint(doc9, 388, 1, 388, 100)
Dim locbldr47 As LocalBuilder = AddCtorIL.DeclareLocal(GetType(System.Int32))
locbldr47.SetLocalSymInfo("stopel")
AddCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Sub)
AddCtorIL.Emit(OpCodes.Stloc, 3)
AddCtorIL.MarkSequencePoint(doc9, 389, 1, 389, 100)
Dim locbldr48 As LocalBuilder = AddCtorIL.DeclareLocal(GetType(System.Int32))
locbldr48.SetLocalSymInfo("i")
AddCtorIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Stloc, 4)
AddCtorIL.MarkSequencePoint(doc9, 391, 1, 391, 100)
Dim locbldr49 As LocalBuilder = AddCtorIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType())
locbldr49.SetLocalSymInfo("destarr")
AddCtorIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Conv_U)
AddCtorIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
AddCtorIL.Emit(OpCodes.Stloc, 5)
AddCtorIL.MarkSequencePoint(doc9, 393, 1, 393, 100)
Dim label14 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
AddCtorIL.MarkSequencePoint(doc9, 394, 1, 394, 100)
Dim label15 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
AddCtorIL.MarkSequencePoint(doc9, 396, 1, 396, 100)
AddCtorIL.MarkLabel(label14)
AddCtorIL.MarkSequencePoint(doc9, 398, 1, 398, 100)
AddCtorIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Add)
AddCtorIL.Emit(OpCodes.Stloc, 4)
AddCtorIL.MarkSequencePoint(doc9, 400, 1, 400, 100)
AddCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa22 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
Dim tru22 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
Dim cont22 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
AddCtorIL.Emit(OpCodes.Bgt, tru22)
AddCtorIL.Emit(OpCodes.Br, fa22)
AddCtorIL.MarkLabel(tru22)
AddCtorIL.MarkSequencePoint(doc9, 402, 1, 402, 100)
AddCtorIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType()
Typ02 = Typ
AddCtorIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddCtorIL.Emit(OpCodes.Ldsfld, CtorLst)
Typ = CtorLst.FieldType
Typ02 = Typ
AddCtorIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddCtorIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddCtorIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType().GetElementType())
AddCtorIL.MarkSequencePoint(doc9, 404, 1, 404, 100)
AddCtorIL.Emit(OpCodes.Br, cont22)
AddCtorIL.MarkLabel(fa22)
AddCtorIL.Emit(OpCodes.Br, cont22)
AddCtorIL.MarkLabel(cont22)
AddCtorIL.MarkSequencePoint(doc9, 406, 1, 406, 100)
AddCtorIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
Dim fa23 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
Dim tru23 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
Dim cont23 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
AddCtorIL.Emit(OpCodes.Beq, tru23)
AddCtorIL.Emit(OpCodes.Br, fa23)
AddCtorIL.MarkLabel(tru23)
AddCtorIL.MarkSequencePoint(doc9, 407, 1, 407, 100)
AddCtorIL.Emit(OpCodes.Br, label15)
AddCtorIL.MarkSequencePoint(doc9, 408, 1, 408, 100)
AddCtorIL.Emit(OpCodes.Br, cont23)
AddCtorIL.MarkLabel(fa23)
AddCtorIL.MarkSequencePoint(doc9, 409, 1, 409, 100)
AddCtorIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa24 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
Dim tru24 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
Dim cont24 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
AddCtorIL.Emit(OpCodes.Beq, fa24)
AddCtorIL.Emit(OpCodes.Br, tru24)
AddCtorIL.MarkLabel(tru24)
AddCtorIL.MarkSequencePoint(doc9, 410, 1, 410, 100)
AddCtorIL.Emit(OpCodes.Br, label14)
AddCtorIL.MarkSequencePoint(doc9, 411, 1, 411, 100)
AddCtorIL.Emit(OpCodes.Br, cont24)
AddCtorIL.MarkLabel(fa24)
AddCtorIL.MarkSequencePoint(doc9, 412, 1, 412, 100)
AddCtorIL.Emit(OpCodes.Br, label15)
AddCtorIL.MarkSequencePoint(doc9, 413, 1, 413, 100)
AddCtorIL.Emit(OpCodes.Br, cont24)
AddCtorIL.MarkLabel(cont24)
AddCtorIL.MarkSequencePoint(doc9, 414, 1, 414, 100)
AddCtorIL.Emit(OpCodes.Br, cont23)
AddCtorIL.MarkLabel(cont23)
AddCtorIL.MarkSequencePoint(doc9, 416, 1, 416, 100)
AddCtorIL.MarkLabel(label15)
AddCtorIL.MarkSequencePoint(doc9, 418, 1, 418, 100)
AddCtorIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType()
Typ02 = Typ
AddCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddCtorIL.Emit(OpCodes.Ldloc, 0)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem")
AddCtorIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType().GetElementType())
AddCtorIL.MarkSequencePoint(doc9, 420, 1, 420, 100)
AddCtorIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType()
AddCtorIL.Emit(OpCodes.Stsfld, CtorLst)
AddCtorIL.MarkSequencePoint(doc9, 422, 1, 422, 100)
AddCtorIL.Emit(OpCodes.Ret)
Dim typ13(-1) As Type
ReDim Preserve typ13(UBound(typ13) + 1)
typ13(UBound(typ13)) = GetType(System.Type).MakeArrayType()
ReDim Preserve typ13(UBound(typ13) + 1)
typ13(UBound(typ13)) = GetType(ConstructorBuilder)
Dim AddNestedCtor As MethodBuilder = SymTable.DefineMethod("AddNestedCtor", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ13)
Dim AddNestedCtorIL As ILGenerator = AddNestedCtor.GetILGenerator()
Dim AddNestedCtorparam01 As ParameterBuilder = AddNestedCtor.DefineParameter(1, ParameterAttributes.None, "ptyps")
Dim AddNestedCtorparam02 As ParameterBuilder = AddNestedCtor.DefineParameter(2, ParameterAttributes.None, "met")
AddNestedCtorIL.MarkSequencePoint(doc9, 427, 1, 427, 100)
Dim locbldr50 As LocalBuilder = AddNestedCtorIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
locbldr50.SetLocalSymInfo("vr")
Dim typ14(-1) As Type
AddNestedCtorIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = Typ
AddNestedCtorIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(ConstructorBuilder)
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = Typ
AddNestedCtorIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").GetConstructor(typ14))
AddNestedCtorIL.Emit(OpCodes.Stloc, 0)
AddNestedCtorIL.MarkSequencePoint(doc9, 429, 1, 429, 100)
Dim locbldr51 As LocalBuilder = AddNestedCtorIL.DeclareLocal(GetType(System.Int32))
locbldr51.SetLocalSymInfo("len")
AddNestedCtorIL.Emit(OpCodes.Ldsfld, NestedCtorLst)
Typ = NestedCtorLst.FieldType
AddNestedCtorIL.Emit(OpCodes.Ldlen)
AddNestedCtorIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Stloc, 1)
AddNestedCtorIL.MarkSequencePoint(doc9, 430, 1, 430, 100)
Dim locbldr52 As LocalBuilder = AddNestedCtorIL.DeclareLocal(GetType(System.Int32))
locbldr52.SetLocalSymInfo("destl")
AddNestedCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Add)
AddNestedCtorIL.Emit(OpCodes.Stloc, 2)
AddNestedCtorIL.MarkSequencePoint(doc9, 431, 1, 431, 100)
Dim locbldr53 As LocalBuilder = AddNestedCtorIL.DeclareLocal(GetType(System.Int32))
locbldr53.SetLocalSymInfo("stopel")
AddNestedCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Sub)
AddNestedCtorIL.Emit(OpCodes.Stloc, 3)
AddNestedCtorIL.MarkSequencePoint(doc9, 432, 1, 432, 100)
Dim locbldr54 As LocalBuilder = AddNestedCtorIL.DeclareLocal(GetType(System.Int32))
locbldr54.SetLocalSymInfo("i")
AddNestedCtorIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Stloc, 4)
AddNestedCtorIL.MarkSequencePoint(doc9, 434, 1, 434, 100)
Dim locbldr55 As LocalBuilder = AddNestedCtorIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType())
locbldr55.SetLocalSymInfo("destarr")
AddNestedCtorIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Conv_U)
AddNestedCtorIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
AddNestedCtorIL.Emit(OpCodes.Stloc, 5)
AddNestedCtorIL.MarkSequencePoint(doc9, 436, 1, 436, 100)
Dim label16 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
AddNestedCtorIL.MarkSequencePoint(doc9, 437, 1, 437, 100)
Dim label17 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
AddNestedCtorIL.MarkSequencePoint(doc9, 439, 1, 439, 100)
AddNestedCtorIL.MarkLabel(label16)
AddNestedCtorIL.MarkSequencePoint(doc9, 441, 1, 441, 100)
AddNestedCtorIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Add)
AddNestedCtorIL.Emit(OpCodes.Stloc, 4)
AddNestedCtorIL.MarkSequencePoint(doc9, 443, 1, 443, 100)
AddNestedCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa25 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
Dim tru25 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
Dim cont25 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
AddNestedCtorIL.Emit(OpCodes.Bgt, tru25)
AddNestedCtorIL.Emit(OpCodes.Br, fa25)
AddNestedCtorIL.MarkLabel(tru25)
AddNestedCtorIL.MarkSequencePoint(doc9, 445, 1, 445, 100)
AddNestedCtorIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType()
Typ02 = Typ
AddNestedCtorIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNestedCtorIL.Emit(OpCodes.Ldsfld, NestedCtorLst)
Typ = NestedCtorLst.FieldType
Typ02 = Typ
AddNestedCtorIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNestedCtorIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddNestedCtorIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType().GetElementType())
AddNestedCtorIL.MarkSequencePoint(doc9, 447, 1, 447, 100)
AddNestedCtorIL.Emit(OpCodes.Br, cont25)
AddNestedCtorIL.MarkLabel(fa25)
AddNestedCtorIL.Emit(OpCodes.Br, cont25)
AddNestedCtorIL.MarkLabel(cont25)
AddNestedCtorIL.MarkSequencePoint(doc9, 449, 1, 449, 100)
AddNestedCtorIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
Dim fa26 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
Dim tru26 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
Dim cont26 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
AddNestedCtorIL.Emit(OpCodes.Beq, tru26)
AddNestedCtorIL.Emit(OpCodes.Br, fa26)
AddNestedCtorIL.MarkLabel(tru26)
AddNestedCtorIL.MarkSequencePoint(doc9, 450, 1, 450, 100)
AddNestedCtorIL.Emit(OpCodes.Br, label17)
AddNestedCtorIL.MarkSequencePoint(doc9, 451, 1, 451, 100)
AddNestedCtorIL.Emit(OpCodes.Br, cont26)
AddNestedCtorIL.MarkLabel(fa26)
AddNestedCtorIL.MarkSequencePoint(doc9, 452, 1, 452, 100)
AddNestedCtorIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa27 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
Dim tru27 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
Dim cont27 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
AddNestedCtorIL.Emit(OpCodes.Beq, fa27)
AddNestedCtorIL.Emit(OpCodes.Br, tru27)
AddNestedCtorIL.MarkLabel(tru27)
AddNestedCtorIL.MarkSequencePoint(doc9, 453, 1, 453, 100)
AddNestedCtorIL.Emit(OpCodes.Br, label16)
AddNestedCtorIL.MarkSequencePoint(doc9, 454, 1, 454, 100)
AddNestedCtorIL.Emit(OpCodes.Br, cont27)
AddNestedCtorIL.MarkLabel(fa27)
AddNestedCtorIL.MarkSequencePoint(doc9, 455, 1, 455, 100)
AddNestedCtorIL.Emit(OpCodes.Br, label17)
AddNestedCtorIL.MarkSequencePoint(doc9, 456, 1, 456, 100)
AddNestedCtorIL.Emit(OpCodes.Br, cont27)
AddNestedCtorIL.MarkLabel(cont27)
AddNestedCtorIL.MarkSequencePoint(doc9, 457, 1, 457, 100)
AddNestedCtorIL.Emit(OpCodes.Br, cont26)
AddNestedCtorIL.MarkLabel(cont26)
AddNestedCtorIL.MarkSequencePoint(doc9, 459, 1, 459, 100)
AddNestedCtorIL.MarkLabel(label17)
AddNestedCtorIL.MarkSequencePoint(doc9, 461, 1, 461, 100)
AddNestedCtorIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType()
Typ02 = Typ
AddNestedCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNestedCtorIL.Emit(OpCodes.Ldloc, 0)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem")
AddNestedCtorIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType().GetElementType())
AddNestedCtorIL.MarkSequencePoint(doc9, 463, 1, 463, 100)
AddNestedCtorIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType()
AddNestedCtorIL.Emit(OpCodes.Stsfld, NestedCtorLst)
AddNestedCtorIL.MarkSequencePoint(doc9, 465, 1, 465, 100)
AddNestedCtorIL.Emit(OpCodes.Ret)
Dim AddIf As MethodBuilder = SymTable.DefineMethod("AddIf", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim AddIfIL As ILGenerator = AddIf.GetILGenerator()
AddIfIL.MarkSequencePoint(doc9, 469, 1, 469, 100)
Dim locbldr56 As LocalBuilder = AddIfIL.DeclareLocal(GetType(Emit.Label))
locbldr56.SetLocalSymInfo("endl")
AddIfIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("DefineLbl", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("DefineLbl", Type.EmptyTypes).ReturnType
AddIfIL.Emit(OpCodes.Stloc, 0)
AddIfIL.MarkSequencePoint(doc9, 470, 1, 470, 100)
Dim locbldr57 As LocalBuilder = AddIfIL.DeclareLocal(GetType(Emit.Label))
locbldr57.SetLocalSymInfo("nbl")
AddIfIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("DefineLbl", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("DefineLbl", Type.EmptyTypes).ReturnType
AddIfIL.Emit(OpCodes.Stloc, 1)
AddIfIL.MarkSequencePoint(doc9, 471, 1, 471, 100)
Dim locbldr58 As LocalBuilder = AddIfIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem"))
locbldr58.SetLocalSymInfo("vr")
Dim typ15(-1) As Type
AddIfIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Emit.Label)
ReDim Preserve typ15(UBound(typ15) + 1)
typ15(UBound(typ15)) = Typ
AddIfIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Emit.Label)
ReDim Preserve typ15(UBound(typ15) + 1)
typ15(UBound(typ15)) = Typ
AddIfIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").GetConstructor(typ15))
AddIfIL.Emit(OpCodes.Stloc, 2)
AddIfIL.MarkSequencePoint(doc9, 473, 1, 473, 100)
Dim locbldr59 As LocalBuilder = AddIfIL.DeclareLocal(GetType(System.Int32))
locbldr59.SetLocalSymInfo("len")
AddIfIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
AddIfIL.Emit(OpCodes.Ldlen)
AddIfIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Stloc, 3)
AddIfIL.MarkSequencePoint(doc9, 474, 1, 474, 100)
Dim locbldr60 As LocalBuilder = AddIfIL.DeclareLocal(GetType(System.Int32))
locbldr60.SetLocalSymInfo("destl")
AddIfIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Add)
AddIfIL.Emit(OpCodes.Stloc, 4)
AddIfIL.MarkSequencePoint(doc9, 475, 1, 475, 100)
Dim locbldr61 As LocalBuilder = AddIfIL.DeclareLocal(GetType(System.Int32))
locbldr61.SetLocalSymInfo("stopel")
AddIfIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Sub)
AddIfIL.Emit(OpCodes.Stloc, 5)
AddIfIL.MarkSequencePoint(doc9, 476, 1, 476, 100)
Dim locbldr62 As LocalBuilder = AddIfIL.DeclareLocal(GetType(System.Int32))
locbldr62.SetLocalSymInfo("i")
AddIfIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Stloc, 6)
AddIfIL.MarkSequencePoint(doc9, 478, 1, 478, 100)
Dim locbldr63 As LocalBuilder = AddIfIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").MakeArrayType())
locbldr63.SetLocalSymInfo("destarr")
AddIfIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Conv_U)
AddIfIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem"))
AddIfIL.Emit(OpCodes.Stloc, 7)
AddIfIL.MarkSequencePoint(doc9, 480, 1, 480, 100)
Dim label18 As System.Reflection.Emit.Label = AddIfIL.DefineLabel()
AddIfIL.MarkSequencePoint(doc9, 481, 1, 481, 100)
Dim label19 As System.Reflection.Emit.Label = AddIfIL.DefineLabel()
AddIfIL.MarkSequencePoint(doc9, 483, 1, 483, 100)
AddIfIL.MarkLabel(label18)
AddIfIL.MarkSequencePoint(doc9, 485, 1, 485, 100)
AddIfIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Add)
AddIfIL.Emit(OpCodes.Stloc, 6)
AddIfIL.MarkSequencePoint(doc9, 487, 1, 487, 100)
AddIfIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa28 As System.Reflection.Emit.Label = AddIfIL.DefineLabel()
Dim tru28 As System.Reflection.Emit.Label = AddIfIL.DefineLabel()
Dim cont28 As System.Reflection.Emit.Label = AddIfIL.DefineLabel()
AddIfIL.Emit(OpCodes.Bgt, tru28)
AddIfIL.Emit(OpCodes.Br, fa28)
AddIfIL.MarkLabel(tru28)
AddIfIL.MarkSequencePoint(doc9, 489, 1, 489, 100)
AddIfIL.Emit(OpCodes.Ldloc, 7)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").MakeArrayType()
Typ02 = Typ
AddIfIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddIfIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
Typ02 = Typ
AddIfIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddIfIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddIfIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").MakeArrayType().GetElementType())
AddIfIL.MarkSequencePoint(doc9, 491, 1, 491, 100)
AddIfIL.Emit(OpCodes.Br, cont28)
AddIfIL.MarkLabel(fa28)
AddIfIL.Emit(OpCodes.Br, cont28)
AddIfIL.MarkLabel(cont28)
AddIfIL.MarkSequencePoint(doc9, 493, 1, 493, 100)
AddIfIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Int32)
Dim fa29 As System.Reflection.Emit.Label = AddIfIL.DefineLabel()
Dim tru29 As System.Reflection.Emit.Label = AddIfIL.DefineLabel()
Dim cont29 As System.Reflection.Emit.Label = AddIfIL.DefineLabel()
AddIfIL.Emit(OpCodes.Beq, tru29)
AddIfIL.Emit(OpCodes.Br, fa29)
AddIfIL.MarkLabel(tru29)
AddIfIL.MarkSequencePoint(doc9, 494, 1, 494, 100)
AddIfIL.Emit(OpCodes.Br, label19)
AddIfIL.MarkSequencePoint(doc9, 495, 1, 495, 100)
AddIfIL.Emit(OpCodes.Br, cont29)
AddIfIL.MarkLabel(fa29)
AddIfIL.MarkSequencePoint(doc9, 496, 1, 496, 100)
AddIfIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa30 As System.Reflection.Emit.Label = AddIfIL.DefineLabel()
Dim tru30 As System.Reflection.Emit.Label = AddIfIL.DefineLabel()
Dim cont30 As System.Reflection.Emit.Label = AddIfIL.DefineLabel()
AddIfIL.Emit(OpCodes.Beq, fa30)
AddIfIL.Emit(OpCodes.Br, tru30)
AddIfIL.MarkLabel(tru30)
AddIfIL.MarkSequencePoint(doc9, 497, 1, 497, 100)
AddIfIL.Emit(OpCodes.Br, label18)
AddIfIL.MarkSequencePoint(doc9, 498, 1, 498, 100)
AddIfIL.Emit(OpCodes.Br, cont30)
AddIfIL.MarkLabel(fa30)
AddIfIL.MarkSequencePoint(doc9, 499, 1, 499, 100)
AddIfIL.Emit(OpCodes.Br, label19)
AddIfIL.MarkSequencePoint(doc9, 500, 1, 500, 100)
AddIfIL.Emit(OpCodes.Br, cont30)
AddIfIL.MarkLabel(cont30)
AddIfIL.MarkSequencePoint(doc9, 501, 1, 501, 100)
AddIfIL.Emit(OpCodes.Br, cont29)
AddIfIL.MarkLabel(cont29)
AddIfIL.MarkSequencePoint(doc9, 503, 1, 503, 100)
AddIfIL.MarkLabel(label19)
AddIfIL.MarkSequencePoint(doc9, 505, 1, 505, 100)
AddIfIL.Emit(OpCodes.Ldloc, 7)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").MakeArrayType()
Typ02 = Typ
AddIfIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddIfIL.Emit(OpCodes.Ldloc, 2)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem")
AddIfIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").MakeArrayType().GetElementType())
AddIfIL.MarkSequencePoint(doc9, 507, 1, 507, 100)
AddIfIL.Emit(OpCodes.Ldloc, 7)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").MakeArrayType()
AddIfIL.Emit(OpCodes.Stsfld, IfLst)
AddIfIL.MarkSequencePoint(doc9, 509, 1, 509, 100)
AddIfIL.Emit(OpCodes.Ret)
Dim PopIf As MethodBuilder = SymTable.DefineMethod("PopIf", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim PopIfIL As ILGenerator = PopIf.GetILGenerator()
PopIfIL.MarkSequencePoint(doc9, 513, 1, 513, 100)
Dim locbldr64 As LocalBuilder = PopIfIL.DeclareLocal(GetType(System.Int32))
locbldr64.SetLocalSymInfo("len")
PopIfIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
PopIfIL.Emit(OpCodes.Ldlen)
PopIfIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Stloc, 0)
PopIfIL.MarkSequencePoint(doc9, 514, 1, 514, 100)
Dim locbldr65 As LocalBuilder = PopIfIL.DeclareLocal(GetType(System.Int32))
locbldr65.SetLocalSymInfo("destl")
PopIfIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Sub)
PopIfIL.Emit(OpCodes.Stloc, 1)
PopIfIL.MarkSequencePoint(doc9, 515, 1, 515, 100)
Dim locbldr66 As LocalBuilder = PopIfIL.DeclareLocal(GetType(System.Int32))
locbldr66.SetLocalSymInfo("stopel")
PopIfIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Sub)
PopIfIL.Emit(OpCodes.Stloc, 2)
PopIfIL.MarkSequencePoint(doc9, 516, 1, 516, 100)
Dim locbldr67 As LocalBuilder = PopIfIL.DeclareLocal(GetType(System.Int32))
locbldr67.SetLocalSymInfo("i")
PopIfIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Stloc, 3)
PopIfIL.MarkSequencePoint(doc9, 518, 1, 518, 100)
Dim locbldr68 As LocalBuilder = PopIfIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").MakeArrayType())
locbldr68.SetLocalSymInfo("destarr")
PopIfIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Conv_U)
PopIfIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem"))
PopIfIL.Emit(OpCodes.Stloc, 4)
PopIfIL.MarkSequencePoint(doc9, 520, 1, 520, 100)
Dim label20 As System.Reflection.Emit.Label = PopIfIL.DefineLabel()
PopIfIL.MarkSequencePoint(doc9, 521, 1, 521, 100)
Dim label21 As System.Reflection.Emit.Label = PopIfIL.DefineLabel()
PopIfIL.MarkSequencePoint(doc9, 523, 1, 523, 100)
PopIfIL.MarkLabel(label20)
PopIfIL.MarkSequencePoint(doc9, 525, 1, 525, 100)
PopIfIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Add)
PopIfIL.Emit(OpCodes.Stloc, 3)
PopIfIL.MarkSequencePoint(doc9, 527, 1, 527, 100)
PopIfIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa31 As System.Reflection.Emit.Label = PopIfIL.DefineLabel()
Dim tru31 As System.Reflection.Emit.Label = PopIfIL.DefineLabel()
Dim cont31 As System.Reflection.Emit.Label = PopIfIL.DefineLabel()
PopIfIL.Emit(OpCodes.Bge, tru31)
PopIfIL.Emit(OpCodes.Br, fa31)
PopIfIL.MarkLabel(tru31)
PopIfIL.MarkSequencePoint(doc9, 529, 1, 529, 100)
PopIfIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").MakeArrayType()
Typ02 = Typ
PopIfIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Conv_U)
Typ = Typ02
PopIfIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
Typ02 = Typ
PopIfIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Conv_U)
Typ = Typ02
PopIfIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
PopIfIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").MakeArrayType().GetElementType())
PopIfIL.MarkSequencePoint(doc9, 531, 1, 531, 100)
PopIfIL.Emit(OpCodes.Br, cont31)
PopIfIL.MarkLabel(fa31)
PopIfIL.Emit(OpCodes.Br, cont31)
PopIfIL.MarkLabel(cont31)
PopIfIL.MarkSequencePoint(doc9, 533, 1, 533, 100)
PopIfIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa32 As System.Reflection.Emit.Label = PopIfIL.DefineLabel()
Dim tru32 As System.Reflection.Emit.Label = PopIfIL.DefineLabel()
Dim cont32 As System.Reflection.Emit.Label = PopIfIL.DefineLabel()
PopIfIL.Emit(OpCodes.Beq, tru32)
PopIfIL.Emit(OpCodes.Br, fa32)
PopIfIL.MarkLabel(tru32)
PopIfIL.MarkSequencePoint(doc9, 534, 1, 534, 100)
PopIfIL.Emit(OpCodes.Br, label21)
PopIfIL.MarkSequencePoint(doc9, 535, 1, 535, 100)
PopIfIL.Emit(OpCodes.Br, cont32)
PopIfIL.MarkLabel(fa32)
PopIfIL.MarkSequencePoint(doc9, 536, 1, 536, 100)
PopIfIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa33 As System.Reflection.Emit.Label = PopIfIL.DefineLabel()
Dim tru33 As System.Reflection.Emit.Label = PopIfIL.DefineLabel()
Dim cont33 As System.Reflection.Emit.Label = PopIfIL.DefineLabel()
PopIfIL.Emit(OpCodes.Beq, fa33)
PopIfIL.Emit(OpCodes.Br, tru33)
PopIfIL.MarkLabel(tru33)
PopIfIL.MarkSequencePoint(doc9, 537, 1, 537, 100)
PopIfIL.Emit(OpCodes.Br, label20)
PopIfIL.MarkSequencePoint(doc9, 538, 1, 538, 100)
PopIfIL.Emit(OpCodes.Br, cont33)
PopIfIL.MarkLabel(fa33)
PopIfIL.MarkSequencePoint(doc9, 539, 1, 539, 100)
PopIfIL.Emit(OpCodes.Br, label21)
PopIfIL.MarkSequencePoint(doc9, 540, 1, 540, 100)
PopIfIL.Emit(OpCodes.Br, cont33)
PopIfIL.MarkLabel(cont33)
PopIfIL.MarkSequencePoint(doc9, 541, 1, 541, 100)
PopIfIL.Emit(OpCodes.Br, cont32)
PopIfIL.MarkLabel(cont32)
PopIfIL.MarkSequencePoint(doc9, 543, 1, 543, 100)
PopIfIL.MarkLabel(label21)
PopIfIL.MarkSequencePoint(doc9, 545, 1, 545, 100)
PopIfIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").MakeArrayType()
PopIfIL.Emit(OpCodes.Stsfld, IfLst)
PopIfIL.MarkSequencePoint(doc9, 547, 1, 547, 100)
PopIfIL.Emit(OpCodes.Ret)
Dim ReadIfEndLbl As MethodBuilder = SymTable.DefineMethod("ReadIfEndLbl", MethodAttributes.Public Or MethodAttributes.Static, GetType(Emit.Label), Type.EmptyTypes)
Dim ReadIfEndLblIL As ILGenerator = ReadIfEndLbl.GetILGenerator()
ReadIfEndLblIL.MarkSequencePoint(doc9, 550, 1, 550, 100)
Dim locbldr69 As LocalBuilder = ReadIfEndLblIL.DeclareLocal(GetType(System.Int32))
locbldr69.SetLocalSymInfo("lastel")
ReadIfEndLblIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
ReadIfEndLblIL.Emit(OpCodes.Ldlen)
ReadIfEndLblIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ReadIfEndLblIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIfEndLblIL.Emit(OpCodes.Sub)
ReadIfEndLblIL.Emit(OpCodes.Stloc, 0)
ReadIfEndLblIL.MarkSequencePoint(doc9, 551, 1, 551, 100)
Dim locbldr70 As LocalBuilder = ReadIfEndLblIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem"))
locbldr70.SetLocalSymInfo("ifi")
ReadIfEndLblIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
Typ02 = Typ
ReadIfEndLblIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
ReadIfEndLblIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIfEndLblIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ReadIfEndLblIL.Emit(OpCodes.Stloc, 1)
ReadIfEndLblIL.MarkSequencePoint(doc9, 552, 1, 552, 100)
ReadIfEndLblIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem")
ReadIfEndLblIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").GetField("EndLabel"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").GetField("EndLabel").FieldType
ReadIfEndLblIL.MarkSequencePoint(doc9, 553, 1, 553, 100)
ReadIfEndLblIL.Emit(OpCodes.Ret)
Dim ReadIfNxtBlkLbl As MethodBuilder = SymTable.DefineMethod("ReadIfNxtBlkLbl", MethodAttributes.Public Or MethodAttributes.Static, GetType(Emit.Label), Type.EmptyTypes)
Dim ReadIfNxtBlkLblIL As ILGenerator = ReadIfNxtBlkLbl.GetILGenerator()
ReadIfNxtBlkLblIL.MarkSequencePoint(doc9, 556, 1, 556, 100)
Dim locbldr71 As LocalBuilder = ReadIfNxtBlkLblIL.DeclareLocal(GetType(System.Int32))
locbldr71.SetLocalSymInfo("lastel")
ReadIfNxtBlkLblIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
ReadIfNxtBlkLblIL.Emit(OpCodes.Ldlen)
ReadIfNxtBlkLblIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ReadIfNxtBlkLblIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIfNxtBlkLblIL.Emit(OpCodes.Sub)
ReadIfNxtBlkLblIL.Emit(OpCodes.Stloc, 0)
ReadIfNxtBlkLblIL.MarkSequencePoint(doc9, 557, 1, 557, 100)
Dim locbldr72 As LocalBuilder = ReadIfNxtBlkLblIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem"))
locbldr72.SetLocalSymInfo("ifi")
ReadIfNxtBlkLblIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
Typ02 = Typ
ReadIfNxtBlkLblIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
ReadIfNxtBlkLblIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIfNxtBlkLblIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ReadIfNxtBlkLblIL.Emit(OpCodes.Stloc, 1)
ReadIfNxtBlkLblIL.MarkSequencePoint(doc9, 558, 1, 558, 100)
ReadIfNxtBlkLblIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem")
ReadIfNxtBlkLblIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").GetField("NextBlkLabel"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").GetField("NextBlkLabel").FieldType
ReadIfNxtBlkLblIL.MarkSequencePoint(doc9, 559, 1, 559, 100)
ReadIfNxtBlkLblIL.Emit(OpCodes.Ret)
Dim ReadIfElsePass As MethodBuilder = SymTable.DefineMethod("ReadIfElsePass", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Boolean), Type.EmptyTypes)
Dim ReadIfElsePassIL As ILGenerator = ReadIfElsePass.GetILGenerator()
ReadIfElsePassIL.MarkSequencePoint(doc9, 562, 1, 562, 100)
Dim locbldr73 As LocalBuilder = ReadIfElsePassIL.DeclareLocal(GetType(System.Int32))
locbldr73.SetLocalSymInfo("lastel")
ReadIfElsePassIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
ReadIfElsePassIL.Emit(OpCodes.Ldlen)
ReadIfElsePassIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ReadIfElsePassIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIfElsePassIL.Emit(OpCodes.Sub)
ReadIfElsePassIL.Emit(OpCodes.Stloc, 0)
ReadIfElsePassIL.MarkSequencePoint(doc9, 563, 1, 563, 100)
Dim locbldr74 As LocalBuilder = ReadIfElsePassIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem"))
locbldr74.SetLocalSymInfo("ifi")
ReadIfElsePassIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
Typ02 = Typ
ReadIfElsePassIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
ReadIfElsePassIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIfElsePassIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ReadIfElsePassIL.Emit(OpCodes.Stloc, 1)
ReadIfElsePassIL.MarkSequencePoint(doc9, 564, 1, 564, 100)
ReadIfElsePassIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem")
ReadIfElsePassIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").GetField("ElsePass"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").GetField("ElsePass").FieldType
ReadIfElsePassIL.MarkSequencePoint(doc9, 565, 1, 565, 100)
ReadIfElsePassIL.Emit(OpCodes.Ret)
Dim SetIfElsePass As MethodBuilder = SymTable.DefineMethod("SetIfElsePass", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim SetIfElsePassIL As ILGenerator = SetIfElsePass.GetILGenerator()
SetIfElsePassIL.MarkSequencePoint(doc9, 568, 1, 568, 100)
Dim locbldr75 As LocalBuilder = SetIfElsePassIL.DeclareLocal(GetType(System.Int32))
locbldr75.SetLocalSymInfo("lastel")
SetIfElsePassIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
SetIfElsePassIL.Emit(OpCodes.Ldlen)
SetIfElsePassIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
SetIfElsePassIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
SetIfElsePassIL.Emit(OpCodes.Sub)
SetIfElsePassIL.Emit(OpCodes.Stloc, 0)
SetIfElsePassIL.MarkSequencePoint(doc9, 569, 1, 569, 100)
Dim locbldr76 As LocalBuilder = SetIfElsePassIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem"))
locbldr76.SetLocalSymInfo("ifi")
SetIfElsePassIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
Typ02 = Typ
SetIfElsePassIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
SetIfElsePassIL.Emit(OpCodes.Conv_U)
Typ = Typ02
SetIfElsePassIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
SetIfElsePassIL.Emit(OpCodes.Stloc, 1)
SetIfElsePassIL.MarkSequencePoint(doc9, 570, 1, 570, 100)
SetIfElsePassIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem")
SetIfElsePassIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
SetIfElsePassIL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").GetField("ElsePass"))
SetIfElsePassIL.MarkSequencePoint(doc9, 571, 1, 571, 100)
SetIfElsePassIL.Emit(OpCodes.Ret)
Dim SetIfNxtBlkLbl As MethodBuilder = SymTable.DefineMethod("SetIfNxtBlkLbl", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim SetIfNxtBlkLblIL As ILGenerator = SetIfNxtBlkLbl.GetILGenerator()
SetIfNxtBlkLblIL.MarkSequencePoint(doc9, 574, 1, 574, 100)
Dim locbldr77 As LocalBuilder = SetIfNxtBlkLblIL.DeclareLocal(GetType(System.Int32))
locbldr77.SetLocalSymInfo("lastel")
SetIfNxtBlkLblIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
SetIfNxtBlkLblIL.Emit(OpCodes.Ldlen)
SetIfNxtBlkLblIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
SetIfNxtBlkLblIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
SetIfNxtBlkLblIL.Emit(OpCodes.Sub)
SetIfNxtBlkLblIL.Emit(OpCodes.Stloc, 0)
SetIfNxtBlkLblIL.MarkSequencePoint(doc9, 575, 1, 575, 100)
Dim locbldr78 As LocalBuilder = SetIfNxtBlkLblIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem"))
locbldr78.SetLocalSymInfo("ifi")
SetIfNxtBlkLblIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
Typ02 = Typ
SetIfNxtBlkLblIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
SetIfNxtBlkLblIL.Emit(OpCodes.Conv_U)
Typ = Typ02
SetIfNxtBlkLblIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
SetIfNxtBlkLblIL.Emit(OpCodes.Stloc, 1)
SetIfNxtBlkLblIL.MarkSequencePoint(doc9, 576, 1, 576, 100)
SetIfNxtBlkLblIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem")
SetIfNxtBlkLblIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("DefineLbl", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("DefineLbl", Type.EmptyTypes).ReturnType
SetIfNxtBlkLblIL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").GetField("NextBlkLabel"))
SetIfNxtBlkLblIL.MarkSequencePoint(doc9, 577, 1, 577, 100)
SetIfNxtBlkLblIL.Emit(OpCodes.Ret)
Dim typ16(-1) As Type
ReDim Preserve typ16(UBound(typ16) + 1)
typ16(UBound(typ16)) = GetType(System.String)
Dim AddLbl As MethodBuilder = SymTable.DefineMethod("AddLbl", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ16)
Dim AddLblIL As ILGenerator = AddLbl.GetILGenerator()
Dim AddLblparam01 As ParameterBuilder = AddLbl.DefineParameter(1, ParameterAttributes.None, "nam")
AddLblIL.MarkSequencePoint(doc9, 581, 1, 581, 100)
Dim locbldr79 As LocalBuilder = AddLblIL.DeclareLocal(GetType(Emit.Label))
locbldr79.SetLocalSymInfo("lbl")
AddLblIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("DefineLbl", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("DefineLbl", Type.EmptyTypes).ReturnType
AddLblIL.Emit(OpCodes.Stloc, 0)
AddLblIL.MarkSequencePoint(doc9, 582, 1, 582, 100)
Dim locbldr80 As LocalBuilder = AddLblIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.LabelItem"))
locbldr80.SetLocalSymInfo("vr")
Dim typ17(-1) As Type
AddLblIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ17(UBound(typ17) + 1)
typ17(UBound(typ17)) = Typ
AddLblIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Emit.Label)
ReDim Preserve typ17(UBound(typ17) + 1)
typ17(UBound(typ17)) = Typ
AddLblIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.LabelItem").GetConstructor(typ17))
AddLblIL.Emit(OpCodes.Stloc, 1)
AddLblIL.MarkSequencePoint(doc9, 584, 1, 584, 100)
Dim locbldr81 As LocalBuilder = AddLblIL.DeclareLocal(GetType(System.Int32))
locbldr81.SetLocalSymInfo("len")
AddLblIL.Emit(OpCodes.Ldsfld, LblLst)
Typ = LblLst.FieldType
AddLblIL.Emit(OpCodes.Ldlen)
AddLblIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddLblIL.Emit(OpCodes.Stloc, 2)
AddLblIL.MarkSequencePoint(doc9, 585, 1, 585, 100)
Dim locbldr82 As LocalBuilder = AddLblIL.DeclareLocal(GetType(System.Int32))
locbldr82.SetLocalSymInfo("destl")
AddLblIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddLblIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddLblIL.Emit(OpCodes.Add)
AddLblIL.Emit(OpCodes.Stloc, 3)
AddLblIL.MarkSequencePoint(doc9, 586, 1, 586, 100)
Dim locbldr83 As LocalBuilder = AddLblIL.DeclareLocal(GetType(System.Int32))
locbldr83.SetLocalSymInfo("stopel")
AddLblIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddLblIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddLblIL.Emit(OpCodes.Sub)
AddLblIL.Emit(OpCodes.Stloc, 4)
AddLblIL.MarkSequencePoint(doc9, 587, 1, 587, 100)
Dim locbldr84 As LocalBuilder = AddLblIL.DeclareLocal(GetType(System.Int32))
locbldr84.SetLocalSymInfo("i")
AddLblIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddLblIL.Emit(OpCodes.Stloc, 5)
AddLblIL.MarkSequencePoint(doc9, 589, 1, 589, 100)
Dim locbldr85 As LocalBuilder = AddLblIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.LabelItem").MakeArrayType())
locbldr85.SetLocalSymInfo("destarr")
AddLblIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddLblIL.Emit(OpCodes.Conv_U)
AddLblIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.LabelItem"))
AddLblIL.Emit(OpCodes.Stloc, 6)
AddLblIL.MarkSequencePoint(doc9, 591, 1, 591, 100)
Dim label22 As System.Reflection.Emit.Label = AddLblIL.DefineLabel()
AddLblIL.MarkSequencePoint(doc9, 592, 1, 592, 100)
Dim label23 As System.Reflection.Emit.Label = AddLblIL.DefineLabel()
AddLblIL.MarkSequencePoint(doc9, 594, 1, 594, 100)
AddLblIL.MarkLabel(label22)
AddLblIL.MarkSequencePoint(doc9, 596, 1, 596, 100)
AddLblIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Int32)
AddLblIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddLblIL.Emit(OpCodes.Add)
AddLblIL.Emit(OpCodes.Stloc, 5)
AddLblIL.MarkSequencePoint(doc9, 598, 1, 598, 100)
AddLblIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddLblIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa34 As System.Reflection.Emit.Label = AddLblIL.DefineLabel()
Dim tru34 As System.Reflection.Emit.Label = AddLblIL.DefineLabel()
Dim cont34 As System.Reflection.Emit.Label = AddLblIL.DefineLabel()
AddLblIL.Emit(OpCodes.Bgt, tru34)
AddLblIL.Emit(OpCodes.Br, fa34)
AddLblIL.MarkLabel(tru34)
AddLblIL.MarkSequencePoint(doc9, 600, 1, 600, 100)
AddLblIL.Emit(OpCodes.Ldloc, 6)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.LabelItem").MakeArrayType()
Typ02 = Typ
AddLblIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Int32)
AddLblIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddLblIL.Emit(OpCodes.Ldsfld, LblLst)
Typ = LblLst.FieldType
Typ02 = Typ
AddLblIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Int32)
AddLblIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddLblIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddLblIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.LabelItem").MakeArrayType().GetElementType())
AddLblIL.MarkSequencePoint(doc9, 602, 1, 602, 100)
AddLblIL.Emit(OpCodes.Br, cont34)
AddLblIL.MarkLabel(fa34)
AddLblIL.Emit(OpCodes.Br, cont34)
AddLblIL.MarkLabel(cont34)
AddLblIL.MarkSequencePoint(doc9, 604, 1, 604, 100)
AddLblIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Int32)
AddLblIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
Dim fa35 As System.Reflection.Emit.Label = AddLblIL.DefineLabel()
Dim tru35 As System.Reflection.Emit.Label = AddLblIL.DefineLabel()
Dim cont35 As System.Reflection.Emit.Label = AddLblIL.DefineLabel()
AddLblIL.Emit(OpCodes.Beq, tru35)
AddLblIL.Emit(OpCodes.Br, fa35)
AddLblIL.MarkLabel(tru35)
AddLblIL.MarkSequencePoint(doc9, 605, 1, 605, 100)
AddLblIL.Emit(OpCodes.Br, label23)
AddLblIL.MarkSequencePoint(doc9, 606, 1, 606, 100)
AddLblIL.Emit(OpCodes.Br, cont35)
AddLblIL.MarkLabel(fa35)
AddLblIL.MarkSequencePoint(doc9, 607, 1, 607, 100)
AddLblIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddLblIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa36 As System.Reflection.Emit.Label = AddLblIL.DefineLabel()
Dim tru36 As System.Reflection.Emit.Label = AddLblIL.DefineLabel()
Dim cont36 As System.Reflection.Emit.Label = AddLblIL.DefineLabel()
AddLblIL.Emit(OpCodes.Beq, fa36)
AddLblIL.Emit(OpCodes.Br, tru36)
AddLblIL.MarkLabel(tru36)
AddLblIL.MarkSequencePoint(doc9, 608, 1, 608, 100)
AddLblIL.Emit(OpCodes.Br, label22)
AddLblIL.MarkSequencePoint(doc9, 609, 1, 609, 100)
AddLblIL.Emit(OpCodes.Br, cont36)
AddLblIL.MarkLabel(fa36)
AddLblIL.MarkSequencePoint(doc9, 610, 1, 610, 100)
AddLblIL.Emit(OpCodes.Br, label23)
AddLblIL.MarkSequencePoint(doc9, 611, 1, 611, 100)
AddLblIL.Emit(OpCodes.Br, cont36)
AddLblIL.MarkLabel(cont36)
AddLblIL.MarkSequencePoint(doc9, 612, 1, 612, 100)
AddLblIL.Emit(OpCodes.Br, cont35)
AddLblIL.MarkLabel(cont35)
AddLblIL.MarkSequencePoint(doc9, 614, 1, 614, 100)
AddLblIL.MarkLabel(label23)
AddLblIL.MarkSequencePoint(doc9, 616, 1, 616, 100)
AddLblIL.Emit(OpCodes.Ldloc, 6)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.LabelItem").MakeArrayType()
Typ02 = Typ
AddLblIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddLblIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddLblIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.LabelItem")
AddLblIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.LabelItem").MakeArrayType().GetElementType())
AddLblIL.MarkSequencePoint(doc9, 618, 1, 618, 100)
AddLblIL.Emit(OpCodes.Ldloc, 6)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.LabelItem").MakeArrayType()
AddLblIL.Emit(OpCodes.Stsfld, LblLst)
AddLblIL.MarkSequencePoint(doc9, 620, 1, 620, 100)
AddLblIL.Emit(OpCodes.Ret)
Dim typ18(-1) As Type
ReDim Preserve typ18(UBound(typ18) + 1)
typ18(UBound(typ18)) = GetType(System.String)
Dim FindVar As MethodBuilder = SymTable.DefineMethod("FindVar", MethodAttributes.Public Or MethodAttributes.Static, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"), typ18)
Dim FindVarIL As ILGenerator = FindVar.GetILGenerator()
Dim FindVarparam01 As ParameterBuilder = FindVar.DefineParameter(1, ParameterAttributes.None, "nam")
FindVarIL.MarkSequencePoint(doc9, 625, 1, 625, 100)
Dim locbldr86 As LocalBuilder = FindVarIL.DeclareLocal(GetType(System.Int32))
locbldr86.SetLocalSymInfo("len")
FindVarIL.Emit(OpCodes.Ldsfld, VarLst)
Typ = VarLst.FieldType
FindVarIL.Emit(OpCodes.Ldlen)
FindVarIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Sub)
FindVarIL.Emit(OpCodes.Stloc, 0)
FindVarIL.MarkSequencePoint(doc9, 626, 1, 626, 100)
Dim locbldr87 As LocalBuilder = FindVarIL.DeclareLocal(GetType(System.Int32))
locbldr87.SetLocalSymInfo("i")
FindVarIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Stloc, 1)
FindVarIL.MarkSequencePoint(doc9, 627, 1, 627, 100)
Dim locbldr88 As LocalBuilder = FindVarIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"))
locbldr88.SetLocalSymInfo("vr")
FindVarIL.Emit(OpCodes.Ldnull)
FindVarIL.Emit(OpCodes.Stloc, 2)
FindVarIL.MarkSequencePoint(doc9, 628, 1, 628, 100)
Dim locbldr89 As LocalBuilder = FindVarIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"))
locbldr89.SetLocalSymInfo("rvr")
FindVarIL.Emit(OpCodes.Ldnull)
FindVarIL.Emit(OpCodes.Stloc, 3)
FindVarIL.MarkSequencePoint(doc9, 629, 1, 629, 100)
Dim locbldr90 As LocalBuilder = FindVarIL.DeclareLocal(GetType(System.Int32))
locbldr90.SetLocalSymInfo("comp")
FindVarIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Stloc, 4)
FindVarIL.MarkSequencePoint(doc9, 631, 1, 631, 100)
Dim label24 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
FindVarIL.MarkSequencePoint(doc9, 632, 1, 632, 100)
Dim label25 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
FindVarIL.MarkSequencePoint(doc9, 634, 1, 634, 100)
FindVarIL.Emit(OpCodes.Ldsfld, VarLst)
Typ = VarLst.FieldType
FindVarIL.Emit(OpCodes.Ldlen)
FindVarIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa37 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
Dim tru37 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
Dim cont37 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
FindVarIL.Emit(OpCodes.Beq, tru37)
FindVarIL.Emit(OpCodes.Br, fa37)
FindVarIL.MarkLabel(tru37)
FindVarIL.MarkSequencePoint(doc9, 635, 1, 635, 100)
FindVarIL.Emit(OpCodes.Br, label24)
FindVarIL.MarkSequencePoint(doc9, 636, 1, 636, 100)
FindVarIL.Emit(OpCodes.Br, cont37)
FindVarIL.MarkLabel(fa37)
FindVarIL.Emit(OpCodes.Br, cont37)
FindVarIL.MarkLabel(cont37)
FindVarIL.MarkSequencePoint(doc9, 638, 1, 638, 100)
FindVarIL.MarkLabel(label25)
FindVarIL.MarkSequencePoint(doc9, 640, 1, 640, 100)
FindVarIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Add)
FindVarIL.Emit(OpCodes.Stloc, 1)
FindVarIL.MarkSequencePoint(doc9, 642, 1, 642, 100)
FindVarIL.Emit(OpCodes.Ldsfld, VarLst)
Typ = VarLst.FieldType
Typ02 = Typ
FindVarIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Conv_U)
Typ = Typ02
FindVarIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
FindVarIL.Emit(OpCodes.Stloc, 2)
FindVarIL.MarkSequencePoint(doc9, 643, 1, 643, 100)
Dim typ19(-1) As Type
FindVarIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ19(UBound(typ19) + 1)
typ19(UBound(typ19)) = Typ
FindVarIL.Emit(OpCodes.Ldloc, 2)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
FindVarIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("Name"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("Name").FieldType
ReDim Preserve typ19(UBound(typ19) + 1)
typ19(UBound(typ19)) = Typ
FindVarIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ19))
Typ = GetType(String).GetMethod("Compare", typ19).ReturnType
FindVarIL.Emit(OpCodes.Stloc, 4)
FindVarIL.MarkSequencePoint(doc9, 644, 1, 644, 100)
FindVarIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa38 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
Dim tru38 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
Dim cont38 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
FindVarIL.Emit(OpCodes.Beq, tru38)
FindVarIL.Emit(OpCodes.Br, fa38)
FindVarIL.MarkLabel(tru38)
FindVarIL.MarkSequencePoint(doc9, 645, 1, 645, 100)
FindVarIL.Emit(OpCodes.Ldloc, 2)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
FindVarIL.Emit(OpCodes.Stloc, 3)
FindVarIL.MarkSequencePoint(doc9, 646, 1, 646, 100)
FindVarIL.Emit(OpCodes.Br, label24)
FindVarIL.MarkSequencePoint(doc9, 647, 1, 647, 100)
FindVarIL.Emit(OpCodes.Br, cont38)
FindVarIL.MarkLabel(fa38)
FindVarIL.Emit(OpCodes.Br, cont38)
FindVarIL.MarkLabel(cont38)
FindVarIL.MarkSequencePoint(doc9, 649, 1, 649, 100)
FindVarIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
Dim fa39 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
Dim tru39 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
Dim cont39 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
FindVarIL.Emit(OpCodes.Beq, tru39)
FindVarIL.Emit(OpCodes.Br, fa39)
FindVarIL.MarkLabel(tru39)
FindVarIL.MarkSequencePoint(doc9, 650, 1, 650, 100)
FindVarIL.Emit(OpCodes.Br, label24)
FindVarIL.MarkSequencePoint(doc9, 651, 1, 651, 100)
FindVarIL.Emit(OpCodes.Br, cont39)
FindVarIL.MarkLabel(fa39)
FindVarIL.MarkSequencePoint(doc9, 652, 1, 652, 100)
FindVarIL.Emit(OpCodes.Br, label25)
FindVarIL.MarkSequencePoint(doc9, 653, 1, 653, 100)
FindVarIL.Emit(OpCodes.Br, cont39)
FindVarIL.MarkLabel(cont39)
FindVarIL.MarkSequencePoint(doc9, 655, 1, 655, 100)
FindVarIL.MarkLabel(label24)
FindVarIL.MarkSequencePoint(doc9, 657, 1, 657, 100)
FindVarIL.Emit(OpCodes.Ldloc, 3)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
FindVarIL.MarkSequencePoint(doc9, 658, 1, 658, 100)
FindVarIL.Emit(OpCodes.Ret)
Dim typ20(-1) As Type
ReDim Preserve typ20(UBound(typ20) + 1)
typ20(UBound(typ20)) = GetType(System.String)
Dim FindLbl As MethodBuilder = SymTable.DefineMethod("FindLbl", MethodAttributes.Public Or MethodAttributes.Static, asm.GetType("dylan.NET.Tokenizer.CodeGen.LabelItem"), typ20)
Dim FindLblIL As ILGenerator = FindLbl.GetILGenerator()
Dim FindLblparam01 As ParameterBuilder = FindLbl.DefineParameter(1, ParameterAttributes.None, "nam")
FindLblIL.MarkSequencePoint(doc9, 662, 1, 662, 100)
Dim locbldr91 As LocalBuilder = FindLblIL.DeclareLocal(GetType(System.Int32))
locbldr91.SetLocalSymInfo("len")
FindLblIL.Emit(OpCodes.Ldsfld, LblLst)
Typ = LblLst.FieldType
FindLblIL.Emit(OpCodes.Ldlen)
FindLblIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
FindLblIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
FindLblIL.Emit(OpCodes.Sub)
FindLblIL.Emit(OpCodes.Stloc, 0)
FindLblIL.MarkSequencePoint(doc9, 663, 1, 663, 100)
Dim locbldr92 As LocalBuilder = FindLblIL.DeclareLocal(GetType(System.Int32))
locbldr92.SetLocalSymInfo("i")
FindLblIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
FindLblIL.Emit(OpCodes.Stloc, 1)
FindLblIL.MarkSequencePoint(doc9, 664, 1, 664, 100)
Dim locbldr93 As LocalBuilder = FindLblIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.LabelItem"))
locbldr93.SetLocalSymInfo("vr")
FindLblIL.Emit(OpCodes.Ldnull)
FindLblIL.Emit(OpCodes.Stloc, 2)
FindLblIL.MarkSequencePoint(doc9, 665, 1, 665, 100)
Dim locbldr94 As LocalBuilder = FindLblIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.LabelItem"))
locbldr94.SetLocalSymInfo("rvr")
FindLblIL.Emit(OpCodes.Ldnull)
FindLblIL.Emit(OpCodes.Stloc, 3)
FindLblIL.MarkSequencePoint(doc9, 666, 1, 666, 100)
Dim locbldr95 As LocalBuilder = FindLblIL.DeclareLocal(GetType(System.Int32))
locbldr95.SetLocalSymInfo("comp")
FindLblIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
FindLblIL.Emit(OpCodes.Stloc, 4)
FindLblIL.MarkSequencePoint(doc9, 668, 1, 668, 100)
Dim label26 As System.Reflection.Emit.Label = FindLblIL.DefineLabel()
FindLblIL.MarkSequencePoint(doc9, 669, 1, 669, 100)
Dim label27 As System.Reflection.Emit.Label = FindLblIL.DefineLabel()
FindLblIL.MarkSequencePoint(doc9, 671, 1, 671, 100)
FindLblIL.Emit(OpCodes.Ldsfld, LblLst)
Typ = LblLst.FieldType
FindLblIL.Emit(OpCodes.Ldlen)
FindLblIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
FindLblIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa40 As System.Reflection.Emit.Label = FindLblIL.DefineLabel()
Dim tru40 As System.Reflection.Emit.Label = FindLblIL.DefineLabel()
Dim cont40 As System.Reflection.Emit.Label = FindLblIL.DefineLabel()
FindLblIL.Emit(OpCodes.Beq, tru40)
FindLblIL.Emit(OpCodes.Br, fa40)
FindLblIL.MarkLabel(tru40)
FindLblIL.MarkSequencePoint(doc9, 672, 1, 672, 100)
FindLblIL.Emit(OpCodes.Br, label26)
FindLblIL.MarkSequencePoint(doc9, 673, 1, 673, 100)
FindLblIL.Emit(OpCodes.Br, cont40)
FindLblIL.MarkLabel(fa40)
FindLblIL.Emit(OpCodes.Br, cont40)
FindLblIL.MarkLabel(cont40)
FindLblIL.MarkSequencePoint(doc9, 675, 1, 675, 100)
FindLblIL.MarkLabel(label27)
FindLblIL.MarkSequencePoint(doc9, 677, 1, 677, 100)
FindLblIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindLblIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
FindLblIL.Emit(OpCodes.Add)
FindLblIL.Emit(OpCodes.Stloc, 1)
FindLblIL.MarkSequencePoint(doc9, 679, 1, 679, 100)
FindLblIL.Emit(OpCodes.Ldsfld, LblLst)
Typ = LblLst.FieldType
Typ02 = Typ
FindLblIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindLblIL.Emit(OpCodes.Conv_U)
Typ = Typ02
FindLblIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
FindLblIL.Emit(OpCodes.Stloc, 2)
FindLblIL.MarkSequencePoint(doc9, 680, 1, 680, 100)
Dim typ21(-1) As Type
FindLblIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ21(UBound(typ21) + 1)
typ21(UBound(typ21)) = Typ
FindLblIL.Emit(OpCodes.Ldloc, 2)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.LabelItem")
FindLblIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.LabelItem").GetField("LblName"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.LabelItem").GetField("LblName").FieldType
ReDim Preserve typ21(UBound(typ21) + 1)
typ21(UBound(typ21)) = Typ
FindLblIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ21))
Typ = GetType(String).GetMethod("Compare", typ21).ReturnType
FindLblIL.Emit(OpCodes.Stloc, 4)
FindLblIL.MarkSequencePoint(doc9, 681, 1, 681, 100)
FindLblIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
FindLblIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa41 As System.Reflection.Emit.Label = FindLblIL.DefineLabel()
Dim tru41 As System.Reflection.Emit.Label = FindLblIL.DefineLabel()
Dim cont41 As System.Reflection.Emit.Label = FindLblIL.DefineLabel()
FindLblIL.Emit(OpCodes.Beq, tru41)
FindLblIL.Emit(OpCodes.Br, fa41)
FindLblIL.MarkLabel(tru41)
FindLblIL.MarkSequencePoint(doc9, 682, 1, 682, 100)
FindLblIL.Emit(OpCodes.Ldloc, 2)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.LabelItem")
FindLblIL.Emit(OpCodes.Stloc, 3)
FindLblIL.MarkSequencePoint(doc9, 683, 1, 683, 100)
FindLblIL.Emit(OpCodes.Br, label26)
FindLblIL.MarkSequencePoint(doc9, 684, 1, 684, 100)
FindLblIL.Emit(OpCodes.Br, cont41)
FindLblIL.MarkLabel(fa41)
FindLblIL.Emit(OpCodes.Br, cont41)
FindLblIL.MarkLabel(cont41)
FindLblIL.MarkSequencePoint(doc9, 686, 1, 686, 100)
FindLblIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindLblIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
Dim fa42 As System.Reflection.Emit.Label = FindLblIL.DefineLabel()
Dim tru42 As System.Reflection.Emit.Label = FindLblIL.DefineLabel()
Dim cont42 As System.Reflection.Emit.Label = FindLblIL.DefineLabel()
FindLblIL.Emit(OpCodes.Beq, tru42)
FindLblIL.Emit(OpCodes.Br, fa42)
FindLblIL.MarkLabel(tru42)
FindLblIL.MarkSequencePoint(doc9, 687, 1, 687, 100)
FindLblIL.Emit(OpCodes.Br, label26)
FindLblIL.MarkSequencePoint(doc9, 688, 1, 688, 100)
FindLblIL.Emit(OpCodes.Br, cont42)
FindLblIL.MarkLabel(fa42)
FindLblIL.MarkSequencePoint(doc9, 689, 1, 689, 100)
FindLblIL.Emit(OpCodes.Br, label27)
FindLblIL.MarkSequencePoint(doc9, 690, 1, 690, 100)
FindLblIL.Emit(OpCodes.Br, cont42)
FindLblIL.MarkLabel(cont42)
FindLblIL.MarkSequencePoint(doc9, 692, 1, 692, 100)
FindLblIL.MarkLabel(label26)
FindLblIL.MarkSequencePoint(doc9, 694, 1, 694, 100)
FindLblIL.Emit(OpCodes.Ldloc, 3)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.LabelItem")
FindLblIL.MarkSequencePoint(doc9, 695, 1, 695, 100)
FindLblIL.Emit(OpCodes.Ret)
Dim typ22(-1) As Type
ReDim Preserve typ22(UBound(typ22) + 1)
typ22(UBound(typ22)) = GetType(System.String)
Dim FindFld As MethodBuilder = SymTable.DefineMethod("FindFld", MethodAttributes.Public Or MethodAttributes.Static, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"), typ22)
Dim FindFldIL As ILGenerator = FindFld.GetILGenerator()
Dim FindFldparam01 As ParameterBuilder = FindFld.DefineParameter(1, ParameterAttributes.None, "nam")
FindFldIL.MarkSequencePoint(doc9, 699, 1, 699, 100)
Dim locbldr96 As LocalBuilder = FindFldIL.DeclareLocal(GetType(System.Int32))
locbldr96.SetLocalSymInfo("len")
FindFldIL.Emit(OpCodes.Ldsfld, FldLst)
Typ = FldLst.FieldType
FindFldIL.Emit(OpCodes.Ldlen)
FindFldIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
FindFldIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
FindFldIL.Emit(OpCodes.Sub)
FindFldIL.Emit(OpCodes.Stloc, 0)
FindFldIL.MarkSequencePoint(doc9, 700, 1, 700, 100)
Dim locbldr97 As LocalBuilder = FindFldIL.DeclareLocal(GetType(System.Int32))
locbldr97.SetLocalSymInfo("i")
FindFldIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
FindFldIL.Emit(OpCodes.Stloc, 1)
FindFldIL.MarkSequencePoint(doc9, 701, 1, 701, 100)
Dim locbldr98 As LocalBuilder = FindFldIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
locbldr98.SetLocalSymInfo("fld")
FindFldIL.Emit(OpCodes.Ldnull)
FindFldIL.Emit(OpCodes.Stloc, 2)
FindFldIL.MarkSequencePoint(doc9, 702, 1, 702, 100)
Dim locbldr99 As LocalBuilder = FindFldIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
locbldr99.SetLocalSymInfo("rfld")
FindFldIL.Emit(OpCodes.Ldnull)
FindFldIL.Emit(OpCodes.Stloc, 3)
FindFldIL.MarkSequencePoint(doc9, 703, 1, 703, 100)
Dim locbldr100 As LocalBuilder = FindFldIL.DeclareLocal(GetType(System.Int32))
locbldr100.SetLocalSymInfo("comp")
FindFldIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
FindFldIL.Emit(OpCodes.Stloc, 4)
FindFldIL.MarkSequencePoint(doc9, 705, 1, 705, 100)
Dim label28 As System.Reflection.Emit.Label = FindFldIL.DefineLabel()
FindFldIL.MarkSequencePoint(doc9, 706, 1, 706, 100)
Dim label29 As System.Reflection.Emit.Label = FindFldIL.DefineLabel()
FindFldIL.MarkSequencePoint(doc9, 708, 1, 708, 100)
FindFldIL.Emit(OpCodes.Ldsfld, FldLst)
Typ = FldLst.FieldType
FindFldIL.Emit(OpCodes.Ldlen)
FindFldIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
FindFldIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa43 As System.Reflection.Emit.Label = FindFldIL.DefineLabel()
Dim tru43 As System.Reflection.Emit.Label = FindFldIL.DefineLabel()
Dim cont43 As System.Reflection.Emit.Label = FindFldIL.DefineLabel()
FindFldIL.Emit(OpCodes.Beq, tru43)
FindFldIL.Emit(OpCodes.Br, fa43)
FindFldIL.MarkLabel(tru43)
FindFldIL.MarkSequencePoint(doc9, 709, 1, 709, 100)
FindFldIL.Emit(OpCodes.Br, label28)
FindFldIL.MarkSequencePoint(doc9, 710, 1, 710, 100)
FindFldIL.Emit(OpCodes.Br, cont43)
FindFldIL.MarkLabel(fa43)
FindFldIL.Emit(OpCodes.Br, cont43)
FindFldIL.MarkLabel(cont43)
FindFldIL.MarkSequencePoint(doc9, 712, 1, 712, 100)
FindFldIL.MarkLabel(label29)
FindFldIL.MarkSequencePoint(doc9, 714, 1, 714, 100)
FindFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindFldIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
FindFldIL.Emit(OpCodes.Add)
FindFldIL.Emit(OpCodes.Stloc, 1)
FindFldIL.MarkSequencePoint(doc9, 716, 1, 716, 100)
FindFldIL.Emit(OpCodes.Ldsfld, FldLst)
Typ = FldLst.FieldType
Typ02 = Typ
FindFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindFldIL.Emit(OpCodes.Conv_U)
Typ = Typ02
FindFldIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
FindFldIL.Emit(OpCodes.Stloc, 2)
FindFldIL.MarkSequencePoint(doc9, 717, 1, 717, 100)
Dim typ23(-1) As Type
FindFldIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ23(UBound(typ23) + 1)
typ23(UBound(typ23)) = Typ
FindFldIL.Emit(OpCodes.Ldloc, 2)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem")
FindFldIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").GetField("Name"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").GetField("Name").FieldType
ReDim Preserve typ23(UBound(typ23) + 1)
typ23(UBound(typ23)) = Typ
FindFldIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ23))
Typ = GetType(String).GetMethod("Compare", typ23).ReturnType
FindFldIL.Emit(OpCodes.Stloc, 4)
FindFldIL.MarkSequencePoint(doc9, 718, 1, 718, 100)
FindFldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
FindFldIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa44 As System.Reflection.Emit.Label = FindFldIL.DefineLabel()
Dim tru44 As System.Reflection.Emit.Label = FindFldIL.DefineLabel()
Dim cont44 As System.Reflection.Emit.Label = FindFldIL.DefineLabel()
FindFldIL.Emit(OpCodes.Beq, tru44)
FindFldIL.Emit(OpCodes.Br, fa44)
FindFldIL.MarkLabel(tru44)
FindFldIL.MarkSequencePoint(doc9, 719, 1, 719, 100)
FindFldIL.Emit(OpCodes.Ldloc, 2)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem")
FindFldIL.Emit(OpCodes.Stloc, 3)
FindFldIL.MarkSequencePoint(doc9, 720, 1, 720, 100)
FindFldIL.Emit(OpCodes.Br, label28)
FindFldIL.MarkSequencePoint(doc9, 721, 1, 721, 100)
FindFldIL.Emit(OpCodes.Br, cont44)
FindFldIL.MarkLabel(fa44)
FindFldIL.Emit(OpCodes.Br, cont44)
FindFldIL.MarkLabel(cont44)
FindFldIL.MarkSequencePoint(doc9, 723, 1, 723, 100)
FindFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindFldIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
Dim fa45 As System.Reflection.Emit.Label = FindFldIL.DefineLabel()
Dim tru45 As System.Reflection.Emit.Label = FindFldIL.DefineLabel()
Dim cont45 As System.Reflection.Emit.Label = FindFldIL.DefineLabel()
FindFldIL.Emit(OpCodes.Beq, tru45)
FindFldIL.Emit(OpCodes.Br, fa45)
FindFldIL.MarkLabel(tru45)
FindFldIL.MarkSequencePoint(doc9, 724, 1, 724, 100)
FindFldIL.Emit(OpCodes.Br, label28)
FindFldIL.MarkSequencePoint(doc9, 725, 1, 725, 100)
FindFldIL.Emit(OpCodes.Br, cont45)
FindFldIL.MarkLabel(fa45)
FindFldIL.MarkSequencePoint(doc9, 726, 1, 726, 100)
FindFldIL.Emit(OpCodes.Br, label29)
FindFldIL.MarkSequencePoint(doc9, 727, 1, 727, 100)
FindFldIL.Emit(OpCodes.Br, cont45)
FindFldIL.MarkLabel(cont45)
FindFldIL.MarkSequencePoint(doc9, 729, 1, 729, 100)
FindFldIL.MarkLabel(label28)
FindFldIL.MarkSequencePoint(doc9, 731, 1, 731, 100)
FindFldIL.Emit(OpCodes.Ldloc, 3)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem")
FindFldIL.MarkSequencePoint(doc9, 732, 1, 732, 100)
FindFldIL.Emit(OpCodes.Ret)
Dim typ24(-1) As Type
ReDim Preserve typ24(UBound(typ24) + 1)
typ24(UBound(typ24)) = GetType(System.Type).MakeArrayType()
ReDim Preserve typ24(UBound(typ24) + 1)
typ24(UBound(typ24)) = GetType(System.Type).MakeArrayType()
Dim CmpTyps As MethodBuilder = SymTable.DefineMethod("CmpTyps", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Boolean), typ24)
Dim CmpTypsIL As ILGenerator = CmpTyps.GetILGenerator()
Dim CmpTypsparam01 As ParameterBuilder = CmpTyps.DefineParameter(1, ParameterAttributes.None, "arra")
Dim CmpTypsparam02 As ParameterBuilder = CmpTyps.DefineParameter(2, ParameterAttributes.None, "arrb")
CmpTypsIL.MarkSequencePoint(doc9, 736, 1, 736, 100)
Dim locbldr101 As LocalBuilder = CmpTypsIL.DeclareLocal(GetType(System.Boolean))
locbldr101.SetLocalSymInfo("b")
CmpTypsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
CmpTypsIL.Emit(OpCodes.Stloc, 0)
CmpTypsIL.MarkSequencePoint(doc9, 738, 1, 738, 100)
CmpTypsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type).MakeArrayType()
CmpTypsIL.Emit(OpCodes.Ldlen)
CmpTypsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
CmpTypsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type).MakeArrayType()
CmpTypsIL.Emit(OpCodes.Ldlen)
CmpTypsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
Dim fa46 As System.Reflection.Emit.Label = CmpTypsIL.DefineLabel()
Dim tru46 As System.Reflection.Emit.Label = CmpTypsIL.DefineLabel()
Dim cont46 As System.Reflection.Emit.Label = CmpTypsIL.DefineLabel()
CmpTypsIL.Emit(OpCodes.Beq, tru46)
CmpTypsIL.Emit(OpCodes.Br, fa46)
CmpTypsIL.MarkLabel(tru46)
CmpTypsIL.MarkSequencePoint(doc9, 740, 1, 740, 100)
Dim label30 As System.Reflection.Emit.Label = CmpTypsIL.DefineLabel()
CmpTypsIL.MarkSequencePoint(doc9, 741, 1, 741, 100)
Dim label31 As System.Reflection.Emit.Label = CmpTypsIL.DefineLabel()
CmpTypsIL.MarkSequencePoint(doc9, 744, 1, 744, 100)
CmpTypsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type).MakeArrayType()
CmpTypsIL.Emit(OpCodes.Ldlen)
CmpTypsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
CmpTypsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa47 As System.Reflection.Emit.Label = CmpTypsIL.DefineLabel()
Dim tru47 As System.Reflection.Emit.Label = CmpTypsIL.DefineLabel()
Dim cont47 As System.Reflection.Emit.Label = CmpTypsIL.DefineLabel()
CmpTypsIL.Emit(OpCodes.Beq, tru47)
CmpTypsIL.Emit(OpCodes.Br, fa47)
CmpTypsIL.MarkLabel(tru47)
CmpTypsIL.MarkSequencePoint(doc9, 745, 1, 745, 100)
CmpTypsIL.Emit(OpCodes.Br, label31)
CmpTypsIL.MarkSequencePoint(doc9, 746, 1, 746, 100)
CmpTypsIL.Emit(OpCodes.Br, cont47)
CmpTypsIL.MarkLabel(fa47)
CmpTypsIL.Emit(OpCodes.Br, cont47)
CmpTypsIL.MarkLabel(cont47)
CmpTypsIL.MarkSequencePoint(doc9, 748, 1, 748, 100)
Dim locbldr102 As LocalBuilder = CmpTypsIL.DeclareLocal(GetType(System.Int32))
locbldr102.SetLocalSymInfo("i")
CmpTypsIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
CmpTypsIL.Emit(OpCodes.Stloc, 1)
CmpTypsIL.MarkSequencePoint(doc9, 749, 1, 749, 100)
Dim locbldr103 As LocalBuilder = CmpTypsIL.DeclareLocal(GetType(System.Int32))
locbldr103.SetLocalSymInfo("len")
CmpTypsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type).MakeArrayType()
CmpTypsIL.Emit(OpCodes.Ldlen)
CmpTypsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
CmpTypsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
CmpTypsIL.Emit(OpCodes.Sub)
CmpTypsIL.Emit(OpCodes.Stloc, 2)
CmpTypsIL.MarkSequencePoint(doc9, 750, 1, 750, 100)
Dim locbldr104 As LocalBuilder = CmpTypsIL.DeclareLocal(GetType(System.Type))
locbldr104.SetLocalSymInfo("ta")
CmpTypsIL.MarkSequencePoint(doc9, 751, 1, 751, 100)
Dim locbldr105 As LocalBuilder = CmpTypsIL.DeclareLocal(GetType(System.Type))
locbldr105.SetLocalSymInfo("tb")
CmpTypsIL.MarkSequencePoint(doc9, 753, 1, 753, 100)
CmpTypsIL.MarkLabel(label30)
CmpTypsIL.MarkSequencePoint(doc9, 754, 1, 754, 100)
CmpTypsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
CmpTypsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
CmpTypsIL.Emit(OpCodes.Add)
CmpTypsIL.Emit(OpCodes.Stloc, 1)
CmpTypsIL.MarkSequencePoint(doc9, 756, 1, 756, 100)
CmpTypsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
CmpTypsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
CmpTypsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
CmpTypsIL.Emit(OpCodes.Ldelem, GetType(System.Type).MakeArrayType().GetElementType())
Typ = GetType(System.Type).MakeArrayType().GetElementType()
CmpTypsIL.Emit(OpCodes.Stloc, 3)
CmpTypsIL.MarkSequencePoint(doc9, 757, 1, 757, 100)
CmpTypsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
CmpTypsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
CmpTypsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
CmpTypsIL.Emit(OpCodes.Ldelem, GetType(System.Type).MakeArrayType().GetElementType())
Typ = GetType(System.Type).MakeArrayType().GetElementType()
CmpTypsIL.Emit(OpCodes.Stloc, 4)
CmpTypsIL.MarkSequencePoint(doc9, 759, 1, 759, 100)
Dim typ25(-1) As Type
CmpTypsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Type)
Typ03 = Typ
CmpTypsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Type)
ReDim Preserve typ25(UBound(typ25) + 1)
typ25(UBound(typ25)) = Typ
CmpTypsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsAssignableFrom", typ25))
Typ = Typ03.GetMethod("IsAssignableFrom", typ25).ReturnType
CmpTypsIL.Emit(OpCodes.Stloc, 0)
CmpTypsIL.MarkSequencePoint(doc9, 760, 1, 760, 100)
CmpTypsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Boolean)
CmpTypsIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa48 As System.Reflection.Emit.Label = CmpTypsIL.DefineLabel()
Dim tru48 As System.Reflection.Emit.Label = CmpTypsIL.DefineLabel()
Dim cont48 As System.Reflection.Emit.Label = CmpTypsIL.DefineLabel()
CmpTypsIL.Emit(OpCodes.Beq, tru48)
CmpTypsIL.Emit(OpCodes.Br, fa48)
CmpTypsIL.MarkLabel(tru48)
CmpTypsIL.MarkSequencePoint(doc9, 761, 1, 761, 100)
CmpTypsIL.Emit(OpCodes.Br, label31)
CmpTypsIL.MarkSequencePoint(doc9, 762, 1, 762, 100)
CmpTypsIL.Emit(OpCodes.Br, cont48)
CmpTypsIL.MarkLabel(fa48)
CmpTypsIL.Emit(OpCodes.Br, cont48)
CmpTypsIL.MarkLabel(cont48)
CmpTypsIL.MarkSequencePoint(doc9, 764, 1, 764, 100)
CmpTypsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
CmpTypsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa49 As System.Reflection.Emit.Label = CmpTypsIL.DefineLabel()
Dim tru49 As System.Reflection.Emit.Label = CmpTypsIL.DefineLabel()
Dim cont49 As System.Reflection.Emit.Label = CmpTypsIL.DefineLabel()
CmpTypsIL.Emit(OpCodes.Beq, tru49)
CmpTypsIL.Emit(OpCodes.Br, fa49)
CmpTypsIL.MarkLabel(tru49)
CmpTypsIL.MarkSequencePoint(doc9, 765, 1, 765, 100)
CmpTypsIL.Emit(OpCodes.Br, label31)
CmpTypsIL.MarkSequencePoint(doc9, 766, 1, 766, 100)
CmpTypsIL.Emit(OpCodes.Br, cont49)
CmpTypsIL.MarkLabel(fa49)
CmpTypsIL.MarkSequencePoint(doc9, 767, 1, 767, 100)
CmpTypsIL.Emit(OpCodes.Br, label30)
CmpTypsIL.MarkSequencePoint(doc9, 768, 1, 768, 100)
CmpTypsIL.Emit(OpCodes.Br, cont49)
CmpTypsIL.MarkLabel(cont49)
CmpTypsIL.MarkSequencePoint(doc9, 770, 1, 770, 100)
CmpTypsIL.MarkLabel(label31)
CmpTypsIL.MarkSequencePoint(doc9, 772, 1, 772, 100)
CmpTypsIL.Emit(OpCodes.Br, cont46)
CmpTypsIL.MarkLabel(fa46)
CmpTypsIL.MarkSequencePoint(doc9, 773, 1, 773, 100)
CmpTypsIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
CmpTypsIL.Emit(OpCodes.Stloc, 0)
CmpTypsIL.MarkSequencePoint(doc9, 774, 1, 774, 100)
CmpTypsIL.Emit(OpCodes.Br, cont46)
CmpTypsIL.MarkLabel(cont46)
CmpTypsIL.MarkSequencePoint(doc9, 776, 1, 776, 100)
CmpTypsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Boolean)
CmpTypsIL.MarkSequencePoint(doc9, 778, 1, 778, 100)
CmpTypsIL.Emit(OpCodes.Ret)
Dim typ26(-1) As Type
ReDim Preserve typ26(UBound(typ26) + 1)
typ26(UBound(typ26)) = GetType(System.String)
ReDim Preserve typ26(UBound(typ26) + 1)
typ26(UBound(typ26)) = GetType(System.Type).MakeArrayType()
Dim FindMet As MethodBuilder = SymTable.DefineMethod("FindMet", MethodAttributes.Public Or MethodAttributes.Static, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"), typ26)
Dim FindMetIL As ILGenerator = FindMet.GetILGenerator()
Dim FindMetparam01 As ParameterBuilder = FindMet.DefineParameter(1, ParameterAttributes.None, "nam")
Dim FindMetparam02 As ParameterBuilder = FindMet.DefineParameter(2, ParameterAttributes.None, "params")
FindMetIL.MarkSequencePoint(doc9, 782, 1, 782, 100)
Dim locbldr106 As LocalBuilder = FindMetIL.DeclareLocal(GetType(System.Int32))
locbldr106.SetLocalSymInfo("len")
FindMetIL.Emit(OpCodes.Ldsfld, MetLst)
Typ = MetLst.FieldType
FindMetIL.Emit(OpCodes.Ldlen)
FindMetIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
FindMetIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
FindMetIL.Emit(OpCodes.Sub)
FindMetIL.Emit(OpCodes.Stloc, 0)
FindMetIL.MarkSequencePoint(doc9, 783, 1, 783, 100)
Dim locbldr107 As LocalBuilder = FindMetIL.DeclareLocal(GetType(System.Int32))
locbldr107.SetLocalSymInfo("i")
FindMetIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
FindMetIL.Emit(OpCodes.Stloc, 1)
FindMetIL.MarkSequencePoint(doc9, 784, 1, 784, 100)
Dim locbldr108 As LocalBuilder = FindMetIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
locbldr108.SetLocalSymInfo("met")
FindMetIL.Emit(OpCodes.Ldnull)
FindMetIL.Emit(OpCodes.Stloc, 2)
FindMetIL.MarkSequencePoint(doc9, 785, 1, 785, 100)
Dim locbldr109 As LocalBuilder = FindMetIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
locbldr109.SetLocalSymInfo("rmet")
FindMetIL.Emit(OpCodes.Ldnull)
FindMetIL.Emit(OpCodes.Stloc, 3)
FindMetIL.MarkSequencePoint(doc9, 786, 1, 786, 100)
Dim locbldr110 As LocalBuilder = FindMetIL.DeclareLocal(GetType(System.Int32))
locbldr110.SetLocalSymInfo("comp")
FindMetIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
FindMetIL.Emit(OpCodes.Stloc, 4)
FindMetIL.MarkSequencePoint(doc9, 787, 1, 787, 100)
Dim locbldr111 As LocalBuilder = FindMetIL.DeclareLocal(GetType(System.Boolean))
locbldr111.SetLocalSymInfo("b")
FindMetIL.MarkSequencePoint(doc9, 789, 1, 789, 100)
Dim label32 As System.Reflection.Emit.Label = FindMetIL.DefineLabel()
FindMetIL.MarkSequencePoint(doc9, 790, 1, 790, 100)
Dim label33 As System.Reflection.Emit.Label = FindMetIL.DefineLabel()
FindMetIL.MarkSequencePoint(doc9, 792, 1, 792, 100)
FindMetIL.Emit(OpCodes.Ldsfld, MetLst)
Typ = MetLst.FieldType
FindMetIL.Emit(OpCodes.Ldlen)
FindMetIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
FindMetIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa50 As System.Reflection.Emit.Label = FindMetIL.DefineLabel()
Dim tru50 As System.Reflection.Emit.Label = FindMetIL.DefineLabel()
Dim cont50 As System.Reflection.Emit.Label = FindMetIL.DefineLabel()
FindMetIL.Emit(OpCodes.Beq, tru50)
FindMetIL.Emit(OpCodes.Br, fa50)
FindMetIL.MarkLabel(tru50)
FindMetIL.MarkSequencePoint(doc9, 793, 1, 793, 100)
FindMetIL.Emit(OpCodes.Br, label32)
FindMetIL.MarkSequencePoint(doc9, 794, 1, 794, 100)
FindMetIL.Emit(OpCodes.Br, cont50)
FindMetIL.MarkLabel(fa50)
FindMetIL.Emit(OpCodes.Br, cont50)
FindMetIL.MarkLabel(cont50)
FindMetIL.MarkSequencePoint(doc9, 796, 1, 796, 100)
FindMetIL.MarkLabel(label33)
FindMetIL.MarkSequencePoint(doc9, 798, 1, 798, 100)
FindMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindMetIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
FindMetIL.Emit(OpCodes.Add)
FindMetIL.Emit(OpCodes.Stloc, 1)
FindMetIL.MarkSequencePoint(doc9, 800, 1, 800, 100)
FindMetIL.Emit(OpCodes.Ldsfld, MetLst)
Typ = MetLst.FieldType
Typ02 = Typ
FindMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindMetIL.Emit(OpCodes.Conv_U)
Typ = Typ02
FindMetIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
FindMetIL.Emit(OpCodes.Stloc, 2)
FindMetIL.MarkSequencePoint(doc9, 801, 1, 801, 100)
Dim typ27(-1) As Type
FindMetIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ27(UBound(typ27) + 1)
typ27(UBound(typ27)) = Typ
FindMetIL.Emit(OpCodes.Ldloc, 2)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem")
FindMetIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").GetField("Name"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").GetField("Name").FieldType
ReDim Preserve typ27(UBound(typ27) + 1)
typ27(UBound(typ27)) = Typ
FindMetIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ27))
Typ = GetType(String).GetMethod("Compare", typ27).ReturnType
FindMetIL.Emit(OpCodes.Stloc, 4)
FindMetIL.MarkSequencePoint(doc9, 802, 1, 802, 100)
FindMetIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
FindMetIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa51 As System.Reflection.Emit.Label = FindMetIL.DefineLabel()
Dim tru51 As System.Reflection.Emit.Label = FindMetIL.DefineLabel()
Dim cont51 As System.Reflection.Emit.Label = FindMetIL.DefineLabel()
FindMetIL.Emit(OpCodes.Beq, tru51)
FindMetIL.Emit(OpCodes.Br, fa51)
FindMetIL.MarkLabel(tru51)
FindMetIL.MarkSequencePoint(doc9, 803, 1, 803, 100)
Dim typ28(-1) As Type
FindMetIL.Emit(OpCodes.Ldloc, 2)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem")
FindMetIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").GetField("ParamTyps"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").GetField("ParamTyps").FieldType
ReDim Preserve typ28(UBound(typ28) + 1)
typ28(UBound(typ28)) = Typ
FindMetIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ28(UBound(typ28) + 1)
typ28(UBound(typ28)) = Typ
FindMetIL.Emit(OpCodes.Call, CmpTyps)
Typ = CmpTyps.ReturnType
FindMetIL.Emit(OpCodes.Stloc, 5)
FindMetIL.MarkSequencePoint(doc9, 804, 1, 804, 100)
FindMetIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
FindMetIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa52 As System.Reflection.Emit.Label = FindMetIL.DefineLabel()
Dim tru52 As System.Reflection.Emit.Label = FindMetIL.DefineLabel()
Dim cont52 As System.Reflection.Emit.Label = FindMetIL.DefineLabel()
FindMetIL.Emit(OpCodes.Beq, tru52)
FindMetIL.Emit(OpCodes.Br, fa52)
FindMetIL.MarkLabel(tru52)
FindMetIL.MarkSequencePoint(doc9, 805, 1, 805, 100)
FindMetIL.Emit(OpCodes.Ldloc, 2)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem")
FindMetIL.Emit(OpCodes.Stloc, 3)
FindMetIL.MarkSequencePoint(doc9, 806, 1, 806, 100)
FindMetIL.Emit(OpCodes.Br, label32)
FindMetIL.MarkSequencePoint(doc9, 807, 1, 807, 100)
FindMetIL.Emit(OpCodes.Br, cont52)
FindMetIL.MarkLabel(fa52)
FindMetIL.Emit(OpCodes.Br, cont52)
FindMetIL.MarkLabel(cont52)
FindMetIL.MarkSequencePoint(doc9, 808, 1, 808, 100)
FindMetIL.Emit(OpCodes.Br, cont51)
FindMetIL.MarkLabel(fa51)
FindMetIL.Emit(OpCodes.Br, cont51)
FindMetIL.MarkLabel(cont51)
FindMetIL.MarkSequencePoint(doc9, 810, 1, 810, 100)
FindMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindMetIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
Dim fa53 As System.Reflection.Emit.Label = FindMetIL.DefineLabel()
Dim tru53 As System.Reflection.Emit.Label = FindMetIL.DefineLabel()
Dim cont53 As System.Reflection.Emit.Label = FindMetIL.DefineLabel()
FindMetIL.Emit(OpCodes.Beq, tru53)
FindMetIL.Emit(OpCodes.Br, fa53)
FindMetIL.MarkLabel(tru53)
FindMetIL.MarkSequencePoint(doc9, 811, 1, 811, 100)
FindMetIL.Emit(OpCodes.Br, label32)
FindMetIL.MarkSequencePoint(doc9, 812, 1, 812, 100)
FindMetIL.Emit(OpCodes.Br, cont53)
FindMetIL.MarkLabel(fa53)
FindMetIL.MarkSequencePoint(doc9, 813, 1, 813, 100)
FindMetIL.Emit(OpCodes.Br, label33)
FindMetIL.MarkSequencePoint(doc9, 814, 1, 814, 100)
FindMetIL.Emit(OpCodes.Br, cont53)
FindMetIL.MarkLabel(cont53)
FindMetIL.MarkSequencePoint(doc9, 816, 1, 816, 100)
FindMetIL.MarkLabel(label32)
FindMetIL.MarkSequencePoint(doc9, 818, 1, 818, 100)
FindMetIL.Emit(OpCodes.Ldloc, 3)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem")
FindMetIL.MarkSequencePoint(doc9, 819, 1, 819, 100)
FindMetIL.Emit(OpCodes.Ret)
Dim typ29(-1) As Type
ReDim Preserve typ29(UBound(typ29) + 1)
typ29(UBound(typ29)) = GetType(System.String)
Dim FindMetNoParams As MethodBuilder = SymTable.DefineMethod("FindMetNoParams", MethodAttributes.Public Or MethodAttributes.Static, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"), typ29)
Dim FindMetNoParamsIL As ILGenerator = FindMetNoParams.GetILGenerator()
Dim FindMetNoParamsparam01 As ParameterBuilder = FindMetNoParams.DefineParameter(1, ParameterAttributes.None, "nam")
FindMetNoParamsIL.MarkSequencePoint(doc9, 823, 1, 823, 100)
Dim locbldr112 As LocalBuilder = FindMetNoParamsIL.DeclareLocal(GetType(System.Int32))
locbldr112.SetLocalSymInfo("len")
FindMetNoParamsIL.Emit(OpCodes.Ldsfld, MetLst)
Typ = MetLst.FieldType
FindMetNoParamsIL.Emit(OpCodes.Ldlen)
FindMetNoParamsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
FindMetNoParamsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
FindMetNoParamsIL.Emit(OpCodes.Sub)
FindMetNoParamsIL.Emit(OpCodes.Stloc, 0)
FindMetNoParamsIL.MarkSequencePoint(doc9, 824, 1, 824, 100)
Dim locbldr113 As LocalBuilder = FindMetNoParamsIL.DeclareLocal(GetType(System.Int32))
locbldr113.SetLocalSymInfo("i")
FindMetNoParamsIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
FindMetNoParamsIL.Emit(OpCodes.Stloc, 1)
FindMetNoParamsIL.MarkSequencePoint(doc9, 825, 1, 825, 100)
Dim locbldr114 As LocalBuilder = FindMetNoParamsIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
locbldr114.SetLocalSymInfo("met")
FindMetNoParamsIL.Emit(OpCodes.Ldnull)
FindMetNoParamsIL.Emit(OpCodes.Stloc, 2)
FindMetNoParamsIL.MarkSequencePoint(doc9, 826, 1, 826, 100)
Dim locbldr115 As LocalBuilder = FindMetNoParamsIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
locbldr115.SetLocalSymInfo("rmet")
FindMetNoParamsIL.Emit(OpCodes.Ldnull)
FindMetNoParamsIL.Emit(OpCodes.Stloc, 3)
FindMetNoParamsIL.MarkSequencePoint(doc9, 827, 1, 827, 100)
Dim locbldr116 As LocalBuilder = FindMetNoParamsIL.DeclareLocal(GetType(System.Int32))
locbldr116.SetLocalSymInfo("comp")
FindMetNoParamsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
FindMetNoParamsIL.Emit(OpCodes.Stloc, 4)
FindMetNoParamsIL.MarkSequencePoint(doc9, 828, 1, 828, 100)
Dim locbldr117 As LocalBuilder = FindMetNoParamsIL.DeclareLocal(GetType(System.Boolean))
locbldr117.SetLocalSymInfo("b")
FindMetNoParamsIL.MarkSequencePoint(doc9, 830, 1, 830, 100)
Dim label34 As System.Reflection.Emit.Label = FindMetNoParamsIL.DefineLabel()
FindMetNoParamsIL.MarkSequencePoint(doc9, 831, 1, 831, 100)
Dim label35 As System.Reflection.Emit.Label = FindMetNoParamsIL.DefineLabel()
FindMetNoParamsIL.MarkSequencePoint(doc9, 833, 1, 833, 100)
FindMetNoParamsIL.Emit(OpCodes.Ldsfld, MetLst)
Typ = MetLst.FieldType
FindMetNoParamsIL.Emit(OpCodes.Ldlen)
FindMetNoParamsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
FindMetNoParamsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa54 As System.Reflection.Emit.Label = FindMetNoParamsIL.DefineLabel()
Dim tru54 As System.Reflection.Emit.Label = FindMetNoParamsIL.DefineLabel()
Dim cont54 As System.Reflection.Emit.Label = FindMetNoParamsIL.DefineLabel()
FindMetNoParamsIL.Emit(OpCodes.Beq, tru54)
FindMetNoParamsIL.Emit(OpCodes.Br, fa54)
FindMetNoParamsIL.MarkLabel(tru54)
FindMetNoParamsIL.MarkSequencePoint(doc9, 834, 1, 834, 100)
FindMetNoParamsIL.Emit(OpCodes.Br, label34)
FindMetNoParamsIL.MarkSequencePoint(doc9, 835, 1, 835, 100)
FindMetNoParamsIL.Emit(OpCodes.Br, cont54)
FindMetNoParamsIL.MarkLabel(fa54)
FindMetNoParamsIL.Emit(OpCodes.Br, cont54)
FindMetNoParamsIL.MarkLabel(cont54)
FindMetNoParamsIL.MarkSequencePoint(doc9, 837, 1, 837, 100)
FindMetNoParamsIL.MarkLabel(label35)
FindMetNoParamsIL.MarkSequencePoint(doc9, 839, 1, 839, 100)
FindMetNoParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindMetNoParamsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
FindMetNoParamsIL.Emit(OpCodes.Add)
FindMetNoParamsIL.Emit(OpCodes.Stloc, 1)
FindMetNoParamsIL.MarkSequencePoint(doc9, 841, 1, 841, 100)
FindMetNoParamsIL.Emit(OpCodes.Ldsfld, MetLst)
Typ = MetLst.FieldType
Typ02 = Typ
FindMetNoParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindMetNoParamsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
FindMetNoParamsIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
FindMetNoParamsIL.Emit(OpCodes.Stloc, 2)
FindMetNoParamsIL.MarkSequencePoint(doc9, 842, 1, 842, 100)
Dim typ30(-1) As Type
FindMetNoParamsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ30(UBound(typ30) + 1)
typ30(UBound(typ30)) = Typ
FindMetNoParamsIL.Emit(OpCodes.Ldloc, 2)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem")
FindMetNoParamsIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").GetField("Name"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").GetField("Name").FieldType
ReDim Preserve typ30(UBound(typ30) + 1)
typ30(UBound(typ30)) = Typ
FindMetNoParamsIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ30))
Typ = GetType(String).GetMethod("Compare", typ30).ReturnType
FindMetNoParamsIL.Emit(OpCodes.Stloc, 4)
FindMetNoParamsIL.MarkSequencePoint(doc9, 843, 1, 843, 100)
FindMetNoParamsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
FindMetNoParamsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa55 As System.Reflection.Emit.Label = FindMetNoParamsIL.DefineLabel()
Dim tru55 As System.Reflection.Emit.Label = FindMetNoParamsIL.DefineLabel()
Dim cont55 As System.Reflection.Emit.Label = FindMetNoParamsIL.DefineLabel()
FindMetNoParamsIL.Emit(OpCodes.Beq, tru55)
FindMetNoParamsIL.Emit(OpCodes.Br, fa55)
FindMetNoParamsIL.MarkLabel(tru55)
FindMetNoParamsIL.MarkSequencePoint(doc9, 844, 1, 844, 100)
FindMetNoParamsIL.Emit(OpCodes.Ldloc, 2)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem")
FindMetNoParamsIL.Emit(OpCodes.Stloc, 3)
FindMetNoParamsIL.MarkSequencePoint(doc9, 845, 1, 845, 100)
FindMetNoParamsIL.Emit(OpCodes.Br, label34)
FindMetNoParamsIL.MarkSequencePoint(doc9, 846, 1, 846, 100)
FindMetNoParamsIL.Emit(OpCodes.Br, cont55)
FindMetNoParamsIL.MarkLabel(fa55)
FindMetNoParamsIL.Emit(OpCodes.Br, cont55)
FindMetNoParamsIL.MarkLabel(cont55)
FindMetNoParamsIL.MarkSequencePoint(doc9, 848, 1, 848, 100)
FindMetNoParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindMetNoParamsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
Dim fa56 As System.Reflection.Emit.Label = FindMetNoParamsIL.DefineLabel()
Dim tru56 As System.Reflection.Emit.Label = FindMetNoParamsIL.DefineLabel()
Dim cont56 As System.Reflection.Emit.Label = FindMetNoParamsIL.DefineLabel()
FindMetNoParamsIL.Emit(OpCodes.Beq, tru56)
FindMetNoParamsIL.Emit(OpCodes.Br, fa56)
FindMetNoParamsIL.MarkLabel(tru56)
FindMetNoParamsIL.MarkSequencePoint(doc9, 849, 1, 849, 100)
FindMetNoParamsIL.Emit(OpCodes.Br, label34)
FindMetNoParamsIL.MarkSequencePoint(doc9, 850, 1, 850, 100)
FindMetNoParamsIL.Emit(OpCodes.Br, cont56)
FindMetNoParamsIL.MarkLabel(fa56)
FindMetNoParamsIL.MarkSequencePoint(doc9, 851, 1, 851, 100)
FindMetNoParamsIL.Emit(OpCodes.Br, label35)
FindMetNoParamsIL.MarkSequencePoint(doc9, 852, 1, 852, 100)
FindMetNoParamsIL.Emit(OpCodes.Br, cont56)
FindMetNoParamsIL.MarkLabel(cont56)
FindMetNoParamsIL.MarkSequencePoint(doc9, 854, 1, 854, 100)
FindMetNoParamsIL.MarkLabel(label34)
FindMetNoParamsIL.MarkSequencePoint(doc9, 856, 1, 856, 100)
FindMetNoParamsIL.Emit(OpCodes.Ldloc, 3)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem")
FindMetNoParamsIL.MarkSequencePoint(doc9, 857, 1, 857, 100)
FindMetNoParamsIL.Emit(OpCodes.Ret)
Dim typ31(-1) As Type
ReDim Preserve typ31(UBound(typ31) + 1)
typ31(UBound(typ31)) = GetType(System.Type).MakeArrayType()
Dim FindCtor As MethodBuilder = SymTable.DefineMethod("FindCtor", MethodAttributes.Public Or MethodAttributes.Static, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"), typ31)
Dim FindCtorIL As ILGenerator = FindCtor.GetILGenerator()
Dim FindCtorparam01 As ParameterBuilder = FindCtor.DefineParameter(1, ParameterAttributes.None, "params")
FindCtorIL.MarkSequencePoint(doc9, 862, 1, 862, 100)
Dim locbldr118 As LocalBuilder = FindCtorIL.DeclareLocal(GetType(System.Int32))
locbldr118.SetLocalSymInfo("len")
FindCtorIL.Emit(OpCodes.Ldsfld, CtorLst)
Typ = CtorLst.FieldType
FindCtorIL.Emit(OpCodes.Ldlen)
FindCtorIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
FindCtorIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
FindCtorIL.Emit(OpCodes.Sub)
FindCtorIL.Emit(OpCodes.Stloc, 0)
FindCtorIL.MarkSequencePoint(doc9, 863, 1, 863, 100)
Dim locbldr119 As LocalBuilder = FindCtorIL.DeclareLocal(GetType(System.Int32))
locbldr119.SetLocalSymInfo("i")
FindCtorIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
FindCtorIL.Emit(OpCodes.Stloc, 1)
FindCtorIL.MarkSequencePoint(doc9, 864, 1, 864, 100)
Dim locbldr120 As LocalBuilder = FindCtorIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
locbldr120.SetLocalSymInfo("met")
FindCtorIL.Emit(OpCodes.Ldnull)
FindCtorIL.Emit(OpCodes.Stloc, 2)
FindCtorIL.MarkSequencePoint(doc9, 865, 1, 865, 100)
Dim locbldr121 As LocalBuilder = FindCtorIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
locbldr121.SetLocalSymInfo("rmet")
FindCtorIL.Emit(OpCodes.Ldnull)
FindCtorIL.Emit(OpCodes.Stloc, 3)
FindCtorIL.MarkSequencePoint(doc9, 866, 1, 866, 100)
Dim locbldr122 As LocalBuilder = FindCtorIL.DeclareLocal(GetType(System.Int32))
locbldr122.SetLocalSymInfo("comp")
FindCtorIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
FindCtorIL.Emit(OpCodes.Stloc, 4)
FindCtorIL.MarkSequencePoint(doc9, 867, 1, 867, 100)
Dim locbldr123 As LocalBuilder = FindCtorIL.DeclareLocal(GetType(System.Boolean))
locbldr123.SetLocalSymInfo("b")
FindCtorIL.MarkSequencePoint(doc9, 869, 1, 869, 100)
Dim label36 As System.Reflection.Emit.Label = FindCtorIL.DefineLabel()
FindCtorIL.MarkSequencePoint(doc9, 870, 1, 870, 100)
Dim label37 As System.Reflection.Emit.Label = FindCtorIL.DefineLabel()
FindCtorIL.MarkSequencePoint(doc9, 872, 1, 872, 100)
FindCtorIL.Emit(OpCodes.Ldsfld, CtorLst)
Typ = CtorLst.FieldType
FindCtorIL.Emit(OpCodes.Ldlen)
FindCtorIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
FindCtorIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa57 As System.Reflection.Emit.Label = FindCtorIL.DefineLabel()
Dim tru57 As System.Reflection.Emit.Label = FindCtorIL.DefineLabel()
Dim cont57 As System.Reflection.Emit.Label = FindCtorIL.DefineLabel()
FindCtorIL.Emit(OpCodes.Beq, tru57)
FindCtorIL.Emit(OpCodes.Br, fa57)
FindCtorIL.MarkLabel(tru57)
FindCtorIL.MarkSequencePoint(doc9, 873, 1, 873, 100)
FindCtorIL.Emit(OpCodes.Br, label36)
FindCtorIL.MarkSequencePoint(doc9, 874, 1, 874, 100)
FindCtorIL.Emit(OpCodes.Br, cont57)
FindCtorIL.MarkLabel(fa57)
FindCtorIL.Emit(OpCodes.Br, cont57)
FindCtorIL.MarkLabel(cont57)
FindCtorIL.MarkSequencePoint(doc9, 876, 1, 876, 100)
FindCtorIL.MarkLabel(label37)
FindCtorIL.MarkSequencePoint(doc9, 878, 1, 878, 100)
FindCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindCtorIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
FindCtorIL.Emit(OpCodes.Add)
FindCtorIL.Emit(OpCodes.Stloc, 1)
FindCtorIL.MarkSequencePoint(doc9, 880, 1, 880, 100)
FindCtorIL.Emit(OpCodes.Ldsfld, CtorLst)
Typ = CtorLst.FieldType
Typ02 = Typ
FindCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindCtorIL.Emit(OpCodes.Conv_U)
Typ = Typ02
FindCtorIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
FindCtorIL.Emit(OpCodes.Stloc, 2)
FindCtorIL.MarkSequencePoint(doc9, 881, 1, 881, 100)
Dim typ32(-1) As Type
FindCtorIL.Emit(OpCodes.Ldloc, 2)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem")
FindCtorIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").GetField("ParamTyps"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").GetField("ParamTyps").FieldType
ReDim Preserve typ32(UBound(typ32) + 1)
typ32(UBound(typ32)) = Typ
FindCtorIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ32(UBound(typ32) + 1)
typ32(UBound(typ32)) = Typ
FindCtorIL.Emit(OpCodes.Call, CmpTyps)
Typ = CmpTyps.ReturnType
FindCtorIL.Emit(OpCodes.Stloc, 5)
FindCtorIL.MarkSequencePoint(doc9, 882, 1, 882, 100)
FindCtorIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
FindCtorIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa58 As System.Reflection.Emit.Label = FindCtorIL.DefineLabel()
Dim tru58 As System.Reflection.Emit.Label = FindCtorIL.DefineLabel()
Dim cont58 As System.Reflection.Emit.Label = FindCtorIL.DefineLabel()
FindCtorIL.Emit(OpCodes.Beq, tru58)
FindCtorIL.Emit(OpCodes.Br, fa58)
FindCtorIL.MarkLabel(tru58)
FindCtorIL.MarkSequencePoint(doc9, 883, 1, 883, 100)
FindCtorIL.Emit(OpCodes.Ldloc, 2)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem")
FindCtorIL.Emit(OpCodes.Stloc, 3)
FindCtorIL.MarkSequencePoint(doc9, 884, 1, 884, 100)
FindCtorIL.Emit(OpCodes.Br, label36)
FindCtorIL.MarkSequencePoint(doc9, 885, 1, 885, 100)
FindCtorIL.Emit(OpCodes.Br, cont58)
FindCtorIL.MarkLabel(fa58)
FindCtorIL.Emit(OpCodes.Br, cont58)
FindCtorIL.MarkLabel(cont58)
FindCtorIL.MarkSequencePoint(doc9, 887, 1, 887, 100)
FindCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindCtorIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
Dim fa59 As System.Reflection.Emit.Label = FindCtorIL.DefineLabel()
Dim tru59 As System.Reflection.Emit.Label = FindCtorIL.DefineLabel()
Dim cont59 As System.Reflection.Emit.Label = FindCtorIL.DefineLabel()
FindCtorIL.Emit(OpCodes.Beq, tru59)
FindCtorIL.Emit(OpCodes.Br, fa59)
FindCtorIL.MarkLabel(tru59)
FindCtorIL.MarkSequencePoint(doc9, 888, 1, 888, 100)
FindCtorIL.Emit(OpCodes.Br, label36)
FindCtorIL.MarkSequencePoint(doc9, 889, 1, 889, 100)
FindCtorIL.Emit(OpCodes.Br, cont59)
FindCtorIL.MarkLabel(fa59)
FindCtorIL.MarkSequencePoint(doc9, 890, 1, 890, 100)
FindCtorIL.Emit(OpCodes.Br, label37)
FindCtorIL.MarkSequencePoint(doc9, 891, 1, 891, 100)
FindCtorIL.Emit(OpCodes.Br, cont59)
FindCtorIL.MarkLabel(cont59)
FindCtorIL.MarkSequencePoint(doc9, 893, 1, 893, 100)
FindCtorIL.MarkLabel(label36)
FindCtorIL.MarkSequencePoint(doc9, 895, 1, 895, 100)
FindCtorIL.Emit(OpCodes.Ldloc, 3)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem")
FindCtorIL.MarkSequencePoint(doc9, 896, 1, 896, 100)
FindCtorIL.Emit(OpCodes.Ret)
SymTable.CreateType()
End Sub


Dim doc10 As ISymbolDocumentWriter

Sub Helpers()
Dim Helpers As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "Helpers", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass Or TypeAttributes.BeforeFieldInit, GetType(System.Object))
Dim StringFlg As FieldBuilder = Helpers.DefineField("StringFlg", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static)
Dim DelegateFlg As FieldBuilder = Helpers.DefineField("DelegateFlg", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static)
Dim OpCodeSuppFlg As FieldBuilder = Helpers.DefineField("OpCodeSuppFlg", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static)
Dim LeftOp As FieldBuilder = Helpers.DefineField("LeftOp", GetType(System.Type), FieldAttributes.Public Or FieldAttributes.Static)
Dim RightOp As FieldBuilder = Helpers.DefineField("RightOp", GetType(System.Type), FieldAttributes.Public Or FieldAttributes.Static)
Dim ctor0 As ConstructorBuilder = Helpers.DefineConstructor(MethodAttributes.Public Or MethodAttributes.Static,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc10, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, StringFlg)
ctor0IL.MarkSequencePoint(doc10, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, DelegateFlg)
ctor0IL.MarkSequencePoint(doc10, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, OpCodeSuppFlg)
ctor0IL.MarkSequencePoint(doc10, 21, 1, 21, 100)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stsfld, LeftOp)
ctor0IL.MarkSequencePoint(doc10, 22, 1, 22, 100)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stsfld, RightOp)
ctor0IL.MarkSequencePoint(doc10, 23, 1, 23, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(Attributes.Attribute).MakeArrayType()
Dim ProcessClassAttrs As MethodBuilder = Helpers.DefineMethod("ProcessClassAttrs", MethodAttributes.Public Or MethodAttributes.Static, GetType(TypeAttributes), typ0)
Dim ProcessClassAttrsIL As ILGenerator = ProcessClassAttrs.GetILGenerator()
Dim ProcessClassAttrsparam01 As ParameterBuilder = ProcessClassAttrs.DefineParameter(1, ParameterAttributes.None, "attrs")
ProcessClassAttrsIL.MarkSequencePoint(doc10, 26, 1, 26, 100)
Dim locbldr124 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(TypeAttributes))
locbldr124.SetLocalSymInfo("ta")
ProcessClassAttrsIL.MarkSequencePoint(doc10, 27, 1, 27, 100)
Dim locbldr125 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(TypeAttributes))
locbldr125.SetLocalSymInfo("temp")
ProcessClassAttrsIL.MarkSequencePoint(doc10, 29, 1, 29, 100)
Dim label0 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.MarkSequencePoint(doc10, 30, 1, 30, 100)
Dim label1 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.MarkSequencePoint(doc10, 31, 1, 31, 100)
Dim label2 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.MarkSequencePoint(doc10, 33, 1, 33, 100)
Dim locbldr126 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(System.Int32))
locbldr126.SetLocalSymInfo("len")
ProcessClassAttrsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Attributes.Attribute).MakeArrayType()
ProcessClassAttrsIL.Emit(OpCodes.Ldlen)
ProcessClassAttrsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Sub)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 2)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 34, 1, 34, 100)
Dim locbldr127 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(System.Int32))
locbldr127.SetLocalSymInfo("i")
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 3)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 35, 1, 35, 100)
Dim locbldr128 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(System.Boolean))
locbldr128.SetLocalSymInfo("b")
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 36, 1, 36, 100)
Dim locbldr129 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(System.Type))
locbldr129.SetLocalSymInfo("typ")
ProcessClassAttrsIL.MarkSequencePoint(doc10, 37, 1, 37, 100)
Dim locbldr130 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(Attributes.Attribute))
locbldr130.SetLocalSymInfo("curattr")
ProcessClassAttrsIL.Emit(OpCodes.Ldnull)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 6)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 38, 1, 38, 100)
Dim locbldr131 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(System.Boolean))
locbldr131.SetLocalSymInfo("fir")
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 40, 1, 40, 100)
ProcessClassAttrsIL.MarkLabel(label0)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 42, 1, 42, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Add)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 3)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 44, 1, 44, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Attributes.Attribute).MakeArrayType()
Typ02 = Typ
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ProcessClassAttrsIL.Emit(OpCodes.Ldelem, GetType(Attributes.Attribute).MakeArrayType().GetElementType())
Typ = GetType(Attributes.Attribute).MakeArrayType().GetElementType()
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 6)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 46, 1, 46, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.PublicAttr))
Dim typ1 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessClassAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ1))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ1).ReturnType
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 47, 1, 47, 100)
Dim typ2(-1) As Type
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessClassAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = Typ
ProcessClassAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ2))
Typ = Typ03.GetMethod("IsInstanceOfType", typ2).ReturnType
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 49, 1, 49, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa60 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru60 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont60 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru60)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa60)
ProcessClassAttrsIL.MarkLabel(tru60)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 50, 1, 50, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa61 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru61 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont61 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru61)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa61)
ProcessClassAttrsIL.MarkLabel(tru61)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 51, 1, 51, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 52, 1, 52, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont61)
ProcessClassAttrsIL.MarkLabel(fa61)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 53, 1, 53, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 54, 1, 54, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont61)
ProcessClassAttrsIL.MarkLabel(cont61)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 55, 1, 55, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa62 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru62 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont62 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru62)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa62)
ProcessClassAttrsIL.MarkLabel(tru62)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 56, 1, 56, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.And)
ProcessClassAttrsIL.Emit(OpCodes.Not)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 57, 1, 57, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 58, 1, 58, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont62)
ProcessClassAttrsIL.MarkLabel(fa62)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 59, 1, 59, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Or)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 60, 1, 60, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont62)
ProcessClassAttrsIL.MarkLabel(cont62)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 61, 1, 61, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, label2)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 62, 1, 62, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont60)
ProcessClassAttrsIL.MarkLabel(fa60)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont60)
ProcessClassAttrsIL.MarkLabel(cont60)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 64, 1, 64, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.PrivateAttr))
Dim typ3 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessClassAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ3))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ3).ReturnType
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 65, 1, 65, 100)
Dim typ4(-1) As Type
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessClassAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
ProcessClassAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ4))
Typ = Typ03.GetMethod("IsInstanceOfType", typ4).ReturnType
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 67, 1, 67, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa63 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru63 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont63 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru63)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa63)
ProcessClassAttrsIL.MarkLabel(tru63)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 68, 1, 68, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa64 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru64 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont64 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru64)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa64)
ProcessClassAttrsIL.MarkLabel(tru64)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 69, 1, 69, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 70, 1, 70, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont64)
ProcessClassAttrsIL.MarkLabel(fa64)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 71, 1, 71, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 72, 1, 72, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont64)
ProcessClassAttrsIL.MarkLabel(cont64)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 73, 1, 73, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa65 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru65 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont65 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru65)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa65)
ProcessClassAttrsIL.MarkLabel(tru65)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 74, 1, 74, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.And)
ProcessClassAttrsIL.Emit(OpCodes.Not)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 75, 1, 75, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 76, 1, 76, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont65)
ProcessClassAttrsIL.MarkLabel(fa65)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 77, 1, 77, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Or)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 78, 1, 78, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont65)
ProcessClassAttrsIL.MarkLabel(cont65)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 79, 1, 79, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, label2)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 80, 1, 80, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont63)
ProcessClassAttrsIL.MarkLabel(fa63)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont63)
ProcessClassAttrsIL.MarkLabel(cont63)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 82, 1, 82, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.AutoLayoutAttr))
Dim typ5 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessClassAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ5))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ5).ReturnType
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 83, 1, 83, 100)
Dim typ6(-1) As Type
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessClassAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = Typ
ProcessClassAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ6))
Typ = Typ03.GetMethod("IsInstanceOfType", typ6).ReturnType
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 85, 1, 85, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa66 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru66 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont66 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru66)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa66)
ProcessClassAttrsIL.MarkLabel(tru66)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 86, 1, 86, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 87, 1, 87, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa67 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru67 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont67 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru67)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa67)
ProcessClassAttrsIL.MarkLabel(tru67)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 88, 1, 88, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.And)
ProcessClassAttrsIL.Emit(OpCodes.Not)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 89, 1, 89, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 90, 1, 90, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont67)
ProcessClassAttrsIL.MarkLabel(fa67)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 91, 1, 91, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Or)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 92, 1, 92, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont67)
ProcessClassAttrsIL.MarkLabel(cont67)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 93, 1, 93, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, label2)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 94, 1, 94, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont66)
ProcessClassAttrsIL.MarkLabel(fa66)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont66)
ProcessClassAttrsIL.MarkLabel(cont66)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 96, 1, 96, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.AnsiClassAttr))
Dim typ7 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessClassAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ7))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ7).ReturnType
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 97, 1, 97, 100)
Dim typ8(-1) As Type
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessClassAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = Typ
ProcessClassAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ8))
Typ = Typ03.GetMethod("IsInstanceOfType", typ8).ReturnType
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 99, 1, 99, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa68 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru68 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont68 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru68)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa68)
ProcessClassAttrsIL.MarkLabel(tru68)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 100, 1, 100, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 101, 1, 101, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa69 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru69 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont69 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru69)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa69)
ProcessClassAttrsIL.MarkLabel(tru69)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 102, 1, 102, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.And)
ProcessClassAttrsIL.Emit(OpCodes.Not)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 103, 1, 103, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 104, 1, 104, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont69)
ProcessClassAttrsIL.MarkLabel(fa69)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 105, 1, 105, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Or)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 106, 1, 106, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont69)
ProcessClassAttrsIL.MarkLabel(cont69)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 107, 1, 107, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, label2)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 108, 1, 108, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont68)
ProcessClassAttrsIL.MarkLabel(fa68)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont68)
ProcessClassAttrsIL.MarkLabel(cont68)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 110, 1, 110, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.SealedAttr))
Dim typ9 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessClassAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ9))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ9).ReturnType
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 111, 1, 111, 100)
Dim typ10(-1) As Type
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessClassAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ10(UBound(typ10) + 1)
typ10(UBound(typ10)) = Typ
ProcessClassAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ10))
Typ = Typ03.GetMethod("IsInstanceOfType", typ10).ReturnType
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 113, 1, 113, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa70 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru70 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont70 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru70)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa70)
ProcessClassAttrsIL.MarkLabel(tru70)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 114, 1, 114, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(256))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 115, 1, 115, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa71 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru71 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont71 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru71)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa71)
ProcessClassAttrsIL.MarkLabel(tru71)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 116, 1, 116, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.And)
ProcessClassAttrsIL.Emit(OpCodes.Not)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 117, 1, 117, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 118, 1, 118, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont71)
ProcessClassAttrsIL.MarkLabel(fa71)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 119, 1, 119, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Or)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 120, 1, 120, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont71)
ProcessClassAttrsIL.MarkLabel(cont71)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 121, 1, 121, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, label2)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 122, 1, 122, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont70)
ProcessClassAttrsIL.MarkLabel(fa70)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont70)
ProcessClassAttrsIL.MarkLabel(cont70)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 125, 1, 125, 100)
ProcessClassAttrsIL.MarkLabel(label2)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 127, 1, 127, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa72 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru72 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont72 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru72)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa72)
ProcessClassAttrsIL.MarkLabel(tru72)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 128, 1, 128, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, label1)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 129, 1, 129, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont72)
ProcessClassAttrsIL.MarkLabel(fa72)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 130, 1, 130, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, label0)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 131, 1, 131, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont72)
ProcessClassAttrsIL.MarkLabel(cont72)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 134, 1, 134, 100)
ProcessClassAttrsIL.MarkLabel(label1)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 137, 1, 137, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.MarkSequencePoint(doc10, 138, 1, 138, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ret)
Dim typ11(-1) As Type
ReDim Preserve typ11(UBound(typ11) + 1)
typ11(UBound(typ11)) = GetType(Attributes.Attribute).MakeArrayType()
Dim ProcessMethodAttrs As MethodBuilder = Helpers.DefineMethod("ProcessMethodAttrs", MethodAttributes.Public Or MethodAttributes.Static, GetType(MethodAttributes), typ11)
Dim ProcessMethodAttrsIL As ILGenerator = ProcessMethodAttrs.GetILGenerator()
Dim ProcessMethodAttrsparam01 As ParameterBuilder = ProcessMethodAttrs.DefineParameter(1, ParameterAttributes.None, "attrs")
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 141, 1, 141, 100)
Dim locbldr132 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(MethodAttributes))
locbldr132.SetLocalSymInfo("ta")
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 142, 1, 142, 100)
Dim locbldr133 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(MethodAttributes))
locbldr133.SetLocalSymInfo("temp")
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 144, 1, 144, 100)
Dim label3 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 145, 1, 145, 100)
Dim label4 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 146, 1, 146, 100)
Dim label5 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 148, 1, 148, 100)
Dim locbldr134 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(System.Int32))
locbldr134.SetLocalSymInfo("len")
ProcessMethodAttrsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Attributes.Attribute).MakeArrayType()
ProcessMethodAttrsIL.Emit(OpCodes.Ldlen)
ProcessMethodAttrsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Sub)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 2)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 149, 1, 149, 100)
Dim locbldr135 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(System.Int32))
locbldr135.SetLocalSymInfo("i")
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 3)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 150, 1, 150, 100)
Dim locbldr136 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(System.Boolean))
locbldr136.SetLocalSymInfo("b")
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 151, 1, 151, 100)
Dim locbldr137 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(System.Type))
locbldr137.SetLocalSymInfo("typ")
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 152, 1, 152, 100)
Dim locbldr138 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(Attributes.Attribute))
locbldr138.SetLocalSymInfo("curattr")
ProcessMethodAttrsIL.Emit(OpCodes.Ldnull)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 6)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 153, 1, 153, 100)
Dim locbldr139 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(System.Boolean))
locbldr139.SetLocalSymInfo("fir")
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 155, 1, 155, 100)
ProcessMethodAttrsIL.MarkLabel(label3)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 157, 1, 157, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Add)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 3)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 159, 1, 159, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Attributes.Attribute).MakeArrayType()
Typ02 = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ProcessMethodAttrsIL.Emit(OpCodes.Ldelem, GetType(Attributes.Attribute).MakeArrayType().GetElementType())
Typ = GetType(Attributes.Attribute).MakeArrayType().GetElementType()
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 6)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 161, 1, 161, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.PublicAttr))
Dim typ12 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessMethodAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ12))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ12).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 162, 1, 162, 100)
Dim typ13(-1) As Type
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessMethodAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ13(UBound(typ13) + 1)
typ13(UBound(typ13)) = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ13))
Typ = Typ03.GetMethod("IsInstanceOfType", typ13).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 164, 1, 164, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa73 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru73 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont73 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru73)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa73)
ProcessMethodAttrsIL.MarkLabel(tru73)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 165, 1, 165, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, CInt(6))
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 166, 1, 166, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa74 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru74 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont74 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru74)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa74)
ProcessMethodAttrsIL.MarkLabel(tru74)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 167, 1, 167, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.And)
ProcessMethodAttrsIL.Emit(OpCodes.Not)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 168, 1, 168, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 169, 1, 169, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont74)
ProcessMethodAttrsIL.MarkLabel(fa74)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 170, 1, 170, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Or)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 171, 1, 171, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont74)
ProcessMethodAttrsIL.MarkLabel(cont74)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 172, 1, 172, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, label5)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 173, 1, 173, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont73)
ProcessMethodAttrsIL.MarkLabel(fa73)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont73)
ProcessMethodAttrsIL.MarkLabel(cont73)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 175, 1, 175, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.StaticAttr))
Dim typ14 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessMethodAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ14))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ14).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 176, 1, 176, 100)
Dim typ15(-1) As Type
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessMethodAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ15(UBound(typ15) + 1)
typ15(UBound(typ15)) = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ15))
Typ = Typ03.GetMethod("IsInstanceOfType", typ15).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 178, 1, 178, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa75 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru75 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont75 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru75)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa75)
ProcessMethodAttrsIL.MarkLabel(tru75)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 179, 1, 179, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, CInt(16))
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 180, 1, 180, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Stsfld, GetType(ILEmitter).GetField("StaticFlg"))
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 181, 1, 181, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa76 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru76 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont76 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru76)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa76)
ProcessMethodAttrsIL.MarkLabel(tru76)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 182, 1, 182, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.And)
ProcessMethodAttrsIL.Emit(OpCodes.Not)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 183, 1, 183, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 184, 1, 184, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont76)
ProcessMethodAttrsIL.MarkLabel(fa76)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 185, 1, 185, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Or)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 186, 1, 186, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont76)
ProcessMethodAttrsIL.MarkLabel(cont76)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 187, 1, 187, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, label5)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 188, 1, 188, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont75)
ProcessMethodAttrsIL.MarkLabel(fa75)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont75)
ProcessMethodAttrsIL.MarkLabel(cont75)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 190, 1, 190, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.SpecialNameAttr))
Dim typ16 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessMethodAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ16))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ16).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 191, 1, 191, 100)
Dim typ17(-1) As Type
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessMethodAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ17(UBound(typ17) + 1)
typ17(UBound(typ17)) = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ17))
Typ = Typ03.GetMethod("IsInstanceOfType", typ17).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 193, 1, 193, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa77 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru77 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont77 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru77)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa77)
ProcessMethodAttrsIL.MarkLabel(tru77)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 194, 1, 194, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, CInt(2048))
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 195, 1, 195, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa78 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru78 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont78 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru78)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa78)
ProcessMethodAttrsIL.MarkLabel(tru78)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 196, 1, 196, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.And)
ProcessMethodAttrsIL.Emit(OpCodes.Not)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 197, 1, 197, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 198, 1, 198, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont78)
ProcessMethodAttrsIL.MarkLabel(fa78)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 199, 1, 199, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Or)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 200, 1, 200, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont78)
ProcessMethodAttrsIL.MarkLabel(cont78)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 201, 1, 201, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, label5)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 202, 1, 202, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont77)
ProcessMethodAttrsIL.MarkLabel(fa77)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont77)
ProcessMethodAttrsIL.MarkLabel(cont77)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 205, 1, 205, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.VirtualAttr))
Dim typ18 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessMethodAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ18))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ18).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 206, 1, 206, 100)
Dim typ19(-1) As Type
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessMethodAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ19(UBound(typ19) + 1)
typ19(UBound(typ19)) = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ19))
Typ = Typ03.GetMethod("IsInstanceOfType", typ19).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 208, 1, 208, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa79 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru79 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont79 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru79)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa79)
ProcessMethodAttrsIL.MarkLabel(tru79)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 209, 1, 209, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, CInt(64))
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 210, 1, 210, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa80 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru80 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont80 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru80)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa80)
ProcessMethodAttrsIL.MarkLabel(tru80)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 211, 1, 211, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.And)
ProcessMethodAttrsIL.Emit(OpCodes.Not)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 212, 1, 212, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 213, 1, 213, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont80)
ProcessMethodAttrsIL.MarkLabel(fa80)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 214, 1, 214, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Or)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 215, 1, 215, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont80)
ProcessMethodAttrsIL.MarkLabel(cont80)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 216, 1, 216, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, label5)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 217, 1, 217, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont79)
ProcessMethodAttrsIL.MarkLabel(fa79)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont79)
ProcessMethodAttrsIL.MarkLabel(cont79)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 219, 1, 219, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.HideBySigAttr))
Dim typ20 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessMethodAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ20))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ20).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 220, 1, 220, 100)
Dim typ21(-1) As Type
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessMethodAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ21(UBound(typ21) + 1)
typ21(UBound(typ21)) = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ21))
Typ = Typ03.GetMethod("IsInstanceOfType", typ21).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 222, 1, 222, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa81 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru81 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont81 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru81)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa81)
ProcessMethodAttrsIL.MarkLabel(tru81)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 223, 1, 223, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, CInt(128))
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 224, 1, 224, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa82 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru82 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont82 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru82)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa82)
ProcessMethodAttrsIL.MarkLabel(tru82)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 225, 1, 225, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.And)
ProcessMethodAttrsIL.Emit(OpCodes.Not)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 226, 1, 226, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 227, 1, 227, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont82)
ProcessMethodAttrsIL.MarkLabel(fa82)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 228, 1, 228, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Or)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 229, 1, 229, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont82)
ProcessMethodAttrsIL.MarkLabel(cont82)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 230, 1, 230, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, label5)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 231, 1, 231, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont81)
ProcessMethodAttrsIL.MarkLabel(fa81)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont81)
ProcessMethodAttrsIL.MarkLabel(cont81)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 233, 1, 233, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.PrivateAttr))
Dim typ22 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessMethodAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ22))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ22).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 234, 1, 234, 100)
Dim typ23(-1) As Type
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessMethodAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ23(UBound(typ23) + 1)
typ23(UBound(typ23)) = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ23))
Typ = Typ03.GetMethod("IsInstanceOfType", typ23).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 236, 1, 236, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa83 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru83 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont83 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru83)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa83)
ProcessMethodAttrsIL.MarkLabel(tru83)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 237, 1, 237, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 238, 1, 238, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa84 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru84 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont84 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru84)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa84)
ProcessMethodAttrsIL.MarkLabel(tru84)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 239, 1, 239, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.And)
ProcessMethodAttrsIL.Emit(OpCodes.Not)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 240, 1, 240, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 241, 1, 241, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont84)
ProcessMethodAttrsIL.MarkLabel(fa84)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 242, 1, 242, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Or)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 243, 1, 243, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont84)
ProcessMethodAttrsIL.MarkLabel(cont84)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 244, 1, 244, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, label5)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 245, 1, 245, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont83)
ProcessMethodAttrsIL.MarkLabel(fa83)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont83)
ProcessMethodAttrsIL.MarkLabel(cont83)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 247, 1, 247, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.FamilyAttr))
Dim typ24 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessMethodAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ24))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ24).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 248, 1, 248, 100)
Dim typ25(-1) As Type
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessMethodAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ25(UBound(typ25) + 1)
typ25(UBound(typ25)) = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ25))
Typ = Typ03.GetMethod("IsInstanceOfType", typ25).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 250, 1, 250, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa85 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru85 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont85 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru85)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa85)
ProcessMethodAttrsIL.MarkLabel(tru85)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 251, 1, 251, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, CInt(4))
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 252, 1, 252, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa86 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru86 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont86 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru86)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa86)
ProcessMethodAttrsIL.MarkLabel(tru86)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 253, 1, 253, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.And)
ProcessMethodAttrsIL.Emit(OpCodes.Not)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 254, 1, 254, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 255, 1, 255, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont86)
ProcessMethodAttrsIL.MarkLabel(fa86)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 256, 1, 256, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Or)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 257, 1, 257, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont86)
ProcessMethodAttrsIL.MarkLabel(cont86)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 258, 1, 258, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, label5)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 259, 1, 259, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont85)
ProcessMethodAttrsIL.MarkLabel(fa85)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont85)
ProcessMethodAttrsIL.MarkLabel(cont85)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 261, 1, 261, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.FinalAttr))
Dim typ26 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessMethodAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ26))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ26).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 262, 1, 262, 100)
Dim typ27(-1) As Type
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessMethodAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ27(UBound(typ27) + 1)
typ27(UBound(typ27)) = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ27))
Typ = Typ03.GetMethod("IsInstanceOfType", typ27).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 264, 1, 264, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa87 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru87 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont87 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru87)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa87)
ProcessMethodAttrsIL.MarkLabel(tru87)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 265, 1, 265, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, CInt(32))
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 266, 1, 266, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa88 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru88 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont88 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru88)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa88)
ProcessMethodAttrsIL.MarkLabel(tru88)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 267, 1, 267, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.And)
ProcessMethodAttrsIL.Emit(OpCodes.Not)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 268, 1, 268, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 269, 1, 269, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont88)
ProcessMethodAttrsIL.MarkLabel(fa88)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 270, 1, 270, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Or)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 271, 1, 271, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont88)
ProcessMethodAttrsIL.MarkLabel(cont88)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 272, 1, 272, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, label5)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 273, 1, 273, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont87)
ProcessMethodAttrsIL.MarkLabel(fa87)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont87)
ProcessMethodAttrsIL.MarkLabel(cont87)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 275, 1, 275, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.AssemblyAttr))
Dim typ28 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessMethodAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ28))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ28).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 276, 1, 276, 100)
Dim typ29(-1) As Type
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessMethodAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ29(UBound(typ29) + 1)
typ29(UBound(typ29)) = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ29))
Typ = Typ03.GetMethod("IsInstanceOfType", typ29).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 278, 1, 278, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa89 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru89 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont89 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru89)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa89)
ProcessMethodAttrsIL.MarkLabel(tru89)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 279, 1, 279, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 280, 1, 280, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa90 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru90 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont90 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru90)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa90)
ProcessMethodAttrsIL.MarkLabel(tru90)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 281, 1, 281, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.And)
ProcessMethodAttrsIL.Emit(OpCodes.Not)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 282, 1, 282, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 283, 1, 283, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont90)
ProcessMethodAttrsIL.MarkLabel(fa90)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 284, 1, 284, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Or)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 285, 1, 285, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont90)
ProcessMethodAttrsIL.MarkLabel(cont90)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 286, 1, 286, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, label5)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 287, 1, 287, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont89)
ProcessMethodAttrsIL.MarkLabel(fa89)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont89)
ProcessMethodAttrsIL.MarkLabel(cont89)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 289, 1, 289, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.FamORAssemAttr))
Dim typ30 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessMethodAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ30))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ30).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 290, 1, 290, 100)
Dim typ31(-1) As Type
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessMethodAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ31(UBound(typ31) + 1)
typ31(UBound(typ31)) = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ31))
Typ = Typ03.GetMethod("IsInstanceOfType", typ31).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 292, 1, 292, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa91 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru91 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont91 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru91)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa91)
ProcessMethodAttrsIL.MarkLabel(tru91)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 293, 1, 293, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, CInt(5))
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 294, 1, 294, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa92 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru92 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont92 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru92)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa92)
ProcessMethodAttrsIL.MarkLabel(tru92)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 295, 1, 295, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.And)
ProcessMethodAttrsIL.Emit(OpCodes.Not)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 296, 1, 296, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 297, 1, 297, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont92)
ProcessMethodAttrsIL.MarkLabel(fa92)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 298, 1, 298, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Or)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 299, 1, 299, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont92)
ProcessMethodAttrsIL.MarkLabel(cont92)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 300, 1, 300, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, label5)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 301, 1, 301, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont91)
ProcessMethodAttrsIL.MarkLabel(fa91)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont91)
ProcessMethodAttrsIL.MarkLabel(cont91)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 303, 1, 303, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.FamANDAssemAttr))
Dim typ32 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessMethodAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ32))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ32).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 304, 1, 304, 100)
Dim typ33(-1) As Type
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessMethodAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ33(UBound(typ33) + 1)
typ33(UBound(typ33)) = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ33))
Typ = Typ03.GetMethod("IsInstanceOfType", typ33).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 306, 1, 306, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa93 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru93 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont93 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru93)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa93)
ProcessMethodAttrsIL.MarkLabel(tru93)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 307, 1, 307, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 308, 1, 308, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa94 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru94 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont94 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru94)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa94)
ProcessMethodAttrsIL.MarkLabel(tru94)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 309, 1, 309, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.And)
ProcessMethodAttrsIL.Emit(OpCodes.Not)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 310, 1, 310, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 311, 1, 311, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont94)
ProcessMethodAttrsIL.MarkLabel(fa94)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 312, 1, 312, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Or)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 313, 1, 313, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont94)
ProcessMethodAttrsIL.MarkLabel(cont94)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 314, 1, 314, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, label5)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 315, 1, 315, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont93)
ProcessMethodAttrsIL.MarkLabel(fa93)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont93)
ProcessMethodAttrsIL.MarkLabel(cont93)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 318, 1, 318, 100)
ProcessMethodAttrsIL.MarkLabel(label5)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 320, 1, 320, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa95 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru95 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont95 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru95)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa95)
ProcessMethodAttrsIL.MarkLabel(tru95)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 321, 1, 321, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, label4)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 322, 1, 322, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont95)
ProcessMethodAttrsIL.MarkLabel(fa95)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 323, 1, 323, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, label3)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 324, 1, 324, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont95)
ProcessMethodAttrsIL.MarkLabel(cont95)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 327, 1, 327, 100)
ProcessMethodAttrsIL.MarkLabel(label4)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 330, 1, 330, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.MarkSequencePoint(doc10, 331, 1, 331, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ret)
Dim typ34(-1) As Type
ReDim Preserve typ34(UBound(typ34) + 1)
typ34(UBound(typ34)) = GetType(Attributes.Attribute).MakeArrayType()
Dim ProcessFieldAttrs As MethodBuilder = Helpers.DefineMethod("ProcessFieldAttrs", MethodAttributes.Public Or MethodAttributes.Static, GetType(FieldAttributes), typ34)
Dim ProcessFieldAttrsIL As ILGenerator = ProcessFieldAttrs.GetILGenerator()
Dim ProcessFieldAttrsparam01 As ParameterBuilder = ProcessFieldAttrs.DefineParameter(1, ParameterAttributes.None, "attrs")
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 335, 1, 335, 100)
Dim locbldr140 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(FieldAttributes))
locbldr140.SetLocalSymInfo("ta")
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 336, 1, 336, 100)
Dim locbldr141 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(FieldAttributes))
locbldr141.SetLocalSymInfo("temp")
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 338, 1, 338, 100)
Dim label6 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 339, 1, 339, 100)
Dim label7 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 340, 1, 340, 100)
Dim label8 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 342, 1, 342, 100)
Dim locbldr142 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(System.Int32))
locbldr142.SetLocalSymInfo("len")
ProcessFieldAttrsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Attributes.Attribute).MakeArrayType()
ProcessFieldAttrsIL.Emit(OpCodes.Ldlen)
ProcessFieldAttrsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Sub)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 2)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 343, 1, 343, 100)
Dim locbldr143 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(System.Int32))
locbldr143.SetLocalSymInfo("i")
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 3)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 344, 1, 344, 100)
Dim locbldr144 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(System.Boolean))
locbldr144.SetLocalSymInfo("b")
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 345, 1, 345, 100)
Dim locbldr145 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(System.Type))
locbldr145.SetLocalSymInfo("typ")
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 346, 1, 346, 100)
Dim locbldr146 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(Attributes.Attribute))
locbldr146.SetLocalSymInfo("curattr")
ProcessFieldAttrsIL.Emit(OpCodes.Ldnull)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 6)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 347, 1, 347, 100)
Dim locbldr147 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(System.Boolean))
locbldr147.SetLocalSymInfo("fir")
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 349, 1, 349, 100)
ProcessFieldAttrsIL.MarkLabel(label6)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 351, 1, 351, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Add)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 3)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 353, 1, 353, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Attributes.Attribute).MakeArrayType()
Typ02 = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ProcessFieldAttrsIL.Emit(OpCodes.Ldelem, GetType(Attributes.Attribute).MakeArrayType().GetElementType())
Typ = GetType(Attributes.Attribute).MakeArrayType().GetElementType()
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 6)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 355, 1, 355, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.PublicAttr))
Dim typ35 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessFieldAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ35))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ35).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 356, 1, 356, 100)
Dim typ36(-1) As Type
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessFieldAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ36(UBound(typ36) + 1)
typ36(UBound(typ36)) = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ36))
Typ = Typ03.GetMethod("IsInstanceOfType", typ36).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 358, 1, 358, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa96 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru96 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont96 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru96)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa96)
ProcessFieldAttrsIL.MarkLabel(tru96)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 359, 1, 359, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(6))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 360, 1, 360, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa97 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru97 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont97 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru97)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa97)
ProcessFieldAttrsIL.MarkLabel(tru97)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 361, 1, 361, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.And)
ProcessFieldAttrsIL.Emit(OpCodes.Not)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 362, 1, 362, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 363, 1, 363, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont97)
ProcessFieldAttrsIL.MarkLabel(fa97)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 364, 1, 364, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Or)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 365, 1, 365, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont97)
ProcessFieldAttrsIL.MarkLabel(cont97)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 366, 1, 366, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, label8)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 367, 1, 367, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont96)
ProcessFieldAttrsIL.MarkLabel(fa96)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont96)
ProcessFieldAttrsIL.MarkLabel(cont96)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 369, 1, 369, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.StaticAttr))
Dim typ37 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessFieldAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ37))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ37).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 370, 1, 370, 100)
Dim typ38(-1) As Type
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessFieldAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ38(UBound(typ38) + 1)
typ38(UBound(typ38)) = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ38))
Typ = Typ03.GetMethod("IsInstanceOfType", typ38).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 372, 1, 372, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa98 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru98 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont98 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru98)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa98)
ProcessFieldAttrsIL.MarkLabel(tru98)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 373, 1, 373, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(16))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 374, 1, 374, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa99 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru99 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont99 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru99)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa99)
ProcessFieldAttrsIL.MarkLabel(tru99)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 375, 1, 375, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.And)
ProcessFieldAttrsIL.Emit(OpCodes.Not)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 376, 1, 376, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 377, 1, 377, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont99)
ProcessFieldAttrsIL.MarkLabel(fa99)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 378, 1, 378, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Or)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 379, 1, 379, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont99)
ProcessFieldAttrsIL.MarkLabel(cont99)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 380, 1, 380, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, label8)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 381, 1, 381, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont98)
ProcessFieldAttrsIL.MarkLabel(fa98)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont98)
ProcessFieldAttrsIL.MarkLabel(cont98)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 383, 1, 383, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.InitOnlyAttr))
Dim typ39 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessFieldAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ39))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ39).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 384, 1, 384, 100)
Dim typ40(-1) As Type
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessFieldAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ40(UBound(typ40) + 1)
typ40(UBound(typ40)) = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ40))
Typ = Typ03.GetMethod("IsInstanceOfType", typ40).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 386, 1, 386, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa100 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru100 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont100 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa100)
ProcessFieldAttrsIL.MarkLabel(tru100)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 387, 1, 387, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(32))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 388, 1, 388, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa101 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru101 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont101 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru101)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa101)
ProcessFieldAttrsIL.MarkLabel(tru101)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 389, 1, 389, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.And)
ProcessFieldAttrsIL.Emit(OpCodes.Not)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 390, 1, 390, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 391, 1, 391, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont101)
ProcessFieldAttrsIL.MarkLabel(fa101)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 392, 1, 392, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Or)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 393, 1, 393, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont101)
ProcessFieldAttrsIL.MarkLabel(cont101)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 394, 1, 394, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, label8)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 395, 1, 395, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont100)
ProcessFieldAttrsIL.MarkLabel(fa100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont100)
ProcessFieldAttrsIL.MarkLabel(cont100)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 397, 1, 397, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.PrivateAttr))
Dim typ41 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessFieldAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ41))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ41).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 398, 1, 398, 100)
Dim typ42(-1) As Type
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessFieldAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ42(UBound(typ42) + 1)
typ42(UBound(typ42)) = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ42))
Typ = Typ03.GetMethod("IsInstanceOfType", typ42).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 400, 1, 400, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa102 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru102 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont102 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru102)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa102)
ProcessFieldAttrsIL.MarkLabel(tru102)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 401, 1, 401, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 402, 1, 402, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa103 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru103 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont103 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru103)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa103)
ProcessFieldAttrsIL.MarkLabel(tru103)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 403, 1, 403, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.And)
ProcessFieldAttrsIL.Emit(OpCodes.Not)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 404, 1, 404, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 405, 1, 405, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont103)
ProcessFieldAttrsIL.MarkLabel(fa103)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 406, 1, 406, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Or)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 407, 1, 407, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont103)
ProcessFieldAttrsIL.MarkLabel(cont103)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 408, 1, 408, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, label8)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 409, 1, 409, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont102)
ProcessFieldAttrsIL.MarkLabel(fa102)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont102)
ProcessFieldAttrsIL.MarkLabel(cont102)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 411, 1, 411, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.FamilyAttr))
Dim typ43 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessFieldAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ43))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ43).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 412, 1, 412, 100)
Dim typ44(-1) As Type
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessFieldAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ44(UBound(typ44) + 1)
typ44(UBound(typ44)) = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ44))
Typ = Typ03.GetMethod("IsInstanceOfType", typ44).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 414, 1, 414, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa104 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru104 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont104 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru104)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa104)
ProcessFieldAttrsIL.MarkLabel(tru104)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 415, 1, 415, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(4))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 416, 1, 416, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa105 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru105 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont105 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru105)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa105)
ProcessFieldAttrsIL.MarkLabel(tru105)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 417, 1, 417, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.And)
ProcessFieldAttrsIL.Emit(OpCodes.Not)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 418, 1, 418, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 419, 1, 419, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont105)
ProcessFieldAttrsIL.MarkLabel(fa105)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 420, 1, 420, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Or)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 421, 1, 421, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont105)
ProcessFieldAttrsIL.MarkLabel(cont105)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 422, 1, 422, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, label8)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 423, 1, 423, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont104)
ProcessFieldAttrsIL.MarkLabel(fa104)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont104)
ProcessFieldAttrsIL.MarkLabel(cont104)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 426, 1, 426, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.AssemblyAttr))
Dim typ45 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessFieldAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ45))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ45).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 427, 1, 427, 100)
Dim typ46(-1) As Type
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessFieldAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ46(UBound(typ46) + 1)
typ46(UBound(typ46)) = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ46))
Typ = Typ03.GetMethod("IsInstanceOfType", typ46).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 429, 1, 429, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa106 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru106 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont106 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru106)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa106)
ProcessFieldAttrsIL.MarkLabel(tru106)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 430, 1, 430, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 431, 1, 431, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa107 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru107 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont107 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru107)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa107)
ProcessFieldAttrsIL.MarkLabel(tru107)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 432, 1, 432, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.And)
ProcessFieldAttrsIL.Emit(OpCodes.Not)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 433, 1, 433, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 434, 1, 434, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont107)
ProcessFieldAttrsIL.MarkLabel(fa107)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 435, 1, 435, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Or)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 436, 1, 436, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont107)
ProcessFieldAttrsIL.MarkLabel(cont107)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 437, 1, 437, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, label8)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 438, 1, 438, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont106)
ProcessFieldAttrsIL.MarkLabel(fa106)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont106)
ProcessFieldAttrsIL.MarkLabel(cont106)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 440, 1, 440, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.FamORAssemAttr))
Dim typ47 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessFieldAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ47))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ47).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 441, 1, 441, 100)
Dim typ48(-1) As Type
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessFieldAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ48(UBound(typ48) + 1)
typ48(UBound(typ48)) = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ48))
Typ = Typ03.GetMethod("IsInstanceOfType", typ48).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 443, 1, 443, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa108 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru108 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont108 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru108)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa108)
ProcessFieldAttrsIL.MarkLabel(tru108)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 444, 1, 444, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(5))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 445, 1, 445, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa109 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru109 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont109 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru109)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa109)
ProcessFieldAttrsIL.MarkLabel(tru109)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 446, 1, 446, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.And)
ProcessFieldAttrsIL.Emit(OpCodes.Not)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 447, 1, 447, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 448, 1, 448, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont109)
ProcessFieldAttrsIL.MarkLabel(fa109)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 449, 1, 449, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Or)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 450, 1, 450, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont109)
ProcessFieldAttrsIL.MarkLabel(cont109)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 451, 1, 451, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, label8)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 452, 1, 452, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont108)
ProcessFieldAttrsIL.MarkLabel(fa108)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont108)
ProcessFieldAttrsIL.MarkLabel(cont108)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 454, 1, 454, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.FamANDAssemAttr))
Dim typ49 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessFieldAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ49))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ49).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 455, 1, 455, 100)
Dim typ50(-1) As Type
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessFieldAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ50(UBound(typ50) + 1)
typ50(UBound(typ50)) = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ50))
Typ = Typ03.GetMethod("IsInstanceOfType", typ50).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 457, 1, 457, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa110 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru110 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont110 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru110)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa110)
ProcessFieldAttrsIL.MarkLabel(tru110)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 458, 1, 458, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 459, 1, 459, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa111 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru111 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont111 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru111)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa111)
ProcessFieldAttrsIL.MarkLabel(tru111)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 460, 1, 460, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.And)
ProcessFieldAttrsIL.Emit(OpCodes.Not)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 461, 1, 461, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 462, 1, 462, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont111)
ProcessFieldAttrsIL.MarkLabel(fa111)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 463, 1, 463, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Or)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 464, 1, 464, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont111)
ProcessFieldAttrsIL.MarkLabel(cont111)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 465, 1, 465, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, label8)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 466, 1, 466, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont110)
ProcessFieldAttrsIL.MarkLabel(fa110)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont110)
ProcessFieldAttrsIL.MarkLabel(cont110)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 469, 1, 469, 100)
ProcessFieldAttrsIL.MarkLabel(label8)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 471, 1, 471, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa112 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru112 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont112 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru112)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa112)
ProcessFieldAttrsIL.MarkLabel(tru112)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 472, 1, 472, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, label7)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 473, 1, 473, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont112)
ProcessFieldAttrsIL.MarkLabel(fa112)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 474, 1, 474, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, label6)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 475, 1, 475, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont112)
ProcessFieldAttrsIL.MarkLabel(cont112)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 478, 1, 478, 100)
ProcessFieldAttrsIL.MarkLabel(label7)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 481, 1, 481, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.MarkSequencePoint(doc10, 482, 1, 482, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ret)
Dim typ51(-1) As Type
ReDim Preserve typ51(UBound(typ51) + 1)
typ51(UBound(typ51)) = GetType(TypeTok)
Dim EvalTTok As MethodBuilder = Helpers.DefineMethod("EvalTTok", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ51)
Dim EvalTTokIL As ILGenerator = EvalTTok.GetILGenerator()
Dim EvalTTokparam01 As ParameterBuilder = EvalTTok.DefineParameter(1, ParameterAttributes.None, "tt")
EvalTTokIL.MarkSequencePoint(doc10, 489, 1, 489, 100)
Dim locbldr148 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.Type).MakeArrayType())
locbldr148.SetLocalSymInfo("tarr")
EvalTTokIL.MarkSequencePoint(doc10, 490, 1, 490, 100)
Dim locbldr149 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.Type))
locbldr149.SetLocalSymInfo("typ")
EvalTTokIL.MarkSequencePoint(doc10, 491, 1, 491, 100)
Dim locbldr150 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.Type))
locbldr150.SetLocalSymInfo("temptyp")
EvalTTokIL.MarkSequencePoint(doc10, 492, 1, 492, 100)
Dim locbldr151 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(GenericTypeTok))
locbldr151.SetLocalSymInfo("gtt")
EvalTTokIL.MarkSequencePoint(doc10, 493, 1, 493, 100)
Dim locbldr152 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(TypeTok).MakeArrayType())
locbldr152.SetLocalSymInfo("pttoks")
EvalTTokIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Conv_U)
EvalTTokIL.Emit(OpCodes.Newarr, GetType(TypeTok))
EvalTTokIL.Emit(OpCodes.Stloc, 4)
EvalTTokIL.MarkSequencePoint(doc10, 494, 1, 494, 100)
Dim locbldr153 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(TypeTok))
locbldr153.SetLocalSymInfo("curpttok")
EvalTTokIL.Emit(OpCodes.Newobj, GetType(TypeToK).GetConstructor(Type.EmptyTypes))
EvalTTokIL.Emit(OpCodes.Stloc, 5)
EvalTTokIL.MarkSequencePoint(doc10, 495, 1, 495, 100)
Dim locbldr154 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.Int32))
locbldr154.SetLocalSymInfo("i")
EvalTTokIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Stloc, 6)
EvalTTokIL.MarkSequencePoint(doc10, 496, 1, 496, 100)
Dim locbldr155 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.Int32))
locbldr155.SetLocalSymInfo("len")
EvalTTokIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Stloc, 7)
EvalTTokIL.MarkSequencePoint(doc10, 497, 1, 497, 100)
Dim locbldr156 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.Int32))
locbldr156.SetLocalSymInfo("n")
EvalTTokIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Stloc, 8)
EvalTTokIL.MarkSequencePoint(doc10, 498, 1, 498, 100)
Dim locbldr157 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.Int32))
locbldr157.SetLocalSymInfo("comp")
EvalTTokIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Stloc, 9)
EvalTTokIL.MarkSequencePoint(doc10, 499, 1, 499, 100)
Dim locbldr158 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.String))
locbldr158.SetLocalSymInfo("tstr")
EvalTTokIL.Emit(OpCodes.Ldstr, " ")
Typ = GetType(System.String)
EvalTTokIL.Emit(OpCodes.Stloc, 10)
EvalTTokIL.MarkSequencePoint(doc10, 501, 1, 501, 100)
Dim locbldr159 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.Type))
locbldr159.SetLocalSymInfo("ttyp")
EvalTTokIL.Emit(OpCodes.Ldtoken, GetType(GenericTypeTok))
Dim typ52 As Type() = {GetType(System.RuntimeTypeHandle)}
EvalTTokIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ52))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ52).ReturnType
EvalTTokIL.Emit(OpCodes.Stloc, 11)
EvalTTokIL.MarkSequencePoint(doc10, 502, 1, 502, 100)
Dim locbldr160 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.Boolean))
locbldr160.SetLocalSymInfo("b")
Dim typ53(-1) As Type
EvalTTokIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Type)
Typ03 = Typ
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ53(UBound(typ53) + 1)
typ53(UBound(typ53)) = Typ
EvalTTokIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ53))
Typ = Typ03.GetMethod("IsInstanceOfType", typ53).ReturnType
EvalTTokIL.Emit(OpCodes.Stloc, 12)
EvalTTokIL.MarkSequencePoint(doc10, 504, 1, 504, 100)
Dim label9 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
EvalTTokIL.MarkSequencePoint(doc10, 505, 1, 505, 100)
Dim label10 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
EvalTTokIL.MarkSequencePoint(doc10, 507, 1, 507, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(System.Boolean)
EvalTTokIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa113 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
Dim tru113 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
Dim cont113 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
EvalTTokIL.Emit(OpCodes.Beq, fa113)
EvalTTokIL.Emit(OpCodes.Br, tru113)
EvalTTokIL.MarkLabel(tru113)
EvalTTokIL.MarkSequencePoint(doc10, 509, 1, 509, 100)
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Stloc, 3)
EvalTTokIL.MarkSequencePoint(doc10, 510, 1, 510, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(GenericTypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(GenericTypeTok).GetField("Params"))
Typ = GetType(GenericTypeTok).GetField("Params").FieldType
EvalTTokIL.Emit(OpCodes.Stloc, 4)
EvalTTokIL.MarkSequencePoint(doc10, 511, 1, 511, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(TypeTok).MakeArrayType()
EvalTTokIL.Emit(OpCodes.Ldlen)
EvalTTokIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Stloc, 8)
EvalTTokIL.MarkSequencePoint(doc10, 512, 1, 512, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Sub)
EvalTTokIL.Emit(OpCodes.Stloc, 7)
EvalTTokIL.MarkSequencePoint(doc10, 514, 1, 514, 100)
EvalTTokIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
EvalTTokIL.Emit(OpCodes.Stloc, 0)
EvalTTokIL.MarkSequencePoint(doc10, 515, 1, 515, 100)
EvalTTokIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Conv_U)
EvalTTokIL.Emit(OpCodes.Newarr, GetType(System.Type))
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("TypArr"))
EvalTTokIL.MarkSequencePoint(doc10, 517, 1, 517, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(GenericTypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(GenericTypeTok).GetField("IsArray"))
Typ = GetType(GenericTypeTok).GetField("IsArray").FieldType
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeArr"))
EvalTTokIL.MarkSequencePoint(doc10, 518, 1, 518, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(GenericTypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(GenericTypeTok).GetField("IsByRef"))
Typ = GetType(GenericTypeTok).GetField("IsByRef").FieldType
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeRef"))
EvalTTokIL.MarkSequencePoint(doc10, 519, 1, 519, 100)
Dim typ54(-1) As Type
EvalTTokIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(GenericTypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(GenericTypeTok).GetField("Value"))
Typ = GetType(GenericTypeTok).GetField("Value").FieldType
ReDim Preserve typ54(UBound(typ54) + 1)
typ54(UBound(typ54)) = Typ
EvalTTokIL.Emit(OpCodes.Ldstr, "`")
Typ = GetType(System.String)
ReDim Preserve typ54(UBound(typ54) + 1)
typ54(UBound(typ54)) = Typ
EvalTTokIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Int32)
Dim typ55 As Type() = {Typ}
EvalTTokIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToString", typ55))
Typ = GetType(System.Convert).GetMethod("ToString", typ55).ReturnType
ReDim Preserve typ54(UBound(typ54) + 1)
typ54(UBound(typ54)) = Typ
EvalTTokIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ54))
Typ = GetType(String).GetMethod("Concat", typ54).ReturnType
EvalTTokIL.Emit(OpCodes.Stloc, 10)
EvalTTokIL.MarkSequencePoint(doc10, 520, 1, 520, 100)
Dim typ56(-1) As Type
EvalTTokIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(System.String)
ReDim Preserve typ56(UBound(typ56) + 1)
typ56(UBound(typ56)) = Typ
EvalTTokIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadClass", typ56))
Typ = GetType(Loader).GetMethod("LoadClass", typ56).ReturnType
EvalTTokIL.Emit(OpCodes.Stloc, 1)
EvalTTokIL.MarkSequencePoint(doc10, 522, 1, 522, 100)
EvalTTokIL.MarkLabel(label10)
EvalTTokIL.MarkSequencePoint(doc10, 524, 1, 524, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Add)
EvalTTokIL.Emit(OpCodes.Stloc, 6)
EvalTTokIL.MarkSequencePoint(doc10, 526, 1, 526, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(TypeTok).MakeArrayType()
Typ02 = Typ
EvalTTokIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EvalTTokIL.Emit(OpCodes.Ldelem, GetType(TypeTok).MakeArrayType().GetElementType())
Typ = GetType(TypeTok).MakeArrayType().GetElementType()
EvalTTokIL.Emit(OpCodes.Stloc, 5)
EvalTTokIL.MarkSequencePoint(doc10, 527, 1, 527, 100)
Dim typ57(-1) As Type
EvalTTokIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(TypeTok)
ReDim Preserve typ57(UBound(typ57) + 1)
typ57(UBound(typ57)) = Typ
EvalTTokIL.Emit(OpCodes.Call, EvalTTok)
Typ = EvalTTok.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EvalTTokIL.Emit(OpCodes.Pop)
End If
EvalTTokIL.MarkSequencePoint(doc10, 528, 1, 528, 100)
EvalTTokIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type01"))
Typ = GetType(AsmFactory).GetField("Type01").FieldType
EvalTTokIL.Emit(OpCodes.Stloc, 2)
EvalTTokIL.MarkSequencePoint(doc10, 529, 1, 529, 100)
Dim typ58(-1) As Type
EvalTTokIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ58(UBound(typ58) + 1)
typ58(UBound(typ58)) = Typ
EvalTTokIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("AddTyp", typ58))
Typ = GetType(AsmFactory).GetMethod("AddTyp", typ58).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EvalTTokIL.Emit(OpCodes.Pop)
End If
EvalTTokIL.MarkSequencePoint(doc10, 531, 1, 531, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
Dim fa114 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
Dim tru114 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
Dim cont114 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
EvalTTokIL.Emit(OpCodes.Beq, tru114)
EvalTTokIL.Emit(OpCodes.Br, fa114)
EvalTTokIL.MarkLabel(tru114)
EvalTTokIL.MarkSequencePoint(doc10, 532, 1, 532, 100)
EvalTTokIL.Emit(OpCodes.Br, label9)
EvalTTokIL.MarkSequencePoint(doc10, 533, 1, 533, 100)
EvalTTokIL.Emit(OpCodes.Br, cont114)
EvalTTokIL.MarkLabel(fa114)
EvalTTokIL.MarkSequencePoint(doc10, 534, 1, 534, 100)
EvalTTokIL.Emit(OpCodes.Br, label10)
EvalTTokIL.MarkSequencePoint(doc10, 535, 1, 535, 100)
EvalTTokIL.Emit(OpCodes.Br, cont114)
EvalTTokIL.MarkLabel(cont114)
EvalTTokIL.MarkSequencePoint(doc10, 537, 1, 537, 100)
EvalTTokIL.MarkLabel(label9)
EvalTTokIL.MarkSequencePoint(doc10, 540, 1, 540, 100)
Dim typ59(-1) As Type
EvalTTokIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EvalTTokIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ReDim Preserve typ59(UBound(typ59) + 1)
typ59(UBound(typ59)) = Typ
EvalTTokIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("MakeGenericType", typ59))
Typ = Typ03.GetMethod("MakeGenericType", typ59).ReturnType
EvalTTokIL.Emit(OpCodes.Stloc, 1)
EvalTTokIL.MarkSequencePoint(doc10, 541, 1, 541, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type).MakeArrayType()
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("TypArr"))
EvalTTokIL.MarkSequencePoint(doc10, 543, 1, 543, 100)
EvalTTokIL.Emit(OpCodes.Br, cont113)
EvalTTokIL.MarkLabel(fa113)
EvalTTokIL.MarkSequencePoint(doc10, 545, 1, 545, 100)
Dim label11 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
EvalTTokIL.MarkSequencePoint(doc10, 547, 1, 547, 100)
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("RefTyp"))
Typ = GetType(TypeTok).GetField("RefTyp").FieldType
EvalTTokIL.Emit(OpCodes.Ldnull)
Dim fa115 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
Dim tru115 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
Dim cont115 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
EvalTTokIL.Emit(OpCodes.Beq, tru115)
EvalTTokIL.Emit(OpCodes.Br, fa115)
EvalTTokIL.MarkLabel(tru115)
EvalTTokIL.MarkSequencePoint(doc10, 548, 1, 548, 100)
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("IsArray"))
Typ = GetType(TypeTok).GetField("IsArray").FieldType
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeArr"))
EvalTTokIL.MarkSequencePoint(doc10, 549, 1, 549, 100)
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("IsByRef"))
Typ = GetType(TypeTok).GetField("IsByRef").FieldType
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeRef"))
EvalTTokIL.MarkSequencePoint(doc10, 550, 1, 550, 100)
Dim typ60(-1) As Type
EvalTTokIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypName"))
Typ = GetType(AsmFactory).GetField("CurnTypName").FieldType
ReDim Preserve typ60(UBound(typ60) + 1)
typ60(UBound(typ60)) = Typ
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("Value"))
Typ = GetType(TypeTok).GetField("Value").FieldType
ReDim Preserve typ60(UBound(typ60) + 1)
typ60(UBound(typ60)) = Typ
EvalTTokIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ60))
Typ = GetType(String).GetMethod("Compare", typ60).ReturnType
EvalTTokIL.Emit(OpCodes.Stloc, 9)
EvalTTokIL.MarkSequencePoint(doc10, 551, 1, 551, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa116 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
Dim tru116 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
Dim cont116 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
EvalTTokIL.Emit(OpCodes.Beq, tru116)
EvalTTokIL.Emit(OpCodes.Br, fa116)
EvalTTokIL.MarkLabel(tru116)
EvalTTokIL.MarkSequencePoint(doc10, 552, 1, 552, 100)
EvalTTokIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
EvalTTokIL.Emit(OpCodes.Stloc, 1)
EvalTTokIL.MarkSequencePoint(doc10, 553, 1, 553, 100)
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("IsArray"))
Typ = GetType(TypeTok).GetField("IsArray").FieldType
EvalTTokIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa117 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
Dim tru117 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
Dim cont117 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
EvalTTokIL.Emit(OpCodes.Beq, tru117)
EvalTTokIL.Emit(OpCodes.Br, fa117)
EvalTTokIL.MarkLabel(tru117)
EvalTTokIL.MarkSequencePoint(doc10, 554, 1, 554, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EvalTTokIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("MakeArrayType", Type.EmptyTypes))
Typ = Typ03.GetMethod("MakeArrayType", Type.EmptyTypes).ReturnType
EvalTTokIL.Emit(OpCodes.Stloc, 1)
EvalTTokIL.MarkSequencePoint(doc10, 555, 1, 555, 100)
EvalTTokIL.Emit(OpCodes.Br, cont117)
EvalTTokIL.MarkLabel(fa117)
EvalTTokIL.Emit(OpCodes.Br, cont117)
EvalTTokIL.MarkLabel(cont117)
EvalTTokIL.MarkSequencePoint(doc10, 556, 1, 556, 100)
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("IsByRef"))
Typ = GetType(TypeTok).GetField("IsByRef").FieldType
EvalTTokIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa118 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
Dim tru118 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
Dim cont118 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
EvalTTokIL.Emit(OpCodes.Beq, tru118)
EvalTTokIL.Emit(OpCodes.Br, fa118)
EvalTTokIL.MarkLabel(tru118)
EvalTTokIL.MarkSequencePoint(doc10, 557, 1, 557, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EvalTTokIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("MakeByRefType", Type.EmptyTypes))
Typ = Typ03.GetMethod("MakeByRefType", Type.EmptyTypes).ReturnType
EvalTTokIL.Emit(OpCodes.Stloc, 1)
EvalTTokIL.MarkSequencePoint(doc10, 558, 1, 558, 100)
EvalTTokIL.Emit(OpCodes.Br, cont118)
EvalTTokIL.MarkLabel(fa118)
EvalTTokIL.Emit(OpCodes.Br, cont118)
EvalTTokIL.MarkLabel(cont118)
EvalTTokIL.MarkSequencePoint(doc10, 559, 1, 559, 100)
EvalTTokIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeArr"))
EvalTTokIL.MarkSequencePoint(doc10, 560, 1, 560, 100)
EvalTTokIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeRef"))
EvalTTokIL.MarkSequencePoint(doc10, 561, 1, 561, 100)
EvalTTokIL.Emit(OpCodes.Br, cont116)
EvalTTokIL.MarkLabel(fa116)
EvalTTokIL.MarkSequencePoint(doc10, 562, 1, 562, 100)
Dim typ63(-1) As Type
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("Value"))
Typ = GetType(TypeTok).GetField("Value").FieldType
ReDim Preserve typ63(UBound(typ63) + 1)
typ63(UBound(typ63)) = Typ
EvalTTokIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadClass", typ63))
Typ = GetType(Loader).GetMethod("LoadClass", typ63).ReturnType
EvalTTokIL.Emit(OpCodes.Stloc, 1)
EvalTTokIL.MarkSequencePoint(doc10, 563, 1, 563, 100)
EvalTTokIL.Emit(OpCodes.Br, cont116)
EvalTTokIL.MarkLabel(cont116)
EvalTTokIL.MarkSequencePoint(doc10, 564, 1, 564, 100)
EvalTTokIL.Emit(OpCodes.Br, label11)
EvalTTokIL.MarkSequencePoint(doc10, 565, 1, 565, 100)
EvalTTokIL.Emit(OpCodes.Br, cont115)
EvalTTokIL.MarkLabel(fa115)
EvalTTokIL.Emit(OpCodes.Br, cont115)
EvalTTokIL.MarkLabel(cont115)
EvalTTokIL.MarkSequencePoint(doc10, 567, 1, 567, 100)
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("IsArray"))
Typ = GetType(TypeTok).GetField("IsArray").FieldType
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeArr"))
EvalTTokIL.MarkSequencePoint(doc10, 568, 1, 568, 100)
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("IsByRef"))
Typ = GetType(TypeTok).GetField("IsByRef").FieldType
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeRef"))
EvalTTokIL.MarkSequencePoint(doc10, 569, 1, 569, 100)
Dim typ64(-1) As Type
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("RefTyp"))
Typ = GetType(TypeTok).GetField("RefTyp").FieldType
ReDim Preserve typ64(UBound(typ64) + 1)
typ64(UBound(typ64)) = Typ
EvalTTokIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("ProcessType", typ64))
Typ = GetType(Loader).GetMethod("ProcessType", typ64).ReturnType
EvalTTokIL.Emit(OpCodes.Stloc, 1)
EvalTTokIL.MarkSequencePoint(doc10, 571, 1, 571, 100)
EvalTTokIL.MarkLabel(label11)
EvalTTokIL.MarkSequencePoint(doc10, 573, 1, 573, 100)
EvalTTokIL.Emit(OpCodes.Br, cont113)
EvalTTokIL.MarkLabel(cont113)
EvalTTokIL.MarkSequencePoint(doc10, 575, 1, 575, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type01"))
EvalTTokIL.MarkSequencePoint(doc10, 577, 1, 577, 100)
EvalTTokIL.Emit(OpCodes.Ret)
Dim typ65(-1) As Type
ReDim Preserve typ65(UBound(typ65) + 1)
typ65(UBound(typ65)) = GetType(TypeTok)
Dim CommitEvalTTok As MethodBuilder = Helpers.DefineMethod("CommitEvalTTok", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Type), typ65)
Dim CommitEvalTTokIL As ILGenerator = CommitEvalTTok.GetILGenerator()
Dim CommitEvalTTokparam01 As ParameterBuilder = CommitEvalTTok.DefineParameter(1, ParameterAttributes.None, "tt")
CommitEvalTTokIL.MarkSequencePoint(doc10, 580, 1, 580, 100)
Dim typ66(-1) As Type
CommitEvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
ReDim Preserve typ66(UBound(typ66) + 1)
typ66(UBound(typ66)) = Typ
CommitEvalTTokIL.Emit(OpCodes.Call, EvalTTok)
Typ = EvalTTok.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
CommitEvalTTokIL.Emit(OpCodes.Pop)
End If
CommitEvalTTokIL.MarkSequencePoint(doc10, 581, 1, 581, 100)
CommitEvalTTokIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type01"))
Typ = GetType(AsmFactory).GetField("Type01").FieldType
CommitEvalTTokIL.MarkSequencePoint(doc10, 582, 1, 582, 100)
CommitEvalTTokIL.Emit(OpCodes.Ret)
Dim typ67(-1) As Type
ReDim Preserve typ67(UBound(typ67) + 1)
typ67(UBound(typ67)) = GetType(Expr).MakeArrayType()
Dim ProcessParams As MethodBuilder = Helpers.DefineMethod("ProcessParams", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ67)
Dim ProcessParamsIL As ILGenerator = ProcessParams.GetILGenerator()
Dim ProcessParamsparam01 As ParameterBuilder = ProcessParams.DefineParameter(1, ParameterAttributes.None, "ps")
ProcessParamsIL.MarkSequencePoint(doc10, 586, 1, 586, 100)
Dim locbldr161 As LocalBuilder = ProcessParamsIL.DeclareLocal(GetType(System.String))
locbldr161.SetLocalSymInfo("errstr")
ProcessParamsIL.MarkSequencePoint(doc10, 587, 1, 587, 100)
Dim locbldr162 As LocalBuilder = ProcessParamsIL.DeclareLocal(GetType(System.Int32))
locbldr162.SetLocalSymInfo("len")
ProcessParamsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Expr).MakeArrayType()
ProcessParamsIL.Emit(OpCodes.Ldlen)
ProcessParamsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessParamsIL.Emit(OpCodes.Sub)
ProcessParamsIL.Emit(OpCodes.Stloc, 1)
ProcessParamsIL.MarkSequencePoint(doc10, 588, 1, 588, 100)
Dim locbldr163 As LocalBuilder = ProcessParamsIL.DeclareLocal(GetType(System.Int32))
locbldr163.SetLocalSymInfo("i")
ProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ProcessParamsIL.Emit(OpCodes.Stloc, 2)
ProcessParamsIL.MarkSequencePoint(doc10, 589, 1, 589, 100)
Dim locbldr164 As LocalBuilder = ProcessParamsIL.DeclareLocal(GetType(VarExpr))
locbldr164.SetLocalSymInfo("curp")
ProcessParamsIL.Emit(OpCodes.Ldnull)
ProcessParamsIL.Emit(OpCodes.Stloc, 3)
ProcessParamsIL.MarkSequencePoint(doc10, 590, 1, 590, 100)
Dim locbldr165 As LocalBuilder = ProcessParamsIL.DeclareLocal(GetType(TypeTok))
locbldr165.SetLocalSymInfo("typtok")
ProcessParamsIL.MarkSequencePoint(doc10, 591, 1, 591, 100)
Dim locbldr166 As LocalBuilder = ProcessParamsIL.DeclareLocal(GetType(Ident))
locbldr166.SetLocalSymInfo("nam")
ProcessParamsIL.MarkSequencePoint(doc10, 592, 1, 592, 100)
Dim locbldr167 As LocalBuilder = ProcessParamsIL.DeclareLocal(GetType(System.Type))
locbldr167.SetLocalSymInfo("typ")
ProcessParamsIL.Emit(OpCodes.Ldnull)
ProcessParamsIL.Emit(OpCodes.Stloc, 6)
ProcessParamsIL.MarkSequencePoint(doc10, 596, 1, 596, 100)
Dim label12 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
ProcessParamsIL.MarkSequencePoint(doc10, 597, 1, 597, 100)
Dim label13 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
ProcessParamsIL.MarkSequencePoint(doc10, 599, 1, 599, 100)
ProcessParamsIL.MarkLabel(label12)
ProcessParamsIL.MarkSequencePoint(doc10, 601, 1, 601, 100)
ProcessParamsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
ProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessParamsIL.Emit(OpCodes.Add)
ProcessParamsIL.Emit(OpCodes.Stloc, 2)
ProcessParamsIL.MarkSequencePoint(doc10, 603, 1, 603, 100)
ProcessParamsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Expr).MakeArrayType()
Typ02 = Typ
ProcessParamsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
ProcessParamsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ProcessParamsIL.Emit(OpCodes.Ldelem, GetType(Expr).MakeArrayType().GetElementType())
Typ = GetType(Expr).MakeArrayType().GetElementType()
ProcessParamsIL.Emit(OpCodes.Stloc, 3)
ProcessParamsIL.MarkSequencePoint(doc10, 604, 1, 604, 100)
ProcessParamsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(VarExpr)
ProcessParamsIL.Emit(OpCodes.Ldfld, GetType(VarExpr).GetField("VarTyp"))
Typ = GetType(VarExpr).GetField("VarTyp").FieldType
ProcessParamsIL.Emit(OpCodes.Stloc, 4)
ProcessParamsIL.MarkSequencePoint(doc10, 617, 1, 617, 100)
Dim typ68(-1) As Type
ProcessParamsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(TypeTok)
ReDim Preserve typ68(UBound(typ68) + 1)
typ68(UBound(typ68)) = Typ
ProcessParamsIL.Emit(OpCodes.Call, CommitEvalTTok)
Typ = CommitEvalTTok.ReturnType
ProcessParamsIL.Emit(OpCodes.Stloc, 6)
ProcessParamsIL.MarkSequencePoint(doc10, 619, 1, 619, 100)
ProcessParamsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Type)
ProcessParamsIL.Emit(OpCodes.Ldnull)
Dim fa119 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
Dim tru119 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
Dim cont119 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
ProcessParamsIL.Emit(OpCodes.Beq, tru119)
ProcessParamsIL.Emit(OpCodes.Br, fa119)
ProcessParamsIL.MarkLabel(tru119)
ProcessParamsIL.MarkSequencePoint(doc10, 620, 1, 620, 100)
Dim typ69(-1) As Type
ProcessParamsIL.Emit(OpCodes.Ldstr, "Class '")
Typ = GetType(System.String)
ReDim Preserve typ69(UBound(typ69) + 1)
typ69(UBound(typ69)) = Typ
ProcessParamsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(TypeTok)
ProcessParamsIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("Value"))
Typ = GetType(TypeTok).GetField("Value").FieldType
ReDim Preserve typ69(UBound(typ69) + 1)
typ69(UBound(typ69)) = Typ
ProcessParamsIL.Emit(OpCodes.Ldstr, "' is not defined.")
Typ = GetType(System.String)
ReDim Preserve typ69(UBound(typ69) + 1)
typ69(UBound(typ69)) = Typ
ProcessParamsIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ69))
Typ = GetType(String).GetMethod("Concat", typ69).ReturnType
ProcessParamsIL.Emit(OpCodes.Stloc, 0)
ProcessParamsIL.MarkSequencePoint(doc10, 621, 1, 621, 100)
Dim typ70(-1) As Type
ProcessParamsIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("LineNr"))
Typ = GetType(ILEmitter).GetField("LineNr").FieldType
ReDim Preserve typ70(UBound(typ70) + 1)
typ70(UBound(typ70)) = Typ
ProcessParamsIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("CurSrcFile"))
Typ = GetType(ILEmitter).GetField("CurSrcFile").FieldType
ReDim Preserve typ70(UBound(typ70) + 1)
typ70(UBound(typ70)) = Typ
ProcessParamsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.String)
ReDim Preserve typ70(UBound(typ70) + 1)
typ70(UBound(typ70)) = Typ
ProcessParamsIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("WriteError", typ70))
Typ = GetType(StreamUtils).GetMethod("WriteError", typ70).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ProcessParamsIL.Emit(OpCodes.Pop)
End If
ProcessParamsIL.MarkSequencePoint(doc10, 622, 1, 622, 100)
ProcessParamsIL.Emit(OpCodes.Br, cont119)
ProcessParamsIL.MarkLabel(fa119)
ProcessParamsIL.Emit(OpCodes.Br, cont119)
ProcessParamsIL.MarkLabel(cont119)
ProcessParamsIL.MarkSequencePoint(doc10, 625, 1, 625, 100)
ProcessParamsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Type)
ProcessParamsIL.Emit(OpCodes.Ldnull)
Dim fa120 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
Dim tru120 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
Dim cont120 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
ProcessParamsIL.Emit(OpCodes.Beq, fa120)
ProcessParamsIL.Emit(OpCodes.Br, tru120)
ProcessParamsIL.MarkLabel(tru120)
ProcessParamsIL.MarkSequencePoint(doc10, 626, 1, 626, 100)
Dim typ71(-1) As Type
ProcessParamsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Type)
ReDim Preserve typ71(UBound(typ71) + 1)
typ71(UBound(typ71)) = Typ
ProcessParamsIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("AddTyp", typ71))
Typ = GetType(AsmFactory).GetMethod("AddTyp", typ71).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ProcessParamsIL.Emit(OpCodes.Pop)
End If
ProcessParamsIL.MarkSequencePoint(doc10, 627, 1, 627, 100)
ProcessParamsIL.Emit(OpCodes.Br, cont120)
ProcessParamsIL.MarkLabel(fa120)
ProcessParamsIL.Emit(OpCodes.Br, cont120)
ProcessParamsIL.MarkLabel(cont120)
ProcessParamsIL.MarkSequencePoint(doc10, 629, 1, 629, 100)
ProcessParamsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
ProcessParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
Dim fa121 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
Dim tru121 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
Dim cont121 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
ProcessParamsIL.Emit(OpCodes.Beq, tru121)
ProcessParamsIL.Emit(OpCodes.Br, fa121)
ProcessParamsIL.MarkLabel(tru121)
ProcessParamsIL.MarkSequencePoint(doc10, 630, 1, 630, 100)
ProcessParamsIL.Emit(OpCodes.Br, label13)
ProcessParamsIL.MarkSequencePoint(doc10, 631, 1, 631, 100)
ProcessParamsIL.Emit(OpCodes.Br, cont121)
ProcessParamsIL.MarkLabel(fa121)
ProcessParamsIL.MarkSequencePoint(doc10, 632, 1, 632, 100)
ProcessParamsIL.Emit(OpCodes.Br, label12)
ProcessParamsIL.MarkSequencePoint(doc10, 633, 1, 633, 100)
ProcessParamsIL.Emit(OpCodes.Br, cont121)
ProcessParamsIL.MarkLabel(cont121)
ProcessParamsIL.MarkSequencePoint(doc10, 635, 1, 635, 100)
ProcessParamsIL.MarkLabel(label13)
ProcessParamsIL.MarkSequencePoint(doc10, 637, 1, 637, 100)
ProcessParamsIL.Emit(OpCodes.Ret)
Dim typ72(-1) As Type
ReDim Preserve typ72(UBound(typ72) + 1)
typ72(UBound(typ72)) = GetType(Expr).MakeArrayType()
Dim PostProcessParams As MethodBuilder = Helpers.DefineMethod("PostProcessParams", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ72)
Dim PostProcessParamsIL As ILGenerator = PostProcessParams.GetILGenerator()
Dim PostProcessParamsparam01 As ParameterBuilder = PostProcessParams.DefineParameter(1, ParameterAttributes.None, "ps")
PostProcessParamsIL.MarkSequencePoint(doc10, 641, 1, 641, 100)
Dim locbldr168 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(System.Int32))
locbldr168.SetLocalSymInfo("len")
PostProcessParamsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Expr).MakeArrayType()
PostProcessParamsIL.Emit(OpCodes.Ldlen)
PostProcessParamsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Sub)
PostProcessParamsIL.Emit(OpCodes.Stloc, 0)
PostProcessParamsIL.MarkSequencePoint(doc10, 642, 1, 642, 100)
Dim locbldr169 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(System.Int32))
locbldr169.SetLocalSymInfo("i")
PostProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Stloc, 1)
PostProcessParamsIL.MarkSequencePoint(doc10, 643, 1, 643, 100)
Dim locbldr170 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(VarExpr))
locbldr170.SetLocalSymInfo("curp")
PostProcessParamsIL.Emit(OpCodes.Ldnull)
PostProcessParamsIL.Emit(OpCodes.Stloc, 2)
PostProcessParamsIL.MarkSequencePoint(doc10, 644, 1, 644, 100)
Dim locbldr171 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(Ident))
locbldr171.SetLocalSymInfo("nam")
PostProcessParamsIL.MarkSequencePoint(doc10, 645, 1, 645, 100)
Dim locbldr172 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(TypeTok))
locbldr172.SetLocalSymInfo("typtok")
PostProcessParamsIL.MarkSequencePoint(doc10, 646, 1, 646, 100)
Dim locbldr173 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(System.Type))
locbldr173.SetLocalSymInfo("typ")
PostProcessParamsIL.Emit(OpCodes.Ldnull)
PostProcessParamsIL.Emit(OpCodes.Stloc, 5)
PostProcessParamsIL.MarkSequencePoint(doc10, 647, 1, 647, 100)
Dim locbldr174 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(System.Type))
locbldr174.SetLocalSymInfo("reft")
PostProcessParamsIL.MarkSequencePoint(doc10, 650, 1, 650, 100)
Dim label14 As System.Reflection.Emit.Label = PostProcessParamsIL.DefineLabel()
PostProcessParamsIL.MarkSequencePoint(doc10, 651, 1, 651, 100)
Dim label15 As System.Reflection.Emit.Label = PostProcessParamsIL.DefineLabel()
PostProcessParamsIL.MarkSequencePoint(doc10, 653, 1, 653, 100)
PostProcessParamsIL.MarkLabel(label14)
PostProcessParamsIL.MarkSequencePoint(doc10, 655, 1, 655, 100)
PostProcessParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Add)
PostProcessParamsIL.Emit(OpCodes.Stloc, 1)
PostProcessParamsIL.MarkSequencePoint(doc10, 657, 1, 657, 100)
PostProcessParamsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Expr).MakeArrayType()
Typ02 = Typ
PostProcessParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
PostProcessParamsIL.Emit(OpCodes.Ldelem, GetType(Expr).MakeArrayType().GetElementType())
Typ = GetType(Expr).MakeArrayType().GetElementType()
PostProcessParamsIL.Emit(OpCodes.Stloc, 2)
PostProcessParamsIL.MarkSequencePoint(doc10, 659, 1, 659, 100)
Dim locbldr175 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(MethodBuilder))
locbldr175.SetLocalSymInfo("mb")
PostProcessParamsIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("Met"))
Typ = GetType(ILEmitter).GetField("Met").FieldType
PostProcessParamsIL.Emit(OpCodes.Stloc, 7)
PostProcessParamsIL.MarkSequencePoint(doc10, 660, 1, 660, 100)
Dim locbldr176 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(ParameterAttributes))
locbldr176.SetLocalSymInfo("non")
PostProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Stloc, 8)
PostProcessParamsIL.MarkSequencePoint(doc10, 661, 1, 661, 100)
PostProcessParamsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarExpr)
PostProcessParamsIL.Emit(OpCodes.Ldfld, GetType(VarExpr).GetField("VarName"))
Typ = GetType(VarExpr).GetField("VarName").FieldType
PostProcessParamsIL.Emit(OpCodes.Stloc, 3)
PostProcessParamsIL.MarkSequencePoint(doc10, 662, 1, 662, 100)
Dim locbldr177 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(System.Int32))
locbldr177.SetLocalSymInfo("ind")
PostProcessParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Add)
PostProcessParamsIL.Emit(OpCodes.Stloc, 9)
PostProcessParamsIL.MarkSequencePoint(doc10, 663, 1, 663, 100)
Dim typ73(-1) As Type
PostProcessParamsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(MethodBuilder)
Typ03 = Typ
PostProcessParamsIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Int32)
ReDim Preserve typ73(UBound(typ73) + 1)
typ73(UBound(typ73)) = Typ
PostProcessParamsIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(ParameterAttributes)
ReDim Preserve typ73(UBound(typ73) + 1)
typ73(UBound(typ73)) = Typ
PostProcessParamsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Ident)
PostProcessParamsIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ73(UBound(typ73) + 1)
typ73(UBound(typ73)) = Typ
PostProcessParamsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineParameter", typ73))
Typ = Typ03.GetMethod("DefineParameter", typ73).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
PostProcessParamsIL.Emit(OpCodes.Pop)
End If
PostProcessParamsIL.MarkSequencePoint(doc10, 665, 1, 665, 100)
PostProcessParamsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarExpr)
PostProcessParamsIL.Emit(OpCodes.Ldfld, GetType(VarExpr).GetField("VarTyp"))
Typ = GetType(VarExpr).GetField("VarTyp").FieldType
PostProcessParamsIL.Emit(OpCodes.Stloc, 4)
PostProcessParamsIL.MarkSequencePoint(doc10, 678, 1, 678, 100)
Dim typ74(-1) As Type
PostProcessParamsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(TypeTok)
ReDim Preserve typ74(UBound(typ74) + 1)
typ74(UBound(typ74)) = Typ
PostProcessParamsIL.Emit(OpCodes.Call, CommitEvalTTok)
Typ = CommitEvalTTok.ReturnType
PostProcessParamsIL.Emit(OpCodes.Stloc, 5)
PostProcessParamsIL.MarkSequencePoint(doc10, 680, 1, 680, 100)
PostProcessParamsIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("ArgInd"))
Typ = GetType(ILEmitter).GetField("ArgInd").FieldType
PostProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Add)
PostProcessParamsIL.Emit(OpCodes.Stsfld, GetType(ILEmitter).GetField("ArgInd"))
PostProcessParamsIL.MarkSequencePoint(doc10, 681, 1, 681, 100)
Dim typ75(-1) As Type
PostProcessParamsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Ident)
PostProcessParamsIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ75(UBound(typ75) + 1)
typ75(UBound(typ75)) = Typ
PostProcessParamsIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReDim Preserve typ75(UBound(typ75) + 1)
typ75(UBound(typ75)) = Typ
PostProcessParamsIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("ArgInd"))
Typ = GetType(ILEmitter).GetField("ArgInd").FieldType
ReDim Preserve typ75(UBound(typ75) + 1)
typ75(UBound(typ75)) = Typ
PostProcessParamsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
ReDim Preserve typ75(UBound(typ75) + 1)
typ75(UBound(typ75)) = Typ
PostProcessParamsIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddVar", typ75))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddVar", typ75).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
PostProcessParamsIL.Emit(OpCodes.Pop)
End If
PostProcessParamsIL.MarkSequencePoint(doc10, 683, 1, 683, 100)
PostProcessParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
Dim fa122 As System.Reflection.Emit.Label = PostProcessParamsIL.DefineLabel()
Dim tru122 As System.Reflection.Emit.Label = PostProcessParamsIL.DefineLabel()
Dim cont122 As System.Reflection.Emit.Label = PostProcessParamsIL.DefineLabel()
PostProcessParamsIL.Emit(OpCodes.Beq, tru122)
PostProcessParamsIL.Emit(OpCodes.Br, fa122)
PostProcessParamsIL.MarkLabel(tru122)
PostProcessParamsIL.MarkSequencePoint(doc10, 684, 1, 684, 100)
PostProcessParamsIL.Emit(OpCodes.Br, label15)
PostProcessParamsIL.MarkSequencePoint(doc10, 685, 1, 685, 100)
PostProcessParamsIL.Emit(OpCodes.Br, cont122)
PostProcessParamsIL.MarkLabel(fa122)
PostProcessParamsIL.MarkSequencePoint(doc10, 686, 1, 686, 100)
PostProcessParamsIL.Emit(OpCodes.Br, label14)
PostProcessParamsIL.MarkSequencePoint(doc10, 687, 1, 687, 100)
PostProcessParamsIL.Emit(OpCodes.Br, cont122)
PostProcessParamsIL.MarkLabel(cont122)
PostProcessParamsIL.MarkSequencePoint(doc10, 689, 1, 689, 100)
PostProcessParamsIL.MarkLabel(label15)
PostProcessParamsIL.MarkSequencePoint(doc10, 691, 1, 691, 100)
PostProcessParamsIL.Emit(OpCodes.Ret)
Dim typ76(-1) As Type
ReDim Preserve typ76(UBound(typ76) + 1)
typ76(UBound(typ76)) = GetType(Expr).MakeArrayType()
Dim PostProcessParamsConstr As MethodBuilder = Helpers.DefineMethod("PostProcessParamsConstr", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ76)
Dim PostProcessParamsConstrIL As ILGenerator = PostProcessParamsConstr.GetILGenerator()
Dim PostProcessParamsConstrparam01 As ParameterBuilder = PostProcessParamsConstr.DefineParameter(1, ParameterAttributes.None, "ps")
PostProcessParamsConstrIL.MarkSequencePoint(doc10, 695, 1, 695, 100)
Dim locbldr178 As LocalBuilder = PostProcessParamsConstrIL.DeclareLocal(GetType(System.Int32))
locbldr178.SetLocalSymInfo("len")
PostProcessParamsConstrIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Expr).MakeArrayType()
PostProcessParamsConstrIL.Emit(OpCodes.Ldlen)
PostProcessParamsConstrIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Sub)
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 0)
PostProcessParamsConstrIL.MarkSequencePoint(doc10, 696, 1, 696, 100)
Dim locbldr179 As LocalBuilder = PostProcessParamsConstrIL.DeclareLocal(GetType(System.Int32))
locbldr179.SetLocalSymInfo("i")
PostProcessParamsConstrIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 1)
PostProcessParamsConstrIL.MarkSequencePoint(doc10, 697, 1, 697, 100)
Dim locbldr180 As LocalBuilder = PostProcessParamsConstrIL.DeclareLocal(GetType(VarExpr))
locbldr180.SetLocalSymInfo("curp")
PostProcessParamsConstrIL.Emit(OpCodes.Ldnull)
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 2)
PostProcessParamsConstrIL.MarkSequencePoint(doc10, 698, 1, 698, 100)
Dim locbldr181 As LocalBuilder = PostProcessParamsConstrIL.DeclareLocal(GetType(Ident))
locbldr181.SetLocalSymInfo("nam")
PostProcessParamsConstrIL.MarkSequencePoint(doc10, 699, 1, 699, 100)
Dim locbldr182 As LocalBuilder = PostProcessParamsConstrIL.DeclareLocal(GetType(TypeTok))
locbldr182.SetLocalSymInfo("typtok")
PostProcessParamsConstrIL.MarkSequencePoint(doc10, 700, 1, 700, 100)
Dim locbldr183 As LocalBuilder = PostProcessParamsConstrIL.DeclareLocal(GetType(System.Type))
locbldr183.SetLocalSymInfo("typ")
PostProcessParamsConstrIL.Emit(OpCodes.Ldnull)
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 5)
PostProcessParamsConstrIL.MarkSequencePoint(doc10, 703, 1, 703, 100)
Dim label16 As System.Reflection.Emit.Label = PostProcessParamsConstrIL.DefineLabel()
PostProcessParamsConstrIL.MarkSequencePoint(doc10, 704, 1, 704, 100)
Dim label17 As System.Reflection.Emit.Label = PostProcessParamsConstrIL.DefineLabel()
PostProcessParamsConstrIL.MarkSequencePoint(doc10, 706, 1, 706, 100)
PostProcessParamsConstrIL.MarkLabel(label16)
PostProcessParamsConstrIL.MarkSequencePoint(doc10, 708, 1, 708, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Add)
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 1)
PostProcessParamsConstrIL.MarkSequencePoint(doc10, 710, 1, 710, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Expr).MakeArrayType()
Typ02 = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Conv_U)
Typ = Typ02
PostProcessParamsConstrIL.Emit(OpCodes.Ldelem, GetType(Expr).MakeArrayType().GetElementType())
Typ = GetType(Expr).MakeArrayType().GetElementType()
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 2)
PostProcessParamsConstrIL.MarkSequencePoint(doc10, 712, 1, 712, 100)
Dim locbldr184 As LocalBuilder = PostProcessParamsConstrIL.DeclareLocal(GetType(ConstructorBuilder))
locbldr184.SetLocalSymInfo("cb")
PostProcessParamsConstrIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("Constr"))
Typ = GetType(ILEmitter).GetField("Constr").FieldType
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 6)
PostProcessParamsConstrIL.MarkSequencePoint(doc10, 713, 1, 713, 100)
Dim locbldr185 As LocalBuilder = PostProcessParamsConstrIL.DeclareLocal(GetType(ParameterAttributes))
locbldr185.SetLocalSymInfo("non")
PostProcessParamsConstrIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 7)
PostProcessParamsConstrIL.MarkSequencePoint(doc10, 714, 1, 714, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarExpr)
PostProcessParamsConstrIL.Emit(OpCodes.Ldfld, GetType(VarExpr).GetField("VarName"))
Typ = GetType(VarExpr).GetField("VarName").FieldType
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 3)
PostProcessParamsConstrIL.MarkSequencePoint(doc10, 715, 1, 715, 100)
Dim locbldr186 As LocalBuilder = PostProcessParamsConstrIL.DeclareLocal(GetType(System.Int32))
locbldr186.SetLocalSymInfo("ind")
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Add)
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 8)
PostProcessParamsConstrIL.MarkSequencePoint(doc10, 716, 1, 716, 100)
Dim typ77(-1) As Type
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(ConstructorBuilder)
Typ03 = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Int32)
ReDim Preserve typ77(UBound(typ77) + 1)
typ77(UBound(typ77)) = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(ParameterAttributes)
ReDim Preserve typ77(UBound(typ77) + 1)
typ77(UBound(typ77)) = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Ident)
PostProcessParamsConstrIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ77(UBound(typ77) + 1)
typ77(UBound(typ77)) = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineParameter", typ77))
Typ = Typ03.GetMethod("DefineParameter", typ77).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
PostProcessParamsConstrIL.Emit(OpCodes.Pop)
End If
PostProcessParamsConstrIL.MarkSequencePoint(doc10, 718, 1, 718, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarExpr)
PostProcessParamsConstrIL.Emit(OpCodes.Ldfld, GetType(VarExpr).GetField("VarTyp"))
Typ = GetType(VarExpr).GetField("VarTyp").FieldType
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 4)
PostProcessParamsConstrIL.MarkSequencePoint(doc10, 731, 1, 731, 100)
Dim typ78(-1) As Type
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(TypeTok)
ReDim Preserve typ78(UBound(typ78) + 1)
typ78(UBound(typ78)) = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Call, CommitEvalTTok)
Typ = CommitEvalTTok.ReturnType
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 5)
PostProcessParamsConstrIL.MarkSequencePoint(doc10, 733, 1, 733, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("ArgInd"))
Typ = GetType(ILEmitter).GetField("ArgInd").FieldType
PostProcessParamsConstrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Add)
PostProcessParamsConstrIL.Emit(OpCodes.Stsfld, GetType(ILEmitter).GetField("ArgInd"))
PostProcessParamsConstrIL.MarkSequencePoint(doc10, 734, 1, 734, 100)
Dim typ79(-1) As Type
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Ident)
PostProcessParamsConstrIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ79(UBound(typ79) + 1)
typ79(UBound(typ79)) = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReDim Preserve typ79(UBound(typ79) + 1)
typ79(UBound(typ79)) = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("ArgInd"))
Typ = GetType(ILEmitter).GetField("ArgInd").FieldType
ReDim Preserve typ79(UBound(typ79) + 1)
typ79(UBound(typ79)) = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
ReDim Preserve typ79(UBound(typ79) + 1)
typ79(UBound(typ79)) = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddVar", typ79))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddVar", typ79).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
PostProcessParamsConstrIL.Emit(OpCodes.Pop)
End If
PostProcessParamsConstrIL.MarkSequencePoint(doc10, 736, 1, 736, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
Dim fa123 As System.Reflection.Emit.Label = PostProcessParamsConstrIL.DefineLabel()
Dim tru123 As System.Reflection.Emit.Label = PostProcessParamsConstrIL.DefineLabel()
Dim cont123 As System.Reflection.Emit.Label = PostProcessParamsConstrIL.DefineLabel()
PostProcessParamsConstrIL.Emit(OpCodes.Beq, tru123)
PostProcessParamsConstrIL.Emit(OpCodes.Br, fa123)
PostProcessParamsConstrIL.MarkLabel(tru123)
PostProcessParamsConstrIL.MarkSequencePoint(doc10, 737, 1, 737, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Br, label17)
PostProcessParamsConstrIL.MarkSequencePoint(doc10, 738, 1, 738, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Br, cont123)
PostProcessParamsConstrIL.MarkLabel(fa123)
PostProcessParamsConstrIL.MarkSequencePoint(doc10, 739, 1, 739, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Br, label16)
PostProcessParamsConstrIL.MarkSequencePoint(doc10, 740, 1, 740, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Br, cont123)
PostProcessParamsConstrIL.MarkLabel(cont123)
PostProcessParamsConstrIL.MarkSequencePoint(doc10, 742, 1, 742, 100)
PostProcessParamsConstrIL.MarkLabel(label17)
PostProcessParamsConstrIL.MarkSequencePoint(doc10, 744, 1, 744, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Ret)
Dim typ80(-1) As Type
ReDim Preserve typ80(UBound(typ80) + 1)
typ80(UBound(typ80)) = GetType(Literal)
Dim EmitLiteral As MethodBuilder = Helpers.DefineMethod("EmitLiteral", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ80)
Dim EmitLiteralIL As ILGenerator = EmitLiteral.GetILGenerator()
Dim EmitLiteralparam01 As ParameterBuilder = EmitLiteral.DefineParameter(1, ParameterAttributes.None, "lit")
EmitLiteralIL.MarkSequencePoint(doc10, 748, 1, 748, 100)
Dim label18 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
EmitLiteralIL.MarkSequencePoint(doc10, 749, 1, 749, 100)
Dim locbldr187 As LocalBuilder = EmitLiteralIL.DeclareLocal(GetType(System.Type))
locbldr187.SetLocalSymInfo("typ")
EmitLiteralIL.MarkSequencePoint(doc10, 750, 1, 750, 100)
Dim locbldr188 As LocalBuilder = EmitLiteralIL.DeclareLocal(GetType(System.Boolean))
locbldr188.SetLocalSymInfo("b")
EmitLiteralIL.MarkSequencePoint(doc10, 752, 1, 752, 100)
EmitLiteralIL.Emit(OpCodes.Ldtoken, GetType(StringLiteral))
Dim typ81 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitLiteralIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ81))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ81).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 0)
EmitLiteralIL.MarkSequencePoint(doc10, 753, 1, 753, 100)
Dim typ82(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ82(UBound(typ82) + 1)
typ82(UBound(typ82)) = Typ
EmitLiteralIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ82))
Typ = Typ03.GetMethod("IsInstanceOfType", typ82).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 1)
EmitLiteralIL.MarkSequencePoint(doc10, 755, 1, 755, 100)
EmitLiteralIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitLiteralIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa124 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim tru124 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim cont124 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
EmitLiteralIL.Emit(OpCodes.Beq, tru124)
EmitLiteralIL.Emit(OpCodes.Br, fa124)
EmitLiteralIL.MarkLabel(tru124)
EmitLiteralIL.MarkSequencePoint(doc10, 756, 1, 756, 100)
Dim locbldr189 As LocalBuilder = EmitLiteralIL.DeclareLocal(GetType(StringLiteral))
locbldr189.SetLocalSymInfo("slit")
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Stloc, 2)
EmitLiteralIL.MarkSequencePoint(doc10, 757, 1, 757, 100)
Dim typ83(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(StringLiteral)
EmitLiteralIL.Emit(OpCodes.Ldfld, GetType(StringLiteral).GetField("Value"))
Typ = GetType(StringLiteral).GetField("Value").FieldType
ReDim Preserve typ83(UBound(typ83) + 1)
typ83(UBound(typ83)) = Typ
EmitLiteralIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdstr", typ83))
Typ = GetType(ILEmitter).GetMethod("EmitLdstr", typ83).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLiteralIL.Emit(OpCodes.Pop)
End If
EmitLiteralIL.MarkSequencePoint(doc10, 758, 1, 758, 100)
EmitLiteralIL.Emit(OpCodes.Br, label18)
EmitLiteralIL.MarkSequencePoint(doc10, 759, 1, 759, 100)
EmitLiteralIL.Emit(OpCodes.Br, cont124)
EmitLiteralIL.MarkLabel(fa124)
EmitLiteralIL.Emit(OpCodes.Br, cont124)
EmitLiteralIL.MarkLabel(cont124)
EmitLiteralIL.MarkSequencePoint(doc10, 761, 1, 761, 100)
EmitLiteralIL.Emit(OpCodes.Ldtoken, GetType(SByteLiteral))
Dim typ84 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitLiteralIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ84))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ84).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 0)
EmitLiteralIL.MarkSequencePoint(doc10, 762, 1, 762, 100)
Dim typ85(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ85(UBound(typ85) + 1)
typ85(UBound(typ85)) = Typ
EmitLiteralIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ85))
Typ = Typ03.GetMethod("IsInstanceOfType", typ85).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 1)
EmitLiteralIL.MarkSequencePoint(doc10, 764, 1, 764, 100)
EmitLiteralIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitLiteralIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa125 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim tru125 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim cont125 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
EmitLiteralIL.Emit(OpCodes.Beq, tru125)
EmitLiteralIL.Emit(OpCodes.Br, fa125)
EmitLiteralIL.MarkLabel(tru125)
EmitLiteralIL.MarkSequencePoint(doc10, 765, 1, 765, 100)
Dim locbldr190 As LocalBuilder = EmitLiteralIL.DeclareLocal(GetType(SByteLiteral))
locbldr190.SetLocalSymInfo("sblit")
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Stloc, 3)
EmitLiteralIL.MarkSequencePoint(doc10, 766, 1, 766, 100)
Dim typ86(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(SByteLiteral)
EmitLiteralIL.Emit(OpCodes.Ldfld, GetType(SByteLiteral).GetField("NumVal"))
Typ = GetType(SByteLiteral).GetField("NumVal").FieldType
ReDim Preserve typ86(UBound(typ86) + 1)
typ86(UBound(typ86)) = Typ
EmitLiteralIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdcI1", typ86))
Typ = GetType(ILEmitter).GetMethod("EmitLdcI1", typ86).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLiteralIL.Emit(OpCodes.Pop)
End If
EmitLiteralIL.MarkSequencePoint(doc10, 767, 1, 767, 100)
EmitLiteralIL.Emit(OpCodes.Br, label18)
EmitLiteralIL.MarkSequencePoint(doc10, 768, 1, 768, 100)
EmitLiteralIL.Emit(OpCodes.Br, cont125)
EmitLiteralIL.MarkLabel(fa125)
EmitLiteralIL.Emit(OpCodes.Br, cont125)
EmitLiteralIL.MarkLabel(cont125)
EmitLiteralIL.MarkSequencePoint(doc10, 770, 1, 770, 100)
EmitLiteralIL.Emit(OpCodes.Ldtoken, GetType(ShortLiteral))
Dim typ87 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitLiteralIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ87))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ87).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 0)
EmitLiteralIL.MarkSequencePoint(doc10, 771, 1, 771, 100)
Dim typ88(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ88(UBound(typ88) + 1)
typ88(UBound(typ88)) = Typ
EmitLiteralIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ88))
Typ = Typ03.GetMethod("IsInstanceOfType", typ88).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 1)
EmitLiteralIL.MarkSequencePoint(doc10, 773, 1, 773, 100)
EmitLiteralIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitLiteralIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa126 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim tru126 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim cont126 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
EmitLiteralIL.Emit(OpCodes.Beq, tru126)
EmitLiteralIL.Emit(OpCodes.Br, fa126)
EmitLiteralIL.MarkLabel(tru126)
EmitLiteralIL.MarkSequencePoint(doc10, 774, 1, 774, 100)
Dim locbldr191 As LocalBuilder = EmitLiteralIL.DeclareLocal(GetType(ShortLiteral))
locbldr191.SetLocalSymInfo("shlit")
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Stloc, 4)
EmitLiteralIL.MarkSequencePoint(doc10, 775, 1, 775, 100)
Dim typ89(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(ShortLiteral)
EmitLiteralIL.Emit(OpCodes.Ldfld, GetType(ShortLiteral).GetField("NumVal"))
Typ = GetType(ShortLiteral).GetField("NumVal").FieldType
ReDim Preserve typ89(UBound(typ89) + 1)
typ89(UBound(typ89)) = Typ
EmitLiteralIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdcI2", typ89))
Typ = GetType(ILEmitter).GetMethod("EmitLdcI2", typ89).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLiteralIL.Emit(OpCodes.Pop)
End If
EmitLiteralIL.MarkSequencePoint(doc10, 776, 1, 776, 100)
EmitLiteralIL.Emit(OpCodes.Br, label18)
EmitLiteralIL.MarkSequencePoint(doc10, 777, 1, 777, 100)
EmitLiteralIL.Emit(OpCodes.Br, cont126)
EmitLiteralIL.MarkLabel(fa126)
EmitLiteralIL.Emit(OpCodes.Br, cont126)
EmitLiteralIL.MarkLabel(cont126)
EmitLiteralIL.MarkSequencePoint(doc10, 779, 1, 779, 100)
EmitLiteralIL.Emit(OpCodes.Ldtoken, GetType(IntLiteral))
Dim typ90 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitLiteralIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ90))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ90).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 0)
EmitLiteralIL.MarkSequencePoint(doc10, 780, 1, 780, 100)
Dim typ91(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ91(UBound(typ91) + 1)
typ91(UBound(typ91)) = Typ
EmitLiteralIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ91))
Typ = Typ03.GetMethod("IsInstanceOfType", typ91).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 1)
EmitLiteralIL.MarkSequencePoint(doc10, 782, 1, 782, 100)
EmitLiteralIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitLiteralIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa127 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim tru127 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim cont127 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
EmitLiteralIL.Emit(OpCodes.Beq, tru127)
EmitLiteralIL.Emit(OpCodes.Br, fa127)
EmitLiteralIL.MarkLabel(tru127)
EmitLiteralIL.MarkSequencePoint(doc10, 783, 1, 783, 100)
Dim locbldr192 As LocalBuilder = EmitLiteralIL.DeclareLocal(GetType(IntLiteral))
locbldr192.SetLocalSymInfo("ilit")
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Stloc, 5)
EmitLiteralIL.MarkSequencePoint(doc10, 784, 1, 784, 100)
Dim typ92(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(IntLiteral)
EmitLiteralIL.Emit(OpCodes.Ldfld, GetType(IntLiteral).GetField("NumVal"))
Typ = GetType(IntLiteral).GetField("NumVal").FieldType
ReDim Preserve typ92(UBound(typ92) + 1)
typ92(UBound(typ92)) = Typ
EmitLiteralIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdcI4", typ92))
Typ = GetType(ILEmitter).GetMethod("EmitLdcI4", typ92).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLiteralIL.Emit(OpCodes.Pop)
End If
EmitLiteralIL.MarkSequencePoint(doc10, 785, 1, 785, 100)
EmitLiteralIL.Emit(OpCodes.Br, label18)
EmitLiteralIL.MarkSequencePoint(doc10, 786, 1, 786, 100)
EmitLiteralIL.Emit(OpCodes.Br, cont127)
EmitLiteralIL.MarkLabel(fa127)
EmitLiteralIL.Emit(OpCodes.Br, cont127)
EmitLiteralIL.MarkLabel(cont127)
EmitLiteralIL.MarkSequencePoint(doc10, 788, 1, 788, 100)
EmitLiteralIL.Emit(OpCodes.Ldtoken, GetType(LongLiteral))
Dim typ93 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitLiteralIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ93))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ93).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 0)
EmitLiteralIL.MarkSequencePoint(doc10, 789, 1, 789, 100)
Dim typ94(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ94(UBound(typ94) + 1)
typ94(UBound(typ94)) = Typ
EmitLiteralIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ94))
Typ = Typ03.GetMethod("IsInstanceOfType", typ94).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 1)
EmitLiteralIL.MarkSequencePoint(doc10, 791, 1, 791, 100)
EmitLiteralIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitLiteralIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa128 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim tru128 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim cont128 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
EmitLiteralIL.Emit(OpCodes.Beq, tru128)
EmitLiteralIL.Emit(OpCodes.Br, fa128)
EmitLiteralIL.MarkLabel(tru128)
EmitLiteralIL.MarkSequencePoint(doc10, 792, 1, 792, 100)
Dim locbldr193 As LocalBuilder = EmitLiteralIL.DeclareLocal(GetType(LongLiteral))
locbldr193.SetLocalSymInfo("llit")
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Stloc, 6)
EmitLiteralIL.MarkSequencePoint(doc10, 793, 1, 793, 100)
Dim typ95(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(LongLiteral)
EmitLiteralIL.Emit(OpCodes.Ldfld, GetType(LongLiteral).GetField("NumVal"))
Typ = GetType(LongLiteral).GetField("NumVal").FieldType
ReDim Preserve typ95(UBound(typ95) + 1)
typ95(UBound(typ95)) = Typ
EmitLiteralIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdcI8", typ95))
Typ = GetType(ILEmitter).GetMethod("EmitLdcI8", typ95).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLiteralIL.Emit(OpCodes.Pop)
End If
EmitLiteralIL.MarkSequencePoint(doc10, 794, 1, 794, 100)
EmitLiteralIL.Emit(OpCodes.Br, label18)
EmitLiteralIL.MarkSequencePoint(doc10, 795, 1, 795, 100)
EmitLiteralIL.Emit(OpCodes.Br, cont128)
EmitLiteralIL.MarkLabel(fa128)
EmitLiteralIL.Emit(OpCodes.Br, cont128)
EmitLiteralIL.MarkLabel(cont128)
EmitLiteralIL.MarkSequencePoint(doc10, 797, 1, 797, 100)
EmitLiteralIL.Emit(OpCodes.Ldtoken, GetType(FloatLiteral))
Dim typ96 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitLiteralIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ96))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ96).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 0)
EmitLiteralIL.MarkSequencePoint(doc10, 798, 1, 798, 100)
Dim typ97(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ97(UBound(typ97) + 1)
typ97(UBound(typ97)) = Typ
EmitLiteralIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ97))
Typ = Typ03.GetMethod("IsInstanceOfType", typ97).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 1)
EmitLiteralIL.MarkSequencePoint(doc10, 800, 1, 800, 100)
EmitLiteralIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitLiteralIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa129 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim tru129 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim cont129 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
EmitLiteralIL.Emit(OpCodes.Beq, tru129)
EmitLiteralIL.Emit(OpCodes.Br, fa129)
EmitLiteralIL.MarkLabel(tru129)
EmitLiteralIL.MarkSequencePoint(doc10, 801, 1, 801, 100)
Dim locbldr194 As LocalBuilder = EmitLiteralIL.DeclareLocal(GetType(FloatLiteral))
locbldr194.SetLocalSymInfo("flit")
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Stloc, 7)
EmitLiteralIL.MarkSequencePoint(doc10, 802, 1, 802, 100)
Dim typ98(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(FloatLiteral)
EmitLiteralIL.Emit(OpCodes.Ldfld, GetType(FloatLiteral).GetField("NumVal"))
Typ = GetType(FloatLiteral).GetField("NumVal").FieldType
ReDim Preserve typ98(UBound(typ98) + 1)
typ98(UBound(typ98)) = Typ
EmitLiteralIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdcR4", typ98))
Typ = GetType(ILEmitter).GetMethod("EmitLdcR4", typ98).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLiteralIL.Emit(OpCodes.Pop)
End If
EmitLiteralIL.MarkSequencePoint(doc10, 803, 1, 803, 100)
EmitLiteralIL.Emit(OpCodes.Br, label18)
EmitLiteralIL.MarkSequencePoint(doc10, 804, 1, 804, 100)
EmitLiteralIL.Emit(OpCodes.Br, cont129)
EmitLiteralIL.MarkLabel(fa129)
EmitLiteralIL.Emit(OpCodes.Br, cont129)
EmitLiteralIL.MarkLabel(cont129)
EmitLiteralIL.MarkSequencePoint(doc10, 806, 1, 806, 100)
EmitLiteralIL.Emit(OpCodes.Ldtoken, GetType(DoubleLiteral))
Dim typ99 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitLiteralIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ99))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ99).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 0)
EmitLiteralIL.MarkSequencePoint(doc10, 807, 1, 807, 100)
Dim typ100(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ100(UBound(typ100) + 1)
typ100(UBound(typ100)) = Typ
EmitLiteralIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ100))
Typ = Typ03.GetMethod("IsInstanceOfType", typ100).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 1)
EmitLiteralIL.MarkSequencePoint(doc10, 809, 1, 809, 100)
EmitLiteralIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitLiteralIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa130 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim tru130 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim cont130 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
EmitLiteralIL.Emit(OpCodes.Beq, tru130)
EmitLiteralIL.Emit(OpCodes.Br, fa130)
EmitLiteralIL.MarkLabel(tru130)
EmitLiteralIL.MarkSequencePoint(doc10, 810, 1, 810, 100)
Dim locbldr195 As LocalBuilder = EmitLiteralIL.DeclareLocal(GetType(DoubleLiteral))
locbldr195.SetLocalSymInfo("dlit")
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Stloc, 8)
EmitLiteralIL.MarkSequencePoint(doc10, 811, 1, 811, 100)
Dim typ101(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(DoubleLiteral)
EmitLiteralIL.Emit(OpCodes.Ldfld, GetType(DoubleLiteral).GetField("NumVal"))
Typ = GetType(DoubleLiteral).GetField("NumVal").FieldType
ReDim Preserve typ101(UBound(typ101) + 1)
typ101(UBound(typ101)) = Typ
EmitLiteralIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdcR8", typ101))
Typ = GetType(ILEmitter).GetMethod("EmitLdcR8", typ101).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLiteralIL.Emit(OpCodes.Pop)
End If
EmitLiteralIL.MarkSequencePoint(doc10, 812, 1, 812, 100)
EmitLiteralIL.Emit(OpCodes.Br, label18)
EmitLiteralIL.MarkSequencePoint(doc10, 813, 1, 813, 100)
EmitLiteralIL.Emit(OpCodes.Br, cont130)
EmitLiteralIL.MarkLabel(fa130)
EmitLiteralIL.Emit(OpCodes.Br, cont130)
EmitLiteralIL.MarkLabel(cont130)
EmitLiteralIL.MarkSequencePoint(doc10, 815, 1, 815, 100)
EmitLiteralIL.Emit(OpCodes.Ldtoken, GetType(BooleanLiteral))
Dim typ102 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitLiteralIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ102))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ102).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 0)
EmitLiteralIL.MarkSequencePoint(doc10, 816, 1, 816, 100)
Dim typ103(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ103(UBound(typ103) + 1)
typ103(UBound(typ103)) = Typ
EmitLiteralIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ103))
Typ = Typ03.GetMethod("IsInstanceOfType", typ103).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 1)
EmitLiteralIL.MarkSequencePoint(doc10, 818, 1, 818, 100)
EmitLiteralIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitLiteralIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa131 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim tru131 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim cont131 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
EmitLiteralIL.Emit(OpCodes.Beq, tru131)
EmitLiteralIL.Emit(OpCodes.Br, fa131)
EmitLiteralIL.MarkLabel(tru131)
EmitLiteralIL.MarkSequencePoint(doc10, 819, 1, 819, 100)
Dim locbldr196 As LocalBuilder = EmitLiteralIL.DeclareLocal(GetType(BooleanLiteral))
locbldr196.SetLocalSymInfo("bllit")
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Stloc, 9)
EmitLiteralIL.MarkSequencePoint(doc10, 820, 1, 820, 100)
Dim typ104(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(BooleanLiteral)
EmitLiteralIL.Emit(OpCodes.Ldfld, GetType(BooleanLiteral).GetField("BoolVal"))
Typ = GetType(BooleanLiteral).GetField("BoolVal").FieldType
ReDim Preserve typ104(UBound(typ104) + 1)
typ104(UBound(typ104)) = Typ
EmitLiteralIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdcBool", typ104))
Typ = GetType(ILEmitter).GetMethod("EmitLdcBool", typ104).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLiteralIL.Emit(OpCodes.Pop)
End If
EmitLiteralIL.MarkSequencePoint(doc10, 821, 1, 821, 100)
EmitLiteralIL.Emit(OpCodes.Br, label18)
EmitLiteralIL.MarkSequencePoint(doc10, 822, 1, 822, 100)
EmitLiteralIL.Emit(OpCodes.Br, cont131)
EmitLiteralIL.MarkLabel(fa131)
EmitLiteralIL.Emit(OpCodes.Br, cont131)
EmitLiteralIL.MarkLabel(cont131)
EmitLiteralIL.MarkSequencePoint(doc10, 824, 1, 824, 100)
EmitLiteralIL.Emit(OpCodes.Ldtoken, GetType(CharLiteral))
Dim typ105 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitLiteralIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ105))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ105).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 0)
EmitLiteralIL.MarkSequencePoint(doc10, 825, 1, 825, 100)
Dim typ106(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ106(UBound(typ106) + 1)
typ106(UBound(typ106)) = Typ
EmitLiteralIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ106))
Typ = Typ03.GetMethod("IsInstanceOfType", typ106).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 1)
EmitLiteralIL.MarkSequencePoint(doc10, 827, 1, 827, 100)
EmitLiteralIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitLiteralIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa132 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim tru132 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim cont132 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
EmitLiteralIL.Emit(OpCodes.Beq, tru132)
EmitLiteralIL.Emit(OpCodes.Br, fa132)
EmitLiteralIL.MarkLabel(tru132)
EmitLiteralIL.MarkSequencePoint(doc10, 828, 1, 828, 100)
Dim locbldr197 As LocalBuilder = EmitLiteralIL.DeclareLocal(GetType(CharLiteral))
locbldr197.SetLocalSymInfo("clit")
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Stloc, 10)
EmitLiteralIL.MarkSequencePoint(doc10, 829, 1, 829, 100)
Dim typ107(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(CharLiteral)
EmitLiteralIL.Emit(OpCodes.Ldfld, GetType(CharLiteral).GetField("CharVal"))
Typ = GetType(CharLiteral).GetField("CharVal").FieldType
ReDim Preserve typ107(UBound(typ107) + 1)
typ107(UBound(typ107)) = Typ
EmitLiteralIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdcChar", typ107))
Typ = GetType(ILEmitter).GetMethod("EmitLdcChar", typ107).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLiteralIL.Emit(OpCodes.Pop)
End If
EmitLiteralIL.MarkSequencePoint(doc10, 830, 1, 830, 100)
EmitLiteralIL.Emit(OpCodes.Br, label18)
EmitLiteralIL.MarkSequencePoint(doc10, 831, 1, 831, 100)
EmitLiteralIL.Emit(OpCodes.Br, cont132)
EmitLiteralIL.MarkLabel(fa132)
EmitLiteralIL.Emit(OpCodes.Br, cont132)
EmitLiteralIL.MarkLabel(cont132)
EmitLiteralIL.MarkSequencePoint(doc10, 833, 1, 833, 100)
EmitLiteralIL.Emit(OpCodes.Ldtoken, GetType(NullLiteral))
Dim typ108 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitLiteralIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ108))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ108).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 0)
EmitLiteralIL.MarkSequencePoint(doc10, 834, 1, 834, 100)
Dim typ109(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ109(UBound(typ109) + 1)
typ109(UBound(typ109)) = Typ
EmitLiteralIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ109))
Typ = Typ03.GetMethod("IsInstanceOfType", typ109).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 1)
EmitLiteralIL.MarkSequencePoint(doc10, 836, 1, 836, 100)
EmitLiteralIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitLiteralIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa133 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim tru133 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim cont133 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
EmitLiteralIL.Emit(OpCodes.Beq, tru133)
EmitLiteralIL.Emit(OpCodes.Br, fa133)
EmitLiteralIL.MarkLabel(tru133)
EmitLiteralIL.MarkSequencePoint(doc10, 837, 1, 837, 100)
EmitLiteralIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdnull", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitLdnull", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLiteralIL.Emit(OpCodes.Pop)
End If
EmitLiteralIL.MarkSequencePoint(doc10, 838, 1, 838, 100)
EmitLiteralIL.Emit(OpCodes.Br, label18)
EmitLiteralIL.MarkSequencePoint(doc10, 839, 1, 839, 100)
EmitLiteralIL.Emit(OpCodes.Br, cont133)
EmitLiteralIL.MarkLabel(fa133)
EmitLiteralIL.Emit(OpCodes.Br, cont133)
EmitLiteralIL.MarkLabel(cont133)
EmitLiteralIL.MarkSequencePoint(doc10, 841, 1, 841, 100)
EmitLiteralIL.MarkLabel(label18)
EmitLiteralIL.MarkSequencePoint(doc10, 843, 1, 843, 100)
EmitLiteralIL.Emit(OpCodes.Ret)
Dim typ110(-1) As Type
ReDim Preserve typ110(UBound(typ110) + 1)
typ110(UBound(typ110)) = GetType(ConstLiteral)
Dim ProcessConst As MethodBuilder = Helpers.DefineMethod("ProcessConst", MethodAttributes.Public Or MethodAttributes.Static, GetType(Literal), typ110)
Dim ProcessConstIL As ILGenerator = ProcessConst.GetILGenerator()
Dim ProcessConstparam01 As ParameterBuilder = ProcessConst.DefineParameter(1, ParameterAttributes.None, "lit")
ProcessConstIL.MarkSequencePoint(doc10, 847, 1, 847, 100)
Dim label19 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
ProcessConstIL.MarkSequencePoint(doc10, 848, 1, 848, 100)
Dim locbldr198 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(System.Type))
locbldr198.SetLocalSymInfo("typ")
ProcessConstIL.MarkSequencePoint(doc10, 849, 1, 849, 100)
Dim locbldr199 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(System.Type))
locbldr199.SetLocalSymInfo("inttyp")
ProcessConstIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(ConstLiteral)
ProcessConstIL.Emit(OpCodes.Ldfld, GetType(ConstLiteral).GetField("IntTyp"))
Typ = GetType(ConstLiteral).GetField("IntTyp").FieldType
ProcessConstIL.Emit(OpCodes.Stloc, 1)
ProcessConstIL.MarkSequencePoint(doc10, 850, 1, 850, 100)
Dim locbldr200 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(System.Object))
locbldr200.SetLocalSymInfo("obj")
ProcessConstIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(ConstLiteral)
ProcessConstIL.Emit(OpCodes.Ldfld, GetType(ConstLiteral).GetField("ConstVal"))
Typ = GetType(ConstLiteral).GetField("ConstVal").FieldType
ProcessConstIL.Emit(OpCodes.Stloc, 2)
ProcessConstIL.MarkSequencePoint(doc10, 851, 1, 851, 100)
Dim locbldr201 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(System.Boolean))
locbldr201.SetLocalSymInfo("b")
ProcessConstIL.MarkSequencePoint(doc10, 853, 1, 853, 100)
ProcessConstIL.Emit(OpCodes.Ldtoken, GetType(System.String))
Dim typ111 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ111))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ111).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 0)
ProcessConstIL.MarkSequencePoint(doc10, 854, 1, 854, 100)
Dim typ112(-1) As Type
ProcessConstIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessConstIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
ReDim Preserve typ112(UBound(typ112) + 1)
typ112(UBound(typ112)) = Typ
ProcessConstIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ112))
Typ = Typ03.GetMethod("Equals", typ112).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 3)
ProcessConstIL.MarkSequencePoint(doc10, 856, 1, 856, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
ProcessConstIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa134 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim tru134 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim cont134 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
ProcessConstIL.Emit(OpCodes.Beq, tru134)
ProcessConstIL.Emit(OpCodes.Br, fa134)
ProcessConstIL.MarkLabel(tru134)
ProcessConstIL.MarkSequencePoint(doc10, 857, 1, 857, 100)
Dim locbldr202 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(StringLiteral))
locbldr202.SetLocalSymInfo("slit")
ProcessConstIL.Emit(OpCodes.Newobj, GetType(StringLiteral).GetConstructor(Type.EmptyTypes))
ProcessConstIL.Emit(OpCodes.Stloc, 4)
ProcessConstIL.MarkSequencePoint(doc10, 858, 1, 858, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(StringLiteral)
ProcessConstIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Object)
Dim typ113 As Type() = {Typ}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToString", typ113))
Typ = GetType(System.Convert).GetMethod("ToString", typ113).ReturnType
ProcessConstIL.Emit(OpCodes.Stfld, GetType(StringLiteral).GetField("Value"))
ProcessConstIL.MarkSequencePoint(doc10, 859, 1, 859, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(StringLiteral)
ProcessConstIL.MarkSequencePoint(doc10, 860, 1, 860, 100)
ProcessConstIL.Emit(OpCodes.Br, label19)
ProcessConstIL.MarkSequencePoint(doc10, 861, 1, 861, 100)
ProcessConstIL.Emit(OpCodes.Br, cont134)
ProcessConstIL.MarkLabel(fa134)
ProcessConstIL.Emit(OpCodes.Br, cont134)
ProcessConstIL.MarkLabel(cont134)
ProcessConstIL.MarkSequencePoint(doc10, 863, 1, 863, 100)
ProcessConstIL.Emit(OpCodes.Ldtoken, GetType(System.SByte))
Dim typ114 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ114))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ114).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 0)
ProcessConstIL.MarkSequencePoint(doc10, 864, 1, 864, 100)
Dim typ115(-1) As Type
ProcessConstIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessConstIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
ReDim Preserve typ115(UBound(typ115) + 1)
typ115(UBound(typ115)) = Typ
ProcessConstIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ115))
Typ = Typ03.GetMethod("Equals", typ115).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 3)
ProcessConstIL.MarkSequencePoint(doc10, 866, 1, 866, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
ProcessConstIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa135 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim tru135 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim cont135 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
ProcessConstIL.Emit(OpCodes.Beq, tru135)
ProcessConstIL.Emit(OpCodes.Br, fa135)
ProcessConstIL.MarkLabel(tru135)
ProcessConstIL.MarkSequencePoint(doc10, 867, 1, 867, 100)
Dim locbldr203 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(SByteLiteral))
locbldr203.SetLocalSymInfo("sblit")
ProcessConstIL.Emit(OpCodes.Newobj, GetType(SByteLiteral).GetConstructor(Type.EmptyTypes))
ProcessConstIL.Emit(OpCodes.Stloc, 5)
ProcessConstIL.MarkSequencePoint(doc10, 868, 1, 868, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(SByteLiteral)
ProcessConstIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Object)
Dim typ116 As Type() = {Typ}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToSByte", typ116))
Typ = GetType(System.Convert).GetMethod("ToSByte", typ116).ReturnType
ProcessConstIL.Emit(OpCodes.Stfld, GetType(SByteLiteral).GetField("NumVal"))
ProcessConstIL.MarkSequencePoint(doc10, 869, 1, 869, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(SByteLiteral)
ProcessConstIL.MarkSequencePoint(doc10, 870, 1, 870, 100)
ProcessConstIL.Emit(OpCodes.Br, label19)
ProcessConstIL.MarkSequencePoint(doc10, 871, 1, 871, 100)
ProcessConstIL.Emit(OpCodes.Br, cont135)
ProcessConstIL.MarkLabel(fa135)
ProcessConstIL.Emit(OpCodes.Br, cont135)
ProcessConstIL.MarkLabel(cont135)
ProcessConstIL.MarkSequencePoint(doc10, 873, 1, 873, 100)
ProcessConstIL.Emit(OpCodes.Ldtoken, GetType(System.Int16))
Dim typ117 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ117))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ117).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 0)
ProcessConstIL.MarkSequencePoint(doc10, 874, 1, 874, 100)
Dim typ118(-1) As Type
ProcessConstIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessConstIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
ReDim Preserve typ118(UBound(typ118) + 1)
typ118(UBound(typ118)) = Typ
ProcessConstIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ118))
Typ = Typ03.GetMethod("Equals", typ118).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 3)
ProcessConstIL.MarkSequencePoint(doc10, 876, 1, 876, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
ProcessConstIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa136 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim tru136 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim cont136 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
ProcessConstIL.Emit(OpCodes.Beq, tru136)
ProcessConstIL.Emit(OpCodes.Br, fa136)
ProcessConstIL.MarkLabel(tru136)
ProcessConstIL.MarkSequencePoint(doc10, 877, 1, 877, 100)
Dim locbldr204 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(ShortLiteral))
locbldr204.SetLocalSymInfo("shlit")
ProcessConstIL.Emit(OpCodes.Newobj, GetType(ShortLiteral).GetConstructor(Type.EmptyTypes))
ProcessConstIL.Emit(OpCodes.Stloc, 6)
ProcessConstIL.MarkSequencePoint(doc10, 878, 1, 878, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(ShortLiteral)
ProcessConstIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Object)
Dim typ119 As Type() = {Typ}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToInt16", typ119))
Typ = GetType(System.Convert).GetMethod("ToInt16", typ119).ReturnType
ProcessConstIL.Emit(OpCodes.Stfld, GetType(ShortLiteral).GetField("NumVal"))
ProcessConstIL.MarkSequencePoint(doc10, 879, 1, 879, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(ShortLiteral)
ProcessConstIL.MarkSequencePoint(doc10, 880, 1, 880, 100)
ProcessConstIL.Emit(OpCodes.Br, label19)
ProcessConstIL.MarkSequencePoint(doc10, 881, 1, 881, 100)
ProcessConstIL.Emit(OpCodes.Br, cont136)
ProcessConstIL.MarkLabel(fa136)
ProcessConstIL.Emit(OpCodes.Br, cont136)
ProcessConstIL.MarkLabel(cont136)
ProcessConstIL.MarkSequencePoint(doc10, 883, 1, 883, 100)
ProcessConstIL.Emit(OpCodes.Ldtoken, GetType(System.Int32))
Dim typ120 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ120))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ120).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 0)
ProcessConstIL.MarkSequencePoint(doc10, 884, 1, 884, 100)
Dim typ121(-1) As Type
ProcessConstIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessConstIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
ReDim Preserve typ121(UBound(typ121) + 1)
typ121(UBound(typ121)) = Typ
ProcessConstIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ121))
Typ = Typ03.GetMethod("Equals", typ121).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 3)
ProcessConstIL.MarkSequencePoint(doc10, 886, 1, 886, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
ProcessConstIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa137 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim tru137 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim cont137 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
ProcessConstIL.Emit(OpCodes.Beq, tru137)
ProcessConstIL.Emit(OpCodes.Br, fa137)
ProcessConstIL.MarkLabel(tru137)
ProcessConstIL.MarkSequencePoint(doc10, 887, 1, 887, 100)
Dim locbldr205 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(IntLiteral))
locbldr205.SetLocalSymInfo("ilit")
ProcessConstIL.Emit(OpCodes.Newobj, GetType(IntLiteral).GetConstructor(Type.EmptyTypes))
ProcessConstIL.Emit(OpCodes.Stloc, 7)
ProcessConstIL.MarkSequencePoint(doc10, 888, 1, 888, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(IntLiteral)
ProcessConstIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Object)
Dim typ122 As Type() = {Typ}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToInt32", typ122))
Typ = GetType(System.Convert).GetMethod("ToInt32", typ122).ReturnType
ProcessConstIL.Emit(OpCodes.Stfld, GetType(IntLiteral).GetField("NumVal"))
ProcessConstIL.MarkSequencePoint(doc10, 889, 1, 889, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(IntLiteral)
ProcessConstIL.MarkSequencePoint(doc10, 890, 1, 890, 100)
ProcessConstIL.Emit(OpCodes.Br, label19)
ProcessConstIL.MarkSequencePoint(doc10, 891, 1, 891, 100)
ProcessConstIL.Emit(OpCodes.Br, cont137)
ProcessConstIL.MarkLabel(fa137)
ProcessConstIL.Emit(OpCodes.Br, cont137)
ProcessConstIL.MarkLabel(cont137)
ProcessConstIL.MarkSequencePoint(doc10, 893, 1, 893, 100)
ProcessConstIL.Emit(OpCodes.Ldtoken, GetType(System.Int64))
Dim typ123 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ123))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ123).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 0)
ProcessConstIL.MarkSequencePoint(doc10, 894, 1, 894, 100)
Dim typ124(-1) As Type
ProcessConstIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessConstIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
ReDim Preserve typ124(UBound(typ124) + 1)
typ124(UBound(typ124)) = Typ
ProcessConstIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ124))
Typ = Typ03.GetMethod("Equals", typ124).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 3)
ProcessConstIL.MarkSequencePoint(doc10, 896, 1, 896, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
ProcessConstIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa138 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim tru138 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim cont138 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
ProcessConstIL.Emit(OpCodes.Beq, tru138)
ProcessConstIL.Emit(OpCodes.Br, fa138)
ProcessConstIL.MarkLabel(tru138)
ProcessConstIL.MarkSequencePoint(doc10, 897, 1, 897, 100)
Dim locbldr206 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(LongLiteral))
locbldr206.SetLocalSymInfo("llit")
ProcessConstIL.Emit(OpCodes.Newobj, GetType(LongLiteral).GetConstructor(Type.EmptyTypes))
ProcessConstIL.Emit(OpCodes.Stloc, 8)
ProcessConstIL.MarkSequencePoint(doc10, 898, 1, 898, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(LongLiteral)
ProcessConstIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Object)
Dim typ125 As Type() = {Typ}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToInt64", typ125))
Typ = GetType(System.Convert).GetMethod("ToInt64", typ125).ReturnType
ProcessConstIL.Emit(OpCodes.Stfld, GetType(LongLiteral).GetField("NumVal"))
ProcessConstIL.MarkSequencePoint(doc10, 899, 1, 899, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(LongLiteral)
ProcessConstIL.MarkSequencePoint(doc10, 900, 1, 900, 100)
ProcessConstIL.Emit(OpCodes.Br, label19)
ProcessConstIL.MarkSequencePoint(doc10, 901, 1, 901, 100)
ProcessConstIL.Emit(OpCodes.Br, cont138)
ProcessConstIL.MarkLabel(fa138)
ProcessConstIL.Emit(OpCodes.Br, cont138)
ProcessConstIL.MarkLabel(cont138)
ProcessConstIL.MarkSequencePoint(doc10, 903, 1, 903, 100)
ProcessConstIL.Emit(OpCodes.Ldtoken, GetType(System.Single))
Dim typ126 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ126))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ126).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 0)
ProcessConstIL.MarkSequencePoint(doc10, 904, 1, 904, 100)
Dim typ127(-1) As Type
ProcessConstIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessConstIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
ReDim Preserve typ127(UBound(typ127) + 1)
typ127(UBound(typ127)) = Typ
ProcessConstIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ127))
Typ = Typ03.GetMethod("Equals", typ127).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 3)
ProcessConstIL.MarkSequencePoint(doc10, 906, 1, 906, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
ProcessConstIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa139 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim tru139 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim cont139 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
ProcessConstIL.Emit(OpCodes.Beq, tru139)
ProcessConstIL.Emit(OpCodes.Br, fa139)
ProcessConstIL.MarkLabel(tru139)
ProcessConstIL.MarkSequencePoint(doc10, 907, 1, 907, 100)
Dim locbldr207 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(FloatLiteral))
locbldr207.SetLocalSymInfo("flit")
ProcessConstIL.Emit(OpCodes.Newobj, GetType(FloatLiteral).GetConstructor(Type.EmptyTypes))
ProcessConstIL.Emit(OpCodes.Stloc, 9)
ProcessConstIL.MarkSequencePoint(doc10, 908, 1, 908, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(FloatLiteral)
ProcessConstIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Object)
Dim typ128 As Type() = {Typ}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToSingle", typ128))
Typ = GetType(System.Convert).GetMethod("ToSingle", typ128).ReturnType
ProcessConstIL.Emit(OpCodes.Stfld, GetType(FloatLiteral).GetField("NumVal"))
ProcessConstIL.MarkSequencePoint(doc10, 909, 1, 909, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(FloatLiteral)
ProcessConstIL.MarkSequencePoint(doc10, 910, 1, 910, 100)
ProcessConstIL.Emit(OpCodes.Br, label19)
ProcessConstIL.MarkSequencePoint(doc10, 911, 1, 911, 100)
ProcessConstIL.Emit(OpCodes.Br, cont139)
ProcessConstIL.MarkLabel(fa139)
ProcessConstIL.Emit(OpCodes.Br, cont139)
ProcessConstIL.MarkLabel(cont139)
ProcessConstIL.MarkSequencePoint(doc10, 913, 1, 913, 100)
ProcessConstIL.Emit(OpCodes.Ldtoken, GetType(System.Double))
Dim typ129 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ129))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ129).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 0)
ProcessConstIL.MarkSequencePoint(doc10, 914, 1, 914, 100)
Dim typ130(-1) As Type
ProcessConstIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessConstIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
ReDim Preserve typ130(UBound(typ130) + 1)
typ130(UBound(typ130)) = Typ
ProcessConstIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ130))
Typ = Typ03.GetMethod("Equals", typ130).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 3)
ProcessConstIL.MarkSequencePoint(doc10, 916, 1, 916, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
ProcessConstIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa140 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim tru140 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim cont140 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
ProcessConstIL.Emit(OpCodes.Beq, tru140)
ProcessConstIL.Emit(OpCodes.Br, fa140)
ProcessConstIL.MarkLabel(tru140)
ProcessConstIL.MarkSequencePoint(doc10, 917, 1, 917, 100)
Dim locbldr208 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(DoubleLiteral))
locbldr208.SetLocalSymInfo("dlit")
ProcessConstIL.Emit(OpCodes.Newobj, GetType(DoubleLiteral).GetConstructor(Type.EmptyTypes))
ProcessConstIL.Emit(OpCodes.Stloc, 10)
ProcessConstIL.MarkSequencePoint(doc10, 918, 1, 918, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(DoubleLiteral)
ProcessConstIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Object)
Dim typ131 As Type() = {Typ}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToDouble", typ131))
Typ = GetType(System.Convert).GetMethod("ToDouble", typ131).ReturnType
ProcessConstIL.Emit(OpCodes.Stfld, GetType(DoubleLiteral).GetField("NumVal"))
ProcessConstIL.MarkSequencePoint(doc10, 919, 1, 919, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(DoubleLiteral)
ProcessConstIL.MarkSequencePoint(doc10, 920, 1, 920, 100)
ProcessConstIL.Emit(OpCodes.Br, label19)
ProcessConstIL.MarkSequencePoint(doc10, 921, 1, 921, 100)
ProcessConstIL.Emit(OpCodes.Br, cont140)
ProcessConstIL.MarkLabel(fa140)
ProcessConstIL.Emit(OpCodes.Br, cont140)
ProcessConstIL.MarkLabel(cont140)
ProcessConstIL.MarkSequencePoint(doc10, 923, 1, 923, 100)
ProcessConstIL.Emit(OpCodes.Ldtoken, GetType(System.Boolean))
Dim typ132 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ132))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ132).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 0)
ProcessConstIL.MarkSequencePoint(doc10, 924, 1, 924, 100)
Dim typ133(-1) As Type
ProcessConstIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessConstIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
ReDim Preserve typ133(UBound(typ133) + 1)
typ133(UBound(typ133)) = Typ
ProcessConstIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ133))
Typ = Typ03.GetMethod("Equals", typ133).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 3)
ProcessConstIL.MarkSequencePoint(doc10, 926, 1, 926, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
ProcessConstIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa141 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim tru141 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim cont141 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
ProcessConstIL.Emit(OpCodes.Beq, tru141)
ProcessConstIL.Emit(OpCodes.Br, fa141)
ProcessConstIL.MarkLabel(tru141)
ProcessConstIL.MarkSequencePoint(doc10, 927, 1, 927, 100)
Dim locbldr209 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(BooleanLiteral))
locbldr209.SetLocalSymInfo("bllit")
ProcessConstIL.Emit(OpCodes.Newobj, GetType(BooleanLiteral).GetConstructor(Type.EmptyTypes))
ProcessConstIL.Emit(OpCodes.Stloc, 11)
ProcessConstIL.MarkSequencePoint(doc10, 928, 1, 928, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(BooleanLiteral)
ProcessConstIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Object)
Dim typ134 As Type() = {Typ}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToBoolean", typ134))
Typ = GetType(System.Convert).GetMethod("ToBoolean", typ134).ReturnType
ProcessConstIL.Emit(OpCodes.Stfld, GetType(BooleanLiteral).GetField("BoolVal"))
ProcessConstIL.MarkSequencePoint(doc10, 929, 1, 929, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(BooleanLiteral)
ProcessConstIL.MarkSequencePoint(doc10, 930, 1, 930, 100)
ProcessConstIL.Emit(OpCodes.Br, label19)
ProcessConstIL.MarkSequencePoint(doc10, 931, 1, 931, 100)
ProcessConstIL.Emit(OpCodes.Br, cont141)
ProcessConstIL.MarkLabel(fa141)
ProcessConstIL.Emit(OpCodes.Br, cont141)
ProcessConstIL.MarkLabel(cont141)
ProcessConstIL.MarkSequencePoint(doc10, 933, 1, 933, 100)
ProcessConstIL.Emit(OpCodes.Ldtoken, GetType(System.Char))
Dim typ135 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ135))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ135).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 0)
ProcessConstIL.MarkSequencePoint(doc10, 934, 1, 934, 100)
Dim typ136(-1) As Type
ProcessConstIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessConstIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
ReDim Preserve typ136(UBound(typ136) + 1)
typ136(UBound(typ136)) = Typ
ProcessConstIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ136))
Typ = Typ03.GetMethod("Equals", typ136).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 3)
ProcessConstIL.MarkSequencePoint(doc10, 936, 1, 936, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
ProcessConstIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa142 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim tru142 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim cont142 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
ProcessConstIL.Emit(OpCodes.Beq, tru142)
ProcessConstIL.Emit(OpCodes.Br, fa142)
ProcessConstIL.MarkLabel(tru142)
ProcessConstIL.MarkSequencePoint(doc10, 937, 1, 937, 100)
Dim locbldr210 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(CharLiteral))
locbldr210.SetLocalSymInfo("clit")
ProcessConstIL.Emit(OpCodes.Newobj, GetType(CharLiteral).GetConstructor(Type.EmptyTypes))
ProcessConstIL.Emit(OpCodes.Stloc, 12)
ProcessConstIL.MarkSequencePoint(doc10, 938, 1, 938, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(CharLiteral)
ProcessConstIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Object)
Dim typ137 As Type() = {Typ}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ137))
Typ = GetType(System.Convert).GetMethod("ToChar", typ137).ReturnType
ProcessConstIL.Emit(OpCodes.Stfld, GetType(CharLiteral).GetField("CharVal"))
ProcessConstIL.MarkSequencePoint(doc10, 939, 1, 939, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(CharLiteral)
ProcessConstIL.MarkSequencePoint(doc10, 940, 1, 940, 100)
ProcessConstIL.Emit(OpCodes.Br, label19)
ProcessConstIL.MarkSequencePoint(doc10, 941, 1, 941, 100)
ProcessConstIL.Emit(OpCodes.Br, cont142)
ProcessConstIL.MarkLabel(fa142)
ProcessConstIL.Emit(OpCodes.Br, cont142)
ProcessConstIL.MarkLabel(cont142)
ProcessConstIL.MarkSequencePoint(doc10, 943, 1, 943, 100)
ProcessConstIL.Emit(OpCodes.Ldtoken, GetType(System.Object))
Dim typ138 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ138))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ138).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 0)
ProcessConstIL.MarkSequencePoint(doc10, 944, 1, 944, 100)
Dim typ139(-1) As Type
ProcessConstIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessConstIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
ReDim Preserve typ139(UBound(typ139) + 1)
typ139(UBound(typ139)) = Typ
ProcessConstIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ139))
Typ = Typ03.GetMethod("Equals", typ139).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 3)
ProcessConstIL.MarkSequencePoint(doc10, 946, 1, 946, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
ProcessConstIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa143 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim tru143 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim cont143 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
ProcessConstIL.Emit(OpCodes.Beq, tru143)
ProcessConstIL.Emit(OpCodes.Br, fa143)
ProcessConstIL.MarkLabel(tru143)
ProcessConstIL.MarkSequencePoint(doc10, 947, 1, 947, 100)
Dim locbldr211 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(NullLiteral))
locbldr211.SetLocalSymInfo("nlit")
ProcessConstIL.Emit(OpCodes.Newobj, GetType(NullLiteral).GetConstructor(Type.EmptyTypes))
ProcessConstIL.Emit(OpCodes.Stloc, 13)
ProcessConstIL.MarkSequencePoint(doc10, 948, 1, 948, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(NullLiteral)
ProcessConstIL.MarkSequencePoint(doc10, 949, 1, 949, 100)
ProcessConstIL.Emit(OpCodes.Br, label19)
ProcessConstIL.MarkSequencePoint(doc10, 950, 1, 950, 100)
ProcessConstIL.Emit(OpCodes.Br, cont143)
ProcessConstIL.MarkLabel(fa143)
ProcessConstIL.Emit(OpCodes.Br, cont143)
ProcessConstIL.MarkLabel(cont143)
ProcessConstIL.MarkSequencePoint(doc10, 953, 1, 953, 100)
ProcessConstIL.Emit(OpCodes.Ldnull)
ProcessConstIL.MarkSequencePoint(doc10, 955, 1, 955, 100)
ProcessConstIL.MarkLabel(label19)
ProcessConstIL.MarkSequencePoint(doc10, 957, 1, 957, 100)
ProcessConstIL.Emit(OpCodes.Ret)
Dim typ140(-1) As Type
ReDim Preserve typ140(UBound(typ140) + 1)
typ140(UBound(typ140)) = GetType(Op)
ReDim Preserve typ140(UBound(typ140) + 1)
typ140(UBound(typ140)) = GetType(System.Boolean)
Dim EmitOp As MethodBuilder = Helpers.DefineMethod("EmitOp", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ140)
Dim EmitOpIL As ILGenerator = EmitOp.GetILGenerator()
Dim EmitOpparam01 As ParameterBuilder = EmitOp.DefineParameter(1, ParameterAttributes.None, "op")
Dim EmitOpparam02 As ParameterBuilder = EmitOp.DefineParameter(2, ParameterAttributes.None, "s")
EmitOpIL.MarkSequencePoint(doc10, 962, 1, 962, 100)
Dim label20 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.MarkSequencePoint(doc10, 963, 1, 963, 100)
Dim locbldr212 As LocalBuilder = EmitOpIL.DeclareLocal(GetType(System.Type))
locbldr212.SetLocalSymInfo("typ")
EmitOpIL.MarkSequencePoint(doc10, 964, 1, 964, 100)
Dim locbldr213 As LocalBuilder = EmitOpIL.DeclareLocal(GetType(System.Boolean))
locbldr213.SetLocalSymInfo("b")
EmitOpIL.MarkSequencePoint(doc10, 965, 1, 965, 100)
Dim locbldr214 As LocalBuilder = EmitOpIL.DeclareLocal(GetType(MethodInfo))
locbldr214.SetLocalSymInfo("mtd")
EmitOpIL.Emit(OpCodes.Ldnull)
EmitOpIL.Emit(OpCodes.Stloc, 2)
EmitOpIL.MarkSequencePoint(doc10, 967, 1, 967, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(AddOp))
Dim typ141 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ141))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ141).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc10, 968, 1, 968, 100)
Dim typ142(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ142(UBound(typ142) + 1)
typ142(UBound(typ142)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ142))
Typ = Typ03.GetMethod("IsInstanceOfType", typ142).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc10, 970, 1, 970, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa144 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru144 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont144 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru144)
EmitOpIL.Emit(OpCodes.Br, fa144)
EmitOpIL.MarkLabel(tru144)
EmitOpIL.MarkSequencePoint(doc10, 971, 1, 971, 100)
Dim typ143(-1) As Type
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ143(UBound(typ143) + 1)
typ143(UBound(typ143)) = Typ
EmitOpIL.Emit(OpCodes.Ldstr, "op_Addition")
Typ = GetType(System.String)
ReDim Preserve typ143(UBound(typ143) + 1)
typ143(UBound(typ143)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ143(UBound(typ143) + 1)
typ143(UBound(typ143)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, RightOp)
Typ = RightOp.FieldType
ReDim Preserve typ143(UBound(typ143) + 1)
typ143(UBound(typ143)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadBinOp", typ143))
Typ = GetType(Loader).GetMethod("LoadBinOp", typ143).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 2)
EmitOpIL.MarkSequencePoint(doc10, 972, 1, 972, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
EmitOpIL.Emit(OpCodes.Ldnull)
Dim fa145 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru145 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont145 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, fa145)
EmitOpIL.Emit(OpCodes.Br, tru145)
EmitOpIL.MarkLabel(tru145)
EmitOpIL.MarkSequencePoint(doc10, 973, 1, 973, 100)
Dim typ144(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
ReDim Preserve typ144(UBound(typ144) + 1)
typ144(UBound(typ144)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ144))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ144).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc10, 974, 1, 974, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
EmitOpIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
EmitOpIL.MarkSequencePoint(doc10, 975, 1, 975, 100)
EmitOpIL.Emit(OpCodes.Br, cont145)
EmitOpIL.MarkLabel(fa145)
EmitOpIL.MarkSequencePoint(doc10, 976, 1, 976, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, StringFlg)
Typ = StringFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa146 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru146 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont146 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru146)
EmitOpIL.Emit(OpCodes.Br, fa146)
EmitOpIL.MarkLabel(tru146)
EmitOpIL.MarkSequencePoint(doc10, 977, 1, 977, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitStrAdd", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitStrAdd", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc10, 978, 1, 978, 100)
EmitOpIL.Emit(OpCodes.Br, cont146)
EmitOpIL.MarkLabel(fa146)
EmitOpIL.MarkSequencePoint(doc10, 979, 1, 979, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, DelegateFlg)
Typ = DelegateFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa147 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru147 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont147 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru147)
EmitOpIL.Emit(OpCodes.Br, fa147)
EmitOpIL.MarkLabel(tru147)
EmitOpIL.MarkSequencePoint(doc10, 980, 1, 980, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitDelegateAdd", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitDelegateAdd", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc10, 981, 1, 981, 100)
EmitOpIL.Emit(OpCodes.Br, cont147)
EmitOpIL.MarkLabel(fa147)
EmitOpIL.MarkSequencePoint(doc10, 982, 1, 982, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, OpCodeSuppFlg)
Typ = OpCodeSuppFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa148 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru148 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont148 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru148)
EmitOpIL.Emit(OpCodes.Br, fa148)
EmitOpIL.MarkLabel(tru148)
EmitOpIL.MarkSequencePoint(doc10, 983, 1, 983, 100)
Dim typ146(-1) As Type
EmitOpIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ146(UBound(typ146) + 1)
typ146(UBound(typ146)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitAdd", typ146))
Typ = GetType(ILEmitter).GetMethod("EmitAdd", typ146).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc10, 984, 1, 984, 100)
EmitOpIL.Emit(OpCodes.Br, cont148)
EmitOpIL.MarkLabel(fa148)
EmitOpIL.Emit(OpCodes.Br, cont148)
EmitOpIL.MarkLabel(cont148)
EmitOpIL.MarkSequencePoint(doc10, 985, 1, 985, 100)
EmitOpIL.Emit(OpCodes.Br, cont147)
EmitOpIL.MarkLabel(cont147)
EmitOpIL.MarkSequencePoint(doc10, 986, 1, 986, 100)
EmitOpIL.Emit(OpCodes.Br, cont146)
EmitOpIL.MarkLabel(cont146)
EmitOpIL.MarkSequencePoint(doc10, 987, 1, 987, 100)
EmitOpIL.Emit(OpCodes.Br, cont145)
EmitOpIL.MarkLabel(cont145)
EmitOpIL.MarkSequencePoint(doc10, 988, 1, 988, 100)
EmitOpIL.Emit(OpCodes.Br, label20)
EmitOpIL.MarkSequencePoint(doc10, 989, 1, 989, 100)
EmitOpIL.Emit(OpCodes.Br, cont144)
EmitOpIL.MarkLabel(fa144)
EmitOpIL.Emit(OpCodes.Br, cont144)
EmitOpIL.MarkLabel(cont144)
EmitOpIL.MarkSequencePoint(doc10, 991, 1, 991, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(MulOp))
Dim typ147 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ147))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ147).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc10, 992, 1, 992, 100)
Dim typ148(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ148(UBound(typ148) + 1)
typ148(UBound(typ148)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ148))
Typ = Typ03.GetMethod("IsInstanceOfType", typ148).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc10, 994, 1, 994, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa149 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru149 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont149 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru149)
EmitOpIL.Emit(OpCodes.Br, fa149)
EmitOpIL.MarkLabel(tru149)
EmitOpIL.MarkSequencePoint(doc10, 995, 1, 995, 100)
Dim typ149(-1) As Type
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ149(UBound(typ149) + 1)
typ149(UBound(typ149)) = Typ
EmitOpIL.Emit(OpCodes.Ldstr, "op_Multiply")
Typ = GetType(System.String)
ReDim Preserve typ149(UBound(typ149) + 1)
typ149(UBound(typ149)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ149(UBound(typ149) + 1)
typ149(UBound(typ149)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, RightOp)
Typ = RightOp.FieldType
ReDim Preserve typ149(UBound(typ149) + 1)
typ149(UBound(typ149)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadBinOp", typ149))
Typ = GetType(Loader).GetMethod("LoadBinOp", typ149).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 2)
EmitOpIL.MarkSequencePoint(doc10, 996, 1, 996, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
EmitOpIL.Emit(OpCodes.Ldnull)
Dim fa150 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru150 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont150 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, fa150)
EmitOpIL.Emit(OpCodes.Br, tru150)
EmitOpIL.MarkLabel(tru150)
EmitOpIL.MarkSequencePoint(doc10, 997, 1, 997, 100)
Dim typ150(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
ReDim Preserve typ150(UBound(typ150) + 1)
typ150(UBound(typ150)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ150))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ150).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc10, 998, 1, 998, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
EmitOpIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
EmitOpIL.MarkSequencePoint(doc10, 999, 1, 999, 100)
EmitOpIL.Emit(OpCodes.Br, cont150)
EmitOpIL.MarkLabel(fa150)
EmitOpIL.MarkSequencePoint(doc10, 1000, 1, 1000, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, OpCodeSuppFlg)
Typ = OpCodeSuppFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa151 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru151 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont151 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru151)
EmitOpIL.Emit(OpCodes.Br, fa151)
EmitOpIL.MarkLabel(tru151)
EmitOpIL.MarkSequencePoint(doc10, 1001, 1, 1001, 100)
Dim typ152(-1) As Type
EmitOpIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ152(UBound(typ152) + 1)
typ152(UBound(typ152)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitMul", typ152))
Typ = GetType(ILEmitter).GetMethod("EmitMul", typ152).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc10, 1002, 1, 1002, 100)
EmitOpIL.Emit(OpCodes.Br, cont151)
EmitOpIL.MarkLabel(fa151)
EmitOpIL.Emit(OpCodes.Br, cont151)
EmitOpIL.MarkLabel(cont151)
EmitOpIL.MarkSequencePoint(doc10, 1003, 1, 1003, 100)
EmitOpIL.Emit(OpCodes.Br, cont150)
EmitOpIL.MarkLabel(cont150)
EmitOpIL.MarkSequencePoint(doc10, 1004, 1, 1004, 100)
EmitOpIL.Emit(OpCodes.Br, label20)
EmitOpIL.MarkSequencePoint(doc10, 1005, 1, 1005, 100)
EmitOpIL.Emit(OpCodes.Br, cont149)
EmitOpIL.MarkLabel(fa149)
EmitOpIL.Emit(OpCodes.Br, cont149)
EmitOpIL.MarkLabel(cont149)
EmitOpIL.MarkSequencePoint(doc10, 1007, 1, 1007, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(SubOp))
Dim typ153 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ153))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ153).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc10, 1008, 1, 1008, 100)
Dim typ154(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ154(UBound(typ154) + 1)
typ154(UBound(typ154)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ154))
Typ = Typ03.GetMethod("IsInstanceOfType", typ154).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc10, 1010, 1, 1010, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa152 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru152 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont152 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru152)
EmitOpIL.Emit(OpCodes.Br, fa152)
EmitOpIL.MarkLabel(tru152)
EmitOpIL.MarkSequencePoint(doc10, 1011, 1, 1011, 100)
Dim typ155(-1) As Type
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ155(UBound(typ155) + 1)
typ155(UBound(typ155)) = Typ
EmitOpIL.Emit(OpCodes.Ldstr, "op_Subtraction")
Typ = GetType(System.String)
ReDim Preserve typ155(UBound(typ155) + 1)
typ155(UBound(typ155)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ155(UBound(typ155) + 1)
typ155(UBound(typ155)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, RightOp)
Typ = RightOp.FieldType
ReDim Preserve typ155(UBound(typ155) + 1)
typ155(UBound(typ155)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadBinOp", typ155))
Typ = GetType(Loader).GetMethod("LoadBinOp", typ155).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 2)
EmitOpIL.MarkSequencePoint(doc10, 1012, 1, 1012, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
EmitOpIL.Emit(OpCodes.Ldnull)
Dim fa153 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru153 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont153 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, fa153)
EmitOpIL.Emit(OpCodes.Br, tru153)
EmitOpIL.MarkLabel(tru153)
EmitOpIL.MarkSequencePoint(doc10, 1013, 1, 1013, 100)
Dim typ156(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
ReDim Preserve typ156(UBound(typ156) + 1)
typ156(UBound(typ156)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ156))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ156).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc10, 1014, 1, 1014, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
EmitOpIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
EmitOpIL.MarkSequencePoint(doc10, 1015, 1, 1015, 100)
EmitOpIL.Emit(OpCodes.Br, cont153)
EmitOpIL.MarkLabel(fa153)
EmitOpIL.MarkSequencePoint(doc10, 1016, 1, 1016, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, DelegateFlg)
Typ = DelegateFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa154 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru154 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont154 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru154)
EmitOpIL.Emit(OpCodes.Br, fa154)
EmitOpIL.MarkLabel(tru154)
EmitOpIL.MarkSequencePoint(doc10, 1017, 1, 1017, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitDelegateSub", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitDelegateSub", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc10, 1018, 1, 1018, 100)
EmitOpIL.Emit(OpCodes.Br, cont154)
EmitOpIL.MarkLabel(fa154)
EmitOpIL.MarkSequencePoint(doc10, 1019, 1, 1019, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, OpCodeSuppFlg)
Typ = OpCodeSuppFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa155 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru155 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont155 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru155)
EmitOpIL.Emit(OpCodes.Br, fa155)
EmitOpIL.MarkLabel(tru155)
EmitOpIL.MarkSequencePoint(doc10, 1020, 1, 1020, 100)
Dim typ158(-1) As Type
EmitOpIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ158(UBound(typ158) + 1)
typ158(UBound(typ158)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitSub", typ158))
Typ = GetType(ILEmitter).GetMethod("EmitSub", typ158).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc10, 1021, 1, 1021, 100)
EmitOpIL.Emit(OpCodes.Br, cont155)
EmitOpIL.MarkLabel(fa155)
EmitOpIL.Emit(OpCodes.Br, cont155)
EmitOpIL.MarkLabel(cont155)
EmitOpIL.MarkSequencePoint(doc10, 1022, 1, 1022, 100)
EmitOpIL.Emit(OpCodes.Br, cont154)
EmitOpIL.MarkLabel(cont154)
EmitOpIL.MarkSequencePoint(doc10, 1023, 1, 1023, 100)
EmitOpIL.Emit(OpCodes.Br, cont153)
EmitOpIL.MarkLabel(cont153)
EmitOpIL.MarkSequencePoint(doc10, 1024, 1, 1024, 100)
EmitOpIL.Emit(OpCodes.Br, label20)
EmitOpIL.MarkSequencePoint(doc10, 1025, 1, 1025, 100)
EmitOpIL.Emit(OpCodes.Br, cont152)
EmitOpIL.MarkLabel(fa152)
EmitOpIL.Emit(OpCodes.Br, cont152)
EmitOpIL.MarkLabel(cont152)
EmitOpIL.MarkSequencePoint(doc10, 1027, 1, 1027, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(DivOp))
Dim typ159 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ159))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ159).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc10, 1028, 1, 1028, 100)
Dim typ160(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ160(UBound(typ160) + 1)
typ160(UBound(typ160)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ160))
Typ = Typ03.GetMethod("IsInstanceOfType", typ160).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc10, 1030, 1, 1030, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa156 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru156 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont156 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru156)
EmitOpIL.Emit(OpCodes.Br, fa156)
EmitOpIL.MarkLabel(tru156)
EmitOpIL.MarkSequencePoint(doc10, 1031, 1, 1031, 100)
Dim typ161(-1) As Type
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ161(UBound(typ161) + 1)
typ161(UBound(typ161)) = Typ
EmitOpIL.Emit(OpCodes.Ldstr, "op_Division")
Typ = GetType(System.String)
ReDim Preserve typ161(UBound(typ161) + 1)
typ161(UBound(typ161)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ161(UBound(typ161) + 1)
typ161(UBound(typ161)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, RightOp)
Typ = RightOp.FieldType
ReDim Preserve typ161(UBound(typ161) + 1)
typ161(UBound(typ161)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadBinOp", typ161))
Typ = GetType(Loader).GetMethod("LoadBinOp", typ161).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 2)
EmitOpIL.MarkSequencePoint(doc10, 1032, 1, 1032, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
EmitOpIL.Emit(OpCodes.Ldnull)
Dim fa157 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru157 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont157 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, fa157)
EmitOpIL.Emit(OpCodes.Br, tru157)
EmitOpIL.MarkLabel(tru157)
EmitOpIL.MarkSequencePoint(doc10, 1033, 1, 1033, 100)
Dim typ162(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
ReDim Preserve typ162(UBound(typ162) + 1)
typ162(UBound(typ162)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ162))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ162).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc10, 1034, 1, 1034, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
EmitOpIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
EmitOpIL.MarkSequencePoint(doc10, 1035, 1, 1035, 100)
EmitOpIL.Emit(OpCodes.Br, cont157)
EmitOpIL.MarkLabel(fa157)
EmitOpIL.MarkSequencePoint(doc10, 1036, 1, 1036, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, OpCodeSuppFlg)
Typ = OpCodeSuppFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa158 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru158 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont158 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru158)
EmitOpIL.Emit(OpCodes.Br, fa158)
EmitOpIL.MarkLabel(tru158)
EmitOpIL.MarkSequencePoint(doc10, 1037, 1, 1037, 100)
Dim typ164(-1) As Type
EmitOpIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ164(UBound(typ164) + 1)
typ164(UBound(typ164)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitDiv", typ164))
Typ = GetType(ILEmitter).GetMethod("EmitDiv", typ164).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc10, 1038, 1, 1038, 100)
EmitOpIL.Emit(OpCodes.Br, cont158)
EmitOpIL.MarkLabel(fa158)
EmitOpIL.Emit(OpCodes.Br, cont158)
EmitOpIL.MarkLabel(cont158)
EmitOpIL.MarkSequencePoint(doc10, 1039, 1, 1039, 100)
EmitOpIL.Emit(OpCodes.Br, cont157)
EmitOpIL.MarkLabel(cont157)
EmitOpIL.MarkSequencePoint(doc10, 1040, 1, 1040, 100)
EmitOpIL.Emit(OpCodes.Br, label20)
EmitOpIL.MarkSequencePoint(doc10, 1041, 1, 1041, 100)
EmitOpIL.Emit(OpCodes.Br, cont156)
EmitOpIL.MarkLabel(fa156)
EmitOpIL.Emit(OpCodes.Br, cont156)
EmitOpIL.MarkLabel(cont156)
EmitOpIL.MarkSequencePoint(doc10, 1043, 1, 1043, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(ModOp))
Dim typ165 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ165))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ165).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc10, 1044, 1, 1044, 100)
Dim typ166(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ166(UBound(typ166) + 1)
typ166(UBound(typ166)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ166))
Typ = Typ03.GetMethod("IsInstanceOfType", typ166).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc10, 1046, 1, 1046, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa159 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru159 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont159 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru159)
EmitOpIL.Emit(OpCodes.Br, fa159)
EmitOpIL.MarkLabel(tru159)
EmitOpIL.MarkSequencePoint(doc10, 1047, 1, 1047, 100)
Dim typ167(-1) As Type
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ167(UBound(typ167) + 1)
typ167(UBound(typ167)) = Typ
EmitOpIL.Emit(OpCodes.Ldstr, "op_Modulus")
Typ = GetType(System.String)
ReDim Preserve typ167(UBound(typ167) + 1)
typ167(UBound(typ167)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ167(UBound(typ167) + 1)
typ167(UBound(typ167)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, RightOp)
Typ = RightOp.FieldType
ReDim Preserve typ167(UBound(typ167) + 1)
typ167(UBound(typ167)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadBinOp", typ167))
Typ = GetType(Loader).GetMethod("LoadBinOp", typ167).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 2)
EmitOpIL.MarkSequencePoint(doc10, 1048, 1, 1048, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
EmitOpIL.Emit(OpCodes.Ldnull)
Dim fa160 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru160 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont160 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, fa160)
EmitOpIL.Emit(OpCodes.Br, tru160)
EmitOpIL.MarkLabel(tru160)
EmitOpIL.MarkSequencePoint(doc10, 1049, 1, 1049, 100)
Dim typ168(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
ReDim Preserve typ168(UBound(typ168) + 1)
typ168(UBound(typ168)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ168))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ168).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc10, 1050, 1, 1050, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
EmitOpIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
EmitOpIL.MarkSequencePoint(doc10, 1051, 1, 1051, 100)
EmitOpIL.Emit(OpCodes.Br, cont160)
EmitOpIL.MarkLabel(fa160)
EmitOpIL.MarkSequencePoint(doc10, 1052, 1, 1052, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, OpCodeSuppFlg)
Typ = OpCodeSuppFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa161 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru161 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont161 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru161)
EmitOpIL.Emit(OpCodes.Br, fa161)
EmitOpIL.MarkLabel(tru161)
EmitOpIL.MarkSequencePoint(doc10, 1053, 1, 1053, 100)
Dim typ170(-1) As Type
EmitOpIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ170(UBound(typ170) + 1)
typ170(UBound(typ170)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitRem", typ170))
Typ = GetType(ILEmitter).GetMethod("EmitRem", typ170).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc10, 1054, 1, 1054, 100)
EmitOpIL.Emit(OpCodes.Br, cont161)
EmitOpIL.MarkLabel(fa161)
EmitOpIL.Emit(OpCodes.Br, cont161)
EmitOpIL.MarkLabel(cont161)
EmitOpIL.MarkSequencePoint(doc10, 1055, 1, 1055, 100)
EmitOpIL.Emit(OpCodes.Br, cont160)
EmitOpIL.MarkLabel(cont160)
EmitOpIL.MarkSequencePoint(doc10, 1056, 1, 1056, 100)
EmitOpIL.Emit(OpCodes.Br, label20)
EmitOpIL.MarkSequencePoint(doc10, 1057, 1, 1057, 100)
EmitOpIL.Emit(OpCodes.Br, cont159)
EmitOpIL.MarkLabel(fa159)
EmitOpIL.Emit(OpCodes.Br, cont159)
EmitOpIL.MarkLabel(cont159)
EmitOpIL.MarkSequencePoint(doc10, 1059, 1, 1059, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(OrOp))
Dim typ171 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ171))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ171).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc10, 1060, 1, 1060, 100)
Dim typ172(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ172(UBound(typ172) + 1)
typ172(UBound(typ172)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ172))
Typ = Typ03.GetMethod("IsInstanceOfType", typ172).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc10, 1062, 1, 1062, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa162 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru162 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont162 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru162)
EmitOpIL.Emit(OpCodes.Br, fa162)
EmitOpIL.MarkLabel(tru162)
EmitOpIL.MarkSequencePoint(doc10, 1063, 1, 1063, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitOr", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitOr", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc10, 1064, 1, 1064, 100)
EmitOpIL.Emit(OpCodes.Br, label20)
EmitOpIL.MarkSequencePoint(doc10, 1065, 1, 1065, 100)
EmitOpIL.Emit(OpCodes.Br, cont162)
EmitOpIL.MarkLabel(fa162)
EmitOpIL.Emit(OpCodes.Br, cont162)
EmitOpIL.MarkLabel(cont162)
EmitOpIL.MarkSequencePoint(doc10, 1067, 1, 1067, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(AndOp))
Dim typ173 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ173))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ173).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc10, 1068, 1, 1068, 100)
Dim typ174(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ174(UBound(typ174) + 1)
typ174(UBound(typ174)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ174))
Typ = Typ03.GetMethod("IsInstanceOfType", typ174).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc10, 1070, 1, 1070, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa163 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru163 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont163 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru163)
EmitOpIL.Emit(OpCodes.Br, fa163)
EmitOpIL.MarkLabel(tru163)
EmitOpIL.MarkSequencePoint(doc10, 1071, 1, 1071, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitAnd", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitAnd", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc10, 1072, 1, 1072, 100)
EmitOpIL.Emit(OpCodes.Br, label20)
EmitOpIL.MarkSequencePoint(doc10, 1073, 1, 1073, 100)
EmitOpIL.Emit(OpCodes.Br, cont163)
EmitOpIL.MarkLabel(fa163)
EmitOpIL.Emit(OpCodes.Br, cont163)
EmitOpIL.MarkLabel(cont163)
EmitOpIL.MarkSequencePoint(doc10, 1075, 1, 1075, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(OrOp))
Dim typ175 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ175))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ175).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc10, 1076, 1, 1076, 100)
Dim typ176(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ176(UBound(typ176) + 1)
typ176(UBound(typ176)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ176))
Typ = Typ03.GetMethod("IsInstanceOfType", typ176).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc10, 1078, 1, 1078, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa164 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru164 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont164 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru164)
EmitOpIL.Emit(OpCodes.Br, fa164)
EmitOpIL.MarkLabel(tru164)
EmitOpIL.MarkSequencePoint(doc10, 1079, 1, 1079, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitOr", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitOr", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc10, 1080, 1, 1080, 100)
EmitOpIL.Emit(OpCodes.Br, label20)
EmitOpIL.MarkSequencePoint(doc10, 1081, 1, 1081, 100)
EmitOpIL.Emit(OpCodes.Br, cont164)
EmitOpIL.MarkLabel(fa164)
EmitOpIL.Emit(OpCodes.Br, cont164)
EmitOpIL.MarkLabel(cont164)
EmitOpIL.MarkSequencePoint(doc10, 1083, 1, 1083, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(XorOp))
Dim typ177 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ177))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ177).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc10, 1084, 1, 1084, 100)
Dim typ178(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ178(UBound(typ178) + 1)
typ178(UBound(typ178)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ178))
Typ = Typ03.GetMethod("IsInstanceOfType", typ178).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc10, 1086, 1, 1086, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa165 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru165 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont165 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru165)
EmitOpIL.Emit(OpCodes.Br, fa165)
EmitOpIL.MarkLabel(tru165)
EmitOpIL.MarkSequencePoint(doc10, 1087, 1, 1087, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitXor", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitXor", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc10, 1088, 1, 1088, 100)
EmitOpIL.Emit(OpCodes.Br, label20)
EmitOpIL.MarkSequencePoint(doc10, 1089, 1, 1089, 100)
EmitOpIL.Emit(OpCodes.Br, cont165)
EmitOpIL.MarkLabel(fa165)
EmitOpIL.Emit(OpCodes.Br, cont165)
EmitOpIL.MarkLabel(cont165)
EmitOpIL.MarkSequencePoint(doc10, 1091, 1, 1091, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(NandOp))
Dim typ179 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ179))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ179).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc10, 1092, 1, 1092, 100)
Dim typ180(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ180(UBound(typ180) + 1)
typ180(UBound(typ180)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ180))
Typ = Typ03.GetMethod("IsInstanceOfType", typ180).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc10, 1094, 1, 1094, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa166 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru166 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont166 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru166)
EmitOpIL.Emit(OpCodes.Br, fa166)
EmitOpIL.MarkLabel(tru166)
EmitOpIL.MarkSequencePoint(doc10, 1095, 1, 1095, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitNand", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitNand", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc10, 1096, 1, 1096, 100)
EmitOpIL.Emit(OpCodes.Br, label20)
EmitOpIL.MarkSequencePoint(doc10, 1097, 1, 1097, 100)
EmitOpIL.Emit(OpCodes.Br, cont166)
EmitOpIL.MarkLabel(fa166)
EmitOpIL.Emit(OpCodes.Br, cont166)
EmitOpIL.MarkLabel(cont166)
EmitOpIL.MarkSequencePoint(doc10, 1099, 1, 1099, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(NorOp))
Dim typ181 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ181))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ181).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc10, 1100, 1, 1100, 100)
Dim typ182(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ182(UBound(typ182) + 1)
typ182(UBound(typ182)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ182))
Typ = Typ03.GetMethod("IsInstanceOfType", typ182).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc10, 1102, 1, 1102, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa167 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru167 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont167 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru167)
EmitOpIL.Emit(OpCodes.Br, fa167)
EmitOpIL.MarkLabel(tru167)
EmitOpIL.MarkSequencePoint(doc10, 1103, 1, 1103, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitNor", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitNor", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc10, 1104, 1, 1104, 100)
EmitOpIL.Emit(OpCodes.Br, label20)
EmitOpIL.MarkSequencePoint(doc10, 1105, 1, 1105, 100)
EmitOpIL.Emit(OpCodes.Br, cont167)
EmitOpIL.MarkLabel(fa167)
EmitOpIL.Emit(OpCodes.Br, cont167)
EmitOpIL.MarkLabel(cont167)
EmitOpIL.MarkSequencePoint(doc10, 1107, 1, 1107, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(XnorOp))
Dim typ183 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ183))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ183).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc10, 1108, 1, 1108, 100)
Dim typ184(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ184(UBound(typ184) + 1)
typ184(UBound(typ184)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ184))
Typ = Typ03.GetMethod("IsInstanceOfType", typ184).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc10, 1110, 1, 1110, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa168 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru168 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont168 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru168)
EmitOpIL.Emit(OpCodes.Br, fa168)
EmitOpIL.MarkLabel(tru168)
EmitOpIL.MarkSequencePoint(doc10, 1111, 1, 1111, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitXnor", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitXnor", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc10, 1112, 1, 1112, 100)
EmitOpIL.Emit(OpCodes.Br, label20)
EmitOpIL.MarkSequencePoint(doc10, 1113, 1, 1113, 100)
EmitOpIL.Emit(OpCodes.Br, cont168)
EmitOpIL.MarkLabel(fa168)
EmitOpIL.Emit(OpCodes.Br, cont168)
EmitOpIL.MarkLabel(cont168)
EmitOpIL.MarkSequencePoint(doc10, 1115, 1, 1115, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(GtOp))
Dim typ185 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ185))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ185).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc10, 1116, 1, 1116, 100)
Dim typ186(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ186(UBound(typ186) + 1)
typ186(UBound(typ186)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ186))
Typ = Typ03.GetMethod("IsInstanceOfType", typ186).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc10, 1118, 1, 1118, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa169 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru169 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont169 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru169)
EmitOpIL.Emit(OpCodes.Br, fa169)
EmitOpIL.MarkLabel(tru169)
EmitOpIL.MarkSequencePoint(doc10, 1119, 1, 1119, 100)
Dim typ187(-1) As Type
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ187(UBound(typ187) + 1)
typ187(UBound(typ187)) = Typ
EmitOpIL.Emit(OpCodes.Ldstr, "op_GreaterThan")
Typ = GetType(System.String)
ReDim Preserve typ187(UBound(typ187) + 1)
typ187(UBound(typ187)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ187(UBound(typ187) + 1)
typ187(UBound(typ187)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, RightOp)
Typ = RightOp.FieldType
ReDim Preserve typ187(UBound(typ187) + 1)
typ187(UBound(typ187)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadBinOp", typ187))
Typ = GetType(Loader).GetMethod("LoadBinOp", typ187).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 2)
EmitOpIL.MarkSequencePoint(doc10, 1120, 1, 1120, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
EmitOpIL.Emit(OpCodes.Ldnull)
Dim fa170 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru170 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont170 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, fa170)
EmitOpIL.Emit(OpCodes.Br, tru170)
EmitOpIL.MarkLabel(tru170)
EmitOpIL.MarkSequencePoint(doc10, 1121, 1, 1121, 100)
Dim typ188(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
ReDim Preserve typ188(UBound(typ188) + 1)
typ188(UBound(typ188)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ188))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ188).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc10, 1122, 1, 1122, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
EmitOpIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
EmitOpIL.MarkSequencePoint(doc10, 1123, 1, 1123, 100)
EmitOpIL.Emit(OpCodes.Br, cont170)
EmitOpIL.MarkLabel(fa170)
EmitOpIL.MarkSequencePoint(doc10, 1124, 1, 1124, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, OpCodeSuppFlg)
Typ = OpCodeSuppFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa171 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru171 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont171 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru171)
EmitOpIL.Emit(OpCodes.Br, fa171)
EmitOpIL.MarkLabel(tru171)
EmitOpIL.MarkSequencePoint(doc10, 1125, 1, 1125, 100)
Dim typ190(-1) As Type
EmitOpIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ190(UBound(typ190) + 1)
typ190(UBound(typ190)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCgt", typ190))
Typ = GetType(ILEmitter).GetMethod("EmitCgt", typ190).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc10, 1126, 1, 1126, 100)
EmitOpIL.Emit(OpCodes.Br, cont171)
EmitOpIL.MarkLabel(fa171)
EmitOpIL.Emit(OpCodes.Br, cont171)
EmitOpIL.MarkLabel(cont171)
EmitOpIL.MarkSequencePoint(doc10, 1127, 1, 1127, 100)
EmitOpIL.Emit(OpCodes.Br, cont170)
EmitOpIL.MarkLabel(cont170)
EmitOpIL.MarkSequencePoint(doc10, 1128, 1, 1128, 100)
EmitOpIL.Emit(OpCodes.Br, label20)
EmitOpIL.MarkSequencePoint(doc10, 1129, 1, 1129, 100)
EmitOpIL.Emit(OpCodes.Br, cont169)
EmitOpIL.MarkLabel(fa169)
EmitOpIL.Emit(OpCodes.Br, cont169)
EmitOpIL.MarkLabel(cont169)
EmitOpIL.MarkSequencePoint(doc10, 1131, 1, 1131, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(LtOp))
Dim typ191 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ191))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ191).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc10, 1132, 1, 1132, 100)
Dim typ192(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ192(UBound(typ192) + 1)
typ192(UBound(typ192)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ192))
Typ = Typ03.GetMethod("IsInstanceOfType", typ192).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc10, 1134, 1, 1134, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa172 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru172 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont172 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru172)
EmitOpIL.Emit(OpCodes.Br, fa172)
EmitOpIL.MarkLabel(tru172)
EmitOpIL.MarkSequencePoint(doc10, 1135, 1, 1135, 100)
Dim typ193(-1) As Type
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ193(UBound(typ193) + 1)
typ193(UBound(typ193)) = Typ
EmitOpIL.Emit(OpCodes.Ldstr, "op_LessThan")
Typ = GetType(System.String)
ReDim Preserve typ193(UBound(typ193) + 1)
typ193(UBound(typ193)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ193(UBound(typ193) + 1)
typ193(UBound(typ193)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, RightOp)
Typ = RightOp.FieldType
ReDim Preserve typ193(UBound(typ193) + 1)
typ193(UBound(typ193)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadBinOp", typ193))
Typ = GetType(Loader).GetMethod("LoadBinOp", typ193).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 2)
EmitOpIL.MarkSequencePoint(doc10, 1136, 1, 1136, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
EmitOpIL.Emit(OpCodes.Ldnull)
Dim fa173 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru173 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont173 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, fa173)
EmitOpIL.Emit(OpCodes.Br, tru173)
EmitOpIL.MarkLabel(tru173)
EmitOpIL.MarkSequencePoint(doc10, 1137, 1, 1137, 100)
Dim typ194(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
ReDim Preserve typ194(UBound(typ194) + 1)
typ194(UBound(typ194)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ194))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ194).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc10, 1138, 1, 1138, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
EmitOpIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
EmitOpIL.MarkSequencePoint(doc10, 1139, 1, 1139, 100)
EmitOpIL.Emit(OpCodes.Br, cont173)
EmitOpIL.MarkLabel(fa173)
EmitOpIL.MarkSequencePoint(doc10, 1140, 1, 1140, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, OpCodeSuppFlg)
Typ = OpCodeSuppFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa174 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru174 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont174 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru174)
EmitOpIL.Emit(OpCodes.Br, fa174)
EmitOpIL.MarkLabel(tru174)
EmitOpIL.MarkSequencePoint(doc10, 1141, 1, 1141, 100)
Dim typ196(-1) As Type
EmitOpIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ196(UBound(typ196) + 1)
typ196(UBound(typ196)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitClt", typ196))
Typ = GetType(ILEmitter).GetMethod("EmitClt", typ196).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc10, 1142, 1, 1142, 100)
EmitOpIL.Emit(OpCodes.Br, cont174)
EmitOpIL.MarkLabel(fa174)
EmitOpIL.Emit(OpCodes.Br, cont174)
EmitOpIL.MarkLabel(cont174)
EmitOpIL.MarkSequencePoint(doc10, 1143, 1, 1143, 100)
EmitOpIL.Emit(OpCodes.Br, cont173)
EmitOpIL.MarkLabel(cont173)
EmitOpIL.MarkSequencePoint(doc10, 1144, 1, 1144, 100)
EmitOpIL.Emit(OpCodes.Br, label20)
EmitOpIL.MarkSequencePoint(doc10, 1145, 1, 1145, 100)
EmitOpIL.Emit(OpCodes.Br, cont172)
EmitOpIL.MarkLabel(fa172)
EmitOpIL.Emit(OpCodes.Br, cont172)
EmitOpIL.MarkLabel(cont172)
EmitOpIL.MarkSequencePoint(doc10, 1147, 1, 1147, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(GeOp))
Dim typ197 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ197))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ197).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc10, 1148, 1, 1148, 100)
Dim typ198(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ198(UBound(typ198) + 1)
typ198(UBound(typ198)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ198))
Typ = Typ03.GetMethod("IsInstanceOfType", typ198).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc10, 1150, 1, 1150, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa175 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru175 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont175 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru175)
EmitOpIL.Emit(OpCodes.Br, fa175)
EmitOpIL.MarkLabel(tru175)
EmitOpIL.MarkSequencePoint(doc10, 1151, 1, 1151, 100)
Dim typ199(-1) As Type
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ199(UBound(typ199) + 1)
typ199(UBound(typ199)) = Typ
EmitOpIL.Emit(OpCodes.Ldstr, "op_GreaterThanOrEqual")
Typ = GetType(System.String)
ReDim Preserve typ199(UBound(typ199) + 1)
typ199(UBound(typ199)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ199(UBound(typ199) + 1)
typ199(UBound(typ199)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, RightOp)
Typ = RightOp.FieldType
ReDim Preserve typ199(UBound(typ199) + 1)
typ199(UBound(typ199)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadBinOp", typ199))
Typ = GetType(Loader).GetMethod("LoadBinOp", typ199).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 2)
EmitOpIL.MarkSequencePoint(doc10, 1152, 1, 1152, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
EmitOpIL.Emit(OpCodes.Ldnull)
Dim fa176 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru176 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont176 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, fa176)
EmitOpIL.Emit(OpCodes.Br, tru176)
EmitOpIL.MarkLabel(tru176)
EmitOpIL.MarkSequencePoint(doc10, 1153, 1, 1153, 100)
Dim typ200(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
ReDim Preserve typ200(UBound(typ200) + 1)
typ200(UBound(typ200)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ200))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ200).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc10, 1154, 1, 1154, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
EmitOpIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
EmitOpIL.MarkSequencePoint(doc10, 1155, 1, 1155, 100)
EmitOpIL.Emit(OpCodes.Br, cont176)
EmitOpIL.MarkLabel(fa176)
EmitOpIL.MarkSequencePoint(doc10, 1156, 1, 1156, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, OpCodeSuppFlg)
Typ = OpCodeSuppFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa177 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru177 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont177 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru177)
EmitOpIL.Emit(OpCodes.Br, fa177)
EmitOpIL.MarkLabel(tru177)
EmitOpIL.MarkSequencePoint(doc10, 1157, 1, 1157, 100)
Dim typ202(-1) As Type
EmitOpIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ202(UBound(typ202) + 1)
typ202(UBound(typ202)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCge", typ202))
Typ = GetType(ILEmitter).GetMethod("EmitCge", typ202).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc10, 1158, 1, 1158, 100)
EmitOpIL.Emit(OpCodes.Br, cont177)
EmitOpIL.MarkLabel(fa177)
EmitOpIL.Emit(OpCodes.Br, cont177)
EmitOpIL.MarkLabel(cont177)
EmitOpIL.MarkSequencePoint(doc10, 1159, 1, 1159, 100)
EmitOpIL.Emit(OpCodes.Br, cont176)
EmitOpIL.MarkLabel(cont176)
EmitOpIL.MarkSequencePoint(doc10, 1160, 1, 1160, 100)
EmitOpIL.Emit(OpCodes.Br, label20)
EmitOpIL.MarkSequencePoint(doc10, 1161, 1, 1161, 100)
EmitOpIL.Emit(OpCodes.Br, cont175)
EmitOpIL.MarkLabel(fa175)
EmitOpIL.Emit(OpCodes.Br, cont175)
EmitOpIL.MarkLabel(cont175)
EmitOpIL.MarkSequencePoint(doc10, 1163, 1, 1163, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(LeOp))
Dim typ203 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ203))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ203).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc10, 1164, 1, 1164, 100)
Dim typ204(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ204(UBound(typ204) + 1)
typ204(UBound(typ204)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ204))
Typ = Typ03.GetMethod("IsInstanceOfType", typ204).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc10, 1166, 1, 1166, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa178 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru178 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont178 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru178)
EmitOpIL.Emit(OpCodes.Br, fa178)
EmitOpIL.MarkLabel(tru178)
EmitOpIL.MarkSequencePoint(doc10, 1167, 1, 1167, 100)
Dim typ205(-1) As Type
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ205(UBound(typ205) + 1)
typ205(UBound(typ205)) = Typ
EmitOpIL.Emit(OpCodes.Ldstr, "op_LessThanOrEqual")
Typ = GetType(System.String)
ReDim Preserve typ205(UBound(typ205) + 1)
typ205(UBound(typ205)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ205(UBound(typ205) + 1)
typ205(UBound(typ205)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, RightOp)
Typ = RightOp.FieldType
ReDim Preserve typ205(UBound(typ205) + 1)
typ205(UBound(typ205)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadBinOp", typ205))
Typ = GetType(Loader).GetMethod("LoadBinOp", typ205).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 2)
EmitOpIL.MarkSequencePoint(doc10, 1168, 1, 1168, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
EmitOpIL.Emit(OpCodes.Ldnull)
Dim fa179 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru179 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont179 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, fa179)
EmitOpIL.Emit(OpCodes.Br, tru179)
EmitOpIL.MarkLabel(tru179)
EmitOpIL.MarkSequencePoint(doc10, 1169, 1, 1169, 100)
Dim typ206(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
ReDim Preserve typ206(UBound(typ206) + 1)
typ206(UBound(typ206)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ206))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ206).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc10, 1170, 1, 1170, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
EmitOpIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
EmitOpIL.MarkSequencePoint(doc10, 1171, 1, 1171, 100)
EmitOpIL.Emit(OpCodes.Br, cont179)
EmitOpIL.MarkLabel(fa179)
EmitOpIL.MarkSequencePoint(doc10, 1172, 1, 1172, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, OpCodeSuppFlg)
Typ = OpCodeSuppFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa180 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru180 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont180 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru180)
EmitOpIL.Emit(OpCodes.Br, fa180)
EmitOpIL.MarkLabel(tru180)
EmitOpIL.MarkSequencePoint(doc10, 1173, 1, 1173, 100)
Dim typ208(-1) As Type
EmitOpIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ208(UBound(typ208) + 1)
typ208(UBound(typ208)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCle", typ208))
Typ = GetType(ILEmitter).GetMethod("EmitCle", typ208).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc10, 1174, 1, 1174, 100)
EmitOpIL.Emit(OpCodes.Br, cont180)
EmitOpIL.MarkLabel(fa180)
EmitOpIL.Emit(OpCodes.Br, cont180)
EmitOpIL.MarkLabel(cont180)
EmitOpIL.MarkSequencePoint(doc10, 1175, 1, 1175, 100)
EmitOpIL.Emit(OpCodes.Br, cont179)
EmitOpIL.MarkLabel(cont179)
EmitOpIL.MarkSequencePoint(doc10, 1176, 1, 1176, 100)
EmitOpIL.Emit(OpCodes.Br, label20)
EmitOpIL.MarkSequencePoint(doc10, 1177, 1, 1177, 100)
EmitOpIL.Emit(OpCodes.Br, cont178)
EmitOpIL.MarkLabel(fa178)
EmitOpIL.Emit(OpCodes.Br, cont178)
EmitOpIL.MarkLabel(cont178)
EmitOpIL.MarkSequencePoint(doc10, 1179, 1, 1179, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(EqOp))
Dim typ209 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ209))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ209).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc10, 1180, 1, 1180, 100)
Dim typ210(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ210(UBound(typ210) + 1)
typ210(UBound(typ210)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ210))
Typ = Typ03.GetMethod("IsInstanceOfType", typ210).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc10, 1182, 1, 1182, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa181 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru181 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont181 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru181)
EmitOpIL.Emit(OpCodes.Br, fa181)
EmitOpIL.MarkLabel(tru181)
EmitOpIL.MarkSequencePoint(doc10, 1183, 1, 1183, 100)
Dim typ211(-1) As Type
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ211(UBound(typ211) + 1)
typ211(UBound(typ211)) = Typ
EmitOpIL.Emit(OpCodes.Ldstr, "op_Equality")
Typ = GetType(System.String)
ReDim Preserve typ211(UBound(typ211) + 1)
typ211(UBound(typ211)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ211(UBound(typ211) + 1)
typ211(UBound(typ211)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, RightOp)
Typ = RightOp.FieldType
ReDim Preserve typ211(UBound(typ211) + 1)
typ211(UBound(typ211)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadBinOp", typ211))
Typ = GetType(Loader).GetMethod("LoadBinOp", typ211).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 2)
EmitOpIL.MarkSequencePoint(doc10, 1184, 1, 1184, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
EmitOpIL.Emit(OpCodes.Ldnull)
Dim fa182 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru182 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont182 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, fa182)
EmitOpIL.Emit(OpCodes.Br, tru182)
EmitOpIL.MarkLabel(tru182)
EmitOpIL.MarkSequencePoint(doc10, 1185, 1, 1185, 100)
Dim typ212(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
ReDim Preserve typ212(UBound(typ212) + 1)
typ212(UBound(typ212)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ212))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ212).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc10, 1186, 1, 1186, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
EmitOpIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
EmitOpIL.MarkSequencePoint(doc10, 1187, 1, 1187, 100)
EmitOpIL.Emit(OpCodes.Br, cont182)
EmitOpIL.MarkLabel(fa182)
EmitOpIL.MarkSequencePoint(doc10, 1188, 1, 1188, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, StringFlg)
Typ = StringFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa183 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru183 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont183 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru183)
EmitOpIL.Emit(OpCodes.Br, fa183)
EmitOpIL.MarkLabel(tru183)
EmitOpIL.MarkSequencePoint(doc10, 1189, 1, 1189, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitStrCeq", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitStrCeq", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc10, 1190, 1, 1190, 100)
EmitOpIL.Emit(OpCodes.Br, cont183)
EmitOpIL.MarkLabel(fa183)
EmitOpIL.MarkSequencePoint(doc10, 1191, 1, 1191, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCeq", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitCeq", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc10, 1192, 1, 1192, 100)
EmitOpIL.Emit(OpCodes.Br, cont183)
EmitOpIL.MarkLabel(cont183)
EmitOpIL.MarkSequencePoint(doc10, 1193, 1, 1193, 100)
EmitOpIL.Emit(OpCodes.Br, cont182)
EmitOpIL.MarkLabel(cont182)
EmitOpIL.MarkSequencePoint(doc10, 1194, 1, 1194, 100)
EmitOpIL.Emit(OpCodes.Br, label20)
EmitOpIL.MarkSequencePoint(doc10, 1195, 1, 1195, 100)
EmitOpIL.Emit(OpCodes.Br, cont181)
EmitOpIL.MarkLabel(fa181)
EmitOpIL.Emit(OpCodes.Br, cont181)
EmitOpIL.MarkLabel(cont181)
EmitOpIL.MarkSequencePoint(doc10, 1197, 1, 1197, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(NeqOp))
Dim typ214 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ214))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ214).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc10, 1198, 1, 1198, 100)
Dim typ215(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ215(UBound(typ215) + 1)
typ215(UBound(typ215)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ215))
Typ = Typ03.GetMethod("IsInstanceOfType", typ215).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc10, 1200, 1, 1200, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa184 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru184 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont184 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru184)
EmitOpIL.Emit(OpCodes.Br, fa184)
EmitOpIL.MarkLabel(tru184)
EmitOpIL.MarkSequencePoint(doc10, 1201, 1, 1201, 100)
Dim typ216(-1) As Type
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ216(UBound(typ216) + 1)
typ216(UBound(typ216)) = Typ
EmitOpIL.Emit(OpCodes.Ldstr, "op_Inequality")
Typ = GetType(System.String)
ReDim Preserve typ216(UBound(typ216) + 1)
typ216(UBound(typ216)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ216(UBound(typ216) + 1)
typ216(UBound(typ216)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, RightOp)
Typ = RightOp.FieldType
ReDim Preserve typ216(UBound(typ216) + 1)
typ216(UBound(typ216)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadBinOp", typ216))
Typ = GetType(Loader).GetMethod("LoadBinOp", typ216).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 2)
EmitOpIL.MarkSequencePoint(doc10, 1202, 1, 1202, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
EmitOpIL.Emit(OpCodes.Ldnull)
Dim fa185 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru185 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont185 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, fa185)
EmitOpIL.Emit(OpCodes.Br, tru185)
EmitOpIL.MarkLabel(tru185)
EmitOpIL.MarkSequencePoint(doc10, 1203, 1, 1203, 100)
Dim typ217(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
ReDim Preserve typ217(UBound(typ217) + 1)
typ217(UBound(typ217)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ217))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ217).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc10, 1204, 1, 1204, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
EmitOpIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
EmitOpIL.MarkSequencePoint(doc10, 1205, 1, 1205, 100)
EmitOpIL.Emit(OpCodes.Br, cont185)
EmitOpIL.MarkLabel(fa185)
EmitOpIL.MarkSequencePoint(doc10, 1206, 1, 1206, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, StringFlg)
Typ = StringFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa186 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru186 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont186 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru186)
EmitOpIL.Emit(OpCodes.Br, fa186)
EmitOpIL.MarkLabel(tru186)
EmitOpIL.MarkSequencePoint(doc10, 1207, 1, 1207, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitStrCneq", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitStrCneq", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc10, 1208, 1, 1208, 100)
EmitOpIL.Emit(OpCodes.Br, cont186)
EmitOpIL.MarkLabel(fa186)
EmitOpIL.MarkSequencePoint(doc10, 1209, 1, 1209, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCneq", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitCneq", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc10, 1210, 1, 1210, 100)
EmitOpIL.Emit(OpCodes.Br, cont186)
EmitOpIL.MarkLabel(cont186)
EmitOpIL.MarkSequencePoint(doc10, 1211, 1, 1211, 100)
EmitOpIL.Emit(OpCodes.Br, cont185)
EmitOpIL.MarkLabel(cont185)
EmitOpIL.MarkSequencePoint(doc10, 1212, 1, 1212, 100)
EmitOpIL.Emit(OpCodes.Br, label20)
EmitOpIL.MarkSequencePoint(doc10, 1213, 1, 1213, 100)
EmitOpIL.Emit(OpCodes.Br, cont184)
EmitOpIL.MarkLabel(fa184)
EmitOpIL.Emit(OpCodes.Br, cont184)
EmitOpIL.MarkLabel(cont184)
EmitOpIL.MarkSequencePoint(doc10, 1215, 1, 1215, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(LikeOp))
Dim typ219 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ219))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ219).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc10, 1216, 1, 1216, 100)
Dim typ220(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ220(UBound(typ220) + 1)
typ220(UBound(typ220)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ220))
Typ = Typ03.GetMethod("IsInstanceOfType", typ220).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc10, 1218, 1, 1218, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa187 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru187 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont187 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru187)
EmitOpIL.Emit(OpCodes.Br, fa187)
EmitOpIL.MarkLabel(tru187)
EmitOpIL.MarkSequencePoint(doc10, 1219, 1, 1219, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, StringFlg)
Typ = StringFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa188 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru188 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont188 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru188)
EmitOpIL.Emit(OpCodes.Br, fa188)
EmitOpIL.MarkLabel(tru188)
EmitOpIL.MarkSequencePoint(doc10, 1220, 1, 1220, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLike", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitLike", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc10, 1221, 1, 1221, 100)
EmitOpIL.Emit(OpCodes.Br, cont188)
EmitOpIL.MarkLabel(fa188)
EmitOpIL.Emit(OpCodes.Br, cont188)
EmitOpIL.MarkLabel(cont188)
EmitOpIL.MarkSequencePoint(doc10, 1222, 1, 1222, 100)
EmitOpIL.Emit(OpCodes.Br, label20)
EmitOpIL.MarkSequencePoint(doc10, 1223, 1, 1223, 100)
EmitOpIL.Emit(OpCodes.Br, cont187)
EmitOpIL.MarkLabel(fa187)
EmitOpIL.Emit(OpCodes.Br, cont187)
EmitOpIL.MarkLabel(cont187)
EmitOpIL.MarkSequencePoint(doc10, 1225, 1, 1225, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(NLikeOp))
Dim typ221 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ221))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ221).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc10, 1226, 1, 1226, 100)
Dim typ222(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ222(UBound(typ222) + 1)
typ222(UBound(typ222)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ222))
Typ = Typ03.GetMethod("IsInstanceOfType", typ222).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc10, 1228, 1, 1228, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa189 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru189 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont189 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru189)
EmitOpIL.Emit(OpCodes.Br, fa189)
EmitOpIL.MarkLabel(tru189)
EmitOpIL.MarkSequencePoint(doc10, 1230, 1, 1230, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, StringFlg)
Typ = StringFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa190 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru190 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont190 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru190)
EmitOpIL.Emit(OpCodes.Br, fa190)
EmitOpIL.MarkLabel(tru190)
EmitOpIL.MarkSequencePoint(doc10, 1231, 1, 1231, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitNLike", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitNLike", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc10, 1232, 1, 1232, 100)
EmitOpIL.Emit(OpCodes.Br, cont190)
EmitOpIL.MarkLabel(fa190)
EmitOpIL.Emit(OpCodes.Br, cont190)
EmitOpIL.MarkLabel(cont190)
EmitOpIL.MarkSequencePoint(doc10, 1233, 1, 1233, 100)
EmitOpIL.Emit(OpCodes.Br, label20)
EmitOpIL.MarkSequencePoint(doc10, 1234, 1, 1234, 100)
EmitOpIL.Emit(OpCodes.Br, cont189)
EmitOpIL.MarkLabel(fa189)
EmitOpIL.Emit(OpCodes.Br, cont189)
EmitOpIL.MarkLabel(cont189)
EmitOpIL.MarkSequencePoint(doc10, 1236, 1, 1236, 100)
EmitOpIL.MarkLabel(label20)
EmitOpIL.MarkSequencePoint(doc10, 1237, 1, 1237, 100)
EmitOpIL.Emit(OpCodes.Ret)
Dim typ223(-1) As Type
ReDim Preserve typ223(UBound(typ223) + 1)
typ223(UBound(typ223)) = GetType(System.Int32)
ReDim Preserve typ223(UBound(typ223) + 1)
typ223(UBound(typ223)) = GetType(System.Boolean)
Dim EmitLocLd As MethodBuilder = Helpers.DefineMethod("EmitLocLd", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ223)
Dim EmitLocLdIL As ILGenerator = EmitLocLd.GetILGenerator()
Dim EmitLocLdparam01 As ParameterBuilder = EmitLocLd.DefineParameter(1, ParameterAttributes.None, "ind")
Dim EmitLocLdparam02 As ParameterBuilder = EmitLocLd.DefineParameter(2, ParameterAttributes.None, "locarg")
EmitLocLdIL.MarkSequencePoint(doc10, 1240, 1, 1240, 100)
EmitLocLdIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AddrFlg"))
Typ = GetType(AsmFactory).GetField("AddrFlg").FieldType
EmitLocLdIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa191 As System.Reflection.Emit.Label = EmitLocLdIL.DefineLabel()
Dim tru191 As System.Reflection.Emit.Label = EmitLocLdIL.DefineLabel()
Dim cont191 As System.Reflection.Emit.Label = EmitLocLdIL.DefineLabel()
EmitLocLdIL.Emit(OpCodes.Beq, tru191)
EmitLocLdIL.Emit(OpCodes.Br, fa191)
EmitLocLdIL.MarkLabel(tru191)
EmitLocLdIL.MarkSequencePoint(doc10, 1241, 1, 1241, 100)
EmitLocLdIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
EmitLocLdIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa192 As System.Reflection.Emit.Label = EmitLocLdIL.DefineLabel()
Dim tru192 As System.Reflection.Emit.Label = EmitLocLdIL.DefineLabel()
Dim cont192 As System.Reflection.Emit.Label = EmitLocLdIL.DefineLabel()
EmitLocLdIL.Emit(OpCodes.Beq, tru192)
EmitLocLdIL.Emit(OpCodes.Br, fa192)
EmitLocLdIL.MarkLabel(tru192)
EmitLocLdIL.MarkSequencePoint(doc10, 1242, 1, 1242, 100)
Dim typ224(-1) As Type
EmitLocLdIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
ReDim Preserve typ224(UBound(typ224) + 1)
typ224(UBound(typ224)) = Typ
EmitLocLdIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdloc", typ224))
Typ = GetType(ILEmitter).GetMethod("EmitLdloc", typ224).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLocLdIL.Emit(OpCodes.Pop)
End If
EmitLocLdIL.MarkSequencePoint(doc10, 1243, 1, 1243, 100)
EmitLocLdIL.Emit(OpCodes.Br, cont192)
EmitLocLdIL.MarkLabel(fa192)
EmitLocLdIL.MarkSequencePoint(doc10, 1244, 1, 1244, 100)
Dim typ225(-1) As Type
EmitLocLdIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
ReDim Preserve typ225(UBound(typ225) + 1)
typ225(UBound(typ225)) = Typ
EmitLocLdIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdarg", typ225))
Typ = GetType(ILEmitter).GetMethod("EmitLdarg", typ225).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLocLdIL.Emit(OpCodes.Pop)
End If
EmitLocLdIL.MarkSequencePoint(doc10, 1245, 1, 1245, 100)
EmitLocLdIL.Emit(OpCodes.Br, cont192)
EmitLocLdIL.MarkLabel(cont192)
EmitLocLdIL.MarkSequencePoint(doc10, 1246, 1, 1246, 100)
EmitLocLdIL.Emit(OpCodes.Br, cont191)
EmitLocLdIL.MarkLabel(fa191)
EmitLocLdIL.MarkSequencePoint(doc10, 1247, 1, 1247, 100)
Dim locbldr215 As LocalBuilder = EmitLocLdIL.DeclareLocal(GetType(System.Type))
locbldr215.SetLocalSymInfo("typ")
EmitLocLdIL.Emit(OpCodes.Ldtoken, GetType(ValueType))
Dim typ226 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitLocLdIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ226))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ226).ReturnType
EmitLocLdIL.Emit(OpCodes.Stloc, 0)
EmitLocLdIL.MarkSequencePoint(doc10, 1248, 1, 1248, 100)
Dim locbldr216 As LocalBuilder = EmitLocLdIL.DeclareLocal(GetType(System.Boolean))
locbldr216.SetLocalSymInfo("b")
Dim typ227(-1) As Type
EmitLocLdIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitLocLdIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type04"))
Typ = GetType(AsmFactory).GetField("Type04").FieldType
ReDim Preserve typ227(UBound(typ227) + 1)
typ227(UBound(typ227)) = Typ
EmitLocLdIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsAssignableFrom", typ227))
Typ = Typ03.GetMethod("IsAssignableFrom", typ227).ReturnType
EmitLocLdIL.Emit(OpCodes.Stloc, 1)
EmitLocLdIL.MarkSequencePoint(doc10, 1249, 1, 1249, 100)
EmitLocLdIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitLocLdIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa193 As System.Reflection.Emit.Label = EmitLocLdIL.DefineLabel()
Dim tru193 As System.Reflection.Emit.Label = EmitLocLdIL.DefineLabel()
Dim cont193 As System.Reflection.Emit.Label = EmitLocLdIL.DefineLabel()
EmitLocLdIL.Emit(OpCodes.Beq, tru193)
EmitLocLdIL.Emit(OpCodes.Br, fa193)
EmitLocLdIL.MarkLabel(tru193)
EmitLocLdIL.MarkSequencePoint(doc10, 1250, 1, 1250, 100)
EmitLocLdIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
EmitLocLdIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa194 As System.Reflection.Emit.Label = EmitLocLdIL.DefineLabel()
Dim tru194 As System.Reflection.Emit.Label = EmitLocLdIL.DefineLabel()
Dim cont194 As System.Reflection.Emit.Label = EmitLocLdIL.DefineLabel()
EmitLocLdIL.Emit(OpCodes.Beq, tru194)
EmitLocLdIL.Emit(OpCodes.Br, fa194)
EmitLocLdIL.MarkLabel(tru194)
EmitLocLdIL.MarkSequencePoint(doc10, 1251, 1, 1251, 100)
Dim typ228(-1) As Type
EmitLocLdIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
ReDim Preserve typ228(UBound(typ228) + 1)
typ228(UBound(typ228)) = Typ
EmitLocLdIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdloc", typ228))
Typ = GetType(ILEmitter).GetMethod("EmitLdloc", typ228).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLocLdIL.Emit(OpCodes.Pop)
End If
EmitLocLdIL.MarkSequencePoint(doc10, 1252, 1, 1252, 100)
EmitLocLdIL.Emit(OpCodes.Br, cont194)
EmitLocLdIL.MarkLabel(fa194)
EmitLocLdIL.MarkSequencePoint(doc10, 1253, 1, 1253, 100)
Dim typ229(-1) As Type
EmitLocLdIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
ReDim Preserve typ229(UBound(typ229) + 1)
typ229(UBound(typ229)) = Typ
EmitLocLdIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdarg", typ229))
Typ = GetType(ILEmitter).GetMethod("EmitLdarg", typ229).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLocLdIL.Emit(OpCodes.Pop)
End If
EmitLocLdIL.MarkSequencePoint(doc10, 1254, 1, 1254, 100)
EmitLocLdIL.Emit(OpCodes.Br, cont194)
EmitLocLdIL.MarkLabel(cont194)
EmitLocLdIL.MarkSequencePoint(doc10, 1255, 1, 1255, 100)
EmitLocLdIL.Emit(OpCodes.Br, cont193)
EmitLocLdIL.MarkLabel(fa193)
EmitLocLdIL.MarkSequencePoint(doc10, 1256, 1, 1256, 100)
EmitLocLdIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
EmitLocLdIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa195 As System.Reflection.Emit.Label = EmitLocLdIL.DefineLabel()
Dim tru195 As System.Reflection.Emit.Label = EmitLocLdIL.DefineLabel()
Dim cont195 As System.Reflection.Emit.Label = EmitLocLdIL.DefineLabel()
EmitLocLdIL.Emit(OpCodes.Beq, tru195)
EmitLocLdIL.Emit(OpCodes.Br, fa195)
EmitLocLdIL.MarkLabel(tru195)
EmitLocLdIL.MarkSequencePoint(doc10, 1257, 1, 1257, 100)
Dim typ230(-1) As Type
EmitLocLdIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
ReDim Preserve typ230(UBound(typ230) + 1)
typ230(UBound(typ230)) = Typ
EmitLocLdIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdloca", typ230))
Typ = GetType(ILEmitter).GetMethod("EmitLdloca", typ230).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLocLdIL.Emit(OpCodes.Pop)
End If
EmitLocLdIL.MarkSequencePoint(doc10, 1258, 1, 1258, 100)
EmitLocLdIL.Emit(OpCodes.Br, cont195)
EmitLocLdIL.MarkLabel(fa195)
EmitLocLdIL.MarkSequencePoint(doc10, 1259, 1, 1259, 100)
Dim typ231(-1) As Type
EmitLocLdIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
ReDim Preserve typ231(UBound(typ231) + 1)
typ231(UBound(typ231)) = Typ
EmitLocLdIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdarga", typ231))
Typ = GetType(ILEmitter).GetMethod("EmitLdarga", typ231).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLocLdIL.Emit(OpCodes.Pop)
End If
EmitLocLdIL.MarkSequencePoint(doc10, 1260, 1, 1260, 100)
EmitLocLdIL.Emit(OpCodes.Br, cont195)
EmitLocLdIL.MarkLabel(cont195)
EmitLocLdIL.MarkSequencePoint(doc10, 1261, 1, 1261, 100)
EmitLocLdIL.Emit(OpCodes.Br, cont193)
EmitLocLdIL.MarkLabel(cont193)
EmitLocLdIL.MarkSequencePoint(doc10, 1262, 1, 1262, 100)
EmitLocLdIL.Emit(OpCodes.Br, cont191)
EmitLocLdIL.MarkLabel(cont191)
EmitLocLdIL.MarkSequencePoint(doc10, 1263, 1, 1263, 100)
EmitLocLdIL.Emit(OpCodes.Ret)
Dim typ232(-1) As Type
ReDim Preserve typ232(UBound(typ232) + 1)
typ232(UBound(typ232)) = GetType(System.Type)
Dim EmitElemLd As MethodBuilder = Helpers.DefineMethod("EmitElemLd", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ232)
Dim EmitElemLdIL As ILGenerator = EmitElemLd.GetILGenerator()
Dim EmitElemLdparam01 As ParameterBuilder = EmitElemLd.DefineParameter(1, ParameterAttributes.None, "t")
EmitElemLdIL.MarkSequencePoint(doc10, 1266, 1, 1266, 100)
EmitElemLdIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AddrFlg"))
Typ = GetType(AsmFactory).GetField("AddrFlg").FieldType
EmitElemLdIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa196 As System.Reflection.Emit.Label = EmitElemLdIL.DefineLabel()
Dim tru196 As System.Reflection.Emit.Label = EmitElemLdIL.DefineLabel()
Dim cont196 As System.Reflection.Emit.Label = EmitElemLdIL.DefineLabel()
EmitElemLdIL.Emit(OpCodes.Beq, tru196)
EmitElemLdIL.Emit(OpCodes.Br, fa196)
EmitElemLdIL.MarkLabel(tru196)
EmitElemLdIL.MarkSequencePoint(doc10, 1267, 1, 1267, 100)
Dim typ233(-1) As Type
EmitElemLdIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
ReDim Preserve typ233(UBound(typ233) + 1)
typ233(UBound(typ233)) = Typ
EmitElemLdIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdelem", typ233))
Typ = GetType(ILEmitter).GetMethod("EmitLdelem", typ233).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitElemLdIL.Emit(OpCodes.Pop)
End If
EmitElemLdIL.MarkSequencePoint(doc10, 1268, 1, 1268, 100)
EmitElemLdIL.Emit(OpCodes.Br, cont196)
EmitElemLdIL.MarkLabel(fa196)
EmitElemLdIL.MarkSequencePoint(doc10, 1269, 1, 1269, 100)
Dim locbldr217 As LocalBuilder = EmitElemLdIL.DeclareLocal(GetType(System.Type))
locbldr217.SetLocalSymInfo("typ")
EmitElemLdIL.Emit(OpCodes.Ldtoken, GetType(ValueType))
Dim typ234 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitElemLdIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ234))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ234).ReturnType
EmitElemLdIL.Emit(OpCodes.Stloc, 0)
EmitElemLdIL.MarkSequencePoint(doc10, 1270, 1, 1270, 100)
Dim locbldr218 As LocalBuilder = EmitElemLdIL.DeclareLocal(GetType(System.Boolean))
locbldr218.SetLocalSymInfo("b")
Dim typ235(-1) As Type
EmitElemLdIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitElemLdIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type04"))
Typ = GetType(AsmFactory).GetField("Type04").FieldType
ReDim Preserve typ235(UBound(typ235) + 1)
typ235(UBound(typ235)) = Typ
EmitElemLdIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsAssignableFrom", typ235))
Typ = Typ03.GetMethod("IsAssignableFrom", typ235).ReturnType
EmitElemLdIL.Emit(OpCodes.Stloc, 1)
EmitElemLdIL.MarkSequencePoint(doc10, 1271, 1, 1271, 100)
EmitElemLdIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitElemLdIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa197 As System.Reflection.Emit.Label = EmitElemLdIL.DefineLabel()
Dim tru197 As System.Reflection.Emit.Label = EmitElemLdIL.DefineLabel()
Dim cont197 As System.Reflection.Emit.Label = EmitElemLdIL.DefineLabel()
EmitElemLdIL.Emit(OpCodes.Beq, tru197)
EmitElemLdIL.Emit(OpCodes.Br, fa197)
EmitElemLdIL.MarkLabel(tru197)
EmitElemLdIL.MarkSequencePoint(doc10, 1272, 1, 1272, 100)
Dim typ236(-1) As Type
EmitElemLdIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
ReDim Preserve typ236(UBound(typ236) + 1)
typ236(UBound(typ236)) = Typ
EmitElemLdIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdelem", typ236))
Typ = GetType(ILEmitter).GetMethod("EmitLdelem", typ236).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitElemLdIL.Emit(OpCodes.Pop)
End If
EmitElemLdIL.MarkSequencePoint(doc10, 1273, 1, 1273, 100)
EmitElemLdIL.Emit(OpCodes.Br, cont197)
EmitElemLdIL.MarkLabel(fa197)
EmitElemLdIL.MarkSequencePoint(doc10, 1274, 1, 1274, 100)
Dim typ237(-1) As Type
EmitElemLdIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
ReDim Preserve typ237(UBound(typ237) + 1)
typ237(UBound(typ237)) = Typ
EmitElemLdIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdelema", typ237))
Typ = GetType(ILEmitter).GetMethod("EmitLdelema", typ237).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitElemLdIL.Emit(OpCodes.Pop)
End If
EmitElemLdIL.MarkSequencePoint(doc10, 1275, 1, 1275, 100)
EmitElemLdIL.Emit(OpCodes.Br, cont197)
EmitElemLdIL.MarkLabel(cont197)
EmitElemLdIL.MarkSequencePoint(doc10, 1276, 1, 1276, 100)
EmitElemLdIL.Emit(OpCodes.Br, cont196)
EmitElemLdIL.MarkLabel(cont196)
EmitElemLdIL.MarkSequencePoint(doc10, 1277, 1, 1277, 100)
EmitElemLdIL.Emit(OpCodes.Ret)
Dim typ238(-1) As Type
ReDim Preserve typ238(UBound(typ238) + 1)
typ238(UBound(typ238)) = GetType(System.Int32)
ReDim Preserve typ238(UBound(typ238) + 1)
typ238(UBound(typ238)) = GetType(System.Boolean)
Dim EmitLocSt As MethodBuilder = Helpers.DefineMethod("EmitLocSt", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ238)
Dim EmitLocStIL As ILGenerator = EmitLocSt.GetILGenerator()
Dim EmitLocStparam01 As ParameterBuilder = EmitLocSt.DefineParameter(1, ParameterAttributes.None, "ind")
Dim EmitLocStparam02 As ParameterBuilder = EmitLocSt.DefineParameter(2, ParameterAttributes.None, "locarg")
EmitLocStIL.MarkSequencePoint(doc10, 1281, 1, 1281, 100)
EmitLocStIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
EmitLocStIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa198 As System.Reflection.Emit.Label = EmitLocStIL.DefineLabel()
Dim tru198 As System.Reflection.Emit.Label = EmitLocStIL.DefineLabel()
Dim cont198 As System.Reflection.Emit.Label = EmitLocStIL.DefineLabel()
EmitLocStIL.Emit(OpCodes.Beq, tru198)
EmitLocStIL.Emit(OpCodes.Br, fa198)
EmitLocStIL.MarkLabel(tru198)
EmitLocStIL.MarkSequencePoint(doc10, 1282, 1, 1282, 100)
Dim typ239(-1) As Type
EmitLocStIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
ReDim Preserve typ239(UBound(typ239) + 1)
typ239(UBound(typ239)) = Typ
EmitLocStIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitStloc", typ239))
Typ = GetType(ILEmitter).GetMethod("EmitStloc", typ239).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLocStIL.Emit(OpCodes.Pop)
End If
EmitLocStIL.MarkSequencePoint(doc10, 1283, 1, 1283, 100)
EmitLocStIL.Emit(OpCodes.Br, cont198)
EmitLocStIL.MarkLabel(fa198)
EmitLocStIL.MarkSequencePoint(doc10, 1284, 1, 1284, 100)
Dim typ240(-1) As Type
EmitLocStIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
ReDim Preserve typ240(UBound(typ240) + 1)
typ240(UBound(typ240)) = Typ
EmitLocStIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitStarg", typ240))
Typ = GetType(ILEmitter).GetMethod("EmitStarg", typ240).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLocStIL.Emit(OpCodes.Pop)
End If
EmitLocStIL.MarkSequencePoint(doc10, 1285, 1, 1285, 100)
EmitLocStIL.Emit(OpCodes.Br, cont198)
EmitLocStIL.MarkLabel(cont198)
EmitLocStIL.MarkSequencePoint(doc10, 1286, 1, 1286, 100)
EmitLocStIL.Emit(OpCodes.Ret)
Dim typ241(-1) As Type
ReDim Preserve typ241(UBound(typ241) + 1)
typ241(UBound(typ241)) = GetType(System.Type)
ReDim Preserve typ241(UBound(typ241) + 1)
typ241(UBound(typ241)) = GetType(System.Type)
Dim EmitConv As MethodBuilder = Helpers.DefineMethod("EmitConv", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ241)
Dim EmitConvIL As ILGenerator = EmitConv.GetILGenerator()
Dim EmitConvparam01 As ParameterBuilder = EmitConv.DefineParameter(1, ParameterAttributes.None, "source")
Dim EmitConvparam02 As ParameterBuilder = EmitConv.DefineParameter(2, ParameterAttributes.None, "sink")
EmitConvIL.MarkSequencePoint(doc10, 1290, 1, 1290, 100)
Dim locbldr219 As LocalBuilder = EmitConvIL.DeclareLocal(GetType(System.Type))
locbldr219.SetLocalSymInfo("typ")
EmitConvIL.MarkSequencePoint(doc10, 1291, 1, 1291, 100)
Dim locbldr220 As LocalBuilder = EmitConvIL.DeclareLocal(GetType(System.Type))
locbldr220.SetLocalSymInfo("convc")
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.Convert))
Dim typ242 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ242))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ242).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 1)
EmitConvIL.MarkSequencePoint(doc10, 1292, 1, 1292, 100)
Dim locbldr221 As LocalBuilder = EmitConvIL.DeclareLocal(GetType(System.Boolean))
locbldr221.SetLocalSymInfo("b")
EmitConvIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc10, 1293, 1, 1293, 100)
Dim locbldr222 As LocalBuilder = EmitConvIL.DeclareLocal(GetType(System.Boolean))
locbldr222.SetLocalSymInfo("b2")
EmitConvIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Stloc, 3)
EmitConvIL.MarkSequencePoint(doc10, 1294, 1, 1294, 100)
Dim locbldr223 As LocalBuilder = EmitConvIL.DeclareLocal(GetType(MethodInfo))
locbldr223.SetLocalSymInfo("m1")
EmitConvIL.MarkSequencePoint(doc10, 1295, 1, 1295, 100)
Dim locbldr224 As LocalBuilder = EmitConvIL.DeclareLocal(GetType(System.Type).MakeArrayType())
locbldr224.SetLocalSymInfo("arr")
EmitConvIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
EmitConvIL.Emit(OpCodes.Conv_U)
EmitConvIL.Emit(OpCodes.Newarr, GetType(System.Type))
EmitConvIL.Emit(OpCodes.Stloc, 5)
EmitConvIL.MarkSequencePoint(doc10, 1297, 1, 1297, 100)
Dim label21 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.MarkSequencePoint(doc10, 1299, 1, 1299, 100)
Dim typ243(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ243(UBound(typ243) + 1)
typ243(UBound(typ243)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ243))
Typ = Typ03.GetMethod("Equals", typ243).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc10, 1300, 1, 1300, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa199 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru199 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont199 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru199)
EmitConvIL.Emit(OpCodes.Br, fa199)
EmitConvIL.MarkLabel(tru199)
EmitConvIL.MarkSequencePoint(doc10, 1301, 1, 1301, 100)
EmitConvIL.Emit(OpCodes.Br, label21)
EmitConvIL.MarkSequencePoint(doc10, 1302, 1, 1302, 100)
EmitConvIL.Emit(OpCodes.Br, cont199)
EmitConvIL.MarkLabel(fa199)
EmitConvIL.Emit(OpCodes.Br, cont199)
EmitConvIL.MarkLabel(cont199)
EmitConvIL.MarkSequencePoint(doc10, 1305, 1, 1305, 100)
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsPrimitive", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsPrimitive", Type.EmptyTypes).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc10, 1306, 1, 1306, 100)
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsPrimitive", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsPrimitive", Type.EmptyTypes).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 3)
EmitConvIL.MarkSequencePoint(doc10, 1307, 1, 1307, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.And)
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc10, 1311, 1, 1311, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa200 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru200 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont200 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru200)
EmitConvIL.Emit(OpCodes.Br, fa200)
EmitConvIL.MarkLabel(tru200)
EmitConvIL.MarkSequencePoint(doc10, 1313, 1, 1313, 100)
Dim typ246(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
ReDim Preserve typ246(UBound(typ246) + 1)
typ246(UBound(typ246)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ246))
Typ = Typ03.GetMethod("Equals", typ246).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc10, 1315, 1, 1315, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa201 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru201 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont201 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru201)
EmitConvIL.Emit(OpCodes.Br, fa201)
EmitConvIL.MarkLabel(tru201)
EmitConvIL.MarkSequencePoint(doc10, 1316, 1, 1316, 100)
Dim typ247(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ247(UBound(typ247) + 1)
typ247(UBound(typ247)) = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "op_Implicit")
Typ = GetType(System.String)
ReDim Preserve typ247(UBound(typ247) + 1)
typ247(UBound(typ247)) = Typ
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
ReDim Preserve typ247(UBound(typ247) + 1)
typ247(UBound(typ247)) = Typ
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ247(UBound(typ247) + 1)
typ247(UBound(typ247)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadConvOp", typ247))
Typ = GetType(Loader).GetMethod("LoadConvOp", typ247).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc10, 1317, 1, 1317, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
EmitConvIL.Emit(OpCodes.Ldnull)
Dim fa202 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru202 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont202 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, fa202)
EmitConvIL.Emit(OpCodes.Br, tru202)
EmitConvIL.MarkLabel(tru202)
EmitConvIL.MarkSequencePoint(doc10, 1318, 1, 1318, 100)
Dim typ248(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ248(UBound(typ248) + 1)
typ248(UBound(typ248)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ248))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ248).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc10, 1319, 1, 1319, 100)
EmitConvIL.Emit(OpCodes.Br, label21)
EmitConvIL.MarkSequencePoint(doc10, 1320, 1, 1320, 100)
EmitConvIL.Emit(OpCodes.Br, cont202)
EmitConvIL.MarkLabel(fa202)
EmitConvIL.Emit(OpCodes.Br, cont202)
EmitConvIL.MarkLabel(cont202)
EmitConvIL.MarkSequencePoint(doc10, 1322, 1, 1322, 100)
Dim typ249(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ249(UBound(typ249) + 1)
typ249(UBound(typ249)) = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "op_Explicit")
Typ = GetType(System.String)
ReDim Preserve typ249(UBound(typ249) + 1)
typ249(UBound(typ249)) = Typ
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
ReDim Preserve typ249(UBound(typ249) + 1)
typ249(UBound(typ249)) = Typ
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ249(UBound(typ249) + 1)
typ249(UBound(typ249)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadConvOp", typ249))
Typ = GetType(Loader).GetMethod("LoadConvOp", typ249).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc10, 1323, 1, 1323, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
EmitConvIL.Emit(OpCodes.Ldnull)
Dim fa203 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru203 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont203 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, fa203)
EmitConvIL.Emit(OpCodes.Br, tru203)
EmitConvIL.MarkLabel(tru203)
EmitConvIL.MarkSequencePoint(doc10, 1324, 1, 1324, 100)
Dim typ250(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ250(UBound(typ250) + 1)
typ250(UBound(typ250)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ250))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ250).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc10, 1325, 1, 1325, 100)
EmitConvIL.Emit(OpCodes.Br, label21)
EmitConvIL.MarkSequencePoint(doc10, 1326, 1, 1326, 100)
EmitConvIL.Emit(OpCodes.Br, cont203)
EmitConvIL.MarkLabel(fa203)
EmitConvIL.Emit(OpCodes.Br, cont203)
EmitConvIL.MarkLabel(cont203)
EmitConvIL.MarkSequencePoint(doc10, 1327, 1, 1327, 100)
EmitConvIL.Emit(OpCodes.Br, cont201)
EmitConvIL.MarkLabel(fa201)
EmitConvIL.Emit(OpCodes.Br, cont201)
EmitConvIL.MarkLabel(cont201)
EmitConvIL.MarkSequencePoint(doc10, 1329, 1, 1329, 100)
Dim typ251(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
ReDim Preserve typ251(UBound(typ251) + 1)
typ251(UBound(typ251)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ251))
Typ = Typ03.GetMethod("Equals", typ251).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc10, 1331, 1, 1331, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa204 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru204 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont204 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru204)
EmitConvIL.Emit(OpCodes.Br, fa204)
EmitConvIL.MarkLabel(tru204)
EmitConvIL.MarkSequencePoint(doc10, 1332, 1, 1332, 100)
Dim typ252(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
ReDim Preserve typ252(UBound(typ252) + 1)
typ252(UBound(typ252)) = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "op_Implicit")
Typ = GetType(System.String)
ReDim Preserve typ252(UBound(typ252) + 1)
typ252(UBound(typ252)) = Typ
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
ReDim Preserve typ252(UBound(typ252) + 1)
typ252(UBound(typ252)) = Typ
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ252(UBound(typ252) + 1)
typ252(UBound(typ252)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadConvOp", typ252))
Typ = GetType(Loader).GetMethod("LoadConvOp", typ252).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc10, 1333, 1, 1333, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
EmitConvIL.Emit(OpCodes.Ldnull)
Dim fa205 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru205 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont205 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, fa205)
EmitConvIL.Emit(OpCodes.Br, tru205)
EmitConvIL.MarkLabel(tru205)
EmitConvIL.MarkSequencePoint(doc10, 1334, 1, 1334, 100)
Dim typ253(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ253(UBound(typ253) + 1)
typ253(UBound(typ253)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ253))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ253).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc10, 1335, 1, 1335, 100)
EmitConvIL.Emit(OpCodes.Br, label21)
EmitConvIL.MarkSequencePoint(doc10, 1336, 1, 1336, 100)
EmitConvIL.Emit(OpCodes.Br, cont205)
EmitConvIL.MarkLabel(fa205)
EmitConvIL.Emit(OpCodes.Br, cont205)
EmitConvIL.MarkLabel(cont205)
EmitConvIL.MarkSequencePoint(doc10, 1338, 1, 1338, 100)
Dim typ254(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
ReDim Preserve typ254(UBound(typ254) + 1)
typ254(UBound(typ254)) = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "op_Explicit")
Typ = GetType(System.String)
ReDim Preserve typ254(UBound(typ254) + 1)
typ254(UBound(typ254)) = Typ
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
ReDim Preserve typ254(UBound(typ254) + 1)
typ254(UBound(typ254)) = Typ
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ254(UBound(typ254) + 1)
typ254(UBound(typ254)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadConvOp", typ254))
Typ = GetType(Loader).GetMethod("LoadConvOp", typ254).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc10, 1339, 1, 1339, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
EmitConvIL.Emit(OpCodes.Ldnull)
Dim fa206 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru206 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont206 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, fa206)
EmitConvIL.Emit(OpCodes.Br, tru206)
EmitConvIL.MarkLabel(tru206)
EmitConvIL.MarkSequencePoint(doc10, 1340, 1, 1340, 100)
Dim typ255(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ255(UBound(typ255) + 1)
typ255(UBound(typ255)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ255))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ255).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc10, 1341, 1, 1341, 100)
EmitConvIL.Emit(OpCodes.Br, label21)
EmitConvIL.MarkSequencePoint(doc10, 1342, 1, 1342, 100)
EmitConvIL.Emit(OpCodes.Br, cont206)
EmitConvIL.MarkLabel(fa206)
EmitConvIL.Emit(OpCodes.Br, cont206)
EmitConvIL.MarkLabel(cont206)
EmitConvIL.MarkSequencePoint(doc10, 1343, 1, 1343, 100)
EmitConvIL.Emit(OpCodes.Br, cont204)
EmitConvIL.MarkLabel(fa204)
EmitConvIL.Emit(OpCodes.Br, cont204)
EmitConvIL.MarkLabel(cont204)
EmitConvIL.MarkSequencePoint(doc10, 1345, 1, 1345, 100)
EmitConvIL.Emit(OpCodes.Br, cont200)
EmitConvIL.MarkLabel(fa200)
EmitConvIL.Emit(OpCodes.Br, cont200)
EmitConvIL.MarkLabel(cont200)
EmitConvIL.MarkSequencePoint(doc10, 1349, 1, 1349, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.Object))
Dim typ256 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ256))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ256).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc10, 1350, 1, 1350, 100)
Dim typ257(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
ReDim Preserve typ257(UBound(typ257) + 1)
typ257(UBound(typ257)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ257))
Typ = Typ03.GetMethod("Equals", typ257).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc10, 1352, 1, 1352, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa207 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru207 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont207 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru207)
EmitConvIL.Emit(OpCodes.Br, fa207)
EmitConvIL.MarkLabel(tru207)
EmitConvIL.MarkSequencePoint(doc10, 1353, 1, 1353, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(ValueType))
Dim typ258 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ258))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ258).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc10, 1354, 1, 1354, 100)
Dim typ259(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
ReDim Preserve typ259(UBound(typ259) + 1)
typ259(UBound(typ259)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsAssignableFrom", typ259))
Typ = Typ03.GetMethod("IsAssignableFrom", typ259).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc10, 1355, 1, 1355, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa208 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru208 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont208 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru208)
EmitConvIL.Emit(OpCodes.Br, fa208)
EmitConvIL.MarkLabel(tru208)
EmitConvIL.MarkSequencePoint(doc10, 1356, 1, 1356, 100)
Dim typ260(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
ReDim Preserve typ260(UBound(typ260) + 1)
typ260(UBound(typ260)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitBox", typ260))
Typ = GetType(ILEmitter).GetMethod("EmitBox", typ260).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc10, 1357, 1, 1357, 100)
EmitConvIL.Emit(OpCodes.Br, label21)
EmitConvIL.MarkSequencePoint(doc10, 1358, 1, 1358, 100)
EmitConvIL.Emit(OpCodes.Br, cont208)
EmitConvIL.MarkLabel(fa208)
EmitConvIL.MarkSequencePoint(doc10, 1359, 1, 1359, 100)
EmitConvIL.Emit(OpCodes.Br, label21)
EmitConvIL.MarkSequencePoint(doc10, 1360, 1, 1360, 100)
EmitConvIL.Emit(OpCodes.Br, cont208)
EmitConvIL.MarkLabel(cont208)
EmitConvIL.MarkSequencePoint(doc10, 1361, 1, 1361, 100)
EmitConvIL.Emit(OpCodes.Br, cont207)
EmitConvIL.MarkLabel(fa207)
EmitConvIL.Emit(OpCodes.Br, cont207)
EmitConvIL.MarkLabel(cont207)
EmitConvIL.MarkSequencePoint(doc10, 1363, 1, 1363, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.Object))
Dim typ261 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ261))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ261).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc10, 1364, 1, 1364, 100)
Dim typ262(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
ReDim Preserve typ262(UBound(typ262) + 1)
typ262(UBound(typ262)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ262))
Typ = Typ03.GetMethod("Equals", typ262).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc10, 1366, 1, 1366, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa209 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru209 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont209 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru209)
EmitConvIL.Emit(OpCodes.Br, fa209)
EmitConvIL.MarkLabel(tru209)
EmitConvIL.MarkSequencePoint(doc10, 1367, 1, 1367, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(ValueType))
Dim typ263 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ263))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ263).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc10, 1368, 1, 1368, 100)
Dim typ264(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ264(UBound(typ264) + 1)
typ264(UBound(typ264)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsAssignableFrom", typ264))
Typ = Typ03.GetMethod("IsAssignableFrom", typ264).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc10, 1369, 1, 1369, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa210 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru210 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont210 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru210)
EmitConvIL.Emit(OpCodes.Br, fa210)
EmitConvIL.MarkLabel(tru210)
EmitConvIL.MarkSequencePoint(doc10, 1370, 1, 1370, 100)
Dim typ265(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ265(UBound(typ265) + 1)
typ265(UBound(typ265)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitUnboxAny", typ265))
Typ = GetType(ILEmitter).GetMethod("EmitUnboxAny", typ265).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc10, 1371, 1, 1371, 100)
EmitConvIL.Emit(OpCodes.Br, label21)
EmitConvIL.MarkSequencePoint(doc10, 1372, 1, 1372, 100)
EmitConvIL.Emit(OpCodes.Br, cont210)
EmitConvIL.MarkLabel(fa210)
EmitConvIL.MarkSequencePoint(doc10, 1373, 1, 1373, 100)
EmitConvIL.Emit(OpCodes.Br, cont210)
EmitConvIL.MarkLabel(cont210)
EmitConvIL.MarkSequencePoint(doc10, 1374, 1, 1374, 100)
EmitConvIL.Emit(OpCodes.Br, cont209)
EmitConvIL.MarkLabel(fa209)
EmitConvIL.Emit(OpCodes.Br, cont209)
EmitConvIL.MarkLabel(cont209)
EmitConvIL.MarkSequencePoint(doc10, 1376, 1, 1376, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(ValueType))
Dim typ266 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ266))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ266).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc10, 1377, 1, 1377, 100)
Dim typ267(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ267(UBound(typ267) + 1)
typ267(UBound(typ267)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsAssignableFrom", typ267))
Typ = Typ03.GetMethod("IsAssignableFrom", typ267).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc10, 1378, 1, 1378, 100)
Dim typ268(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
ReDim Preserve typ268(UBound(typ268) + 1)
typ268(UBound(typ268)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsAssignableFrom", typ268))
Typ = Typ03.GetMethod("IsAssignableFrom", typ268).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 3)
EmitConvIL.MarkSequencePoint(doc10, 1379, 1, 1379, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Or)
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc10, 1381, 1, 1381, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa211 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru211 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont211 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru211)
EmitConvIL.Emit(OpCodes.Br, fa211)
EmitConvIL.MarkLabel(tru211)
EmitConvIL.MarkSequencePoint(doc10, 1383, 1, 1383, 100)
Dim typ269(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
ReDim Preserve typ269(UBound(typ269) + 1)
typ269(UBound(typ269)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsAssignableFrom", typ269))
Typ = Typ03.GetMethod("IsAssignableFrom", typ269).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc10, 1384, 1, 1384, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa212 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru212 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont212 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru212)
EmitConvIL.Emit(OpCodes.Br, fa212)
EmitConvIL.MarkLabel(tru212)
EmitConvIL.MarkSequencePoint(doc10, 1385, 1, 1385, 100)
EmitConvIL.Emit(OpCodes.Br, label21)
EmitConvIL.MarkSequencePoint(doc10, 1386, 1, 1386, 100)
EmitConvIL.Emit(OpCodes.Br, cont212)
EmitConvIL.MarkLabel(fa212)
EmitConvIL.Emit(OpCodes.Br, cont212)
EmitConvIL.MarkLabel(cont212)
EmitConvIL.MarkSequencePoint(doc10, 1388, 1, 1388, 100)
Dim typ270(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ270(UBound(typ270) + 1)
typ270(UBound(typ270)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsAssignableFrom", typ270))
Typ = Typ03.GetMethod("IsAssignableFrom", typ270).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc10, 1389, 1, 1389, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa213 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru213 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont213 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru213)
EmitConvIL.Emit(OpCodes.Br, fa213)
EmitConvIL.MarkLabel(tru213)
EmitConvIL.MarkSequencePoint(doc10, 1390, 1, 1390, 100)
Dim typ271(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ271(UBound(typ271) + 1)
typ271(UBound(typ271)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCastclass", typ271))
Typ = GetType(ILEmitter).GetMethod("EmitCastclass", typ271).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc10, 1391, 1, 1391, 100)
EmitConvIL.Emit(OpCodes.Br, label21)
EmitConvIL.MarkSequencePoint(doc10, 1392, 1, 1392, 100)
EmitConvIL.Emit(OpCodes.Br, cont213)
EmitConvIL.MarkLabel(fa213)
EmitConvIL.Emit(OpCodes.Br, cont213)
EmitConvIL.MarkLabel(cont213)
EmitConvIL.MarkSequencePoint(doc10, 1394, 1, 1394, 100)
EmitConvIL.Emit(OpCodes.Br, cont211)
EmitConvIL.MarkLabel(fa211)
EmitConvIL.MarkSequencePoint(doc10, 1395, 1, 1395, 100)
EmitConvIL.Emit(OpCodes.Br, cont211)
EmitConvIL.MarkLabel(cont211)
EmitConvIL.MarkSequencePoint(doc10, 1397, 1, 1397, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(IntPtr))
Dim typ272 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ272))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ272).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc10, 1398, 1, 1398, 100)
Dim typ273(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
ReDim Preserve typ273(UBound(typ273) + 1)
typ273(UBound(typ273)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ273))
Typ = Typ03.GetMethod("Equals", typ273).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc10, 1400, 1, 1400, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa214 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru214 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont214 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru214)
EmitConvIL.Emit(OpCodes.Br, fa214)
EmitConvIL.MarkLabel(tru214)
EmitConvIL.MarkSequencePoint(doc10, 1401, 1, 1401, 100)
Dim typ274(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "ToInt64")
Typ = GetType(System.String)
ReDim Preserve typ274(UBound(typ274) + 1)
typ274(UBound(typ274)) = Typ
EmitConvIL.Emit(OpCodes.Ldsfld, GetType(System.Type).GetField("EmptyTypes"))
Typ = GetType(System.Type).GetField("EmptyTypes").FieldType
ReDim Preserve typ274(UBound(typ274) + 1)
typ274(UBound(typ274)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetMethod", typ274))
Typ = Typ03.GetMethod("GetMethod", typ274).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc10, 1402, 1, 1402, 100)
Dim typ275(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ275(UBound(typ275) + 1)
typ275(UBound(typ275)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCallvirt", typ275))
Typ = GetType(ILEmitter).GetMethod("EmitCallvirt", typ275).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc10, 1403, 1, 1403, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.Int64))
Dim typ276 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ276))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ276).ReturnType
EmitConvIL.Emit(OpCodes.Starg, 0)
EmitConvIL.MarkSequencePoint(doc10, 1404, 1, 1404, 100)
EmitConvIL.Emit(OpCodes.Br, cont214)
EmitConvIL.MarkLabel(fa214)
EmitConvIL.Emit(OpCodes.Br, cont214)
EmitConvIL.MarkLabel(cont214)
EmitConvIL.MarkSequencePoint(doc10, 1406, 1, 1406, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.String))
Dim typ277 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ277))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ277).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc10, 1407, 1, 1407, 100)
Dim typ278(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
ReDim Preserve typ278(UBound(typ278) + 1)
typ278(UBound(typ278)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ278))
Typ = Typ03.GetMethod("Equals", typ278).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc10, 1409, 1, 1409, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa215 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru215 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont215 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru215)
EmitConvIL.Emit(OpCodes.Br, fa215)
EmitConvIL.MarkLabel(tru215)
EmitConvIL.MarkSequencePoint(doc10, 1410, 1, 1410, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
EmitConvIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EmitConvIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
EmitConvIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
EmitConvIL.MarkSequencePoint(doc10, 1411, 1, 1411, 100)
Dim typ279(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "ToString")
Typ = GetType(System.String)
ReDim Preserve typ279(UBound(typ279) + 1)
typ279(UBound(typ279)) = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ279(UBound(typ279) + 1)
typ279(UBound(typ279)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetMethod", typ279))
Typ = Typ03.GetMethod("GetMethod", typ279).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc10, 1412, 1, 1412, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
EmitConvIL.Emit(OpCodes.Ldnull)
Dim fa216 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru216 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont216 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru216)
EmitConvIL.Emit(OpCodes.Br, fa216)
EmitConvIL.MarkLabel(tru216)
EmitConvIL.MarkSequencePoint(doc10, 1413, 1, 1413, 100)
EmitConvIL.Emit(OpCodes.Br, cont216)
EmitConvIL.MarkLabel(fa216)
EmitConvIL.MarkSequencePoint(doc10, 1414, 1, 1414, 100)
Dim typ280(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ280(UBound(typ280) + 1)
typ280(UBound(typ280)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ280))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ280).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc10, 1415, 1, 1415, 100)
EmitConvIL.Emit(OpCodes.Br, label21)
EmitConvIL.MarkSequencePoint(doc10, 1416, 1, 1416, 100)
EmitConvIL.Emit(OpCodes.Br, cont216)
EmitConvIL.MarkLabel(cont216)
EmitConvIL.MarkSequencePoint(doc10, 1417, 1, 1417, 100)
EmitConvIL.Emit(OpCodes.Br, cont215)
EmitConvIL.MarkLabel(fa215)
EmitConvIL.Emit(OpCodes.Br, cont215)
EmitConvIL.MarkLabel(cont215)
EmitConvIL.MarkSequencePoint(doc10, 1419, 1, 1419, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.Char))
Dim typ281 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ281))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ281).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc10, 1420, 1, 1420, 100)
Dim typ282(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
ReDim Preserve typ282(UBound(typ282) + 1)
typ282(UBound(typ282)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ282))
Typ = Typ03.GetMethod("Equals", typ282).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc10, 1422, 1, 1422, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa217 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru217 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont217 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru217)
EmitConvIL.Emit(OpCodes.Br, fa217)
EmitConvIL.MarkLabel(tru217)
EmitConvIL.MarkSequencePoint(doc10, 1423, 1, 1423, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
EmitConvIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EmitConvIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
EmitConvIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
EmitConvIL.MarkSequencePoint(doc10, 1424, 1, 1424, 100)
Dim typ283(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "ToChar")
Typ = GetType(System.String)
ReDim Preserve typ283(UBound(typ283) + 1)
typ283(UBound(typ283)) = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ283(UBound(typ283) + 1)
typ283(UBound(typ283)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetMethod", typ283))
Typ = Typ03.GetMethod("GetMethod", typ283).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc10, 1425, 1, 1425, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
EmitConvIL.Emit(OpCodes.Ldnull)
Dim fa218 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru218 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont218 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru218)
EmitConvIL.Emit(OpCodes.Br, fa218)
EmitConvIL.MarkLabel(tru218)
EmitConvIL.MarkSequencePoint(doc10, 1426, 1, 1426, 100)
EmitConvIL.Emit(OpCodes.Br, cont218)
EmitConvIL.MarkLabel(fa218)
EmitConvIL.MarkSequencePoint(doc10, 1427, 1, 1427, 100)
Dim typ284(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ284(UBound(typ284) + 1)
typ284(UBound(typ284)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ284))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ284).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc10, 1428, 1, 1428, 100)
EmitConvIL.Emit(OpCodes.Br, label21)
EmitConvIL.MarkSequencePoint(doc10, 1429, 1, 1429, 100)
EmitConvIL.Emit(OpCodes.Br, cont218)
EmitConvIL.MarkLabel(cont218)
EmitConvIL.MarkSequencePoint(doc10, 1430, 1, 1430, 100)
EmitConvIL.Emit(OpCodes.Br, cont217)
EmitConvIL.MarkLabel(fa217)
EmitConvIL.Emit(OpCodes.Br, cont217)
EmitConvIL.MarkLabel(cont217)
EmitConvIL.MarkSequencePoint(doc10, 1432, 1, 1432, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.Decimal))
Dim typ285 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ285))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ285).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc10, 1433, 1, 1433, 100)
Dim typ286(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
ReDim Preserve typ286(UBound(typ286) + 1)
typ286(UBound(typ286)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ286))
Typ = Typ03.GetMethod("Equals", typ286).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc10, 1435, 1, 1435, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa219 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru219 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont219 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru219)
EmitConvIL.Emit(OpCodes.Br, fa219)
EmitConvIL.MarkLabel(tru219)
EmitConvIL.MarkSequencePoint(doc10, 1436, 1, 1436, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
EmitConvIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EmitConvIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
EmitConvIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
EmitConvIL.MarkSequencePoint(doc10, 1437, 1, 1437, 100)
Dim typ287(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "ToDecimal")
Typ = GetType(System.String)
ReDim Preserve typ287(UBound(typ287) + 1)
typ287(UBound(typ287)) = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ287(UBound(typ287) + 1)
typ287(UBound(typ287)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetMethod", typ287))
Typ = Typ03.GetMethod("GetMethod", typ287).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc10, 1438, 1, 1438, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
EmitConvIL.Emit(OpCodes.Ldnull)
Dim fa220 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru220 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont220 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru220)
EmitConvIL.Emit(OpCodes.Br, fa220)
EmitConvIL.MarkLabel(tru220)
EmitConvIL.MarkSequencePoint(doc10, 1439, 1, 1439, 100)
EmitConvIL.Emit(OpCodes.Br, cont220)
EmitConvIL.MarkLabel(fa220)
EmitConvIL.MarkSequencePoint(doc10, 1440, 1, 1440, 100)
Dim typ288(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ288(UBound(typ288) + 1)
typ288(UBound(typ288)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ288))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ288).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc10, 1441, 1, 1441, 100)
EmitConvIL.Emit(OpCodes.Br, label21)
EmitConvIL.MarkSequencePoint(doc10, 1442, 1, 1442, 100)
EmitConvIL.Emit(OpCodes.Br, cont220)
EmitConvIL.MarkLabel(cont220)
EmitConvIL.MarkSequencePoint(doc10, 1443, 1, 1443, 100)
EmitConvIL.Emit(OpCodes.Br, cont219)
EmitConvIL.MarkLabel(fa219)
EmitConvIL.Emit(OpCodes.Br, cont219)
EmitConvIL.MarkLabel(cont219)
EmitConvIL.MarkSequencePoint(doc10, 1445, 1, 1445, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.Double))
Dim typ289 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ289))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ289).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc10, 1446, 1, 1446, 100)
Dim typ290(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
ReDim Preserve typ290(UBound(typ290) + 1)
typ290(UBound(typ290)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ290))
Typ = Typ03.GetMethod("Equals", typ290).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc10, 1448, 1, 1448, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa221 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru221 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont221 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru221)
EmitConvIL.Emit(OpCodes.Br, fa221)
EmitConvIL.MarkLabel(tru221)
EmitConvIL.MarkSequencePoint(doc10, 1449, 1, 1449, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
EmitConvIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EmitConvIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
EmitConvIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
EmitConvIL.MarkSequencePoint(doc10, 1450, 1, 1450, 100)
Dim typ291(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "ToDouble")
Typ = GetType(System.String)
ReDim Preserve typ291(UBound(typ291) + 1)
typ291(UBound(typ291)) = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ291(UBound(typ291) + 1)
typ291(UBound(typ291)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetMethod", typ291))
Typ = Typ03.GetMethod("GetMethod", typ291).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc10, 1451, 1, 1451, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
EmitConvIL.Emit(OpCodes.Ldnull)
Dim fa222 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru222 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont222 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru222)
EmitConvIL.Emit(OpCodes.Br, fa222)
EmitConvIL.MarkLabel(tru222)
EmitConvIL.MarkSequencePoint(doc10, 1452, 1, 1452, 100)
EmitConvIL.Emit(OpCodes.Br, cont222)
EmitConvIL.MarkLabel(fa222)
EmitConvIL.MarkSequencePoint(doc10, 1453, 1, 1453, 100)
Dim typ292(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ292(UBound(typ292) + 1)
typ292(UBound(typ292)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ292))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ292).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc10, 1454, 1, 1454, 100)
EmitConvIL.Emit(OpCodes.Br, label21)
EmitConvIL.MarkSequencePoint(doc10, 1455, 1, 1455, 100)
EmitConvIL.Emit(OpCodes.Br, cont222)
EmitConvIL.MarkLabel(cont222)
EmitConvIL.MarkSequencePoint(doc10, 1456, 1, 1456, 100)
EmitConvIL.Emit(OpCodes.Br, cont221)
EmitConvIL.MarkLabel(fa221)
EmitConvIL.Emit(OpCodes.Br, cont221)
EmitConvIL.MarkLabel(cont221)
EmitConvIL.MarkSequencePoint(doc10, 1458, 1, 1458, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.Single))
Dim typ293 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ293))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ293).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc10, 1459, 1, 1459, 100)
Dim typ294(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
ReDim Preserve typ294(UBound(typ294) + 1)
typ294(UBound(typ294)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ294))
Typ = Typ03.GetMethod("Equals", typ294).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc10, 1461, 1, 1461, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa223 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru223 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont223 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru223)
EmitConvIL.Emit(OpCodes.Br, fa223)
EmitConvIL.MarkLabel(tru223)
EmitConvIL.MarkSequencePoint(doc10, 1462, 1, 1462, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
EmitConvIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EmitConvIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
EmitConvIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
EmitConvIL.MarkSequencePoint(doc10, 1463, 1, 1463, 100)
Dim typ295(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "ToSingle")
Typ = GetType(System.String)
ReDim Preserve typ295(UBound(typ295) + 1)
typ295(UBound(typ295)) = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ295(UBound(typ295) + 1)
typ295(UBound(typ295)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetMethod", typ295))
Typ = Typ03.GetMethod("GetMethod", typ295).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc10, 1464, 1, 1464, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
EmitConvIL.Emit(OpCodes.Ldnull)
Dim fa224 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru224 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont224 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru224)
EmitConvIL.Emit(OpCodes.Br, fa224)
EmitConvIL.MarkLabel(tru224)
EmitConvIL.MarkSequencePoint(doc10, 1465, 1, 1465, 100)
EmitConvIL.Emit(OpCodes.Br, cont224)
EmitConvIL.MarkLabel(fa224)
EmitConvIL.MarkSequencePoint(doc10, 1466, 1, 1466, 100)
Dim typ296(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ296(UBound(typ296) + 1)
typ296(UBound(typ296)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ296))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ296).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc10, 1467, 1, 1467, 100)
EmitConvIL.Emit(OpCodes.Br, label21)
EmitConvIL.MarkSequencePoint(doc10, 1468, 1, 1468, 100)
EmitConvIL.Emit(OpCodes.Br, cont224)
EmitConvIL.MarkLabel(cont224)
EmitConvIL.MarkSequencePoint(doc10, 1469, 1, 1469, 100)
EmitConvIL.Emit(OpCodes.Br, cont223)
EmitConvIL.MarkLabel(fa223)
EmitConvIL.Emit(OpCodes.Br, cont223)
EmitConvIL.MarkLabel(cont223)
EmitConvIL.MarkSequencePoint(doc10, 1471, 1, 1471, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.Int64))
Dim typ297 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ297))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ297).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc10, 1472, 1, 1472, 100)
Dim typ298(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
ReDim Preserve typ298(UBound(typ298) + 1)
typ298(UBound(typ298)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ298))
Typ = Typ03.GetMethod("Equals", typ298).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc10, 1474, 1, 1474, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa225 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru225 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont225 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru225)
EmitConvIL.Emit(OpCodes.Br, fa225)
EmitConvIL.MarkLabel(tru225)
EmitConvIL.MarkSequencePoint(doc10, 1475, 1, 1475, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
EmitConvIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EmitConvIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
EmitConvIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
EmitConvIL.MarkSequencePoint(doc10, 1476, 1, 1476, 100)
Dim typ299(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "ToInt64")
Typ = GetType(System.String)
ReDim Preserve typ299(UBound(typ299) + 1)
typ299(UBound(typ299)) = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ299(UBound(typ299) + 1)
typ299(UBound(typ299)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetMethod", typ299))
Typ = Typ03.GetMethod("GetMethod", typ299).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc10, 1477, 1, 1477, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
EmitConvIL.Emit(OpCodes.Ldnull)
Dim fa226 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru226 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont226 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru226)
EmitConvIL.Emit(OpCodes.Br, fa226)
EmitConvIL.MarkLabel(tru226)
EmitConvIL.MarkSequencePoint(doc10, 1478, 1, 1478, 100)
EmitConvIL.Emit(OpCodes.Br, cont226)
EmitConvIL.MarkLabel(fa226)
EmitConvIL.MarkSequencePoint(doc10, 1479, 1, 1479, 100)
Dim typ300(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ300(UBound(typ300) + 1)
typ300(UBound(typ300)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ300))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ300).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc10, 1480, 1, 1480, 100)
EmitConvIL.Emit(OpCodes.Br, label21)
EmitConvIL.MarkSequencePoint(doc10, 1481, 1, 1481, 100)
EmitConvIL.Emit(OpCodes.Br, cont226)
EmitConvIL.MarkLabel(cont226)
EmitConvIL.MarkSequencePoint(doc10, 1482, 1, 1482, 100)
EmitConvIL.Emit(OpCodes.Br, cont225)
EmitConvIL.MarkLabel(fa225)
EmitConvIL.Emit(OpCodes.Br, cont225)
EmitConvIL.MarkLabel(cont225)
EmitConvIL.MarkSequencePoint(doc10, 1484, 1, 1484, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.Int32))
Dim typ301 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ301))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ301).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc10, 1485, 1, 1485, 100)
Dim typ302(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
ReDim Preserve typ302(UBound(typ302) + 1)
typ302(UBound(typ302)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ302))
Typ = Typ03.GetMethod("Equals", typ302).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc10, 1487, 1, 1487, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa227 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru227 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont227 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru227)
EmitConvIL.Emit(OpCodes.Br, fa227)
EmitConvIL.MarkLabel(tru227)
EmitConvIL.MarkSequencePoint(doc10, 1488, 1, 1488, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
EmitConvIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EmitConvIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
EmitConvIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
EmitConvIL.MarkSequencePoint(doc10, 1489, 1, 1489, 100)
Dim typ303(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "ToInt32")
Typ = GetType(System.String)
ReDim Preserve typ303(UBound(typ303) + 1)
typ303(UBound(typ303)) = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ303(UBound(typ303) + 1)
typ303(UBound(typ303)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetMethod", typ303))
Typ = Typ03.GetMethod("GetMethod", typ303).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc10, 1490, 1, 1490, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
EmitConvIL.Emit(OpCodes.Ldnull)
Dim fa228 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru228 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont228 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru228)
EmitConvIL.Emit(OpCodes.Br, fa228)
EmitConvIL.MarkLabel(tru228)
EmitConvIL.MarkSequencePoint(doc10, 1491, 1, 1491, 100)
EmitConvIL.Emit(OpCodes.Br, cont228)
EmitConvIL.MarkLabel(fa228)
EmitConvIL.MarkSequencePoint(doc10, 1492, 1, 1492, 100)
Dim typ304(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ304(UBound(typ304) + 1)
typ304(UBound(typ304)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ304))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ304).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc10, 1493, 1, 1493, 100)
EmitConvIL.Emit(OpCodes.Br, label21)
EmitConvIL.MarkSequencePoint(doc10, 1494, 1, 1494, 100)
EmitConvIL.Emit(OpCodes.Br, cont228)
EmitConvIL.MarkLabel(cont228)
EmitConvIL.MarkSequencePoint(doc10, 1495, 1, 1495, 100)
EmitConvIL.Emit(OpCodes.Br, cont227)
EmitConvIL.MarkLabel(fa227)
EmitConvIL.Emit(OpCodes.Br, cont227)
EmitConvIL.MarkLabel(cont227)
EmitConvIL.MarkSequencePoint(doc10, 1497, 1, 1497, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.Int16))
Dim typ305 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ305))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ305).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc10, 1498, 1, 1498, 100)
Dim typ306(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
ReDim Preserve typ306(UBound(typ306) + 1)
typ306(UBound(typ306)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ306))
Typ = Typ03.GetMethod("Equals", typ306).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc10, 1500, 1, 1500, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa229 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru229 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont229 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru229)
EmitConvIL.Emit(OpCodes.Br, fa229)
EmitConvIL.MarkLabel(tru229)
EmitConvIL.MarkSequencePoint(doc10, 1501, 1, 1501, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
EmitConvIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EmitConvIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
EmitConvIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
EmitConvIL.MarkSequencePoint(doc10, 1502, 1, 1502, 100)
Dim typ307(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "ToInt16")
Typ = GetType(System.String)
ReDim Preserve typ307(UBound(typ307) + 1)
typ307(UBound(typ307)) = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ307(UBound(typ307) + 1)
typ307(UBound(typ307)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetMethod", typ307))
Typ = Typ03.GetMethod("GetMethod", typ307).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc10, 1503, 1, 1503, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
EmitConvIL.Emit(OpCodes.Ldnull)
Dim fa230 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru230 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont230 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru230)
EmitConvIL.Emit(OpCodes.Br, fa230)
EmitConvIL.MarkLabel(tru230)
EmitConvIL.MarkSequencePoint(doc10, 1504, 1, 1504, 100)
EmitConvIL.Emit(OpCodes.Br, cont230)
EmitConvIL.MarkLabel(fa230)
EmitConvIL.MarkSequencePoint(doc10, 1505, 1, 1505, 100)
Dim typ308(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ308(UBound(typ308) + 1)
typ308(UBound(typ308)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ308))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ308).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc10, 1506, 1, 1506, 100)
EmitConvIL.Emit(OpCodes.Br, label21)
EmitConvIL.MarkSequencePoint(doc10, 1507, 1, 1507, 100)
EmitConvIL.Emit(OpCodes.Br, cont230)
EmitConvIL.MarkLabel(cont230)
EmitConvIL.MarkSequencePoint(doc10, 1508, 1, 1508, 100)
EmitConvIL.Emit(OpCodes.Br, cont229)
EmitConvIL.MarkLabel(fa229)
EmitConvIL.Emit(OpCodes.Br, cont229)
EmitConvIL.MarkLabel(cont229)
EmitConvIL.MarkSequencePoint(doc10, 1510, 1, 1510, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.SByte))
Dim typ309 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ309))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ309).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc10, 1511, 1, 1511, 100)
Dim typ310(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
ReDim Preserve typ310(UBound(typ310) + 1)
typ310(UBound(typ310)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ310))
Typ = Typ03.GetMethod("Equals", typ310).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc10, 1513, 1, 1513, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa231 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru231 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont231 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru231)
EmitConvIL.Emit(OpCodes.Br, fa231)
EmitConvIL.MarkLabel(tru231)
EmitConvIL.MarkSequencePoint(doc10, 1514, 1, 1514, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
EmitConvIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EmitConvIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
EmitConvIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
EmitConvIL.MarkSequencePoint(doc10, 1515, 1, 1515, 100)
Dim typ311(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "ToSByte")
Typ = GetType(System.String)
ReDim Preserve typ311(UBound(typ311) + 1)
typ311(UBound(typ311)) = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ311(UBound(typ311) + 1)
typ311(UBound(typ311)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetMethod", typ311))
Typ = Typ03.GetMethod("GetMethod", typ311).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc10, 1516, 1, 1516, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
EmitConvIL.Emit(OpCodes.Ldnull)
Dim fa232 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru232 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont232 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru232)
EmitConvIL.Emit(OpCodes.Br, fa232)
EmitConvIL.MarkLabel(tru232)
EmitConvIL.MarkSequencePoint(doc10, 1517, 1, 1517, 100)
EmitConvIL.Emit(OpCodes.Br, cont232)
EmitConvIL.MarkLabel(fa232)
EmitConvIL.MarkSequencePoint(doc10, 1518, 1, 1518, 100)
Dim typ312(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ312(UBound(typ312) + 1)
typ312(UBound(typ312)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ312))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ312).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc10, 1519, 1, 1519, 100)
EmitConvIL.Emit(OpCodes.Br, label21)
EmitConvIL.MarkSequencePoint(doc10, 1520, 1, 1520, 100)
EmitConvIL.Emit(OpCodes.Br, cont232)
EmitConvIL.MarkLabel(cont232)
EmitConvIL.MarkSequencePoint(doc10, 1521, 1, 1521, 100)
EmitConvIL.Emit(OpCodes.Br, cont231)
EmitConvIL.MarkLabel(fa231)
EmitConvIL.Emit(OpCodes.Br, cont231)
EmitConvIL.MarkLabel(cont231)
EmitConvIL.MarkSequencePoint(doc10, 1523, 1, 1523, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.Boolean))
Dim typ313 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ313))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ313).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc10, 1524, 1, 1524, 100)
Dim typ314(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
ReDim Preserve typ314(UBound(typ314) + 1)
typ314(UBound(typ314)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ314))
Typ = Typ03.GetMethod("Equals", typ314).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc10, 1526, 1, 1526, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa233 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru233 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont233 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru233)
EmitConvIL.Emit(OpCodes.Br, fa233)
EmitConvIL.MarkLabel(tru233)
EmitConvIL.MarkSequencePoint(doc10, 1527, 1, 1527, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
EmitConvIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EmitConvIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
EmitConvIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
EmitConvIL.MarkSequencePoint(doc10, 1528, 1, 1528, 100)
Dim typ315(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "ToBoolean")
Typ = GetType(System.String)
ReDim Preserve typ315(UBound(typ315) + 1)
typ315(UBound(typ315)) = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ315(UBound(typ315) + 1)
typ315(UBound(typ315)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetMethod", typ315))
Typ = Typ03.GetMethod("GetMethod", typ315).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc10, 1529, 1, 1529, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
EmitConvIL.Emit(OpCodes.Ldnull)
Dim fa234 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru234 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont234 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru234)
EmitConvIL.Emit(OpCodes.Br, fa234)
EmitConvIL.MarkLabel(tru234)
EmitConvIL.MarkSequencePoint(doc10, 1530, 1, 1530, 100)
EmitConvIL.Emit(OpCodes.Br, cont234)
EmitConvIL.MarkLabel(fa234)
EmitConvIL.MarkSequencePoint(doc10, 1531, 1, 1531, 100)
Dim typ316(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ316(UBound(typ316) + 1)
typ316(UBound(typ316)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ316))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ316).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc10, 1532, 1, 1532, 100)
EmitConvIL.Emit(OpCodes.Br, label21)
EmitConvIL.MarkSequencePoint(doc10, 1533, 1, 1533, 100)
EmitConvIL.Emit(OpCodes.Br, cont234)
EmitConvIL.MarkLabel(cont234)
EmitConvIL.MarkSequencePoint(doc10, 1534, 1, 1534, 100)
EmitConvIL.Emit(OpCodes.Br, cont233)
EmitConvIL.MarkLabel(fa233)
EmitConvIL.Emit(OpCodes.Br, cont233)
EmitConvIL.MarkLabel(cont233)
EmitConvIL.MarkSequencePoint(doc10, 1536, 1, 1536, 100)
EmitConvIL.MarkLabel(label21)
EmitConvIL.MarkSequencePoint(doc10, 1538, 1, 1538, 100)
EmitConvIL.Emit(OpCodes.Ret)
Dim typ317(-1) As Type
ReDim Preserve typ317(UBound(typ317) + 1)
typ317(UBound(typ317)) = GetType(MethodInfo)
ReDim Preserve typ317(UBound(typ317) + 1)
typ317(UBound(typ317)) = GetType(System.Boolean)
Dim EmitMetCall As MethodBuilder = Helpers.DefineMethod("EmitMetCall", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ317)
Dim EmitMetCallIL As ILGenerator = EmitMetCall.GetILGenerator()
Dim EmitMetCallparam01 As ParameterBuilder = EmitMetCall.DefineParameter(1, ParameterAttributes.None, "met")
Dim EmitMetCallparam02 As ParameterBuilder = EmitMetCall.DefineParameter(2, ParameterAttributes.None, "stat")
EmitMetCallIL.MarkSequencePoint(doc10, 1541, 1, 1541, 100)
Dim locbldr225 As LocalBuilder = EmitMetCallIL.DeclareLocal(GetType(System.Boolean))
locbldr225.SetLocalSymInfo("b")
EmitMetCallIL.MarkSequencePoint(doc10, 1543, 1, 1543, 100)
EmitMetCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
EmitMetCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa235 As System.Reflection.Emit.Label = EmitMetCallIL.DefineLabel()
Dim tru235 As System.Reflection.Emit.Label = EmitMetCallIL.DefineLabel()
Dim cont235 As System.Reflection.Emit.Label = EmitMetCallIL.DefineLabel()
EmitMetCallIL.Emit(OpCodes.Beq, tru235)
EmitMetCallIL.Emit(OpCodes.Br, fa235)
EmitMetCallIL.MarkLabel(tru235)
EmitMetCallIL.MarkSequencePoint(doc10, 1544, 1, 1544, 100)
Dim typ318(-1) As Type
EmitMetCallIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(MethodInfo)
ReDim Preserve typ318(UBound(typ318) + 1)
typ318(UBound(typ318)) = Typ
EmitMetCallIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ318))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ318).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMetCallIL.Emit(OpCodes.Pop)
End If
EmitMetCallIL.MarkSequencePoint(doc10, 1545, 1, 1545, 100)
EmitMetCallIL.Emit(OpCodes.Br, cont235)
EmitMetCallIL.MarkLabel(fa235)
EmitMetCallIL.MarkSequencePoint(doc10, 1546, 1, 1546, 100)
Dim locbldr226 As LocalBuilder = EmitMetCallIL.DeclareLocal(GetType(System.Type))
locbldr226.SetLocalSymInfo("typ")
EmitMetCallIL.Emit(OpCodes.Ldtoken, GetType(ValueType))
Dim typ319 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitMetCallIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ319))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ319).ReturnType
EmitMetCallIL.Emit(OpCodes.Stloc, 1)
EmitMetCallIL.MarkSequencePoint(doc10, 1547, 1, 1547, 100)
Dim typ320(-1) As Type
EmitMetCallIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitMetCallIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type05"))
Typ = GetType(AsmFactory).GetField("Type05").FieldType
ReDim Preserve typ320(UBound(typ320) + 1)
typ320(UBound(typ320)) = Typ
EmitMetCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsAssignableFrom", typ320))
Typ = Typ03.GetMethod("IsAssignableFrom", typ320).ReturnType
EmitMetCallIL.Emit(OpCodes.Stloc, 0)
EmitMetCallIL.MarkSequencePoint(doc10, 1549, 1, 1549, 100)
EmitMetCallIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Boolean)
EmitMetCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa236 As System.Reflection.Emit.Label = EmitMetCallIL.DefineLabel()
Dim tru236 As System.Reflection.Emit.Label = EmitMetCallIL.DefineLabel()
Dim cont236 As System.Reflection.Emit.Label = EmitMetCallIL.DefineLabel()
EmitMetCallIL.Emit(OpCodes.Beq, tru236)
EmitMetCallIL.Emit(OpCodes.Br, fa236)
EmitMetCallIL.MarkLabel(tru236)
EmitMetCallIL.MarkSequencePoint(doc10, 1550, 1, 1550, 100)
EmitMetCallIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitMetCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsVirtual", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsVirtual", Type.EmptyTypes).ReturnType
EmitMetCallIL.Emit(OpCodes.Stloc, 0)
EmitMetCallIL.MarkSequencePoint(doc10, 1551, 1, 1551, 100)
EmitMetCallIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Boolean)
EmitMetCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa237 As System.Reflection.Emit.Label = EmitMetCallIL.DefineLabel()
Dim tru237 As System.Reflection.Emit.Label = EmitMetCallIL.DefineLabel()
Dim cont237 As System.Reflection.Emit.Label = EmitMetCallIL.DefineLabel()
EmitMetCallIL.Emit(OpCodes.Beq, tru237)
EmitMetCallIL.Emit(OpCodes.Br, fa237)
EmitMetCallIL.MarkLabel(tru237)
EmitMetCallIL.MarkSequencePoint(doc10, 1553, 1, 1553, 100)
EmitMetCallIL.Emit(OpCodes.Br, cont237)
EmitMetCallIL.MarkLabel(fa237)
EmitMetCallIL.Emit(OpCodes.Br, cont237)
EmitMetCallIL.MarkLabel(cont237)
EmitMetCallIL.MarkSequencePoint(doc10, 1554, 1, 1554, 100)
EmitMetCallIL.Emit(OpCodes.Br, cont236)
EmitMetCallIL.MarkLabel(fa236)
EmitMetCallIL.Emit(OpCodes.Br, cont236)
EmitMetCallIL.MarkLabel(cont236)
EmitMetCallIL.MarkSequencePoint(doc10, 1555, 1, 1555, 100)
EmitMetCallIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Boolean)
EmitMetCallIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa238 As System.Reflection.Emit.Label = EmitMetCallIL.DefineLabel()
Dim tru238 As System.Reflection.Emit.Label = EmitMetCallIL.DefineLabel()
Dim cont238 As System.Reflection.Emit.Label = EmitMetCallIL.DefineLabel()
EmitMetCallIL.Emit(OpCodes.Beq, tru238)
EmitMetCallIL.Emit(OpCodes.Br, fa238)
EmitMetCallIL.MarkLabel(tru238)
EmitMetCallIL.MarkSequencePoint(doc10, 1556, 1, 1556, 100)
Dim typ322(-1) As Type
EmitMetCallIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(MethodInfo)
ReDim Preserve typ322(UBound(typ322) + 1)
typ322(UBound(typ322)) = Typ
EmitMetCallIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCallvirt", typ322))
Typ = GetType(ILEmitter).GetMethod("EmitCallvirt", typ322).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMetCallIL.Emit(OpCodes.Pop)
End If
EmitMetCallIL.MarkSequencePoint(doc10, 1557, 1, 1557, 100)
EmitMetCallIL.Emit(OpCodes.Br, cont238)
EmitMetCallIL.MarkLabel(fa238)
EmitMetCallIL.MarkSequencePoint(doc10, 1558, 1, 1558, 100)
Dim typ323(-1) As Type
EmitMetCallIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(MethodInfo)
ReDim Preserve typ323(UBound(typ323) + 1)
typ323(UBound(typ323)) = Typ
EmitMetCallIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ323))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ323).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMetCallIL.Emit(OpCodes.Pop)
End If
EmitMetCallIL.MarkSequencePoint(doc10, 1559, 1, 1559, 100)
EmitMetCallIL.Emit(OpCodes.Br, cont238)
EmitMetCallIL.MarkLabel(cont238)
EmitMetCallIL.MarkSequencePoint(doc10, 1561, 1, 1561, 100)
EmitMetCallIL.Emit(OpCodes.Br, cont235)
EmitMetCallIL.MarkLabel(cont235)
EmitMetCallIL.MarkSequencePoint(doc10, 1562, 1, 1562, 100)
EmitMetCallIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("PopFlg"))
Typ = GetType(AsmFactory).GetField("PopFlg").FieldType
EmitMetCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa239 As System.Reflection.Emit.Label = EmitMetCallIL.DefineLabel()
Dim tru239 As System.Reflection.Emit.Label = EmitMetCallIL.DefineLabel()
Dim cont239 As System.Reflection.Emit.Label = EmitMetCallIL.DefineLabel()
EmitMetCallIL.Emit(OpCodes.Beq, tru239)
EmitMetCallIL.Emit(OpCodes.Br, fa239)
EmitMetCallIL.MarkLabel(tru239)
EmitMetCallIL.MarkSequencePoint(doc10, 1563, 1, 1563, 100)
Dim locbldr227 As LocalBuilder = EmitMetCallIL.DeclareLocal(GetType(System.Type))
locbldr227.SetLocalSymInfo("rt")
EmitMetCallIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitMetCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
EmitMetCallIL.Emit(OpCodes.Stloc, 2)
EmitMetCallIL.MarkSequencePoint(doc10, 1564, 1, 1564, 100)
Dim locbldr228 As LocalBuilder = EmitMetCallIL.DeclareLocal(GetType(System.Type))
locbldr228.SetLocalSymInfo("vt")
EmitMetCallIL.Emit(OpCodes.Ldtoken, GetType(System.Void))
Dim typ325 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitMetCallIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ325))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ325).ReturnType
EmitMetCallIL.Emit(OpCodes.Stloc, 3)
EmitMetCallIL.MarkSequencePoint(doc10, 1565, 1, 1565, 100)
Dim typ326(-1) As Type
EmitMetCallIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
Typ03 = Typ
EmitMetCallIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Type)
ReDim Preserve typ326(UBound(typ326) + 1)
typ326(UBound(typ326)) = Typ
EmitMetCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ326))
Typ = Typ03.GetMethod("Equals", typ326).ReturnType
EmitMetCallIL.Emit(OpCodes.Stloc, 0)
EmitMetCallIL.MarkSequencePoint(doc10, 1566, 1, 1566, 100)
EmitMetCallIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Boolean)
EmitMetCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa240 As System.Reflection.Emit.Label = EmitMetCallIL.DefineLabel()
Dim tru240 As System.Reflection.Emit.Label = EmitMetCallIL.DefineLabel()
Dim cont240 As System.Reflection.Emit.Label = EmitMetCallIL.DefineLabel()
EmitMetCallIL.Emit(OpCodes.Beq, tru240)
EmitMetCallIL.Emit(OpCodes.Br, fa240)
EmitMetCallIL.MarkLabel(tru240)
EmitMetCallIL.MarkSequencePoint(doc10, 1567, 1, 1567, 100)
EmitMetCallIL.Emit(OpCodes.Br, cont240)
EmitMetCallIL.MarkLabel(fa240)
EmitMetCallIL.MarkSequencePoint(doc10, 1568, 1, 1568, 100)
EmitMetCallIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitPop", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitPop", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMetCallIL.Emit(OpCodes.Pop)
End If
EmitMetCallIL.MarkSequencePoint(doc10, 1569, 1, 1569, 100)
EmitMetCallIL.Emit(OpCodes.Br, cont240)
EmitMetCallIL.MarkLabel(cont240)
EmitMetCallIL.MarkSequencePoint(doc10, 1570, 1, 1570, 100)
EmitMetCallIL.Emit(OpCodes.Br, cont239)
EmitMetCallIL.MarkLabel(fa239)
EmitMetCallIL.Emit(OpCodes.Br, cont239)
EmitMetCallIL.MarkLabel(cont239)
EmitMetCallIL.MarkSequencePoint(doc10, 1571, 1, 1571, 100)
EmitMetCallIL.Emit(OpCodes.Ret)
Dim typ327(-1) As Type
ReDim Preserve typ327(UBound(typ327) + 1)
typ327(UBound(typ327)) = GetType(MethodInfo)
ReDim Preserve typ327(UBound(typ327) + 1)
typ327(UBound(typ327)) = GetType(System.Boolean)
Dim EmitPtrLd As MethodBuilder = Helpers.DefineMethod("EmitPtrLd", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ327)
Dim EmitPtrLdIL As ILGenerator = EmitPtrLd.GetILGenerator()
Dim EmitPtrLdparam01 As ParameterBuilder = EmitPtrLd.DefineParameter(1, ParameterAttributes.None, "met")
Dim EmitPtrLdparam02 As ParameterBuilder = EmitPtrLd.DefineParameter(2, ParameterAttributes.None, "stat")
EmitPtrLdIL.MarkSequencePoint(doc10, 1574, 1, 1574, 100)
EmitPtrLdIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
EmitPtrLdIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa241 As System.Reflection.Emit.Label = EmitPtrLdIL.DefineLabel()
Dim tru241 As System.Reflection.Emit.Label = EmitPtrLdIL.DefineLabel()
Dim cont241 As System.Reflection.Emit.Label = EmitPtrLdIL.DefineLabel()
EmitPtrLdIL.Emit(OpCodes.Beq, tru241)
EmitPtrLdIL.Emit(OpCodes.Br, fa241)
EmitPtrLdIL.MarkLabel(tru241)
EmitPtrLdIL.MarkSequencePoint(doc10, 1575, 1, 1575, 100)
Dim typ328(-1) As Type
EmitPtrLdIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(MethodInfo)
ReDim Preserve typ328(UBound(typ328) + 1)
typ328(UBound(typ328)) = Typ
EmitPtrLdIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdftn", typ328))
Typ = GetType(ILEmitter).GetMethod("EmitLdftn", typ328).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitPtrLdIL.Emit(OpCodes.Pop)
End If
EmitPtrLdIL.MarkSequencePoint(doc10, 1576, 1, 1576, 100)
EmitPtrLdIL.Emit(OpCodes.Br, cont241)
EmitPtrLdIL.MarkLabel(fa241)
EmitPtrLdIL.MarkSequencePoint(doc10, 1577, 1, 1577, 100)
Dim typ329(-1) As Type
EmitPtrLdIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(MethodInfo)
ReDim Preserve typ329(UBound(typ329) + 1)
typ329(UBound(typ329)) = Typ
EmitPtrLdIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdvirtftn", typ329))
Typ = GetType(ILEmitter).GetMethod("EmitLdvirtftn", typ329).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitPtrLdIL.Emit(OpCodes.Pop)
End If
EmitPtrLdIL.MarkSequencePoint(doc10, 1578, 1, 1578, 100)
EmitPtrLdIL.Emit(OpCodes.Br, cont241)
EmitPtrLdIL.MarkLabel(cont241)
EmitPtrLdIL.MarkSequencePoint(doc10, 1579, 1, 1579, 100)
EmitPtrLdIL.Emit(OpCodes.Ret)
Dim typ330(-1) As Type
ReDim Preserve typ330(UBound(typ330) + 1)
typ330(UBound(typ330)) = GetType(FieldInfo)
ReDim Preserve typ330(UBound(typ330) + 1)
typ330(UBound(typ330)) = GetType(System.Boolean)
Dim EmitFldLd As MethodBuilder = Helpers.DefineMethod("EmitFldLd", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ330)
Dim EmitFldLdIL As ILGenerator = EmitFldLd.GetILGenerator()
Dim EmitFldLdparam01 As ParameterBuilder = EmitFldLd.DefineParameter(1, ParameterAttributes.None, "fld")
Dim EmitFldLdparam02 As ParameterBuilder = EmitFldLd.DefineParameter(2, ParameterAttributes.None, "stat")
EmitFldLdIL.MarkSequencePoint(doc10, 1583, 1, 1583, 100)
EmitFldLdIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AddrFlg"))
Typ = GetType(AsmFactory).GetField("AddrFlg").FieldType
EmitFldLdIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa242 As System.Reflection.Emit.Label = EmitFldLdIL.DefineLabel()
Dim tru242 As System.Reflection.Emit.Label = EmitFldLdIL.DefineLabel()
Dim cont242 As System.Reflection.Emit.Label = EmitFldLdIL.DefineLabel()
EmitFldLdIL.Emit(OpCodes.Beq, tru242)
EmitFldLdIL.Emit(OpCodes.Br, fa242)
EmitFldLdIL.MarkLabel(tru242)
EmitFldLdIL.MarkSequencePoint(doc10, 1584, 1, 1584, 100)
EmitFldLdIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
EmitFldLdIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa243 As System.Reflection.Emit.Label = EmitFldLdIL.DefineLabel()
Dim tru243 As System.Reflection.Emit.Label = EmitFldLdIL.DefineLabel()
Dim cont243 As System.Reflection.Emit.Label = EmitFldLdIL.DefineLabel()
EmitFldLdIL.Emit(OpCodes.Beq, tru243)
EmitFldLdIL.Emit(OpCodes.Br, fa243)
EmitFldLdIL.MarkLabel(tru243)
EmitFldLdIL.MarkSequencePoint(doc10, 1585, 1, 1585, 100)
Dim typ331(-1) As Type
EmitFldLdIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(FieldInfo)
ReDim Preserve typ331(UBound(typ331) + 1)
typ331(UBound(typ331)) = Typ
EmitFldLdIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdsfld", typ331))
Typ = GetType(ILEmitter).GetMethod("EmitLdsfld", typ331).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitFldLdIL.Emit(OpCodes.Pop)
End If
EmitFldLdIL.MarkSequencePoint(doc10, 1586, 1, 1586, 100)
EmitFldLdIL.Emit(OpCodes.Br, cont243)
EmitFldLdIL.MarkLabel(fa243)
EmitFldLdIL.MarkSequencePoint(doc10, 1587, 1, 1587, 100)
Dim typ332(-1) As Type
EmitFldLdIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(FieldInfo)
ReDim Preserve typ332(UBound(typ332) + 1)
typ332(UBound(typ332)) = Typ
EmitFldLdIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdfld", typ332))
Typ = GetType(ILEmitter).GetMethod("EmitLdfld", typ332).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitFldLdIL.Emit(OpCodes.Pop)
End If
EmitFldLdIL.MarkSequencePoint(doc10, 1588, 1, 1588, 100)
EmitFldLdIL.Emit(OpCodes.Br, cont243)
EmitFldLdIL.MarkLabel(cont243)
EmitFldLdIL.MarkSequencePoint(doc10, 1589, 1, 1589, 100)
EmitFldLdIL.Emit(OpCodes.Br, cont242)
EmitFldLdIL.MarkLabel(fa242)
EmitFldLdIL.MarkSequencePoint(doc10, 1590, 1, 1590, 100)
Dim locbldr229 As LocalBuilder = EmitFldLdIL.DeclareLocal(GetType(System.Type))
locbldr229.SetLocalSymInfo("typ")
EmitFldLdIL.Emit(OpCodes.Ldtoken, GetType(ValueType))
Dim typ333 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitFldLdIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ333))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ333).ReturnType
EmitFldLdIL.Emit(OpCodes.Stloc, 0)
EmitFldLdIL.MarkSequencePoint(doc10, 1591, 1, 1591, 100)
Dim locbldr230 As LocalBuilder = EmitFldLdIL.DeclareLocal(GetType(System.Boolean))
locbldr230.SetLocalSymInfo("b")
Dim typ334(-1) As Type
EmitFldLdIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitFldLdIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type04"))
Typ = GetType(AsmFactory).GetField("Type04").FieldType
ReDim Preserve typ334(UBound(typ334) + 1)
typ334(UBound(typ334)) = Typ
EmitFldLdIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsAssignableFrom", typ334))
Typ = Typ03.GetMethod("IsAssignableFrom", typ334).ReturnType
EmitFldLdIL.Emit(OpCodes.Stloc, 1)
EmitFldLdIL.MarkSequencePoint(doc10, 1592, 1, 1592, 100)
EmitFldLdIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitFldLdIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa244 As System.Reflection.Emit.Label = EmitFldLdIL.DefineLabel()
Dim tru244 As System.Reflection.Emit.Label = EmitFldLdIL.DefineLabel()
Dim cont244 As System.Reflection.Emit.Label = EmitFldLdIL.DefineLabel()
EmitFldLdIL.Emit(OpCodes.Beq, tru244)
EmitFldLdIL.Emit(OpCodes.Br, fa244)
EmitFldLdIL.MarkLabel(tru244)
EmitFldLdIL.MarkSequencePoint(doc10, 1593, 1, 1593, 100)
EmitFldLdIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
EmitFldLdIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa245 As System.Reflection.Emit.Label = EmitFldLdIL.DefineLabel()
Dim tru245 As System.Reflection.Emit.Label = EmitFldLdIL.DefineLabel()
Dim cont245 As System.Reflection.Emit.Label = EmitFldLdIL.DefineLabel()
EmitFldLdIL.Emit(OpCodes.Beq, tru245)
EmitFldLdIL.Emit(OpCodes.Br, fa245)
EmitFldLdIL.MarkLabel(tru245)
EmitFldLdIL.MarkSequencePoint(doc10, 1594, 1, 1594, 100)
Dim typ335(-1) As Type
EmitFldLdIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(FieldInfo)
ReDim Preserve typ335(UBound(typ335) + 1)
typ335(UBound(typ335)) = Typ
EmitFldLdIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdsfld", typ335))
Typ = GetType(ILEmitter).GetMethod("EmitLdsfld", typ335).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitFldLdIL.Emit(OpCodes.Pop)
End If
EmitFldLdIL.MarkSequencePoint(doc10, 1595, 1, 1595, 100)
EmitFldLdIL.Emit(OpCodes.Br, cont245)
EmitFldLdIL.MarkLabel(fa245)
EmitFldLdIL.MarkSequencePoint(doc10, 1596, 1, 1596, 100)
Dim typ336(-1) As Type
EmitFldLdIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(FieldInfo)
ReDim Preserve typ336(UBound(typ336) + 1)
typ336(UBound(typ336)) = Typ
EmitFldLdIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdfld", typ336))
Typ = GetType(ILEmitter).GetMethod("EmitLdfld", typ336).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitFldLdIL.Emit(OpCodes.Pop)
End If
EmitFldLdIL.MarkSequencePoint(doc10, 1597, 1, 1597, 100)
EmitFldLdIL.Emit(OpCodes.Br, cont245)
EmitFldLdIL.MarkLabel(cont245)
EmitFldLdIL.MarkSequencePoint(doc10, 1598, 1, 1598, 100)
EmitFldLdIL.Emit(OpCodes.Br, cont244)
EmitFldLdIL.MarkLabel(fa244)
EmitFldLdIL.MarkSequencePoint(doc10, 1599, 1, 1599, 100)
EmitFldLdIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
EmitFldLdIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa246 As System.Reflection.Emit.Label = EmitFldLdIL.DefineLabel()
Dim tru246 As System.Reflection.Emit.Label = EmitFldLdIL.DefineLabel()
Dim cont246 As System.Reflection.Emit.Label = EmitFldLdIL.DefineLabel()
EmitFldLdIL.Emit(OpCodes.Beq, tru246)
EmitFldLdIL.Emit(OpCodes.Br, fa246)
EmitFldLdIL.MarkLabel(tru246)
EmitFldLdIL.MarkSequencePoint(doc10, 1600, 1, 1600, 100)
Dim typ337(-1) As Type
EmitFldLdIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(FieldInfo)
ReDim Preserve typ337(UBound(typ337) + 1)
typ337(UBound(typ337)) = Typ
EmitFldLdIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdsflda", typ337))
Typ = GetType(ILEmitter).GetMethod("EmitLdsflda", typ337).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitFldLdIL.Emit(OpCodes.Pop)
End If
EmitFldLdIL.MarkSequencePoint(doc10, 1601, 1, 1601, 100)
EmitFldLdIL.Emit(OpCodes.Br, cont246)
EmitFldLdIL.MarkLabel(fa246)
EmitFldLdIL.MarkSequencePoint(doc10, 1602, 1, 1602, 100)
Dim typ338(-1) As Type
EmitFldLdIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(FieldInfo)
ReDim Preserve typ338(UBound(typ338) + 1)
typ338(UBound(typ338)) = Typ
EmitFldLdIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdflda", typ338))
Typ = GetType(ILEmitter).GetMethod("EmitLdflda", typ338).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitFldLdIL.Emit(OpCodes.Pop)
End If
EmitFldLdIL.MarkSequencePoint(doc10, 1603, 1, 1603, 100)
EmitFldLdIL.Emit(OpCodes.Br, cont246)
EmitFldLdIL.MarkLabel(cont246)
EmitFldLdIL.MarkSequencePoint(doc10, 1604, 1, 1604, 100)
EmitFldLdIL.Emit(OpCodes.Br, cont244)
EmitFldLdIL.MarkLabel(cont244)
EmitFldLdIL.MarkSequencePoint(doc10, 1605, 1, 1605, 100)
EmitFldLdIL.Emit(OpCodes.Br, cont242)
EmitFldLdIL.MarkLabel(cont242)
EmitFldLdIL.MarkSequencePoint(doc10, 1606, 1, 1606, 100)
EmitFldLdIL.Emit(OpCodes.Ret)
Dim typ339(-1) As Type
ReDim Preserve typ339(UBound(typ339) + 1)
typ339(UBound(typ339)) = GetType(FieldInfo)
ReDim Preserve typ339(UBound(typ339) + 1)
typ339(UBound(typ339)) = GetType(System.Boolean)
Dim EmitFldSt As MethodBuilder = Helpers.DefineMethod("EmitFldSt", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ339)
Dim EmitFldStIL As ILGenerator = EmitFldSt.GetILGenerator()
Dim EmitFldStparam01 As ParameterBuilder = EmitFldSt.DefineParameter(1, ParameterAttributes.None, "fld")
Dim EmitFldStparam02 As ParameterBuilder = EmitFldSt.DefineParameter(2, ParameterAttributes.None, "stat")
EmitFldStIL.MarkSequencePoint(doc10, 1609, 1, 1609, 100)
EmitFldStIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
EmitFldStIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa247 As System.Reflection.Emit.Label = EmitFldStIL.DefineLabel()
Dim tru247 As System.Reflection.Emit.Label = EmitFldStIL.DefineLabel()
Dim cont247 As System.Reflection.Emit.Label = EmitFldStIL.DefineLabel()
EmitFldStIL.Emit(OpCodes.Beq, tru247)
EmitFldStIL.Emit(OpCodes.Br, fa247)
EmitFldStIL.MarkLabel(tru247)
EmitFldStIL.MarkSequencePoint(doc10, 1610, 1, 1610, 100)
Dim typ340(-1) As Type
EmitFldStIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(FieldInfo)
ReDim Preserve typ340(UBound(typ340) + 1)
typ340(UBound(typ340)) = Typ
EmitFldStIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitStsfld", typ340))
Typ = GetType(ILEmitter).GetMethod("EmitStsfld", typ340).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitFldStIL.Emit(OpCodes.Pop)
End If
EmitFldStIL.MarkSequencePoint(doc10, 1611, 1, 1611, 100)
EmitFldStIL.Emit(OpCodes.Br, cont247)
EmitFldStIL.MarkLabel(fa247)
EmitFldStIL.MarkSequencePoint(doc10, 1612, 1, 1612, 100)
Dim typ341(-1) As Type
EmitFldStIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(FieldInfo)
ReDim Preserve typ341(UBound(typ341) + 1)
typ341(UBound(typ341)) = Typ
EmitFldStIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitStfld", typ341))
Typ = GetType(ILEmitter).GetMethod("EmitStfld", typ341).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitFldStIL.Emit(OpCodes.Pop)
End If
EmitFldStIL.MarkSequencePoint(doc10, 1613, 1, 1613, 100)
EmitFldStIL.Emit(OpCodes.Br, cont247)
EmitFldStIL.MarkLabel(cont247)
EmitFldStIL.MarkSequencePoint(doc10, 1614, 1, 1614, 100)
EmitFldStIL.Emit(OpCodes.Ret)
Dim typ342(-1) As Type
ReDim Preserve typ342(UBound(typ342) + 1)
typ342(UBound(typ342)) = GetType(System.Type)
ReDim Preserve typ342(UBound(typ342) + 1)
typ342(UBound(typ342)) = GetType(System.Type).MakeArrayType()
Dim GetLocCtor As MethodBuilder = Helpers.DefineMethod("GetLocCtor", MethodAttributes.Public Or MethodAttributes.Static, GetType(ConstructorInfo), typ342)
Dim GetLocCtorIL As ILGenerator = GetLocCtor.GetILGenerator()
Dim GetLocCtorparam01 As ParameterBuilder = GetLocCtor.DefineParameter(1, ParameterAttributes.None, "t")
Dim GetLocCtorparam02 As ParameterBuilder = GetLocCtor.DefineParameter(2, ParameterAttributes.None, "typs")
GetLocCtorIL.MarkSequencePoint(doc10, 1618, 1, 1618, 100)
Dim locbldr231 As LocalBuilder = GetLocCtorIL.DeclareLocal(GetType(ConstructorInfo))
locbldr231.SetLocalSymInfo("ctorinf")
GetLocCtorIL.MarkSequencePoint(doc10, 1619, 1, 1619, 100)
Dim locbldr232 As LocalBuilder = GetLocCtorIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
locbldr232.SetLocalSymInfo("ctori")
GetLocCtorIL.MarkSequencePoint(doc10, 1620, 1, 1620, 100)
Dim locbldr233 As LocalBuilder = GetLocCtorIL.DeclareLocal(GetType(System.Boolean))
locbldr233.SetLocalSymInfo("b")
Dim typ343(-1) As Type
GetLocCtorIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
GetLocCtorIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
ReDim Preserve typ343(UBound(typ343) + 1)
typ343(UBound(typ343)) = Typ
GetLocCtorIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ343))
Typ = Typ03.GetMethod("Equals", typ343).ReturnType
GetLocCtorIL.Emit(OpCodes.Stloc, 2)
GetLocCtorIL.MarkSequencePoint(doc10, 1621, 1, 1621, 100)
GetLocCtorIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
GetLocCtorIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa248 As System.Reflection.Emit.Label = GetLocCtorIL.DefineLabel()
Dim tru248 As System.Reflection.Emit.Label = GetLocCtorIL.DefineLabel()
Dim cont248 As System.Reflection.Emit.Label = GetLocCtorIL.DefineLabel()
GetLocCtorIL.Emit(OpCodes.Beq, tru248)
GetLocCtorIL.Emit(OpCodes.Br, fa248)
GetLocCtorIL.MarkLabel(tru248)
GetLocCtorIL.MarkSequencePoint(doc10, 1622, 1, 1622, 100)
Dim typ344(-1) As Type
GetLocCtorIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ344(UBound(typ344) + 1)
typ344(UBound(typ344)) = Typ
GetLocCtorIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindCtor", typ344))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindCtor", typ344).ReturnType
GetLocCtorIL.Emit(OpCodes.Stloc, 1)
GetLocCtorIL.MarkSequencePoint(doc10, 1623, 1, 1623, 100)
GetLocCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem")
GetLocCtorIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").GetField("CtorBldr"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").GetField("CtorBldr").FieldType
GetLocCtorIL.Emit(OpCodes.Stloc, 0)
GetLocCtorIL.MarkSequencePoint(doc10, 1627, 1, 1627, 100)
GetLocCtorIL.Emit(OpCodes.Br, cont248)
GetLocCtorIL.MarkLabel(fa248)
GetLocCtorIL.MarkSequencePoint(doc10, 1628, 1, 1628, 100)
Dim typ345(-1) As Type
GetLocCtorIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
ReDim Preserve typ345(UBound(typ345) + 1)
typ345(UBound(typ345)) = Typ
GetLocCtorIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ345(UBound(typ345) + 1)
typ345(UBound(typ345)) = Typ
GetLocCtorIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadCtor", typ345))
Typ = GetType(Loader).GetMethod("LoadCtor", typ345).ReturnType
GetLocCtorIL.Emit(OpCodes.Stloc, 0)
GetLocCtorIL.MarkSequencePoint(doc10, 1629, 1, 1629, 100)
GetLocCtorIL.Emit(OpCodes.Br, cont248)
GetLocCtorIL.MarkLabel(cont248)
GetLocCtorIL.MarkSequencePoint(doc10, 1631, 1, 1631, 100)
GetLocCtorIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(ConstructorInfo)
GetLocCtorIL.MarkSequencePoint(doc10, 1633, 1, 1633, 100)
GetLocCtorIL.Emit(OpCodes.Ret)
Dim typ346(-1) As Type
ReDim Preserve typ346(UBound(typ346) + 1)
typ346(UBound(typ346)) = GetType(System.String)
Dim GetLocFld As MethodBuilder = Helpers.DefineMethod("GetLocFld", MethodAttributes.Public Or MethodAttributes.Static, GetType(FieldInfo), typ346)
Dim GetLocFldIL As ILGenerator = GetLocFld.GetILGenerator()
Dim GetLocFldparam01 As ParameterBuilder = GetLocFld.DefineParameter(1, ParameterAttributes.None, "nam")
GetLocFldIL.MarkSequencePoint(doc10, 1637, 1, 1637, 100)
Dim locbldr234 As LocalBuilder = GetLocFldIL.DeclareLocal(GetType(FieldInfo))
locbldr234.SetLocalSymInfo("fldinf")
GetLocFldIL.Emit(OpCodes.Ldnull)
GetLocFldIL.Emit(OpCodes.Stloc, 0)
GetLocFldIL.MarkSequencePoint(doc10, 1638, 1, 1638, 100)
Dim locbldr235 As LocalBuilder = GetLocFldIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
locbldr235.SetLocalSymInfo("fldi")
GetLocFldIL.MarkSequencePoint(doc10, 1640, 1, 1640, 100)
Dim typ347(-1) As Type
GetLocFldIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ347(UBound(typ347) + 1)
typ347(UBound(typ347)) = Typ
GetLocFldIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindFld", typ347))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindFld", typ347).ReturnType
GetLocFldIL.Emit(OpCodes.Stloc, 1)
GetLocFldIL.MarkSequencePoint(doc10, 1642, 1, 1642, 100)
GetLocFldIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem")
GetLocFldIL.Emit(OpCodes.Ldnull)
Dim fa249 As System.Reflection.Emit.Label = GetLocFldIL.DefineLabel()
Dim tru249 As System.Reflection.Emit.Label = GetLocFldIL.DefineLabel()
Dim cont249 As System.Reflection.Emit.Label = GetLocFldIL.DefineLabel()
GetLocFldIL.Emit(OpCodes.Beq, fa249)
GetLocFldIL.Emit(OpCodes.Br, tru249)
GetLocFldIL.MarkLabel(tru249)
GetLocFldIL.MarkSequencePoint(doc10, 1643, 1, 1643, 100)
GetLocFldIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem")
GetLocFldIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").GetField("FieldBldr"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").GetField("FieldBldr").FieldType
GetLocFldIL.Emit(OpCodes.Stloc, 0)
GetLocFldIL.MarkSequencePoint(doc10, 1644, 1, 1644, 100)
GetLocFldIL.Emit(OpCodes.Br, cont249)
GetLocFldIL.MarkLabel(fa249)
GetLocFldIL.MarkSequencePoint(doc10, 1645, 1, 1645, 100)
GetLocFldIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
GetLocFldIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("ProtectedFlag"))
GetLocFldIL.MarkSequencePoint(doc10, 1646, 1, 1646, 100)
Dim typ348(-1) As Type
GetLocFldIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnInhTyp"))
Typ = GetType(AsmFactory).GetField("CurnInhTyp").FieldType
ReDim Preserve typ348(UBound(typ348) + 1)
typ348(UBound(typ348)) = Typ
GetLocFldIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ348(UBound(typ348) + 1)
typ348(UBound(typ348)) = Typ
GetLocFldIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadField", typ348))
Typ = GetType(Loader).GetMethod("LoadField", typ348).ReturnType
GetLocFldIL.Emit(OpCodes.Stloc, 0)
GetLocFldIL.MarkSequencePoint(doc10, 1647, 1, 1647, 100)
GetLocFldIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
GetLocFldIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("ProtectedFlag"))
GetLocFldIL.MarkSequencePoint(doc10, 1648, 1, 1648, 100)
GetLocFldIL.Emit(OpCodes.Br, cont249)
GetLocFldIL.MarkLabel(cont249)
GetLocFldIL.MarkSequencePoint(doc10, 1650, 1, 1650, 100)
GetLocFldIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(FieldInfo)
GetLocFldIL.MarkSequencePoint(doc10, 1652, 1, 1652, 100)
GetLocFldIL.Emit(OpCodes.Ret)
Dim typ349(-1) As Type
ReDim Preserve typ349(UBound(typ349) + 1)
typ349(UBound(typ349)) = GetType(System.String)
ReDim Preserve typ349(UBound(typ349) + 1)
typ349(UBound(typ349)) = GetType(System.Type).MakeArrayType()
Dim GetLocMet As MethodBuilder = Helpers.DefineMethod("GetLocMet", MethodAttributes.Public Or MethodAttributes.Static, GetType(MethodInfo), typ349)
Dim GetLocMetIL As ILGenerator = GetLocMet.GetILGenerator()
Dim GetLocMetparam01 As ParameterBuilder = GetLocMet.DefineParameter(1, ParameterAttributes.None, "nam")
Dim GetLocMetparam02 As ParameterBuilder = GetLocMet.DefineParameter(2, ParameterAttributes.None, "typs")
GetLocMetIL.MarkSequencePoint(doc10, 1656, 1, 1656, 100)
Dim locbldr236 As LocalBuilder = GetLocMetIL.DeclareLocal(GetType(MethodInfo))
locbldr236.SetLocalSymInfo("metinf")
GetLocMetIL.Emit(OpCodes.Ldnull)
GetLocMetIL.Emit(OpCodes.Stloc, 0)
GetLocMetIL.MarkSequencePoint(doc10, 1657, 1, 1657, 100)
Dim locbldr237 As LocalBuilder = GetLocMetIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
locbldr237.SetLocalSymInfo("meti")
GetLocMetIL.MarkSequencePoint(doc10, 1659, 1, 1659, 100)
Dim typ350(-1) As Type
GetLocMetIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ350(UBound(typ350) + 1)
typ350(UBound(typ350)) = Typ
GetLocMetIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ350(UBound(typ350) + 1)
typ350(UBound(typ350)) = Typ
GetLocMetIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindMet", typ350))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindMet", typ350).ReturnType
GetLocMetIL.Emit(OpCodes.Stloc, 1)
GetLocMetIL.MarkSequencePoint(doc10, 1661, 1, 1661, 100)
GetLocMetIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem")
GetLocMetIL.Emit(OpCodes.Ldnull)
Dim fa250 As System.Reflection.Emit.Label = GetLocMetIL.DefineLabel()
Dim tru250 As System.Reflection.Emit.Label = GetLocMetIL.DefineLabel()
Dim cont250 As System.Reflection.Emit.Label = GetLocMetIL.DefineLabel()
GetLocMetIL.Emit(OpCodes.Beq, fa250)
GetLocMetIL.Emit(OpCodes.Br, tru250)
GetLocMetIL.MarkLabel(tru250)
GetLocMetIL.MarkSequencePoint(doc10, 1662, 1, 1662, 100)
GetLocMetIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem")
GetLocMetIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").GetField("MethodBldr"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").GetField("MethodBldr").FieldType
GetLocMetIL.Emit(OpCodes.Stloc, 0)
GetLocMetIL.MarkSequencePoint(doc10, 1663, 1, 1663, 100)
GetLocMetIL.Emit(OpCodes.Br, cont250)
GetLocMetIL.MarkLabel(fa250)
GetLocMetIL.MarkSequencePoint(doc10, 1664, 1, 1664, 100)
GetLocMetIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
GetLocMetIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("ProtectedFlag"))
GetLocMetIL.MarkSequencePoint(doc10, 1665, 1, 1665, 100)
Dim typ351(-1) As Type
GetLocMetIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnInhTyp"))
Typ = GetType(AsmFactory).GetField("CurnInhTyp").FieldType
ReDim Preserve typ351(UBound(typ351) + 1)
typ351(UBound(typ351)) = Typ
GetLocMetIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ351(UBound(typ351) + 1)
typ351(UBound(typ351)) = Typ
GetLocMetIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ351(UBound(typ351) + 1)
typ351(UBound(typ351)) = Typ
GetLocMetIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadMethod", typ351))
Typ = GetType(Loader).GetMethod("LoadMethod", typ351).ReturnType
GetLocMetIL.Emit(OpCodes.Stloc, 0)
GetLocMetIL.MarkSequencePoint(doc10, 1666, 1, 1666, 100)
GetLocMetIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
GetLocMetIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("ProtectedFlag"))
GetLocMetIL.MarkSequencePoint(doc10, 1667, 1, 1667, 100)
GetLocMetIL.Emit(OpCodes.Br, cont250)
GetLocMetIL.MarkLabel(cont250)
GetLocMetIL.MarkSequencePoint(doc10, 1669, 1, 1669, 100)
GetLocMetIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodInfo)
GetLocMetIL.MarkSequencePoint(doc10, 1671, 1, 1671, 100)
GetLocMetIL.Emit(OpCodes.Ret)
Dim typ352(-1) As Type
ReDim Preserve typ352(UBound(typ352) + 1)
typ352(UBound(typ352)) = GetType(System.String)
Dim GetLocMetNoParams As MethodBuilder = Helpers.DefineMethod("GetLocMetNoParams", MethodAttributes.Public Or MethodAttributes.Static, GetType(MethodInfo), typ352)
Dim GetLocMetNoParamsIL As ILGenerator = GetLocMetNoParams.GetILGenerator()
Dim GetLocMetNoParamsparam01 As ParameterBuilder = GetLocMetNoParams.DefineParameter(1, ParameterAttributes.None, "nam")
GetLocMetNoParamsIL.MarkSequencePoint(doc10, 1675, 1, 1675, 100)
Dim locbldr238 As LocalBuilder = GetLocMetNoParamsIL.DeclareLocal(GetType(MethodInfo))
locbldr238.SetLocalSymInfo("metinf")
GetLocMetNoParamsIL.Emit(OpCodes.Ldnull)
GetLocMetNoParamsIL.Emit(OpCodes.Stloc, 0)
GetLocMetNoParamsIL.MarkSequencePoint(doc10, 1676, 1, 1676, 100)
Dim locbldr239 As LocalBuilder = GetLocMetNoParamsIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
locbldr239.SetLocalSymInfo("meti")
GetLocMetNoParamsIL.MarkSequencePoint(doc10, 1678, 1, 1678, 100)
Dim typ353(-1) As Type
GetLocMetNoParamsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ353(UBound(typ353) + 1)
typ353(UBound(typ353)) = Typ
GetLocMetNoParamsIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindMetNoParams", typ353))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindMetNoParams", typ353).ReturnType
GetLocMetNoParamsIL.Emit(OpCodes.Stloc, 1)
GetLocMetNoParamsIL.MarkSequencePoint(doc10, 1680, 1, 1680, 100)
GetLocMetNoParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem")
GetLocMetNoParamsIL.Emit(OpCodes.Ldnull)
Dim fa251 As System.Reflection.Emit.Label = GetLocMetNoParamsIL.DefineLabel()
Dim tru251 As System.Reflection.Emit.Label = GetLocMetNoParamsIL.DefineLabel()
Dim cont251 As System.Reflection.Emit.Label = GetLocMetNoParamsIL.DefineLabel()
GetLocMetNoParamsIL.Emit(OpCodes.Beq, fa251)
GetLocMetNoParamsIL.Emit(OpCodes.Br, tru251)
GetLocMetNoParamsIL.MarkLabel(tru251)
GetLocMetNoParamsIL.MarkSequencePoint(doc10, 1681, 1, 1681, 100)
GetLocMetNoParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem")
GetLocMetNoParamsIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").GetField("MethodBldr"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").GetField("MethodBldr").FieldType
GetLocMetNoParamsIL.Emit(OpCodes.Stloc, 0)
GetLocMetNoParamsIL.MarkSequencePoint(doc10, 1682, 1, 1682, 100)
GetLocMetNoParamsIL.Emit(OpCodes.Br, cont251)
GetLocMetNoParamsIL.MarkLabel(fa251)
GetLocMetNoParamsIL.Emit(OpCodes.Br, cont251)
GetLocMetNoParamsIL.MarkLabel(cont251)
GetLocMetNoParamsIL.MarkSequencePoint(doc10, 1684, 1, 1684, 100)
GetLocMetNoParamsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodInfo)
GetLocMetNoParamsIL.MarkSequencePoint(doc10, 1686, 1, 1686, 100)
GetLocMetNoParamsIL.Emit(OpCodes.Ret)
Dim typ354(-1) As Type
ReDim Preserve typ354(UBound(typ354) + 1)
typ354(UBound(typ354)) = GetType(System.String)
Dim GetLbl As MethodBuilder = Helpers.DefineMethod("GetLbl", MethodAttributes.Public Or MethodAttributes.Static, GetType(Emit.Label), typ354)
Dim GetLblIL As ILGenerator = GetLbl.GetILGenerator()
Dim GetLblparam01 As ParameterBuilder = GetLbl.DefineParameter(1, ParameterAttributes.None, "nam")
GetLblIL.MarkSequencePoint(doc10, 1690, 1, 1690, 100)
Dim locbldr240 As LocalBuilder = GetLblIL.DeclareLocal(GetType(Emit.Label))
locbldr240.SetLocalSymInfo("lbl")
GetLblIL.MarkSequencePoint(doc10, 1691, 1, 1691, 100)
Dim locbldr241 As LocalBuilder = GetLblIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.LabelItem"))
locbldr241.SetLocalSymInfo("lbli")
GetLblIL.MarkSequencePoint(doc10, 1693, 1, 1693, 100)
Dim typ355(-1) As Type
GetLblIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ355(UBound(typ355) + 1)
typ355(UBound(typ355)) = Typ
GetLblIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindLbl", typ355))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindLbl", typ355).ReturnType
GetLblIL.Emit(OpCodes.Stloc, 1)
GetLblIL.MarkSequencePoint(doc10, 1695, 1, 1695, 100)
GetLblIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.LabelItem")
GetLblIL.Emit(OpCodes.Ldnull)
Dim fa252 As System.Reflection.Emit.Label = GetLblIL.DefineLabel()
Dim tru252 As System.Reflection.Emit.Label = GetLblIL.DefineLabel()
Dim cont252 As System.Reflection.Emit.Label = GetLblIL.DefineLabel()
GetLblIL.Emit(OpCodes.Beq, fa252)
GetLblIL.Emit(OpCodes.Br, tru252)
GetLblIL.MarkLabel(tru252)
GetLblIL.MarkSequencePoint(doc10, 1696, 1, 1696, 100)
GetLblIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.LabelItem")
GetLblIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.LabelItem").GetField("Lbl"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.LabelItem").GetField("Lbl").FieldType
GetLblIL.Emit(OpCodes.Stloc, 0)
GetLblIL.MarkSequencePoint(doc10, 1697, 1, 1697, 100)
GetLblIL.Emit(OpCodes.Br, cont252)
GetLblIL.MarkLabel(fa252)
GetLblIL.Emit(OpCodes.Br, cont252)
GetLblIL.MarkLabel(cont252)
GetLblIL.MarkSequencePoint(doc10, 1699, 1, 1699, 100)
GetLblIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Emit.Label)
GetLblIL.MarkSequencePoint(doc10, 1701, 1, 1701, 100)
GetLblIL.Emit(OpCodes.Ret)
Dim typ356(-1) As Type
ReDim Preserve typ356(UBound(typ356) + 1)
typ356(UBound(typ356)) = GetType(Token)
Dim StripDelMtdName As MethodBuilder = Helpers.DefineMethod("StripDelMtdName", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.String), typ356)
Dim StripDelMtdNameIL As ILGenerator = StripDelMtdName.GetILGenerator()
Dim StripDelMtdNameparam01 As ParameterBuilder = StripDelMtdName.DefineParameter(1, ParameterAttributes.None, "t")
StripDelMtdNameIL.MarkSequencePoint(doc10, 1705, 1, 1705, 100)
Dim locbldr242 As LocalBuilder = StripDelMtdNameIL.DeclareLocal(GetType(System.Type))
locbldr242.SetLocalSymInfo("typ")
StripDelMtdNameIL.Emit(OpCodes.Ldtoken, GetType(Ident))
Dim typ357 As Type() = {GetType(System.RuntimeTypeHandle)}
StripDelMtdNameIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ357))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ357).ReturnType
StripDelMtdNameIL.Emit(OpCodes.Stloc, 0)
StripDelMtdNameIL.MarkSequencePoint(doc10, 1706, 1, 1706, 100)
Dim locbldr243 As LocalBuilder = StripDelMtdNameIL.DeclareLocal(GetType(System.Boolean))
locbldr243.SetLocalSymInfo("b")
Dim typ358(-1) As Type
StripDelMtdNameIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
StripDelMtdNameIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Token)
StripDelMtdNameIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ358(UBound(typ358) + 1)
typ358(UBound(typ358)) = Typ
StripDelMtdNameIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ358))
Typ = Typ03.GetMethod("IsInstanceOfType", typ358).ReturnType
StripDelMtdNameIL.Emit(OpCodes.Stloc, 1)
StripDelMtdNameIL.MarkSequencePoint(doc10, 1707, 1, 1707, 100)
Dim locbldr244 As LocalBuilder = StripDelMtdNameIL.DeclareLocal(GetType(System.String))
locbldr244.SetLocalSymInfo("ans")
StripDelMtdNameIL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
StripDelMtdNameIL.Emit(OpCodes.Stloc, 2)
StripDelMtdNameIL.MarkSequencePoint(doc10, 1709, 1, 1709, 100)
StripDelMtdNameIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
StripDelMtdNameIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa253 As System.Reflection.Emit.Label = StripDelMtdNameIL.DefineLabel()
Dim tru253 As System.Reflection.Emit.Label = StripDelMtdNameIL.DefineLabel()
Dim cont253 As System.Reflection.Emit.Label = StripDelMtdNameIL.DefineLabel()
StripDelMtdNameIL.Emit(OpCodes.Beq, tru253)
StripDelMtdNameIL.Emit(OpCodes.Br, fa253)
StripDelMtdNameIL.MarkLabel(tru253)
StripDelMtdNameIL.MarkSequencePoint(doc10, 1710, 1, 1710, 100)
Dim locbldr245 As LocalBuilder = StripDelMtdNameIL.DeclareLocal(GetType(Ident))
locbldr245.SetLocalSymInfo("idt")
StripDelMtdNameIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Token)
StripDelMtdNameIL.Emit(OpCodes.Stloc, 3)
StripDelMtdNameIL.MarkSequencePoint(doc10, 1711, 1, 1711, 100)
StripDelMtdNameIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Ident)
StripDelMtdNameIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
StripDelMtdNameIL.Emit(OpCodes.Stloc, 2)
StripDelMtdNameIL.MarkSequencePoint(doc10, 1712, 1, 1712, 100)
StripDelMtdNameIL.Emit(OpCodes.Br, cont253)
StripDelMtdNameIL.MarkLabel(fa253)
StripDelMtdNameIL.Emit(OpCodes.Br, cont253)
StripDelMtdNameIL.MarkLabel(cont253)
StripDelMtdNameIL.MarkSequencePoint(doc10, 1714, 1, 1714, 100)
StripDelMtdNameIL.Emit(OpCodes.Ldtoken, GetType(MethodCallTok))
Dim typ359 As Type() = {GetType(System.RuntimeTypeHandle)}
StripDelMtdNameIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ359))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ359).ReturnType
StripDelMtdNameIL.Emit(OpCodes.Stloc, 0)
StripDelMtdNameIL.MarkSequencePoint(doc10, 1715, 1, 1715, 100)
Dim typ360(-1) As Type
StripDelMtdNameIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
StripDelMtdNameIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Token)
StripDelMtdNameIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ360(UBound(typ360) + 1)
typ360(UBound(typ360)) = Typ
StripDelMtdNameIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ360))
Typ = Typ03.GetMethod("IsInstanceOfType", typ360).ReturnType
StripDelMtdNameIL.Emit(OpCodes.Stloc, 1)
StripDelMtdNameIL.MarkSequencePoint(doc10, 1717, 1, 1717, 100)
StripDelMtdNameIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
StripDelMtdNameIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa254 As System.Reflection.Emit.Label = StripDelMtdNameIL.DefineLabel()
Dim tru254 As System.Reflection.Emit.Label = StripDelMtdNameIL.DefineLabel()
Dim cont254 As System.Reflection.Emit.Label = StripDelMtdNameIL.DefineLabel()
StripDelMtdNameIL.Emit(OpCodes.Beq, tru254)
StripDelMtdNameIL.Emit(OpCodes.Br, fa254)
StripDelMtdNameIL.MarkLabel(tru254)
StripDelMtdNameIL.MarkSequencePoint(doc10, 1718, 1, 1718, 100)
Dim locbldr246 As LocalBuilder = StripDelMtdNameIL.DeclareLocal(GetType(MethodCallTok))
locbldr246.SetLocalSymInfo("mct")
StripDelMtdNameIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Token)
StripDelMtdNameIL.Emit(OpCodes.Stloc, 4)
StripDelMtdNameIL.MarkSequencePoint(doc10, 1719, 1, 1719, 100)
Dim locbldr247 As LocalBuilder = StripDelMtdNameIL.DeclareLocal(GetType(MethodNameTok))
locbldr247.SetLocalSymInfo("mn")
StripDelMtdNameIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodCallTok)
StripDelMtdNameIL.Emit(OpCodes.Ldfld, GetType(MethodCallTok).GetField("Name"))
Typ = GetType(MethodCallTok).GetField("Name").FieldType
StripDelMtdNameIL.Emit(OpCodes.Stloc, 5)
StripDelMtdNameIL.MarkSequencePoint(doc10, 1720, 1, 1720, 100)
StripDelMtdNameIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(MethodNameTok)
StripDelMtdNameIL.Emit(OpCodes.Ldfld, GetType(MethodNameTok).GetField("Value"))
Typ = GetType(MethodNameTok).GetField("Value").FieldType
StripDelMtdNameIL.Emit(OpCodes.Stloc, 2)
StripDelMtdNameIL.MarkSequencePoint(doc10, 1721, 1, 1721, 100)
StripDelMtdNameIL.Emit(OpCodes.Br, cont254)
StripDelMtdNameIL.MarkLabel(fa254)
StripDelMtdNameIL.Emit(OpCodes.Br, cont254)
StripDelMtdNameIL.MarkLabel(cont254)
StripDelMtdNameIL.MarkSequencePoint(doc10, 1723, 1, 1723, 100)
StripDelMtdNameIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
StripDelMtdNameIL.MarkSequencePoint(doc10, 1724, 1, 1724, 100)
StripDelMtdNameIL.Emit(OpCodes.Ret)
Dim typ361(-1) As Type
ReDim Preserve typ361(UBound(typ361) + 1)
typ361(UBound(typ361)) = GetType(Token)
Dim SetPopFlg As MethodBuilder = Helpers.DefineMethod("SetPopFlg", MethodAttributes.Public Or MethodAttributes.Static, GetType(Token), typ361)
Dim SetPopFlgIL As ILGenerator = SetPopFlg.GetILGenerator()
Dim SetPopFlgparam01 As ParameterBuilder = SetPopFlg.DefineParameter(1, ParameterAttributes.None, "t")
SetPopFlgIL.MarkSequencePoint(doc10, 1728, 1, 1728, 100)
Dim locbldr248 As LocalBuilder = SetPopFlgIL.DeclareLocal(GetType(Token))
locbldr248.SetLocalSymInfo("t2")
SetPopFlgIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Token)
SetPopFlgIL.Emit(OpCodes.Stloc, 0)
SetPopFlgIL.MarkSequencePoint(doc10, 1729, 1, 1729, 100)
Dim locbldr249 As LocalBuilder = SetPopFlgIL.DeclareLocal(GetType(MethodCallTok))
locbldr249.SetLocalSymInfo("t3")
SetPopFlgIL.Emit(OpCodes.Ldnull)
SetPopFlgIL.Emit(OpCodes.Stloc, 1)
SetPopFlgIL.MarkSequencePoint(doc10, 1731, 1, 1731, 100)
Dim label22 As System.Reflection.Emit.Label = SetPopFlgIL.DefineLabel()
SetPopFlgIL.MarkSequencePoint(doc10, 1732, 1, 1732, 100)
Dim label23 As System.Reflection.Emit.Label = SetPopFlgIL.DefineLabel()
SetPopFlgIL.MarkSequencePoint(doc10, 1734, 1, 1734, 100)
SetPopFlgIL.MarkLabel(label22)
SetPopFlgIL.MarkSequencePoint(doc10, 1736, 1, 1736, 100)
Dim locbldr250 As LocalBuilder = SetPopFlgIL.DeclareLocal(GetType(System.Type))
locbldr250.SetLocalSymInfo("typ")
SetPopFlgIL.MarkSequencePoint(doc10, 1737, 1, 1737, 100)
Dim locbldr251 As LocalBuilder = SetPopFlgIL.DeclareLocal(GetType(System.Boolean))
locbldr251.SetLocalSymInfo("b")
SetPopFlgIL.MarkSequencePoint(doc10, 1739, 1, 1739, 100)
SetPopFlgIL.Emit(OpCodes.Ldtoken, GetType(MethodCallTok))
Dim typ362 As Type() = {GetType(System.RuntimeTypeHandle)}
SetPopFlgIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ362))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ362).ReturnType
SetPopFlgIL.Emit(OpCodes.Stloc, 2)
SetPopFlgIL.MarkSequencePoint(doc10, 1740, 1, 1740, 100)
Dim typ363(-1) As Type
SetPopFlgIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
Typ03 = Typ
SetPopFlgIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
SetPopFlgIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ363(UBound(typ363) + 1)
typ363(UBound(typ363)) = Typ
SetPopFlgIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ363))
Typ = Typ03.GetMethod("IsInstanceOfType", typ363).ReturnType
SetPopFlgIL.Emit(OpCodes.Stloc, 3)
SetPopFlgIL.MarkSequencePoint(doc10, 1742, 1, 1742, 100)
SetPopFlgIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
SetPopFlgIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa255 As System.Reflection.Emit.Label = SetPopFlgIL.DefineLabel()
Dim tru255 As System.Reflection.Emit.Label = SetPopFlgIL.DefineLabel()
Dim cont255 As System.Reflection.Emit.Label = SetPopFlgIL.DefineLabel()
SetPopFlgIL.Emit(OpCodes.Beq, tru255)
SetPopFlgIL.Emit(OpCodes.Br, fa255)
SetPopFlgIL.MarkLabel(tru255)
SetPopFlgIL.MarkSequencePoint(doc10, 1743, 1, 1743, 100)
Dim locbldr252 As LocalBuilder = SetPopFlgIL.DeclareLocal(GetType(MethodCallTok))
locbldr252.SetLocalSymInfo("mct")
SetPopFlgIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
SetPopFlgIL.Emit(OpCodes.Stloc, 4)
SetPopFlgIL.MarkSequencePoint(doc10, 1744, 1, 1744, 100)
Dim locbldr253 As LocalBuilder = SetPopFlgIL.DeclareLocal(GetType(MethodNameTok))
locbldr253.SetLocalSymInfo("mn")
SetPopFlgIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodCallTok)
SetPopFlgIL.Emit(OpCodes.Ldfld, GetType(MethodCallTok).GetField("Name"))
Typ = GetType(MethodCallTok).GetField("Name").FieldType
SetPopFlgIL.Emit(OpCodes.Stloc, 5)
SetPopFlgIL.MarkSequencePoint(doc10, 1746, 1, 1746, 100)
SetPopFlgIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodCallTok)
SetPopFlgIL.Emit(OpCodes.Stloc, 1)
SetPopFlgIL.MarkSequencePoint(doc10, 1747, 1, 1747, 100)
SetPopFlgIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(MethodNameTok)
SetPopFlgIL.Emit(OpCodes.Ldfld, GetType(MethodNameTok).GetField("MemberAccessFlg"))
Typ = GetType(MethodNameTok).GetField("MemberAccessFlg").FieldType
SetPopFlgIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa256 As System.Reflection.Emit.Label = SetPopFlgIL.DefineLabel()
Dim tru256 As System.Reflection.Emit.Label = SetPopFlgIL.DefineLabel()
Dim cont256 As System.Reflection.Emit.Label = SetPopFlgIL.DefineLabel()
SetPopFlgIL.Emit(OpCodes.Beq, tru256)
SetPopFlgIL.Emit(OpCodes.Br, fa256)
SetPopFlgIL.MarkLabel(tru256)
SetPopFlgIL.MarkSequencePoint(doc10, 1748, 1, 1748, 100)
SetPopFlgIL.Emit(OpCodes.Br, label23)
SetPopFlgIL.MarkSequencePoint(doc10, 1749, 1, 1749, 100)
SetPopFlgIL.Emit(OpCodes.Br, cont256)
SetPopFlgIL.MarkLabel(fa256)
SetPopFlgIL.MarkSequencePoint(doc10, 1750, 1, 1750, 100)
SetPopFlgIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(MethodNameTok)
SetPopFlgIL.Emit(OpCodes.Ldfld, GetType(MethodNameTok).GetField("MemberToAccess"))
Typ = GetType(MethodNameTok).GetField("MemberToAccess").FieldType
SetPopFlgIL.Emit(OpCodes.Stloc, 0)
SetPopFlgIL.MarkSequencePoint(doc10, 1751, 1, 1751, 100)
SetPopFlgIL.Emit(OpCodes.Br, label22)
SetPopFlgIL.MarkSequencePoint(doc10, 1752, 1, 1752, 100)
SetPopFlgIL.Emit(OpCodes.Br, cont256)
SetPopFlgIL.MarkLabel(cont256)
SetPopFlgIL.MarkSequencePoint(doc10, 1754, 1, 1754, 100)
SetPopFlgIL.Emit(OpCodes.Br, cont255)
SetPopFlgIL.MarkLabel(fa255)
SetPopFlgIL.Emit(OpCodes.Br, cont255)
SetPopFlgIL.MarkLabel(cont255)
SetPopFlgIL.MarkSequencePoint(doc10, 1756, 1, 1756, 100)
SetPopFlgIL.Emit(OpCodes.Ldtoken, GetType(Ident))
Dim typ364 As Type() = {GetType(System.RuntimeTypeHandle)}
SetPopFlgIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ364))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ364).ReturnType
SetPopFlgIL.Emit(OpCodes.Stloc, 2)
SetPopFlgIL.MarkSequencePoint(doc10, 1757, 1, 1757, 100)
Dim typ365(-1) As Type
SetPopFlgIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
Typ03 = Typ
SetPopFlgIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
SetPopFlgIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ365(UBound(typ365) + 1)
typ365(UBound(typ365)) = Typ
SetPopFlgIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ365))
Typ = Typ03.GetMethod("IsInstanceOfType", typ365).ReturnType
SetPopFlgIL.Emit(OpCodes.Stloc, 3)
SetPopFlgIL.MarkSequencePoint(doc10, 1759, 1, 1759, 100)
SetPopFlgIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
SetPopFlgIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa257 As System.Reflection.Emit.Label = SetPopFlgIL.DefineLabel()
Dim tru257 As System.Reflection.Emit.Label = SetPopFlgIL.DefineLabel()
Dim cont257 As System.Reflection.Emit.Label = SetPopFlgIL.DefineLabel()
SetPopFlgIL.Emit(OpCodes.Beq, tru257)
SetPopFlgIL.Emit(OpCodes.Br, fa257)
SetPopFlgIL.MarkLabel(tru257)
SetPopFlgIL.MarkSequencePoint(doc10, 1760, 1, 1760, 100)
Dim locbldr254 As LocalBuilder = SetPopFlgIL.DeclareLocal(GetType(Ident))
locbldr254.SetLocalSymInfo("idt")
SetPopFlgIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
SetPopFlgIL.Emit(OpCodes.Stloc, 6)
SetPopFlgIL.MarkSequencePoint(doc10, 1762, 1, 1762, 100)
SetPopFlgIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Ident)
SetPopFlgIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("MemberAccessFlg"))
Typ = GetType(Ident).GetField("MemberAccessFlg").FieldType
SetPopFlgIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa258 As System.Reflection.Emit.Label = SetPopFlgIL.DefineLabel()
Dim tru258 As System.Reflection.Emit.Label = SetPopFlgIL.DefineLabel()
Dim cont258 As System.Reflection.Emit.Label = SetPopFlgIL.DefineLabel()
SetPopFlgIL.Emit(OpCodes.Beq, tru258)
SetPopFlgIL.Emit(OpCodes.Br, fa258)
SetPopFlgIL.MarkLabel(tru258)
SetPopFlgIL.MarkSequencePoint(doc10, 1763, 1, 1763, 100)
SetPopFlgIL.Emit(OpCodes.Br, label23)
SetPopFlgIL.MarkSequencePoint(doc10, 1764, 1, 1764, 100)
SetPopFlgIL.Emit(OpCodes.Br, cont258)
SetPopFlgIL.MarkLabel(fa258)
SetPopFlgIL.MarkSequencePoint(doc10, 1765, 1, 1765, 100)
SetPopFlgIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Ident)
SetPopFlgIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("MemberToAccess"))
Typ = GetType(Ident).GetField("MemberToAccess").FieldType
SetPopFlgIL.Emit(OpCodes.Stloc, 0)
SetPopFlgIL.MarkSequencePoint(doc10, 1766, 1, 1766, 100)
SetPopFlgIL.Emit(OpCodes.Br, label22)
SetPopFlgIL.MarkSequencePoint(doc10, 1767, 1, 1767, 100)
SetPopFlgIL.Emit(OpCodes.Br, cont258)
SetPopFlgIL.MarkLabel(cont258)
SetPopFlgIL.MarkSequencePoint(doc10, 1769, 1, 1769, 100)
SetPopFlgIL.Emit(OpCodes.Br, cont257)
SetPopFlgIL.MarkLabel(fa257)
SetPopFlgIL.Emit(OpCodes.Br, cont257)
SetPopFlgIL.MarkLabel(cont257)
SetPopFlgIL.MarkSequencePoint(doc10, 1771, 1, 1771, 100)
SetPopFlgIL.MarkLabel(label23)
SetPopFlgIL.MarkSequencePoint(doc10, 1773, 1, 1773, 100)
SetPopFlgIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodCallTok)
SetPopFlgIL.Emit(OpCodes.Ldnull)
Dim fa259 As System.Reflection.Emit.Label = SetPopFlgIL.DefineLabel()
Dim tru259 As System.Reflection.Emit.Label = SetPopFlgIL.DefineLabel()
Dim cont259 As System.Reflection.Emit.Label = SetPopFlgIL.DefineLabel()
SetPopFlgIL.Emit(OpCodes.Beq, fa259)
SetPopFlgIL.Emit(OpCodes.Br, tru259)
SetPopFlgIL.MarkLabel(tru259)
SetPopFlgIL.MarkSequencePoint(doc10, 1774, 1, 1774, 100)
SetPopFlgIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodCallTok)
SetPopFlgIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
SetPopFlgIL.Emit(OpCodes.Stfld, GetType(MethodCallTok).GetField("PopFlg"))
SetPopFlgIL.MarkSequencePoint(doc10, 1775, 1, 1775, 100)
SetPopFlgIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodCallTok)
SetPopFlgIL.Emit(OpCodes.Ldfld, GetType(MethodCallTok).GetField("Name"))
Typ = GetType(MethodCallTok).GetField("Name").FieldType
SetPopFlgIL.Emit(OpCodes.Stloc, 5)
SetPopFlgIL.MarkSequencePoint(doc10, 1776, 1, 1776, 100)
SetPopFlgIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(MethodNameTok)
SetPopFlgIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
SetPopFlgIL.Emit(OpCodes.Stfld, GetType(MethodNameTok).GetField("MemberAccessFlg"))
SetPopFlgIL.MarkSequencePoint(doc10, 1777, 1, 1777, 100)
SetPopFlgIL.Emit(OpCodes.Br, cont259)
SetPopFlgIL.MarkLabel(fa259)
SetPopFlgIL.Emit(OpCodes.Br, cont259)
SetPopFlgIL.MarkLabel(cont259)
SetPopFlgIL.MarkSequencePoint(doc10, 1779, 1, 1779, 100)
SetPopFlgIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodCallTok)
SetPopFlgIL.Emit(OpCodes.Ldnull)
Dim fa260 As System.Reflection.Emit.Label = SetPopFlgIL.DefineLabel()
Dim tru260 As System.Reflection.Emit.Label = SetPopFlgIL.DefineLabel()
Dim cont260 As System.Reflection.Emit.Label = SetPopFlgIL.DefineLabel()
SetPopFlgIL.Emit(OpCodes.Beq, fa260)
SetPopFlgIL.Emit(OpCodes.Br, tru260)
SetPopFlgIL.MarkLabel(tru260)
SetPopFlgIL.MarkSequencePoint(doc10, 1780, 1, 1780, 100)
SetPopFlgIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Token)
SetPopFlgIL.MarkSequencePoint(doc10, 1781, 1, 1781, 100)
SetPopFlgIL.Emit(OpCodes.Br, cont260)
SetPopFlgIL.MarkLabel(fa260)
SetPopFlgIL.MarkSequencePoint(doc10, 1782, 1, 1782, 100)
SetPopFlgIL.Emit(OpCodes.Ldnull)
SetPopFlgIL.MarkSequencePoint(doc10, 1783, 1, 1783, 100)
SetPopFlgIL.Emit(OpCodes.Br, cont260)
SetPopFlgIL.MarkLabel(cont260)
SetPopFlgIL.MarkSequencePoint(doc10, 1785, 1, 1785, 100)
SetPopFlgIL.Emit(OpCodes.Ret)
Dim typ366(-1) As Type
ReDim Preserve typ366(UBound(typ366) + 1)
typ366(UBound(typ366)) = GetType(Expr)
Dim CheckIfArrLen As MethodBuilder = Helpers.DefineMethod("CheckIfArrLen", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Boolean), typ366)
Dim CheckIfArrLenIL As ILGenerator = CheckIfArrLen.GetILGenerator()
Dim CheckIfArrLenparam01 As ParameterBuilder = CheckIfArrLen.DefineParameter(1, ParameterAttributes.None, "ind")
CheckIfArrLenIL.MarkSequencePoint(doc10, 1789, 1, 1789, 100)
Dim locbldr255 As LocalBuilder = CheckIfArrLenIL.DeclareLocal(GetType(Token))
locbldr255.SetLocalSymInfo("tok")
CheckIfArrLenIL.MarkSequencePoint(doc10, 1790, 1, 1790, 100)
Dim locbldr256 As LocalBuilder = CheckIfArrLenIL.DeclareLocal(GetType(System.Type))
locbldr256.SetLocalSymInfo("typ")
CheckIfArrLenIL.MarkSequencePoint(doc10, 1791, 1, 1791, 100)
Dim locbldr257 As LocalBuilder = CheckIfArrLenIL.DeclareLocal(GetType(System.Boolean))
locbldr257.SetLocalSymInfo("b")
CheckIfArrLenIL.MarkSequencePoint(doc10, 1792, 1, 1792, 100)
Dim locbldr258 As LocalBuilder = CheckIfArrLenIL.DeclareLocal(GetType(System.Boolean))
locbldr258.SetLocalSymInfo("b2")
CheckIfArrLenIL.MarkSequencePoint(doc10, 1793, 1, 1793, 100)
Dim locbldr259 As LocalBuilder = CheckIfArrLenIL.DeclareLocal(GetType(System.Int32))
locbldr259.SetLocalSymInfo("comp")
CheckIfArrLenIL.MarkSequencePoint(doc10, 1795, 1, 1795, 100)
CheckIfArrLenIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Expr)
CheckIfArrLenIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
CheckIfArrLenIL.Emit(OpCodes.Ldlen)
CheckIfArrLenIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
CheckIfArrLenIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
Dim fa261 As System.Reflection.Emit.Label = CheckIfArrLenIL.DefineLabel()
Dim tru261 As System.Reflection.Emit.Label = CheckIfArrLenIL.DefineLabel()
Dim cont261 As System.Reflection.Emit.Label = CheckIfArrLenIL.DefineLabel()
CheckIfArrLenIL.Emit(OpCodes.Beq, tru261)
CheckIfArrLenIL.Emit(OpCodes.Br, fa261)
CheckIfArrLenIL.MarkLabel(tru261)
CheckIfArrLenIL.MarkSequencePoint(doc10, 1797, 1, 1797, 100)
CheckIfArrLenIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Expr)
CheckIfArrLenIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
CheckIfArrLenIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
CheckIfArrLenIL.Emit(OpCodes.Conv_U)
Typ = Typ02
CheckIfArrLenIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
CheckIfArrLenIL.Emit(OpCodes.Stloc, 0)
CheckIfArrLenIL.MarkSequencePoint(doc10, 1798, 1, 1798, 100)
CheckIfArrLenIL.Emit(OpCodes.Ldtoken, GetType(Ident))
Dim typ367 As Type() = {GetType(System.RuntimeTypeHandle)}
CheckIfArrLenIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ367))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ367).ReturnType
CheckIfArrLenIL.Emit(OpCodes.Stloc, 1)
CheckIfArrLenIL.MarkSequencePoint(doc10, 1800, 1, 1800, 100)
Dim typ368(-1) As Type
CheckIfArrLenIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
CheckIfArrLenIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
CheckIfArrLenIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ368(UBound(typ368) + 1)
typ368(UBound(typ368)) = Typ
CheckIfArrLenIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ368))
Typ = Typ03.GetMethod("IsInstanceOfType", typ368).ReturnType
CheckIfArrLenIL.Emit(OpCodes.Stloc, 2)
CheckIfArrLenIL.MarkSequencePoint(doc10, 1801, 1, 1801, 100)
CheckIfArrLenIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
CheckIfArrLenIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa262 As System.Reflection.Emit.Label = CheckIfArrLenIL.DefineLabel()
Dim tru262 As System.Reflection.Emit.Label = CheckIfArrLenIL.DefineLabel()
Dim cont262 As System.Reflection.Emit.Label = CheckIfArrLenIL.DefineLabel()
CheckIfArrLenIL.Emit(OpCodes.Beq, tru262)
CheckIfArrLenIL.Emit(OpCodes.Br, fa262)
CheckIfArrLenIL.MarkLabel(tru262)
CheckIfArrLenIL.MarkSequencePoint(doc10, 1802, 1, 1802, 100)
Dim typ369(-1) As Type
CheckIfArrLenIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
CheckIfArrLenIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ369(UBound(typ369) + 1)
typ369(UBound(typ369)) = Typ
CheckIfArrLenIL.Emit(OpCodes.Ldstr, "l")
Typ = GetType(System.String)
ReDim Preserve typ369(UBound(typ369) + 1)
typ369(UBound(typ369)) = Typ
CheckIfArrLenIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ369))
Typ = GetType(String).GetMethod("Compare", typ369).ReturnType
CheckIfArrLenIL.Emit(OpCodes.Stloc, 4)
CheckIfArrLenIL.MarkSequencePoint(doc10, 1803, 1, 1803, 100)
CheckIfArrLenIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
CheckIfArrLenIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa263 As System.Reflection.Emit.Label = CheckIfArrLenIL.DefineLabel()
Dim tru263 As System.Reflection.Emit.Label = CheckIfArrLenIL.DefineLabel()
Dim cont263 As System.Reflection.Emit.Label = CheckIfArrLenIL.DefineLabel()
CheckIfArrLenIL.Emit(OpCodes.Beq, fa263)
CheckIfArrLenIL.Emit(OpCodes.Br, tru263)
CheckIfArrLenIL.MarkLabel(tru263)
CheckIfArrLenIL.MarkSequencePoint(doc10, 1804, 1, 1804, 100)
CheckIfArrLenIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
CheckIfArrLenIL.Emit(OpCodes.Stloc, 3)
CheckIfArrLenIL.MarkSequencePoint(doc10, 1805, 1, 1805, 100)
CheckIfArrLenIL.Emit(OpCodes.Br, cont263)
CheckIfArrLenIL.MarkLabel(fa263)
CheckIfArrLenIL.MarkSequencePoint(doc10, 1806, 1, 1806, 100)
CheckIfArrLenIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
CheckIfArrLenIL.Emit(OpCodes.Stloc, 3)
CheckIfArrLenIL.MarkSequencePoint(doc10, 1807, 1, 1807, 100)
CheckIfArrLenIL.Emit(OpCodes.Br, cont263)
CheckIfArrLenIL.MarkLabel(cont263)
CheckIfArrLenIL.MarkSequencePoint(doc10, 1808, 1, 1808, 100)
CheckIfArrLenIL.Emit(OpCodes.Br, cont262)
CheckIfArrLenIL.MarkLabel(fa262)
CheckIfArrLenIL.Emit(OpCodes.Br, cont262)
CheckIfArrLenIL.MarkLabel(cont262)
CheckIfArrLenIL.MarkSequencePoint(doc10, 1810, 1, 1810, 100)
CheckIfArrLenIL.Emit(OpCodes.Br, cont261)
CheckIfArrLenIL.MarkLabel(fa261)
CheckIfArrLenIL.Emit(OpCodes.Br, cont261)
CheckIfArrLenIL.MarkLabel(cont261)
CheckIfArrLenIL.MarkSequencePoint(doc10, 1812, 1, 1812, 100)
CheckIfArrLenIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
CheckIfArrLenIL.MarkSequencePoint(doc10, 1814, 1, 1814, 100)
CheckIfArrLenIL.Emit(OpCodes.Ret)
Helpers.CreateType()
End Sub


Dim doc11 As ISymbolDocumentWriter


Dim doc12 As ISymbolDocumentWriter

Sub OpStack()
Dim OpStack As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "OpStack", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim Stack As FieldBuilder = OpStack.DefineField("Stack", GetType(Expr), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = OpStack.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc12, 14, 1, 14, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc12, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, GetType(Expr).GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, Stack)
ctor0IL.MarkSequencePoint(doc12, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(Token)
Dim PushOp As MethodBuilder = OpStack.DefineMethod("PushOp", MethodAttributes.Public, GetType(System.Void), typ0)
Dim PushOpIL As ILGenerator = PushOp.GetILGenerator()
Dim PushOpparam01 As ParameterBuilder = PushOp.DefineParameter(1, ParameterAttributes.None, "optok")
PushOpIL.MarkSequencePoint(doc12, 19, 1, 19, 100)
Dim typ1(-1) As Type
PushOpIL.Emit(OpCodes.Ldarg_0)
PushOpIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
PushOpIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = Typ
PushOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ1))
Typ = Typ03.GetMethod("AddToken", typ1).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
PushOpIL.Emit(OpCodes.Pop)
End If
PushOpIL.MarkSequencePoint(doc12, 20, 1, 20, 100)
PushOpIL.Emit(OpCodes.Ret)
Dim PopOp As MethodBuilder = OpStack.DefineMethod("PopOp", MethodAttributes.Public, GetType(System.Void), Type.EmptyTypes)
Dim PopOpIL As ILGenerator = PopOp.GetILGenerator()
PopOpIL.MarkSequencePoint(doc12, 23, 1, 23, 100)
PopOpIL.Emit(OpCodes.Ldarg_0)
PopOpIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
PopOpIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
PopOpIL.Emit(OpCodes.Ldlen)
PopOpIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
PopOpIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa264 As System.Reflection.Emit.Label = PopOpIL.DefineLabel()
Dim tru264 As System.Reflection.Emit.Label = PopOpIL.DefineLabel()
Dim cont264 As System.Reflection.Emit.Label = PopOpIL.DefineLabel()
PopOpIL.Emit(OpCodes.Beq, tru264)
PopOpIL.Emit(OpCodes.Br, fa264)
PopOpIL.MarkLabel(tru264)
PopOpIL.MarkSequencePoint(doc12, 24, 1, 24, 100)
PopOpIL.Emit(OpCodes.Br, cont264)
PopOpIL.MarkLabel(fa264)
PopOpIL.MarkSequencePoint(doc12, 25, 1, 25, 100)
Dim locbldr260 As LocalBuilder = PopOpIL.DeclareLocal(GetType(System.Int32))
locbldr260.SetLocalSymInfo("ind")
PopOpIL.Emit(OpCodes.Ldarg_0)
PopOpIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
PopOpIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
PopOpIL.Emit(OpCodes.Ldlen)
PopOpIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
PopOpIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PopOpIL.Emit(OpCodes.Sub)
PopOpIL.Emit(OpCodes.Stloc, 0)
PopOpIL.MarkSequencePoint(doc12, 26, 1, 26, 100)
Dim typ2(-1) As Type
PopOpIL.Emit(OpCodes.Ldarg_0)
PopOpIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
PopOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = Typ
PopOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ2))
Typ = Typ03.GetMethod("RemToken", typ2).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
PopOpIL.Emit(OpCodes.Pop)
End If
PopOpIL.MarkSequencePoint(doc12, 27, 1, 27, 100)
PopOpIL.Emit(OpCodes.Br, cont264)
PopOpIL.MarkLabel(cont264)
PopOpIL.MarkSequencePoint(doc12, 28, 1, 28, 100)
PopOpIL.Emit(OpCodes.Ret)
Dim TopOp As MethodBuilder = OpStack.DefineMethod("TopOp", MethodAttributes.Public, GetType(Token), Type.EmptyTypes)
Dim TopOpIL As ILGenerator = TopOp.GetILGenerator()
TopOpIL.MarkSequencePoint(doc12, 31, 1, 31, 100)
TopOpIL.Emit(OpCodes.Ldarg_0)
TopOpIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
TopOpIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
TopOpIL.Emit(OpCodes.Ldlen)
TopOpIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
TopOpIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa265 As System.Reflection.Emit.Label = TopOpIL.DefineLabel()
Dim tru265 As System.Reflection.Emit.Label = TopOpIL.DefineLabel()
Dim cont265 As System.Reflection.Emit.Label = TopOpIL.DefineLabel()
TopOpIL.Emit(OpCodes.Beq, tru265)
TopOpIL.Emit(OpCodes.Br, fa265)
TopOpIL.MarkLabel(tru265)
TopOpIL.MarkSequencePoint(doc12, 32, 1, 32, 100)
TopOpIL.Emit(OpCodes.Ldnull)
TopOpIL.MarkSequencePoint(doc12, 33, 1, 33, 100)
TopOpIL.Emit(OpCodes.Br, cont265)
TopOpIL.MarkLabel(fa265)
TopOpIL.MarkSequencePoint(doc12, 34, 1, 34, 100)
Dim locbldr261 As LocalBuilder = TopOpIL.DeclareLocal(GetType(System.Int32))
locbldr261.SetLocalSymInfo("ind")
TopOpIL.Emit(OpCodes.Ldarg_0)
TopOpIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
TopOpIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
TopOpIL.Emit(OpCodes.Ldlen)
TopOpIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
TopOpIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
TopOpIL.Emit(OpCodes.Sub)
TopOpIL.Emit(OpCodes.Stloc, 0)
TopOpIL.MarkSequencePoint(doc12, 35, 1, 35, 100)
Dim locbldr262 As LocalBuilder = TopOpIL.DeclareLocal(GetType(Token))
locbldr262.SetLocalSymInfo("optok")
TopOpIL.Emit(OpCodes.Ldarg_0)
TopOpIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
TopOpIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
TopOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
TopOpIL.Emit(OpCodes.Conv_U)
Typ = Typ02
TopOpIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
TopOpIL.Emit(OpCodes.Stloc, 1)
TopOpIL.MarkSequencePoint(doc12, 36, 1, 36, 100)
TopOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Token)
TopOpIL.MarkSequencePoint(doc12, 37, 1, 37, 100)
TopOpIL.Emit(OpCodes.Br, cont265)
TopOpIL.MarkLabel(cont265)
TopOpIL.MarkSequencePoint(doc12, 38, 1, 38, 100)
TopOpIL.Emit(OpCodes.Ret)
Dim getLength As MethodBuilder = OpStack.DefineMethod("getLength", MethodAttributes.Public, GetType(System.Int32), Type.EmptyTypes)
Dim getLengthIL As ILGenerator = getLength.GetILGenerator()
getLengthIL.MarkSequencePoint(doc12, 41, 1, 41, 100)
getLengthIL.Emit(OpCodes.Ldarg_0)
getLengthIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
getLengthIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
getLengthIL.Emit(OpCodes.Ldlen)
getLengthIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
getLengthIL.MarkSequencePoint(doc12, 42, 1, 42, 100)
getLengthIL.Emit(OpCodes.Ret)
OpStack.CreateType()
End Sub


Dim doc13 As ISymbolDocumentWriter

Sub Evaluator()
Dim Evaluator As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "Evaluator", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass Or TypeAttributes.BeforeFieldInit, GetType(System.Object))
Dim Stack As FieldBuilder = Evaluator.DefineField("Stack", asm.GetType("dylan.NET.Tokenizer.CodeGen.OpStack"), FieldAttributes.Public)
Dim InstToken As FieldBuilder = Evaluator.DefineField("InstToken", GetType(Token), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = Evaluator.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc13, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc13, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, Stack)
ctor0IL.MarkSequencePoint(doc13, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, GetType(Token).GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, InstToken)
ctor0IL.MarkSequencePoint(doc13, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(Token)
Dim RetPrec As MethodBuilder = Evaluator.DefineMethod("RetPrec", MethodAttributes.Public, GetType(System.Int32), typ0)
Dim RetPrecIL As ILGenerator = RetPrec.GetILGenerator()
Dim RetPrecparam01 As ParameterBuilder = RetPrec.DefineParameter(1, ParameterAttributes.None, "tok")
RetPrecIL.MarkSequencePoint(doc13, 21, 1, 21, 100)
Dim locbldr263 As LocalBuilder = RetPrecIL.DeclareLocal(GetType(System.Type))
locbldr263.SetLocalSymInfo("typ")
RetPrecIL.Emit(OpCodes.Ldnull)
RetPrecIL.Emit(OpCodes.Stloc, 0)
RetPrecIL.MarkSequencePoint(doc13, 22, 1, 22, 100)
Dim locbldr264 As LocalBuilder = RetPrecIL.DeclareLocal(GetType(System.Boolean))
locbldr264.SetLocalSymInfo("b")
RetPrecIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
RetPrecIL.Emit(OpCodes.Stloc, 1)
RetPrecIL.MarkSequencePoint(doc13, 23, 1, 23, 100)
Dim locbldr265 As LocalBuilder = RetPrecIL.DeclareLocal(GetType(System.Int32))
locbldr265.SetLocalSymInfo("prec")
RetPrecIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
RetPrecIL.Emit(OpCodes.Stloc, 2)
RetPrecIL.MarkSequencePoint(doc13, 25, 1, 25, 100)
Dim label0 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
RetPrecIL.MarkSequencePoint(doc13, 27, 1, 27, 100)
RetPrecIL.Emit(OpCodes.Ldtoken, GetType(Op))
Dim typ1 As Type() = {GetType(System.RuntimeTypeHandle)}
RetPrecIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ1))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ1).ReturnType
RetPrecIL.Emit(OpCodes.Stloc, 0)
RetPrecIL.MarkSequencePoint(doc13, 28, 1, 28, 100)
Dim typ2(-1) As Type
RetPrecIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
RetPrecIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
RetPrecIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = Typ
RetPrecIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ2))
Typ = Typ03.GetMethod("IsInstanceOfType", typ2).ReturnType
RetPrecIL.Emit(OpCodes.Stloc, 1)
RetPrecIL.MarkSequencePoint(doc13, 30, 1, 30, 100)
RetPrecIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
RetPrecIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa266 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim tru266 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim cont266 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
RetPrecIL.Emit(OpCodes.Beq, tru266)
RetPrecIL.Emit(OpCodes.Br, fa266)
RetPrecIL.MarkLabel(tru266)
RetPrecIL.MarkSequencePoint(doc13, 31, 1, 31, 100)
Dim locbldr266 As LocalBuilder = RetPrecIL.DeclareLocal(GetType(Op))
locbldr266.SetLocalSymInfo("optok")
RetPrecIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
RetPrecIL.Emit(OpCodes.Stloc, 3)
RetPrecIL.MarkSequencePoint(doc13, 32, 1, 32, 100)
RetPrecIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Op)
RetPrecIL.Emit(OpCodes.Ldfld, GetType(Op).GetField("PrecNo"))
Typ = GetType(Op).GetField("PrecNo").FieldType
RetPrecIL.Emit(OpCodes.Stloc, 2)
RetPrecIL.MarkSequencePoint(doc13, 33, 1, 33, 100)
RetPrecIL.Emit(OpCodes.Br, label0)
RetPrecIL.MarkSequencePoint(doc13, 34, 1, 34, 100)
RetPrecIL.Emit(OpCodes.Br, cont266)
RetPrecIL.MarkLabel(fa266)
RetPrecIL.Emit(OpCodes.Br, cont266)
RetPrecIL.MarkLabel(cont266)
RetPrecIL.MarkSequencePoint(doc13, 36, 1, 36, 100)
RetPrecIL.Emit(OpCodes.Ldtoken, GetType(LParen))
Dim typ3 As Type() = {GetType(System.RuntimeTypeHandle)}
RetPrecIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ3))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ3).ReturnType
RetPrecIL.Emit(OpCodes.Stloc, 0)
RetPrecIL.MarkSequencePoint(doc13, 37, 1, 37, 100)
Dim typ4(-1) As Type
RetPrecIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
RetPrecIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
RetPrecIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
RetPrecIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ4))
Typ = Typ03.GetMethod("IsInstanceOfType", typ4).ReturnType
RetPrecIL.Emit(OpCodes.Stloc, 1)
RetPrecIL.MarkSequencePoint(doc13, 39, 1, 39, 100)
RetPrecIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
RetPrecIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa267 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim tru267 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim cont267 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
RetPrecIL.Emit(OpCodes.Beq, tru267)
RetPrecIL.Emit(OpCodes.Br, fa267)
RetPrecIL.MarkLabel(tru267)
RetPrecIL.MarkSequencePoint(doc13, 40, 1, 40, 100)
RetPrecIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
RetPrecIL.Emit(OpCodes.Stloc, 2)
RetPrecIL.MarkSequencePoint(doc13, 41, 1, 41, 100)
RetPrecIL.Emit(OpCodes.Br, label0)
RetPrecIL.MarkSequencePoint(doc13, 42, 1, 42, 100)
RetPrecIL.Emit(OpCodes.Br, cont267)
RetPrecIL.MarkLabel(fa267)
RetPrecIL.Emit(OpCodes.Br, cont267)
RetPrecIL.MarkLabel(cont267)
RetPrecIL.MarkSequencePoint(doc13, 44, 1, 44, 100)
RetPrecIL.Emit(OpCodes.Ldtoken, GetType(RParen))
Dim typ5 As Type() = {GetType(System.RuntimeTypeHandle)}
RetPrecIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ5))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ5).ReturnType
RetPrecIL.Emit(OpCodes.Stloc, 0)
RetPrecIL.MarkSequencePoint(doc13, 45, 1, 45, 100)
Dim typ6(-1) As Type
RetPrecIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
RetPrecIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
RetPrecIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = Typ
RetPrecIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ6))
Typ = Typ03.GetMethod("IsInstanceOfType", typ6).ReturnType
RetPrecIL.Emit(OpCodes.Stloc, 1)
RetPrecIL.MarkSequencePoint(doc13, 47, 1, 47, 100)
RetPrecIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
RetPrecIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa268 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim tru268 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim cont268 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
RetPrecIL.Emit(OpCodes.Beq, tru268)
RetPrecIL.Emit(OpCodes.Br, fa268)
RetPrecIL.MarkLabel(tru268)
RetPrecIL.MarkSequencePoint(doc13, 48, 1, 48, 100)
RetPrecIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
RetPrecIL.Emit(OpCodes.Stloc, 2)
RetPrecIL.MarkSequencePoint(doc13, 49, 1, 49, 100)
RetPrecIL.Emit(OpCodes.Br, label0)
RetPrecIL.MarkSequencePoint(doc13, 50, 1, 50, 100)
RetPrecIL.Emit(OpCodes.Br, cont268)
RetPrecIL.MarkLabel(fa268)
RetPrecIL.Emit(OpCodes.Br, cont268)
RetPrecIL.MarkLabel(cont268)
RetPrecIL.MarkSequencePoint(doc13, 52, 1, 52, 100)
RetPrecIL.MarkLabel(label0)
RetPrecIL.MarkSequencePoint(doc13, 54, 1, 54, 100)
RetPrecIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
RetPrecIL.MarkSequencePoint(doc13, 56, 1, 56, 100)
RetPrecIL.Emit(OpCodes.Ret)
Dim typ7(-1) As Type
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = GetType(Token)
Dim isLParen As MethodBuilder = Evaluator.DefineMethod("isLParen", MethodAttributes.Public, GetType(System.Boolean), typ7)
Dim isLParenIL As ILGenerator = isLParen.GetILGenerator()
Dim isLParenparam01 As ParameterBuilder = isLParen.DefineParameter(1, ParameterAttributes.None, "tok")
isLParenIL.MarkSequencePoint(doc13, 59, 1, 59, 100)
Dim locbldr267 As LocalBuilder = isLParenIL.DeclareLocal(GetType(System.Type))
locbldr267.SetLocalSymInfo("typ")
isLParenIL.Emit(OpCodes.Ldtoken, GetType(LParen))
Dim typ8 As Type() = {GetType(System.RuntimeTypeHandle)}
isLParenIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ8))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ8).ReturnType
isLParenIL.Emit(OpCodes.Stloc, 0)
isLParenIL.MarkSequencePoint(doc13, 60, 1, 60, 100)
Dim typ9(-1) As Type
isLParenIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
isLParenIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
isLParenIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = Typ
isLParenIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ9))
Typ = Typ03.GetMethod("IsInstanceOfType", typ9).ReturnType
isLParenIL.MarkSequencePoint(doc13, 61, 1, 61, 100)
isLParenIL.Emit(OpCodes.Ret)
Dim typ10(-1) As Type
ReDim Preserve typ10(UBound(typ10) + 1)
typ10(UBound(typ10)) = GetType(Token)
Dim isOp As MethodBuilder = Evaluator.DefineMethod("isOp", MethodAttributes.Public, GetType(System.Boolean), typ10)
Dim isOpIL As ILGenerator = isOp.GetILGenerator()
Dim isOpparam01 As ParameterBuilder = isOp.DefineParameter(1, ParameterAttributes.None, "tok")
isOpIL.MarkSequencePoint(doc13, 64, 1, 64, 100)
Dim locbldr268 As LocalBuilder = isOpIL.DeclareLocal(GetType(System.Type))
locbldr268.SetLocalSymInfo("typ")
isOpIL.Emit(OpCodes.Ldtoken, GetType(Op))
Dim typ11 As Type() = {GetType(System.RuntimeTypeHandle)}
isOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ11))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ11).ReturnType
isOpIL.Emit(OpCodes.Stloc, 0)
isOpIL.MarkSequencePoint(doc13, 65, 1, 65, 100)
Dim typ12(-1) As Type
isOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
isOpIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
isOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ12(UBound(typ12) + 1)
typ12(UBound(typ12)) = Typ
isOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ12))
Typ = Typ03.GetMethod("IsInstanceOfType", typ12).ReturnType
isOpIL.MarkSequencePoint(doc13, 66, 1, 66, 100)
isOpIL.Emit(OpCodes.Ret)
Dim typ13(-1) As Type
ReDim Preserve typ13(UBound(typ13) + 1)
typ13(UBound(typ13)) = GetType(Expr)
Dim ConvToRPN As MethodBuilder = Evaluator.DefineMethod("ConvToRPN", MethodAttributes.Public, GetType(Expr), typ13)
Dim ConvToRPNIL As ILGenerator = ConvToRPN.GetILGenerator()
Dim ConvToRPNparam01 As ParameterBuilder = ConvToRPN.DefineParameter(1, ParameterAttributes.None, "exp")
ConvToRPNIL.MarkSequencePoint(doc13, 70, 1, 70, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.OpStack").GetConstructor(Type.EmptyTypes))
ConvToRPNIL.Emit(OpCodes.Stfld, Stack)
ConvToRPNIL.MarkSequencePoint(doc13, 71, 1, 71, 100)
Dim locbldr269 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(Expr))
locbldr269.SetLocalSymInfo("exp2")
ConvToRPNIL.Emit(OpCodes.Newobj, GetType(Expr).GetConstructor(Type.EmptyTypes))
ConvToRPNIL.Emit(OpCodes.Stloc, 0)
ConvToRPNIL.MarkSequencePoint(doc13, 72, 1, 72, 100)
Dim locbldr270 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(System.Int32))
locbldr270.SetLocalSymInfo("i")
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Stloc, 1)
ConvToRPNIL.MarkSequencePoint(doc13, 73, 1, 73, 100)
Dim locbldr271 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(System.Int32))
locbldr271.SetLocalSymInfo("len")
ConvToRPNIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToRPNIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
ConvToRPNIL.Emit(OpCodes.Ldlen)
ConvToRPNIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Sub)
ConvToRPNIL.Emit(OpCodes.Stloc, 2)
ConvToRPNIL.MarkSequencePoint(doc13, 74, 1, 74, 100)
Dim locbldr272 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(System.Int32))
locbldr272.SetLocalSymInfo("int1")
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Stloc, 3)
ConvToRPNIL.MarkSequencePoint(doc13, 75, 1, 75, 100)
Dim locbldr273 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(System.Int32))
locbldr273.SetLocalSymInfo("int2")
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Stloc, 4)
ConvToRPNIL.MarkSequencePoint(doc13, 76, 1, 76, 100)
Dim locbldr274 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(Token))
locbldr274.SetLocalSymInfo("tok")
ConvToRPNIL.Emit(OpCodes.Ldnull)
ConvToRPNIL.Emit(OpCodes.Stloc, 5)
ConvToRPNIL.MarkSequencePoint(doc13, 77, 1, 77, 100)
Dim locbldr275 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(Token))
locbldr275.SetLocalSymInfo("tok2")
ConvToRPNIL.Emit(OpCodes.Ldnull)
ConvToRPNIL.Emit(OpCodes.Stloc, 6)
ConvToRPNIL.MarkSequencePoint(doc13, 78, 1, 78, 100)
Dim locbldr276 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(System.Type))
locbldr276.SetLocalSymInfo("typ")
ConvToRPNIL.Emit(OpCodes.Ldnull)
ConvToRPNIL.Emit(OpCodes.Stloc, 7)
ConvToRPNIL.MarkSequencePoint(doc13, 79, 1, 79, 100)
Dim locbldr277 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(System.Boolean))
locbldr277.SetLocalSymInfo("b")
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc13, 80, 1, 80, 100)
Dim locbldr278 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(System.Boolean))
locbldr278.SetLocalSymInfo("orflg")
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Stloc, 9)
ConvToRPNIL.MarkSequencePoint(doc13, 82, 1, 82, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Expr)
ConvToRPNIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToRPNIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Line"))
Typ = GetType(Expr).GetField("Line").FieldType
ConvToRPNIL.Emit(OpCodes.Stfld, GetType(Expr).GetField("Line"))
ConvToRPNIL.MarkSequencePoint(doc13, 84, 1, 84, 100)
Dim label1 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.MarkSequencePoint(doc13, 85, 1, 85, 100)
Dim label2 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.MarkSequencePoint(doc13, 86, 1, 86, 100)
Dim label3 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.MarkSequencePoint(doc13, 88, 1, 88, 100)
ConvToRPNIL.MarkLabel(label2)
ConvToRPNIL.MarkSequencePoint(doc13, 90, 1, 90, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Add)
ConvToRPNIL.Emit(OpCodes.Stloc, 1)
ConvToRPNIL.MarkSequencePoint(doc13, 92, 1, 92, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToRPNIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
ConvToRPNIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ConvToRPNIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ConvToRPNIL.Emit(OpCodes.Stloc, 5)
ConvToRPNIL.MarkSequencePoint(doc13, 94, 1, 94, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ14(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, isOp)
Typ = isOp.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 9)
ConvToRPNIL.MarkSequencePoint(doc13, 95, 1, 95, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ15(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReDim Preserve typ15(UBound(typ15) + 1)
typ15(UBound(typ15)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, isLParen)
Typ = isLParen.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc13, 96, 1, 96, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Or)
ConvToRPNIL.Emit(OpCodes.Stloc, 9)
ConvToRPNIL.MarkSequencePoint(doc13, 97, 1, 97, 100)
ConvToRPNIL.Emit(OpCodes.Ldtoken, GetType(RParen))
Dim typ16 As Type() = {GetType(System.RuntimeTypeHandle)}
ConvToRPNIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ16))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ16).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 7)
ConvToRPNIL.MarkSequencePoint(doc13, 98, 1, 98, 100)
Dim typ17(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Type)
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ConvToRPNIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ17(UBound(typ17) + 1)
typ17(UBound(typ17)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ17))
Typ = Typ03.GetMethod("IsInstanceOfType", typ17).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc13, 99, 1, 99, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Or)
ConvToRPNIL.Emit(OpCodes.Stloc, 9)
ConvToRPNIL.MarkSequencePoint(doc13, 101, 1, 101, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa269 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru269 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont269 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru269)
ConvToRPNIL.Emit(OpCodes.Br, fa269)
ConvToRPNIL.MarkLabel(tru269)
ConvToRPNIL.MarkSequencePoint(doc13, 102, 1, 102, 100)
Dim typ18(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Expr)
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReDim Preserve typ18(UBound(typ18) + 1)
typ18(UBound(typ18)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ18))
Typ = Typ03.GetMethod("AddToken", typ18).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc13, 103, 1, 103, 100)
ConvToRPNIL.Emit(OpCodes.Br, label3)
ConvToRPNIL.MarkSequencePoint(doc13, 104, 1, 104, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont269)
ConvToRPNIL.MarkLabel(fa269)
ConvToRPNIL.Emit(OpCodes.Br, cont269)
ConvToRPNIL.MarkLabel(cont269)
ConvToRPNIL.MarkSequencePoint(doc13, 106, 1, 106, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ19(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReDim Preserve typ19(UBound(typ19) + 1)
typ19(UBound(typ19)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, isOp)
Typ = isOp.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc13, 108, 1, 108, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa270 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru270 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont270 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru270)
ConvToRPNIL.Emit(OpCodes.Br, fa270)
ConvToRPNIL.MarkLabel(tru270)
ConvToRPNIL.MarkSequencePoint(doc13, 109, 1, 109, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("getLength", Type.EmptyTypes))
Typ = Typ03.GetMethod("getLength", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 3)
ConvToRPNIL.MarkSequencePoint(doc13, 110, 1, 110, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa271 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru271 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont271 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, fa271)
ConvToRPNIL.Emit(OpCodes.Br, tru271)
ConvToRPNIL.MarkLabel(tru271)
ConvToRPNIL.MarkSequencePoint(doc13, 111, 1, 111, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("TopOp", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 6)
ConvToRPNIL.MarkSequencePoint(doc13, 112, 1, 112, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ22(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReDim Preserve typ22(UBound(typ22) + 1)
typ22(UBound(typ22)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, RetPrec)
Typ = RetPrec.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 3)
ConvToRPNIL.MarkSequencePoint(doc13, 113, 1, 113, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ23(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
ReDim Preserve typ23(UBound(typ23) + 1)
typ23(UBound(typ23)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, RetPrec)
Typ = RetPrec.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 4)
ConvToRPNIL.MarkSequencePoint(doc13, 114, 1, 114, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
Dim fa272 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru272 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont272 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Ble, tru272)
ConvToRPNIL.Emit(OpCodes.Br, fa272)
ConvToRPNIL.MarkLabel(tru272)
ConvToRPNIL.MarkSequencePoint(doc13, 115, 1, 115, 100)
Dim typ24(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Expr)
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
ReDim Preserve typ24(UBound(typ24) + 1)
typ24(UBound(typ24)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ24))
Typ = Typ03.GetMethod("AddToken", typ24).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc13, 116, 1, 116, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("PopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("PopOp", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc13, 117, 1, 117, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont272)
ConvToRPNIL.MarkLabel(fa272)
ConvToRPNIL.Emit(OpCodes.Br, cont272)
ConvToRPNIL.MarkLabel(cont272)
ConvToRPNIL.MarkSequencePoint(doc13, 118, 1, 118, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont271)
ConvToRPNIL.MarkLabel(fa271)
ConvToRPNIL.Emit(OpCodes.Br, cont271)
ConvToRPNIL.MarkLabel(cont271)
ConvToRPNIL.MarkSequencePoint(doc13, 119, 1, 119, 100)
Dim typ26(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReDim Preserve typ26(UBound(typ26) + 1)
typ26(UBound(typ26)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("PushOp", typ26))
Typ = Typ03.GetMethod("PushOp", typ26).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc13, 120, 1, 120, 100)
ConvToRPNIL.Emit(OpCodes.Br, label3)
ConvToRPNIL.MarkSequencePoint(doc13, 121, 1, 121, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont270)
ConvToRPNIL.MarkLabel(fa270)
ConvToRPNIL.Emit(OpCodes.Br, cont270)
ConvToRPNIL.MarkLabel(cont270)
ConvToRPNIL.MarkSequencePoint(doc13, 123, 1, 123, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ27(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReDim Preserve typ27(UBound(typ27) + 1)
typ27(UBound(typ27)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, isLParen)
Typ = isLParen.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc13, 125, 1, 125, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa273 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru273 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont273 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru273)
ConvToRPNIL.Emit(OpCodes.Br, fa273)
ConvToRPNIL.MarkLabel(tru273)
ConvToRPNIL.MarkSequencePoint(doc13, 126, 1, 126, 100)
Dim typ28(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReDim Preserve typ28(UBound(typ28) + 1)
typ28(UBound(typ28)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("PushOp", typ28))
Typ = Typ03.GetMethod("PushOp", typ28).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc13, 127, 1, 127, 100)
ConvToRPNIL.Emit(OpCodes.Br, label3)
ConvToRPNIL.MarkSequencePoint(doc13, 128, 1, 128, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont273)
ConvToRPNIL.MarkLabel(fa273)
ConvToRPNIL.Emit(OpCodes.Br, cont273)
ConvToRPNIL.MarkLabel(cont273)
ConvToRPNIL.MarkSequencePoint(doc13, 130, 1, 130, 100)
ConvToRPNIL.Emit(OpCodes.Ldtoken, GetType(RParen))
Dim typ29 As Type() = {GetType(System.RuntimeTypeHandle)}
ConvToRPNIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ29))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ29).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 7)
ConvToRPNIL.MarkSequencePoint(doc13, 131, 1, 131, 100)
Dim typ30(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Type)
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ConvToRPNIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ30(UBound(typ30) + 1)
typ30(UBound(typ30)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ30))
Typ = Typ03.GetMethod("IsInstanceOfType", typ30).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc13, 133, 1, 133, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa274 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru274 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont274 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru274)
ConvToRPNIL.Emit(OpCodes.Br, fa274)
ConvToRPNIL.MarkLabel(tru274)
ConvToRPNIL.MarkSequencePoint(doc13, 134, 1, 134, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("getLength", Type.EmptyTypes))
Typ = Typ03.GetMethod("getLength", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 3)
ConvToRPNIL.MarkSequencePoint(doc13, 135, 1, 135, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa275 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru275 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont275 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, fa275)
ConvToRPNIL.Emit(OpCodes.Br, tru275)
ConvToRPNIL.MarkLabel(tru275)
ConvToRPNIL.MarkSequencePoint(doc13, 136, 1, 136, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("TopOp", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 6)
ConvToRPNIL.MarkSequencePoint(doc13, 137, 1, 137, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ33(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
ReDim Preserve typ33(UBound(typ33) + 1)
typ33(UBound(typ33)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, isLParen)
Typ = isLParen.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc13, 138, 1, 138, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa276 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru276 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont276 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru276)
ConvToRPNIL.Emit(OpCodes.Br, fa276)
ConvToRPNIL.MarkLabel(tru276)
ConvToRPNIL.MarkSequencePoint(doc13, 139, 1, 139, 100)
Dim typ34(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Expr)
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
ReDim Preserve typ34(UBound(typ34) + 1)
typ34(UBound(typ34)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ34))
Typ = Typ03.GetMethod("AddToken", typ34).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc13, 140, 1, 140, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("PopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("PopOp", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc13, 141, 1, 141, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("getLength", Type.EmptyTypes))
Typ = Typ03.GetMethod("getLength", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 3)
ConvToRPNIL.MarkSequencePoint(doc13, 142, 1, 142, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa277 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru277 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont277 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, fa277)
ConvToRPNIL.Emit(OpCodes.Br, tru277)
ConvToRPNIL.MarkLabel(tru277)
ConvToRPNIL.MarkSequencePoint(doc13, 143, 1, 143, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("TopOp", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 6)
ConvToRPNIL.MarkSequencePoint(doc13, 144, 1, 144, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ38(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
ReDim Preserve typ38(UBound(typ38) + 1)
typ38(UBound(typ38)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, isLParen)
Typ = isLParen.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc13, 145, 1, 145, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa278 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru278 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont278 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru278)
ConvToRPNIL.Emit(OpCodes.Br, fa278)
ConvToRPNIL.MarkLabel(tru278)
ConvToRPNIL.MarkSequencePoint(doc13, 146, 1, 146, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("PopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("PopOp", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc13, 147, 1, 147, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont278)
ConvToRPNIL.MarkLabel(fa278)
ConvToRPNIL.Emit(OpCodes.Br, cont278)
ConvToRPNIL.MarkLabel(cont278)
ConvToRPNIL.MarkSequencePoint(doc13, 148, 1, 148, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont277)
ConvToRPNIL.MarkLabel(fa277)
ConvToRPNIL.Emit(OpCodes.Br, cont277)
ConvToRPNIL.MarkLabel(cont277)
ConvToRPNIL.MarkSequencePoint(doc13, 149, 1, 149, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont276)
ConvToRPNIL.MarkLabel(fa276)
ConvToRPNIL.Emit(OpCodes.Br, cont276)
ConvToRPNIL.MarkLabel(cont276)
ConvToRPNIL.MarkSequencePoint(doc13, 150, 1, 150, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont275)
ConvToRPNIL.MarkLabel(fa275)
ConvToRPNIL.MarkSequencePoint(doc13, 151, 1, 151, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("TopOp", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 6)
ConvToRPNIL.MarkSequencePoint(doc13, 152, 1, 152, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ41(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
ReDim Preserve typ41(UBound(typ41) + 1)
typ41(UBound(typ41)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, isLParen)
Typ = isLParen.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc13, 153, 1, 153, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa279 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru279 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont279 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru279)
ConvToRPNIL.Emit(OpCodes.Br, fa279)
ConvToRPNIL.MarkLabel(tru279)
ConvToRPNIL.MarkSequencePoint(doc13, 154, 1, 154, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("PopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("PopOp", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc13, 155, 1, 155, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont279)
ConvToRPNIL.MarkLabel(fa279)
ConvToRPNIL.Emit(OpCodes.Br, cont279)
ConvToRPNIL.MarkLabel(cont279)
ConvToRPNIL.MarkSequencePoint(doc13, 156, 1, 156, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont275)
ConvToRPNIL.MarkLabel(cont275)
ConvToRPNIL.MarkSequencePoint(doc13, 157, 1, 157, 100)
ConvToRPNIL.Emit(OpCodes.Br, label3)
ConvToRPNIL.MarkSequencePoint(doc13, 158, 1, 158, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont274)
ConvToRPNIL.MarkLabel(fa274)
ConvToRPNIL.Emit(OpCodes.Br, cont274)
ConvToRPNIL.MarkLabel(cont274)
ConvToRPNIL.MarkSequencePoint(doc13, 160, 1, 160, 100)
ConvToRPNIL.MarkLabel(label3)
ConvToRPNIL.MarkSequencePoint(doc13, 162, 1, 162, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa280 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru280 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont280 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru280)
ConvToRPNIL.Emit(OpCodes.Br, fa280)
ConvToRPNIL.MarkLabel(tru280)
ConvToRPNIL.MarkSequencePoint(doc13, 163, 1, 163, 100)
ConvToRPNIL.Emit(OpCodes.Br, label1)
ConvToRPNIL.MarkSequencePoint(doc13, 164, 1, 164, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont280)
ConvToRPNIL.MarkLabel(fa280)
ConvToRPNIL.MarkSequencePoint(doc13, 165, 1, 165, 100)
ConvToRPNIL.Emit(OpCodes.Br, label2)
ConvToRPNIL.MarkSequencePoint(doc13, 166, 1, 166, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont280)
ConvToRPNIL.MarkLabel(cont280)
ConvToRPNIL.MarkSequencePoint(doc13, 168, 1, 168, 100)
ConvToRPNIL.MarkLabel(label1)
ConvToRPNIL.MarkSequencePoint(doc13, 170, 1, 170, 100)
Dim label4 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.MarkSequencePoint(doc13, 171, 1, 171, 100)
Dim label5 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.MarkSequencePoint(doc13, 173, 1, 173, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("getLength", Type.EmptyTypes))
Typ = Typ03.GetMethod("getLength", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 3)
ConvToRPNIL.MarkSequencePoint(doc13, 174, 1, 174, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa281 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru281 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont281 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru281)
ConvToRPNIL.Emit(OpCodes.Br, fa281)
ConvToRPNIL.MarkLabel(tru281)
ConvToRPNIL.MarkSequencePoint(doc13, 175, 1, 175, 100)
ConvToRPNIL.Emit(OpCodes.Br, label5)
ConvToRPNIL.MarkSequencePoint(doc13, 176, 1, 176, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont281)
ConvToRPNIL.MarkLabel(fa281)
ConvToRPNIL.Emit(OpCodes.Br, cont281)
ConvToRPNIL.MarkLabel(cont281)
ConvToRPNIL.MarkSequencePoint(doc13, 178, 1, 178, 100)
ConvToRPNIL.MarkLabel(label4)
ConvToRPNIL.MarkSequencePoint(doc13, 180, 1, 180, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("TopOp", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 6)
ConvToRPNIL.MarkSequencePoint(doc13, 181, 1, 181, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ45(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
ReDim Preserve typ45(UBound(typ45) + 1)
typ45(UBound(typ45)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, isLParen)
Typ = isLParen.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc13, 183, 1, 183, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa282 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru282 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont282 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru282)
ConvToRPNIL.Emit(OpCodes.Br, fa282)
ConvToRPNIL.MarkLabel(tru282)
ConvToRPNIL.MarkSequencePoint(doc13, 184, 1, 184, 100)
Dim typ46(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Expr)
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
ReDim Preserve typ46(UBound(typ46) + 1)
typ46(UBound(typ46)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ46))
Typ = Typ03.GetMethod("AddToken", typ46).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc13, 185, 1, 185, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont282)
ConvToRPNIL.MarkLabel(fa282)
ConvToRPNIL.Emit(OpCodes.Br, cont282)
ConvToRPNIL.MarkLabel(cont282)
ConvToRPNIL.MarkSequencePoint(doc13, 187, 1, 187, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("PopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("PopOp", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc13, 189, 1, 189, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("getLength", Type.EmptyTypes))
Typ = Typ03.GetMethod("getLength", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 3)
ConvToRPNIL.MarkSequencePoint(doc13, 190, 1, 190, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa283 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru283 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont283 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru283)
ConvToRPNIL.Emit(OpCodes.Br, fa283)
ConvToRPNIL.MarkLabel(tru283)
ConvToRPNIL.MarkSequencePoint(doc13, 191, 1, 191, 100)
ConvToRPNIL.Emit(OpCodes.Br, label5)
ConvToRPNIL.MarkSequencePoint(doc13, 192, 1, 192, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont283)
ConvToRPNIL.MarkLabel(fa283)
ConvToRPNIL.MarkSequencePoint(doc13, 193, 1, 193, 100)
ConvToRPNIL.Emit(OpCodes.Br, label4)
ConvToRPNIL.MarkSequencePoint(doc13, 194, 1, 194, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont283)
ConvToRPNIL.MarkLabel(cont283)
ConvToRPNIL.MarkSequencePoint(doc13, 196, 1, 196, 100)
ConvToRPNIL.MarkLabel(label5)
ConvToRPNIL.MarkSequencePoint(doc13, 198, 1, 198, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Expr)
ConvToRPNIL.MarkSequencePoint(doc13, 200, 1, 200, 100)
ConvToRPNIL.Emit(OpCodes.Ret)
Dim typ49(-1) As Type
ReDim Preserve typ49(UBound(typ49) + 1)
typ49(UBound(typ49)) = GetType(Expr)
Dim ConvToAST As MethodBuilder = Evaluator.DefineMethod("ConvToAST", MethodAttributes.Public, GetType(Expr), typ49)
Dim ConvToASTIL As ILGenerator = ConvToAST.GetILGenerator()
Dim ConvToASTparam01 As ParameterBuilder = ConvToAST.DefineParameter(1, ParameterAttributes.None, "exp")
ConvToASTIL.MarkSequencePoint(doc13, 204, 1, 204, 100)
Dim locbldr279 As LocalBuilder = ConvToASTIL.DeclareLocal(GetType(Token))
locbldr279.SetLocalSymInfo("tokf")
ConvToASTIL.MarkSequencePoint(doc13, 205, 1, 205, 100)
Dim locbldr280 As LocalBuilder = ConvToASTIL.DeclareLocal(GetType(System.Int32))
locbldr280.SetLocalSymInfo("i")
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Stloc, 1)
ConvToASTIL.MarkSequencePoint(doc13, 206, 1, 206, 100)
Dim locbldr281 As LocalBuilder = ConvToASTIL.DeclareLocal(GetType(System.Int32))
locbldr281.SetLocalSymInfo("j")
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Stloc, 2)
ConvToASTIL.MarkSequencePoint(doc13, 207, 1, 207, 100)
Dim locbldr282 As LocalBuilder = ConvToASTIL.DeclareLocal(GetType(System.Int32))
locbldr282.SetLocalSymInfo("len")
ConvToASTIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToASTIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
ConvToASTIL.Emit(OpCodes.Ldlen)
ConvToASTIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Stloc, 3)
ConvToASTIL.MarkSequencePoint(doc13, 208, 1, 208, 100)
Dim locbldr283 As LocalBuilder = ConvToASTIL.DeclareLocal(GetType(Token))
locbldr283.SetLocalSymInfo("tok")
ConvToASTIL.Emit(OpCodes.Ldnull)
ConvToASTIL.Emit(OpCodes.Stloc, 4)
ConvToASTIL.MarkSequencePoint(doc13, 209, 1, 209, 100)
Dim locbldr284 As LocalBuilder = ConvToASTIL.DeclareLocal(GetType(Token))
locbldr284.SetLocalSymInfo("tok2")
ConvToASTIL.Emit(OpCodes.Ldnull)
ConvToASTIL.Emit(OpCodes.Stloc, 5)
ConvToASTIL.MarkSequencePoint(doc13, 210, 1, 210, 100)
Dim locbldr285 As LocalBuilder = ConvToASTIL.DeclareLocal(GetType(System.Type))
locbldr285.SetLocalSymInfo("typ")
ConvToASTIL.Emit(OpCodes.Ldnull)
ConvToASTIL.Emit(OpCodes.Stloc, 6)
ConvToASTIL.MarkSequencePoint(doc13, 211, 1, 211, 100)
Dim locbldr286 As LocalBuilder = ConvToASTIL.DeclareLocal(GetType(System.Boolean))
locbldr286.SetLocalSymInfo("b")
ConvToASTIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ConvToASTIL.Emit(OpCodes.Stloc, 7)
ConvToASTIL.MarkSequencePoint(doc13, 212, 1, 212, 100)
Dim locbldr287 As LocalBuilder = ConvToASTIL.DeclareLocal(GetType(Op))
locbldr287.SetLocalSymInfo("optok")
ConvToASTIL.MarkSequencePoint(doc13, 214, 1, 214, 100)
Dim label6 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
ConvToASTIL.MarkSequencePoint(doc13, 215, 1, 215, 100)
Dim label7 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
ConvToASTIL.MarkSequencePoint(doc13, 216, 1, 216, 100)
Dim label8 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
ConvToASTIL.MarkSequencePoint(doc13, 218, 1, 218, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
Dim fa284 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
Dim tru284 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
Dim cont284 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
ConvToASTIL.Emit(OpCodes.Beq, tru284)
ConvToASTIL.Emit(OpCodes.Br, fa284)
ConvToASTIL.MarkLabel(tru284)
ConvToASTIL.MarkSequencePoint(doc13, 219, 1, 219, 100)
ConvToASTIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToASTIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ConvToASTIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ConvToASTIL.Emit(OpCodes.Stloc, 0)
ConvToASTIL.MarkSequencePoint(doc13, 220, 1, 220, 100)
ConvToASTIL.Emit(OpCodes.Br, label6)
ConvToASTIL.MarkSequencePoint(doc13, 221, 1, 221, 100)
ConvToASTIL.Emit(OpCodes.Br, cont284)
ConvToASTIL.MarkLabel(fa284)
ConvToASTIL.Emit(OpCodes.Br, cont284)
ConvToASTIL.MarkLabel(cont284)
ConvToASTIL.MarkSequencePoint(doc13, 223, 1, 223, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Sub)
ConvToASTIL.Emit(OpCodes.Stloc, 3)
ConvToASTIL.MarkSequencePoint(doc13, 225, 1, 225, 100)
ConvToASTIL.MarkLabel(label7)
ConvToASTIL.MarkSequencePoint(doc13, 227, 1, 227, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Add)
ConvToASTIL.Emit(OpCodes.Stloc, 1)
ConvToASTIL.MarkSequencePoint(doc13, 229, 1, 229, 100)
ConvToASTIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToASTIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
ConvToASTIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ConvToASTIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ConvToASTIL.Emit(OpCodes.Stloc, 4)
ConvToASTIL.MarkSequencePoint(doc13, 231, 1, 231, 100)
ConvToASTIL.Emit(OpCodes.Ldarg_0)
Dim typ50(-1) As Type
ConvToASTIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(Token)
ReDim Preserve typ50(UBound(typ50) + 1)
typ50(UBound(typ50)) = Typ
ConvToASTIL.Emit(OpCodes.Callvirt, isOp)
Typ = isOp.ReturnType
ConvToASTIL.Emit(OpCodes.Stloc, 7)
ConvToASTIL.MarkSequencePoint(doc13, 233, 1, 233, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ConvToASTIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa285 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
Dim tru285 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
Dim cont285 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
ConvToASTIL.Emit(OpCodes.Beq, tru285)
ConvToASTIL.Emit(OpCodes.Br, fa285)
ConvToASTIL.MarkLabel(tru285)
ConvToASTIL.MarkSequencePoint(doc13, 234, 1, 234, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
Dim fa286 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
Dim tru286 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
Dim cont286 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
ConvToASTIL.Emit(OpCodes.Bge, tru286)
ConvToASTIL.Emit(OpCodes.Br, fa286)
ConvToASTIL.MarkLabel(tru286)
ConvToASTIL.MarkSequencePoint(doc13, 235, 1, 235, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(Token)
ConvToASTIL.Emit(OpCodes.Stloc, 8)
ConvToASTIL.MarkSequencePoint(doc13, 237, 1, 237, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Sub)
ConvToASTIL.Emit(OpCodes.Stloc, 2)
ConvToASTIL.MarkSequencePoint(doc13, 238, 1, 238, 100)
ConvToASTIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToASTIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
ConvToASTIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ConvToASTIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ConvToASTIL.Emit(OpCodes.Stloc, 5)
ConvToASTIL.MarkSequencePoint(doc13, 239, 1, 239, 100)
Dim typ51(-1) As Type
ConvToASTIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
ConvToASTIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
ReDim Preserve typ51(UBound(typ51) + 1)
typ51(UBound(typ51)) = Typ
ConvToASTIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ51))
Typ = Typ03.GetMethod("RemToken", typ51).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToASTIL.Emit(OpCodes.Pop)
End If
ConvToASTIL.MarkSequencePoint(doc13, 240, 1, 240, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Sub)
ConvToASTIL.Emit(OpCodes.Stloc, 3)
ConvToASTIL.MarkSequencePoint(doc13, 241, 1, 241, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Sub)
ConvToASTIL.Emit(OpCodes.Stloc, 2)
ConvToASTIL.MarkSequencePoint(doc13, 242, 1, 242, 100)
ConvToASTIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToASTIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
ConvToASTIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ConvToASTIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ConvToASTIL.Emit(OpCodes.Stloc, 4)
ConvToASTIL.MarkSequencePoint(doc13, 243, 1, 243, 100)
Dim typ52(-1) As Type
ConvToASTIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
ConvToASTIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
ReDim Preserve typ52(UBound(typ52) + 1)
typ52(UBound(typ52)) = Typ
ConvToASTIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ52))
Typ = Typ03.GetMethod("RemToken", typ52).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToASTIL.Emit(OpCodes.Pop)
End If
ConvToASTIL.MarkSequencePoint(doc13, 244, 1, 244, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Sub)
ConvToASTIL.Emit(OpCodes.Stloc, 3)
ConvToASTIL.MarkSequencePoint(doc13, 245, 1, 245, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(Op)
ConvToASTIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(Token)
ConvToASTIL.Emit(OpCodes.Stfld, GetType(Op).GetField("LChild"))
ConvToASTIL.MarkSequencePoint(doc13, 246, 1, 246, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(Op)
ConvToASTIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ConvToASTIL.Emit(OpCodes.Stfld, GetType(Op).GetField("RChild"))
ConvToASTIL.MarkSequencePoint(doc13, 247, 1, 247, 100)
ConvToASTIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToASTIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
ConvToASTIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Conv_U)
Typ = Typ02
Typ02 = Typ
ConvToASTIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(Op)
Typ = Typ02
ConvToASTIL.Emit(OpCodes.Stelem, Typ.GetElementType())
ConvToASTIL.MarkSequencePoint(doc13, 248, 1, 248, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Stloc, 1)
ConvToASTIL.MarkSequencePoint(doc13, 249, 1, 249, 100)
ConvToASTIL.Emit(OpCodes.Br, cont286)
ConvToASTIL.MarkLabel(fa286)
ConvToASTIL.Emit(OpCodes.Br, cont286)
ConvToASTIL.MarkLabel(cont286)
ConvToASTIL.MarkSequencePoint(doc13, 250, 1, 250, 100)
ConvToASTIL.Emit(OpCodes.Br, label8)
ConvToASTIL.MarkSequencePoint(doc13, 251, 1, 251, 100)
ConvToASTIL.Emit(OpCodes.Br, cont285)
ConvToASTIL.MarkLabel(fa285)
ConvToASTIL.Emit(OpCodes.Br, cont285)
ConvToASTIL.MarkLabel(cont285)
ConvToASTIL.MarkSequencePoint(doc13, 253, 1, 253, 100)
ConvToASTIL.MarkLabel(label8)
ConvToASTIL.MarkSequencePoint(doc13, 255, 1, 255, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
Dim fa287 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
Dim tru287 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
Dim cont287 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
ConvToASTIL.Emit(OpCodes.Beq, tru287)
ConvToASTIL.Emit(OpCodes.Br, fa287)
ConvToASTIL.MarkLabel(tru287)
ConvToASTIL.MarkSequencePoint(doc13, 256, 1, 256, 100)
ConvToASTIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToASTIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ConvToASTIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ConvToASTIL.Emit(OpCodes.Stloc, 0)
ConvToASTIL.MarkSequencePoint(doc13, 257, 1, 257, 100)
ConvToASTIL.Emit(OpCodes.Br, label6)
ConvToASTIL.MarkSequencePoint(doc13, 258, 1, 258, 100)
ConvToASTIL.Emit(OpCodes.Br, cont287)
ConvToASTIL.MarkLabel(fa287)
ConvToASTIL.MarkSequencePoint(doc13, 259, 1, 259, 100)
ConvToASTIL.Emit(OpCodes.Br, label7)
ConvToASTIL.MarkSequencePoint(doc13, 260, 1, 260, 100)
ConvToASTIL.Emit(OpCodes.Br, cont287)
ConvToASTIL.MarkLabel(cont287)
ConvToASTIL.MarkSequencePoint(doc13, 262, 1, 262, 100)
ConvToASTIL.MarkLabel(label6)
ConvToASTIL.MarkSequencePoint(doc13, 264, 1, 264, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
ConvToASTIL.MarkSequencePoint(doc13, 266, 1, 266, 100)
ConvToASTIL.Emit(OpCodes.Ret)
Dim typ53(-1) As Type
ReDim Preserve typ53(UBound(typ53) + 1)
typ53(UBound(typ53)) = GetType(Token)
ReDim Preserve typ53(UBound(typ53) + 1)
typ53(UBound(typ53)) = GetType(System.Boolean)
Dim ASTEmit As MethodBuilder = Evaluator.DefineMethod("ASTEmit", MethodAttributes.Public, GetType(System.Void), typ53)
Dim ASTEmitIL As ILGenerator = ASTEmit.GetILGenerator()
Dim ASTEmitparam01 As ParameterBuilder = ASTEmit.DefineParameter(1, ParameterAttributes.None, "tok")
Dim ASTEmitparam02 As ParameterBuilder = ASTEmit.DefineParameter(2, ParameterAttributes.None, "emt")
ASTEmitIL.MarkSequencePoint(doc13, 270, 1, 270, 100)
Dim locbldr288 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr288.SetLocalSymInfo("isop")
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ54(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ReDim Preserve typ54(UBound(typ54) + 1)
typ54(UBound(typ54)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, isOp)
Typ = isOp.ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 0)
ASTEmitIL.MarkSequencePoint(doc13, 271, 1, 271, 100)
Dim locbldr289 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Op))
locbldr289.SetLocalSymInfo("optok")
ASTEmitIL.Emit(OpCodes.Newobj, GetType(Op).GetConstructor(Type.EmptyTypes))
ASTEmitIL.Emit(OpCodes.Stloc, 1)
ASTEmitIL.MarkSequencePoint(doc13, 272, 1, 272, 100)
Dim locbldr290 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Token))
locbldr290.SetLocalSymInfo("rc")
ASTEmitIL.Emit(OpCodes.Newobj, GetType(Token).GetConstructor(Type.EmptyTypes))
ASTEmitIL.Emit(OpCodes.Stloc, 2)
ASTEmitIL.MarkSequencePoint(doc13, 273, 1, 273, 100)
Dim locbldr291 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Token))
locbldr291.SetLocalSymInfo("lc")
ASTEmitIL.Emit(OpCodes.Newobj, GetType(Token).GetConstructor(Type.EmptyTypes))
ASTEmitIL.Emit(OpCodes.Stloc, 3)
ASTEmitIL.MarkSequencePoint(doc13, 274, 1, 274, 100)
Dim locbldr292 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Int32))
locbldr292.SetLocalSymInfo("lcint")
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 4)
ASTEmitIL.MarkSequencePoint(doc13, 275, 1, 275, 100)
Dim locbldr293 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Int32))
locbldr293.SetLocalSymInfo("rcint")
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 5)
ASTEmitIL.MarkSequencePoint(doc13, 276, 1, 276, 100)
Dim locbldr294 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Type))
locbldr294.SetLocalSymInfo("lctyp")
ASTEmitIL.Emit(OpCodes.Ldnull)
ASTEmitIL.Emit(OpCodes.Stloc, 6)
ASTEmitIL.MarkSequencePoint(doc13, 277, 1, 277, 100)
Dim locbldr295 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Type))
locbldr295.SetLocalSymInfo("rctyp")
ASTEmitIL.Emit(OpCodes.Ldnull)
ASTEmitIL.Emit(OpCodes.Stloc, 7)
ASTEmitIL.MarkSequencePoint(doc13, 278, 1, 278, 100)
Dim locbldr296 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Type))
locbldr296.SetLocalSymInfo("typ")
ASTEmitIL.MarkSequencePoint(doc13, 279, 1, 279, 100)
Dim locbldr297 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr297.SetLocalSymInfo("b")
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc13, 280, 1, 280, 100)
Dim locbldr298 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(TypeTok))
locbldr298.SetLocalSymInfo("tt")
ASTEmitIL.Emit(OpCodes.Ldnull)
ASTEmitIL.Emit(OpCodes.Stloc, 10)
ASTEmitIL.MarkSequencePoint(doc13, 281, 1, 281, 100)
Dim locbldr299 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Int32))
locbldr299.SetLocalSymInfo("i")
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc13, 282, 1, 282, 100)
Dim locbldr300 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Int32))
locbldr300.SetLocalSymInfo("j")
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 12)
ASTEmitIL.MarkSequencePoint(doc13, 283, 1, 283, 100)
Dim locbldr301 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Int32))
locbldr301.SetLocalSymInfo("len")
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 13)
ASTEmitIL.MarkSequencePoint(doc13, 284, 1, 284, 100)
Dim locbldr302 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr302.SetLocalSymInfo("instflg")
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 14)
ASTEmitIL.MarkSequencePoint(doc13, 285, 1, 285, 100)
Dim locbldr303 As LocalBuilder = ASTEmitIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr").MakeArrayType())
locbldr303.SetLocalSymInfo("tl1")
ASTEmitIL.MarkSequencePoint(doc13, 286, 1, 286, 100)
Dim locbldr304 As LocalBuilder = ASTEmitIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr").MakeArrayType())
locbldr304.SetLocalSymInfo("tl2")
ASTEmitIL.MarkSequencePoint(doc13, 287, 1, 287, 100)
Dim locbldr305 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.String))
locbldr305.SetLocalSymInfo("errstr")
ASTEmitIL.MarkSequencePoint(doc13, 289, 1, 289, 100)
Dim label9 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc13, 291, 1, 291, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa288 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru288 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont288 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru288)
ASTEmitIL.Emit(OpCodes.Br, fa288)
ASTEmitIL.MarkLabel(tru288)
ASTEmitIL.MarkSequencePoint(doc13, 293, 1, 293, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Stloc, 1)
ASTEmitIL.MarkSequencePoint(doc13, 294, 1, 294, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Op)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Op).GetField("RChild"))
Typ = GetType(Op).GetField("RChild").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 2)
ASTEmitIL.MarkSequencePoint(doc13, 295, 1, 295, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Op)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Op).GetField("LChild"))
Typ = GetType(Op).GetField("LChild").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 3)
ASTEmitIL.MarkSequencePoint(doc13, 296, 1, 296, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ55(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Token)
ReDim Preserve typ55(UBound(typ55) + 1)
typ55(UBound(typ55)) = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ReDim Preserve typ55(UBound(typ55) + 1)
typ55(UBound(typ55)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 297, 1, 297, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 6)
ASTEmitIL.MarkSequencePoint(doc13, 298, 1, 298, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ56(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Token)
ReDim Preserve typ56(UBound(typ56) + 1)
typ56(UBound(typ56)) = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ReDim Preserve typ56(UBound(typ56) + 1)
typ56(UBound(typ56)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 299, 1, 299, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 7)
ASTEmitIL.MarkSequencePoint(doc13, 301, 1, 301, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa289 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru289 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont289 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru289)
ASTEmitIL.Emit(OpCodes.Br, fa289)
ASTEmitIL.MarkLabel(tru289)
ASTEmitIL.MarkSequencePoint(doc13, 302, 1, 302, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(System.String))
Dim typ57 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ57))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ57).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc13, 303, 1, 303, 100)
Dim typ58(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
ReDim Preserve typ58(UBound(typ58) + 1)
typ58(UBound(typ58)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ58))
Typ = Typ03.GetMethod("Equals", typ58).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc13, 304, 1, 304, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetField("StringFlg"))
ASTEmitIL.MarkSequencePoint(doc13, 305, 1, 305, 100)
ASTEmitIL.Emit(OpCodes.Br, cont289)
ASTEmitIL.MarkLabel(fa289)
ASTEmitIL.Emit(OpCodes.Br, cont289)
ASTEmitIL.MarkLabel(cont289)
ASTEmitIL.MarkSequencePoint(doc13, 307, 1, 307, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa290 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru290 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont290 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru290)
ASTEmitIL.Emit(OpCodes.Br, fa290)
ASTEmitIL.MarkLabel(tru290)
ASTEmitIL.MarkSequencePoint(doc13, 308, 1, 308, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(System.Delegate))
Dim typ59 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ59))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ59).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc13, 309, 1, 309, 100)
Dim typ60(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Type)
ReDim Preserve typ60(UBound(typ60) + 1)
typ60(UBound(typ60)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ60))
Typ = Typ03.GetMethod("Equals", typ60).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc13, 310, 1, 310, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa291 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru291 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont291 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru291)
ASTEmitIL.Emit(OpCodes.Br, fa291)
ASTEmitIL.MarkLabel(tru291)
ASTEmitIL.MarkSequencePoint(doc13, 311, 1, 311, 100)
Dim typ61(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
ReDim Preserve typ61(UBound(typ61) + 1)
typ61(UBound(typ61)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsSubclassOf", typ61))
Typ = Typ03.GetMethod("IsSubclassOf", typ61).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc13, 312, 1, 312, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetField("DelegateFlg"))
ASTEmitIL.MarkSequencePoint(doc13, 313, 1, 313, 100)
ASTEmitIL.Emit(OpCodes.Br, cont291)
ASTEmitIL.MarkLabel(fa291)
ASTEmitIL.Emit(OpCodes.Br, cont291)
ASTEmitIL.MarkLabel(cont291)
ASTEmitIL.MarkSequencePoint(doc13, 314, 1, 314, 100)
ASTEmitIL.Emit(OpCodes.Br, cont290)
ASTEmitIL.MarkLabel(fa290)
ASTEmitIL.Emit(OpCodes.Br, cont290)
ASTEmitIL.MarkLabel(cont290)
ASTEmitIL.MarkSequencePoint(doc13, 316, 1, 316, 100)
Dim typ62(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Type)
ReDim Preserve typ62(UBound(typ62) + 1)
typ62(UBound(typ62)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ62))
Typ = Typ03.GetMethod("Equals", typ62).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc13, 317, 1, 317, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa292 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru292 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont292 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru292)
ASTEmitIL.Emit(OpCodes.Br, fa292)
ASTEmitIL.MarkLabel(tru292)
ASTEmitIL.MarkSequencePoint(doc13, 318, 1, 318, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsPrimitive", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsPrimitive", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetField("OpCodeSuppFlg"))
ASTEmitIL.MarkSequencePoint(doc13, 319, 1, 319, 100)
ASTEmitIL.Emit(OpCodes.Br, cont292)
ASTEmitIL.MarkLabel(fa292)
ASTEmitIL.MarkSequencePoint(doc13, 320, 1, 320, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetField("OpCodeSuppFlg"))
ASTEmitIL.MarkSequencePoint(doc13, 321, 1, 321, 100)
ASTEmitIL.Emit(OpCodes.Br, cont292)
ASTEmitIL.MarkLabel(cont292)
ASTEmitIL.MarkSequencePoint(doc13, 324, 1, 324, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(ConditionalOp))
Dim typ64 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ64))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ64).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc13, 325, 1, 325, 100)
Dim typ65(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Op)
ASTEmitIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ65(UBound(typ65) + 1)
typ65(UBound(typ65)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ65))
Typ = Typ03.GetMethod("IsInstanceOfType", typ65).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc13, 327, 1, 327, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa293 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru293 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont293 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru293)
ASTEmitIL.Emit(OpCodes.Br, fa293)
ASTEmitIL.MarkLabel(tru293)
ASTEmitIL.MarkSequencePoint(doc13, 328, 1, 328, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(System.Boolean))
Dim typ66 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ66))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ66).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 329, 1, 329, 100)
ASTEmitIL.Emit(OpCodes.Br, cont293)
ASTEmitIL.MarkLabel(fa293)
ASTEmitIL.MarkSequencePoint(doc13, 330, 1, 330, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Type)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 331, 1, 331, 100)
ASTEmitIL.Emit(OpCodes.Br, cont293)
ASTEmitIL.MarkLabel(cont293)
ASTEmitIL.MarkSequencePoint(doc13, 333, 1, 333, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa294 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru294 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont294 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru294)
ASTEmitIL.Emit(OpCodes.Br, fa294)
ASTEmitIL.MarkLabel(tru294)
ASTEmitIL.MarkSequencePoint(doc13, 334, 1, 334, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Type)
ASTEmitIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetField("LeftOp"))
ASTEmitIL.MarkSequencePoint(doc13, 335, 1, 335, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Type)
ASTEmitIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetField("RightOp"))
ASTEmitIL.MarkSequencePoint(doc13, 336, 1, 336, 100)
Dim typ67(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Op)
ReDim Preserve typ67(UBound(typ67) + 1)
typ67(UBound(typ67)) = Typ
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ67(UBound(typ67) + 1)
typ67(UBound(typ67)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitOp", typ67))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitOp", typ67).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 337, 1, 337, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetField("StringFlg"))
ASTEmitIL.MarkSequencePoint(doc13, 338, 1, 338, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetField("OpCodeSuppFlg"))
ASTEmitIL.MarkSequencePoint(doc13, 339, 1, 339, 100)
ASTEmitIL.Emit(OpCodes.Br, cont294)
ASTEmitIL.MarkLabel(fa294)
ASTEmitIL.Emit(OpCodes.Br, cont294)
ASTEmitIL.MarkLabel(cont294)
ASTEmitIL.MarkSequencePoint(doc13, 341, 1, 341, 100)
ASTEmitIL.Emit(OpCodes.Br, cont288)
ASTEmitIL.MarkLabel(fa288)
ASTEmitIL.MarkSequencePoint(doc13, 343, 1, 343, 100)
Dim locbldr306 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Type))
locbldr306.SetLocalSymInfo("src1")
ASTEmitIL.MarkSequencePoint(doc13, 344, 1, 344, 100)
Dim locbldr307 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Type))
locbldr307.SetLocalSymInfo("snk1")
ASTEmitIL.MarkSequencePoint(doc13, 346, 1, 346, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(StringLiteral))
Dim typ68 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ68))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ68).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc13, 347, 1, 347, 100)
Dim typ69(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ69(UBound(typ69) + 1)
typ69(UBound(typ69)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ69))
Typ = Typ03.GetMethod("IsInstanceOfType", typ69).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc13, 349, 1, 349, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa295 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru295 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont295 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru295)
ASTEmitIL.Emit(OpCodes.Br, fa295)
ASTEmitIL.MarkLabel(tru295)
ASTEmitIL.MarkSequencePoint(doc13, 350, 1, 350, 100)
Dim locbldr308 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(StringLiteral))
locbldr308.SetLocalSymInfo("slit")
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Stloc, 20)
ASTEmitIL.MarkSequencePoint(doc13, 352, 1, 352, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(StringLiteral)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(StringLiteral).GetField("LitTyp"))
Typ = GetType(StringLiteral).GetField("LitTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 10)
ASTEmitIL.MarkSequencePoint(doc13, 353, 1, 353, 100)
Dim typ70(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
ReDim Preserve typ70(UBound(typ70) + 1)
typ70(UBound(typ70)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ70))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ70).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 355, 1, 355, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa296 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru296 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont296 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru296)
ASTEmitIL.Emit(OpCodes.Br, fa296)
ASTEmitIL.MarkLabel(tru296)
ASTEmitIL.MarkSequencePoint(doc13, 356, 1, 356, 100)
Dim typ71(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(StringLiteral)
ReDim Preserve typ71(UBound(typ71) + 1)
typ71(UBound(typ71)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLiteral", typ71))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLiteral", typ71).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 357, 1, 357, 100)
ASTEmitIL.Emit(OpCodes.Br, cont296)
ASTEmitIL.MarkLabel(fa296)
ASTEmitIL.Emit(OpCodes.Br, cont296)
ASTEmitIL.MarkLabel(cont296)
ASTEmitIL.MarkSequencePoint(doc13, 359, 1, 359, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(StringLiteral)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(StringLiteral).GetField("MemberAccessFlg"))
Typ = GetType(StringLiteral).GetField("MemberAccessFlg").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa297 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru297 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont297 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru297)
ASTEmitIL.Emit(OpCodes.Br, fa297)
ASTEmitIL.MarkLabel(tru297)
ASTEmitIL.MarkSequencePoint(doc13, 360, 1, 360, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(ASMFactory).GetField("ChainFlg"))
ASTEmitIL.MarkSequencePoint(doc13, 361, 1, 361, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ72(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(StringLiteral)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(StringLiteral).GetField("MemberToAccess"))
Typ = GetType(StringLiteral).GetField("MemberToAccess").FieldType
ReDim Preserve typ72(UBound(typ72) + 1)
typ72(UBound(typ72)) = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ReDim Preserve typ72(UBound(typ72) + 1)
typ72(UBound(typ72)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 362, 1, 362, 100)
ASTEmitIL.Emit(OpCodes.Br, cont297)
ASTEmitIL.MarkLabel(fa297)
ASTEmitIL.Emit(OpCodes.Br, cont297)
ASTEmitIL.MarkLabel(cont297)
ASTEmitIL.MarkSequencePoint(doc13, 364, 1, 364, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(StringLiteral)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(StringLiteral).GetField("Conv"))
Typ = GetType(StringLiteral).GetField("Conv").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa298 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru298 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont298 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru298)
ASTEmitIL.Emit(OpCodes.Br, fa298)
ASTEmitIL.MarkLabel(tru298)
ASTEmitIL.MarkSequencePoint(doc13, 365, 1, 365, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa299 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru299 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont299 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru299)
ASTEmitIL.Emit(OpCodes.Br, fa299)
ASTEmitIL.MarkLabel(tru299)
ASTEmitIL.MarkSequencePoint(doc13, 366, 1, 366, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 18)
ASTEmitIL.MarkSequencePoint(doc13, 367, 1, 367, 100)
ASTEmitIL.Emit(OpCodes.Br, cont299)
ASTEmitIL.MarkLabel(fa299)
ASTEmitIL.Emit(OpCodes.Br, cont299)
ASTEmitIL.MarkLabel(cont299)
ASTEmitIL.MarkSequencePoint(doc13, 369, 1, 369, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(StringLiteral)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(StringLiteral).GetField("TTok"))
Typ = GetType(StringLiteral).GetField("TTok").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 10)
ASTEmitIL.MarkSequencePoint(doc13, 370, 1, 370, 100)
Dim typ73(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
ReDim Preserve typ73(UBound(typ73) + 1)
typ73(UBound(typ73)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ73))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ73).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 372, 1, 372, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa300 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru300 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont300 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru300)
ASTEmitIL.Emit(OpCodes.Br, fa300)
ASTEmitIL.MarkLabel(tru300)
ASTEmitIL.MarkSequencePoint(doc13, 373, 1, 373, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 19)
ASTEmitIL.MarkSequencePoint(doc13, 374, 1, 374, 100)
Dim typ74(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Type)
ReDim Preserve typ74(UBound(typ74) + 1)
typ74(UBound(typ74)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(System.Type)
ReDim Preserve typ74(UBound(typ74) + 1)
typ74(UBound(typ74)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitConv", typ74))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitConv", typ74).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 375, 1, 375, 100)
ASTEmitIL.Emit(OpCodes.Br, cont300)
ASTEmitIL.MarkLabel(fa300)
ASTEmitIL.Emit(OpCodes.Br, cont300)
ASTEmitIL.MarkLabel(cont300)
ASTEmitIL.MarkSequencePoint(doc13, 376, 1, 376, 100)
ASTEmitIL.Emit(OpCodes.Br, cont298)
ASTEmitIL.MarkLabel(fa298)
ASTEmitIL.Emit(OpCodes.Br, cont298)
ASTEmitIL.MarkLabel(cont298)
ASTEmitIL.MarkSequencePoint(doc13, 378, 1, 378, 100)
ASTEmitIL.Emit(OpCodes.Br, label9)
ASTEmitIL.MarkSequencePoint(doc13, 379, 1, 379, 100)
ASTEmitIL.Emit(OpCodes.Br, cont295)
ASTEmitIL.MarkLabel(fa295)
ASTEmitIL.Emit(OpCodes.Br, cont295)
ASTEmitIL.MarkLabel(cont295)
ASTEmitIL.MarkSequencePoint(doc13, 381, 1, 381, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(Literal))
Dim typ75 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ75))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ75).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc13, 382, 1, 382, 100)
Dim typ76(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ76(UBound(typ76) + 1)
typ76(UBound(typ76)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ76))
Typ = Typ03.GetMethod("IsInstanceOfType", typ76).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc13, 384, 1, 384, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa301 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru301 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont301 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru301)
ASTEmitIL.Emit(OpCodes.Br, fa301)
ASTEmitIL.MarkLabel(tru301)
ASTEmitIL.MarkSequencePoint(doc13, 385, 1, 385, 100)
Dim locbldr309 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Literal))
locbldr309.SetLocalSymInfo("lit")
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Stloc, 21)
ASTEmitIL.MarkSequencePoint(doc13, 387, 1, 387, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa302 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru302 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont302 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru302)
ASTEmitIL.Emit(OpCodes.Br, fa302)
ASTEmitIL.MarkLabel(tru302)
ASTEmitIL.MarkSequencePoint(doc13, 388, 1, 388, 100)
Dim typ77(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(Literal)
ReDim Preserve typ77(UBound(typ77) + 1)
typ77(UBound(typ77)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLiteral", typ77))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLiteral", typ77).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 389, 1, 389, 100)
ASTEmitIL.Emit(OpCodes.Br, cont302)
ASTEmitIL.MarkLabel(fa302)
ASTEmitIL.Emit(OpCodes.Br, cont302)
ASTEmitIL.MarkLabel(cont302)
ASTEmitIL.MarkSequencePoint(doc13, 391, 1, 391, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(Literal)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Literal).GetField("LitTyp"))
Typ = GetType(Literal).GetField("LitTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 10)
ASTEmitIL.MarkSequencePoint(doc13, 392, 1, 392, 100)
Dim typ78(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
ReDim Preserve typ78(UBound(typ78) + 1)
typ78(UBound(typ78)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ78))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ78).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 394, 1, 394, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(Literal)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Literal).GetField("Conv"))
Typ = GetType(Literal).GetField("Conv").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa303 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru303 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont303 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru303)
ASTEmitIL.Emit(OpCodes.Br, fa303)
ASTEmitIL.MarkLabel(tru303)
ASTEmitIL.MarkSequencePoint(doc13, 395, 1, 395, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa304 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru304 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont304 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru304)
ASTEmitIL.Emit(OpCodes.Br, fa304)
ASTEmitIL.MarkLabel(tru304)
ASTEmitIL.MarkSequencePoint(doc13, 396, 1, 396, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 18)
ASTEmitIL.MarkSequencePoint(doc13, 397, 1, 397, 100)
ASTEmitIL.Emit(OpCodes.Br, cont304)
ASTEmitIL.MarkLabel(fa304)
ASTEmitIL.Emit(OpCodes.Br, cont304)
ASTEmitIL.MarkLabel(cont304)
ASTEmitIL.MarkSequencePoint(doc13, 399, 1, 399, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(Literal)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Literal).GetField("TTok"))
Typ = GetType(Literal).GetField("TTok").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 10)
ASTEmitIL.MarkSequencePoint(doc13, 400, 1, 400, 100)
Dim typ79(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
ReDim Preserve typ79(UBound(typ79) + 1)
typ79(UBound(typ79)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ79))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ79).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 402, 1, 402, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa305 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru305 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont305 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru305)
ASTEmitIL.Emit(OpCodes.Br, fa305)
ASTEmitIL.MarkLabel(tru305)
ASTEmitIL.MarkSequencePoint(doc13, 403, 1, 403, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 19)
ASTEmitIL.MarkSequencePoint(doc13, 404, 1, 404, 100)
Dim typ80(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Type)
ReDim Preserve typ80(UBound(typ80) + 1)
typ80(UBound(typ80)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(System.Type)
ReDim Preserve typ80(UBound(typ80) + 1)
typ80(UBound(typ80)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitConv", typ80))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitConv", typ80).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 405, 1, 405, 100)
ASTEmitIL.Emit(OpCodes.Br, cont305)
ASTEmitIL.MarkLabel(fa305)
ASTEmitIL.Emit(OpCodes.Br, cont305)
ASTEmitIL.MarkLabel(cont305)
ASTEmitIL.MarkSequencePoint(doc13, 406, 1, 406, 100)
ASTEmitIL.Emit(OpCodes.Br, cont303)
ASTEmitIL.MarkLabel(fa303)
ASTEmitIL.Emit(OpCodes.Br, cont303)
ASTEmitIL.MarkLabel(cont303)
ASTEmitIL.MarkSequencePoint(doc13, 408, 1, 408, 100)
ASTEmitIL.Emit(OpCodes.Br, label9)
ASTEmitIL.MarkSequencePoint(doc13, 409, 1, 409, 100)
ASTEmitIL.Emit(OpCodes.Br, cont301)
ASTEmitIL.MarkLabel(fa301)
ASTEmitIL.Emit(OpCodes.Br, cont301)
ASTEmitIL.MarkLabel(cont301)
ASTEmitIL.MarkSequencePoint(doc13, 411, 1, 411, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(Ident))
Dim typ81 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ81))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ81).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc13, 412, 1, 412, 100)
Dim typ82(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ82(UBound(typ82) + 1)
typ82(UBound(typ82)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ82))
Typ = Typ03.GetMethod("IsInstanceOfType", typ82).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc13, 414, 1, 414, 100)
Dim locbldr310 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.String))
locbldr310.SetLocalSymInfo("idtnam")
ASTEmitIL.MarkSequencePoint(doc13, 415, 1, 415, 100)
Dim locbldr311 As LocalBuilder = ASTEmitIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"))
locbldr311.SetLocalSymInfo("vr")
ASTEmitIL.MarkSequencePoint(doc13, 416, 1, 416, 100)
Dim locbldr312 As LocalBuilder = ASTEmitIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
locbldr312.SetLocalSymInfo("fldr")
ASTEmitIL.MarkSequencePoint(doc13, 417, 1, 417, 100)
Dim locbldr313 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(FieldInfo))
locbldr313.SetLocalSymInfo("idtfldinf")
ASTEmitIL.MarkSequencePoint(doc13, 418, 1, 418, 100)
Dim locbldr314 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr314.SetLocalSymInfo("idtb1")
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 26)
ASTEmitIL.MarkSequencePoint(doc13, 419, 1, 419, 100)
Dim locbldr315 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr315.SetLocalSymInfo("idtb2")
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 27)
ASTEmitIL.MarkSequencePoint(doc13, 420, 1, 420, 100)
Dim locbldr316 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Ident))
locbldr316.SetLocalSymInfo("idt")
ASTEmitIL.MarkSequencePoint(doc13, 421, 1, 421, 100)
Dim locbldr317 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Int32))
locbldr317.SetLocalSymInfo("idtcomp")
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 29)
ASTEmitIL.MarkSequencePoint(doc13, 422, 1, 422, 100)
Dim locbldr318 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Type))
locbldr318.SetLocalSymInfo("idttyp")
ASTEmitIL.MarkSequencePoint(doc13, 423, 1, 423, 100)
Dim locbldr319 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr319.SetLocalSymInfo("idtisstatic")
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 31)
ASTEmitIL.MarkSequencePoint(doc13, 424, 1, 424, 100)
Dim locbldr320 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Expr))
locbldr320.SetLocalSymInfo("arrlocexpr")
ASTEmitIL.MarkSequencePoint(doc13, 425, 1, 425, 100)
Dim locbldr321 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Ident))
locbldr321.SetLocalSymInfo("idtarrloc")
ASTEmitIL.MarkSequencePoint(doc13, 426, 1, 426, 100)
Dim locbldr322 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.String).MakeArrayType())
locbldr322.SetLocalSymInfo("idtnamarr")
ASTEmitIL.MarkSequencePoint(doc13, 429, 1, 429, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa306 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru306 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont306 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru306)
ASTEmitIL.Emit(OpCodes.Br, fa306)
ASTEmitIL.MarkLabel(tru306)
ASTEmitIL.MarkSequencePoint(doc13, 430, 1, 430, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Stloc, 28)
ASTEmitIL.MarkSequencePoint(doc13, 431, 1, 431, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(Ident)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 22)
ASTEmitIL.MarkSequencePoint(doc13, 432, 1, 432, 100)
Dim typ83(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(System.String)
ReDim Preserve typ83(UBound(typ83) + 1)
typ83(UBound(typ83)) = Typ
ASTEmitIL.Emit(OpCodes.Ldstr, ":")
Typ = GetType(System.String)
ReDim Preserve typ83(UBound(typ83) + 1)
typ83(UBound(typ83)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ParseUtils).GetMethod("StringParser", typ83))
Typ = GetType(ParseUtils).GetMethod("StringParser", typ83).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 34)
ASTEmitIL.MarkSequencePoint(doc13, 433, 1, 433, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc13, 434, 1, 434, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 34)
Typ = GetType(System.String).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Sub)
ASTEmitIL.Emit(OpCodes.Stloc, 13)
ASTEmitIL.MarkSequencePoint(doc13, 436, 1, 436, 100)
Dim typ84(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 34)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ84(UBound(typ84) + 1)
typ84(UBound(typ84)) = Typ
ASTEmitIL.Emit(OpCodes.Ldstr, "me")
Typ = GetType(System.String)
ReDim Preserve typ84(UBound(typ84) + 1)
typ84(UBound(typ84)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ84))
Typ = GetType(String).GetMethod("Compare", typ84).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 29)
ASTEmitIL.MarkSequencePoint(doc13, 437, 1, 437, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 29)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa307 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru307 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont307 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru307)
ASTEmitIL.Emit(OpCodes.Br, fa307)
ASTEmitIL.MarkLabel(tru307)
ASTEmitIL.MarkSequencePoint(doc13, 438, 1, 438, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Add)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc13, 439, 1, 439, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 26)
ASTEmitIL.MarkSequencePoint(doc13, 440, 1, 440, 100)
ASTEmitIL.Emit(OpCodes.Br, cont307)
ASTEmitIL.MarkLabel(fa307)
ASTEmitIL.Emit(OpCodes.Br, cont307)
ASTEmitIL.MarkLabel(cont307)
ASTEmitIL.MarkSequencePoint(doc13, 442, 1, 442, 100)
Dim label10 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc13, 443, 1, 443, 100)
Dim label11 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc13, 444, 1, 444, 100)
Dim label12 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc13, 446, 1, 446, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("ChainFlg"))
Typ = GetType(AsmFactory).GetField("ChainFlg").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa308 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru308 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont308 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru308)
ASTEmitIL.Emit(OpCodes.Br, fa308)
ASTEmitIL.MarkLabel(tru308)
ASTEmitIL.MarkSequencePoint(doc13, 447, 1, 447, 100)
ASTEmitIL.Emit(OpCodes.Br, cont308)
ASTEmitIL.MarkLabel(fa308)
ASTEmitIL.MarkSequencePoint(doc13, 448, 1, 448, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("ChainFlg"))
ASTEmitIL.MarkSequencePoint(doc13, 449, 1, 449, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc13, 450, 1, 450, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 27)
ASTEmitIL.MarkSequencePoint(doc13, 451, 1, 451, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 31)
ASTEmitIL.MarkSequencePoint(doc13, 452, 1, 452, 100)
ASTEmitIL.Emit(OpCodes.Br, cont308)
ASTEmitIL.MarkLabel(cont308)
ASTEmitIL.MarkSequencePoint(doc13, 454, 1, 454, 100)
ASTEmitIL.MarkLabel(label10)
ASTEmitIL.MarkSequencePoint(doc13, 455, 1, 455, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Add)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc13, 457, 1, 457, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(System.Int32)
Dim fa309 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru309 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont309 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, fa309)
ASTEmitIL.Emit(OpCodes.Br, tru309)
ASTEmitIL.MarkLabel(tru309)
ASTEmitIL.MarkSequencePoint(doc13, 458, 1, 458, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AddrFlg"))
ASTEmitIL.MarkSequencePoint(doc13, 459, 1, 459, 100)
ASTEmitIL.Emit(OpCodes.Br, cont309)
ASTEmitIL.MarkLabel(fa309)
ASTEmitIL.MarkSequencePoint(doc13, 460, 1, 460, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AddrFlg"))
ASTEmitIL.MarkSequencePoint(doc13, 461, 1, 461, 100)
ASTEmitIL.Emit(OpCodes.Br, cont309)
ASTEmitIL.MarkLabel(cont309)
ASTEmitIL.MarkSequencePoint(doc13, 463, 1, 463, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 27)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa310 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru310 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont310 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru310)
ASTEmitIL.Emit(OpCodes.Br, fa310)
ASTEmitIL.MarkLabel(tru310)
ASTEmitIL.MarkSequencePoint(doc13, 465, 1, 465, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 26)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa311 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru311 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont311 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru311)
ASTEmitIL.Emit(OpCodes.Br, fa311)
ASTEmitIL.MarkLabel(tru311)
ASTEmitIL.MarkSequencePoint(doc13, 466, 1, 466, 100)
Dim typ85(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 34)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ85(UBound(typ85) + 1)
typ85(UBound(typ85)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindVar", typ85))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindVar", typ85).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 23)
ASTEmitIL.MarkSequencePoint(doc13, 467, 1, 467, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 23)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldnull)
Dim fa312 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru312 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont312 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, fa312)
ASTEmitIL.Emit(OpCodes.Br, tru312)
ASTEmitIL.MarkLabel(tru312)
ASTEmitIL.MarkSequencePoint(doc13, 468, 1, 468, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa313 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru313 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont313 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru313)
ASTEmitIL.Emit(OpCodes.Br, fa313)
ASTEmitIL.MarkLabel(tru313)
ASTEmitIL.MarkSequencePoint(doc13, 469, 1, 469, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 23)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
ASTEmitIL.MarkSequencePoint(doc13, 470, 1, 470, 100)
Dim typ86(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 23)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("Index"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("Index").FieldType
ReDim Preserve typ86(UBound(typ86) + 1)
typ86(UBound(typ86)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 23)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("LocArg"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("LocArg").FieldType
ReDim Preserve typ86(UBound(typ86) + 1)
typ86(UBound(typ86)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLocLd", typ86))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLocLd", typ86).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 471, 1, 471, 100)
ASTEmitIL.Emit(OpCodes.Br, cont313)
ASTEmitIL.MarkLabel(fa313)
ASTEmitIL.Emit(OpCodes.Br, cont313)
ASTEmitIL.MarkLabel(cont313)
ASTEmitIL.MarkSequencePoint(doc13, 472, 1, 472, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 23)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 473, 1, 473, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 23)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc13, 474, 1, 474, 100)
ASTEmitIL.Emit(OpCodes.Br, label12)
ASTEmitIL.MarkSequencePoint(doc13, 475, 1, 475, 100)
ASTEmitIL.Emit(OpCodes.Br, cont312)
ASTEmitIL.MarkLabel(fa312)
ASTEmitIL.MarkSequencePoint(doc13, 477, 1, 477, 100)
Dim typ87(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 34)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ87(UBound(typ87) + 1)
typ87(UBound(typ87)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ87))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ87).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 25)
ASTEmitIL.MarkSequencePoint(doc13, 479, 1, 479, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(FieldInfo)
ASTEmitIL.Emit(OpCodes.Ldnull)
Dim fa314 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru314 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont314 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, fa314)
ASTEmitIL.Emit(OpCodes.Br, tru314)
ASTEmitIL.MarkLabel(tru314)
ASTEmitIL.MarkSequencePoint(doc13, 480, 1, 480, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsStatic", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsStatic", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 31)
ASTEmitIL.MarkSequencePoint(doc13, 481, 1, 481, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa315 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru315 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont315 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru315)
ASTEmitIL.Emit(OpCodes.Br, fa315)
ASTEmitIL.MarkLabel(tru315)
ASTEmitIL.MarkSequencePoint(doc13, 482, 1, 482, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa316 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru316 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont316 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru316)
ASTEmitIL.Emit(OpCodes.Br, fa316)
ASTEmitIL.MarkLabel(tru316)
ASTEmitIL.MarkSequencePoint(doc13, 483, 1, 483, 100)
Dim typ89(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReDim Preserve typ89(UBound(typ89) + 1)
typ89(UBound(typ89)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdarg", typ89))
Typ = GetType(ILEmitter).GetMethod("EmitLdarg", typ89).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 484, 1, 484, 100)
ASTEmitIL.Emit(OpCodes.Br, cont316)
ASTEmitIL.MarkLabel(fa316)
ASTEmitIL.Emit(OpCodes.Br, cont316)
ASTEmitIL.MarkLabel(cont316)
ASTEmitIL.MarkSequencePoint(doc13, 485, 1, 485, 100)
ASTEmitIL.Emit(OpCodes.Br, cont315)
ASTEmitIL.MarkLabel(fa315)
ASTEmitIL.Emit(OpCodes.Br, cont315)
ASTEmitIL.MarkLabel(cont315)
ASTEmitIL.MarkSequencePoint(doc13, 486, 1, 486, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa317 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru317 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont317 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru317)
ASTEmitIL.Emit(OpCodes.Br, fa317)
ASTEmitIL.MarkLabel(tru317)
ASTEmitIL.MarkSequencePoint(doc13, 487, 1, 487, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
ASTEmitIL.MarkSequencePoint(doc13, 488, 1, 488, 100)
Dim typ91(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(FieldInfo)
ReDim Preserve typ91(UBound(typ91) + 1)
typ91(UBound(typ91)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.Boolean)
ReDim Preserve typ91(UBound(typ91) + 1)
typ91(UBound(typ91)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ91))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ91).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 489, 1, 489, 100)
ASTEmitIL.Emit(OpCodes.Br, cont317)
ASTEmitIL.MarkLabel(fa317)
ASTEmitIL.Emit(OpCodes.Br, cont317)
ASTEmitIL.MarkLabel(cont317)
ASTEmitIL.MarkSequencePoint(doc13, 490, 1, 490, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 491, 1, 491, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc13, 492, 1, 492, 100)
ASTEmitIL.Emit(OpCodes.Br, label12)
ASTEmitIL.MarkSequencePoint(doc13, 493, 1, 493, 100)
ASTEmitIL.Emit(OpCodes.Br, cont314)
ASTEmitIL.MarkLabel(fa314)
ASTEmitIL.Emit(OpCodes.Br, cont314)
ASTEmitIL.MarkLabel(cont314)
ASTEmitIL.MarkSequencePoint(doc13, 494, 1, 494, 100)
ASTEmitIL.Emit(OpCodes.Br, cont312)
ASTEmitIL.MarkLabel(cont312)
ASTEmitIL.MarkSequencePoint(doc13, 496, 1, 496, 100)
ASTEmitIL.Emit(OpCodes.Br, cont311)
ASTEmitIL.MarkLabel(fa311)
ASTEmitIL.MarkSequencePoint(doc13, 498, 1, 498, 100)
Dim typ94(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 34)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ94(UBound(typ94) + 1)
typ94(UBound(typ94)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ94))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ94).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 25)
ASTEmitIL.MarkSequencePoint(doc13, 500, 1, 500, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(FieldInfo)
ASTEmitIL.Emit(OpCodes.Ldnull)
Dim fa318 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru318 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont318 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, fa318)
ASTEmitIL.Emit(OpCodes.Br, tru318)
ASTEmitIL.MarkLabel(tru318)
ASTEmitIL.MarkSequencePoint(doc13, 501, 1, 501, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsStatic", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsStatic", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 31)
ASTEmitIL.MarkSequencePoint(doc13, 502, 1, 502, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa319 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru319 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont319 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru319)
ASTEmitIL.Emit(OpCodes.Br, fa319)
ASTEmitIL.MarkLabel(tru319)
ASTEmitIL.MarkSequencePoint(doc13, 503, 1, 503, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa320 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru320 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont320 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru320)
ASTEmitIL.Emit(OpCodes.Br, fa320)
ASTEmitIL.MarkLabel(tru320)
ASTEmitIL.MarkSequencePoint(doc13, 504, 1, 504, 100)
Dim typ96(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReDim Preserve typ96(UBound(typ96) + 1)
typ96(UBound(typ96)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdarg", typ96))
Typ = GetType(ILEmitter).GetMethod("EmitLdarg", typ96).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 505, 1, 505, 100)
ASTEmitIL.Emit(OpCodes.Br, cont320)
ASTEmitIL.MarkLabel(fa320)
ASTEmitIL.Emit(OpCodes.Br, cont320)
ASTEmitIL.MarkLabel(cont320)
ASTEmitIL.MarkSequencePoint(doc13, 506, 1, 506, 100)
ASTEmitIL.Emit(OpCodes.Br, cont319)
ASTEmitIL.MarkLabel(fa319)
ASTEmitIL.Emit(OpCodes.Br, cont319)
ASTEmitIL.MarkLabel(cont319)
ASTEmitIL.MarkSequencePoint(doc13, 507, 1, 507, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa321 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru321 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont321 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru321)
ASTEmitIL.Emit(OpCodes.Br, fa321)
ASTEmitIL.MarkLabel(tru321)
ASTEmitIL.MarkSequencePoint(doc13, 508, 1, 508, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
ASTEmitIL.MarkSequencePoint(doc13, 509, 1, 509, 100)
Dim typ98(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(FieldInfo)
ReDim Preserve typ98(UBound(typ98) + 1)
typ98(UBound(typ98)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.Boolean)
ReDim Preserve typ98(UBound(typ98) + 1)
typ98(UBound(typ98)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ98))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ98).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 510, 1, 510, 100)
ASTEmitIL.Emit(OpCodes.Br, cont321)
ASTEmitIL.MarkLabel(fa321)
ASTEmitIL.Emit(OpCodes.Br, cont321)
ASTEmitIL.MarkLabel(cont321)
ASTEmitIL.MarkSequencePoint(doc13, 511, 1, 511, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 512, 1, 512, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc13, 513, 1, 513, 100)
ASTEmitIL.Emit(OpCodes.Br, label12)
ASTEmitIL.MarkSequencePoint(doc13, 514, 1, 514, 100)
ASTEmitIL.Emit(OpCodes.Br, cont318)
ASTEmitIL.MarkLabel(fa318)
ASTEmitIL.Emit(OpCodes.Br, cont318)
ASTEmitIL.MarkLabel(cont318)
ASTEmitIL.MarkSequencePoint(doc13, 515, 1, 515, 100)
ASTEmitIL.Emit(OpCodes.Br, cont311)
ASTEmitIL.MarkLabel(cont311)
ASTEmitIL.MarkSequencePoint(doc13, 517, 1, 517, 100)
Dim typ101(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 34)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ101(UBound(typ101) + 1)
typ101(UBound(typ101)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadClass", typ101))
Typ = GetType(Loader).GetMethod("LoadClass", typ101).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc13, 518, 1, 518, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 31)
ASTEmitIL.MarkSequencePoint(doc13, 520, 1, 520, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
ASTEmitIL.Emit(OpCodes.Ldnull)
Dim fa322 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru322 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont322 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru322)
ASTEmitIL.Emit(OpCodes.Br, fa322)
ASTEmitIL.MarkLabel(tru322)
ASTEmitIL.MarkSequencePoint(doc13, 521, 1, 521, 100)
Dim typ102(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldstr, "Variable or Class '")
Typ = GetType(System.String)
ReDim Preserve typ102(UBound(typ102) + 1)
typ102(UBound(typ102)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 34)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ102(UBound(typ102) + 1)
typ102(UBound(typ102)) = Typ
ASTEmitIL.Emit(OpCodes.Ldstr, "' is not defined.")
Typ = GetType(System.String)
ReDim Preserve typ102(UBound(typ102) + 1)
typ102(UBound(typ102)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ102))
Typ = GetType(String).GetMethod("Concat", typ102).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 17)
ASTEmitIL.MarkSequencePoint(doc13, 522, 1, 522, 100)
Dim typ103(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("LineNr"))
Typ = GetType(ILEmitter).GetField("LineNr").FieldType
ReDim Preserve typ103(UBound(typ103) + 1)
typ103(UBound(typ103)) = Typ
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("CurSrcFile"))
Typ = GetType(ILEmitter).GetField("CurSrcFile").FieldType
ReDim Preserve typ103(UBound(typ103) + 1)
typ103(UBound(typ103)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(System.String)
ReDim Preserve typ103(UBound(typ103) + 1)
typ103(UBound(typ103)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("WriteError", typ103))
Typ = GetType(StreamUtils).GetMethod("WriteError", typ103).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 523, 1, 523, 100)
ASTEmitIL.Emit(OpCodes.Br, cont322)
ASTEmitIL.MarkLabel(fa322)
ASTEmitIL.Emit(OpCodes.Br, cont322)
ASTEmitIL.MarkLabel(cont322)
ASTEmitIL.MarkSequencePoint(doc13, 525, 1, 525, 100)
ASTEmitIL.Emit(OpCodes.Br, cont310)
ASTEmitIL.MarkLabel(fa310)
ASTEmitIL.MarkSequencePoint(doc13, 527, 1, 527, 100)
Dim typ104(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
ReDim Preserve typ104(UBound(typ104) + 1)
typ104(UBound(typ104)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ104))
Typ = Typ03.GetMethod("Equals", typ104).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc13, 530, 1, 530, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa323 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru323 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont323 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru323)
ASTEmitIL.Emit(OpCodes.Br, fa323)
ASTEmitIL.MarkLabel(tru323)
ASTEmitIL.MarkSequencePoint(doc13, 531, 1, 531, 100)
Dim typ105(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
ReDim Preserve typ105(UBound(typ105) + 1)
typ105(UBound(typ105)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 34)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ105(UBound(typ105) + 1)
typ105(UBound(typ105)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadField", typ105))
Typ = GetType(Loader).GetMethod("LoadField", typ105).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 25)
ASTEmitIL.MarkSequencePoint(doc13, 532, 1, 532, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("MemberTyp"))
Typ = GetType(Loader).GetField("MemberTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 533, 1, 533, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("MemberTyp"))
Typ = GetType(Loader).GetField("MemberTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc13, 534, 1, 534, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa324 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru324 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont324 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru324)
ASTEmitIL.Emit(OpCodes.Br, fa324)
ASTEmitIL.MarkLabel(tru324)
ASTEmitIL.MarkSequencePoint(doc13, 536, 1, 536, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("FldLitFlag"))
Typ = GetType(Loader).GetField("FldLitFlag").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa325 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru325 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont325 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru325)
ASTEmitIL.Emit(OpCodes.Br, fa325)
ASTEmitIL.MarkLabel(tru325)
ASTEmitIL.MarkSequencePoint(doc13, 537, 1, 537, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("MemberTyp"))
Typ = GetType(Loader).GetField("MemberTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
ASTEmitIL.MarkSequencePoint(doc13, 538, 1, 538, 100)
Dim typ106(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(FieldInfo)
ReDim Preserve typ106(UBound(typ106) + 1)
typ106(UBound(typ106)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.Boolean)
ReDim Preserve typ106(UBound(typ106) + 1)
typ106(UBound(typ106)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ106))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ106).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 539, 1, 539, 100)
ASTEmitIL.Emit(OpCodes.Br, cont325)
ASTEmitIL.MarkLabel(fa325)
ASTEmitIL.MarkSequencePoint(doc13, 541, 1, 541, 100)
Dim locbldr323 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(ConstLiteral))
locbldr323.SetLocalSymInfo("constlit")
ASTEmitIL.Emit(OpCodes.Newobj, GetType(ConstLiteral).GetConstructor(Type.EmptyTypes))
ASTEmitIL.Emit(OpCodes.Stloc, 35)
ASTEmitIL.MarkSequencePoint(doc13, 542, 1, 542, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(ConstLiteral)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("FldLitVal"))
Typ = GetType(Loader).GetField("FldLitVal").FieldType
ASTEmitIL.Emit(OpCodes.Stfld, GetType(ConstLiteral).GetField("ConstVal"))
ASTEmitIL.MarkSequencePoint(doc13, 543, 1, 543, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(ConstLiteral)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("FldLitTyp"))
Typ = GetType(Loader).GetField("FldLitTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stfld, GetType(ConstLiteral).GetField("ExtTyp"))
ASTEmitIL.MarkSequencePoint(doc13, 544, 1, 544, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("EnumLitFlag"))
Typ = GetType(Loader).GetField("EnumLitFlag").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa326 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru326 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont326 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru326)
ASTEmitIL.Emit(OpCodes.Br, fa326)
ASTEmitIL.MarkLabel(tru326)
ASTEmitIL.MarkSequencePoint(doc13, 545, 1, 545, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(ConstLiteral)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("EnumLitTyp"))
Typ = GetType(Loader).GetField("EnumLitTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stfld, GetType(ConstLiteral).GetField("IntTyp"))
ASTEmitIL.MarkSequencePoint(doc13, 546, 1, 546, 100)
ASTEmitIL.Emit(OpCodes.Br, cont326)
ASTEmitIL.MarkLabel(fa326)
ASTEmitIL.MarkSequencePoint(doc13, 547, 1, 547, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(ConstLiteral)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("FldLitTyp"))
Typ = GetType(Loader).GetField("FldLitTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stfld, GetType(ConstLiteral).GetField("IntTyp"))
ASTEmitIL.MarkSequencePoint(doc13, 548, 1, 548, 100)
ASTEmitIL.Emit(OpCodes.Br, cont326)
ASTEmitIL.MarkLabel(cont326)
ASTEmitIL.MarkSequencePoint(doc13, 550, 1, 550, 100)
Dim locbldr324 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Literal))
locbldr324.SetLocalSymInfo("constl")
Dim typ107(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(ConstLiteral)
ReDim Preserve typ107(UBound(typ107) + 1)
typ107(UBound(typ107)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessConst", typ107))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessConst", typ107).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 36)
ASTEmitIL.MarkSequencePoint(doc13, 551, 1, 551, 100)
Dim typ108(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 36)
Typ = GetType(Literal)
ReDim Preserve typ108(UBound(typ108) + 1)
typ108(UBound(typ108)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLiteral", typ108))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLiteral", typ108).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 552, 1, 552, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("FldLitTyp"))
Typ = GetType(Loader).GetField("FldLitTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 553, 1, 553, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("FldLitTyp"))
Typ = GetType(Loader).GetField("FldLitTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc13, 554, 1, 554, 100)
ASTEmitIL.Emit(OpCodes.Br, cont325)
ASTEmitIL.MarkLabel(cont325)
ASTEmitIL.MarkSequencePoint(doc13, 555, 1, 555, 100)
ASTEmitIL.Emit(OpCodes.Br, cont324)
ASTEmitIL.MarkLabel(fa324)
ASTEmitIL.Emit(OpCodes.Br, cont324)
ASTEmitIL.MarkLabel(cont324)
ASTEmitIL.MarkSequencePoint(doc13, 557, 1, 557, 100)
ASTEmitIL.Emit(OpCodes.Br, cont323)
ASTEmitIL.MarkLabel(fa323)
ASTEmitIL.MarkSequencePoint(doc13, 559, 1, 559, 100)
Dim typ109(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 34)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ109(UBound(typ109) + 1)
typ109(UBound(typ109)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ109))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ109).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 25)
ASTEmitIL.MarkSequencePoint(doc13, 560, 1, 560, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa327 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru327 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont327 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru327)
ASTEmitIL.Emit(OpCodes.Br, fa327)
ASTEmitIL.MarkLabel(tru327)
ASTEmitIL.MarkSequencePoint(doc13, 561, 1, 561, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
ASTEmitIL.MarkSequencePoint(doc13, 562, 1, 562, 100)
Dim typ111(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(FieldInfo)
ReDim Preserve typ111(UBound(typ111) + 1)
typ111(UBound(typ111)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.Boolean)
ReDim Preserve typ111(UBound(typ111) + 1)
typ111(UBound(typ111)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ111))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ111).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 563, 1, 563, 100)
ASTEmitIL.Emit(OpCodes.Br, cont327)
ASTEmitIL.MarkLabel(fa327)
ASTEmitIL.Emit(OpCodes.Br, cont327)
ASTEmitIL.MarkLabel(cont327)
ASTEmitIL.MarkSequencePoint(doc13, 564, 1, 564, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 565, 1, 565, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc13, 566, 1, 566, 100)
ASTEmitIL.Emit(OpCodes.Br, cont323)
ASTEmitIL.MarkLabel(cont323)
ASTEmitIL.MarkSequencePoint(doc13, 568, 1, 568, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa328 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru328 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont328 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru328)
ASTEmitIL.Emit(OpCodes.Br, fa328)
ASTEmitIL.MarkLabel(tru328)
ASTEmitIL.MarkSequencePoint(doc13, 569, 1, 569, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 31)
ASTEmitIL.MarkSequencePoint(doc13, 570, 1, 570, 100)
ASTEmitIL.Emit(OpCodes.Br, cont328)
ASTEmitIL.MarkLabel(fa328)
ASTEmitIL.Emit(OpCodes.Br, cont328)
ASTEmitIL.MarkLabel(cont328)
ASTEmitIL.MarkSequencePoint(doc13, 572, 1, 572, 100)
ASTEmitIL.Emit(OpCodes.Br, cont310)
ASTEmitIL.MarkLabel(cont310)
ASTEmitIL.MarkSequencePoint(doc13, 574, 1, 574, 100)
ASTEmitIL.MarkLabel(label12)
ASTEmitIL.MarkSequencePoint(doc13, 576, 1, 576, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 27)
ASTEmitIL.MarkSequencePoint(doc13, 578, 1, 578, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(System.Int32)
Dim fa329 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru329 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont329 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru329)
ASTEmitIL.Emit(OpCodes.Br, fa329)
ASTEmitIL.MarkLabel(tru329)
ASTEmitIL.MarkSequencePoint(doc13, 579, 1, 579, 100)
ASTEmitIL.Emit(OpCodes.Br, label11)
ASTEmitIL.MarkSequencePoint(doc13, 580, 1, 580, 100)
ASTEmitIL.Emit(OpCodes.Br, cont329)
ASTEmitIL.MarkLabel(fa329)
ASTEmitIL.MarkSequencePoint(doc13, 581, 1, 581, 100)
ASTEmitIL.Emit(OpCodes.Br, label10)
ASTEmitIL.MarkSequencePoint(doc13, 582, 1, 582, 100)
ASTEmitIL.Emit(OpCodes.Br, cont329)
ASTEmitIL.MarkLabel(cont329)
ASTEmitIL.MarkSequencePoint(doc13, 584, 1, 584, 100)
ASTEmitIL.MarkLabel(label11)
ASTEmitIL.MarkSequencePoint(doc13, 588, 1, 588, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(Ident)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("IsArr"))
Typ = GetType(Ident).GetField("IsArr").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa330 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru330 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont330 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru330)
ASTEmitIL.Emit(OpCodes.Br, fa330)
ASTEmitIL.MarkLabel(tru330)
ASTEmitIL.MarkSequencePoint(doc13, 590, 1, 590, 100)
Dim typ114(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(Ident)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("ArrLoc"))
Typ = GetType(Ident).GetField("ArrLoc").FieldType
ReDim Preserve typ114(UBound(typ114) + 1)
typ114(UBound(typ114)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CheckIfArrLen", typ114))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CheckIfArrLen", typ114).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc13, 591, 1, 591, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa331 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru331 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont331 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru331)
ASTEmitIL.Emit(OpCodes.Br, fa331)
ASTEmitIL.MarkLabel(tru331)
ASTEmitIL.MarkSequencePoint(doc13, 593, 1, 593, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa332 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru332 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont332 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru332)
ASTEmitIL.Emit(OpCodes.Br, fa332)
ASTEmitIL.MarkLabel(tru332)
ASTEmitIL.MarkSequencePoint(doc13, 594, 1, 594, 100)
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdlen", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitLdlen", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 595, 1, 595, 100)
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitConvI4", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitConvI4", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 596, 1, 596, 100)
ASTEmitIL.Emit(OpCodes.Br, cont332)
ASTEmitIL.MarkLabel(fa332)
ASTEmitIL.Emit(OpCodes.Br, cont332)
ASTEmitIL.MarkLabel(cont332)
ASTEmitIL.MarkSequencePoint(doc13, 597, 1, 597, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(System.Int32))
Dim typ115 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ115))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ115).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 599, 1, 599, 100)
ASTEmitIL.Emit(OpCodes.Br, cont331)
ASTEmitIL.MarkLabel(fa331)
ASTEmitIL.MarkSequencePoint(doc13, 601, 1, 601, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc13, 602, 1, 602, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(Ident)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ116(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(Ident)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("ArrLoc"))
Typ = GetType(Ident).GetField("ArrLoc").FieldType
ReDim Preserve typ116(UBound(typ116) + 1)
typ116(UBound(typ116)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ConvToRPN)
Typ = ConvToRPN.ReturnType
ASTEmitIL.Emit(OpCodes.Stfld, GetType(Ident).GetField("ArrLoc"))
ASTEmitIL.MarkSequencePoint(doc13, 603, 1, 603, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ117(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(Ident)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("ArrLoc"))
Typ = GetType(Ident).GetField("ArrLoc").FieldType
ReDim Preserve typ117(UBound(typ117) + 1)
typ117(UBound(typ117)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ConvToAST)
Typ = ConvToAST.ReturnType
ASTEmitIL.Emit(OpCodes.Starg, 1)
ASTEmitIL.MarkSequencePoint(doc13, 604, 1, 604, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ118(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ReDim Preserve typ118(UBound(typ118) + 1)
typ118(UBound(typ118)) = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ReDim Preserve typ118(UBound(typ118) + 1)
typ118(UBound(typ118)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 606, 1, 606, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetElementType", Type.EmptyTypes))
Typ = Typ03.GetMethod("GetElementType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc13, 607, 1, 607, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa333 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru333 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont333 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru333)
ASTEmitIL.Emit(OpCodes.Br, fa333)
ASTEmitIL.MarkLabel(tru333)
ASTEmitIL.MarkSequencePoint(doc13, 608, 1, 608, 100)
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitConvI", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitConvI", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 610, 1, 610, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(Ident)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("MemberAccessFlg"))
Typ = GetType(Ident).GetField("MemberAccessFlg").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa334 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru334 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont334 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru334)
ASTEmitIL.Emit(OpCodes.Br, fa334)
ASTEmitIL.MarkLabel(tru334)
ASTEmitIL.MarkSequencePoint(doc13, 611, 1, 611, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AddrFlg"))
ASTEmitIL.MarkSequencePoint(doc13, 612, 1, 612, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
ASTEmitIL.MarkSequencePoint(doc13, 613, 1, 613, 100)
ASTEmitIL.Emit(OpCodes.Br, cont334)
ASTEmitIL.MarkLabel(fa334)
ASTEmitIL.Emit(OpCodes.Br, cont334)
ASTEmitIL.MarkLabel(cont334)
ASTEmitIL.MarkSequencePoint(doc13, 615, 1, 615, 100)
Dim typ120(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
ReDim Preserve typ120(UBound(typ120) + 1)
typ120(UBound(typ120)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitElemLd", typ120))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitElemLd", typ120).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 616, 1, 616, 100)
ASTEmitIL.Emit(OpCodes.Br, cont333)
ASTEmitIL.MarkLabel(fa333)
ASTEmitIL.Emit(OpCodes.Br, cont333)
ASTEmitIL.MarkLabel(cont333)
ASTEmitIL.MarkSequencePoint(doc13, 617, 1, 617, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 618, 1, 618, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AddrFlg"))
ASTEmitIL.MarkSequencePoint(doc13, 620, 1, 620, 100)
ASTEmitIL.Emit(OpCodes.Br, cont331)
ASTEmitIL.MarkLabel(cont331)
ASTEmitIL.MarkSequencePoint(doc13, 622, 1, 622, 100)
ASTEmitIL.Emit(OpCodes.Br, cont330)
ASTEmitIL.MarkLabel(fa330)
ASTEmitIL.Emit(OpCodes.Br, cont330)
ASTEmitIL.MarkLabel(cont330)
ASTEmitIL.MarkSequencePoint(doc13, 625, 1, 625, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(Ident)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("MemberAccessFlg"))
Typ = GetType(Ident).GetField("MemberAccessFlg").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa335 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru335 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont335 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru335)
ASTEmitIL.Emit(OpCodes.Br, fa335)
ASTEmitIL.MarkLabel(tru335)
ASTEmitIL.MarkSequencePoint(doc13, 626, 1, 626, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("ChainFlg"))
ASTEmitIL.MarkSequencePoint(doc13, 627, 1, 627, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ121(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(Ident)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("MemberToAccess"))
Typ = GetType(Ident).GetField("MemberToAccess").FieldType
ReDim Preserve typ121(UBound(typ121) + 1)
typ121(UBound(typ121)) = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ReDim Preserve typ121(UBound(typ121) + 1)
typ121(UBound(typ121)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 628, 1, 628, 100)
ASTEmitIL.Emit(OpCodes.Br, cont335)
ASTEmitIL.MarkLabel(fa335)
ASTEmitIL.Emit(OpCodes.Br, cont335)
ASTEmitIL.MarkLabel(cont335)
ASTEmitIL.MarkSequencePoint(doc13, 630, 1, 630, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(Ident)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Conv"))
Typ = GetType(Ident).GetField("Conv").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa336 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru336 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont336 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru336)
ASTEmitIL.Emit(OpCodes.Br, fa336)
ASTEmitIL.MarkLabel(tru336)
ASTEmitIL.MarkSequencePoint(doc13, 632, 1, 632, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa337 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru337 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont337 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru337)
ASTEmitIL.Emit(OpCodes.Br, fa337)
ASTEmitIL.MarkLabel(tru337)
ASTEmitIL.MarkSequencePoint(doc13, 633, 1, 633, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 18)
ASTEmitIL.MarkSequencePoint(doc13, 634, 1, 634, 100)
ASTEmitIL.Emit(OpCodes.Br, cont337)
ASTEmitIL.MarkLabel(fa337)
ASTEmitIL.Emit(OpCodes.Br, cont337)
ASTEmitIL.MarkLabel(cont337)
ASTEmitIL.MarkSequencePoint(doc13, 636, 1, 636, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(Ident)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("TTok"))
Typ = GetType(Ident).GetField("TTok").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 10)
ASTEmitIL.MarkSequencePoint(doc13, 637, 1, 637, 100)
Dim typ122(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
ReDim Preserve typ122(UBound(typ122) + 1)
typ122(UBound(typ122)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ122))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ122).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 639, 1, 639, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa338 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru338 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont338 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru338)
ASTEmitIL.Emit(OpCodes.Br, fa338)
ASTEmitIL.MarkLabel(tru338)
ASTEmitIL.MarkSequencePoint(doc13, 640, 1, 640, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 19)
ASTEmitIL.MarkSequencePoint(doc13, 641, 1, 641, 100)
Dim typ123(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Type)
ReDim Preserve typ123(UBound(typ123) + 1)
typ123(UBound(typ123)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(System.Type)
ReDim Preserve typ123(UBound(typ123) + 1)
typ123(UBound(typ123)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitConv", typ123))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitConv", typ123).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 642, 1, 642, 100)
ASTEmitIL.Emit(OpCodes.Br, cont338)
ASTEmitIL.MarkLabel(fa338)
ASTEmitIL.Emit(OpCodes.Br, cont338)
ASTEmitIL.MarkLabel(cont338)
ASTEmitIL.MarkSequencePoint(doc13, 644, 1, 644, 100)
ASTEmitIL.Emit(OpCodes.Br, cont336)
ASTEmitIL.MarkLabel(fa336)
ASTEmitIL.Emit(OpCodes.Br, cont336)
ASTEmitIL.MarkLabel(cont336)
ASTEmitIL.MarkSequencePoint(doc13, 646, 1, 646, 100)
ASTEmitIL.Emit(OpCodes.Br, label9)
ASTEmitIL.MarkSequencePoint(doc13, 647, 1, 647, 100)
ASTEmitIL.Emit(OpCodes.Br, cont306)
ASTEmitIL.MarkLabel(fa306)
ASTEmitIL.Emit(OpCodes.Br, cont306)
ASTEmitIL.MarkLabel(cont306)
ASTEmitIL.MarkSequencePoint(doc13, 649, 1, 649, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(MethodCallTok))
Dim typ124 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ124))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ124).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc13, 650, 1, 650, 100)
Dim typ125(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ125(UBound(typ125) + 1)
typ125(UBound(typ125)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ125))
Typ = Typ03.GetMethod("IsInstanceOfType", typ125).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc13, 652, 1, 652, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa339 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru339 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont339 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru339)
ASTEmitIL.Emit(OpCodes.Br, fa339)
ASTEmitIL.MarkLabel(tru339)
ASTEmitIL.MarkSequencePoint(doc13, 653, 1, 653, 100)
Dim locbldr325 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Type))
locbldr325.SetLocalSymInfo("mcparenttyp")
ASTEmitIL.MarkSequencePoint(doc13, 654, 1, 654, 100)
Dim locbldr326 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.String).MakeArrayType())
locbldr326.SetLocalSymInfo("mnstrarr")
ASTEmitIL.MarkSequencePoint(doc13, 655, 1, 655, 100)
Dim locbldr327 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(MethodInfo))
locbldr327.SetLocalSymInfo("mcmetinf")
ASTEmitIL.MarkSequencePoint(doc13, 656, 1, 656, 100)
Dim locbldr328 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Type))
locbldr328.SetLocalSymInfo("nctyp")
ASTEmitIL.MarkSequencePoint(doc13, 657, 1, 657, 100)
Dim locbldr329 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(MethodCallTok))
locbldr329.SetLocalSymInfo("mctok")
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Stloc, 41)
ASTEmitIL.MarkSequencePoint(doc13, 658, 1, 658, 100)
Dim locbldr330 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(MethodNameTok))
locbldr330.SetLocalSymInfo("mntok")
ASTEmitIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(MethodCallTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodCallTok).GetField("Name"))
Typ = GetType(MethodCallTok).GetField("Name").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 42)
ASTEmitIL.MarkSequencePoint(doc13, 659, 1, 659, 100)
Dim locbldr331 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.String))
locbldr331.SetLocalSymInfo("mnstr")
ASTEmitIL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ASTEmitIL.Emit(OpCodes.Stloc, 43)
ASTEmitIL.MarkSequencePoint(doc13, 660, 1, 660, 100)
Dim locbldr332 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Expr).MakeArrayType())
locbldr332.SetLocalSymInfo("mcparams")
ASTEmitIL.MarkSequencePoint(doc13, 661, 1, 661, 100)
Dim locbldr333 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Type).MakeArrayType())
locbldr333.SetLocalSymInfo("typarr1")
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
ASTEmitIL.Emit(OpCodes.Newarr, GetType(System.Type))
ASTEmitIL.Emit(OpCodes.Stloc, 45)
ASTEmitIL.MarkSequencePoint(doc13, 662, 1, 662, 100)
Dim locbldr334 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Type).MakeArrayType())
locbldr334.SetLocalSymInfo("typarr2")
ASTEmitIL.MarkSequencePoint(doc13, 663, 1, 663, 100)
Dim locbldr335 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Int32))
locbldr335.SetLocalSymInfo("paramlen")
ASTEmitIL.MarkSequencePoint(doc13, 664, 1, 664, 100)
Dim locbldr336 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Expr))
locbldr336.SetLocalSymInfo("curexpr")
ASTEmitIL.MarkSequencePoint(doc13, 665, 1, 665, 100)
Dim locbldr337 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Expr))
locbldr337.SetLocalSymInfo("rpnparam")
ASTEmitIL.MarkSequencePoint(doc13, 666, 1, 666, 100)
Dim locbldr338 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Token))
locbldr338.SetLocalSymInfo("astparam")
ASTEmitIL.MarkSequencePoint(doc13, 667, 1, 667, 100)
Dim locbldr339 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(ConstructorInfo))
locbldr339.SetLocalSymInfo("ncctorinf")
ASTEmitIL.MarkSequencePoint(doc13, 668, 1, 668, 100)
Dim locbldr340 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(FieldInfo))
locbldr340.SetLocalSymInfo("mcfldinf")
ASTEmitIL.MarkSequencePoint(doc13, 669, 1, 669, 100)
Dim locbldr341 As LocalBuilder = ASTEmitIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"))
locbldr341.SetLocalSymInfo("mcvr")
ASTEmitIL.MarkSequencePoint(doc13, 670, 1, 670, 100)
Dim locbldr342 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr342.SetLocalSymInfo("mcisstatic")
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 54)
ASTEmitIL.MarkSequencePoint(doc13, 671, 1, 671, 100)
Dim locbldr343 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr343.SetLocalSymInfo("mectorflg")
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 55)
ASTEmitIL.MarkSequencePoint(doc13, 672, 1, 672, 100)
Dim locbldr344 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Int32))
locbldr344.SetLocalSymInfo("mcrestrord")
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 56)
ASTEmitIL.MarkSequencePoint(doc13, 674, 1, 674, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(MethodNameTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodNameTok).GetField("Value"))
Typ = GetType(MethodNameTok).GetField("Value").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 43)
ASTEmitIL.MarkSequencePoint(doc13, 675, 1, 675, 100)
Dim typ126(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 43)
Typ = GetType(System.String)
ReDim Preserve typ126(UBound(typ126) + 1)
typ126(UBound(typ126)) = Typ
ASTEmitIL.Emit(OpCodes.Ldstr, ":")
Typ = GetType(System.String)
ReDim Preserve typ126(UBound(typ126) + 1)
typ126(UBound(typ126)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ParseUtils).GetMethod("StringParser", typ126))
Typ = GetType(ParseUtils).GetMethod("StringParser", typ126).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 38)
ASTEmitIL.MarkSequencePoint(doc13, 676, 1, 676, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(MethodCallTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodCallTok).GetField("Params"))
Typ = GetType(MethodCallTok).GetField("Params").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 44)
ASTEmitIL.MarkSequencePoint(doc13, 677, 1, 677, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 44)
Typ = GetType(Expr).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Sub)
ASTEmitIL.Emit(OpCodes.Stloc, 47)
ASTEmitIL.MarkSequencePoint(doc13, 678, 1, 678, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 26)
ASTEmitIL.MarkSequencePoint(doc13, 679, 1, 679, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 27)
ASTEmitIL.MarkSequencePoint(doc13, 681, 1, 681, 100)
ASTEmitIL.Emit(OpCodes.Ldnull)
ASTEmitIL.Emit(OpCodes.Stloc, 37)
ASTEmitIL.MarkSequencePoint(doc13, 682, 1, 682, 100)
ASTEmitIL.Emit(OpCodes.Ldnull)
ASTEmitIL.Emit(OpCodes.Stloc, 39)
ASTEmitIL.MarkSequencePoint(doc13, 683, 1, 683, 100)
ASTEmitIL.Emit(OpCodes.Ldnull)
ASTEmitIL.Emit(OpCodes.Stloc, 52)
ASTEmitIL.MarkSequencePoint(doc13, 685, 1, 685, 100)
Dim typ127(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 43)
Typ = GetType(System.String)
ReDim Preserve typ127(UBound(typ127) + 1)
typ127(UBound(typ127)) = Typ
ASTEmitIL.Emit(OpCodes.Ldstr, "me::ctor")
Typ = GetType(System.String)
ReDim Preserve typ127(UBound(typ127) + 1)
typ127(UBound(typ127)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ127))
Typ = GetType(String).GetMethod("Compare", typ127).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 29)
ASTEmitIL.MarkSequencePoint(doc13, 686, 1, 686, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 29)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa340 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru340 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont340 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru340)
ASTEmitIL.Emit(OpCodes.Br, fa340)
ASTEmitIL.MarkLabel(tru340)
ASTEmitIL.MarkSequencePoint(doc13, 687, 1, 687, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 55)
ASTEmitIL.MarkSequencePoint(doc13, 688, 1, 688, 100)
ASTEmitIL.Emit(OpCodes.Br, cont340)
ASTEmitIL.MarkLabel(fa340)
ASTEmitIL.Emit(OpCodes.Br, cont340)
ASTEmitIL.MarkLabel(cont340)
ASTEmitIL.MarkSequencePoint(doc13, 690, 1, 690, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc13, 691, 1, 691, 100)
Dim locbldr345 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.String))
locbldr345.SetLocalSymInfo("tstr")
ASTEmitIL.MarkSequencePoint(doc13, 692, 1, 692, 100)
Dim typ128(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 43)
Typ = GetType(System.String)
ReDim Preserve typ128(UBound(typ128) + 1)
typ128(UBound(typ128)) = Typ
ASTEmitIL.Emit(OpCodes.Ldstr, ":")
Typ = GetType(System.String)
ReDim Preserve typ128(UBound(typ128) + 1)
typ128(UBound(typ128)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ParseUtils).GetMethod("StringParser", typ128))
Typ = GetType(ParseUtils).GetMethod("StringParser", typ128).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 38)
ASTEmitIL.MarkSequencePoint(doc13, 693, 1, 693, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(System.String).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Sub)
ASTEmitIL.Emit(OpCodes.Stloc, 13)
ASTEmitIL.MarkSequencePoint(doc13, 695, 1, 695, 100)
Dim typ129(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ129(UBound(typ129) + 1)
typ129(UBound(typ129)) = Typ
ASTEmitIL.Emit(OpCodes.Ldstr, "me")
Typ = GetType(System.String)
ReDim Preserve typ129(UBound(typ129) + 1)
typ129(UBound(typ129)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ129))
Typ = GetType(String).GetMethod("Compare", typ129).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 29)
ASTEmitIL.MarkSequencePoint(doc13, 696, 1, 696, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 29)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa341 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru341 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont341 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru341)
ASTEmitIL.Emit(OpCodes.Br, fa341)
ASTEmitIL.MarkLabel(tru341)
ASTEmitIL.MarkSequencePoint(doc13, 697, 1, 697, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Add)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc13, 698, 1, 698, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 26)
ASTEmitIL.MarkSequencePoint(doc13, 699, 1, 699, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 56)
ASTEmitIL.MarkSequencePoint(doc13, 700, 1, 700, 100)
ASTEmitIL.Emit(OpCodes.Br, cont341)
ASTEmitIL.MarkLabel(fa341)
ASTEmitIL.Emit(OpCodes.Br, cont341)
ASTEmitIL.MarkLabel(cont341)
ASTEmitIL.MarkSequencePoint(doc13, 702, 1, 702, 100)
Dim label13 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc13, 703, 1, 703, 100)
Dim label14 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc13, 704, 1, 704, 100)
Dim label15 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc13, 706, 1, 706, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 55)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa342 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru342 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont342 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru342)
ASTEmitIL.Emit(OpCodes.Br, fa342)
ASTEmitIL.MarkLabel(tru342)
ASTEmitIL.MarkSequencePoint(doc13, 708, 1, 708, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("ChainFlg"))
Typ = GetType(AsmFactory).GetField("ChainFlg").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa343 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru343 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont343 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru343)
ASTEmitIL.Emit(OpCodes.Br, fa343)
ASTEmitIL.MarkLabel(tru343)
ASTEmitIL.MarkSequencePoint(doc13, 709, 1, 709, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("ChainFlg"))
ASTEmitIL.MarkSequencePoint(doc13, 710, 1, 710, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 37)
ASTEmitIL.MarkSequencePoint(doc13, 711, 1, 711, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 27)
ASTEmitIL.MarkSequencePoint(doc13, 712, 1, 712, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 54)
ASTEmitIL.MarkSequencePoint(doc13, 713, 1, 713, 100)
ASTEmitIL.Emit(OpCodes.Br, cont343)
ASTEmitIL.MarkLabel(fa343)
ASTEmitIL.Emit(OpCodes.Br, cont343)
ASTEmitIL.MarkLabel(cont343)
ASTEmitIL.MarkSequencePoint(doc13, 715, 1, 715, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(System.String).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 29)
ASTEmitIL.MarkSequencePoint(doc13, 716, 1, 716, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 29)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldloc, 56)
Typ = GetType(System.Int32)
Dim fa344 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru344 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont344 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Bge, tru344)
ASTEmitIL.Emit(OpCodes.Br, fa344)
ASTEmitIL.MarkLabel(tru344)
ASTEmitIL.MarkSequencePoint(doc13, 718, 1, 718, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AddrFlg"))
ASTEmitIL.MarkSequencePoint(doc13, 720, 1, 720, 100)
ASTEmitIL.MarkLabel(label13)
ASTEmitIL.MarkSequencePoint(doc13, 721, 1, 721, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Add)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc13, 723, 1, 723, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 27)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa345 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru345 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont345 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru345)
ASTEmitIL.Emit(OpCodes.Br, fa345)
ASTEmitIL.MarkLabel(tru345)
ASTEmitIL.MarkSequencePoint(doc13, 725, 1, 725, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 26)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa346 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru346 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont346 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru346)
ASTEmitIL.Emit(OpCodes.Br, fa346)
ASTEmitIL.MarkLabel(tru346)
ASTEmitIL.MarkSequencePoint(doc13, 726, 1, 726, 100)
Dim typ130(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ130(UBound(typ130) + 1)
typ130(UBound(typ130)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindVar", typ130))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindVar", typ130).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 53)
ASTEmitIL.MarkSequencePoint(doc13, 727, 1, 727, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 53)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldnull)
Dim fa347 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru347 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont347 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, fa347)
ASTEmitIL.Emit(OpCodes.Br, tru347)
ASTEmitIL.MarkLabel(tru347)
ASTEmitIL.MarkSequencePoint(doc13, 728, 1, 728, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa348 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru348 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont348 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru348)
ASTEmitIL.Emit(OpCodes.Br, fa348)
ASTEmitIL.MarkLabel(tru348)
ASTEmitIL.MarkSequencePoint(doc13, 729, 1, 729, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 53)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
ASTEmitIL.MarkSequencePoint(doc13, 730, 1, 730, 100)
Dim typ131(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 53)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("Index"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("Index").FieldType
ReDim Preserve typ131(UBound(typ131) + 1)
typ131(UBound(typ131)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 53)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("LocArg"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("LocArg").FieldType
ReDim Preserve typ131(UBound(typ131) + 1)
typ131(UBound(typ131)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLocLd", typ131))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLocLd", typ131).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 731, 1, 731, 100)
ASTEmitIL.Emit(OpCodes.Br, cont348)
ASTEmitIL.MarkLabel(fa348)
ASTEmitIL.Emit(OpCodes.Br, cont348)
ASTEmitIL.MarkLabel(cont348)
ASTEmitIL.MarkSequencePoint(doc13, 732, 1, 732, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 53)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 733, 1, 733, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 53)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 37)
ASTEmitIL.MarkSequencePoint(doc13, 734, 1, 734, 100)
ASTEmitIL.Emit(OpCodes.Br, label15)
ASTEmitIL.MarkSequencePoint(doc13, 735, 1, 735, 100)
ASTEmitIL.Emit(OpCodes.Br, cont347)
ASTEmitIL.MarkLabel(fa347)
ASTEmitIL.MarkSequencePoint(doc13, 737, 1, 737, 100)
Dim typ132(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ132(UBound(typ132) + 1)
typ132(UBound(typ132)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ132))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ132).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 52)
ASTEmitIL.MarkSequencePoint(doc13, 739, 1, 739, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(FieldInfo)
ASTEmitIL.Emit(OpCodes.Ldnull)
Dim fa349 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru349 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont349 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, fa349)
ASTEmitIL.Emit(OpCodes.Br, tru349)
ASTEmitIL.MarkLabel(tru349)
ASTEmitIL.MarkSequencePoint(doc13, 740, 1, 740, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsStatic", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsStatic", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 31)
ASTEmitIL.MarkSequencePoint(doc13, 741, 1, 741, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa350 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru350 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont350 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru350)
ASTEmitIL.Emit(OpCodes.Br, fa350)
ASTEmitIL.MarkLabel(tru350)
ASTEmitIL.MarkSequencePoint(doc13, 742, 1, 742, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa351 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru351 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont351 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru351)
ASTEmitIL.Emit(OpCodes.Br, fa351)
ASTEmitIL.MarkLabel(tru351)
ASTEmitIL.MarkSequencePoint(doc13, 743, 1, 743, 100)
Dim typ134(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReDim Preserve typ134(UBound(typ134) + 1)
typ134(UBound(typ134)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdarg", typ134))
Typ = GetType(ILEmitter).GetMethod("EmitLdarg", typ134).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 744, 1, 744, 100)
ASTEmitIL.Emit(OpCodes.Br, cont351)
ASTEmitIL.MarkLabel(fa351)
ASTEmitIL.Emit(OpCodes.Br, cont351)
ASTEmitIL.MarkLabel(cont351)
ASTEmitIL.MarkSequencePoint(doc13, 745, 1, 745, 100)
ASTEmitIL.Emit(OpCodes.Br, cont350)
ASTEmitIL.MarkLabel(fa350)
ASTEmitIL.Emit(OpCodes.Br, cont350)
ASTEmitIL.MarkLabel(cont350)
ASTEmitIL.MarkSequencePoint(doc13, 746, 1, 746, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa352 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru352 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont352 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru352)
ASTEmitIL.Emit(OpCodes.Br, fa352)
ASTEmitIL.MarkLabel(tru352)
ASTEmitIL.MarkSequencePoint(doc13, 747, 1, 747, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
ASTEmitIL.MarkSequencePoint(doc13, 748, 1, 748, 100)
Dim typ136(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(FieldInfo)
ReDim Preserve typ136(UBound(typ136) + 1)
typ136(UBound(typ136)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.Boolean)
ReDim Preserve typ136(UBound(typ136) + 1)
typ136(UBound(typ136)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ136))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ136).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 749, 1, 749, 100)
ASTEmitIL.Emit(OpCodes.Br, cont352)
ASTEmitIL.MarkLabel(fa352)
ASTEmitIL.Emit(OpCodes.Br, cont352)
ASTEmitIL.MarkLabel(cont352)
ASTEmitIL.MarkSequencePoint(doc13, 750, 1, 750, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 751, 1, 751, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 37)
ASTEmitIL.MarkSequencePoint(doc13, 752, 1, 752, 100)
ASTEmitIL.Emit(OpCodes.Br, label15)
ASTEmitIL.MarkSequencePoint(doc13, 753, 1, 753, 100)
ASTEmitIL.Emit(OpCodes.Br, cont349)
ASTEmitIL.MarkLabel(fa349)
ASTEmitIL.Emit(OpCodes.Br, cont349)
ASTEmitIL.MarkLabel(cont349)
ASTEmitIL.MarkSequencePoint(doc13, 755, 1, 755, 100)
ASTEmitIL.Emit(OpCodes.Br, cont347)
ASTEmitIL.MarkLabel(cont347)
ASTEmitIL.MarkSequencePoint(doc13, 757, 1, 757, 100)
ASTEmitIL.Emit(OpCodes.Br, cont346)
ASTEmitIL.MarkLabel(fa346)
ASTEmitIL.MarkSequencePoint(doc13, 759, 1, 759, 100)
Dim typ139(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ139(UBound(typ139) + 1)
typ139(UBound(typ139)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ139))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ139).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 52)
ASTEmitIL.MarkSequencePoint(doc13, 761, 1, 761, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(FieldInfo)
ASTEmitIL.Emit(OpCodes.Ldnull)
Dim fa353 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru353 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont353 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, fa353)
ASTEmitIL.Emit(OpCodes.Br, tru353)
ASTEmitIL.MarkLabel(tru353)
ASTEmitIL.MarkSequencePoint(doc13, 762, 1, 762, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsStatic", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsStatic", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 31)
ASTEmitIL.MarkSequencePoint(doc13, 763, 1, 763, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa354 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru354 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont354 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru354)
ASTEmitIL.Emit(OpCodes.Br, fa354)
ASTEmitIL.MarkLabel(tru354)
ASTEmitIL.MarkSequencePoint(doc13, 764, 1, 764, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa355 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru355 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont355 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru355)
ASTEmitIL.Emit(OpCodes.Br, fa355)
ASTEmitIL.MarkLabel(tru355)
ASTEmitIL.MarkSequencePoint(doc13, 765, 1, 765, 100)
Dim typ141(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReDim Preserve typ141(UBound(typ141) + 1)
typ141(UBound(typ141)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdarg", typ141))
Typ = GetType(ILEmitter).GetMethod("EmitLdarg", typ141).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 766, 1, 766, 100)
ASTEmitIL.Emit(OpCodes.Br, cont355)
ASTEmitIL.MarkLabel(fa355)
ASTEmitIL.Emit(OpCodes.Br, cont355)
ASTEmitIL.MarkLabel(cont355)
ASTEmitIL.MarkSequencePoint(doc13, 767, 1, 767, 100)
ASTEmitIL.Emit(OpCodes.Br, cont354)
ASTEmitIL.MarkLabel(fa354)
ASTEmitIL.Emit(OpCodes.Br, cont354)
ASTEmitIL.MarkLabel(cont354)
ASTEmitIL.MarkSequencePoint(doc13, 768, 1, 768, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa356 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru356 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont356 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru356)
ASTEmitIL.Emit(OpCodes.Br, fa356)
ASTEmitIL.MarkLabel(tru356)
ASTEmitIL.MarkSequencePoint(doc13, 769, 1, 769, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
ASTEmitIL.MarkSequencePoint(doc13, 770, 1, 770, 100)
Dim typ143(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(FieldInfo)
ReDim Preserve typ143(UBound(typ143) + 1)
typ143(UBound(typ143)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.Boolean)
ReDim Preserve typ143(UBound(typ143) + 1)
typ143(UBound(typ143)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ143))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ143).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 771, 1, 771, 100)
ASTEmitIL.Emit(OpCodes.Br, cont356)
ASTEmitIL.MarkLabel(fa356)
ASTEmitIL.Emit(OpCodes.Br, cont356)
ASTEmitIL.MarkLabel(cont356)
ASTEmitIL.MarkSequencePoint(doc13, 772, 1, 772, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 773, 1, 773, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 37)
ASTEmitIL.MarkSequencePoint(doc13, 774, 1, 774, 100)
ASTEmitIL.Emit(OpCodes.Br, label15)
ASTEmitIL.MarkSequencePoint(doc13, 775, 1, 775, 100)
ASTEmitIL.Emit(OpCodes.Br, cont353)
ASTEmitIL.MarkLabel(fa353)
ASTEmitIL.Emit(OpCodes.Br, cont353)
ASTEmitIL.MarkLabel(cont353)
ASTEmitIL.MarkSequencePoint(doc13, 777, 1, 777, 100)
ASTEmitIL.Emit(OpCodes.Br, cont346)
ASTEmitIL.MarkLabel(cont346)
ASTEmitIL.MarkSequencePoint(doc13, 782, 1, 782, 100)
Dim typ146(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ146(UBound(typ146) + 1)
typ146(UBound(typ146)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadClass", typ146))
Typ = GetType(Loader).GetMethod("LoadClass", typ146).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 37)
ASTEmitIL.MarkSequencePoint(doc13, 783, 1, 783, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 54)
ASTEmitIL.MarkSequencePoint(doc13, 785, 1, 785, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 37)
Typ = GetType(System.Type)
ASTEmitIL.Emit(OpCodes.Ldnull)
Dim fa357 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru357 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont357 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru357)
ASTEmitIL.Emit(OpCodes.Br, fa357)
ASTEmitIL.MarkLabel(tru357)
ASTEmitIL.MarkSequencePoint(doc13, 786, 1, 786, 100)
Dim typ147(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldstr, "Variable or Class '")
Typ = GetType(System.String)
ReDim Preserve typ147(UBound(typ147) + 1)
typ147(UBound(typ147)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ147(UBound(typ147) + 1)
typ147(UBound(typ147)) = Typ
ASTEmitIL.Emit(OpCodes.Ldstr, "' is not defined.")
Typ = GetType(System.String)
ReDim Preserve typ147(UBound(typ147) + 1)
typ147(UBound(typ147)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ147))
Typ = GetType(String).GetMethod("Concat", typ147).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 17)
ASTEmitIL.MarkSequencePoint(doc13, 787, 1, 787, 100)
Dim typ148(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("LineNr"))
Typ = GetType(ILEmitter).GetField("LineNr").FieldType
ReDim Preserve typ148(UBound(typ148) + 1)
typ148(UBound(typ148)) = Typ
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("CurSrcFile"))
Typ = GetType(ILEmitter).GetField("CurSrcFile").FieldType
ReDim Preserve typ148(UBound(typ148) + 1)
typ148(UBound(typ148)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(System.String)
ReDim Preserve typ148(UBound(typ148) + 1)
typ148(UBound(typ148)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("WriteError", typ148))
Typ = GetType(StreamUtils).GetMethod("WriteError", typ148).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 788, 1, 788, 100)
ASTEmitIL.Emit(OpCodes.Br, cont357)
ASTEmitIL.MarkLabel(fa357)
ASTEmitIL.Emit(OpCodes.Br, cont357)
ASTEmitIL.MarkLabel(cont357)
ASTEmitIL.MarkSequencePoint(doc13, 791, 1, 791, 100)
ASTEmitIL.Emit(OpCodes.Br, cont345)
ASTEmitIL.MarkLabel(fa345)
ASTEmitIL.MarkSequencePoint(doc13, 793, 1, 793, 100)
Dim typ149(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 37)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
ReDim Preserve typ149(UBound(typ149) + 1)
typ149(UBound(typ149)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ149))
Typ = Typ03.GetMethod("Equals", typ149).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc13, 795, 1, 795, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa358 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru358 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont358 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru358)
ASTEmitIL.Emit(OpCodes.Br, fa358)
ASTEmitIL.MarkLabel(tru358)
ASTEmitIL.MarkSequencePoint(doc13, 796, 1, 796, 100)
Dim typ150(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 37)
Typ = GetType(System.Type)
ReDim Preserve typ150(UBound(typ150) + 1)
typ150(UBound(typ150)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ150(UBound(typ150) + 1)
typ150(UBound(typ150)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadField", typ150))
Typ = GetType(Loader).GetMethod("LoadField", typ150).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 52)
ASTEmitIL.MarkSequencePoint(doc13, 797, 1, 797, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("MemberTyp"))
Typ = GetType(Loader).GetField("MemberTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 798, 1, 798, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("MemberTyp"))
Typ = GetType(Loader).GetField("MemberTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
ASTEmitIL.MarkSequencePoint(doc13, 799, 1, 799, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("MemberTyp"))
Typ = GetType(Loader).GetField("MemberTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 37)
ASTEmitIL.MarkSequencePoint(doc13, 800, 1, 800, 100)
ASTEmitIL.Emit(OpCodes.Br, cont358)
ASTEmitIL.MarkLabel(fa358)
ASTEmitIL.MarkSequencePoint(doc13, 801, 1, 801, 100)
Dim typ151(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ151(UBound(typ151) + 1)
typ151(UBound(typ151)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ151))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ151).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 52)
ASTEmitIL.MarkSequencePoint(doc13, 802, 1, 802, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 803, 1, 803, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
ASTEmitIL.MarkSequencePoint(doc13, 804, 1, 804, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 37)
ASTEmitIL.MarkSequencePoint(doc13, 805, 1, 805, 100)
ASTEmitIL.Emit(OpCodes.Br, cont358)
ASTEmitIL.MarkLabel(cont358)
ASTEmitIL.MarkSequencePoint(doc13, 807, 1, 807, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa359 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru359 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont359 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru359)
ASTEmitIL.Emit(OpCodes.Br, fa359)
ASTEmitIL.MarkLabel(tru359)
ASTEmitIL.MarkSequencePoint(doc13, 808, 1, 808, 100)
Dim typ155(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(FieldInfo)
ReDim Preserve typ155(UBound(typ155) + 1)
typ155(UBound(typ155)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 54)
Typ = GetType(System.Boolean)
ReDim Preserve typ155(UBound(typ155) + 1)
typ155(UBound(typ155)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ155))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ155).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 809, 1, 809, 100)
ASTEmitIL.Emit(OpCodes.Br, cont359)
ASTEmitIL.MarkLabel(fa359)
ASTEmitIL.Emit(OpCodes.Br, cont359)
ASTEmitIL.MarkLabel(cont359)
ASTEmitIL.MarkSequencePoint(doc13, 811, 1, 811, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 54)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa360 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru360 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont360 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru360)
ASTEmitIL.Emit(OpCodes.Br, fa360)
ASTEmitIL.MarkLabel(tru360)
ASTEmitIL.MarkSequencePoint(doc13, 812, 1, 812, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 54)
ASTEmitIL.MarkSequencePoint(doc13, 813, 1, 813, 100)
ASTEmitIL.Emit(OpCodes.Br, cont360)
ASTEmitIL.MarkLabel(fa360)
ASTEmitIL.Emit(OpCodes.Br, cont360)
ASTEmitIL.MarkLabel(cont360)
ASTEmitIL.MarkSequencePoint(doc13, 815, 1, 815, 100)
ASTEmitIL.Emit(OpCodes.Br, cont345)
ASTEmitIL.MarkLabel(cont345)
ASTEmitIL.MarkSequencePoint(doc13, 817, 1, 817, 100)
ASTEmitIL.MarkLabel(label15)
ASTEmitIL.MarkSequencePoint(doc13, 819, 1, 819, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 27)
ASTEmitIL.MarkSequencePoint(doc13, 821, 1, 821, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(System.Int32)
Dim fa361 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru361 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont361 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru361)
ASTEmitIL.Emit(OpCodes.Br, fa361)
ASTEmitIL.MarkLabel(tru361)
ASTEmitIL.MarkSequencePoint(doc13, 822, 1, 822, 100)
ASTEmitIL.Emit(OpCodes.Br, label14)
ASTEmitIL.MarkSequencePoint(doc13, 823, 1, 823, 100)
ASTEmitIL.Emit(OpCodes.Br, cont361)
ASTEmitIL.MarkLabel(fa361)
ASTEmitIL.MarkSequencePoint(doc13, 824, 1, 824, 100)
ASTEmitIL.Emit(OpCodes.Br, label13)
ASTEmitIL.MarkSequencePoint(doc13, 825, 1, 825, 100)
ASTEmitIL.Emit(OpCodes.Br, cont361)
ASTEmitIL.MarkLabel(cont361)
ASTEmitIL.MarkSequencePoint(doc13, 827, 1, 827, 100)
ASTEmitIL.MarkLabel(label14)
ASTEmitIL.MarkSequencePoint(doc13, 829, 1, 829, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AddrFlg"))
ASTEmitIL.MarkSequencePoint(doc13, 831, 1, 831, 100)
ASTEmitIL.Emit(OpCodes.Br, cont344)
ASTEmitIL.MarkLabel(fa344)
ASTEmitIL.Emit(OpCodes.Br, cont344)
ASTEmitIL.MarkLabel(cont344)
ASTEmitIL.MarkSequencePoint(doc13, 833, 1, 833, 100)
ASTEmitIL.Emit(OpCodes.Br, cont342)
ASTEmitIL.MarkLabel(fa342)
ASTEmitIL.MarkSequencePoint(doc13, 835, 1, 835, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa362 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru362 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont362 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru362)
ASTEmitIL.Emit(OpCodes.Br, fa362)
ASTEmitIL.MarkLabel(tru362)
ASTEmitIL.MarkSequencePoint(doc13, 836, 1, 836, 100)
Dim typ156(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReDim Preserve typ156(UBound(typ156) + 1)
typ156(UBound(typ156)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdarg", typ156))
Typ = GetType(ILEmitter).GetMethod("EmitLdarg", typ156).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 837, 1, 837, 100)
ASTEmitIL.Emit(OpCodes.Br, cont362)
ASTEmitIL.MarkLabel(fa362)
ASTEmitIL.Emit(OpCodes.Br, cont362)
ASTEmitIL.MarkLabel(cont362)
ASTEmitIL.MarkSequencePoint(doc13, 839, 1, 839, 100)
ASTEmitIL.Emit(OpCodes.Br, cont342)
ASTEmitIL.MarkLabel(cont342)
ASTEmitIL.MarkSequencePoint(doc13, 841, 1, 841, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Add)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc13, 844, 1, 844, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 55)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa363 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru363 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont363 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru363)
ASTEmitIL.Emit(OpCodes.Br, fa363)
ASTEmitIL.MarkLabel(tru363)
ASTEmitIL.MarkSequencePoint(doc13, 846, 1, 846, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 27)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa364 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru364 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont364 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru364)
ASTEmitIL.Emit(OpCodes.Br, fa364)
ASTEmitIL.MarkLabel(tru364)
ASTEmitIL.MarkSequencePoint(doc13, 847, 1, 847, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa365 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru365 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont365 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru365)
ASTEmitIL.Emit(OpCodes.Br, fa365)
ASTEmitIL.MarkLabel(tru365)
ASTEmitIL.MarkSequencePoint(doc13, 848, 1, 848, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(MethodCallTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodCallTok).GetField("TypArr"))
Typ = GetType(MethodCallTok).GetField("TypArr").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 45)
ASTEmitIL.MarkSequencePoint(doc13, 849, 1, 849, 100)
Dim typ157(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ157(UBound(typ157) + 1)
typ157(UBound(typ157)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ157(UBound(typ157) + 1)
typ157(UBound(typ157)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocMet", typ157))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocMet", typ157).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 39)
ASTEmitIL.MarkSequencePoint(doc13, 850, 1, 850, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(MethodInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsStatic", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsStatic", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 54)
ASTEmitIL.MarkSequencePoint(doc13, 851, 1, 851, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 54)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa366 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru366 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont366 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru366)
ASTEmitIL.Emit(OpCodes.Br, fa366)
ASTEmitIL.MarkLabel(tru366)
ASTEmitIL.MarkSequencePoint(doc13, 852, 1, 852, 100)
Dim typ159(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReDim Preserve typ159(UBound(typ159) + 1)
typ159(UBound(typ159)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdarg", typ159))
Typ = GetType(ILEmitter).GetMethod("EmitLdarg", typ159).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 853, 1, 853, 100)
ASTEmitIL.Emit(OpCodes.Br, cont366)
ASTEmitIL.MarkLabel(fa366)
ASTEmitIL.Emit(OpCodes.Br, cont366)
ASTEmitIL.MarkLabel(cont366)
ASTEmitIL.MarkSequencePoint(doc13, 854, 1, 854, 100)
ASTEmitIL.Emit(OpCodes.Br, cont365)
ASTEmitIL.MarkLabel(fa365)
ASTEmitIL.Emit(OpCodes.Br, cont365)
ASTEmitIL.MarkLabel(cont365)
ASTEmitIL.MarkSequencePoint(doc13, 855, 1, 855, 100)
ASTEmitIL.Emit(OpCodes.Br, cont364)
ASTEmitIL.MarkLabel(fa364)
ASTEmitIL.Emit(OpCodes.Br, cont364)
ASTEmitIL.MarkLabel(cont364)
ASTEmitIL.MarkSequencePoint(doc13, 857, 1, 857, 100)
ASTEmitIL.Emit(OpCodes.Br, cont363)
ASTEmitIL.MarkLabel(fa363)
ASTEmitIL.Emit(OpCodes.Br, cont363)
ASTEmitIL.MarkLabel(cont363)
ASTEmitIL.MarkSequencePoint(doc13, 859, 1, 859, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 12)
ASTEmitIL.MarkSequencePoint(doc13, 860, 1, 860, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type03"))
ASTEmitIL.MarkSequencePoint(doc13, 863, 1, 863, 100)
Dim label16 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc13, 864, 1, 864, 100)
Dim label17 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc13, 866, 1, 866, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc13, 867, 1, 867, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
ASTEmitIL.Emit(OpCodes.Newarr, GetType(System.Type))
ASTEmitIL.Emit(OpCodes.Stloc, 45)
ASTEmitIL.MarkSequencePoint(doc13, 869, 1, 869, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 44)
Typ = GetType(Expr).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa367 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru367 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont367 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru367)
ASTEmitIL.Emit(OpCodes.Br, fa367)
ASTEmitIL.MarkLabel(tru367)
ASTEmitIL.MarkSequencePoint(doc13, 870, 1, 870, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(System.Type).GetField("EmptyTypes"))
Typ = GetType(System.Type).GetField("EmptyTypes").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 45)
ASTEmitIL.MarkSequencePoint(doc13, 871, 1, 871, 100)
ASTEmitIL.Emit(OpCodes.Br, label17)
ASTEmitIL.MarkSequencePoint(doc13, 872, 1, 872, 100)
ASTEmitIL.Emit(OpCodes.Br, cont367)
ASTEmitIL.MarkLabel(fa367)
ASTEmitIL.Emit(OpCodes.Br, cont367)
ASTEmitIL.MarkLabel(cont367)
ASTEmitIL.MarkSequencePoint(doc13, 874, 1, 874, 100)
ASTEmitIL.MarkLabel(label16)
ASTEmitIL.MarkSequencePoint(doc13, 876, 1, 876, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Add)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc13, 877, 1, 877, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 44)
Typ = GetType(Expr).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(Expr).MakeArrayType().GetElementType())
Typ = GetType(Expr).MakeArrayType().GetElementType()
ASTEmitIL.Emit(OpCodes.Stloc, 48)
ASTEmitIL.MarkSequencePoint(doc13, 879, 1, 879, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 48)
Typ = GetType(Expr)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
Dim fa368 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru368 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont368 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru368)
ASTEmitIL.Emit(OpCodes.Br, fa368)
ASTEmitIL.MarkLabel(tru368)
ASTEmitIL.MarkSequencePoint(doc13, 880, 1, 880, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 48)
Typ = GetType(Expr)
ASTEmitIL.Emit(OpCodes.Stloc, 49)
ASTEmitIL.MarkSequencePoint(doc13, 881, 1, 881, 100)
ASTEmitIL.Emit(OpCodes.Br, cont368)
ASTEmitIL.MarkLabel(fa368)
ASTEmitIL.MarkSequencePoint(doc13, 882, 1, 882, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 48)
Typ = GetType(Expr)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
Dim fa369 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru369 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont369 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Bge, tru369)
ASTEmitIL.Emit(OpCodes.Br, fa369)
ASTEmitIL.MarkLabel(tru369)
ASTEmitIL.MarkSequencePoint(doc13, 883, 1, 883, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ160(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 48)
Typ = GetType(Expr)
ReDim Preserve typ160(UBound(typ160) + 1)
typ160(UBound(typ160)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ConvToRPN)
Typ = ConvToRPN.ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 49)
ASTEmitIL.MarkSequencePoint(doc13, 884, 1, 884, 100)
ASTEmitIL.Emit(OpCodes.Br, cont369)
ASTEmitIL.MarkLabel(fa369)
ASTEmitIL.Emit(OpCodes.Br, cont369)
ASTEmitIL.MarkLabel(cont369)
ASTEmitIL.MarkSequencePoint(doc13, 885, 1, 885, 100)
ASTEmitIL.Emit(OpCodes.Br, cont368)
ASTEmitIL.MarkLabel(cont368)
ASTEmitIL.MarkSequencePoint(doc13, 887, 1, 887, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ161(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 49)
Typ = GetType(Expr)
ReDim Preserve typ161(UBound(typ161) + 1)
typ161(UBound(typ161)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ConvToAST)
Typ = ConvToAST.ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 50)
ASTEmitIL.MarkSequencePoint(doc13, 888, 1, 888, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ162(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 50)
Typ = GetType(Token)
ReDim Preserve typ162(UBound(typ162) + 1)
typ162(UBound(typ162)) = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ReDim Preserve typ162(UBound(typ162) + 1)
typ162(UBound(typ162)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 890, 1, 890, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 46)
ASTEmitIL.MarkSequencePoint(doc13, 891, 1, 891, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(System.Type).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("TypArr"))
ASTEmitIL.MarkSequencePoint(doc13, 892, 1, 892, 100)
Dim typ163(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ReDim Preserve typ163(UBound(typ163) + 1)
typ163(UBound(typ163)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("AddTyp", typ163))
Typ = GetType(AsmFactory).GetMethod("AddTyp", typ163).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 893, 1, 893, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 45)
ASTEmitIL.MarkSequencePoint(doc13, 894, 1, 894, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 46)
Typ = GetType(System.Type).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("TypArr"))
ASTEmitIL.MarkSequencePoint(doc13, 896, 1, 896, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldloc, 47)
Typ = GetType(System.Int32)
Dim fa370 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru370 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont370 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru370)
ASTEmitIL.Emit(OpCodes.Br, fa370)
ASTEmitIL.MarkLabel(tru370)
ASTEmitIL.MarkSequencePoint(doc13, 897, 1, 897, 100)
ASTEmitIL.Emit(OpCodes.Br, label17)
ASTEmitIL.MarkSequencePoint(doc13, 898, 1, 898, 100)
ASTEmitIL.Emit(OpCodes.Br, cont370)
ASTEmitIL.MarkLabel(fa370)
ASTEmitIL.MarkSequencePoint(doc13, 899, 1, 899, 100)
ASTEmitIL.Emit(OpCodes.Br, label16)
ASTEmitIL.MarkSequencePoint(doc13, 900, 1, 900, 100)
ASTEmitIL.Emit(OpCodes.Br, cont370)
ASTEmitIL.MarkLabel(cont370)
ASTEmitIL.MarkSequencePoint(doc13, 902, 1, 902, 100)
ASTEmitIL.MarkLabel(label17)
ASTEmitIL.MarkSequencePoint(doc13, 904, 1, 904, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa371 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru371 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont371 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru371)
ASTEmitIL.Emit(OpCodes.Br, fa371)
ASTEmitIL.MarkLabel(tru371)
ASTEmitIL.MarkSequencePoint(doc13, 905, 1, 905, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(MethodCallTok)
ASTEmitIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(System.Type).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Stfld, GetType(MethodCallTok).GetField("TypArr"))
ASTEmitIL.MarkSequencePoint(doc13, 906, 1, 906, 100)
ASTEmitIL.Emit(OpCodes.Br, cont371)
ASTEmitIL.MarkLabel(fa371)
ASTEmitIL.Emit(OpCodes.Br, cont371)
ASTEmitIL.MarkLabel(cont371)
ASTEmitIL.MarkSequencePoint(doc13, 908, 1, 908, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type03"))
Typ = GetType(AsmFactory).GetField("Type03").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 909, 1, 909, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc13, 911, 1, 911, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 37)
Typ = GetType(System.Type)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type05"))
ASTEmitIL.MarkSequencePoint(doc13, 913, 1, 913, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 55)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa372 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru372 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont372 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru372)
ASTEmitIL.Emit(OpCodes.Br, fa372)
ASTEmitIL.MarkLabel(tru372)
ASTEmitIL.MarkSequencePoint(doc13, 915, 1, 915, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 27)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa373 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru373 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont373 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru373)
ASTEmitIL.Emit(OpCodes.Br, fa373)
ASTEmitIL.MarkLabel(tru373)
ASTEmitIL.MarkSequencePoint(doc13, 917, 1, 917, 100)
Dim typ164(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 37)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
ReDim Preserve typ164(UBound(typ164) + 1)
typ164(UBound(typ164)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ164))
Typ = Typ03.GetMethod("Equals", typ164).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc13, 919, 1, 919, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa374 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru374 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont374 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru374)
ASTEmitIL.Emit(OpCodes.Br, fa374)
ASTEmitIL.MarkLabel(tru374)
ASTEmitIL.MarkSequencePoint(doc13, 920, 1, 920, 100)
Dim typ165(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 37)
Typ = GetType(System.Type)
ReDim Preserve typ165(UBound(typ165) + 1)
typ165(UBound(typ165)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ165(UBound(typ165) + 1)
typ165(UBound(typ165)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ165(UBound(typ165) + 1)
typ165(UBound(typ165)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadMethod", typ165))
Typ = GetType(Loader).GetMethod("LoadMethod", typ165).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 39)
ASTEmitIL.MarkSequencePoint(doc13, 921, 1, 921, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("MemberTyp"))
Typ = GetType(Loader).GetField("MemberTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 922, 1, 922, 100)
ASTEmitIL.Emit(OpCodes.Br, cont374)
ASTEmitIL.MarkLabel(fa374)
ASTEmitIL.MarkSequencePoint(doc13, 923, 1, 923, 100)
Dim typ166(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ166(UBound(typ166) + 1)
typ166(UBound(typ166)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ166(UBound(typ166) + 1)
typ166(UBound(typ166)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocMet", typ166))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocMet", typ166).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 39)
ASTEmitIL.MarkSequencePoint(doc13, 924, 1, 924, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(MethodInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 925, 1, 925, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(MethodInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsStatic", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsStatic", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 54)
ASTEmitIL.MarkSequencePoint(doc13, 926, 1, 926, 100)
ASTEmitIL.Emit(OpCodes.Br, cont374)
ASTEmitIL.MarkLabel(cont374)
ASTEmitIL.MarkSequencePoint(doc13, 928, 1, 928, 100)
ASTEmitIL.Emit(OpCodes.Br, cont373)
ASTEmitIL.MarkLabel(fa373)
ASTEmitIL.MarkSequencePoint(doc13, 930, 1, 930, 100)
Dim typ169(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ169(UBound(typ169) + 1)
typ169(UBound(typ169)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ169(UBound(typ169) + 1)
typ169(UBound(typ169)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocMet", typ169))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocMet", typ169).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 39)
ASTEmitIL.MarkSequencePoint(doc13, 931, 1, 931, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(MethodInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 932, 1, 932, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(MethodInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsStatic", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsStatic", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 54)
ASTEmitIL.MarkSequencePoint(doc13, 934, 1, 934, 100)
ASTEmitIL.Emit(OpCodes.Br, cont373)
ASTEmitIL.MarkLabel(cont373)
ASTEmitIL.MarkSequencePoint(doc13, 936, 1, 936, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa375 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru375 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont375 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru375)
ASTEmitIL.Emit(OpCodes.Br, fa375)
ASTEmitIL.MarkLabel(tru375)
ASTEmitIL.MarkSequencePoint(doc13, 937, 1, 937, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(MethodCallTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodCallTok).GetField("PopFlg"))
Typ = GetType(MethodCallTok).GetField("PopFlg").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("PopFlg"))
ASTEmitIL.MarkSequencePoint(doc13, 938, 1, 938, 100)
Dim typ172(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(MethodInfo)
ReDim Preserve typ172(UBound(typ172) + 1)
typ172(UBound(typ172)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 54)
Typ = GetType(System.Boolean)
ReDim Preserve typ172(UBound(typ172) + 1)
typ172(UBound(typ172)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitMetCall", typ172))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitMetCall", typ172).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 939, 1, 939, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("PopFlg"))
ASTEmitIL.MarkSequencePoint(doc13, 940, 1, 940, 100)
ASTEmitIL.Emit(OpCodes.Br, cont375)
ASTEmitIL.MarkLabel(fa375)
ASTEmitIL.Emit(OpCodes.Br, cont375)
ASTEmitIL.MarkLabel(cont375)
ASTEmitIL.MarkSequencePoint(doc13, 942, 1, 942, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(MethodCallTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodCallTok).GetField("PopFlg"))
Typ = GetType(MethodCallTok).GetField("PopFlg").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa376 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru376 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont376 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru376)
ASTEmitIL.Emit(OpCodes.Br, fa376)
ASTEmitIL.MarkLabel(tru376)
ASTEmitIL.MarkSequencePoint(doc13, 945, 1, 945, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(MethodNameTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodNameTok).GetField("IsArr"))
Typ = GetType(MethodNameTok).GetField("IsArr").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa377 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru377 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont377 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru377)
ASTEmitIL.Emit(OpCodes.Br, fa377)
ASTEmitIL.MarkLabel(tru377)
ASTEmitIL.MarkSequencePoint(doc13, 947, 1, 947, 100)
Dim typ173(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(MethodNameTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodNameTok).GetField("ArrLoc"))
Typ = GetType(MethodNameTok).GetField("ArrLoc").FieldType
ReDim Preserve typ173(UBound(typ173) + 1)
typ173(UBound(typ173)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CheckIfArrLen", typ173))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CheckIfArrLen", typ173).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc13, 948, 1, 948, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa378 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru378 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont378 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru378)
ASTEmitIL.Emit(OpCodes.Br, fa378)
ASTEmitIL.MarkLabel(tru378)
ASTEmitIL.MarkSequencePoint(doc13, 950, 1, 950, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa379 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru379 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont379 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru379)
ASTEmitIL.Emit(OpCodes.Br, fa379)
ASTEmitIL.MarkLabel(tru379)
ASTEmitIL.MarkSequencePoint(doc13, 951, 1, 951, 100)
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdlen", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitLdlen", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 952, 1, 952, 100)
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitConvI4", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitConvI4", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 953, 1, 953, 100)
ASTEmitIL.Emit(OpCodes.Br, cont379)
ASTEmitIL.MarkLabel(fa379)
ASTEmitIL.Emit(OpCodes.Br, cont379)
ASTEmitIL.MarkLabel(cont379)
ASTEmitIL.MarkSequencePoint(doc13, 954, 1, 954, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(System.Int32))
Dim typ174 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ174))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ174).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 956, 1, 956, 100)
ASTEmitIL.Emit(OpCodes.Br, cont378)
ASTEmitIL.MarkLabel(fa378)
ASTEmitIL.MarkSequencePoint(doc13, 958, 1, 958, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 37)
ASTEmitIL.MarkSequencePoint(doc13, 959, 1, 959, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(MethodNameTok)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ175(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(MethodNameTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodNameTok).GetField("ArrLoc"))
Typ = GetType(MethodNameTok).GetField("ArrLoc").FieldType
ReDim Preserve typ175(UBound(typ175) + 1)
typ175(UBound(typ175)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ConvToRPN)
Typ = ConvToRPN.ReturnType
ASTEmitIL.Emit(OpCodes.Stfld, GetType(MethodNameTok).GetField("ArrLoc"))
ASTEmitIL.MarkSequencePoint(doc13, 960, 1, 960, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ176(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(MethodNameTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodNameTok).GetField("ArrLoc"))
Typ = GetType(MethodNameTok).GetField("ArrLoc").FieldType
ReDim Preserve typ176(UBound(typ176) + 1)
typ176(UBound(typ176)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ConvToAST)
Typ = ConvToAST.ReturnType
ASTEmitIL.Emit(OpCodes.Starg, 1)
ASTEmitIL.MarkSequencePoint(doc13, 961, 1, 961, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ177(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ReDim Preserve typ177(UBound(typ177) + 1)
typ177(UBound(typ177)) = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ReDim Preserve typ177(UBound(typ177) + 1)
typ177(UBound(typ177)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 963, 1, 963, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 37)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetElementType", Type.EmptyTypes))
Typ = Typ03.GetMethod("GetElementType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 37)
ASTEmitIL.MarkSequencePoint(doc13, 964, 1, 964, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa380 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru380 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont380 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru380)
ASTEmitIL.Emit(OpCodes.Br, fa380)
ASTEmitIL.MarkLabel(tru380)
ASTEmitIL.MarkSequencePoint(doc13, 965, 1, 965, 100)
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitConvI", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitConvI", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 967, 1, 967, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(MethodNameTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodNameTok).GetField("MemberAccessFlg"))
Typ = GetType(MethodNameTok).GetField("MemberAccessFlg").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa381 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru381 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont381 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru381)
ASTEmitIL.Emit(OpCodes.Br, fa381)
ASTEmitIL.MarkLabel(tru381)
ASTEmitIL.MarkSequencePoint(doc13, 968, 1, 968, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AddrFlg"))
ASTEmitIL.MarkSequencePoint(doc13, 969, 1, 969, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 37)
Typ = GetType(System.Type)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
ASTEmitIL.MarkSequencePoint(doc13, 970, 1, 970, 100)
ASTEmitIL.Emit(OpCodes.Br, cont381)
ASTEmitIL.MarkLabel(fa381)
ASTEmitIL.Emit(OpCodes.Br, cont381)
ASTEmitIL.MarkLabel(cont381)
ASTEmitIL.MarkSequencePoint(doc13, 972, 1, 972, 100)
Dim typ179(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
ReDim Preserve typ179(UBound(typ179) + 1)
typ179(UBound(typ179)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitElemLd", typ179))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitElemLd", typ179).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 973, 1, 973, 100)
ASTEmitIL.Emit(OpCodes.Br, cont380)
ASTEmitIL.MarkLabel(fa380)
ASTEmitIL.Emit(OpCodes.Br, cont380)
ASTEmitIL.MarkLabel(cont380)
ASTEmitIL.MarkSequencePoint(doc13, 974, 1, 974, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 37)
Typ = GetType(System.Type)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 975, 1, 975, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AddrFlg"))
ASTEmitIL.MarkSequencePoint(doc13, 977, 1, 977, 100)
ASTEmitIL.Emit(OpCodes.Br, cont378)
ASTEmitIL.MarkLabel(cont378)
ASTEmitIL.MarkSequencePoint(doc13, 979, 1, 979, 100)
ASTEmitIL.Emit(OpCodes.Br, cont377)
ASTEmitIL.MarkLabel(fa377)
ASTEmitIL.Emit(OpCodes.Br, cont377)
ASTEmitIL.MarkLabel(cont377)
ASTEmitIL.MarkSequencePoint(doc13, 981, 1, 981, 100)
ASTEmitIL.Emit(OpCodes.Br, cont376)
ASTEmitIL.MarkLabel(fa376)
ASTEmitIL.Emit(OpCodes.Br, cont376)
ASTEmitIL.MarkLabel(cont376)
ASTEmitIL.MarkSequencePoint(doc13, 983, 1, 983, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(MethodNameTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodNameTok).GetField("MemberAccessFlg"))
Typ = GetType(MethodNameTok).GetField("MemberAccessFlg").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa382 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru382 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont382 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru382)
ASTEmitIL.Emit(OpCodes.Br, fa382)
ASTEmitIL.MarkLabel(tru382)
ASTEmitIL.MarkSequencePoint(doc13, 984, 1, 984, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("ChainFlg"))
ASTEmitIL.MarkSequencePoint(doc13, 985, 1, 985, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ180(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(MethodNameTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodNameTok).GetField("MemberToAccess"))
Typ = GetType(MethodNameTok).GetField("MemberToAccess").FieldType
ReDim Preserve typ180(UBound(typ180) + 1)
typ180(UBound(typ180)) = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ReDim Preserve typ180(UBound(typ180) + 1)
typ180(UBound(typ180)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 986, 1, 986, 100)
ASTEmitIL.Emit(OpCodes.Br, cont382)
ASTEmitIL.MarkLabel(fa382)
ASTEmitIL.Emit(OpCodes.Br, cont382)
ASTEmitIL.MarkLabel(cont382)
ASTEmitIL.MarkSequencePoint(doc13, 988, 1, 988, 100)
ASTEmitIL.Emit(OpCodes.Br, cont372)
ASTEmitIL.MarkLabel(fa372)
ASTEmitIL.MarkSequencePoint(doc13, 990, 1, 990, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnInhTyp"))
Typ = GetType(AsmFactory).GetField("CurnInhTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 37)
ASTEmitIL.MarkSequencePoint(doc13, 991, 1, 991, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("ProtectedFlag"))
ASTEmitIL.MarkSequencePoint(doc13, 992, 1, 992, 100)
Dim typ181(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 37)
Typ = GetType(System.Type)
ReDim Preserve typ181(UBound(typ181) + 1)
typ181(UBound(typ181)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ181(UBound(typ181) + 1)
typ181(UBound(typ181)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadCtor", typ181))
Typ = GetType(Loader).GetMethod("LoadCtor", typ181).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 51)
ASTEmitIL.MarkSequencePoint(doc13, 993, 1, 993, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("ProtectedFlag"))
ASTEmitIL.MarkSequencePoint(doc13, 995, 1, 995, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa383 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru383 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont383 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru383)
ASTEmitIL.Emit(OpCodes.Br, fa383)
ASTEmitIL.MarkLabel(tru383)
ASTEmitIL.MarkSequencePoint(doc13, 996, 1, 996, 100)
Dim typ182(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 51)
Typ = GetType(ConstructorInfo)
ReDim Preserve typ182(UBound(typ182) + 1)
typ182(UBound(typ182)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCallCtor", typ182))
Typ = GetType(ILEmitter).GetMethod("EmitCallCtor", typ182).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 997, 1, 997, 100)
ASTEmitIL.Emit(OpCodes.Br, cont383)
ASTEmitIL.MarkLabel(fa383)
ASTEmitIL.Emit(OpCodes.Br, cont383)
ASTEmitIL.MarkLabel(cont383)
ASTEmitIL.MarkSequencePoint(doc13, 999, 1, 999, 100)
ASTEmitIL.Emit(OpCodes.Br, cont372)
ASTEmitIL.MarkLabel(cont372)
ASTEmitIL.MarkSequencePoint(doc13, 1001, 1, 1001, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(MethodNameTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodNameTok).GetField("Conv"))
Typ = GetType(MethodNameTok).GetField("Conv").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa384 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru384 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont384 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru384)
ASTEmitIL.Emit(OpCodes.Br, fa384)
ASTEmitIL.MarkLabel(tru384)
ASTEmitIL.MarkSequencePoint(doc13, 1003, 1, 1003, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa385 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru385 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont385 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru385)
ASTEmitIL.Emit(OpCodes.Br, fa385)
ASTEmitIL.MarkLabel(tru385)
ASTEmitIL.MarkSequencePoint(doc13, 1004, 1, 1004, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 18)
ASTEmitIL.MarkSequencePoint(doc13, 1005, 1, 1005, 100)
ASTEmitIL.Emit(OpCodes.Br, cont385)
ASTEmitIL.MarkLabel(fa385)
ASTEmitIL.Emit(OpCodes.Br, cont385)
ASTEmitIL.MarkLabel(cont385)
ASTEmitIL.MarkSequencePoint(doc13, 1007, 1, 1007, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(MethodNameTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodNameTok).GetField("TTok"))
Typ = GetType(MethodNameTok).GetField("TTok").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 10)
ASTEmitIL.MarkSequencePoint(doc13, 1008, 1, 1008, 100)
Dim typ183(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
ReDim Preserve typ183(UBound(typ183) + 1)
typ183(UBound(typ183)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ183))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ183).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 1010, 1, 1010, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa386 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru386 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont386 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru386)
ASTEmitIL.Emit(OpCodes.Br, fa386)
ASTEmitIL.MarkLabel(tru386)
ASTEmitIL.MarkSequencePoint(doc13, 1011, 1, 1011, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 19)
ASTEmitIL.MarkSequencePoint(doc13, 1012, 1, 1012, 100)
Dim typ184(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Type)
ReDim Preserve typ184(UBound(typ184) + 1)
typ184(UBound(typ184)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(System.Type)
ReDim Preserve typ184(UBound(typ184) + 1)
typ184(UBound(typ184)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitConv", typ184))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitConv", typ184).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 1013, 1, 1013, 100)
ASTEmitIL.Emit(OpCodes.Br, cont386)
ASTEmitIL.MarkLabel(fa386)
ASTEmitIL.Emit(OpCodes.Br, cont386)
ASTEmitIL.MarkLabel(cont386)
ASTEmitIL.MarkSequencePoint(doc13, 1015, 1, 1015, 100)
ASTEmitIL.Emit(OpCodes.Br, cont384)
ASTEmitIL.MarkLabel(fa384)
ASTEmitIL.Emit(OpCodes.Br, cont384)
ASTEmitIL.MarkLabel(cont384)
ASTEmitIL.MarkSequencePoint(doc13, 1017, 1, 1017, 100)
ASTEmitIL.Emit(OpCodes.Br, label9)
ASTEmitIL.MarkSequencePoint(doc13, 1019, 1, 1019, 100)
ASTEmitIL.Emit(OpCodes.Br, cont339)
ASTEmitIL.MarkLabel(fa339)
ASTEmitIL.Emit(OpCodes.Br, cont339)
ASTEmitIL.MarkLabel(cont339)
ASTEmitIL.MarkSequencePoint(doc13, 1022, 1, 1022, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(NewCallTok))
Dim typ185 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ185))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ185).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc13, 1023, 1, 1023, 100)
Dim typ186(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ186(UBound(typ186) + 1)
typ186(UBound(typ186)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ186))
Typ = Typ03.GetMethod("IsInstanceOfType", typ186).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc13, 1025, 1, 1025, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa387 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru387 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont387 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru387)
ASTEmitIL.Emit(OpCodes.Br, fa387)
ASTEmitIL.MarkLabel(tru387)
ASTEmitIL.MarkSequencePoint(doc13, 1027, 1, 1027, 100)
Dim locbldr346 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(NewCallTok))
locbldr346.SetLocalSymInfo("nctok")
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Stloc, 58)
ASTEmitIL.MarkSequencePoint(doc13, 1028, 1, 1028, 100)
Dim locbldr347 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Type).MakeArrayType())
locbldr347.SetLocalSymInfo("delparamarr")
ASTEmitIL.MarkSequencePoint(doc13, 1029, 1, 1029, 100)
Dim locbldr348 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.String))
locbldr348.SetLocalSymInfo("delmtdnam")
ASTEmitIL.MarkSequencePoint(doc13, 1030, 1, 1030, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 58)
Typ = GetType(NewCallTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(NewCallTok).GetField("Name"))
Typ = GetType(NewCallTok).GetField("Name").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 10)
ASTEmitIL.MarkSequencePoint(doc13, 1031, 1, 1031, 100)
Dim typ187(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
ReDim Preserve typ187(UBound(typ187) + 1)
typ187(UBound(typ187)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ187))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ187).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 40)
ASTEmitIL.MarkSequencePoint(doc13, 1032, 1, 1032, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 58)
Typ = GetType(NewCallTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(NewCallTok).GetField("Params"))
Typ = GetType(NewCallTok).GetField("Params").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 44)
ASTEmitIL.MarkSequencePoint(doc13, 1033, 1, 1033, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 44)
Typ = GetType(Expr).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Sub)
ASTEmitIL.Emit(OpCodes.Stloc, 47)
ASTEmitIL.MarkSequencePoint(doc13, 1034, 1, 1034, 100)
Dim locbldr349 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr349.SetLocalSymInfo("delcreate")
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 61)
ASTEmitIL.MarkSequencePoint(doc13, 1036, 1, 1036, 100)
Dim label18 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc13, 1037, 1, 1037, 100)
Dim label19 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc13, 1039, 1, 1039, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(MulticastDelegate))
Dim typ188 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ188))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ188).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc13, 1040, 1, 1040, 100)
Dim typ189(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
ReDim Preserve typ189(UBound(typ189) + 1)
typ189(UBound(typ189)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsSubclassOf", typ189))
Typ = Typ03.GetMethod("IsSubclassOf", typ189).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc13, 1041, 1, 1041, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa388 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru388 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont388 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru388)
ASTEmitIL.Emit(OpCodes.Br, fa388)
ASTEmitIL.MarkLabel(tru388)
ASTEmitIL.MarkSequencePoint(doc13, 1042, 1, 1042, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 61)
ASTEmitIL.MarkSequencePoint(doc13, 1043, 1, 1043, 100)
Dim typ190(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(System.Type)
ReDim Preserve typ190(UBound(typ190) + 1)
typ190(UBound(typ190)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("GetDelegateInvokeParams", typ190))
Typ = GetType(Loader).GetMethod("GetDelegateInvokeParams", typ190).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 59)
ASTEmitIL.MarkSequencePoint(doc13, 1044, 1, 1044, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 44)
Typ = GetType(Expr).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(Expr).MakeArrayType().GetElementType())
Typ = GetType(Expr).MakeArrayType().GetElementType()
ASTEmitIL.Emit(OpCodes.Stloc, 48)
ASTEmitIL.MarkSequencePoint(doc13, 1045, 1, 1045, 100)
Dim typ191(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 48)
Typ = GetType(Expr)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ReDim Preserve typ191(UBound(typ191) + 1)
typ191(UBound(typ191)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("StripDelMtdName", typ191))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("StripDelMtdName", typ191).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 60)
ASTEmitIL.MarkSequencePoint(doc13, 1046, 1, 1046, 100)
ASTEmitIL.Emit(OpCodes.Br, label19)
ASTEmitIL.MarkSequencePoint(doc13, 1047, 1, 1047, 100)
ASTEmitIL.Emit(OpCodes.Br, cont388)
ASTEmitIL.MarkLabel(fa388)
ASTEmitIL.Emit(OpCodes.Br, cont388)
ASTEmitIL.MarkLabel(cont388)
ASTEmitIL.MarkSequencePoint(doc13, 1049, 1, 1049, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 44)
Typ = GetType(Expr).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa389 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru389 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont389 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru389)
ASTEmitIL.Emit(OpCodes.Br, fa389)
ASTEmitIL.MarkLabel(tru389)
ASTEmitIL.MarkSequencePoint(doc13, 1050, 1, 1050, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(System.Type).GetField("EmptyTypes"))
Typ = GetType(System.Type).GetField("EmptyTypes").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 45)
ASTEmitIL.MarkSequencePoint(doc13, 1051, 1, 1051, 100)
ASTEmitIL.Emit(OpCodes.Br, label19)
ASTEmitIL.MarkSequencePoint(doc13, 1052, 1, 1052, 100)
ASTEmitIL.Emit(OpCodes.Br, cont389)
ASTEmitIL.MarkLabel(fa389)
ASTEmitIL.MarkSequencePoint(doc13, 1053, 1, 1053, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
ASTEmitIL.Emit(OpCodes.Newarr, GetType(System.Type))
ASTEmitIL.Emit(OpCodes.Stloc, 45)
ASTEmitIL.MarkSequencePoint(doc13, 1054, 1, 1054, 100)
ASTEmitIL.Emit(OpCodes.Br, cont389)
ASTEmitIL.MarkLabel(cont389)
ASTEmitIL.MarkSequencePoint(doc13, 1056, 1, 1056, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc13, 1058, 1, 1058, 100)
ASTEmitIL.MarkLabel(label18)
ASTEmitIL.MarkSequencePoint(doc13, 1060, 1, 1060, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Add)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc13, 1061, 1, 1061, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 44)
Typ = GetType(Expr).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(Expr).MakeArrayType().GetElementType())
Typ = GetType(Expr).MakeArrayType().GetElementType()
ASTEmitIL.Emit(OpCodes.Stloc, 48)
ASTEmitIL.MarkSequencePoint(doc13, 1063, 1, 1063, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 48)
Typ = GetType(Expr)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
Dim fa390 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru390 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont390 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru390)
ASTEmitIL.Emit(OpCodes.Br, fa390)
ASTEmitIL.MarkLabel(tru390)
ASTEmitIL.MarkSequencePoint(doc13, 1064, 1, 1064, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 48)
Typ = GetType(Expr)
ASTEmitIL.Emit(OpCodes.Stloc, 49)
ASTEmitIL.MarkSequencePoint(doc13, 1065, 1, 1065, 100)
ASTEmitIL.Emit(OpCodes.Br, cont390)
ASTEmitIL.MarkLabel(fa390)
ASTEmitIL.MarkSequencePoint(doc13, 1066, 1, 1066, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 48)
Typ = GetType(Expr)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
Dim fa391 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru391 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont391 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Bge, tru391)
ASTEmitIL.Emit(OpCodes.Br, fa391)
ASTEmitIL.MarkLabel(tru391)
ASTEmitIL.MarkSequencePoint(doc13, 1067, 1, 1067, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ192(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 48)
Typ = GetType(Expr)
ReDim Preserve typ192(UBound(typ192) + 1)
typ192(UBound(typ192)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ConvToRPN)
Typ = ConvToRPN.ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 49)
ASTEmitIL.MarkSequencePoint(doc13, 1068, 1, 1068, 100)
ASTEmitIL.Emit(OpCodes.Br, cont391)
ASTEmitIL.MarkLabel(fa391)
ASTEmitIL.Emit(OpCodes.Br, cont391)
ASTEmitIL.MarkLabel(cont391)
ASTEmitIL.MarkSequencePoint(doc13, 1069, 1, 1069, 100)
ASTEmitIL.Emit(OpCodes.Br, cont390)
ASTEmitIL.MarkLabel(cont390)
ASTEmitIL.MarkSequencePoint(doc13, 1071, 1, 1071, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ193(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 49)
Typ = GetType(Expr)
ReDim Preserve typ193(UBound(typ193) + 1)
typ193(UBound(typ193)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ConvToAST)
Typ = ConvToAST.ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 50)
ASTEmitIL.MarkSequencePoint(doc13, 1072, 1, 1072, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ194(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 50)
Typ = GetType(Token)
ReDim Preserve typ194(UBound(typ194) + 1)
typ194(UBound(typ194)) = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ReDim Preserve typ194(UBound(typ194) + 1)
typ194(UBound(typ194)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 1074, 1, 1074, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 46)
ASTEmitIL.MarkSequencePoint(doc13, 1075, 1, 1075, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(System.Type).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("TypArr"))
ASTEmitIL.MarkSequencePoint(doc13, 1076, 1, 1076, 100)
Dim typ195(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ReDim Preserve typ195(UBound(typ195) + 1)
typ195(UBound(typ195)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("AddTyp", typ195))
Typ = GetType(AsmFactory).GetMethod("AddTyp", typ195).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 1077, 1, 1077, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 45)
ASTEmitIL.MarkSequencePoint(doc13, 1078, 1, 1078, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 46)
Typ = GetType(System.Type).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("TypArr"))
ASTEmitIL.MarkSequencePoint(doc13, 1080, 1, 1080, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldloc, 47)
Typ = GetType(System.Int32)
Dim fa392 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru392 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont392 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru392)
ASTEmitIL.Emit(OpCodes.Br, fa392)
ASTEmitIL.MarkLabel(tru392)
ASTEmitIL.MarkSequencePoint(doc13, 1081, 1, 1081, 100)
ASTEmitIL.Emit(OpCodes.Br, label19)
ASTEmitIL.MarkSequencePoint(doc13, 1082, 1, 1082, 100)
ASTEmitIL.Emit(OpCodes.Br, cont392)
ASTEmitIL.MarkLabel(fa392)
ASTEmitIL.MarkSequencePoint(doc13, 1083, 1, 1083, 100)
ASTEmitIL.Emit(OpCodes.Br, label18)
ASTEmitIL.MarkSequencePoint(doc13, 1084, 1, 1084, 100)
ASTEmitIL.Emit(OpCodes.Br, cont392)
ASTEmitIL.MarkLabel(cont392)
ASTEmitIL.MarkSequencePoint(doc13, 1086, 1, 1086, 100)
ASTEmitIL.MarkLabel(label19)
ASTEmitIL.MarkSequencePoint(doc13, 1088, 1, 1088, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 61)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa393 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru393 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont393 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru393)
ASTEmitIL.Emit(OpCodes.Br, fa393)
ASTEmitIL.MarkLabel(tru393)
ASTEmitIL.MarkSequencePoint(doc13, 1089, 1, 1089, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
ASTEmitIL.Emit(OpCodes.Newarr, GetType(System.Type))
ASTEmitIL.Emit(OpCodes.Stloc, 45)
ASTEmitIL.MarkSequencePoint(doc13, 1090, 1, 1090, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(System.Object))
Dim typ196 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ196))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ196).ReturnType
ASTEmitIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
ASTEmitIL.MarkSequencePoint(doc13, 1091, 1, 1091, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(IntPtr))
Dim typ197 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ197))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ197).ReturnType
ASTEmitIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
ASTEmitIL.MarkSequencePoint(doc13, 1095, 1, 1095, 100)
Dim typ198(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 60)
Typ = GetType(System.String)
ReDim Preserve typ198(UBound(typ198) + 1)
typ198(UBound(typ198)) = Typ
ASTEmitIL.Emit(OpCodes.Ldstr, ":")
Typ = GetType(System.String)
ReDim Preserve typ198(UBound(typ198) + 1)
typ198(UBound(typ198)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ParseUtils).GetMethod("StringParser", typ198))
Typ = GetType(ParseUtils).GetMethod("StringParser", typ198).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 38)
ASTEmitIL.MarkSequencePoint(doc13, 1096, 1, 1096, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 26)
ASTEmitIL.MarkSequencePoint(doc13, 1097, 1, 1097, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 27)
ASTEmitIL.MarkSequencePoint(doc13, 1099, 1, 1099, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 56)
ASTEmitIL.MarkSequencePoint(doc13, 1100, 1, 1100, 100)
ASTEmitIL.Emit(OpCodes.Ldnull)
ASTEmitIL.Emit(OpCodes.Stloc, 37)
ASTEmitIL.MarkSequencePoint(doc13, 1101, 1, 1101, 100)
ASTEmitIL.Emit(OpCodes.Ldnull)
ASTEmitIL.Emit(OpCodes.Stloc, 39)
ASTEmitIL.MarkSequencePoint(doc13, 1102, 1, 1102, 100)
ASTEmitIL.Emit(OpCodes.Ldnull)
ASTEmitIL.Emit(OpCodes.Stloc, 52)
ASTEmitIL.MarkSequencePoint(doc13, 1104, 1, 1104, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc13, 1105, 1, 1105, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(System.String).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Sub)
ASTEmitIL.Emit(OpCodes.Stloc, 13)
ASTEmitIL.MarkSequencePoint(doc13, 1107, 1, 1107, 100)
Dim typ199(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ199(UBound(typ199) + 1)
typ199(UBound(typ199)) = Typ
ASTEmitIL.Emit(OpCodes.Ldstr, "me")
Typ = GetType(System.String)
ReDim Preserve typ199(UBound(typ199) + 1)
typ199(UBound(typ199)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ199))
Typ = GetType(String).GetMethod("Compare", typ199).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 29)
ASTEmitIL.MarkSequencePoint(doc13, 1108, 1, 1108, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 29)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa394 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru394 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont394 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru394)
ASTEmitIL.Emit(OpCodes.Br, fa394)
ASTEmitIL.MarkLabel(tru394)
ASTEmitIL.MarkSequencePoint(doc13, 1109, 1, 1109, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Add)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc13, 1110, 1, 1110, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 26)
ASTEmitIL.MarkSequencePoint(doc13, 1111, 1, 1111, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 56)
ASTEmitIL.MarkSequencePoint(doc13, 1112, 1, 1112, 100)
ASTEmitIL.Emit(OpCodes.Br, cont394)
ASTEmitIL.MarkLabel(fa394)
ASTEmitIL.Emit(OpCodes.Br, cont394)
ASTEmitIL.MarkLabel(cont394)
ASTEmitIL.MarkSequencePoint(doc13, 1114, 1, 1114, 100)
Dim label20 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc13, 1115, 1, 1115, 100)
Dim label21 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc13, 1116, 1, 1116, 100)
Dim label22 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc13, 1118, 1, 1118, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(System.String).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 29)
ASTEmitIL.MarkSequencePoint(doc13, 1119, 1, 1119, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 29)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldloc, 56)
Typ = GetType(System.Int32)
Dim fa395 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru395 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont395 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Bge, tru395)
ASTEmitIL.Emit(OpCodes.Br, fa395)
ASTEmitIL.MarkLabel(tru395)
ASTEmitIL.MarkSequencePoint(doc13, 1121, 1, 1121, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AddrFlg"))
ASTEmitIL.MarkSequencePoint(doc13, 1123, 1, 1123, 100)
ASTEmitIL.MarkLabel(label20)
ASTEmitIL.MarkSequencePoint(doc13, 1124, 1, 1124, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Add)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc13, 1126, 1, 1126, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 27)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa396 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru396 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont396 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru396)
ASTEmitIL.Emit(OpCodes.Br, fa396)
ASTEmitIL.MarkLabel(tru396)
ASTEmitIL.MarkSequencePoint(doc13, 1128, 1, 1128, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 26)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa397 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru397 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont397 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru397)
ASTEmitIL.Emit(OpCodes.Br, fa397)
ASTEmitIL.MarkLabel(tru397)
ASTEmitIL.MarkSequencePoint(doc13, 1129, 1, 1129, 100)
Dim typ200(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ200(UBound(typ200) + 1)
typ200(UBound(typ200)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindVar", typ200))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindVar", typ200).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 53)
ASTEmitIL.MarkSequencePoint(doc13, 1130, 1, 1130, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 53)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldnull)
Dim fa398 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru398 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont398 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, fa398)
ASTEmitIL.Emit(OpCodes.Br, tru398)
ASTEmitIL.MarkLabel(tru398)
ASTEmitIL.MarkSequencePoint(doc13, 1131, 1, 1131, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa399 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru399 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont399 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru399)
ASTEmitIL.Emit(OpCodes.Br, fa399)
ASTEmitIL.MarkLabel(tru399)
ASTEmitIL.MarkSequencePoint(doc13, 1132, 1, 1132, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 53)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
ASTEmitIL.MarkSequencePoint(doc13, 1133, 1, 1133, 100)
Dim typ201(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 53)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("Index"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("Index").FieldType
ReDim Preserve typ201(UBound(typ201) + 1)
typ201(UBound(typ201)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 53)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("LocArg"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("LocArg").FieldType
ReDim Preserve typ201(UBound(typ201) + 1)
typ201(UBound(typ201)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLocLd", typ201))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLocLd", typ201).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 1134, 1, 1134, 100)
ASTEmitIL.Emit(OpCodes.Br, cont399)
ASTEmitIL.MarkLabel(fa399)
ASTEmitIL.Emit(OpCodes.Br, cont399)
ASTEmitIL.MarkLabel(cont399)
ASTEmitIL.MarkSequencePoint(doc13, 1135, 1, 1135, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 53)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 1136, 1, 1136, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 53)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 37)
ASTEmitIL.MarkSequencePoint(doc13, 1137, 1, 1137, 100)
ASTEmitIL.Emit(OpCodes.Br, label22)
ASTEmitIL.MarkSequencePoint(doc13, 1138, 1, 1138, 100)
ASTEmitIL.Emit(OpCodes.Br, cont398)
ASTEmitIL.MarkLabel(fa398)
ASTEmitIL.MarkSequencePoint(doc13, 1140, 1, 1140, 100)
Dim typ202(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ202(UBound(typ202) + 1)
typ202(UBound(typ202)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ202))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ202).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 52)
ASTEmitIL.MarkSequencePoint(doc13, 1142, 1, 1142, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(FieldInfo)
ASTEmitIL.Emit(OpCodes.Ldnull)
Dim fa400 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru400 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont400 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, fa400)
ASTEmitIL.Emit(OpCodes.Br, tru400)
ASTEmitIL.MarkLabel(tru400)
ASTEmitIL.MarkSequencePoint(doc13, 1143, 1, 1143, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsStatic", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsStatic", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 31)
ASTEmitIL.MarkSequencePoint(doc13, 1144, 1, 1144, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa401 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru401 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont401 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru401)
ASTEmitIL.Emit(OpCodes.Br, fa401)
ASTEmitIL.MarkLabel(tru401)
ASTEmitIL.MarkSequencePoint(doc13, 1145, 1, 1145, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa402 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru402 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont402 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru402)
ASTEmitIL.Emit(OpCodes.Br, fa402)
ASTEmitIL.MarkLabel(tru402)
ASTEmitIL.MarkSequencePoint(doc13, 1146, 1, 1146, 100)
Dim typ204(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReDim Preserve typ204(UBound(typ204) + 1)
typ204(UBound(typ204)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdarg", typ204))
Typ = GetType(ILEmitter).GetMethod("EmitLdarg", typ204).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 1147, 1, 1147, 100)
ASTEmitIL.Emit(OpCodes.Br, cont402)
ASTEmitIL.MarkLabel(fa402)
ASTEmitIL.Emit(OpCodes.Br, cont402)
ASTEmitIL.MarkLabel(cont402)
ASTEmitIL.MarkSequencePoint(doc13, 1148, 1, 1148, 100)
ASTEmitIL.Emit(OpCodes.Br, cont401)
ASTEmitIL.MarkLabel(fa401)
ASTEmitIL.Emit(OpCodes.Br, cont401)
ASTEmitIL.MarkLabel(cont401)
ASTEmitIL.MarkSequencePoint(doc13, 1149, 1, 1149, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa403 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru403 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont403 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru403)
ASTEmitIL.Emit(OpCodes.Br, fa403)
ASTEmitIL.MarkLabel(tru403)
ASTEmitIL.MarkSequencePoint(doc13, 1150, 1, 1150, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
ASTEmitIL.MarkSequencePoint(doc13, 1151, 1, 1151, 100)
Dim typ206(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(FieldInfo)
ReDim Preserve typ206(UBound(typ206) + 1)
typ206(UBound(typ206)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.Boolean)
ReDim Preserve typ206(UBound(typ206) + 1)
typ206(UBound(typ206)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ206))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ206).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 1152, 1, 1152, 100)
ASTEmitIL.Emit(OpCodes.Br, cont403)
ASTEmitIL.MarkLabel(fa403)
ASTEmitIL.Emit(OpCodes.Br, cont403)
ASTEmitIL.MarkLabel(cont403)
ASTEmitIL.MarkSequencePoint(doc13, 1153, 1, 1153, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 1154, 1, 1154, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 37)
ASTEmitIL.MarkSequencePoint(doc13, 1155, 1, 1155, 100)
ASTEmitIL.Emit(OpCodes.Br, label22)
ASTEmitIL.MarkSequencePoint(doc13, 1156, 1, 1156, 100)
ASTEmitIL.Emit(OpCodes.Br, cont400)
ASTEmitIL.MarkLabel(fa400)
ASTEmitIL.Emit(OpCodes.Br, cont400)
ASTEmitIL.MarkLabel(cont400)
ASTEmitIL.MarkSequencePoint(doc13, 1158, 1, 1158, 100)
ASTEmitIL.Emit(OpCodes.Br, cont398)
ASTEmitIL.MarkLabel(cont398)
ASTEmitIL.MarkSequencePoint(doc13, 1160, 1, 1160, 100)
ASTEmitIL.Emit(OpCodes.Br, cont397)
ASTEmitIL.MarkLabel(fa397)
ASTEmitIL.MarkSequencePoint(doc13, 1162, 1, 1162, 100)
Dim typ209(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ209(UBound(typ209) + 1)
typ209(UBound(typ209)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ209))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ209).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 52)
ASTEmitIL.MarkSequencePoint(doc13, 1164, 1, 1164, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(FieldInfo)
ASTEmitIL.Emit(OpCodes.Ldnull)
Dim fa404 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru404 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont404 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, fa404)
ASTEmitIL.Emit(OpCodes.Br, tru404)
ASTEmitIL.MarkLabel(tru404)
ASTEmitIL.MarkSequencePoint(doc13, 1165, 1, 1165, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsStatic", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsStatic", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 31)
ASTEmitIL.MarkSequencePoint(doc13, 1166, 1, 1166, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa405 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru405 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont405 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru405)
ASTEmitIL.Emit(OpCodes.Br, fa405)
ASTEmitIL.MarkLabel(tru405)
ASTEmitIL.MarkSequencePoint(doc13, 1167, 1, 1167, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa406 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru406 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont406 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru406)
ASTEmitIL.Emit(OpCodes.Br, fa406)
ASTEmitIL.MarkLabel(tru406)
ASTEmitIL.MarkSequencePoint(doc13, 1168, 1, 1168, 100)
Dim typ211(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReDim Preserve typ211(UBound(typ211) + 1)
typ211(UBound(typ211)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdarg", typ211))
Typ = GetType(ILEmitter).GetMethod("EmitLdarg", typ211).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 1169, 1, 1169, 100)
ASTEmitIL.Emit(OpCodes.Br, cont406)
ASTEmitIL.MarkLabel(fa406)
ASTEmitIL.Emit(OpCodes.Br, cont406)
ASTEmitIL.MarkLabel(cont406)
ASTEmitIL.MarkSequencePoint(doc13, 1170, 1, 1170, 100)
ASTEmitIL.Emit(OpCodes.Br, cont405)
ASTEmitIL.MarkLabel(fa405)
ASTEmitIL.Emit(OpCodes.Br, cont405)
ASTEmitIL.MarkLabel(cont405)
ASTEmitIL.MarkSequencePoint(doc13, 1171, 1, 1171, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa407 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru407 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont407 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru407)
ASTEmitIL.Emit(OpCodes.Br, fa407)
ASTEmitIL.MarkLabel(tru407)
ASTEmitIL.MarkSequencePoint(doc13, 1172, 1, 1172, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
ASTEmitIL.MarkSequencePoint(doc13, 1173, 1, 1173, 100)
Dim typ213(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(FieldInfo)
ReDim Preserve typ213(UBound(typ213) + 1)
typ213(UBound(typ213)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.Boolean)
ReDim Preserve typ213(UBound(typ213) + 1)
typ213(UBound(typ213)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ213))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ213).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 1174, 1, 1174, 100)
ASTEmitIL.Emit(OpCodes.Br, cont407)
ASTEmitIL.MarkLabel(fa407)
ASTEmitIL.Emit(OpCodes.Br, cont407)
ASTEmitIL.MarkLabel(cont407)
ASTEmitIL.MarkSequencePoint(doc13, 1175, 1, 1175, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 1176, 1, 1176, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 37)
ASTEmitIL.MarkSequencePoint(doc13, 1177, 1, 1177, 100)
ASTEmitIL.Emit(OpCodes.Br, label22)
ASTEmitIL.MarkSequencePoint(doc13, 1178, 1, 1178, 100)
ASTEmitIL.Emit(OpCodes.Br, cont404)
ASTEmitIL.MarkLabel(fa404)
ASTEmitIL.Emit(OpCodes.Br, cont404)
ASTEmitIL.MarkLabel(cont404)
ASTEmitIL.MarkSequencePoint(doc13, 1180, 1, 1180, 100)
ASTEmitIL.Emit(OpCodes.Br, cont397)
ASTEmitIL.MarkLabel(cont397)
ASTEmitIL.MarkSequencePoint(doc13, 1182, 1, 1182, 100)
Dim typ216(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ216(UBound(typ216) + 1)
typ216(UBound(typ216)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadClass", typ216))
Typ = GetType(Loader).GetMethod("LoadClass", typ216).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 37)
ASTEmitIL.MarkSequencePoint(doc13, 1183, 1, 1183, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 54)
ASTEmitIL.MarkSequencePoint(doc13, 1185, 1, 1185, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 37)
Typ = GetType(System.Type)
ASTEmitIL.Emit(OpCodes.Ldnull)
Dim fa408 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru408 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont408 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru408)
ASTEmitIL.Emit(OpCodes.Br, fa408)
ASTEmitIL.MarkLabel(tru408)
ASTEmitIL.MarkSequencePoint(doc13, 1186, 1, 1186, 100)
Dim typ217(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldstr, "Variable or Class '")
Typ = GetType(System.String)
ReDim Preserve typ217(UBound(typ217) + 1)
typ217(UBound(typ217)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ217(UBound(typ217) + 1)
typ217(UBound(typ217)) = Typ
ASTEmitIL.Emit(OpCodes.Ldstr, "' is not defined.")
Typ = GetType(System.String)
ReDim Preserve typ217(UBound(typ217) + 1)
typ217(UBound(typ217)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ217))
Typ = GetType(String).GetMethod("Concat", typ217).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 17)
ASTEmitIL.MarkSequencePoint(doc13, 1187, 1, 1187, 100)
Dim typ218(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("LineNr"))
Typ = GetType(ILEmitter).GetField("LineNr").FieldType
ReDim Preserve typ218(UBound(typ218) + 1)
typ218(UBound(typ218)) = Typ
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("CurSrcFile"))
Typ = GetType(ILEmitter).GetField("CurSrcFile").FieldType
ReDim Preserve typ218(UBound(typ218) + 1)
typ218(UBound(typ218)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(System.String)
ReDim Preserve typ218(UBound(typ218) + 1)
typ218(UBound(typ218)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("WriteError", typ218))
Typ = GetType(StreamUtils).GetMethod("WriteError", typ218).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 1188, 1, 1188, 100)
ASTEmitIL.Emit(OpCodes.Br, cont408)
ASTEmitIL.MarkLabel(fa408)
ASTEmitIL.Emit(OpCodes.Br, cont408)
ASTEmitIL.MarkLabel(cont408)
ASTEmitIL.MarkSequencePoint(doc13, 1191, 1, 1191, 100)
ASTEmitIL.Emit(OpCodes.Br, cont396)
ASTEmitIL.MarkLabel(fa396)
ASTEmitIL.MarkSequencePoint(doc13, 1193, 1, 1193, 100)
Dim typ219(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 37)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
ReDim Preserve typ219(UBound(typ219) + 1)
typ219(UBound(typ219)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ219))
Typ = Typ03.GetMethod("Equals", typ219).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc13, 1195, 1, 1195, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa409 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru409 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont409 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru409)
ASTEmitIL.Emit(OpCodes.Br, fa409)
ASTEmitIL.MarkLabel(tru409)
ASTEmitIL.MarkSequencePoint(doc13, 1196, 1, 1196, 100)
Dim typ220(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 37)
Typ = GetType(System.Type)
ReDim Preserve typ220(UBound(typ220) + 1)
typ220(UBound(typ220)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ220(UBound(typ220) + 1)
typ220(UBound(typ220)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadField", typ220))
Typ = GetType(Loader).GetMethod("LoadField", typ220).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 52)
ASTEmitIL.MarkSequencePoint(doc13, 1197, 1, 1197, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("MemberTyp"))
Typ = GetType(Loader).GetField("MemberTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 1198, 1, 1198, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("MemberTyp"))
Typ = GetType(Loader).GetField("MemberTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
ASTEmitIL.MarkSequencePoint(doc13, 1199, 1, 1199, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("MemberTyp"))
Typ = GetType(Loader).GetField("MemberTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 37)
ASTEmitIL.MarkSequencePoint(doc13, 1200, 1, 1200, 100)
ASTEmitIL.Emit(OpCodes.Br, cont409)
ASTEmitIL.MarkLabel(fa409)
ASTEmitIL.MarkSequencePoint(doc13, 1201, 1, 1201, 100)
Dim typ221(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ221(UBound(typ221) + 1)
typ221(UBound(typ221)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ221))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ221).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 52)
ASTEmitIL.MarkSequencePoint(doc13, 1202, 1, 1202, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 1203, 1, 1203, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
ASTEmitIL.MarkSequencePoint(doc13, 1204, 1, 1204, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 37)
ASTEmitIL.MarkSequencePoint(doc13, 1205, 1, 1205, 100)
ASTEmitIL.Emit(OpCodes.Br, cont409)
ASTEmitIL.MarkLabel(cont409)
ASTEmitIL.MarkSequencePoint(doc13, 1207, 1, 1207, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa410 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru410 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont410 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru410)
ASTEmitIL.Emit(OpCodes.Br, fa410)
ASTEmitIL.MarkLabel(tru410)
ASTEmitIL.MarkSequencePoint(doc13, 1208, 1, 1208, 100)
Dim typ225(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(FieldInfo)
ReDim Preserve typ225(UBound(typ225) + 1)
typ225(UBound(typ225)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 54)
Typ = GetType(System.Boolean)
ReDim Preserve typ225(UBound(typ225) + 1)
typ225(UBound(typ225)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ225))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ225).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 1209, 1, 1209, 100)
ASTEmitIL.Emit(OpCodes.Br, cont410)
ASTEmitIL.MarkLabel(fa410)
ASTEmitIL.Emit(OpCodes.Br, cont410)
ASTEmitIL.MarkLabel(cont410)
ASTEmitIL.MarkSequencePoint(doc13, 1211, 1, 1211, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 54)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa411 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru411 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont411 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru411)
ASTEmitIL.Emit(OpCodes.Br, fa411)
ASTEmitIL.MarkLabel(tru411)
ASTEmitIL.MarkSequencePoint(doc13, 1212, 1, 1212, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 54)
ASTEmitIL.MarkSequencePoint(doc13, 1213, 1, 1213, 100)
ASTEmitIL.Emit(OpCodes.Br, cont411)
ASTEmitIL.MarkLabel(fa411)
ASTEmitIL.Emit(OpCodes.Br, cont411)
ASTEmitIL.MarkLabel(cont411)
ASTEmitIL.MarkSequencePoint(doc13, 1215, 1, 1215, 100)
ASTEmitIL.Emit(OpCodes.Br, cont396)
ASTEmitIL.MarkLabel(cont396)
ASTEmitIL.MarkSequencePoint(doc13, 1217, 1, 1217, 100)
ASTEmitIL.MarkLabel(label22)
ASTEmitIL.MarkSequencePoint(doc13, 1219, 1, 1219, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 27)
ASTEmitIL.MarkSequencePoint(doc13, 1221, 1, 1221, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(System.Int32)
Dim fa412 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru412 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont412 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru412)
ASTEmitIL.Emit(OpCodes.Br, fa412)
ASTEmitIL.MarkLabel(tru412)
ASTEmitIL.MarkSequencePoint(doc13, 1222, 1, 1222, 100)
ASTEmitIL.Emit(OpCodes.Br, label21)
ASTEmitIL.MarkSequencePoint(doc13, 1223, 1, 1223, 100)
ASTEmitIL.Emit(OpCodes.Br, cont412)
ASTEmitIL.MarkLabel(fa412)
ASTEmitIL.MarkSequencePoint(doc13, 1224, 1, 1224, 100)
ASTEmitIL.Emit(OpCodes.Br, label20)
ASTEmitIL.MarkSequencePoint(doc13, 1225, 1, 1225, 100)
ASTEmitIL.Emit(OpCodes.Br, cont412)
ASTEmitIL.MarkLabel(cont412)
ASTEmitIL.MarkSequencePoint(doc13, 1227, 1, 1227, 100)
ASTEmitIL.MarkLabel(label21)
ASTEmitIL.MarkSequencePoint(doc13, 1229, 1, 1229, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AddrFlg"))
ASTEmitIL.MarkSequencePoint(doc13, 1231, 1, 1231, 100)
ASTEmitIL.Emit(OpCodes.Br, cont395)
ASTEmitIL.MarkLabel(fa395)
ASTEmitIL.Emit(OpCodes.Br, cont395)
ASTEmitIL.MarkLabel(cont395)
ASTEmitIL.MarkSequencePoint(doc13, 1233, 1, 1233, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Add)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc13, 1236, 1, 1236, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 27)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa413 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru413 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont413 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru413)
ASTEmitIL.Emit(OpCodes.Br, fa413)
ASTEmitIL.MarkLabel(tru413)
ASTEmitIL.MarkSequencePoint(doc13, 1237, 1, 1237, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa414 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru414 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont414 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru414)
ASTEmitIL.Emit(OpCodes.Br, fa414)
ASTEmitIL.MarkLabel(tru414)
ASTEmitIL.MarkSequencePoint(doc13, 1238, 1, 1238, 100)
Dim typ226(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ226(UBound(typ226) + 1)
typ226(UBound(typ226)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 59)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ226(UBound(typ226) + 1)
typ226(UBound(typ226)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocMet", typ226))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocMet", typ226).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 39)
ASTEmitIL.MarkSequencePoint(doc13, 1239, 1, 1239, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(MethodInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsStatic", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsStatic", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 54)
ASTEmitIL.MarkSequencePoint(doc13, 1240, 1, 1240, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 54)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa415 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru415 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont415 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru415)
ASTEmitIL.Emit(OpCodes.Br, fa415)
ASTEmitIL.MarkLabel(tru415)
ASTEmitIL.MarkSequencePoint(doc13, 1241, 1, 1241, 100)
Dim typ228(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReDim Preserve typ228(UBound(typ228) + 1)
typ228(UBound(typ228)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdarg", typ228))
Typ = GetType(ILEmitter).GetMethod("EmitLdarg", typ228).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 1242, 1, 1242, 100)
ASTEmitIL.Emit(OpCodes.Br, cont415)
ASTEmitIL.MarkLabel(fa415)
ASTEmitIL.Emit(OpCodes.Br, cont415)
ASTEmitIL.MarkLabel(cont415)
ASTEmitIL.MarkSequencePoint(doc13, 1243, 1, 1243, 100)
ASTEmitIL.Emit(OpCodes.Br, cont414)
ASTEmitIL.MarkLabel(fa414)
ASTEmitIL.Emit(OpCodes.Br, cont414)
ASTEmitIL.MarkLabel(cont414)
ASTEmitIL.MarkSequencePoint(doc13, 1244, 1, 1244, 100)
ASTEmitIL.Emit(OpCodes.Br, cont413)
ASTEmitIL.MarkLabel(fa413)
ASTEmitIL.Emit(OpCodes.Br, cont413)
ASTEmitIL.MarkLabel(cont413)
ASTEmitIL.MarkSequencePoint(doc13, 1248, 1, 1248, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 27)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa416 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru416 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont416 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru416)
ASTEmitIL.Emit(OpCodes.Br, fa416)
ASTEmitIL.MarkLabel(tru416)
ASTEmitIL.MarkSequencePoint(doc13, 1250, 1, 1250, 100)
Dim typ229(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 37)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
ReDim Preserve typ229(UBound(typ229) + 1)
typ229(UBound(typ229)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ229))
Typ = Typ03.GetMethod("Equals", typ229).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc13, 1252, 1, 1252, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa417 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru417 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont417 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru417)
ASTEmitIL.Emit(OpCodes.Br, fa417)
ASTEmitIL.MarkLabel(tru417)
ASTEmitIL.MarkSequencePoint(doc13, 1253, 1, 1253, 100)
Dim typ230(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 37)
Typ = GetType(System.Type)
ReDim Preserve typ230(UBound(typ230) + 1)
typ230(UBound(typ230)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ230(UBound(typ230) + 1)
typ230(UBound(typ230)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 59)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ230(UBound(typ230) + 1)
typ230(UBound(typ230)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadMethod", typ230))
Typ = GetType(Loader).GetMethod("LoadMethod", typ230).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 39)
ASTEmitIL.MarkSequencePoint(doc13, 1255, 1, 1255, 100)
ASTEmitIL.Emit(OpCodes.Br, cont417)
ASTEmitIL.MarkLabel(fa417)
ASTEmitIL.MarkSequencePoint(doc13, 1256, 1, 1256, 100)
Dim typ231(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ231(UBound(typ231) + 1)
typ231(UBound(typ231)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 59)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ231(UBound(typ231) + 1)
typ231(UBound(typ231)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocMet", typ231))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocMet", typ231).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 39)
ASTEmitIL.MarkSequencePoint(doc13, 1258, 1, 1258, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(MethodInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsStatic", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsStatic", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 54)
ASTEmitIL.MarkSequencePoint(doc13, 1259, 1, 1259, 100)
ASTEmitIL.Emit(OpCodes.Br, cont417)
ASTEmitIL.MarkLabel(cont417)
ASTEmitIL.MarkSequencePoint(doc13, 1261, 1, 1261, 100)
ASTEmitIL.Emit(OpCodes.Br, cont416)
ASTEmitIL.MarkLabel(fa416)
ASTEmitIL.MarkSequencePoint(doc13, 1263, 1, 1263, 100)
Dim typ233(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ233(UBound(typ233) + 1)
typ233(UBound(typ233)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 59)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ233(UBound(typ233) + 1)
typ233(UBound(typ233)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocMet", typ233))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocMet", typ233).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 39)
ASTEmitIL.MarkSequencePoint(doc13, 1265, 1, 1265, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(MethodInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsStatic", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsStatic", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 54)
ASTEmitIL.MarkSequencePoint(doc13, 1267, 1, 1267, 100)
ASTEmitIL.Emit(OpCodes.Br, cont416)
ASTEmitIL.MarkLabel(cont416)
ASTEmitIL.MarkSequencePoint(doc13, 1269, 1, 1269, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa418 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru418 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont418 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru418)
ASTEmitIL.Emit(OpCodes.Br, fa418)
ASTEmitIL.MarkLabel(tru418)
ASTEmitIL.MarkSequencePoint(doc13, 1270, 1, 1270, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 54)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa419 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru419 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont419 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru419)
ASTEmitIL.Emit(OpCodes.Br, fa419)
ASTEmitIL.MarkLabel(tru419)
ASTEmitIL.MarkSequencePoint(doc13, 1271, 1, 1271, 100)
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdnull", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitLdnull", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 1272, 1, 1272, 100)
ASTEmitIL.Emit(OpCodes.Br, cont419)
ASTEmitIL.MarkLabel(fa419)
ASTEmitIL.MarkSequencePoint(doc13, 1273, 1, 1273, 100)
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitDup", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitDup", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 1274, 1, 1274, 100)
ASTEmitIL.Emit(OpCodes.Br, cont419)
ASTEmitIL.MarkLabel(cont419)
ASTEmitIL.MarkSequencePoint(doc13, 1275, 1, 1275, 100)
Dim typ235(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(MethodInfo)
ReDim Preserve typ235(UBound(typ235) + 1)
typ235(UBound(typ235)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 54)
Typ = GetType(System.Boolean)
ReDim Preserve typ235(UBound(typ235) + 1)
typ235(UBound(typ235)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitPtrLd", typ235))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitPtrLd", typ235).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 1276, 1, 1276, 100)
ASTEmitIL.Emit(OpCodes.Br, cont418)
ASTEmitIL.MarkLabel(fa418)
ASTEmitIL.Emit(OpCodes.Br, cont418)
ASTEmitIL.MarkLabel(cont418)
ASTEmitIL.MarkSequencePoint(doc13, 1282, 1, 1282, 100)
ASTEmitIL.Emit(OpCodes.Br, cont393)
ASTEmitIL.MarkLabel(fa393)
ASTEmitIL.Emit(OpCodes.Br, cont393)
ASTEmitIL.MarkLabel(cont393)
ASTEmitIL.MarkSequencePoint(doc13, 1284, 1, 1284, 100)
Dim typ236(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(System.Type)
ReDim Preserve typ236(UBound(typ236) + 1)
typ236(UBound(typ236)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ236(UBound(typ236) + 1)
typ236(UBound(typ236)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocCtor", typ236))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocCtor", typ236).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 51)
ASTEmitIL.MarkSequencePoint(doc13, 1286, 1, 1286, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa420 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru420 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont420 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru420)
ASTEmitIL.Emit(OpCodes.Br, fa420)
ASTEmitIL.MarkLabel(tru420)
ASTEmitIL.MarkSequencePoint(doc13, 1287, 1, 1287, 100)
Dim typ237(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 51)
Typ = GetType(ConstructorInfo)
ReDim Preserve typ237(UBound(typ237) + 1)
typ237(UBound(typ237)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitNewobj", typ237))
Typ = GetType(ILEmitter).GetMethod("EmitNewobj", typ237).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 1288, 1, 1288, 100)
ASTEmitIL.Emit(OpCodes.Br, cont420)
ASTEmitIL.MarkLabel(fa420)
ASTEmitIL.Emit(OpCodes.Br, cont420)
ASTEmitIL.MarkLabel(cont420)
ASTEmitIL.MarkSequencePoint(doc13, 1290, 1, 1290, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(System.Type)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 1291, 1, 1291, 100)
ASTEmitIL.Emit(OpCodes.Br, label9)
ASTEmitIL.MarkSequencePoint(doc13, 1292, 1, 1292, 100)
ASTEmitIL.Emit(OpCodes.Br, cont387)
ASTEmitIL.MarkLabel(fa387)
ASTEmitIL.Emit(OpCodes.Br, cont387)
ASTEmitIL.MarkLabel(cont387)
ASTEmitIL.MarkSequencePoint(doc13, 1294, 1, 1294, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(GettypeCallTok))
Dim typ238 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ238))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ238).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc13, 1295, 1, 1295, 100)
Dim typ239(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ239(UBound(typ239) + 1)
typ239(UBound(typ239)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ239))
Typ = Typ03.GetMethod("IsInstanceOfType", typ239).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc13, 1297, 1, 1297, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa421 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru421 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont421 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru421)
ASTEmitIL.Emit(OpCodes.Br, fa421)
ASTEmitIL.MarkLabel(tru421)
ASTEmitIL.MarkSequencePoint(doc13, 1299, 1, 1299, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa422 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru422 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont422 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru422)
ASTEmitIL.Emit(OpCodes.Br, fa422)
ASTEmitIL.MarkLabel(tru422)
ASTEmitIL.MarkSequencePoint(doc13, 1303, 1, 1303, 100)
Dim locbldr350 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(GettypeCallTok))
locbldr350.SetLocalSymInfo("gtctok")
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Stloc, 62)
ASTEmitIL.MarkSequencePoint(doc13, 1304, 1, 1304, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 62)
Typ = GetType(GettypeCallTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(GettypeCallTok).GetField("Name"))
Typ = GetType(GettypeCallTok).GetField("Name").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 10)
ASTEmitIL.MarkSequencePoint(doc13, 1305, 1, 1305, 100)
Dim typ240(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
ReDim Preserve typ240(UBound(typ240) + 1)
typ240(UBound(typ240)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ240))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ240).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc13, 1306, 1, 1306, 100)
Dim typ241(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
ReDim Preserve typ241(UBound(typ241) + 1)
typ241(UBound(typ241)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdtoken", typ241))
Typ = GetType(ILEmitter).GetMethod("EmitLdtoken", typ241).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 1308, 1, 1308, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
ASTEmitIL.Emit(OpCodes.Newarr, GetType(System.Type))
ASTEmitIL.Emit(OpCodes.Stloc, 45)
ASTEmitIL.MarkSequencePoint(doc13, 1310, 1, 1310, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 46)
ASTEmitIL.MarkSequencePoint(doc13, 1311, 1, 1311, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(System.Type).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("TypArr"))
ASTEmitIL.MarkSequencePoint(doc13, 1312, 1, 1312, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(System.RuntimeTypeHandle))
Dim typ242 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ242))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ242).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc13, 1313, 1, 1313, 100)
Dim typ243(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
ReDim Preserve typ243(UBound(typ243) + 1)
typ243(UBound(typ243)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("AddTyp", typ243))
Typ = GetType(AsmFactory).GetMethod("AddTyp", typ243).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 1314, 1, 1314, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 45)
ASTEmitIL.MarkSequencePoint(doc13, 1315, 1, 1315, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 46)
Typ = GetType(System.Type).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("TypArr"))
ASTEmitIL.MarkSequencePoint(doc13, 1317, 1, 1317, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(System.Type))
Dim typ244 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ244))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ244).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc13, 1318, 1, 1318, 100)
Dim typ245(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldstr, "GetTypeFromHandle")
Typ = GetType(System.String)
ReDim Preserve typ245(UBound(typ245) + 1)
typ245(UBound(typ245)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ245(UBound(typ245) + 1)
typ245(UBound(typ245)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetMethod", typ245))
Typ = Typ03.GetMethod("GetMethod", typ245).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 39)
ASTEmitIL.MarkSequencePoint(doc13, 1319, 1, 1319, 100)
Dim typ246(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(MethodInfo)
ReDim Preserve typ246(UBound(typ246) + 1)
typ246(UBound(typ246)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ246))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ246).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 1321, 1, 1321, 100)
ASTEmitIL.Emit(OpCodes.Br, cont422)
ASTEmitIL.MarkLabel(fa422)
ASTEmitIL.Emit(OpCodes.Br, cont422)
ASTEmitIL.MarkLabel(cont422)
ASTEmitIL.MarkSequencePoint(doc13, 1323, 1, 1323, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(System.Type))
Dim typ247 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ247))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ247).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 1325, 1, 1325, 100)
ASTEmitIL.Emit(OpCodes.Br, label9)
ASTEmitIL.MarkSequencePoint(doc13, 1326, 1, 1326, 100)
ASTEmitIL.Emit(OpCodes.Br, cont421)
ASTEmitIL.MarkLabel(fa421)
ASTEmitIL.Emit(OpCodes.Br, cont421)
ASTEmitIL.MarkLabel(cont421)
ASTEmitIL.MarkSequencePoint(doc13, 1330, 1, 1330, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(MeTok))
Dim typ248 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ248))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ248).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc13, 1331, 1, 1331, 100)
Dim typ249(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ249(UBound(typ249) + 1)
typ249(UBound(typ249)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ249))
Typ = Typ03.GetMethod("IsInstanceOfType", typ249).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc13, 1333, 1, 1333, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa423 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru423 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont423 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru423)
ASTEmitIL.Emit(OpCodes.Br, fa423)
ASTEmitIL.MarkLabel(tru423)
ASTEmitIL.MarkSequencePoint(doc13, 1335, 1, 1335, 100)
Dim locbldr351 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(MeTok))
locbldr351.SetLocalSymInfo("metk1")
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Stloc, 63)
ASTEmitIL.MarkSequencePoint(doc13, 1337, 1, 1337, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa424 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru424 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont424 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru424)
ASTEmitIL.Emit(OpCodes.Br, fa424)
ASTEmitIL.MarkLabel(tru424)
ASTEmitIL.MarkSequencePoint(doc13, 1338, 1, 1338, 100)
Dim typ250(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReDim Preserve typ250(UBound(typ250) + 1)
typ250(UBound(typ250)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdarg", typ250))
Typ = GetType(ILEmitter).GetMethod("EmitLdarg", typ250).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 1339, 1, 1339, 100)
ASTEmitIL.Emit(OpCodes.Br, cont424)
ASTEmitIL.MarkLabel(fa424)
ASTEmitIL.Emit(OpCodes.Br, cont424)
ASTEmitIL.MarkLabel(cont424)
ASTEmitIL.MarkSequencePoint(doc13, 1341, 1, 1341, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 1343, 1, 1343, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 63)
Typ = GetType(MeTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MeTok).GetField("Conv"))
Typ = GetType(MeTok).GetField("Conv").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa425 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru425 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont425 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru425)
ASTEmitIL.Emit(OpCodes.Br, fa425)
ASTEmitIL.MarkLabel(tru425)
ASTEmitIL.MarkSequencePoint(doc13, 1344, 1, 1344, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa426 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru426 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont426 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru426)
ASTEmitIL.Emit(OpCodes.Br, fa426)
ASTEmitIL.MarkLabel(tru426)
ASTEmitIL.MarkSequencePoint(doc13, 1345, 1, 1345, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 18)
ASTEmitIL.MarkSequencePoint(doc13, 1346, 1, 1346, 100)
ASTEmitIL.Emit(OpCodes.Br, cont426)
ASTEmitIL.MarkLabel(fa426)
ASTEmitIL.Emit(OpCodes.Br, cont426)
ASTEmitIL.MarkLabel(cont426)
ASTEmitIL.MarkSequencePoint(doc13, 1348, 1, 1348, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 63)
Typ = GetType(MeTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MeTok).GetField("TTok"))
Typ = GetType(MeTok).GetField("TTok").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 10)
ASTEmitIL.MarkSequencePoint(doc13, 1349, 1, 1349, 100)
Dim typ251(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
ReDim Preserve typ251(UBound(typ251) + 1)
typ251(UBound(typ251)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ251))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ251).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 1351, 1, 1351, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa427 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru427 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont427 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru427)
ASTEmitIL.Emit(OpCodes.Br, fa427)
ASTEmitIL.MarkLabel(tru427)
ASTEmitIL.MarkSequencePoint(doc13, 1352, 1, 1352, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 19)
ASTEmitIL.MarkSequencePoint(doc13, 1353, 1, 1353, 100)
Dim typ252(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Type)
ReDim Preserve typ252(UBound(typ252) + 1)
typ252(UBound(typ252)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(System.Type)
ReDim Preserve typ252(UBound(typ252) + 1)
typ252(UBound(typ252)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitConv", typ252))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitConv", typ252).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 1354, 1, 1354, 100)
ASTEmitIL.Emit(OpCodes.Br, cont427)
ASTEmitIL.MarkLabel(fa427)
ASTEmitIL.Emit(OpCodes.Br, cont427)
ASTEmitIL.MarkLabel(cont427)
ASTEmitIL.MarkSequencePoint(doc13, 1355, 1, 1355, 100)
ASTEmitIL.Emit(OpCodes.Br, cont425)
ASTEmitIL.MarkLabel(fa425)
ASTEmitIL.Emit(OpCodes.Br, cont425)
ASTEmitIL.MarkLabel(cont425)
ASTEmitIL.MarkSequencePoint(doc13, 1358, 1, 1358, 100)
ASTEmitIL.Emit(OpCodes.Br, label9)
ASTEmitIL.MarkSequencePoint(doc13, 1359, 1, 1359, 100)
ASTEmitIL.Emit(OpCodes.Br, cont423)
ASTEmitIL.MarkLabel(fa423)
ASTEmitIL.Emit(OpCodes.Br, cont423)
ASTEmitIL.MarkLabel(cont423)
ASTEmitIL.MarkSequencePoint(doc13, 1363, 1, 1363, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(NewarrCallTok))
Dim typ253 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ253))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ253).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc13, 1364, 1, 1364, 100)
Dim typ254(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ254(UBound(typ254) + 1)
typ254(UBound(typ254)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ254))
Typ = Typ03.GetMethod("IsInstanceOfType", typ254).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc13, 1366, 1, 1366, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa428 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru428 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont428 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru428)
ASTEmitIL.Emit(OpCodes.Br, fa428)
ASTEmitIL.MarkLabel(tru428)
ASTEmitIL.MarkSequencePoint(doc13, 1369, 1, 1369, 100)
Dim locbldr352 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(NewarrCallTok))
locbldr352.SetLocalSymInfo("newactok")
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Stloc, 64)
ASTEmitIL.MarkSequencePoint(doc13, 1370, 1, 1370, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 64)
Typ = GetType(NewarrCallTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(NewarrCallTok).GetField("ArrayLen"))
Typ = GetType(NewarrCallTok).GetField("ArrayLen").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 48)
ASTEmitIL.MarkSequencePoint(doc13, 1371, 1, 1371, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 64)
Typ = GetType(NewarrCallTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(NewarrCallTok).GetField("ArrayType"))
Typ = GetType(NewarrCallTok).GetField("ArrayType").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 10)
ASTEmitIL.MarkSequencePoint(doc13, 1372, 1, 1372, 100)
Dim typ255(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
ReDim Preserve typ255(UBound(typ255) + 1)
typ255(UBound(typ255)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ255))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ255).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc13, 1374, 1, 1374, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ256(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 48)
Typ = GetType(Expr)
ReDim Preserve typ256(UBound(typ256) + 1)
typ256(UBound(typ256)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ConvToRPN)
Typ = ConvToRPN.ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 48)
ASTEmitIL.MarkSequencePoint(doc13, 1375, 1, 1375, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ257(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 48)
Typ = GetType(Expr)
ReDim Preserve typ257(UBound(typ257) + 1)
typ257(UBound(typ257)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ConvToAST)
Typ = ConvToAST.ReturnType
ASTEmitIL.Emit(OpCodes.Starg, 1)
ASTEmitIL.MarkSequencePoint(doc13, 1376, 1, 1376, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ258(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ReDim Preserve typ258(UBound(typ258) + 1)
typ258(UBound(typ258)) = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ReDim Preserve typ258(UBound(typ258) + 1)
typ258(UBound(typ258)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 1378, 1, 1378, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa429 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru429 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont429 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru429)
ASTEmitIL.Emit(OpCodes.Br, fa429)
ASTEmitIL.MarkLabel(tru429)
ASTEmitIL.MarkSequencePoint(doc13, 1379, 1, 1379, 100)
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitConvI", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitConvI", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 1380, 1, 1380, 100)
Dim typ259(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
ReDim Preserve typ259(UBound(typ259) + 1)
typ259(UBound(typ259)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitNewarr", typ259))
Typ = GetType(ILEmitter).GetMethod("EmitNewarr", typ259).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 1381, 1, 1381, 100)
ASTEmitIL.Emit(OpCodes.Br, cont429)
ASTEmitIL.MarkLabel(fa429)
ASTEmitIL.Emit(OpCodes.Br, cont429)
ASTEmitIL.MarkLabel(cont429)
ASTEmitIL.MarkSequencePoint(doc13, 1383, 1, 1383, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("MakeArrayType", Type.EmptyTypes))
Typ = Typ03.GetMethod("MakeArrayType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 1385, 1, 1385, 100)
ASTEmitIL.Emit(OpCodes.Br, label9)
ASTEmitIL.MarkSequencePoint(doc13, 1386, 1, 1386, 100)
ASTEmitIL.Emit(OpCodes.Br, cont428)
ASTEmitIL.MarkLabel(fa428)
ASTEmitIL.Emit(OpCodes.Br, cont428)
ASTEmitIL.MarkLabel(cont428)
ASTEmitIL.MarkSequencePoint(doc13, 1390, 1, 1390, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(PtrCallTok))
Dim typ261 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ261))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ261).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc13, 1391, 1, 1391, 100)
Dim typ262(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ262(UBound(typ262) + 1)
typ262(UBound(typ262)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ262))
Typ = Typ03.GetMethod("IsInstanceOfType", typ262).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc13, 1393, 1, 1393, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa430 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru430 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont430 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru430)
ASTEmitIL.Emit(OpCodes.Br, fa430)
ASTEmitIL.MarkLabel(tru430)
ASTEmitIL.MarkSequencePoint(doc13, 1395, 1, 1395, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa431 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru431 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont431 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru431)
ASTEmitIL.Emit(OpCodes.Br, fa431)
ASTEmitIL.MarkLabel(tru431)
ASTEmitIL.MarkSequencePoint(doc13, 1397, 1, 1397, 100)
Dim locbldr353 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(PtrCallTok))
locbldr353.SetLocalSymInfo("ptrctok")
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Stloc, 65)
ASTEmitIL.MarkSequencePoint(doc13, 1398, 1, 1398, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 65)
Typ = GetType(PtrCallTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(PtrCallTok).GetField("MetToCall"))
Typ = GetType(PtrCallTok).GetField("MetToCall").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 42)
ASTEmitIL.MarkSequencePoint(doc13, 1399, 1, 1399, 100)
Dim typ263(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(MethodNameTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodNameTok).GetField("Value"))
Typ = GetType(MethodNameTok).GetField("Value").FieldType
ReDim Preserve typ263(UBound(typ263) + 1)
typ263(UBound(typ263)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocMetNoParams", typ263))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocMetNoParams", typ263).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 39)
ASTEmitIL.MarkSequencePoint(doc13, 1401, 1, 1401, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(MethodInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsStatic", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsStatic", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 54)
ASTEmitIL.MarkSequencePoint(doc13, 1402, 1, 1402, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 54)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa432 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru432 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont432 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru432)
ASTEmitIL.Emit(OpCodes.Br, fa432)
ASTEmitIL.MarkLabel(tru432)
ASTEmitIL.MarkSequencePoint(doc13, 1403, 1, 1403, 100)
Dim typ265(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReDim Preserve typ265(UBound(typ265) + 1)
typ265(UBound(typ265)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdarg", typ265))
Typ = GetType(ILEmitter).GetMethod("EmitLdarg", typ265).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 1404, 1, 1404, 100)
ASTEmitIL.Emit(OpCodes.Br, cont432)
ASTEmitIL.MarkLabel(fa432)
ASTEmitIL.Emit(OpCodes.Br, cont432)
ASTEmitIL.MarkLabel(cont432)
ASTEmitIL.MarkSequencePoint(doc13, 1405, 1, 1405, 100)
Dim typ266(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(MethodInfo)
ReDim Preserve typ266(UBound(typ266) + 1)
typ266(UBound(typ266)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 54)
Typ = GetType(System.Boolean)
ReDim Preserve typ266(UBound(typ266) + 1)
typ266(UBound(typ266)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitPtrLd", typ266))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitPtrLd", typ266).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc13, 1406, 1, 1406, 100)
ASTEmitIL.Emit(OpCodes.Br, cont431)
ASTEmitIL.MarkLabel(fa431)
ASTEmitIL.Emit(OpCodes.Br, cont431)
ASTEmitIL.MarkLabel(cont431)
ASTEmitIL.MarkSequencePoint(doc13, 1407, 1, 1407, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(IntPtr))
Dim typ267 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ267))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ267).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc13, 1408, 1, 1408, 100)
ASTEmitIL.Emit(OpCodes.Br, label9)
ASTEmitIL.MarkSequencePoint(doc13, 1409, 1, 1409, 100)
ASTEmitIL.Emit(OpCodes.Br, cont430)
ASTEmitIL.MarkLabel(fa430)
ASTEmitIL.Emit(OpCodes.Br, cont430)
ASTEmitIL.MarkLabel(cont430)
ASTEmitIL.MarkSequencePoint(doc13, 1411, 1, 1411, 100)
ASTEmitIL.MarkLabel(label9)
ASTEmitIL.MarkSequencePoint(doc13, 1413, 1, 1413, 100)
ASTEmitIL.Emit(OpCodes.Br, cont288)
ASTEmitIL.MarkLabel(cont288)
ASTEmitIL.MarkSequencePoint(doc13, 1415, 1, 1415, 100)
ASTEmitIL.Emit(OpCodes.Ret)
Dim typ268(-1) As Type
ReDim Preserve typ268(UBound(typ268) + 1)
typ268(UBound(typ268)) = GetType(Expr)
Dim Evaluate As MethodBuilder = Evaluator.DefineMethod("Evaluate", MethodAttributes.Public, GetType(System.Void), typ268)
Dim EvaluateIL As ILGenerator = Evaluate.GetILGenerator()
Dim Evaluateparam01 As ParameterBuilder = Evaluate.DefineParameter(1, ParameterAttributes.None, "exp")
EvaluateIL.MarkSequencePoint(doc13, 1419, 1, 1419, 100)
Dim locbldr354 As LocalBuilder = EvaluateIL.DeclareLocal(GetType(System.Int32))
locbldr354.SetLocalSymInfo("len")
EvaluateIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
EvaluateIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
EvaluateIL.Emit(OpCodes.Ldlen)
EvaluateIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
EvaluateIL.Emit(OpCodes.Stloc, 0)
EvaluateIL.MarkSequencePoint(doc13, 1421, 1, 1421, 100)
Dim locbldr355 As LocalBuilder = EvaluateIL.DeclareLocal(GetType(Expr))
locbldr355.SetLocalSymInfo("rpnexp")
EvaluateIL.MarkSequencePoint(doc13, 1423, 1, 1423, 100)
EvaluateIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
EvaluateIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
Dim fa433 As System.Reflection.Emit.Label = EvaluateIL.DefineLabel()
Dim tru433 As System.Reflection.Emit.Label = EvaluateIL.DefineLabel()
Dim cont433 As System.Reflection.Emit.Label = EvaluateIL.DefineLabel()
EvaluateIL.Emit(OpCodes.Beq, tru433)
EvaluateIL.Emit(OpCodes.Br, fa433)
EvaluateIL.MarkLabel(tru433)
EvaluateIL.MarkSequencePoint(doc13, 1424, 1, 1424, 100)
EvaluateIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
EvaluateIL.Emit(OpCodes.Stloc, 1)
EvaluateIL.MarkSequencePoint(doc13, 1425, 1, 1425, 100)
EvaluateIL.Emit(OpCodes.Br, cont433)
EvaluateIL.MarkLabel(fa433)
EvaluateIL.MarkSequencePoint(doc13, 1426, 1, 1426, 100)
EvaluateIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
EvaluateIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
Dim fa434 As System.Reflection.Emit.Label = EvaluateIL.DefineLabel()
Dim tru434 As System.Reflection.Emit.Label = EvaluateIL.DefineLabel()
Dim cont434 As System.Reflection.Emit.Label = EvaluateIL.DefineLabel()
EvaluateIL.Emit(OpCodes.Bge, tru434)
EvaluateIL.Emit(OpCodes.Br, fa434)
EvaluateIL.MarkLabel(tru434)
EvaluateIL.MarkSequencePoint(doc13, 1427, 1, 1427, 100)
EvaluateIL.Emit(OpCodes.Ldarg_0)
Dim typ269(-1) As Type
EvaluateIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ReDim Preserve typ269(UBound(typ269) + 1)
typ269(UBound(typ269)) = Typ
EvaluateIL.Emit(OpCodes.Callvirt, ConvToRPN)
Typ = ConvToRPN.ReturnType
EvaluateIL.Emit(OpCodes.Stloc, 1)
EvaluateIL.MarkSequencePoint(doc13, 1428, 1, 1428, 100)
EvaluateIL.Emit(OpCodes.Br, cont434)
EvaluateIL.MarkLabel(fa434)
EvaluateIL.Emit(OpCodes.Br, cont434)
EvaluateIL.MarkLabel(cont434)
EvaluateIL.MarkSequencePoint(doc13, 1429, 1, 1429, 100)
EvaluateIL.Emit(OpCodes.Br, cont433)
EvaluateIL.MarkLabel(cont433)
EvaluateIL.MarkSequencePoint(doc13, 1431, 1, 1431, 100)
Dim locbldr356 As LocalBuilder = EvaluateIL.DeclareLocal(GetType(Token))
locbldr356.SetLocalSymInfo("asttok")
EvaluateIL.Emit(OpCodes.Ldarg_0)
Dim typ270(-1) As Type
EvaluateIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Expr)
ReDim Preserve typ270(UBound(typ270) + 1)
typ270(UBound(typ270)) = Typ
EvaluateIL.Emit(OpCodes.Callvirt, ConvToAST)
Typ = ConvToAST.ReturnType
EvaluateIL.Emit(OpCodes.Stloc, 2)
EvaluateIL.MarkSequencePoint(doc13, 1432, 1, 1432, 100)
EvaluateIL.Emit(OpCodes.Ldarg_0)
Dim typ271(-1) As Type
EvaluateIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Token)
ReDim Preserve typ271(UBound(typ271) + 1)
typ271(UBound(typ271)) = Typ
EvaluateIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReDim Preserve typ271(UBound(typ271) + 1)
typ271(UBound(typ271)) = Typ
EvaluateIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EvaluateIL.Emit(OpCodes.Pop)
End If
EvaluateIL.MarkSequencePoint(doc13, 1433, 1, 1433, 100)
EvaluateIL.Emit(OpCodes.Ldarg_0)
Dim typ272(-1) As Type
EvaluateIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Token)
ReDim Preserve typ272(UBound(typ272) + 1)
typ272(UBound(typ272)) = Typ
EvaluateIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ272(UBound(typ272) + 1)
typ272(UBound(typ272)) = Typ
EvaluateIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EvaluateIL.Emit(OpCodes.Pop)
End If
EvaluateIL.MarkSequencePoint(doc13, 1435, 1, 1435, 100)
EvaluateIL.Emit(OpCodes.Ret)
Dim typ273(-1) As Type
ReDim Preserve typ273(UBound(typ273) + 1)
typ273(UBound(typ273)) = GetType(Token)
ReDim Preserve typ273(UBound(typ273) + 1)
typ273(UBound(typ273)) = GetType(Expr)
Dim StoreEmit As MethodBuilder = Evaluator.DefineMethod("StoreEmit", MethodAttributes.Public, GetType(System.Void), typ273)
Dim StoreEmitIL As ILGenerator = StoreEmit.GetILGenerator()
Dim StoreEmitparam01 As ParameterBuilder = StoreEmit.DefineParameter(1, ParameterAttributes.None, "tok")
Dim StoreEmitparam02 As ParameterBuilder = StoreEmit.DefineParameter(2, ParameterAttributes.None, "exp")
StoreEmitIL.MarkSequencePoint(doc13, 1439, 1, 1439, 100)
Dim locbldr357 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(System.Int32))
locbldr357.SetLocalSymInfo("i")
StoreEmitIL.MarkSequencePoint(doc13, 1440, 1, 1440, 100)
Dim locbldr358 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(System.Int32))
locbldr358.SetLocalSymInfo("len")
StoreEmitIL.MarkSequencePoint(doc13, 1441, 1, 1441, 100)
Dim locbldr359 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(Ident))
locbldr359.SetLocalSymInfo("idt")
StoreEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
StoreEmitIL.Emit(OpCodes.Stloc, 2)
StoreEmitIL.MarkSequencePoint(doc13, 1442, 1, 1442, 100)
Dim locbldr360 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(System.String))
locbldr360.SetLocalSymInfo("idtnam")
StoreEmitIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Ident)
StoreEmitIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
StoreEmitIL.Emit(OpCodes.Stloc, 3)
StoreEmitIL.MarkSequencePoint(doc13, 1443, 1, 1443, 100)
Dim locbldr361 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(System.String).MakeArrayType())
locbldr361.SetLocalSymInfo("idtnamarr")
StoreEmitIL.MarkSequencePoint(doc13, 1444, 1, 1444, 100)
Dim locbldr362 As LocalBuilder = StoreEmitIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"))
locbldr362.SetLocalSymInfo("vr")
StoreEmitIL.MarkSequencePoint(doc13, 1445, 1, 1445, 100)
Dim locbldr363 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr363.SetLocalSymInfo("idtb1")
StoreEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Stloc, 6)
StoreEmitIL.MarkSequencePoint(doc13, 1446, 1, 1446, 100)
Dim locbldr364 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr364.SetLocalSymInfo("idtb2")
StoreEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Stloc, 7)
StoreEmitIL.MarkSequencePoint(doc13, 1447, 1, 1447, 100)
Dim locbldr365 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr365.SetLocalSymInfo("idtisstatic")
StoreEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Stloc, 8)
StoreEmitIL.MarkSequencePoint(doc13, 1448, 1, 1448, 100)
Dim locbldr366 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(System.Int32))
locbldr366.SetLocalSymInfo("idtcomp")
StoreEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Stloc, 9)
StoreEmitIL.MarkSequencePoint(doc13, 1449, 1, 1449, 100)
Dim locbldr367 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(System.Type))
locbldr367.SetLocalSymInfo("idttyp")
StoreEmitIL.MarkSequencePoint(doc13, 1450, 1, 1450, 100)
Dim locbldr368 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(FieldInfo))
locbldr368.SetLocalSymInfo("fldinf")
StoreEmitIL.MarkSequencePoint(doc13, 1451, 1, 1451, 100)
Dim locbldr369 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(Expr))
locbldr369.SetLocalSymInfo("arrlocexpr")
StoreEmitIL.MarkSequencePoint(doc13, 1452, 1, 1452, 100)
Dim locbldr370 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(Ident))
locbldr370.SetLocalSymInfo("idtarrloc")
StoreEmitIL.MarkSequencePoint(doc13, 1453, 1, 1453, 100)
Dim locbldr371 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(System.Type))
locbldr371.SetLocalSymInfo("typ")
StoreEmitIL.MarkSequencePoint(doc13, 1454, 1, 1454, 100)
Dim locbldr372 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr372.SetLocalSymInfo("b")
StoreEmitIL.MarkSequencePoint(doc13, 1455, 1, 1455, 100)
Dim locbldr373 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(System.Int32))
locbldr373.SetLocalSymInfo("restrord")
StoreEmitIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Stloc, 16)
StoreEmitIL.MarkSequencePoint(doc13, 1457, 1, 1457, 100)
StoreEmitIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Stloc, 0)
StoreEmitIL.MarkSequencePoint(doc13, 1458, 1, 1458, 100)
Dim typ274(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.String)
ReDim Preserve typ274(UBound(typ274) + 1)
typ274(UBound(typ274)) = Typ
StoreEmitIL.Emit(OpCodes.Ldstr, ":")
Typ = GetType(System.String)
ReDim Preserve typ274(UBound(typ274) + 1)
typ274(UBound(typ274)) = Typ
StoreEmitIL.Emit(OpCodes.Call, GetType(ParseUtils).GetMethod("StringParser", typ274))
Typ = GetType(ParseUtils).GetMethod("StringParser", typ274).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 4)
StoreEmitIL.MarkSequencePoint(doc13, 1459, 1, 1459, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
StoreEmitIL.Emit(OpCodes.Ldlen)
StoreEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Sub)
StoreEmitIL.Emit(OpCodes.Stloc, 1)
StoreEmitIL.MarkSequencePoint(doc13, 1461, 1, 1461, 100)
Dim typ275(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
StoreEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
StoreEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ275(UBound(typ275) + 1)
typ275(UBound(typ275)) = Typ
StoreEmitIL.Emit(OpCodes.Ldstr, "me")
Typ = GetType(System.String)
ReDim Preserve typ275(UBound(typ275) + 1)
typ275(UBound(typ275)) = Typ
StoreEmitIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ275))
Typ = GetType(String).GetMethod("Compare", typ275).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 9)
StoreEmitIL.MarkSequencePoint(doc13, 1462, 1, 1462, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa435 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru435 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont435 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, tru435)
StoreEmitIL.Emit(OpCodes.Br, fa435)
StoreEmitIL.MarkLabel(tru435)
StoreEmitIL.MarkSequencePoint(doc13, 1463, 1, 1463, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Add)
StoreEmitIL.Emit(OpCodes.Stloc, 0)
StoreEmitIL.MarkSequencePoint(doc13, 1464, 1, 1464, 100)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Stloc, 6)
StoreEmitIL.MarkSequencePoint(doc13, 1465, 1, 1465, 100)
StoreEmitIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Stloc, 16)
StoreEmitIL.MarkSequencePoint(doc13, 1466, 1, 1466, 100)
StoreEmitIL.Emit(OpCodes.Br, cont435)
StoreEmitIL.MarkLabel(fa435)
StoreEmitIL.Emit(OpCodes.Br, cont435)
StoreEmitIL.MarkLabel(cont435)
StoreEmitIL.MarkSequencePoint(doc13, 1468, 1, 1468, 100)
Dim label23 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.MarkSequencePoint(doc13, 1469, 1, 1469, 100)
Dim label24 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.MarkSequencePoint(doc13, 1470, 1, 1470, 100)
Dim label25 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.MarkSequencePoint(doc13, 1480, 1, 1480, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Ident)
StoreEmitIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("IsArr"))
Typ = GetType(Ident).GetField("IsArr").FieldType
StoreEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa436 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru436 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont436 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, tru436)
StoreEmitIL.Emit(OpCodes.Br, fa436)
StoreEmitIL.MarkLabel(tru436)
StoreEmitIL.MarkSequencePoint(doc13, 1481, 1, 1481, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Sub)
StoreEmitIL.Emit(OpCodes.Stloc, 16)
StoreEmitIL.MarkSequencePoint(doc13, 1482, 1, 1482, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Add)
StoreEmitIL.Emit(OpCodes.Stloc, 1)
StoreEmitIL.MarkSequencePoint(doc13, 1483, 1, 1483, 100)
StoreEmitIL.Emit(OpCodes.Br, cont436)
StoreEmitIL.MarkLabel(fa436)
StoreEmitIL.Emit(OpCodes.Br, cont436)
StoreEmitIL.MarkLabel(cont436)
StoreEmitIL.MarkSequencePoint(doc13, 1485, 1, 1485, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
StoreEmitIL.Emit(OpCodes.Ldlen)
StoreEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Stloc, 9)
StoreEmitIL.MarkSequencePoint(doc13, 1486, 1, 1486, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(System.Int32)
Dim fa437 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru437 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont437 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Bge, tru437)
StoreEmitIL.Emit(OpCodes.Br, fa437)
StoreEmitIL.MarkLabel(tru437)
StoreEmitIL.MarkSequencePoint(doc13, 1489, 1, 1489, 100)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AddrFlg"))
StoreEmitIL.MarkSequencePoint(doc13, 1491, 1, 1491, 100)
StoreEmitIL.MarkLabel(label23)
StoreEmitIL.MarkSequencePoint(doc13, 1492, 1, 1492, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Add)
StoreEmitIL.Emit(OpCodes.Stloc, 0)
StoreEmitIL.MarkSequencePoint(doc13, 1494, 1, 1494, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa438 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru438 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont438 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, tru438)
StoreEmitIL.Emit(OpCodes.Br, fa438)
StoreEmitIL.MarkLabel(tru438)
StoreEmitIL.MarkSequencePoint(doc13, 1496, 1, 1496, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa439 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru439 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont439 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, tru439)
StoreEmitIL.Emit(OpCodes.Br, fa439)
StoreEmitIL.MarkLabel(tru439)
StoreEmitIL.MarkSequencePoint(doc13, 1497, 1, 1497, 100)
Dim typ276(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
StoreEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ276(UBound(typ276) + 1)
typ276(UBound(typ276)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindVar", typ276))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindVar", typ276).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 5)
StoreEmitIL.MarkSequencePoint(doc13, 1498, 1, 1498, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
StoreEmitIL.Emit(OpCodes.Ldnull)
Dim fa440 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru440 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont440 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, fa440)
StoreEmitIL.Emit(OpCodes.Br, tru440)
StoreEmitIL.MarkLabel(tru440)
StoreEmitIL.MarkSequencePoint(doc13, 1499, 1, 1499, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
StoreEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp").FieldType
StoreEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
StoreEmitIL.MarkSequencePoint(doc13, 1500, 1, 1500, 100)
Dim typ277(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
StoreEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("Index"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("Index").FieldType
ReDim Preserve typ277(UBound(typ277) + 1)
typ277(UBound(typ277)) = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
StoreEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("LocArg"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("LocArg").FieldType
ReDim Preserve typ277(UBound(typ277) + 1)
typ277(UBound(typ277)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLocLd", typ277))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLocLd", typ277).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
StoreEmitIL.Emit(OpCodes.Pop)
End If
StoreEmitIL.MarkSequencePoint(doc13, 1501, 1, 1501, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
StoreEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp").FieldType
StoreEmitIL.Emit(OpCodes.Stloc, 10)
StoreEmitIL.MarkSequencePoint(doc13, 1502, 1, 1502, 100)
StoreEmitIL.Emit(OpCodes.Br, label25)
StoreEmitIL.MarkSequencePoint(doc13, 1503, 1, 1503, 100)
StoreEmitIL.Emit(OpCodes.Br, cont440)
StoreEmitIL.MarkLabel(fa440)
StoreEmitIL.MarkSequencePoint(doc13, 1505, 1, 1505, 100)
Dim typ278(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
StoreEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ278(UBound(typ278) + 1)
typ278(UBound(typ278)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ278))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ278).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 11)
StoreEmitIL.MarkSequencePoint(doc13, 1507, 1, 1507, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
StoreEmitIL.Emit(OpCodes.Ldnull)
Dim fa441 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru441 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont441 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, fa441)
StoreEmitIL.Emit(OpCodes.Br, tru441)
StoreEmitIL.MarkLabel(tru441)
StoreEmitIL.MarkSequencePoint(doc13, 1508, 1, 1508, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
Typ03 = Typ
StoreEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsStatic", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsStatic", Type.EmptyTypes).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 8)
StoreEmitIL.MarkSequencePoint(doc13, 1509, 1, 1509, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa442 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru442 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont442 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, tru442)
StoreEmitIL.Emit(OpCodes.Br, fa442)
StoreEmitIL.MarkLabel(tru442)
StoreEmitIL.MarkSequencePoint(doc13, 1510, 1, 1510, 100)
Dim typ280(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReDim Preserve typ280(UBound(typ280) + 1)
typ280(UBound(typ280)) = Typ
StoreEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdarg", typ280))
Typ = GetType(ILEmitter).GetMethod("EmitLdarg", typ280).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
StoreEmitIL.Emit(OpCodes.Pop)
End If
StoreEmitIL.MarkSequencePoint(doc13, 1511, 1, 1511, 100)
StoreEmitIL.Emit(OpCodes.Br, cont442)
StoreEmitIL.MarkLabel(fa442)
StoreEmitIL.Emit(OpCodes.Br, cont442)
StoreEmitIL.MarkLabel(cont442)
StoreEmitIL.MarkSequencePoint(doc13, 1512, 1, 1512, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
Typ03 = Typ
StoreEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
StoreEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
StoreEmitIL.MarkSequencePoint(doc13, 1513, 1, 1513, 100)
Dim typ282(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
ReDim Preserve typ282(UBound(typ282) + 1)
typ282(UBound(typ282)) = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ReDim Preserve typ282(UBound(typ282) + 1)
typ282(UBound(typ282)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ282))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ282).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
StoreEmitIL.Emit(OpCodes.Pop)
End If
StoreEmitIL.MarkSequencePoint(doc13, 1514, 1, 1514, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
Typ03 = Typ
StoreEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 10)
StoreEmitIL.MarkSequencePoint(doc13, 1515, 1, 1515, 100)
StoreEmitIL.Emit(OpCodes.Br, label25)
StoreEmitIL.MarkSequencePoint(doc13, 1516, 1, 1516, 100)
StoreEmitIL.Emit(OpCodes.Br, cont441)
StoreEmitIL.MarkLabel(fa441)
StoreEmitIL.Emit(OpCodes.Br, cont441)
StoreEmitIL.MarkLabel(cont441)
StoreEmitIL.MarkSequencePoint(doc13, 1518, 1, 1518, 100)
StoreEmitIL.Emit(OpCodes.Br, cont440)
StoreEmitIL.MarkLabel(cont440)
StoreEmitIL.MarkSequencePoint(doc13, 1520, 1, 1520, 100)
StoreEmitIL.Emit(OpCodes.Br, cont439)
StoreEmitIL.MarkLabel(fa439)
StoreEmitIL.MarkSequencePoint(doc13, 1522, 1, 1522, 100)
Dim typ284(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
StoreEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ284(UBound(typ284) + 1)
typ284(UBound(typ284)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ284))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ284).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 11)
StoreEmitIL.MarkSequencePoint(doc13, 1524, 1, 1524, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
StoreEmitIL.Emit(OpCodes.Ldnull)
Dim fa443 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru443 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont443 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, fa443)
StoreEmitIL.Emit(OpCodes.Br, tru443)
StoreEmitIL.MarkLabel(tru443)
StoreEmitIL.MarkSequencePoint(doc13, 1525, 1, 1525, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
Typ03 = Typ
StoreEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsStatic", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsStatic", Type.EmptyTypes).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 8)
StoreEmitIL.MarkSequencePoint(doc13, 1526, 1, 1526, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa444 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru444 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont444 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, tru444)
StoreEmitIL.Emit(OpCodes.Br, fa444)
StoreEmitIL.MarkLabel(tru444)
StoreEmitIL.MarkSequencePoint(doc13, 1527, 1, 1527, 100)
Dim typ286(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReDim Preserve typ286(UBound(typ286) + 1)
typ286(UBound(typ286)) = Typ
StoreEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdarg", typ286))
Typ = GetType(ILEmitter).GetMethod("EmitLdarg", typ286).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
StoreEmitIL.Emit(OpCodes.Pop)
End If
StoreEmitIL.MarkSequencePoint(doc13, 1528, 1, 1528, 100)
StoreEmitIL.Emit(OpCodes.Br, cont444)
StoreEmitIL.MarkLabel(fa444)
StoreEmitIL.Emit(OpCodes.Br, cont444)
StoreEmitIL.MarkLabel(cont444)
StoreEmitIL.MarkSequencePoint(doc13, 1529, 1, 1529, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
Typ03 = Typ
StoreEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
StoreEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
StoreEmitIL.MarkSequencePoint(doc13, 1530, 1, 1530, 100)
Dim typ288(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
ReDim Preserve typ288(UBound(typ288) + 1)
typ288(UBound(typ288)) = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ReDim Preserve typ288(UBound(typ288) + 1)
typ288(UBound(typ288)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ288))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ288).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
StoreEmitIL.Emit(OpCodes.Pop)
End If
StoreEmitIL.MarkSequencePoint(doc13, 1531, 1, 1531, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
Typ03 = Typ
StoreEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 10)
StoreEmitIL.MarkSequencePoint(doc13, 1532, 1, 1532, 100)
StoreEmitIL.Emit(OpCodes.Br, label25)
StoreEmitIL.MarkSequencePoint(doc13, 1533, 1, 1533, 100)
StoreEmitIL.Emit(OpCodes.Br, cont443)
StoreEmitIL.MarkLabel(fa443)
StoreEmitIL.Emit(OpCodes.Br, cont443)
StoreEmitIL.MarkLabel(cont443)
StoreEmitIL.MarkSequencePoint(doc13, 1536, 1, 1536, 100)
StoreEmitIL.Emit(OpCodes.Br, cont439)
StoreEmitIL.MarkLabel(cont439)
StoreEmitIL.MarkSequencePoint(doc13, 1538, 1, 1538, 100)
Dim typ290(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
StoreEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ290(UBound(typ290) + 1)
typ290(UBound(typ290)) = Typ
StoreEmitIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadClass", typ290))
Typ = GetType(Loader).GetMethod("LoadClass", typ290).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 10)
StoreEmitIL.MarkSequencePoint(doc13, 1539, 1, 1539, 100)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Stloc, 8)
StoreEmitIL.MarkSequencePoint(doc13, 1541, 1, 1541, 100)
StoreEmitIL.Emit(OpCodes.Br, cont438)
StoreEmitIL.MarkLabel(fa438)
StoreEmitIL.MarkSequencePoint(doc13, 1543, 1, 1543, 100)
Dim typ291(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(System.Type)
Typ03 = Typ
StoreEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
ReDim Preserve typ291(UBound(typ291) + 1)
typ291(UBound(typ291)) = Typ
StoreEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ291))
Typ = Typ03.GetMethod("Equals", typ291).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 15)
StoreEmitIL.MarkSequencePoint(doc13, 1545, 1, 1545, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa445 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru445 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont445 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, tru445)
StoreEmitIL.Emit(OpCodes.Br, fa445)
StoreEmitIL.MarkLabel(tru445)
StoreEmitIL.MarkSequencePoint(doc13, 1546, 1, 1546, 100)
Dim typ292(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(System.Type)
ReDim Preserve typ292(UBound(typ292) + 1)
typ292(UBound(typ292)) = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
StoreEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ292(UBound(typ292) + 1)
typ292(UBound(typ292)) = Typ
StoreEmitIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadField", typ292))
Typ = GetType(Loader).GetMethod("LoadField", typ292).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 11)
StoreEmitIL.MarkSequencePoint(doc13, 1547, 1, 1547, 100)
StoreEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("MemberTyp"))
Typ = GetType(Loader).GetField("MemberTyp").FieldType
StoreEmitIL.Emit(OpCodes.Stloc, 10)
StoreEmitIL.MarkSequencePoint(doc13, 1548, 1, 1548, 100)
StoreEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("MemberTyp"))
Typ = GetType(Loader).GetField("MemberTyp").FieldType
StoreEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
StoreEmitIL.MarkSequencePoint(doc13, 1549, 1, 1549, 100)
StoreEmitIL.Emit(OpCodes.Br, cont445)
StoreEmitIL.MarkLabel(fa445)
StoreEmitIL.MarkSequencePoint(doc13, 1550, 1, 1550, 100)
Dim typ293(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
StoreEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ293(UBound(typ293) + 1)
typ293(UBound(typ293)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ293))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ293).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 11)
StoreEmitIL.MarkSequencePoint(doc13, 1551, 1, 1551, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
Typ03 = Typ
StoreEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 10)
StoreEmitIL.MarkSequencePoint(doc13, 1552, 1, 1552, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
Typ03 = Typ
StoreEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
StoreEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
StoreEmitIL.MarkSequencePoint(doc13, 1553, 1, 1553, 100)
StoreEmitIL.Emit(OpCodes.Br, cont445)
StoreEmitIL.MarkLabel(cont445)
StoreEmitIL.MarkSequencePoint(doc13, 1555, 1, 1555, 100)
Dim typ296(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
ReDim Preserve typ296(UBound(typ296) + 1)
typ296(UBound(typ296)) = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ReDim Preserve typ296(UBound(typ296) + 1)
typ296(UBound(typ296)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ296))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ296).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
StoreEmitIL.Emit(OpCodes.Pop)
End If
StoreEmitIL.MarkSequencePoint(doc13, 1557, 1, 1557, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa446 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru446 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont446 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, tru446)
StoreEmitIL.Emit(OpCodes.Br, fa446)
StoreEmitIL.MarkLabel(tru446)
StoreEmitIL.MarkSequencePoint(doc13, 1558, 1, 1558, 100)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Stloc, 8)
StoreEmitIL.MarkSequencePoint(doc13, 1559, 1, 1559, 100)
StoreEmitIL.Emit(OpCodes.Br, cont446)
StoreEmitIL.MarkLabel(fa446)
StoreEmitIL.Emit(OpCodes.Br, cont446)
StoreEmitIL.MarkLabel(cont446)
StoreEmitIL.MarkSequencePoint(doc13, 1561, 1, 1561, 100)
StoreEmitIL.Emit(OpCodes.Br, cont438)
StoreEmitIL.MarkLabel(cont438)
StoreEmitIL.MarkSequencePoint(doc13, 1563, 1, 1563, 100)
StoreEmitIL.MarkLabel(label25)
StoreEmitIL.MarkSequencePoint(doc13, 1565, 1, 1565, 100)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Stloc, 7)
StoreEmitIL.MarkSequencePoint(doc13, 1567, 1, 1567, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
Dim fa447 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru447 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont447 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, tru447)
StoreEmitIL.Emit(OpCodes.Br, fa447)
StoreEmitIL.MarkLabel(tru447)
StoreEmitIL.MarkSequencePoint(doc13, 1568, 1, 1568, 100)
StoreEmitIL.Emit(OpCodes.Br, label24)
StoreEmitIL.MarkSequencePoint(doc13, 1569, 1, 1569, 100)
StoreEmitIL.Emit(OpCodes.Br, cont447)
StoreEmitIL.MarkLabel(fa447)
StoreEmitIL.MarkSequencePoint(doc13, 1570, 1, 1570, 100)
StoreEmitIL.Emit(OpCodes.Br, label23)
StoreEmitIL.MarkSequencePoint(doc13, 1571, 1, 1571, 100)
StoreEmitIL.Emit(OpCodes.Br, cont447)
StoreEmitIL.MarkLabel(cont447)
StoreEmitIL.MarkSequencePoint(doc13, 1573, 1, 1573, 100)
StoreEmitIL.MarkLabel(label24)
StoreEmitIL.MarkSequencePoint(doc13, 1575, 1, 1575, 100)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AddrFlg"))
StoreEmitIL.MarkSequencePoint(doc13, 1578, 1, 1578, 100)
StoreEmitIL.Emit(OpCodes.Br, cont437)
StoreEmitIL.MarkLabel(fa437)
StoreEmitIL.Emit(OpCodes.Br, cont437)
StoreEmitIL.MarkLabel(cont437)
StoreEmitIL.MarkSequencePoint(doc13, 1581, 1, 1581, 100)
Dim label26 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.MarkSequencePoint(doc13, 1583, 1, 1583, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Ident)
StoreEmitIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("IsArr"))
Typ = GetType(Ident).GetField("IsArr").FieldType
StoreEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa448 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru448 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont448 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, tru448)
StoreEmitIL.Emit(OpCodes.Br, fa448)
StoreEmitIL.MarkLabel(tru448)
StoreEmitIL.MarkSequencePoint(doc13, 1584, 1, 1584, 100)
StoreEmitIL.Emit(OpCodes.Br, label26)
StoreEmitIL.MarkSequencePoint(doc13, 1585, 1, 1585, 100)
StoreEmitIL.Emit(OpCodes.Br, cont448)
StoreEmitIL.MarkLabel(fa448)
StoreEmitIL.Emit(OpCodes.Br, cont448)
StoreEmitIL.MarkLabel(cont448)
StoreEmitIL.MarkSequencePoint(doc13, 1590, 1, 1590, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Add)
StoreEmitIL.Emit(OpCodes.Stloc, 0)
StoreEmitIL.MarkSequencePoint(doc13, 1592, 1, 1592, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa449 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru449 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont449 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, tru449)
StoreEmitIL.Emit(OpCodes.Br, fa449)
StoreEmitIL.MarkLabel(tru449)
StoreEmitIL.MarkSequencePoint(doc13, 1594, 1, 1594, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa450 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru450 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont450 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, tru450)
StoreEmitIL.Emit(OpCodes.Br, fa450)
StoreEmitIL.MarkLabel(tru450)
StoreEmitIL.MarkSequencePoint(doc13, 1595, 1, 1595, 100)
Dim typ297(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
StoreEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ297(UBound(typ297) + 1)
typ297(UBound(typ297)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindVar", typ297))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindVar", typ297).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 5)
StoreEmitIL.MarkSequencePoint(doc13, 1596, 1, 1596, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
StoreEmitIL.Emit(OpCodes.Ldnull)
Dim fa451 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru451 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont451 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, fa451)
StoreEmitIL.Emit(OpCodes.Br, tru451)
StoreEmitIL.MarkLabel(tru451)
StoreEmitIL.MarkSequencePoint(doc13, 1597, 1, 1597, 100)
StoreEmitIL.Emit(OpCodes.Br, cont451)
StoreEmitIL.MarkLabel(fa451)
StoreEmitIL.MarkSequencePoint(doc13, 1600, 1, 1600, 100)
Dim typ298(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
StoreEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ298(UBound(typ298) + 1)
typ298(UBound(typ298)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ298))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ298).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 11)
StoreEmitIL.MarkSequencePoint(doc13, 1601, 1, 1601, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
StoreEmitIL.Emit(OpCodes.Ldnull)
Dim fa452 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru452 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont452 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, fa452)
StoreEmitIL.Emit(OpCodes.Br, tru452)
StoreEmitIL.MarkLabel(tru452)
StoreEmitIL.MarkSequencePoint(doc13, 1602, 1, 1602, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
Typ03 = Typ
StoreEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsStatic", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsStatic", Type.EmptyTypes).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 8)
StoreEmitIL.MarkSequencePoint(doc13, 1603, 1, 1603, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa453 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru453 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont453 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, tru453)
StoreEmitIL.Emit(OpCodes.Br, fa453)
StoreEmitIL.MarkLabel(tru453)
StoreEmitIL.MarkSequencePoint(doc13, 1604, 1, 1604, 100)
Dim typ300(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReDim Preserve typ300(UBound(typ300) + 1)
typ300(UBound(typ300)) = Typ
StoreEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdarg", typ300))
Typ = GetType(ILEmitter).GetMethod("EmitLdarg", typ300).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
StoreEmitIL.Emit(OpCodes.Pop)
End If
StoreEmitIL.MarkSequencePoint(doc13, 1605, 1, 1605, 100)
StoreEmitIL.Emit(OpCodes.Br, cont453)
StoreEmitIL.MarkLabel(fa453)
StoreEmitIL.Emit(OpCodes.Br, cont453)
StoreEmitIL.MarkLabel(cont453)
StoreEmitIL.MarkSequencePoint(doc13, 1606, 1, 1606, 100)
StoreEmitIL.Emit(OpCodes.Br, cont452)
StoreEmitIL.MarkLabel(fa452)
StoreEmitIL.Emit(OpCodes.Br, cont452)
StoreEmitIL.MarkLabel(cont452)
StoreEmitIL.MarkSequencePoint(doc13, 1609, 1, 1609, 100)
StoreEmitIL.Emit(OpCodes.Br, cont451)
StoreEmitIL.MarkLabel(cont451)
StoreEmitIL.MarkSequencePoint(doc13, 1611, 1, 1611, 100)
StoreEmitIL.Emit(OpCodes.Br, cont450)
StoreEmitIL.MarkLabel(fa450)
StoreEmitIL.MarkSequencePoint(doc13, 1614, 1, 1614, 100)
Dim typ301(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
StoreEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ301(UBound(typ301) + 1)
typ301(UBound(typ301)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ301))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ301).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 11)
StoreEmitIL.MarkSequencePoint(doc13, 1615, 1, 1615, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
StoreEmitIL.Emit(OpCodes.Ldnull)
Dim fa454 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru454 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont454 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, fa454)
StoreEmitIL.Emit(OpCodes.Br, tru454)
StoreEmitIL.MarkLabel(tru454)
StoreEmitIL.MarkSequencePoint(doc13, 1616, 1, 1616, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
Typ03 = Typ
StoreEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsStatic", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsStatic", Type.EmptyTypes).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 8)
StoreEmitIL.MarkSequencePoint(doc13, 1617, 1, 1617, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa455 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru455 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont455 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, tru455)
StoreEmitIL.Emit(OpCodes.Br, fa455)
StoreEmitIL.MarkLabel(tru455)
StoreEmitIL.MarkSequencePoint(doc13, 1618, 1, 1618, 100)
Dim typ303(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReDim Preserve typ303(UBound(typ303) + 1)
typ303(UBound(typ303)) = Typ
StoreEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdarg", typ303))
Typ = GetType(ILEmitter).GetMethod("EmitLdarg", typ303).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
StoreEmitIL.Emit(OpCodes.Pop)
End If
StoreEmitIL.MarkSequencePoint(doc13, 1619, 1, 1619, 100)
StoreEmitIL.Emit(OpCodes.Br, cont455)
StoreEmitIL.MarkLabel(fa455)
StoreEmitIL.Emit(OpCodes.Br, cont455)
StoreEmitIL.MarkLabel(cont455)
StoreEmitIL.MarkSequencePoint(doc13, 1620, 1, 1620, 100)
StoreEmitIL.Emit(OpCodes.Br, cont454)
StoreEmitIL.MarkLabel(fa454)
StoreEmitIL.Emit(OpCodes.Br, cont454)
StoreEmitIL.MarkLabel(cont454)
StoreEmitIL.MarkSequencePoint(doc13, 1623, 1, 1623, 100)
StoreEmitIL.Emit(OpCodes.Br, cont450)
StoreEmitIL.MarkLabel(cont450)
StoreEmitIL.MarkSequencePoint(doc13, 1624, 1, 1624, 100)
StoreEmitIL.Emit(OpCodes.Br, cont449)
StoreEmitIL.MarkLabel(fa449)
StoreEmitIL.Emit(OpCodes.Br, cont449)
StoreEmitIL.MarkLabel(cont449)
StoreEmitIL.MarkSequencePoint(doc13, 1626, 1, 1626, 100)
StoreEmitIL.MarkLabel(label26)
StoreEmitIL.MarkSequencePoint(doc13, 1630, 1, 1630, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Ident)
StoreEmitIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("IsArr"))
Typ = GetType(Ident).GetField("IsArr").FieldType
StoreEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa456 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru456 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont456 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, tru456)
StoreEmitIL.Emit(OpCodes.Br, fa456)
StoreEmitIL.MarkLabel(tru456)
StoreEmitIL.MarkSequencePoint(doc13, 1632, 1, 1632, 100)
StoreEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ304(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Ident)
StoreEmitIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("ArrLoc"))
Typ = GetType(Ident).GetField("ArrLoc").FieldType
ReDim Preserve typ304(UBound(typ304) + 1)
typ304(UBound(typ304)) = Typ
StoreEmitIL.Emit(OpCodes.Callvirt, Evaluate)
Typ = Evaluate.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
StoreEmitIL.Emit(OpCodes.Pop)
End If
StoreEmitIL.MarkSequencePoint(doc13, 1633, 1, 1633, 100)
StoreEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitConvI", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitConvI", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
StoreEmitIL.Emit(OpCodes.Pop)
End If
StoreEmitIL.MarkSequencePoint(doc13, 1635, 1, 1635, 100)
StoreEmitIL.Emit(OpCodes.Br, cont456)
StoreEmitIL.MarkLabel(fa456)
StoreEmitIL.Emit(OpCodes.Br, cont456)
StoreEmitIL.MarkLabel(cont456)
StoreEmitIL.MarkSequencePoint(doc13, 1641, 1, 1641, 100)
StoreEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ305(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(Expr)
ReDim Preserve typ305(UBound(typ305) + 1)
typ305(UBound(typ305)) = Typ
StoreEmitIL.Emit(OpCodes.Callvirt, Evaluate)
Typ = Evaluate.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
StoreEmitIL.Emit(OpCodes.Pop)
End If
StoreEmitIL.MarkSequencePoint(doc13, 1642, 1, 1642, 100)
StoreEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
StoreEmitIL.Emit(OpCodes.Stloc, 14)
StoreEmitIL.MarkSequencePoint(doc13, 1646, 1, 1646, 100)
Dim label27 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.MarkSequencePoint(doc13, 1648, 1, 1648, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Ident)
StoreEmitIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("IsArr"))
Typ = GetType(Ident).GetField("IsArr").FieldType
StoreEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa457 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru457 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont457 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, tru457)
StoreEmitIL.Emit(OpCodes.Br, fa457)
StoreEmitIL.MarkLabel(tru457)
StoreEmitIL.MarkSequencePoint(doc13, 1649, 1, 1649, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(System.Type)
Typ03 = Typ
StoreEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetElementType", Type.EmptyTypes))
Typ = Typ03.GetMethod("GetElementType", Type.EmptyTypes).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 10)
StoreEmitIL.MarkSequencePoint(doc13, 1650, 1, 1650, 100)
Dim typ307(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(System.Type)
ReDim Preserve typ307(UBound(typ307) + 1)
typ307(UBound(typ307)) = Typ
StoreEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitStelem", typ307))
Typ = GetType(ILEmitter).GetMethod("EmitStelem", typ307).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
StoreEmitIL.Emit(OpCodes.Pop)
End If
StoreEmitIL.MarkSequencePoint(doc13, 1651, 1, 1651, 100)
StoreEmitIL.Emit(OpCodes.Br, label27)
StoreEmitIL.MarkSequencePoint(doc13, 1652, 1, 1652, 100)
StoreEmitIL.Emit(OpCodes.Br, cont457)
StoreEmitIL.MarkLabel(fa457)
StoreEmitIL.Emit(OpCodes.Br, cont457)
StoreEmitIL.MarkLabel(cont457)
StoreEmitIL.MarkSequencePoint(doc13, 1654, 1, 1654, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa458 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru458 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont458 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, tru458)
StoreEmitIL.Emit(OpCodes.Br, fa458)
StoreEmitIL.MarkLabel(tru458)
StoreEmitIL.MarkSequencePoint(doc13, 1656, 1, 1656, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa459 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru459 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont459 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, tru459)
StoreEmitIL.Emit(OpCodes.Br, fa459)
StoreEmitIL.MarkLabel(tru459)
StoreEmitIL.MarkSequencePoint(doc13, 1657, 1, 1657, 100)
Dim typ308(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
StoreEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ308(UBound(typ308) + 1)
typ308(UBound(typ308)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindVar", typ308))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindVar", typ308).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 5)
StoreEmitIL.MarkSequencePoint(doc13, 1658, 1, 1658, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
StoreEmitIL.Emit(OpCodes.Ldnull)
Dim fa460 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru460 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont460 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, fa460)
StoreEmitIL.Emit(OpCodes.Br, tru460)
StoreEmitIL.MarkLabel(tru460)
StoreEmitIL.MarkSequencePoint(doc13, 1659, 1, 1659, 100)
Dim typ309(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
StoreEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("Index"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("Index").FieldType
ReDim Preserve typ309(UBound(typ309) + 1)
typ309(UBound(typ309)) = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
StoreEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("LocArg"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("LocArg").FieldType
ReDim Preserve typ309(UBound(typ309) + 1)
typ309(UBound(typ309)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLocSt", typ309))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLocSt", typ309).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
StoreEmitIL.Emit(OpCodes.Pop)
End If
StoreEmitIL.MarkSequencePoint(doc13, 1660, 1, 1660, 100)
StoreEmitIL.Emit(OpCodes.Br, cont460)
StoreEmitIL.MarkLabel(fa460)
StoreEmitIL.MarkSequencePoint(doc13, 1662, 1, 1662, 100)
Dim typ310(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
StoreEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ310(UBound(typ310) + 1)
typ310(UBound(typ310)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ310))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ310).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 11)
StoreEmitIL.MarkSequencePoint(doc13, 1663, 1, 1663, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
StoreEmitIL.Emit(OpCodes.Ldnull)
Dim fa461 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru461 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont461 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, fa461)
StoreEmitIL.Emit(OpCodes.Br, tru461)
StoreEmitIL.MarkLabel(tru461)
StoreEmitIL.MarkSequencePoint(doc13, 1664, 1, 1664, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
Typ03 = Typ
StoreEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsStatic", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsStatic", Type.EmptyTypes).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 8)
StoreEmitIL.MarkSequencePoint(doc13, 1665, 1, 1665, 100)
Dim typ312(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
ReDim Preserve typ312(UBound(typ312) + 1)
typ312(UBound(typ312)) = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ReDim Preserve typ312(UBound(typ312) + 1)
typ312(UBound(typ312)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldSt", typ312))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldSt", typ312).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
StoreEmitIL.Emit(OpCodes.Pop)
End If
StoreEmitIL.MarkSequencePoint(doc13, 1666, 1, 1666, 100)
StoreEmitIL.Emit(OpCodes.Br, cont461)
StoreEmitIL.MarkLabel(fa461)
StoreEmitIL.Emit(OpCodes.Br, cont461)
StoreEmitIL.MarkLabel(cont461)
StoreEmitIL.MarkSequencePoint(doc13, 1668, 1, 1668, 100)
StoreEmitIL.Emit(OpCodes.Br, cont460)
StoreEmitIL.MarkLabel(cont460)
StoreEmitIL.MarkSequencePoint(doc13, 1670, 1, 1670, 100)
StoreEmitIL.Emit(OpCodes.Br, cont459)
StoreEmitIL.MarkLabel(fa459)
StoreEmitIL.MarkSequencePoint(doc13, 1672, 1, 1672, 100)
Dim typ313(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
StoreEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ313(UBound(typ313) + 1)
typ313(UBound(typ313)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ313))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ313).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 11)
StoreEmitIL.MarkSequencePoint(doc13, 1673, 1, 1673, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
StoreEmitIL.Emit(OpCodes.Ldnull)
Dim fa462 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru462 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont462 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, fa462)
StoreEmitIL.Emit(OpCodes.Br, tru462)
StoreEmitIL.MarkLabel(tru462)
StoreEmitIL.MarkSequencePoint(doc13, 1674, 1, 1674, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
Typ03 = Typ
StoreEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsStatic", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsStatic", Type.EmptyTypes).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 8)
StoreEmitIL.MarkSequencePoint(doc13, 1675, 1, 1675, 100)
Dim typ315(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
ReDim Preserve typ315(UBound(typ315) + 1)
typ315(UBound(typ315)) = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ReDim Preserve typ315(UBound(typ315) + 1)
typ315(UBound(typ315)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldSt", typ315))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldSt", typ315).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
StoreEmitIL.Emit(OpCodes.Pop)
End If
StoreEmitIL.MarkSequencePoint(doc13, 1676, 1, 1676, 100)
StoreEmitIL.Emit(OpCodes.Br, cont462)
StoreEmitIL.MarkLabel(fa462)
StoreEmitIL.Emit(OpCodes.Br, cont462)
StoreEmitIL.MarkLabel(cont462)
StoreEmitIL.MarkSequencePoint(doc13, 1678, 1, 1678, 100)
StoreEmitIL.Emit(OpCodes.Br, cont459)
StoreEmitIL.MarkLabel(cont459)
StoreEmitIL.MarkSequencePoint(doc13, 1681, 1, 1681, 100)
StoreEmitIL.Emit(OpCodes.Br, cont458)
StoreEmitIL.MarkLabel(fa458)
StoreEmitIL.MarkSequencePoint(doc13, 1683, 1, 1683, 100)
Dim typ316(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(System.Type)
Typ03 = Typ
StoreEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
ReDim Preserve typ316(UBound(typ316) + 1)
typ316(UBound(typ316)) = Typ
StoreEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ316))
Typ = Typ03.GetMethod("Equals", typ316).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 15)
StoreEmitIL.MarkSequencePoint(doc13, 1685, 1, 1685, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa463 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru463 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont463 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, tru463)
StoreEmitIL.Emit(OpCodes.Br, fa463)
StoreEmitIL.MarkLabel(tru463)
StoreEmitIL.MarkSequencePoint(doc13, 1686, 1, 1686, 100)
Dim typ317(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(System.Type)
ReDim Preserve typ317(UBound(typ317) + 1)
typ317(UBound(typ317)) = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
StoreEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ317(UBound(typ317) + 1)
typ317(UBound(typ317)) = Typ
StoreEmitIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadField", typ317))
Typ = GetType(Loader).GetMethod("LoadField", typ317).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 11)
StoreEmitIL.MarkSequencePoint(doc13, 1687, 1, 1687, 100)
Dim typ318(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
ReDim Preserve typ318(UBound(typ318) + 1)
typ318(UBound(typ318)) = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ReDim Preserve typ318(UBound(typ318) + 1)
typ318(UBound(typ318)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldSt", typ318))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldSt", typ318).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
StoreEmitIL.Emit(OpCodes.Pop)
End If
StoreEmitIL.MarkSequencePoint(doc13, 1688, 1, 1688, 100)
StoreEmitIL.Emit(OpCodes.Br, cont463)
StoreEmitIL.MarkLabel(fa463)
StoreEmitIL.MarkSequencePoint(doc13, 1689, 1, 1689, 100)
Dim typ319(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
StoreEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ319(UBound(typ319) + 1)
typ319(UBound(typ319)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ319))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ319).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 11)
StoreEmitIL.MarkSequencePoint(doc13, 1690, 1, 1690, 100)
Dim typ320(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
ReDim Preserve typ320(UBound(typ320) + 1)
typ320(UBound(typ320)) = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ReDim Preserve typ320(UBound(typ320) + 1)
typ320(UBound(typ320)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldSt", typ320))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldSt", typ320).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
StoreEmitIL.Emit(OpCodes.Pop)
End If
StoreEmitIL.MarkSequencePoint(doc13, 1691, 1, 1691, 100)
StoreEmitIL.Emit(OpCodes.Br, cont463)
StoreEmitIL.MarkLabel(cont463)
StoreEmitIL.MarkSequencePoint(doc13, 1693, 1, 1693, 100)
StoreEmitIL.Emit(OpCodes.Br, cont458)
StoreEmitIL.MarkLabel(cont458)
StoreEmitIL.MarkSequencePoint(doc13, 1695, 1, 1695, 100)
StoreEmitIL.MarkLabel(label27)
StoreEmitIL.MarkSequencePoint(doc13, 1697, 1, 1697, 100)
StoreEmitIL.Emit(OpCodes.Ret)
Evaluator.CreateType()
End Sub


Dim doc14 As ISymbolDocumentWriter

Sub StmtReader()
Dim StmtReader As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "StmtReader", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(Stmt)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
Dim Read As MethodBuilder = StmtReader.DefineMethod("Read", MethodAttributes.Public, GetType(System.Void), typ0)
Dim ReadIL As ILGenerator = Read.GetILGenerator()
Dim Readparam01 As ParameterBuilder = Read.DefineParameter(1, ParameterAttributes.None, "stm")
Dim Readparam02 As ParameterBuilder = Read.DefineParameter(2, ParameterAttributes.None, "fpath")
ReadIL.MarkSequencePoint(doc14, 13, 1, 13, 100)
Dim locbldr374 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr374.SetLocalSymInfo("typ")
ReadIL.MarkSequencePoint(doc14, 14, 1, 14, 100)
Dim locbldr375 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Boolean))
locbldr375.SetLocalSymInfo("b")
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc14, 15, 1, 15, 100)
Dim locbldr376 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.String))
locbldr376.SetLocalSymInfo("tmpstr")
ReadIL.MarkSequencePoint(doc14, 16, 1, 16, 100)
Dim locbldr377 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.String))
locbldr377.SetLocalSymInfo("errstr")
ReadIL.MarkSequencePoint(doc14, 18, 1, 18, 100)
Dim label0 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.MarkSequencePoint(doc14, 20, 1, 20, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("ChainFlg"))
ReadIL.MarkSequencePoint(doc14, 22, 1, 22, 100)
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(ILEmitter).GetField("LineNr"))
ReadIL.MarkSequencePoint(doc14, 23, 1, 23, 100)
ReadIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.String)
ReadIL.Emit(OpCodes.Stsfld, GetType(ILEmitter).GetField("CurSrcFile"))
ReadIL.MarkSequencePoint(doc14, 25, 1, 25, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("DebugFlg"))
Typ = GetType(AsmFactory).GetField("DebugFlg").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa464 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru464 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont464 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru464)
ReadIL.Emit(OpCodes.Br, fa464)
ReadIL.MarkLabel(tru464)
ReadIL.MarkSequencePoint(doc14, 26, 1, 26, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("InMethodFlg"))
Typ = GetType(AsmFactory).GetField("InMethodFlg").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa465 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru465 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont465 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru465)
ReadIL.Emit(OpCodes.Br, fa465)
ReadIL.MarkLabel(tru465)
ReadIL.MarkSequencePoint(doc14, 27, 1, 27, 100)
Dim typ1(-1) As Type
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("MarkDbgPt", typ1))
Typ = GetType(ILEmitter).GetMethod("MarkDbgPt", typ1).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 28, 1, 28, 100)
ReadIL.Emit(OpCodes.Br, cont465)
ReadIL.MarkLabel(fa465)
ReadIL.Emit(OpCodes.Br, cont465)
ReadIL.MarkLabel(cont465)
ReadIL.MarkSequencePoint(doc14, 29, 1, 29, 100)
ReadIL.Emit(OpCodes.Br, cont464)
ReadIL.MarkLabel(fa464)
ReadIL.Emit(OpCodes.Br, cont464)
ReadIL.MarkLabel(cont464)
ReadIL.MarkSequencePoint(doc14, 31, 1, 31, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(RefasmStmt))
Dim typ2 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ2))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ2).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc14, 32, 1, 32, 100)
Dim typ3(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ3))
Typ = Typ03.GetMethod("IsInstanceOfType", typ3).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc14, 34, 1, 34, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa466 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru466 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont466 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru466)
ReadIL.Emit(OpCodes.Br, fa466)
ReadIL.MarkLabel(tru466)
ReadIL.MarkSequencePoint(doc14, 35, 1, 35, 100)
Dim locbldr378 As LocalBuilder = ReadIL.DeclareLocal(GetType(RefasmStmt))
locbldr378.SetLocalSymInfo("rastm")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 4)
ReadIL.MarkSequencePoint(doc14, 36, 1, 36, 100)
Dim locbldr379 As LocalBuilder = ReadIL.DeclareLocal(GetType(Token))
locbldr379.SetLocalSymInfo("ap")
ReadIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(RefasmStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(RefasmStmt).GetField("AsmPath"))
Typ = GetType(RefasmStmt).GetField("AsmPath").FieldType
ReadIL.Emit(OpCodes.Stloc, 5)
ReadIL.MarkSequencePoint(doc14, 38, 1, 38, 100)
Dim typ4(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "^")
Typ = GetType(System.String)
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "(.)*")
Typ = GetType(System.String)
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ4))
Typ = GetType(String).GetMethod("Concat", typ4).ReturnType
ReadIL.Emit(OpCodes.Stloc, 2)
ReadIL.MarkSequencePoint(doc14, 39, 1, 39, 100)
Dim typ5(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReDim Preserve typ5(UBound(typ5) + 1)
typ5(UBound(typ5)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "$")
Typ = GetType(System.String)
ReDim Preserve typ5(UBound(typ5) + 1)
typ5(UBound(typ5)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ5))
Typ = GetType(String).GetMethod("Concat", typ5).ReturnType
ReadIL.Emit(OpCodes.Stloc, 2)
ReadIL.MarkSequencePoint(doc14, 40, 1, 40, 100)
Dim locbldr380 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Boolean))
locbldr380.SetLocalSymInfo("compb")
Dim typ6(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ6))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ6).ReturnType
ReadIL.Emit(OpCodes.Stloc, 6)
ReadIL.MarkSequencePoint(doc14, 42, 1, 42, 100)
ReadIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa467 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru467 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont467 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru467)
ReadIL.Emit(OpCodes.Br, fa467)
ReadIL.MarkLabel(tru467)
ReadIL.MarkSequencePoint(doc14, 43, 1, 43, 100)
ReadIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stloc, 2)
ReadIL.MarkSequencePoint(doc14, 44, 1, 44, 100)
Dim locbldr381 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Char).MakeArrayType())
locbldr381.SetLocalSymInfo("tmpchrarr")
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Char))
ReadIL.Emit(OpCodes.Stloc, 7)
ReadIL.MarkSequencePoint(doc14, 45, 1, 45, 100)
ReadIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
Dim typ7 As Type() = {Typ}
ReadIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ7))
Typ = GetType(System.Convert).GetMethod("ToChar", typ7).ReturnType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc14, 46, 1, 46, 100)
Dim typ8(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Trim", typ8))
Typ = Typ03.GetMethod("Trim", typ8).ReturnType
ReadIL.Emit(OpCodes.Stloc, 2)
ReadIL.MarkSequencePoint(doc14, 47, 1, 47, 100)
ReadIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReadIL.Emit(OpCodes.Stfld, GetType(Token).GetField("Value"))
ReadIL.MarkSequencePoint(doc14, 48, 1, 48, 100)
ReadIL.Emit(OpCodes.Br, cont467)
ReadIL.MarkLabel(fa467)
ReadIL.Emit(OpCodes.Br, cont467)
ReadIL.MarkLabel(cont467)
ReadIL.MarkSequencePoint(doc14, 50, 1, 50, 100)
ReadIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
Dim typ9(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ParseUtils).GetMethod("ProcessMSYSPath", typ9))
Typ = GetType(ParseUtils).GetMethod("ProcessMSYSPath", typ9).ReturnType
ReadIL.Emit(OpCodes.Stfld, GetType(Token).GetField("Value"))
ReadIL.MarkSequencePoint(doc14, 52, 1, 52, 100)
Dim locbldr382 As LocalBuilder = ReadIL.DeclareLocal(GetType(Assembly))
locbldr382.SetLocalSymInfo("asm")
Dim typ10(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ10(UBound(typ10) + 1)
typ10(UBound(typ10)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Assembly).GetMethod("LoadFrom", typ10))
Typ = GetType(Assembly).GetMethod("LoadFrom", typ10).ReturnType
ReadIL.Emit(OpCodes.Stloc, 8)
ReadIL.MarkSequencePoint(doc14, 53, 1, 53, 100)
Dim typ11(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Referencing Assembly: ")
Typ = GetType(System.String)
ReDim Preserve typ11(UBound(typ11) + 1)
typ11(UBound(typ11)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("Write", typ11))
Typ = GetType(StreamUtils).GetMethod("Write", typ11).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 54, 1, 54, 100)
Dim typ12(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ12(UBound(typ12) + 1)
typ12(UBound(typ12)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("WriteLine", typ12))
Typ = GetType(StreamUtils).GetMethod("WriteLine", typ12).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 55, 1, 55, 100)
Dim typ13(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(Assembly)
ReDim Preserve typ13(UBound(typ13) + 1)
typ13(UBound(typ13)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Importer).GetMethod("AddAsm", typ13))
Typ = GetType(Importer).GetMethod("AddAsm", typ13).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 56, 1, 56, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc14, 57, 1, 57, 100)
ReadIL.Emit(OpCodes.Br, cont466)
ReadIL.MarkLabel(fa466)
ReadIL.Emit(OpCodes.Br, cont466)
ReadIL.MarkLabel(cont466)
ReadIL.MarkSequencePoint(doc14, 59, 1, 59, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(RefstdasmStmt))
Dim typ14 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ14))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ14).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc14, 60, 1, 60, 100)
Dim typ15(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ15(UBound(typ15) + 1)
typ15(UBound(typ15)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ15))
Typ = Typ03.GetMethod("IsInstanceOfType", typ15).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc14, 62, 1, 62, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa468 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru468 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont468 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru468)
ReadIL.Emit(OpCodes.Br, fa468)
ReadIL.MarkLabel(tru468)
ReadIL.MarkSequencePoint(doc14, 63, 1, 63, 100)
Dim locbldr383 As LocalBuilder = ReadIL.DeclareLocal(GetType(RefstdasmStmt))
locbldr383.SetLocalSymInfo("rsastm")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 9)
ReadIL.MarkSequencePoint(doc14, 64, 1, 64, 100)
ReadIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(RefstdasmStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(RefstdasmStmt).GetField("AsmPath"))
Typ = GetType(RefstdasmStmt).GetField("AsmPath").FieldType
ReadIL.Emit(OpCodes.Stloc, 5)
ReadIL.MarkSequencePoint(doc14, 66, 1, 66, 100)
Dim typ16(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "^")
Typ = GetType(System.String)
ReDim Preserve typ16(UBound(typ16) + 1)
typ16(UBound(typ16)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ16(UBound(typ16) + 1)
typ16(UBound(typ16)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "(.)*")
Typ = GetType(System.String)
ReDim Preserve typ16(UBound(typ16) + 1)
typ16(UBound(typ16)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ16(UBound(typ16) + 1)
typ16(UBound(typ16)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ16))
Typ = GetType(String).GetMethod("Concat", typ16).ReturnType
ReadIL.Emit(OpCodes.Stloc, 2)
ReadIL.MarkSequencePoint(doc14, 67, 1, 67, 100)
Dim typ17(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReDim Preserve typ17(UBound(typ17) + 1)
typ17(UBound(typ17)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "$")
Typ = GetType(System.String)
ReDim Preserve typ17(UBound(typ17) + 1)
typ17(UBound(typ17)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ17))
Typ = GetType(String).GetMethod("Concat", typ17).ReturnType
ReadIL.Emit(OpCodes.Stloc, 2)
ReadIL.MarkSequencePoint(doc14, 68, 1, 68, 100)
Dim typ18(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ18(UBound(typ18) + 1)
typ18(UBound(typ18)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReDim Preserve typ18(UBound(typ18) + 1)
typ18(UBound(typ18)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ18))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ18).ReturnType
ReadIL.Emit(OpCodes.Stloc, 6)
ReadIL.MarkSequencePoint(doc14, 70, 1, 70, 100)
ReadIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa469 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru469 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont469 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru469)
ReadIL.Emit(OpCodes.Br, fa469)
ReadIL.MarkLabel(tru469)
ReadIL.MarkSequencePoint(doc14, 71, 1, 71, 100)
ReadIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stloc, 2)
ReadIL.MarkSequencePoint(doc14, 72, 1, 72, 100)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Char))
ReadIL.Emit(OpCodes.Stloc, 7)
ReadIL.MarkSequencePoint(doc14, 73, 1, 73, 100)
ReadIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
Dim typ19 As Type() = {Typ}
ReadIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ19))
Typ = GetType(System.Convert).GetMethod("ToChar", typ19).ReturnType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc14, 74, 1, 74, 100)
Dim typ20(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ20(UBound(typ20) + 1)
typ20(UBound(typ20)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Trim", typ20))
Typ = Typ03.GetMethod("Trim", typ20).ReturnType
ReadIL.Emit(OpCodes.Stloc, 2)
ReadIL.MarkSequencePoint(doc14, 75, 1, 75, 100)
ReadIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReadIL.Emit(OpCodes.Stfld, GetType(Token).GetField("Value"))
ReadIL.MarkSequencePoint(doc14, 76, 1, 76, 100)
ReadIL.Emit(OpCodes.Br, cont469)
ReadIL.MarkLabel(fa469)
ReadIL.Emit(OpCodes.Br, cont469)
ReadIL.MarkLabel(cont469)
ReadIL.MarkSequencePoint(doc14, 78, 1, 78, 100)
ReadIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
Dim typ21(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ21(UBound(typ21) + 1)
typ21(UBound(typ21)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ParseUtils).GetMethod("ProcessMSYSPath", typ21))
Typ = GetType(ParseUtils).GetMethod("ProcessMSYSPath", typ21).ReturnType
ReadIL.Emit(OpCodes.Stfld, GetType(Token).GetField("Value"))
ReadIL.MarkSequencePoint(doc14, 79, 1, 79, 100)
ReadIL.Emit(OpCodes.Call, GetType(RuntimeEnvironment).GetMethod("GetRuntimeDirectory", Type.EmptyTypes))
Typ = GetType(RuntimeEnvironment).GetMethod("GetRuntimeDirectory", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 2)
ReadIL.MarkSequencePoint(doc14, 80, 1, 80, 100)
ReadIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
Dim typ22(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReDim Preserve typ22(UBound(typ22) + 1)
typ22(UBound(typ22)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ22(UBound(typ22) + 1)
typ22(UBound(typ22)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Path).GetMethod("Combine", typ22))
Typ = GetType(Path).GetMethod("Combine", typ22).ReturnType
ReadIL.Emit(OpCodes.Stfld, GetType(Token).GetField("Value"))
ReadIL.MarkSequencePoint(doc14, 82, 1, 82, 100)
Dim typ23(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ23(UBound(typ23) + 1)
typ23(UBound(typ23)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Assembly).GetMethod("LoadFrom", typ23))
Typ = GetType(Assembly).GetMethod("LoadFrom", typ23).ReturnType
ReadIL.Emit(OpCodes.Stloc, 8)
ReadIL.MarkSequencePoint(doc14, 83, 1, 83, 100)
Dim typ24(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Referencing Assembly: ")
Typ = GetType(System.String)
ReDim Preserve typ24(UBound(typ24) + 1)
typ24(UBound(typ24)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("Write", typ24))
Typ = GetType(StreamUtils).GetMethod("Write", typ24).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 84, 1, 84, 100)
Dim typ25(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ25(UBound(typ25) + 1)
typ25(UBound(typ25)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("WriteLine", typ25))
Typ = GetType(StreamUtils).GetMethod("WriteLine", typ25).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 85, 1, 85, 100)
Dim typ26(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(Assembly)
ReDim Preserve typ26(UBound(typ26) + 1)
typ26(UBound(typ26)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Importer).GetMethod("AddAsm", typ26))
Typ = GetType(Importer).GetMethod("AddAsm", typ26).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 86, 1, 86, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc14, 87, 1, 87, 100)
ReadIL.Emit(OpCodes.Br, cont468)
ReadIL.MarkLabel(fa468)
ReadIL.Emit(OpCodes.Br, cont468)
ReadIL.MarkLabel(cont468)
ReadIL.MarkSequencePoint(doc14, 89, 1, 89, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(ImportStmt))
Dim typ27 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ27))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ27).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc14, 90, 1, 90, 100)
Dim typ28(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ28(UBound(typ28) + 1)
typ28(UBound(typ28)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ28))
Typ = Typ03.GetMethod("IsInstanceOfType", typ28).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc14, 92, 1, 92, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa470 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru470 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont470 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru470)
ReadIL.Emit(OpCodes.Br, fa470)
ReadIL.MarkLabel(tru470)
ReadIL.MarkSequencePoint(doc14, 93, 1, 93, 100)
Dim locbldr384 As LocalBuilder = ReadIL.DeclareLocal(GetType(ImportStmt))
locbldr384.SetLocalSymInfo("istm")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 10)
ReadIL.MarkSequencePoint(doc14, 94, 1, 94, 100)
Dim locbldr385 As LocalBuilder = ReadIL.DeclareLocal(GetType(Token))
locbldr385.SetLocalSymInfo("ina")
ReadIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(ImportStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(ImportStmt).GetField("NS"))
Typ = GetType(ImportStmt).GetField("NS").FieldType
ReadIL.Emit(OpCodes.Stloc, 11)
ReadIL.MarkSequencePoint(doc14, 96, 1, 96, 100)
Dim typ29(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "^")
Typ = GetType(System.String)
ReDim Preserve typ29(UBound(typ29) + 1)
typ29(UBound(typ29)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ29(UBound(typ29) + 1)
typ29(UBound(typ29)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "(.)*")
Typ = GetType(System.String)
ReDim Preserve typ29(UBound(typ29) + 1)
typ29(UBound(typ29)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ29(UBound(typ29) + 1)
typ29(UBound(typ29)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ29))
Typ = GetType(String).GetMethod("Concat", typ29).ReturnType
ReadIL.Emit(OpCodes.Stloc, 2)
ReadIL.MarkSequencePoint(doc14, 97, 1, 97, 100)
Dim typ30(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReDim Preserve typ30(UBound(typ30) + 1)
typ30(UBound(typ30)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "$")
Typ = GetType(System.String)
ReDim Preserve typ30(UBound(typ30) + 1)
typ30(UBound(typ30)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ30))
Typ = GetType(String).GetMethod("Concat", typ30).ReturnType
ReadIL.Emit(OpCodes.Stloc, 2)
ReadIL.MarkSequencePoint(doc14, 98, 1, 98, 100)
Dim typ31(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ31(UBound(typ31) + 1)
typ31(UBound(typ31)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReDim Preserve typ31(UBound(typ31) + 1)
typ31(UBound(typ31)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ31))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ31).ReturnType
ReadIL.Emit(OpCodes.Stloc, 6)
ReadIL.MarkSequencePoint(doc14, 100, 1, 100, 100)
ReadIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa471 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru471 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont471 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru471)
ReadIL.Emit(OpCodes.Br, fa471)
ReadIL.MarkLabel(tru471)
ReadIL.MarkSequencePoint(doc14, 101, 1, 101, 100)
ReadIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stloc, 2)
ReadIL.MarkSequencePoint(doc14, 102, 1, 102, 100)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Char))
ReadIL.Emit(OpCodes.Stloc, 7)
ReadIL.MarkSequencePoint(doc14, 103, 1, 103, 100)
ReadIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
Dim typ32 As Type() = {Typ}
ReadIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ32))
Typ = GetType(System.Convert).GetMethod("ToChar", typ32).ReturnType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc14, 104, 1, 104, 100)
Dim typ33(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ33(UBound(typ33) + 1)
typ33(UBound(typ33)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Trim", typ33))
Typ = Typ03.GetMethod("Trim", typ33).ReturnType
ReadIL.Emit(OpCodes.Stloc, 2)
ReadIL.MarkSequencePoint(doc14, 105, 1, 105, 100)
ReadIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReadIL.Emit(OpCodes.Stfld, GetType(Token).GetField("Value"))
ReadIL.MarkSequencePoint(doc14, 106, 1, 106, 100)
ReadIL.Emit(OpCodes.Br, cont471)
ReadIL.MarkLabel(fa471)
ReadIL.Emit(OpCodes.Br, cont471)
ReadIL.MarkLabel(cont471)
ReadIL.MarkSequencePoint(doc14, 108, 1, 108, 100)
Dim typ34(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Importing Namespace: ")
Typ = GetType(System.String)
ReDim Preserve typ34(UBound(typ34) + 1)
typ34(UBound(typ34)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("Write", typ34))
Typ = GetType(StreamUtils).GetMethod("Write", typ34).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 109, 1, 109, 100)
Dim typ35(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ35(UBound(typ35) + 1)
typ35(UBound(typ35)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("WriteLine", typ35))
Typ = GetType(StreamUtils).GetMethod("WriteLine", typ35).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 111, 1, 111, 100)
Dim typ36(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ36(UBound(typ36) + 1)
typ36(UBound(typ36)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Importer).GetMethod("AddImp", typ36))
Typ = GetType(Importer).GetMethod("AddImp", typ36).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 112, 1, 112, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc14, 113, 1, 113, 100)
ReadIL.Emit(OpCodes.Br, cont470)
ReadIL.MarkLabel(fa470)
ReadIL.Emit(OpCodes.Br, cont470)
ReadIL.MarkLabel(cont470)
ReadIL.MarkSequencePoint(doc14, 115, 1, 115, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(LocimportStmt))
Dim typ37 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ37))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ37).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc14, 116, 1, 116, 100)
Dim typ38(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ38(UBound(typ38) + 1)
typ38(UBound(typ38)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ38))
Typ = Typ03.GetMethod("IsInstanceOfType", typ38).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc14, 118, 1, 118, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa472 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru472 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont472 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru472)
ReadIL.Emit(OpCodes.Br, fa472)
ReadIL.MarkLabel(tru472)
ReadIL.MarkSequencePoint(doc14, 119, 1, 119, 100)
Dim locbldr386 As LocalBuilder = ReadIL.DeclareLocal(GetType(LocimportStmt))
locbldr386.SetLocalSymInfo("listm")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 12)
ReadIL.MarkSequencePoint(doc14, 120, 1, 120, 100)
Dim locbldr387 As LocalBuilder = ReadIL.DeclareLocal(GetType(Token))
locbldr387.SetLocalSymInfo("lina")
ReadIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(LocimportStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(LocimportStmt).GetField("NS"))
Typ = GetType(LocimportStmt).GetField("NS").FieldType
ReadIL.Emit(OpCodes.Stloc, 13)
ReadIL.MarkSequencePoint(doc14, 121, 1, 121, 100)
Dim typ39(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "^")
Typ = GetType(System.String)
ReDim Preserve typ39(UBound(typ39) + 1)
typ39(UBound(typ39)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ39(UBound(typ39) + 1)
typ39(UBound(typ39)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "(.)*")
Typ = GetType(System.String)
ReDim Preserve typ39(UBound(typ39) + 1)
typ39(UBound(typ39)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ39(UBound(typ39) + 1)
typ39(UBound(typ39)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ39))
Typ = GetType(String).GetMethod("Concat", typ39).ReturnType
ReadIL.Emit(OpCodes.Stloc, 2)
ReadIL.MarkSequencePoint(doc14, 122, 1, 122, 100)
Dim typ40(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReDim Preserve typ40(UBound(typ40) + 1)
typ40(UBound(typ40)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "$")
Typ = GetType(System.String)
ReDim Preserve typ40(UBound(typ40) + 1)
typ40(UBound(typ40)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ40))
Typ = GetType(String).GetMethod("Concat", typ40).ReturnType
ReadIL.Emit(OpCodes.Stloc, 2)
ReadIL.MarkSequencePoint(doc14, 123, 1, 123, 100)
Dim typ41(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ41(UBound(typ41) + 1)
typ41(UBound(typ41)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReDim Preserve typ41(UBound(typ41) + 1)
typ41(UBound(typ41)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ41))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ41).ReturnType
ReadIL.Emit(OpCodes.Stloc, 6)
ReadIL.MarkSequencePoint(doc14, 125, 1, 125, 100)
ReadIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa473 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru473 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont473 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru473)
ReadIL.Emit(OpCodes.Br, fa473)
ReadIL.MarkLabel(tru473)
ReadIL.MarkSequencePoint(doc14, 126, 1, 126, 100)
ReadIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stloc, 2)
ReadIL.MarkSequencePoint(doc14, 127, 1, 127, 100)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Char))
ReadIL.Emit(OpCodes.Stloc, 7)
ReadIL.MarkSequencePoint(doc14, 128, 1, 128, 100)
ReadIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
Dim typ42 As Type() = {Typ}
ReadIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ42))
Typ = GetType(System.Convert).GetMethod("ToChar", typ42).ReturnType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc14, 129, 1, 129, 100)
Dim typ43(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ43(UBound(typ43) + 1)
typ43(UBound(typ43)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Trim", typ43))
Typ = Typ03.GetMethod("Trim", typ43).ReturnType
ReadIL.Emit(OpCodes.Stloc, 2)
ReadIL.MarkSequencePoint(doc14, 130, 1, 130, 100)
ReadIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReadIL.Emit(OpCodes.Stfld, GetType(Token).GetField("Value"))
ReadIL.MarkSequencePoint(doc14, 131, 1, 131, 100)
ReadIL.Emit(OpCodes.Br, cont473)
ReadIL.MarkLabel(fa473)
ReadIL.Emit(OpCodes.Br, cont473)
ReadIL.MarkLabel(cont473)
ReadIL.MarkSequencePoint(doc14, 133, 1, 133, 100)
Dim typ44(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Importing Namespace: ")
Typ = GetType(System.String)
ReDim Preserve typ44(UBound(typ44) + 1)
typ44(UBound(typ44)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("Write", typ44))
Typ = GetType(StreamUtils).GetMethod("Write", typ44).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 134, 1, 134, 100)
Dim typ45(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ45(UBound(typ45) + 1)
typ45(UBound(typ45)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("WriteLine", typ45))
Typ = GetType(StreamUtils).GetMethod("WriteLine", typ45).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 136, 1, 136, 100)
Dim typ46(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ46(UBound(typ46) + 1)
typ46(UBound(typ46)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Importer).GetMethod("AddLocImp", typ46))
Typ = GetType(Importer).GetMethod("AddLocImp", typ46).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 137, 1, 137, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc14, 138, 1, 138, 100)
ReadIL.Emit(OpCodes.Br, cont472)
ReadIL.MarkLabel(fa472)
ReadIL.Emit(OpCodes.Br, cont472)
ReadIL.MarkLabel(cont472)
ReadIL.MarkSequencePoint(doc14, 140, 1, 140, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(AssemblyStmt))
Dim typ47 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ47))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ47).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc14, 141, 1, 141, 100)
Dim typ48(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ48(UBound(typ48) + 1)
typ48(UBound(typ48)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ48))
Typ = Typ03.GetMethod("IsInstanceOfType", typ48).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc14, 143, 1, 143, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa474 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru474 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont474 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru474)
ReadIL.Emit(OpCodes.Br, fa474)
ReadIL.MarkLabel(tru474)
ReadIL.MarkSequencePoint(doc14, 145, 1, 145, 100)
Dim locbldr388 As LocalBuilder = ReadIL.DeclareLocal(GetType(AssemblyStmt))
locbldr388.SetLocalSymInfo("asms")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 14)
ReadIL.MarkSequencePoint(doc14, 146, 1, 146, 100)
Dim locbldr389 As LocalBuilder = ReadIL.DeclareLocal(GetType(Ident))
locbldr389.SetLocalSymInfo("asmn")
ReadIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(AssemblyStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(AssemblyStmt).GetField("AsmName"))
Typ = GetType(AssemblyStmt).GetField("AsmName").FieldType
ReadIL.Emit(OpCodes.Stloc, 15)
ReadIL.MarkSequencePoint(doc14, 147, 1, 147, 100)
Dim typ49(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ49(UBound(typ49) + 1)
typ49(UBound(typ49)) = Typ
ReadIL.Emit(OpCodes.Newobj, GetType(AssemblyName).GetConstructor(typ49))
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AsmNameStr"))
ReadIL.MarkSequencePoint(doc14, 148, 1, 148, 100)
Dim locbldr390 As LocalBuilder = ReadIL.DeclareLocal(GetType(Token))
locbldr390.SetLocalSymInfo("asmm")
ReadIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(AssemblyStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(AssemblyStmt).GetField("Mode"))
Typ = GetType(AssemblyStmt).GetField("Mode").FieldType
ReadIL.Emit(OpCodes.Stloc, 16)
ReadIL.MarkSequencePoint(doc14, 149, 1, 149, 100)
ReadIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AsmMode"))
ReadIL.MarkSequencePoint(doc14, 150, 1, 150, 100)
ReadIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("DfltNS"))
ReadIL.MarkSequencePoint(doc14, 151, 1, 151, 100)
ReadIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnNS"))
ReadIL.MarkSequencePoint(doc14, 153, 1, 153, 100)
Dim typ50(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Beginning Assembly: ")
Typ = GetType(System.String)
ReDim Preserve typ50(UBound(typ50) + 1)
typ50(UBound(typ50)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("Write", typ50))
Typ = GetType(StreamUtils).GetMethod("Write", typ50).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 154, 1, 154, 100)
Dim typ51(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ51(UBound(typ51) + 1)
typ51(UBound(typ51)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("WriteLine", typ51))
Typ = GetType(StreamUtils).GetMethod("WriteLine", typ51).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 156, 1, 156, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc14, 158, 1, 158, 100)
ReadIL.Emit(OpCodes.Br, cont474)
ReadIL.MarkLabel(fa474)
ReadIL.Emit(OpCodes.Br, cont474)
ReadIL.MarkLabel(cont474)
ReadIL.MarkSequencePoint(doc14, 160, 1, 160, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(VerStmt))
Dim typ52 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ52))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ52).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc14, 161, 1, 161, 100)
Dim typ53(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ53(UBound(typ53) + 1)
typ53(UBound(typ53)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ53))
Typ = Typ03.GetMethod("IsInstanceOfType", typ53).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc14, 163, 1, 163, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa475 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru475 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont475 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru475)
ReadIL.Emit(OpCodes.Br, fa475)
ReadIL.MarkLabel(tru475)
ReadIL.MarkSequencePoint(doc14, 164, 1, 164, 100)
Dim locbldr391 As LocalBuilder = ReadIL.DeclareLocal(GetType(VerStmt))
locbldr391.SetLocalSymInfo("asmv")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 17)
ReadIL.MarkSequencePoint(doc14, 165, 1, 165, 100)
Dim locbldr392 As LocalBuilder = ReadIL.DeclareLocal(GetType(IntLiteral).MakeArrayType())
locbldr392.SetLocalSymInfo("vns")
ReadIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(VerStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(VerStmt).GetField("VersionNos"))
Typ = GetType(VerStmt).GetField("VersionNos").FieldType
ReadIL.Emit(OpCodes.Stloc, 18)
ReadIL.MarkSequencePoint(doc14, 166, 1, 166, 100)
Dim locbldr393 As LocalBuilder = ReadIL.DeclareLocal(GetType(IntLiteral))
locbldr393.SetLocalSymInfo("vne")
ReadIL.MarkSequencePoint(doc14, 167, 1, 167, 100)
Dim locbldr394 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Int32).MakeArrayType())
locbldr394.SetLocalSymInfo("vernos")
ReadIL.Emit(OpCodes.Ldc_I4, CInt(4))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Int32))
ReadIL.Emit(OpCodes.Stloc, 20)
ReadIL.MarkSequencePoint(doc14, 168, 1, 168, 100)
ReadIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(IntLiteral).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(IntLiteral).MakeArrayType().GetElementType())
Typ = GetType(IntLiteral).MakeArrayType().GetElementType()
ReadIL.Emit(OpCodes.Stloc, 19)
ReadIL.MarkSequencePoint(doc14, 169, 1, 169, 100)
ReadIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(IntLiteral)
ReadIL.Emit(OpCodes.Ldfld, GetType(IntLiteral).GetField("NumVal"))
Typ = GetType(IntLiteral).GetField("NumVal").FieldType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Int32).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc14, 170, 1, 170, 100)
ReadIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(IntLiteral).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(IntLiteral).MakeArrayType().GetElementType())
Typ = GetType(IntLiteral).MakeArrayType().GetElementType()
ReadIL.Emit(OpCodes.Stloc, 19)
ReadIL.MarkSequencePoint(doc14, 171, 1, 171, 100)
ReadIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(IntLiteral)
ReadIL.Emit(OpCodes.Ldfld, GetType(IntLiteral).GetField("NumVal"))
Typ = GetType(IntLiteral).GetField("NumVal").FieldType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Int32).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc14, 172, 1, 172, 100)
ReadIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(IntLiteral).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(IntLiteral).MakeArrayType().GetElementType())
Typ = GetType(IntLiteral).MakeArrayType().GetElementType()
ReadIL.Emit(OpCodes.Stloc, 19)
ReadIL.MarkSequencePoint(doc14, 173, 1, 173, 100)
ReadIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(IntLiteral)
ReadIL.Emit(OpCodes.Ldfld, GetType(IntLiteral).GetField("NumVal"))
Typ = GetType(IntLiteral).GetField("NumVal").FieldType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Int32).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc14, 174, 1, 174, 100)
ReadIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(IntLiteral).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(IntLiteral).MakeArrayType().GetElementType())
Typ = GetType(IntLiteral).MakeArrayType().GetElementType()
ReadIL.Emit(OpCodes.Stloc, 19)
ReadIL.MarkSequencePoint(doc14, 175, 1, 175, 100)
ReadIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(IntLiteral)
ReadIL.Emit(OpCodes.Ldfld, GetType(IntLiteral).GetField("NumVal"))
Typ = GetType(IntLiteral).GetField("NumVal").FieldType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Int32).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc14, 176, 1, 176, 100)
Dim locbldr395 As LocalBuilder = ReadIL.DeclareLocal(GetType(Version))
locbldr395.SetLocalSymInfo("asmver")
Dim typ54(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(System.Int32).MakeArrayType().GetElementType())
Typ = GetType(System.Int32).MakeArrayType().GetElementType()
ReDim Preserve typ54(UBound(typ54) + 1)
typ54(UBound(typ54)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(System.Int32).MakeArrayType().GetElementType())
Typ = GetType(System.Int32).MakeArrayType().GetElementType()
ReDim Preserve typ54(UBound(typ54) + 1)
typ54(UBound(typ54)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(System.Int32).MakeArrayType().GetElementType())
Typ = GetType(System.Int32).MakeArrayType().GetElementType()
ReDim Preserve typ54(UBound(typ54) + 1)
typ54(UBound(typ54)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(System.Int32).MakeArrayType().GetElementType())
Typ = GetType(System.Int32).MakeArrayType().GetElementType()
ReDim Preserve typ54(UBound(typ54) + 1)
typ54(UBound(typ54)) = Typ
ReadIL.Emit(OpCodes.Newobj, GetType(Version).GetConstructor(typ54))
ReadIL.Emit(OpCodes.Stloc, 21)
ReadIL.MarkSequencePoint(doc14, 177, 1, 177, 100)
Dim locbldr396 As LocalBuilder = ReadIL.DeclareLocal(GetType(AssemblyName))
locbldr396.SetLocalSymInfo("asmnm")
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmNameStr"))
Typ = GetType(AsmFactory).GetField("AsmNameStr").FieldType
ReadIL.Emit(OpCodes.Stloc, 22)
ReadIL.MarkSequencePoint(doc14, 178, 1, 178, 100)
Dim typ55(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(AssemblyName)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(Version)
ReDim Preserve typ55(UBound(typ55) + 1)
typ55(UBound(typ55)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("set_Version", typ55))
Typ = Typ03.GetMethod("set_Version", typ55).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 179, 1, 179, 100)
ReadIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(AssemblyName)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AsmNameStr"))
ReadIL.MarkSequencePoint(doc14, 180, 1, 180, 100)
Dim locbldr397 As LocalBuilder = ReadIL.DeclareLocal(GetType(AppDomain))
locbldr397.SetLocalSymInfo("cad")
ReadIL.Emit(OpCodes.Call, GetType(AppDomain).GetMethod("get_CurrentDomain", Type.EmptyTypes))
Typ = GetType(AppDomain).GetMethod("get_CurrentDomain", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 23)
ReadIL.MarkSequencePoint(doc14, 181, 1, 181, 100)
Dim locbldr398 As LocalBuilder = ReadIL.DeclareLocal(GetType(AssemblyBuilderAccess))
locbldr398.SetLocalSymInfo("aasv")
ReadIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Stloc, 24)
ReadIL.MarkSequencePoint(doc14, 182, 1, 182, 100)
Dim locbldr399 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.String))
locbldr399.SetLocalSymInfo("curd")
ReadIL.Emit(OpCodes.Call, GetType(Directory).GetMethod("GetCurrentDirectory", Type.EmptyTypes))
Typ = GetType(Directory).GetMethod("GetCurrentDirectory", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 25)
ReadIL.MarkSequencePoint(doc14, 183, 1, 183, 100)
Dim typ56(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 23)
Typ = GetType(AppDomain)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(AssemblyName)
ReDim Preserve typ56(UBound(typ56) + 1)
typ56(UBound(typ56)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(AssemblyBuilderAccess)
ReDim Preserve typ56(UBound(typ56) + 1)
typ56(UBound(typ56)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(System.String)
ReDim Preserve typ56(UBound(typ56) + 1)
typ56(UBound(typ56)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineDynamicAssembly", typ56))
Typ = Typ03.GetMethod("DefineDynamicAssembly", typ56).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AsmB"))
ReadIL.MarkSequencePoint(doc14, 184, 1, 184, 100)
Dim locbldr400 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.String))
locbldr400.SetLocalSymInfo("asmnme")
ReadIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(AssemblyName)
Typ03 = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_Name", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_Name", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 26)
ReadIL.MarkSequencePoint(doc14, 185, 1, 185, 100)
Dim typ58(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 26)
Typ = GetType(System.String)
ReDim Preserve typ58(UBound(typ58) + 1)
typ58(UBound(typ58)) = Typ
ReadIL.Emit(OpCodes.Ldstr, ".")
Typ = GetType(System.String)
ReDim Preserve typ58(UBound(typ58) + 1)
typ58(UBound(typ58)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmMode"))
Typ = GetType(AsmFactory).GetField("AsmMode").FieldType
ReDim Preserve typ58(UBound(typ58) + 1)
typ58(UBound(typ58)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ58))
Typ = GetType(String).GetMethod("Concat", typ58).ReturnType
ReadIL.Emit(OpCodes.Stloc, 26)
ReadIL.MarkSequencePoint(doc14, 186, 1, 186, 100)
Dim locbldr401 As LocalBuilder = ReadIL.DeclareLocal(GetType(AssemblyBuilder))
locbldr401.SetLocalSymInfo("ab")
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmB"))
Typ = GetType(AsmFactory).GetField("AsmB").FieldType
ReadIL.Emit(OpCodes.Stloc, 27)
ReadIL.MarkSequencePoint(doc14, 188, 1, 188, 100)
Dim typ59(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 27)
Typ = GetType(AssemblyBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 26)
Typ = GetType(System.String)
ReDim Preserve typ59(UBound(typ59) + 1)
typ59(UBound(typ59)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 26)
Typ = GetType(System.String)
ReDim Preserve typ59(UBound(typ59) + 1)
typ59(UBound(typ59)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("DebugFlg"))
Typ = GetType(AsmFactory).GetField("DebugFlg").FieldType
ReDim Preserve typ59(UBound(typ59) + 1)
typ59(UBound(typ59)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineDynamicModule", typ59))
Typ = Typ03.GetMethod("DefineDynamicModule", typ59).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("MdlB"))
ReadIL.MarkSequencePoint(doc14, 190, 1, 190, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("DebugFlg"))
Typ = GetType(AsmFactory).GetField("DebugFlg").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa476 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru476 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont476 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru476)
ReadIL.Emit(OpCodes.Br, fa476)
ReadIL.MarkLabel(tru476)
ReadIL.MarkSequencePoint(doc14, 191, 1, 191, 100)
Dim locbldr402 As LocalBuilder = ReadIL.DeclareLocal(GetType(ModuleBuilder))
locbldr402.SetLocalSymInfo("mdlbldbg")
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("MdlB"))
Typ = GetType(AsmFactory).GetField("MdlB").FieldType
ReadIL.Emit(OpCodes.Stloc, 28)
ReadIL.MarkSequencePoint(doc14, 192, 1, 192, 100)
Dim typ60(-1) As Type
ReadIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.String)
ReDim Preserve typ60(UBound(typ60) + 1)
typ60(UBound(typ60)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Path).GetMethod("GetFullPath", typ60))
Typ = GetType(Path).GetMethod("GetFullPath", typ60).ReturnType
ReadIL.Emit(OpCodes.Starg, 2)
ReadIL.MarkSequencePoint(doc14, 194, 1, 194, 100)
Dim locbldr403 As LocalBuilder = ReadIL.DeclareLocal(GetType(ISymbolDocumentWriter))
locbldr403.SetLocalSymInfo("docw")
Dim typ61(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(ModuleBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.String)
ReDim Preserve typ61(UBound(typ61) + 1)
typ61(UBound(typ61)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Guid).GetField("Empty"))
Typ = GetType(Guid).GetField("Empty").FieldType
ReDim Preserve typ61(UBound(typ61) + 1)
typ61(UBound(typ61)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Guid).GetField("Empty"))
Typ = GetType(Guid).GetField("Empty").FieldType
ReDim Preserve typ61(UBound(typ61) + 1)
typ61(UBound(typ61)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Guid).GetField("Empty"))
Typ = GetType(Guid).GetField("Empty").FieldType
ReDim Preserve typ61(UBound(typ61) + 1)
typ61(UBound(typ61)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineDocument", typ61))
Typ = Typ03.GetMethod("DefineDocument", typ61).ReturnType
ReadIL.Emit(OpCodes.Stloc, 29)
ReadIL.MarkSequencePoint(doc14, 195, 1, 195, 100)
ReadIL.Emit(OpCodes.Ldloc, 29)
Typ = GetType(ISymbolDocumentWriter)
ReadIL.Emit(OpCodes.Stsfld, GetType(ILEmitter).GetField("DocWriter"))
ReadIL.MarkSequencePoint(doc14, 196, 1, 196, 100)
Dim typ62(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 29)
Typ = GetType(ISymbolDocumentWriter)
ReDim Preserve typ62(UBound(typ62) + 1)
typ62(UBound(typ62)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("AddDocWriter", typ62))
Typ = GetType(ILEmitter).GetMethod("AddDocWriter", typ62).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 197, 1, 197, 100)
ReadIL.Emit(OpCodes.Br, cont476)
ReadIL.MarkLabel(fa476)
ReadIL.Emit(OpCodes.Br, cont476)
ReadIL.MarkLabel(cont476)
ReadIL.MarkSequencePoint(doc14, 200, 1, 200, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("DebugFlg"))
Typ = GetType(AsmFactory).GetField("DebugFlg").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa477 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru477 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont477 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru477)
ReadIL.Emit(OpCodes.Br, fa477)
ReadIL.MarkLabel(tru477)
ReadIL.MarkSequencePoint(doc14, 201, 1, 201, 100)
Dim locbldr404 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr404.SetLocalSymInfo("dtyp")
ReadIL.Emit(OpCodes.Ldtoken, GetType(DebuggableAttribute))
Dim typ63 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ63))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ63).ReturnType
ReadIL.Emit(OpCodes.Stloc, 30)
ReadIL.MarkSequencePoint(doc14, 202, 1, 202, 100)
Dim locbldr405 As LocalBuilder = ReadIL.DeclareLocal(GetType(DebuggableAttribute.DebuggingModes))
locbldr405.SetLocalSymInfo("debugattr")
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(256))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Or)
ReadIL.Emit(OpCodes.Stloc, 31)
ReadIL.MarkSequencePoint(doc14, 203, 1, 203, 100)
Dim locbldr406 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Object))
locbldr406.SetLocalSymInfo("oattr")
ReadIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(DebuggableAttribute.DebuggingModes)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReadIL.Emit(OpCodes.Stloc, 32)
ReadIL.MarkSequencePoint(doc14, 204, 1, 204, 100)
Dim locbldr407 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr407.SetLocalSymInfo("dattyp")
ReadIL.Emit(OpCodes.Ldtoken, GetType(DebuggableAttribute.DebuggingModes))
Dim typ64 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ64))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ64).ReturnType
ReadIL.Emit(OpCodes.Stloc, 33)
ReadIL.MarkSequencePoint(doc14, 205, 1, 205, 100)
Dim locbldr408 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type).MakeArrayType())
locbldr408.SetLocalSymInfo("tarr")
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Type))
ReadIL.Emit(OpCodes.Stloc, 34)
ReadIL.MarkSequencePoint(doc14, 206, 1, 206, 100)
ReadIL.Emit(OpCodes.Ldloc, 34)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldloc, 33)
Typ = GetType(System.Type)
ReadIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc14, 207, 1, 207, 100)
Dim locbldr409 As LocalBuilder = ReadIL.DeclareLocal(GetType(ConstructorInfo))
locbldr409.SetLocalSymInfo("dctor")
Dim typ65(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 30)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 34)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ65(UBound(typ65) + 1)
typ65(UBound(typ65)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetConstructor", typ65))
Typ = Typ03.GetMethod("GetConstructor", typ65).ReturnType
ReadIL.Emit(OpCodes.Stloc, 35)
ReadIL.MarkSequencePoint(doc14, 208, 1, 208, 100)
Dim locbldr410 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Object).MakeArrayType())
locbldr410.SetLocalSymInfo("oarr")
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Object))
ReadIL.Emit(OpCodes.Stloc, 36)
ReadIL.MarkSequencePoint(doc14, 209, 1, 209, 100)
ReadIL.Emit(OpCodes.Ldloc, 36)
Typ = GetType(System.Object).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldloc, 32)
Typ = GetType(System.Object)
ReadIL.Emit(OpCodes.Stelem, GetType(System.Object).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc14, 210, 1, 210, 100)
Dim locbldr411 As LocalBuilder = ReadIL.DeclareLocal(GetType(CustomAttributeBuilder))
locbldr411.SetLocalSymInfo("dbuilder")
Dim typ66(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(ConstructorInfo)
ReDim Preserve typ66(UBound(typ66) + 1)
typ66(UBound(typ66)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 36)
Typ = GetType(System.Object).MakeArrayType()
ReDim Preserve typ66(UBound(typ66) + 1)
typ66(UBound(typ66)) = Typ
ReadIL.Emit(OpCodes.Newobj, GetType(CustomAttributeBuilder).GetConstructor(typ66))
ReadIL.Emit(OpCodes.Stloc, 37)
ReadIL.MarkSequencePoint(doc14, 211, 1, 211, 100)
Dim typ67(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 27)
Typ = GetType(AssemblyBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 37)
Typ = GetType(CustomAttributeBuilder)
ReDim Preserve typ67(UBound(typ67) + 1)
typ67(UBound(typ67)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("SetCustomAttribute", typ67))
Typ = Typ03.GetMethod("SetCustomAttribute", typ67).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 212, 1, 212, 100)
ReadIL.Emit(OpCodes.Br, cont477)
ReadIL.MarkLabel(fa477)
ReadIL.Emit(OpCodes.Br, cont477)
ReadIL.MarkLabel(cont477)
ReadIL.MarkSequencePoint(doc14, 215, 1, 215, 100)
ReadIL.Emit(OpCodes.Ldloc, 26)
Typ = GetType(System.String)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AsmFile"))
ReadIL.MarkSequencePoint(doc14, 216, 1, 216, 100)
Dim typ68(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmB"))
Typ = GetType(AsmFactory).GetField("AsmB").FieldType
ReDim Preserve typ68(UBound(typ68) + 1)
typ68(UBound(typ68)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Importer).GetMethod("AddAsm", typ68))
Typ = GetType(Importer).GetMethod("AddAsm", typ68).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 217, 1, 217, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc14, 218, 1, 218, 100)
ReadIL.Emit(OpCodes.Br, cont475)
ReadIL.MarkLabel(fa475)
ReadIL.Emit(OpCodes.Br, cont475)
ReadIL.MarkLabel(cont475)
ReadIL.MarkSequencePoint(doc14, 220, 1, 220, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(DebugStmt))
Dim typ69 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ69))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ69).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc14, 221, 1, 221, 100)
Dim typ70(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ70(UBound(typ70) + 1)
typ70(UBound(typ70)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ70))
Typ = Typ03.GetMethod("IsInstanceOfType", typ70).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc14, 223, 1, 223, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa478 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru478 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont478 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru478)
ReadIL.Emit(OpCodes.Br, fa478)
ReadIL.MarkLabel(tru478)
ReadIL.MarkSequencePoint(doc14, 224, 1, 224, 100)
Dim locbldr412 As LocalBuilder = ReadIL.DeclareLocal(GetType(DebugStmt))
locbldr412.SetLocalSymInfo("dbgs")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 38)
ReadIL.MarkSequencePoint(doc14, 225, 1, 225, 100)
ReadIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(DebugStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(DebugStmt).GetField("Flg"))
Typ = GetType(DebugStmt).GetField("Flg").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("DebugFlg"))
ReadIL.MarkSequencePoint(doc14, 226, 1, 226, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc14, 227, 1, 227, 100)
ReadIL.Emit(OpCodes.Br, cont478)
ReadIL.MarkLabel(fa478)
ReadIL.Emit(OpCodes.Br, cont478)
ReadIL.MarkLabel(cont478)
ReadIL.MarkSequencePoint(doc14, 229, 1, 229, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(ClassStmt))
Dim typ71 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ71))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ71).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc14, 230, 1, 230, 100)
Dim typ72(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ72(UBound(typ72) + 1)
typ72(UBound(typ72)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ72))
Typ = Typ03.GetMethod("IsInstanceOfType", typ72).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc14, 232, 1, 232, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa479 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru479 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont479 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru479)
ReadIL.Emit(OpCodes.Br, fa479)
ReadIL.MarkLabel(tru479)
ReadIL.MarkSequencePoint(doc14, 233, 1, 233, 100)
Dim locbldr413 As LocalBuilder = ReadIL.DeclareLocal(GetType(ClassStmt))
locbldr413.SetLocalSymInfo("clss")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 39)
ReadIL.MarkSequencePoint(doc14, 235, 1, 235, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("inClass"))
Typ = GetType(AsmFactory).GetField("inClass").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa480 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru480 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont480 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru480)
ReadIL.Emit(OpCodes.Br, fa480)
ReadIL.MarkLabel(tru480)
ReadIL.MarkSequencePoint(doc14, 236, 1, 236, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("isNested"))
ReadIL.MarkSequencePoint(doc14, 237, 1, 237, 100)
ReadIL.Emit(OpCodes.Br, cont480)
ReadIL.MarkLabel(fa480)
ReadIL.Emit(OpCodes.Br, cont480)
ReadIL.MarkLabel(cont480)
ReadIL.MarkSequencePoint(doc14, 239, 1, 239, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa481 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru481 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont481 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru481)
ReadIL.Emit(OpCodes.Br, fa481)
ReadIL.MarkLabel(tru481)
ReadIL.MarkSequencePoint(doc14, 240, 1, 240, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("inClass"))
ReadIL.MarkSequencePoint(doc14, 241, 1, 241, 100)
ReadIL.Emit(OpCodes.Br, cont481)
ReadIL.MarkLabel(fa481)
ReadIL.Emit(OpCodes.Br, cont481)
ReadIL.MarkLabel(cont481)
ReadIL.MarkSequencePoint(doc14, 243, 1, 243, 100)
Dim locbldr414 As LocalBuilder = ReadIL.DeclareLocal(GetType(Attributes.Attribute).MakeArrayType())
locbldr414.SetLocalSymInfo("attrs")
ReadIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(ClassStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(ClassStmt).GetField("Attrs"))
Typ = GetType(ClassStmt).GetField("Attrs").FieldType
ReadIL.Emit(OpCodes.Stloc, 40)
ReadIL.MarkSequencePoint(doc14, 244, 1, 244, 100)
Dim locbldr415 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeAttributes))
locbldr415.SetLocalSymInfo("ta")
Dim typ73(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(Attributes.Attribute).MakeArrayType()
ReDim Preserve typ73(UBound(typ73) + 1)
typ73(UBound(typ73)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessClassAttrs", typ73))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessClassAttrs", typ73).ReturnType
ReadIL.Emit(OpCodes.Stloc, 41)
ReadIL.MarkSequencePoint(doc14, 245, 1, 245, 100)
Dim locbldr416 As LocalBuilder = ReadIL.DeclareLocal(GetType(Ident))
locbldr416.SetLocalSymInfo("clssnam")
ReadIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(ClassStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(ClassStmt).GetField("ClassName"))
Typ = GetType(ClassStmt).GetField("ClassName").FieldType
ReadIL.Emit(OpCodes.Stloc, 42)
ReadIL.MarkSequencePoint(doc14, 246, 1, 246, 100)
Dim locbldr417 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.String))
locbldr417.SetLocalSymInfo("clsnamstr")
ReadIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stloc, 43)
ReadIL.MarkSequencePoint(doc14, 247, 1, 247, 100)
Dim locbldr418 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeTok))
locbldr418.SetLocalSymInfo("inhclstok")
ReadIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(ClassStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(ClassStmt).GetField("InhClass"))
Typ = GetType(ClassStmt).GetField("InhClass").FieldType
ReadIL.Emit(OpCodes.Stloc, 44)
ReadIL.MarkSequencePoint(doc14, 248, 1, 248, 100)
Dim locbldr419 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr419.SetLocalSymInfo("inhtyp")
ReadIL.Emit(OpCodes.Ldnull)
ReadIL.Emit(OpCodes.Stloc, 45)
ReadIL.MarkSequencePoint(doc14, 249, 1, 249, 100)
Dim locbldr420 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr420.SetLocalSymInfo("reft")
ReadIL.Emit(OpCodes.Ldloc, 44)
Typ = GetType(TypeTok)
ReadIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("RefTyp"))
Typ = GetType(TypeTok).GetField("RefTyp").FieldType
ReadIL.Emit(OpCodes.Stloc, 46)
ReadIL.MarkSequencePoint(doc14, 250, 1, 250, 100)
Dim locbldr421 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Int32))
locbldr421.SetLocalSymInfo("cmp")
Dim typ74(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 44)
Typ = GetType(TypeTok)
ReadIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("Value"))
Typ = GetType(TypeTok).GetField("Value").FieldType
ReDim Preserve typ74(UBound(typ74) + 1)
typ74(UBound(typ74)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ReDim Preserve typ74(UBound(typ74) + 1)
typ74(UBound(typ74)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ74))
Typ = GetType(String).GetMethod("Compare", typ74).ReturnType
ReadIL.Emit(OpCodes.Stloc, 47)
ReadIL.MarkSequencePoint(doc14, 252, 1, 252, 100)
ReadIL.Emit(OpCodes.Ldloc, 46)
Typ = GetType(System.Type)
ReadIL.Emit(OpCodes.Ldnull)
Dim fa482 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru482 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont482 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru482)
ReadIL.Emit(OpCodes.Br, fa482)
ReadIL.MarkLabel(tru482)
ReadIL.MarkSequencePoint(doc14, 253, 1, 253, 100)
ReadIL.Emit(OpCodes.Ldloc, 47)
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa483 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru483 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont483 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru483)
ReadIL.Emit(OpCodes.Br, fa483)
ReadIL.MarkLabel(tru483)
ReadIL.MarkSequencePoint(doc14, 254, 1, 254, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(System.Object))
Dim typ75 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ75))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ75).ReturnType
ReadIL.Emit(OpCodes.Stloc, 45)
ReadIL.MarkSequencePoint(doc14, 255, 1, 255, 100)
ReadIL.Emit(OpCodes.Br, cont483)
ReadIL.MarkLabel(fa483)
ReadIL.MarkSequencePoint(doc14, 256, 1, 256, 100)
Dim typ76(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 44)
Typ = GetType(TypeTok)
ReDim Preserve typ76(UBound(typ76) + 1)
typ76(UBound(typ76)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ76))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ76).ReturnType
ReadIL.Emit(OpCodes.Stloc, 45)
ReadIL.MarkSequencePoint(doc14, 257, 1, 257, 100)
ReadIL.Emit(OpCodes.Br, cont483)
ReadIL.MarkLabel(cont483)
ReadIL.MarkSequencePoint(doc14, 258, 1, 258, 100)
ReadIL.Emit(OpCodes.Br, cont482)
ReadIL.MarkLabel(fa482)
ReadIL.MarkSequencePoint(doc14, 259, 1, 259, 100)
ReadIL.Emit(OpCodes.Ldloc, 46)
Typ = GetType(System.Type)
ReadIL.Emit(OpCodes.Stloc, 45)
ReadIL.MarkSequencePoint(doc14, 260, 1, 260, 100)
ReadIL.Emit(OpCodes.Br, cont482)
ReadIL.MarkLabel(cont482)
ReadIL.MarkSequencePoint(doc14, 262, 1, 262, 100)
ReadIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(System.Type)
ReadIL.Emit(OpCodes.Ldnull)
Dim fa484 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru484 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont484 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru484)
ReadIL.Emit(OpCodes.Br, fa484)
ReadIL.MarkLabel(tru484)
ReadIL.MarkSequencePoint(doc14, 263, 1, 263, 100)
Dim typ77(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Base Class '")
Typ = GetType(System.String)
ReDim Preserve typ77(UBound(typ77) + 1)
typ77(UBound(typ77)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 44)
Typ = GetType(TypeTok)
ReadIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("Value"))
Typ = GetType(TypeTok).GetField("Value").FieldType
ReDim Preserve typ77(UBound(typ77) + 1)
typ77(UBound(typ77)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "' is not defined or is not accessible.")
Typ = GetType(System.String)
ReDim Preserve typ77(UBound(typ77) + 1)
typ77(UBound(typ77)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ77))
Typ = GetType(String).GetMethod("Concat", typ77).ReturnType
ReadIL.Emit(OpCodes.Stloc, 3)
ReadIL.MarkSequencePoint(doc14, 264, 1, 264, 100)
Dim typ78(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("LineNr"))
Typ = GetType(ILEmitter).GetField("LineNr").FieldType
ReDim Preserve typ78(UBound(typ78) + 1)
typ78(UBound(typ78)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("CurSrcFile"))
Typ = GetType(ILEmitter).GetField("CurSrcFile").FieldType
ReDim Preserve typ78(UBound(typ78) + 1)
typ78(UBound(typ78)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.String)
ReDim Preserve typ78(UBound(typ78) + 1)
typ78(UBound(typ78)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("WriteError", typ78))
Typ = GetType(StreamUtils).GetMethod("WriteError", typ78).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 265, 1, 265, 100)
ReadIL.Emit(OpCodes.Br, cont484)
ReadIL.MarkLabel(fa484)
ReadIL.Emit(OpCodes.Br, cont484)
ReadIL.MarkLabel(cont484)
ReadIL.MarkSequencePoint(doc14, 267, 1, 267, 100)
ReadIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(System.Type)
ReadIL.Emit(OpCodes.Ldnull)
Dim fa485 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru485 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont485 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, fa485)
ReadIL.Emit(OpCodes.Br, tru485)
ReadIL.MarkLabel(tru485)
ReadIL.MarkSequencePoint(doc14, 268, 1, 268, 100)
ReadIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsSealed", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsSealed", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc14, 269, 1, 269, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa486 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru486 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont486 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru486)
ReadIL.Emit(OpCodes.Br, fa486)
ReadIL.MarkLabel(tru486)
ReadIL.MarkSequencePoint(doc14, 270, 1, 270, 100)
ReadIL.Emit(OpCodes.Ldnull)
ReadIL.Emit(OpCodes.Stloc, 45)
ReadIL.MarkSequencePoint(doc14, 271, 1, 271, 100)
Dim typ80(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Base Class '")
Typ = GetType(System.String)
ReDim Preserve typ80(UBound(typ80) + 1)
typ80(UBound(typ80)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 44)
Typ = GetType(TypeTok)
ReadIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("Value"))
Typ = GetType(TypeTok).GetField("Value").FieldType
ReDim Preserve typ80(UBound(typ80) + 1)
typ80(UBound(typ80)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "' is not inheritable.")
Typ = GetType(System.String)
ReDim Preserve typ80(UBound(typ80) + 1)
typ80(UBound(typ80)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ80))
Typ = GetType(String).GetMethod("Concat", typ80).ReturnType
ReadIL.Emit(OpCodes.Stloc, 3)
ReadIL.MarkSequencePoint(doc14, 272, 1, 272, 100)
Dim typ81(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("LineNr"))
Typ = GetType(ILEmitter).GetField("LineNr").FieldType
ReDim Preserve typ81(UBound(typ81) + 1)
typ81(UBound(typ81)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("CurSrcFile"))
Typ = GetType(ILEmitter).GetField("CurSrcFile").FieldType
ReDim Preserve typ81(UBound(typ81) + 1)
typ81(UBound(typ81)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.String)
ReDim Preserve typ81(UBound(typ81) + 1)
typ81(UBound(typ81)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("WriteError", typ81))
Typ = GetType(StreamUtils).GetMethod("WriteError", typ81).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 273, 1, 273, 100)
ReadIL.Emit(OpCodes.Br, cont486)
ReadIL.MarkLabel(fa486)
ReadIL.Emit(OpCodes.Br, cont486)
ReadIL.MarkLabel(cont486)
ReadIL.MarkSequencePoint(doc14, 274, 1, 274, 100)
ReadIL.Emit(OpCodes.Br, cont485)
ReadIL.MarkLabel(fa485)
ReadIL.Emit(OpCodes.Br, cont485)
ReadIL.MarkLabel(cont485)
ReadIL.MarkSequencePoint(doc14, 276, 1, 276, 100)
ReadIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(System.Type)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnInhTyp"))
ReadIL.MarkSequencePoint(doc14, 279, 1, 279, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa487 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru487 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont487 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru487)
ReadIL.Emit(OpCodes.Br, fa487)
ReadIL.MarkLabel(tru487)
ReadIL.MarkSequencePoint(doc14, 280, 1, 280, 100)
Dim locbldr422 As LocalBuilder = ReadIL.DeclareLocal(GetType(ModuleBuilder))
locbldr422.SetLocalSymInfo("mdlbld")
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("MdlB"))
Typ = GetType(AsmFactory).GetField("MdlB").FieldType
ReadIL.Emit(OpCodes.Stloc, 48)
ReadIL.MarkSequencePoint(doc14, 281, 1, 281, 100)
ReadIL.Emit(OpCodes.Ldloc, 43)
Typ = GetType(System.String)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnTypName"))
ReadIL.MarkSequencePoint(doc14, 282, 1, 282, 100)
Dim typ82(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnNS"))
Typ = GetType(AsmFactory).GetField("CurnNS").FieldType
ReDim Preserve typ82(UBound(typ82) + 1)
typ82(UBound(typ82)) = Typ
ReadIL.Emit(OpCodes.Ldstr, ".")
Typ = GetType(System.String)
ReDim Preserve typ82(UBound(typ82) + 1)
typ82(UBound(typ82)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 43)
Typ = GetType(System.String)
ReDim Preserve typ82(UBound(typ82) + 1)
typ82(UBound(typ82)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ82))
Typ = GetType(String).GetMethod("Concat", typ82).ReturnType
ReadIL.Emit(OpCodes.Stloc, 43)
ReadIL.MarkSequencePoint(doc14, 283, 1, 283, 100)
Dim typ83(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 48)
Typ = GetType(ModuleBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 43)
Typ = GetType(System.String)
ReDim Preserve typ83(UBound(typ83) + 1)
typ83(UBound(typ83)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(TypeAttributes)
ReDim Preserve typ83(UBound(typ83) + 1)
typ83(UBound(typ83)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(System.Type)
ReDim Preserve typ83(UBound(typ83) + 1)
typ83(UBound(typ83)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineType", typ83))
Typ = Typ03.GetMethod("DefineType", typ83).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnTypB"))
ReadIL.MarkSequencePoint(doc14, 285, 1, 285, 100)
Dim typ84(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Adding Class: ")
Typ = GetType(System.String)
ReDim Preserve typ84(UBound(typ84) + 1)
typ84(UBound(typ84)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("Write", typ84))
Typ = GetType(StreamUtils).GetMethod("Write", typ84).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 286, 1, 286, 100)
Dim typ85(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 43)
Typ = GetType(System.String)
ReDim Preserve typ85(UBound(typ85) + 1)
typ85(UBound(typ85)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("WriteLine", typ85))
Typ = GetType(StreamUtils).GetMethod("WriteLine", typ85).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 287, 1, 287, 100)
ReadIL.Emit(OpCodes.Br, cont487)
ReadIL.MarkLabel(fa487)
ReadIL.MarkSequencePoint(doc14, 288, 1, 288, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnTypB2"))
ReadIL.MarkSequencePoint(doc14, 289, 1, 289, 100)
Dim locbldr423 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeBuilder))
locbldr423.SetLocalSymInfo("ctb2")
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB2"))
Typ = GetType(AsmFactory).GetField("CurnTypB2").FieldType
ReadIL.Emit(OpCodes.Stloc, 49)
ReadIL.MarkSequencePoint(doc14, 290, 1, 290, 100)
Dim typ86(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Adding Nested Class: ")
Typ = GetType(System.String)
ReDim Preserve typ86(UBound(typ86) + 1)
typ86(UBound(typ86)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("Write", typ86))
Typ = GetType(StreamUtils).GetMethod("Write", typ86).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 291, 1, 291, 100)
Dim typ87(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 43)
Typ = GetType(System.String)
ReDim Preserve typ87(UBound(typ87) + 1)
typ87(UBound(typ87)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("WriteLine", typ87))
Typ = GetType(StreamUtils).GetMethod("WriteLine", typ87).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 292, 1, 292, 100)
ReadIL.Emit(OpCodes.Ldloc, 43)
Typ = GetType(System.String)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnTypName"))
ReadIL.MarkSequencePoint(doc14, 293, 1, 293, 100)
Dim typ88(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 49)
Typ = GetType(TypeBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 43)
Typ = GetType(System.String)
ReDim Preserve typ88(UBound(typ88) + 1)
typ88(UBound(typ88)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(TypeAttributes)
ReDim Preserve typ88(UBound(typ88) + 1)
typ88(UBound(typ88)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(System.Type)
ReDim Preserve typ88(UBound(typ88) + 1)
typ88(UBound(typ88)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineNestedType", typ88))
Typ = Typ03.GetMethod("DefineNestedType", typ88).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnTypB"))
ReadIL.MarkSequencePoint(doc14, 294, 1, 294, 100)
ReadIL.Emit(OpCodes.Br, cont487)
ReadIL.MarkLabel(cont487)
ReadIL.MarkSequencePoint(doc14, 296, 1, 296, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc14, 297, 1, 297, 100)
ReadIL.Emit(OpCodes.Br, cont479)
ReadIL.MarkLabel(fa479)
ReadIL.Emit(OpCodes.Br, cont479)
ReadIL.MarkLabel(cont479)
ReadIL.MarkSequencePoint(doc14, 299, 1, 299, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(DelegateStmt))
Dim typ89 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ89))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ89).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc14, 300, 1, 300, 100)
Dim typ90(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ90(UBound(typ90) + 1)
typ90(UBound(typ90)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ90))
Typ = Typ03.GetMethod("IsInstanceOfType", typ90).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc14, 302, 1, 302, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa488 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru488 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont488 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru488)
ReadIL.Emit(OpCodes.Br, fa488)
ReadIL.MarkLabel(tru488)
ReadIL.MarkSequencePoint(doc14, 303, 1, 303, 100)
Dim locbldr424 As LocalBuilder = ReadIL.DeclareLocal(GetType(DelegateStmt))
locbldr424.SetLocalSymInfo("dels")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 50)
ReadIL.MarkSequencePoint(doc14, 305, 1, 305, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("inClass"))
Typ = GetType(AsmFactory).GetField("inClass").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa489 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru489 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont489 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru489)
ReadIL.Emit(OpCodes.Br, fa489)
ReadIL.MarkLabel(tru489)
ReadIL.MarkSequencePoint(doc14, 306, 1, 306, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("isNested"))
ReadIL.MarkSequencePoint(doc14, 307, 1, 307, 100)
ReadIL.Emit(OpCodes.Br, cont489)
ReadIL.MarkLabel(fa489)
ReadIL.Emit(OpCodes.Br, cont489)
ReadIL.MarkLabel(cont489)
ReadIL.MarkSequencePoint(doc14, 309, 1, 309, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa490 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru490 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont490 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru490)
ReadIL.Emit(OpCodes.Br, fa490)
ReadIL.MarkLabel(tru490)
ReadIL.MarkSequencePoint(doc14, 310, 1, 310, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("inClass"))
ReadIL.MarkSequencePoint(doc14, 311, 1, 311, 100)
ReadIL.Emit(OpCodes.Br, cont490)
ReadIL.MarkLabel(fa490)
ReadIL.Emit(OpCodes.Br, cont490)
ReadIL.MarkLabel(cont490)
ReadIL.MarkSequencePoint(doc14, 313, 1, 313, 100)
Dim locbldr425 As LocalBuilder = ReadIL.DeclareLocal(GetType(Attributes.Attribute).MakeArrayType())
locbldr425.SetLocalSymInfo("dattrs")
ReadIL.Emit(OpCodes.Ldloc, 50)
Typ = GetType(DelegateStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(DelegateStmt).GetField("Attrs"))
Typ = GetType(DelegateStmt).GetField("Attrs").FieldType
ReadIL.Emit(OpCodes.Stloc, 51)
ReadIL.MarkSequencePoint(doc14, 314, 1, 314, 100)
Dim locbldr426 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeAttributes))
locbldr426.SetLocalSymInfo("dta")
Dim typ91(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 51)
Typ = GetType(Attributes.Attribute).MakeArrayType()
ReDim Preserve typ91(UBound(typ91) + 1)
typ91(UBound(typ91)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessClassAttrs", typ91))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessClassAttrs", typ91).ReturnType
ReadIL.Emit(OpCodes.Stloc, 52)
ReadIL.MarkSequencePoint(doc14, 315, 1, 315, 100)
ReadIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(TypeAttributes)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Or)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(256))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Or)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(131072))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Or)
ReadIL.Emit(OpCodes.Stloc, 52)
ReadIL.MarkSequencePoint(doc14, 316, 1, 316, 100)
Dim locbldr427 As LocalBuilder = ReadIL.DeclareLocal(GetType(Ident))
locbldr427.SetLocalSymInfo("delsnam")
ReadIL.Emit(OpCodes.Ldloc, 50)
Typ = GetType(DelegateStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(DelegateStmt).GetField("DelegateName"))
Typ = GetType(DelegateStmt).GetField("DelegateName").FieldType
ReadIL.Emit(OpCodes.Stloc, 53)
ReadIL.MarkSequencePoint(doc14, 317, 1, 317, 100)
Dim locbldr428 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.String))
locbldr428.SetLocalSymInfo("delsnamstr")
ReadIL.Emit(OpCodes.Ldloc, 53)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stloc, 54)
ReadIL.MarkSequencePoint(doc14, 318, 1, 318, 100)
Dim locbldr429 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr429.SetLocalSymInfo("dinhtyp")
ReadIL.Emit(OpCodes.Ldtoken, GetType(MulticastDelegate))
Dim typ92 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ92))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ92).ReturnType
ReadIL.Emit(OpCodes.Stloc, 55)
ReadIL.MarkSequencePoint(doc14, 319, 1, 319, 100)
ReadIL.Emit(OpCodes.Ldloc, 55)
Typ = GetType(System.Type)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnInhTyp"))
ReadIL.MarkSequencePoint(doc14, 321, 1, 321, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa491 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru491 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont491 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru491)
ReadIL.Emit(OpCodes.Br, fa491)
ReadIL.MarkLabel(tru491)
ReadIL.MarkSequencePoint(doc14, 322, 1, 322, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("MdlB"))
Typ = GetType(AsmFactory).GetField("MdlB").FieldType
ReadIL.Emit(OpCodes.Stloc, 48)
ReadIL.MarkSequencePoint(doc14, 323, 1, 323, 100)
ReadIL.Emit(OpCodes.Ldloc, 54)
Typ = GetType(System.String)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnTypName"))
ReadIL.MarkSequencePoint(doc14, 324, 1, 324, 100)
Dim typ93(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnNS"))
Typ = GetType(AsmFactory).GetField("CurnNS").FieldType
ReDim Preserve typ93(UBound(typ93) + 1)
typ93(UBound(typ93)) = Typ
ReadIL.Emit(OpCodes.Ldstr, ".")
Typ = GetType(System.String)
ReDim Preserve typ93(UBound(typ93) + 1)
typ93(UBound(typ93)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 54)
Typ = GetType(System.String)
ReDim Preserve typ93(UBound(typ93) + 1)
typ93(UBound(typ93)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ93))
Typ = GetType(String).GetMethod("Concat", typ93).ReturnType
ReadIL.Emit(OpCodes.Stloc, 54)
ReadIL.MarkSequencePoint(doc14, 325, 1, 325, 100)
Dim typ94(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 48)
Typ = GetType(ModuleBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 54)
Typ = GetType(System.String)
ReDim Preserve typ94(UBound(typ94) + 1)
typ94(UBound(typ94)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(TypeAttributes)
ReDim Preserve typ94(UBound(typ94) + 1)
typ94(UBound(typ94)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 55)
Typ = GetType(System.Type)
ReDim Preserve typ94(UBound(typ94) + 1)
typ94(UBound(typ94)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineType", typ94))
Typ = Typ03.GetMethod("DefineType", typ94).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnTypB"))
ReadIL.MarkSequencePoint(doc14, 327, 1, 327, 100)
Dim typ95(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Adding Delegate: ")
Typ = GetType(System.String)
ReDim Preserve typ95(UBound(typ95) + 1)
typ95(UBound(typ95)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("Write", typ95))
Typ = GetType(StreamUtils).GetMethod("Write", typ95).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 328, 1, 328, 100)
Dim typ96(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 54)
Typ = GetType(System.String)
ReDim Preserve typ96(UBound(typ96) + 1)
typ96(UBound(typ96)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("WriteLine", typ96))
Typ = GetType(StreamUtils).GetMethod("WriteLine", typ96).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 329, 1, 329, 100)
ReadIL.Emit(OpCodes.Br, cont491)
ReadIL.MarkLabel(fa491)
ReadIL.MarkSequencePoint(doc14, 330, 1, 330, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnTypB2"))
ReadIL.MarkSequencePoint(doc14, 331, 1, 331, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB2"))
Typ = GetType(AsmFactory).GetField("CurnTypB2").FieldType
ReadIL.Emit(OpCodes.Stloc, 49)
ReadIL.MarkSequencePoint(doc14, 332, 1, 332, 100)
Dim typ97(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Adding Nested Delegate: ")
Typ = GetType(System.String)
ReDim Preserve typ97(UBound(typ97) + 1)
typ97(UBound(typ97)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("Write", typ97))
Typ = GetType(StreamUtils).GetMethod("Write", typ97).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 333, 1, 333, 100)
Dim typ98(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 54)
Typ = GetType(System.String)
ReDim Preserve typ98(UBound(typ98) + 1)
typ98(UBound(typ98)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("WriteLine", typ98))
Typ = GetType(StreamUtils).GetMethod("WriteLine", typ98).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 334, 1, 334, 100)
ReadIL.Emit(OpCodes.Ldloc, 54)
Typ = GetType(System.String)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnTypName"))
ReadIL.MarkSequencePoint(doc14, 335, 1, 335, 100)
Dim typ99(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 49)
Typ = GetType(TypeBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 54)
Typ = GetType(System.String)
ReDim Preserve typ99(UBound(typ99) + 1)
typ99(UBound(typ99)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(TypeAttributes)
ReDim Preserve typ99(UBound(typ99) + 1)
typ99(UBound(typ99)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 55)
Typ = GetType(System.Type)
ReDim Preserve typ99(UBound(typ99) + 1)
typ99(UBound(typ99)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineNestedType", typ99))
Typ = Typ03.GetMethod("DefineNestedType", typ99).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnTypB"))
ReadIL.MarkSequencePoint(doc14, 336, 1, 336, 100)
ReadIL.Emit(OpCodes.Br, cont491)
ReadIL.MarkLabel(cont491)
ReadIL.MarkSequencePoint(doc14, 338, 1, 338, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetVar", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetVar", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 339, 1, 339, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetIf", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetIf", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 340, 1, 340, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetLbl", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetLbl", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 342, 1, 342, 100)
Dim locbldr430 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeBuilder))
locbldr430.SetLocalSymInfo("dtypb")
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
ReadIL.Emit(OpCodes.Stloc, 56)
ReadIL.MarkSequencePoint(doc14, 343, 1, 343, 100)
Dim locbldr431 As LocalBuilder = ReadIL.DeclareLocal(GetType(MethodAttributes))
locbldr431.SetLocalSymInfo("dema")
ReadIL.Emit(OpCodes.Ldc_I4, CInt(128))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(6))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Or)
ReadIL.Emit(OpCodes.Stloc, 57)
ReadIL.MarkSequencePoint(doc14, 344, 1, 344, 100)
Dim locbldr432 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.String))
locbldr432.SetLocalSymInfo("dmanamstr")
ReadIL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ReadIL.Emit(OpCodes.Stloc, 58)
ReadIL.MarkSequencePoint(doc14, 345, 1, 345, 100)
Dim locbldr433 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeTok))
locbldr433.SetLocalSymInfo("drettt")
ReadIL.Emit(OpCodes.Ldloc, 50)
Typ = GetType(DelegateStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(DelegateStmt).GetField("RetTyp"))
Typ = GetType(DelegateStmt).GetField("RetTyp").FieldType
ReadIL.Emit(OpCodes.Stloc, 59)
ReadIL.MarkSequencePoint(doc14, 346, 1, 346, 100)
Dim locbldr434 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr434.SetLocalSymInfo("drett")
ReadIL.Emit(OpCodes.Ldtoken, GetType(System.Void))
Dim typ100 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ100))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ100).ReturnType
ReadIL.Emit(OpCodes.Stloc, 60)
ReadIL.MarkSequencePoint(doc14, 348, 1, 348, 100)
Dim locbldr435 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type).MakeArrayType())
locbldr435.SetLocalSymInfo("dtarr")
ReadIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Type))
ReadIL.Emit(OpCodes.Stloc, 61)
ReadIL.MarkSequencePoint(doc14, 349, 1, 349, 100)
ReadIL.Emit(OpCodes.Ldloc, 61)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldtoken, GetType(System.Object))
Dim typ101 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ101))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ101).ReturnType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc14, 350, 1, 350, 100)
ReadIL.Emit(OpCodes.Ldloc, 61)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldtoken, GetType(IntPtr))
Dim typ102 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ102))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ102).ReturnType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc14, 352, 1, 352, 100)
Dim locbldr436 As LocalBuilder = ReadIL.DeclareLocal(GetType(CallingConventions))
locbldr436.SetLocalSymInfo("stdcc")
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Stloc, 62)
ReadIL.MarkSequencePoint(doc14, 353, 1, 353, 100)
Dim typ103(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 56)
Typ = GetType(TypeBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 57)
Typ = GetType(MethodAttributes)
ReDim Preserve typ103(UBound(typ103) + 1)
typ103(UBound(typ103)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 62)
Typ = GetType(CallingConventions)
ReDim Preserve typ103(UBound(typ103) + 1)
typ103(UBound(typ103)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 61)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ103(UBound(typ103) + 1)
typ103(UBound(typ103)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineConstructor", typ103))
Typ = Typ03.GetMethod("DefineConstructor", typ103).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnConB"))
ReadIL.MarkSequencePoint(doc14, 354, 1, 354, 100)
ReadIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("InitDelConstr", Type.EmptyTypes))
Typ = GetType(AsmFactory).GetMethod("InitDelConstr", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 356, 1, 356, 100)
Dim typ104(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 59)
Typ = GetType(TypeTok)
ReDim Preserve typ104(UBound(typ104) + 1)
typ104(UBound(typ104)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ104))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ104).ReturnType
ReadIL.Emit(OpCodes.Stloc, 60)
ReadIL.MarkSequencePoint(doc14, 357, 1, 357, 100)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Type))
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("TypArr"))
ReadIL.MarkSequencePoint(doc14, 358, 1, 358, 100)
Dim locbldr437 As LocalBuilder = ReadIL.DeclareLocal(GetType(Expr).MakeArrayType())
locbldr437.SetLocalSymInfo("dparr")
ReadIL.Emit(OpCodes.Ldloc, 50)
Typ = GetType(DelegateStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(DelegateStmt).GetField("Params"))
Typ = GetType(DelegateStmt).GetField("Params").FieldType
ReadIL.Emit(OpCodes.Stloc, 63)
ReadIL.MarkSequencePoint(doc14, 359, 1, 359, 100)
Dim locbldr438 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Int32))
locbldr438.SetLocalSymInfo("dparrl")
ReadIL.Emit(OpCodes.Ldloc, 63)
Typ = GetType(Expr).MakeArrayType()
ReadIL.Emit(OpCodes.Ldlen)
ReadIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Stloc, 64)
ReadIL.MarkSequencePoint(doc14, 360, 1, 360, 100)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(128))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(6))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Or)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(256))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Or)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(64))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Or)
ReadIL.Emit(OpCodes.Stloc, 57)
ReadIL.MarkSequencePoint(doc14, 361, 1, 361, 100)
ReadIL.Emit(OpCodes.Ldloc, 64)
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa492 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru492 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont492 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru492)
ReadIL.Emit(OpCodes.Br, fa492)
ReadIL.MarkLabel(tru492)
ReadIL.MarkSequencePoint(doc14, 362, 1, 362, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(System.Type).GetField("EmptyTypes"))
Typ = GetType(System.Type).GetField("EmptyTypes").FieldType
ReadIL.Emit(OpCodes.Stloc, 61)
ReadIL.MarkSequencePoint(doc14, 363, 1, 363, 100)
ReadIL.Emit(OpCodes.Br, cont492)
ReadIL.MarkLabel(fa492)
ReadIL.MarkSequencePoint(doc14, 364, 1, 364, 100)
Dim typ105(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 63)
Typ = GetType(Expr).MakeArrayType()
ReDim Preserve typ105(UBound(typ105) + 1)
typ105(UBound(typ105)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessParams", typ105))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessParams", typ105).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 365, 1, 365, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ReadIL.Emit(OpCodes.Stloc, 61)
ReadIL.MarkSequencePoint(doc14, 366, 1, 366, 100)
ReadIL.Emit(OpCodes.Br, cont492)
ReadIL.MarkLabel(cont492)
ReadIL.MarkSequencePoint(doc14, 368, 1, 368, 100)
Dim typ106(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 56)
Typ = GetType(TypeBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldstr, "Invoke")
Typ = GetType(System.String)
ReDim Preserve typ106(UBound(typ106) + 1)
typ106(UBound(typ106)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 57)
Typ = GetType(MethodAttributes)
ReDim Preserve typ106(UBound(typ106) + 1)
typ106(UBound(typ106)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 60)
Typ = GetType(System.Type)
ReDim Preserve typ106(UBound(typ106) + 1)
typ106(UBound(typ106)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ReDim Preserve typ106(UBound(typ106) + 1)
typ106(UBound(typ106)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineMethod", typ106))
Typ = Typ03.GetMethod("DefineMethod", typ106).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnMetB"))
ReadIL.MarkSequencePoint(doc14, 369, 1, 369, 100)
ReadIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("InitDelMet", Type.EmptyTypes))
Typ = GetType(AsmFactory).GetMethod("InitDelMet", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 370, 1, 370, 100)
Dim typ107(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 63)
Typ = GetType(Expr).MakeArrayType()
ReDim Preserve typ107(UBound(typ107) + 1)
typ107(UBound(typ107)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("PostProcessParams", typ107))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("PostProcessParams", typ107).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 372, 1, 372, 100)
ReadIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("CreateTyp", Type.EmptyTypes))
Typ = GetType(AsmFactory).GetMethod("CreateTyp", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 373, 1, 373, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa493 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru493 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont493 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru493)
ReadIL.Emit(OpCodes.Br, fa493)
ReadIL.MarkLabel(tru493)
ReadIL.MarkSequencePoint(doc14, 374, 1, 374, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("inClass"))
ReadIL.MarkSequencePoint(doc14, 375, 1, 375, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetMet", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetMet", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 376, 1, 376, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetCtor", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetCtor", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 377, 1, 377, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetFld", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetFld", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 378, 1, 378, 100)
ReadIL.Emit(OpCodes.Br, cont493)
ReadIL.MarkLabel(fa493)
ReadIL.Emit(OpCodes.Br, cont493)
ReadIL.MarkLabel(cont493)
ReadIL.MarkSequencePoint(doc14, 379, 1, 379, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa494 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru494 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont494 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru494)
ReadIL.Emit(OpCodes.Br, fa494)
ReadIL.MarkLabel(tru494)
ReadIL.MarkSequencePoint(doc14, 380, 1, 380, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB2"))
Typ = GetType(AsmFactory).GetField("CurnTypB2").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnTypB"))
ReadIL.MarkSequencePoint(doc14, 381, 1, 381, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("isNested"))
ReadIL.MarkSequencePoint(doc14, 382, 1, 382, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetNestedMet", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetNestedMet", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 383, 1, 383, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetNestedCtor", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetNestedCtor", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 384, 1, 384, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetNestedFld", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetNestedFld", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 385, 1, 385, 100)
ReadIL.Emit(OpCodes.Br, cont494)
ReadIL.MarkLabel(fa494)
ReadIL.Emit(OpCodes.Br, cont494)
ReadIL.MarkLabel(cont494)
ReadIL.MarkSequencePoint(doc14, 388, 1, 388, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc14, 389, 1, 389, 100)
ReadIL.Emit(OpCodes.Br, cont488)
ReadIL.MarkLabel(fa488)
ReadIL.Emit(OpCodes.Br, cont488)
ReadIL.MarkLabel(cont488)
ReadIL.MarkSequencePoint(doc14, 392, 1, 392, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(FieldStmt))
Dim typ108 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ108))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ108).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc14, 393, 1, 393, 100)
Dim typ109(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ109(UBound(typ109) + 1)
typ109(UBound(typ109)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ109))
Typ = Typ03.GetMethod("IsInstanceOfType", typ109).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc14, 395, 1, 395, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa495 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru495 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont495 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru495)
ReadIL.Emit(OpCodes.Br, fa495)
ReadIL.MarkLabel(tru495)
ReadIL.MarkSequencePoint(doc14, 396, 1, 396, 100)
Dim locbldr439 As LocalBuilder = ReadIL.DeclareLocal(GetType(FieldStmt))
locbldr439.SetLocalSymInfo("flss")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 65)
ReadIL.MarkSequencePoint(doc14, 398, 1, 398, 100)
Dim locbldr440 As LocalBuilder = ReadIL.DeclareLocal(GetType(Attributes.Attribute).MakeArrayType())
locbldr440.SetLocalSymInfo("fattrs")
ReadIL.Emit(OpCodes.Ldloc, 65)
Typ = GetType(FieldStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(FieldStmt).GetField("Attrs"))
Typ = GetType(FieldStmt).GetField("Attrs").FieldType
ReadIL.Emit(OpCodes.Stloc, 66)
ReadIL.MarkSequencePoint(doc14, 399, 1, 399, 100)
Dim locbldr441 As LocalBuilder = ReadIL.DeclareLocal(GetType(FieldAttributes))
locbldr441.SetLocalSymInfo("fa")
Dim typ110(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 66)
Typ = GetType(Attributes.Attribute).MakeArrayType()
ReDim Preserve typ110(UBound(typ110) + 1)
typ110(UBound(typ110)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessFieldAttrs", typ110))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessFieldAttrs", typ110).ReturnType
ReadIL.Emit(OpCodes.Stloc, 67)
ReadIL.MarkSequencePoint(doc14, 400, 1, 400, 100)
Dim locbldr442 As LocalBuilder = ReadIL.DeclareLocal(GetType(Ident))
locbldr442.SetLocalSymInfo("flssnam")
ReadIL.Emit(OpCodes.Ldloc, 65)
Typ = GetType(FieldStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(FieldStmt).GetField("FieldName"))
Typ = GetType(FieldStmt).GetField("FieldName").FieldType
ReadIL.Emit(OpCodes.Stloc, 68)
ReadIL.MarkSequencePoint(doc14, 401, 1, 401, 100)
Dim locbldr443 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.String))
locbldr443.SetLocalSymInfo("flsnamstr")
ReadIL.Emit(OpCodes.Ldloc, 68)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stloc, 69)
ReadIL.MarkSequencePoint(doc14, 402, 1, 402, 100)
Dim locbldr444 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeTok))
locbldr444.SetLocalSymInfo("ftyptok")
ReadIL.Emit(OpCodes.Ldloc, 65)
Typ = GetType(FieldStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(FieldStmt).GetField("FieldTyp"))
Typ = GetType(FieldStmt).GetField("FieldTyp").FieldType
ReadIL.Emit(OpCodes.Stloc, 70)
ReadIL.MarkSequencePoint(doc14, 403, 1, 403, 100)
Dim locbldr445 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr445.SetLocalSymInfo("ftyp")
ReadIL.Emit(OpCodes.Ldnull)
ReadIL.Emit(OpCodes.Stloc, 71)
ReadIL.MarkSequencePoint(doc14, 416, 1, 416, 100)
Dim typ111(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 70)
Typ = GetType(TypeTok)
ReDim Preserve typ111(UBound(typ111) + 1)
typ111(UBound(typ111)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ111))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ111).ReturnType
ReadIL.Emit(OpCodes.Stloc, 71)
ReadIL.MarkSequencePoint(doc14, 418, 1, 418, 100)
ReadIL.Emit(OpCodes.Ldloc, 71)
Typ = GetType(System.Type)
ReadIL.Emit(OpCodes.Ldnull)
Dim fa496 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru496 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont496 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru496)
ReadIL.Emit(OpCodes.Br, fa496)
ReadIL.MarkLabel(tru496)
ReadIL.MarkSequencePoint(doc14, 419, 1, 419, 100)
Dim typ112(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Class '")
Typ = GetType(System.String)
ReDim Preserve typ112(UBound(typ112) + 1)
typ112(UBound(typ112)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 70)
Typ = GetType(TypeTok)
ReadIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("Value"))
Typ = GetType(TypeTok).GetField("Value").FieldType
ReDim Preserve typ112(UBound(typ112) + 1)
typ112(UBound(typ112)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "' is not defined.")
Typ = GetType(System.String)
ReDim Preserve typ112(UBound(typ112) + 1)
typ112(UBound(typ112)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ112))
Typ = GetType(String).GetMethod("Concat", typ112).ReturnType
ReadIL.Emit(OpCodes.Stloc, 3)
ReadIL.MarkSequencePoint(doc14, 420, 1, 420, 100)
Dim typ113(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("LineNr"))
Typ = GetType(ILEmitter).GetField("LineNr").FieldType
ReDim Preserve typ113(UBound(typ113) + 1)
typ113(UBound(typ113)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("CurSrcFile"))
Typ = GetType(ILEmitter).GetField("CurSrcFile").FieldType
ReDim Preserve typ113(UBound(typ113) + 1)
typ113(UBound(typ113)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.String)
ReDim Preserve typ113(UBound(typ113) + 1)
typ113(UBound(typ113)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("WriteError", typ113))
Typ = GetType(StreamUtils).GetMethod("WriteError", typ113).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 421, 1, 421, 100)
ReadIL.Emit(OpCodes.Br, cont496)
ReadIL.MarkLabel(fa496)
ReadIL.Emit(OpCodes.Br, cont496)
ReadIL.MarkLabel(cont496)
ReadIL.MarkSequencePoint(doc14, 424, 1, 424, 100)
Dim locbldr446 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeBuilder))
locbldr446.SetLocalSymInfo("typb2")
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
ReadIL.Emit(OpCodes.Stloc, 72)
ReadIL.MarkSequencePoint(doc14, 425, 1, 425, 100)
Dim typ114(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 72)
Typ = GetType(TypeBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 69)
Typ = GetType(System.String)
ReDim Preserve typ114(UBound(typ114) + 1)
typ114(UBound(typ114)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 71)
Typ = GetType(System.Type)
ReDim Preserve typ114(UBound(typ114) + 1)
typ114(UBound(typ114)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 67)
Typ = GetType(FieldAttributes)
ReDim Preserve typ114(UBound(typ114) + 1)
typ114(UBound(typ114)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineField", typ114))
Typ = Typ03.GetMethod("DefineField", typ114).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnFldB"))
ReadIL.MarkSequencePoint(doc14, 427, 1, 427, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa497 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru497 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont497 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru497)
ReadIL.Emit(OpCodes.Br, fa497)
ReadIL.MarkLabel(tru497)
ReadIL.MarkSequencePoint(doc14, 428, 1, 428, 100)
Dim typ115(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 69)
Typ = GetType(System.String)
ReDim Preserve typ115(UBound(typ115) + 1)
typ115(UBound(typ115)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 71)
Typ = GetType(System.Type)
ReDim Preserve typ115(UBound(typ115) + 1)
typ115(UBound(typ115)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnFldB"))
Typ = GetType(AsmFactory).GetField("CurnFldB").FieldType
ReDim Preserve typ115(UBound(typ115) + 1)
typ115(UBound(typ115)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddFld", typ115))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddFld", typ115).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 429, 1, 429, 100)
ReadIL.Emit(OpCodes.Br, cont497)
ReadIL.MarkLabel(fa497)
ReadIL.MarkSequencePoint(doc14, 430, 1, 430, 100)
Dim typ116(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 69)
Typ = GetType(System.String)
ReDim Preserve typ116(UBound(typ116) + 1)
typ116(UBound(typ116)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 71)
Typ = GetType(System.Type)
ReDim Preserve typ116(UBound(typ116) + 1)
typ116(UBound(typ116)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnFldB"))
Typ = GetType(AsmFactory).GetField("CurnFldB").FieldType
ReDim Preserve typ116(UBound(typ116) + 1)
typ116(UBound(typ116)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddNestedFld", typ116))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddNestedFld", typ116).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 431, 1, 431, 100)
ReadIL.Emit(OpCodes.Br, cont497)
ReadIL.MarkLabel(cont497)
ReadIL.MarkSequencePoint(doc14, 433, 1, 433, 100)
Dim typ117(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "	Adding Field: ")
Typ = GetType(System.String)
ReDim Preserve typ117(UBound(typ117) + 1)
typ117(UBound(typ117)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("Write", typ117))
Typ = GetType(StreamUtils).GetMethod("Write", typ117).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 434, 1, 434, 100)
Dim typ118(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 69)
Typ = GetType(System.String)
ReDim Preserve typ118(UBound(typ118) + 1)
typ118(UBound(typ118)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("WriteLine", typ118))
Typ = GetType(StreamUtils).GetMethod("WriteLine", typ118).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 436, 1, 436, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc14, 437, 1, 437, 100)
ReadIL.Emit(OpCodes.Br, cont495)
ReadIL.MarkLabel(fa495)
ReadIL.Emit(OpCodes.Br, cont495)
ReadIL.MarkLabel(cont495)
ReadIL.MarkSequencePoint(doc14, 440, 1, 440, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(EndClassStmt))
Dim typ119 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ119))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ119).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc14, 441, 1, 441, 100)
Dim typ120(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ120(UBound(typ120) + 1)
typ120(UBound(typ120)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ120))
Typ = Typ03.GetMethod("IsInstanceOfType", typ120).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc14, 443, 1, 443, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa498 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru498 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont498 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru498)
ReadIL.Emit(OpCodes.Br, fa498)
ReadIL.MarkLabel(tru498)
ReadIL.MarkSequencePoint(doc14, 444, 1, 444, 100)
ReadIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("CreateTyp", Type.EmptyTypes))
Typ = GetType(AsmFactory).GetMethod("CreateTyp", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 445, 1, 445, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa499 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru499 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont499 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru499)
ReadIL.Emit(OpCodes.Br, fa499)
ReadIL.MarkLabel(tru499)
ReadIL.MarkSequencePoint(doc14, 446, 1, 446, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("inClass"))
ReadIL.MarkSequencePoint(doc14, 447, 1, 447, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetMet", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetMet", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 448, 1, 448, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetCtor", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetCtor", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 449, 1, 449, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetFld", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetFld", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 450, 1, 450, 100)
ReadIL.Emit(OpCodes.Br, cont499)
ReadIL.MarkLabel(fa499)
ReadIL.Emit(OpCodes.Br, cont499)
ReadIL.MarkLabel(cont499)
ReadIL.MarkSequencePoint(doc14, 451, 1, 451, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa500 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru500 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont500 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru500)
ReadIL.Emit(OpCodes.Br, fa500)
ReadIL.MarkLabel(tru500)
ReadIL.MarkSequencePoint(doc14, 452, 1, 452, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB2"))
Typ = GetType(AsmFactory).GetField("CurnTypB2").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnTypB"))
ReadIL.MarkSequencePoint(doc14, 453, 1, 453, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("isNested"))
ReadIL.MarkSequencePoint(doc14, 454, 1, 454, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetNestedMet", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetNestedMet", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 455, 1, 455, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetNestedCtor", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetNestedCtor", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 456, 1, 456, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetNestedFld", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetNestedFld", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 457, 1, 457, 100)
ReadIL.Emit(OpCodes.Br, cont500)
ReadIL.MarkLabel(fa500)
ReadIL.Emit(OpCodes.Br, cont500)
ReadIL.MarkLabel(cont500)
ReadIL.MarkSequencePoint(doc14, 458, 1, 458, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc14, 459, 1, 459, 100)
ReadIL.Emit(OpCodes.Br, cont498)
ReadIL.MarkLabel(fa498)
ReadIL.Emit(OpCodes.Br, cont498)
ReadIL.MarkLabel(cont498)
ReadIL.MarkSequencePoint(doc14, 461, 1, 461, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(MethodStmt))
Dim typ121 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ121))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ121).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc14, 462, 1, 462, 100)
Dim typ122(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ122(UBound(typ122) + 1)
typ122(UBound(typ122)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ122))
Typ = Typ03.GetMethod("IsInstanceOfType", typ122).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc14, 464, 1, 464, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa501 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru501 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont501 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru501)
ReadIL.Emit(OpCodes.Br, fa501)
ReadIL.MarkLabel(tru501)
ReadIL.MarkSequencePoint(doc14, 465, 1, 465, 100)
Dim locbldr447 As LocalBuilder = ReadIL.DeclareLocal(GetType(MethodStmt))
locbldr447.SetLocalSymInfo("mtss")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 73)
ReadIL.MarkSequencePoint(doc14, 467, 1, 467, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(ILEmitter).GetField("StaticFlg"))
ReadIL.MarkSequencePoint(doc14, 469, 1, 469, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetVar", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetVar", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 470, 1, 470, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetIf", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetIf", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 471, 1, 471, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetLbl", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetLbl", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 473, 1, 473, 100)
Dim locbldr448 As LocalBuilder = ReadIL.DeclareLocal(GetType(Attributes.Attribute).MakeArrayType())
locbldr448.SetLocalSymInfo("mattrs")
ReadIL.Emit(OpCodes.Ldloc, 73)
Typ = GetType(MethodStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(MethodStmt).GetField("Attrs"))
Typ = GetType(MethodStmt).GetField("Attrs").FieldType
ReadIL.Emit(OpCodes.Stloc, 74)
ReadIL.MarkSequencePoint(doc14, 474, 1, 474, 100)
Dim locbldr449 As LocalBuilder = ReadIL.DeclareLocal(GetType(MethodAttributes))
locbldr449.SetLocalSymInfo("ma")
Dim typ123(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 74)
Typ = GetType(Attributes.Attribute).MakeArrayType()
ReDim Preserve typ123(UBound(typ123) + 1)
typ123(UBound(typ123)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessMethodAttrs", typ123))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessMethodAttrs", typ123).ReturnType
ReadIL.Emit(OpCodes.Stloc, 75)
ReadIL.MarkSequencePoint(doc14, 475, 1, 475, 100)
Dim locbldr450 As LocalBuilder = ReadIL.DeclareLocal(GetType(Ident))
locbldr450.SetLocalSymInfo("mtssnam")
ReadIL.Emit(OpCodes.Ldloc, 73)
Typ = GetType(MethodStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(MethodStmt).GetField("MethodName"))
Typ = GetType(MethodStmt).GetField("MethodName").FieldType
ReadIL.Emit(OpCodes.Stloc, 76)
ReadIL.MarkSequencePoint(doc14, 476, 1, 476, 100)
Dim locbldr451 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.String))
locbldr451.SetLocalSymInfo("mtssnamstr")
ReadIL.Emit(OpCodes.Ldloc, 76)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stloc, 77)
ReadIL.MarkSequencePoint(doc14, 477, 1, 477, 100)
Dim locbldr452 As LocalBuilder = ReadIL.DeclareLocal(GetType(Expr).MakeArrayType())
locbldr452.SetLocalSymInfo("paramarr")
ReadIL.Emit(OpCodes.Ldloc, 73)
Typ = GetType(MethodStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(MethodStmt).GetField("Params"))
Typ = GetType(MethodStmt).GetField("Params").FieldType
ReadIL.Emit(OpCodes.Stloc, 78)
ReadIL.MarkSequencePoint(doc14, 478, 1, 478, 100)
Dim locbldr453 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Int32))
locbldr453.SetLocalSymInfo("paramlen")
ReadIL.Emit(OpCodes.Ldloc, 78)
Typ = GetType(Expr).MakeArrayType()
ReadIL.Emit(OpCodes.Ldlen)
ReadIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Stloc, 79)
ReadIL.MarkSequencePoint(doc14, 479, 1, 479, 100)
Dim locbldr454 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeTok))
locbldr454.SetLocalSymInfo("rettyptok")
ReadIL.Emit(OpCodes.Ldloc, 73)
Typ = GetType(MethodStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(MethodStmt).GetField("RetTyp"))
Typ = GetType(MethodStmt).GetField("RetTyp").FieldType
ReadIL.Emit(OpCodes.Stloc, 80)
ReadIL.MarkSequencePoint(doc14, 480, 1, 480, 100)
Dim locbldr455 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr455.SetLocalSymInfo("rettyp")
ReadIL.Emit(OpCodes.Ldnull)
ReadIL.Emit(OpCodes.Stloc, 81)
ReadIL.MarkSequencePoint(doc14, 497, 1, 497, 100)
Dim typ124(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 80)
Typ = GetType(TypeTok)
ReDim Preserve typ124(UBound(typ124) + 1)
typ124(UBound(typ124)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ124))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ124).ReturnType
ReadIL.Emit(OpCodes.Stloc, 81)
ReadIL.MarkSequencePoint(doc14, 499, 1, 499, 100)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Type))
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("TypArr"))
ReadIL.MarkSequencePoint(doc14, 501, 1, 501, 100)
ReadIL.Emit(OpCodes.Ldloc, 79)
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa502 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru502 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont502 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru502)
ReadIL.Emit(OpCodes.Br, fa502)
ReadIL.MarkLabel(tru502)
ReadIL.MarkSequencePoint(doc14, 502, 1, 502, 100)
ReadIL.Emit(OpCodes.Br, cont502)
ReadIL.MarkLabel(fa502)
ReadIL.MarkSequencePoint(doc14, 503, 1, 503, 100)
Dim typ125(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 78)
Typ = GetType(Expr).MakeArrayType()
ReDim Preserve typ125(UBound(typ125) + 1)
typ125(UBound(typ125)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessParams", typ125))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessParams", typ125).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 504, 1, 504, 100)
ReadIL.Emit(OpCodes.Br, cont502)
ReadIL.MarkLabel(cont502)
ReadIL.MarkSequencePoint(doc14, 507, 1, 507, 100)
Dim locbldr456 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeBuilder))
locbldr456.SetLocalSymInfo("typb")
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
ReadIL.Emit(OpCodes.Stloc, 82)
ReadIL.MarkSequencePoint(doc14, 508, 1, 508, 100)
Dim locbldr457 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Boolean))
locbldr457.SetLocalSymInfo("isconstr")
Dim typ126(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 77)
Typ = GetType(System.String)
ReDim Preserve typ126(UBound(typ126) + 1)
typ126(UBound(typ126)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "^ctor\d*$")
Typ = GetType(System.String)
ReDim Preserve typ126(UBound(typ126) + 1)
typ126(UBound(typ126)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ParseUtils).GetMethod("LikeOP", typ126))
Typ = GetType(ParseUtils).GetMethod("LikeOP", typ126).ReturnType
ReadIL.Emit(OpCodes.Stloc, 83)
ReadIL.MarkSequencePoint(doc14, 509, 1, 509, 100)
ReadIL.Emit(OpCodes.Ldloc, 83)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc14, 510, 1, 510, 100)
Dim typ127(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 77)
Typ = GetType(System.String)
ReDim Preserve typ127(UBound(typ127) + 1)
typ127(UBound(typ127)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypName"))
Typ = GetType(AsmFactory).GetField("CurnTypName").FieldType
ReDim Preserve typ127(UBound(typ127) + 1)
typ127(UBound(typ127)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ127))
Typ = GetType(String).GetMethod("Compare", typ127).ReturnType
ReadIL.Emit(OpCodes.Stloc, 47)
ReadIL.MarkSequencePoint(doc14, 511, 1, 511, 100)
ReadIL.Emit(OpCodes.Ldloc, 47)
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa503 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru503 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont503 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru503)
ReadIL.Emit(OpCodes.Br, fa503)
ReadIL.MarkLabel(tru503)
ReadIL.MarkSequencePoint(doc14, 512, 1, 512, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stloc, 83)
ReadIL.MarkSequencePoint(doc14, 513, 1, 513, 100)
ReadIL.Emit(OpCodes.Br, cont503)
ReadIL.MarkLabel(fa503)
ReadIL.Emit(OpCodes.Br, cont503)
ReadIL.MarkLabel(cont503)
ReadIL.MarkSequencePoint(doc14, 514, 1, 514, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldloc, 83)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Or)
ReadIL.Emit(OpCodes.Stloc, 83)
ReadIL.MarkSequencePoint(doc14, 515, 1, 515, 100)
ReadIL.Emit(OpCodes.Ldloc, 83)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa504 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru504 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont504 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru504)
ReadIL.Emit(OpCodes.Br, fa504)
ReadIL.MarkLabel(tru504)
ReadIL.MarkSequencePoint(doc14, 516, 1, 516, 100)
Dim typ128(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 82)
Typ = GetType(TypeBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 77)
Typ = GetType(System.String)
ReDim Preserve typ128(UBound(typ128) + 1)
typ128(UBound(typ128)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 75)
Typ = GetType(MethodAttributes)
ReDim Preserve typ128(UBound(typ128) + 1)
typ128(UBound(typ128)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 81)
Typ = GetType(System.Type)
ReDim Preserve typ128(UBound(typ128) + 1)
typ128(UBound(typ128)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ReDim Preserve typ128(UBound(typ128) + 1)
typ128(UBound(typ128)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineMethod", typ128))
Typ = Typ03.GetMethod("DefineMethod", typ128).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnMetB"))
ReadIL.MarkSequencePoint(doc14, 517, 1, 517, 100)
ReadIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("InitMtd", Type.EmptyTypes))
Typ = GetType(AsmFactory).GetMethod("InitMtd", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 518, 1, 518, 100)
Dim typ129(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "	Adding Method: ")
Typ = GetType(System.String)
ReDim Preserve typ129(UBound(typ129) + 1)
typ129(UBound(typ129)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("Write", typ129))
Typ = GetType(StreamUtils).GetMethod("Write", typ129).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 519, 1, 519, 100)
Dim typ130(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 77)
Typ = GetType(System.String)
ReDim Preserve typ130(UBound(typ130) + 1)
typ130(UBound(typ130)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("WriteLine", typ130))
Typ = GetType(StreamUtils).GetMethod("WriteLine", typ130).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 521, 1, 521, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa505 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru505 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont505 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru505)
ReadIL.Emit(OpCodes.Br, fa505)
ReadIL.MarkLabel(tru505)
ReadIL.MarkSequencePoint(doc14, 522, 1, 522, 100)
Dim typ131(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 77)
Typ = GetType(System.String)
ReDim Preserve typ131(UBound(typ131) + 1)
typ131(UBound(typ131)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 81)
Typ = GetType(System.Type)
ReDim Preserve typ131(UBound(typ131) + 1)
typ131(UBound(typ131)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ReDim Preserve typ131(UBound(typ131) + 1)
typ131(UBound(typ131)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnMetB"))
Typ = GetType(AsmFactory).GetField("CurnMetB").FieldType
ReDim Preserve typ131(UBound(typ131) + 1)
typ131(UBound(typ131)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddMet", typ131))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddMet", typ131).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 523, 1, 523, 100)
ReadIL.Emit(OpCodes.Br, cont505)
ReadIL.MarkLabel(fa505)
ReadIL.MarkSequencePoint(doc14, 524, 1, 524, 100)
Dim typ132(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 77)
Typ = GetType(System.String)
ReDim Preserve typ132(UBound(typ132) + 1)
typ132(UBound(typ132)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 81)
Typ = GetType(System.Type)
ReDim Preserve typ132(UBound(typ132) + 1)
typ132(UBound(typ132)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ReDim Preserve typ132(UBound(typ132) + 1)
typ132(UBound(typ132)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnMetB"))
Typ = GetType(AsmFactory).GetField("CurnMetB").FieldType
ReDim Preserve typ132(UBound(typ132) + 1)
typ132(UBound(typ132)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddNestedMet", typ132))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddNestedMet", typ132).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 525, 1, 525, 100)
ReadIL.Emit(OpCodes.Br, cont505)
ReadIL.MarkLabel(cont505)
ReadIL.MarkSequencePoint(doc14, 527, 1, 527, 100)
ReadIL.Emit(OpCodes.Br, cont504)
ReadIL.MarkLabel(fa504)
ReadIL.MarkSequencePoint(doc14, 528, 1, 528, 100)
Dim locbldr458 As LocalBuilder = ReadIL.DeclareLocal(GetType(CallingConventions))
locbldr458.SetLocalSymInfo("stdcallconv")
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Stloc, 84)
ReadIL.MarkSequencePoint(doc14, 529, 1, 529, 100)
Dim typ133(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 82)
Typ = GetType(TypeBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 75)
Typ = GetType(MethodAttributes)
ReDim Preserve typ133(UBound(typ133) + 1)
typ133(UBound(typ133)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 84)
Typ = GetType(CallingConventions)
ReDim Preserve typ133(UBound(typ133) + 1)
typ133(UBound(typ133)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ReDim Preserve typ133(UBound(typ133) + 1)
typ133(UBound(typ133)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineConstructor", typ133))
Typ = Typ03.GetMethod("DefineConstructor", typ133).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnConB"))
ReadIL.MarkSequencePoint(doc14, 530, 1, 530, 100)
ReadIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("InitConstr", Type.EmptyTypes))
Typ = GetType(AsmFactory).GetMethod("InitConstr", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 532, 1, 532, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa506 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru506 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont506 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru506)
ReadIL.Emit(OpCodes.Br, fa506)
ReadIL.MarkLabel(tru506)
ReadIL.MarkSequencePoint(doc14, 533, 1, 533, 100)
Dim typ134(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ReDim Preserve typ134(UBound(typ134) + 1)
typ134(UBound(typ134)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnConB"))
Typ = GetType(AsmFactory).GetField("CurnConB").FieldType
ReDim Preserve typ134(UBound(typ134) + 1)
typ134(UBound(typ134)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddCtor", typ134))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddCtor", typ134).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 534, 1, 534, 100)
ReadIL.Emit(OpCodes.Br, cont506)
ReadIL.MarkLabel(fa506)
ReadIL.MarkSequencePoint(doc14, 535, 1, 535, 100)
Dim typ135(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ReDim Preserve typ135(UBound(typ135) + 1)
typ135(UBound(typ135)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnConB"))
Typ = GetType(AsmFactory).GetField("CurnConB").FieldType
ReDim Preserve typ135(UBound(typ135) + 1)
typ135(UBound(typ135)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddNestedCtor", typ135))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddNestedCtor", typ135).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 536, 1, 536, 100)
ReadIL.Emit(OpCodes.Br, cont506)
ReadIL.MarkLabel(cont506)
ReadIL.MarkSequencePoint(doc14, 539, 1, 539, 100)
Dim typ136(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "	Adding Constructor: ")
Typ = GetType(System.String)
ReDim Preserve typ136(UBound(typ136) + 1)
typ136(UBound(typ136)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("Write", typ136))
Typ = GetType(StreamUtils).GetMethod("Write", typ136).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 540, 1, 540, 100)
Dim typ137(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 77)
Typ = GetType(System.String)
ReDim Preserve typ137(UBound(typ137) + 1)
typ137(UBound(typ137)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("WriteLine", typ137))
Typ = GetType(StreamUtils).GetMethod("WriteLine", typ137).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 541, 1, 541, 100)
ReadIL.Emit(OpCodes.Br, cont504)
ReadIL.MarkLabel(cont504)
ReadIL.MarkSequencePoint(doc14, 544, 1, 544, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("InMethodFlg"))
ReadIL.MarkSequencePoint(doc14, 545, 1, 545, 100)
ReadIL.Emit(OpCodes.Ldloc, 77)
Typ = GetType(System.String)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnMetName"))
ReadIL.MarkSequencePoint(doc14, 547, 1, 547, 100)
ReadIL.Emit(OpCodes.Ldloc, 79)
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa507 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru507 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont507 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru507)
ReadIL.Emit(OpCodes.Br, fa507)
ReadIL.MarkLabel(tru507)
ReadIL.MarkSequencePoint(doc14, 548, 1, 548, 100)
ReadIL.Emit(OpCodes.Br, cont507)
ReadIL.MarkLabel(fa507)
ReadIL.MarkSequencePoint(doc14, 549, 1, 549, 100)
ReadIL.Emit(OpCodes.Ldloc, 83)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa508 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru508 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont508 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru508)
ReadIL.Emit(OpCodes.Br, fa508)
ReadIL.MarkLabel(tru508)
ReadIL.MarkSequencePoint(doc14, 550, 1, 550, 100)
Dim typ138(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 78)
Typ = GetType(Expr).MakeArrayType()
ReDim Preserve typ138(UBound(typ138) + 1)
typ138(UBound(typ138)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("PostProcessParams", typ138))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("PostProcessParams", typ138).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 551, 1, 551, 100)
ReadIL.Emit(OpCodes.Br, cont508)
ReadIL.MarkLabel(fa508)
ReadIL.MarkSequencePoint(doc14, 552, 1, 552, 100)
Dim typ139(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 78)
Typ = GetType(Expr).MakeArrayType()
ReDim Preserve typ139(UBound(typ139) + 1)
typ139(UBound(typ139)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("PostProcessParamsConstr", typ139))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("PostProcessParamsConstr", typ139).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 553, 1, 553, 100)
ReadIL.Emit(OpCodes.Br, cont508)
ReadIL.MarkLabel(cont508)
ReadIL.MarkSequencePoint(doc14, 554, 1, 554, 100)
ReadIL.Emit(OpCodes.Br, cont507)
ReadIL.MarkLabel(cont507)
ReadIL.MarkSequencePoint(doc14, 556, 1, 556, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc14, 557, 1, 557, 100)
ReadIL.Emit(OpCodes.Br, cont501)
ReadIL.MarkLabel(fa501)
ReadIL.Emit(OpCodes.Br, cont501)
ReadIL.MarkLabel(cont501)
ReadIL.MarkSequencePoint(doc14, 559, 1, 559, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(EndMethodStmt))
Dim typ140 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ140))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ140).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc14, 560, 1, 560, 100)
Dim typ141(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ141(UBound(typ141) + 1)
typ141(UBound(typ141)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ141))
Typ = Typ03.GetMethod("IsInstanceOfType", typ141).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc14, 562, 1, 562, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa509 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru509 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont509 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru509)
ReadIL.Emit(OpCodes.Br, fa509)
ReadIL.MarkLabel(tru509)
ReadIL.MarkSequencePoint(doc14, 563, 1, 563, 100)
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitRet", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitRet", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 564, 1, 564, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("InMethodFlg"))
ReadIL.MarkSequencePoint(doc14, 565, 1, 565, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmB"))
Typ = GetType(AsmFactory).GetField("AsmB").FieldType
ReadIL.Emit(OpCodes.Stloc, 27)
ReadIL.MarkSequencePoint(doc14, 566, 1, 566, 100)
Dim locbldr459 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Int32))
locbldr459.SetLocalSymInfo("mnamcomp")
Dim typ142(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnMetName"))
Typ = GetType(AsmFactory).GetField("CurnMetName").FieldType
ReDim Preserve typ142(UBound(typ142) + 1)
typ142(UBound(typ142)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "main")
Typ = GetType(System.String)
ReDim Preserve typ142(UBound(typ142) + 1)
typ142(UBound(typ142)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ142))
Typ = GetType(String).GetMethod("Compare", typ142).ReturnType
ReadIL.Emit(OpCodes.Stloc, 85)
ReadIL.MarkSequencePoint(doc14, 567, 1, 567, 100)
Dim locbldr460 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Int32))
locbldr460.SetLocalSymInfo("amodecomp")
Dim typ143(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmMode"))
Typ = GetType(AsmFactory).GetField("AsmMode").FieldType
ReDim Preserve typ143(UBound(typ143) + 1)
typ143(UBound(typ143)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "exe")
Typ = GetType(System.String)
ReDim Preserve typ143(UBound(typ143) + 1)
typ143(UBound(typ143)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ143))
Typ = GetType(String).GetMethod("Compare", typ143).ReturnType
ReadIL.Emit(OpCodes.Stloc, 86)
ReadIL.MarkSequencePoint(doc14, 568, 1, 568, 100)
ReadIL.Emit(OpCodes.Ldloc, 85)
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa510 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru510 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont510 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru510)
ReadIL.Emit(OpCodes.Br, fa510)
ReadIL.MarkLabel(tru510)
ReadIL.MarkSequencePoint(doc14, 569, 1, 569, 100)
ReadIL.Emit(OpCodes.Ldloc, 86)
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa511 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru511 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont511 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru511)
ReadIL.Emit(OpCodes.Br, fa511)
ReadIL.MarkLabel(tru511)
ReadIL.MarkSequencePoint(doc14, 570, 1, 570, 100)
Dim typ144(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 27)
Typ = GetType(AssemblyBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("Met"))
Typ = GetType(ILEmitter).GetField("Met").FieldType
ReDim Preserve typ144(UBound(typ144) + 1)
typ144(UBound(typ144)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("SetEntryPoint", typ144))
Typ = Typ03.GetMethod("SetEntryPoint", typ144).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 571, 1, 571, 100)
ReadIL.Emit(OpCodes.Br, cont511)
ReadIL.MarkLabel(fa511)
ReadIL.Emit(OpCodes.Br, cont511)
ReadIL.MarkLabel(cont511)
ReadIL.MarkSequencePoint(doc14, 572, 1, 572, 100)
ReadIL.Emit(OpCodes.Br, cont510)
ReadIL.MarkLabel(fa510)
ReadIL.Emit(OpCodes.Br, cont510)
ReadIL.MarkLabel(cont510)
ReadIL.MarkSequencePoint(doc14, 573, 1, 573, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc14, 574, 1, 574, 100)
ReadIL.Emit(OpCodes.Br, cont509)
ReadIL.MarkLabel(fa509)
ReadIL.Emit(OpCodes.Br, cont509)
ReadIL.MarkLabel(cont509)
ReadIL.MarkSequencePoint(doc14, 576, 1, 576, 100)
Dim locbldr461 As LocalBuilder = ReadIL.DeclareLocal(GetType(Ident))
locbldr461.SetLocalSymInfo("vnam")
ReadIL.MarkSequencePoint(doc14, 577, 1, 577, 100)
Dim locbldr462 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeTok))
locbldr462.SetLocalSymInfo("vtyptok")
ReadIL.MarkSequencePoint(doc14, 578, 1, 578, 100)
Dim locbldr463 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr463.SetLocalSymInfo("vtyp")
ReadIL.Emit(OpCodes.Ldnull)
ReadIL.Emit(OpCodes.Stloc, 89)
ReadIL.MarkSequencePoint(doc14, 579, 1, 579, 100)
Dim locbldr464 As LocalBuilder = ReadIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator"))
locbldr464.SetLocalSymInfo("eval")
ReadIL.Emit(OpCodes.Ldnull)
ReadIL.Emit(OpCodes.Stloc, 90)
ReadIL.MarkSequencePoint(doc14, 582, 1, 582, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(ReturnStmt))
Dim typ145 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ145))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ145).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc14, 583, 1, 583, 100)
Dim typ146(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ146(UBound(typ146) + 1)
typ146(UBound(typ146)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ146))
Typ = Typ03.GetMethod("IsInstanceOfType", typ146).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc14, 585, 1, 585, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa512 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru512 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont512 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru512)
ReadIL.Emit(OpCodes.Br, fa512)
ReadIL.MarkLabel(tru512)
ReadIL.MarkSequencePoint(doc14, 587, 1, 587, 100)
Dim locbldr465 As LocalBuilder = ReadIL.DeclareLocal(GetType(ReturnStmt))
locbldr465.SetLocalSymInfo("retstmt")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 91)
ReadIL.MarkSequencePoint(doc14, 589, 1, 589, 100)
ReadIL.Emit(OpCodes.Ldloc, 91)
Typ = GetType(ReturnStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(ReturnStmt).GetField("RExp"))
Typ = GetType(ReturnStmt).GetField("RExp").FieldType
ReadIL.Emit(OpCodes.Ldnull)
Dim fa513 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru513 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont513 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, fa513)
ReadIL.Emit(OpCodes.Br, tru513)
ReadIL.MarkLabel(tru513)
ReadIL.MarkSequencePoint(doc14, 590, 1, 590, 100)
ReadIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator").GetConstructor(Type.EmptyTypes))
ReadIL.Emit(OpCodes.Stloc, 90)
ReadIL.MarkSequencePoint(doc14, 591, 1, 591, 100)
Dim typ147(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 90)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator")
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 91)
Typ = GetType(ReturnStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(ReturnStmt).GetField("RExp"))
Typ = GetType(ReturnStmt).GetField("RExp").FieldType
ReDim Preserve typ147(UBound(typ147) + 1)
typ147(UBound(typ147)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Evaluate", typ147))
Typ = Typ03.GetMethod("Evaluate", typ147).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 592, 1, 592, 100)
ReadIL.Emit(OpCodes.Br, cont513)
ReadIL.MarkLabel(fa513)
ReadIL.Emit(OpCodes.Br, cont513)
ReadIL.MarkLabel(cont513)
ReadIL.MarkSequencePoint(doc14, 594, 1, 594, 100)
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitRet", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitRet", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 596, 1, 596, 100)
ReadIL.Emit(OpCodes.Br, cont512)
ReadIL.MarkLabel(fa512)
ReadIL.Emit(OpCodes.Br, cont512)
ReadIL.MarkLabel(cont512)
ReadIL.MarkSequencePoint(doc14, 598, 1, 598, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(VarStmt))
Dim typ148 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ148))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ148).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc14, 599, 1, 599, 100)
Dim typ149(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ149(UBound(typ149) + 1)
typ149(UBound(typ149)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ149))
Typ = Typ03.GetMethod("IsInstanceOfType", typ149).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc14, 601, 1, 601, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa514 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru514 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont514 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru514)
ReadIL.Emit(OpCodes.Br, fa514)
ReadIL.MarkLabel(tru514)
ReadIL.MarkSequencePoint(doc14, 602, 1, 602, 100)
Dim locbldr466 As LocalBuilder = ReadIL.DeclareLocal(GetType(VarStmt))
locbldr466.SetLocalSymInfo("curv")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 92)
ReadIL.MarkSequencePoint(doc14, 603, 1, 603, 100)
ReadIL.Emit(OpCodes.Ldloc, 92)
Typ = GetType(VarStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(VarStmt).GetField("VarName"))
Typ = GetType(VarStmt).GetField("VarName").FieldType
ReadIL.Emit(OpCodes.Stloc, 87)
ReadIL.MarkSequencePoint(doc14, 605, 1, 605, 100)
ReadIL.Emit(OpCodes.Ldloc, 92)
Typ = GetType(VarStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(VarStmt).GetField("VarTyp"))
Typ = GetType(VarStmt).GetField("VarTyp").FieldType
ReadIL.Emit(OpCodes.Stloc, 88)
ReadIL.MarkSequencePoint(doc14, 618, 1, 618, 100)
Dim typ150(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 88)
Typ = GetType(TypeTok)
ReDim Preserve typ150(UBound(typ150) + 1)
typ150(UBound(typ150)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ150))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ150).ReturnType
ReadIL.Emit(OpCodes.Stloc, 89)
ReadIL.MarkSequencePoint(doc14, 620, 1, 620, 100)
ReadIL.Emit(OpCodes.Ldloc, 89)
Typ = GetType(System.Type)
ReadIL.Emit(OpCodes.Ldnull)
Dim fa515 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru515 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont515 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru515)
ReadIL.Emit(OpCodes.Br, fa515)
ReadIL.MarkLabel(tru515)
ReadIL.MarkSequencePoint(doc14, 621, 1, 621, 100)
Dim typ151(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Class '")
Typ = GetType(System.String)
ReDim Preserve typ151(UBound(typ151) + 1)
typ151(UBound(typ151)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 88)
Typ = GetType(TypeTok)
ReadIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("Value"))
Typ = GetType(TypeTok).GetField("Value").FieldType
ReDim Preserve typ151(UBound(typ151) + 1)
typ151(UBound(typ151)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "' is not defined.")
Typ = GetType(System.String)
ReDim Preserve typ151(UBound(typ151) + 1)
typ151(UBound(typ151)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ151))
Typ = GetType(String).GetMethod("Concat", typ151).ReturnType
ReadIL.Emit(OpCodes.Stloc, 3)
ReadIL.MarkSequencePoint(doc14, 622, 1, 622, 100)
Dim typ152(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("LineNr"))
Typ = GetType(ILEmitter).GetField("LineNr").FieldType
ReDim Preserve typ152(UBound(typ152) + 1)
typ152(UBound(typ152)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("CurSrcFile"))
Typ = GetType(ILEmitter).GetField("CurSrcFile").FieldType
ReDim Preserve typ152(UBound(typ152) + 1)
typ152(UBound(typ152)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.String)
ReDim Preserve typ152(UBound(typ152) + 1)
typ152(UBound(typ152)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("WriteError", typ152))
Typ = GetType(StreamUtils).GetMethod("WriteError", typ152).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 623, 1, 623, 100)
ReadIL.Emit(OpCodes.Br, cont515)
ReadIL.MarkLabel(fa515)
ReadIL.Emit(OpCodes.Br, cont515)
ReadIL.MarkLabel(cont515)
ReadIL.MarkSequencePoint(doc14, 626, 1, 626, 100)
Dim typ153(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 87)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ153(UBound(typ153) + 1)
typ153(UBound(typ153)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 89)
Typ = GetType(System.Type)
ReDim Preserve typ153(UBound(typ153) + 1)
typ153(UBound(typ153)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("DeclVar", typ153))
Typ = GetType(ILEmitter).GetMethod("DeclVar", typ153).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 627, 1, 627, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("LocInd"))
Typ = GetType(ILEmitter).GetField("LocInd").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Add)
ReadIL.Emit(OpCodes.Stsfld, GetType(ILEmitter).GetField("LocInd"))
ReadIL.MarkSequencePoint(doc14, 628, 1, 628, 100)
Dim typ154(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 87)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ154(UBound(typ154) + 1)
typ154(UBound(typ154)) = Typ
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ154(UBound(typ154) + 1)
typ154(UBound(typ154)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("LocInd"))
Typ = GetType(ILEmitter).GetField("LocInd").FieldType
ReDim Preserve typ154(UBound(typ154) + 1)
typ154(UBound(typ154)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 89)
Typ = GetType(System.Type)
ReDim Preserve typ154(UBound(typ154) + 1)
typ154(UBound(typ154)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddVar", typ154))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddVar", typ154).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 630, 1, 630, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc14, 631, 1, 631, 100)
ReadIL.Emit(OpCodes.Br, cont514)
ReadIL.MarkLabel(fa514)
ReadIL.Emit(OpCodes.Br, cont514)
ReadIL.MarkLabel(cont514)
ReadIL.MarkSequencePoint(doc14, 633, 1, 633, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(VarAsgnStmt))
Dim typ155 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ155))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ155).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc14, 634, 1, 634, 100)
Dim typ156(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ156(UBound(typ156) + 1)
typ156(UBound(typ156)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ156))
Typ = Typ03.GetMethod("IsInstanceOfType", typ156).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc14, 636, 1, 636, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa516 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru516 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont516 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru516)
ReadIL.Emit(OpCodes.Br, fa516)
ReadIL.MarkLabel(tru516)
ReadIL.MarkSequencePoint(doc14, 637, 1, 637, 100)
Dim locbldr467 As LocalBuilder = ReadIL.DeclareLocal(GetType(VarAsgnStmt))
locbldr467.SetLocalSymInfo("curva")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 93)
ReadIL.MarkSequencePoint(doc14, 638, 1, 638, 100)
ReadIL.Emit(OpCodes.Ldloc, 93)
Typ = GetType(VarAsgnStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(VarAsgnStmt).GetField("VarName"))
Typ = GetType(VarAsgnStmt).GetField("VarName").FieldType
ReadIL.Emit(OpCodes.Stloc, 87)
ReadIL.MarkSequencePoint(doc14, 640, 1, 640, 100)
ReadIL.Emit(OpCodes.Ldloc, 93)
Typ = GetType(VarAsgnStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(VarAsgnStmt).GetField("VarTyp"))
Typ = GetType(VarAsgnStmt).GetField("VarTyp").FieldType
ReadIL.Emit(OpCodes.Stloc, 88)
ReadIL.MarkSequencePoint(doc14, 653, 1, 653, 100)
Dim typ157(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 88)
Typ = GetType(TypeTok)
ReDim Preserve typ157(UBound(typ157) + 1)
typ157(UBound(typ157)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ157))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ157).ReturnType
ReadIL.Emit(OpCodes.Stloc, 89)
ReadIL.MarkSequencePoint(doc14, 655, 1, 655, 100)
ReadIL.Emit(OpCodes.Ldloc, 89)
Typ = GetType(System.Type)
ReadIL.Emit(OpCodes.Ldnull)
Dim fa517 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru517 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont517 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru517)
ReadIL.Emit(OpCodes.Br, fa517)
ReadIL.MarkLabel(tru517)
ReadIL.MarkSequencePoint(doc14, 656, 1, 656, 100)
Dim typ158(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Class '")
Typ = GetType(System.String)
ReDim Preserve typ158(UBound(typ158) + 1)
typ158(UBound(typ158)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 88)
Typ = GetType(TypeTok)
ReadIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("Value"))
Typ = GetType(TypeTok).GetField("Value").FieldType
ReDim Preserve typ158(UBound(typ158) + 1)
typ158(UBound(typ158)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "' is not defined.")
Typ = GetType(System.String)
ReDim Preserve typ158(UBound(typ158) + 1)
typ158(UBound(typ158)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ158))
Typ = GetType(String).GetMethod("Concat", typ158).ReturnType
ReadIL.Emit(OpCodes.Stloc, 3)
ReadIL.MarkSequencePoint(doc14, 657, 1, 657, 100)
Dim typ159(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("LineNr"))
Typ = GetType(ILEmitter).GetField("LineNr").FieldType
ReDim Preserve typ159(UBound(typ159) + 1)
typ159(UBound(typ159)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("CurSrcFile"))
Typ = GetType(ILEmitter).GetField("CurSrcFile").FieldType
ReDim Preserve typ159(UBound(typ159) + 1)
typ159(UBound(typ159)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.String)
ReDim Preserve typ159(UBound(typ159) + 1)
typ159(UBound(typ159)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("WriteError", typ159))
Typ = GetType(StreamUtils).GetMethod("WriteError", typ159).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 658, 1, 658, 100)
ReadIL.Emit(OpCodes.Br, cont517)
ReadIL.MarkLabel(fa517)
ReadIL.Emit(OpCodes.Br, cont517)
ReadIL.MarkLabel(cont517)
ReadIL.MarkSequencePoint(doc14, 660, 1, 660, 100)
Dim typ160(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 87)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ160(UBound(typ160) + 1)
typ160(UBound(typ160)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 89)
Typ = GetType(System.Type)
ReDim Preserve typ160(UBound(typ160) + 1)
typ160(UBound(typ160)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("DeclVar", typ160))
Typ = GetType(ILEmitter).GetMethod("DeclVar", typ160).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 661, 1, 661, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("LocInd"))
Typ = GetType(ILEmitter).GetField("LocInd").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Add)
ReadIL.Emit(OpCodes.Stsfld, GetType(ILEmitter).GetField("LocInd"))
ReadIL.MarkSequencePoint(doc14, 662, 1, 662, 100)
Dim typ161(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 87)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ161(UBound(typ161) + 1)
typ161(UBound(typ161)) = Typ
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ161(UBound(typ161) + 1)
typ161(UBound(typ161)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("LocInd"))
Typ = GetType(ILEmitter).GetField("LocInd").FieldType
ReDim Preserve typ161(UBound(typ161) + 1)
typ161(UBound(typ161)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 89)
Typ = GetType(System.Type)
ReDim Preserve typ161(UBound(typ161) + 1)
typ161(UBound(typ161)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddVar", typ161))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddVar", typ161).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 663, 1, 663, 100)
ReadIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator").GetConstructor(Type.EmptyTypes))
ReadIL.Emit(OpCodes.Stloc, 90)
ReadIL.MarkSequencePoint(doc14, 664, 1, 664, 100)
Dim typ162(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 90)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator")
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 87)
Typ = GetType(Ident)
ReDim Preserve typ162(UBound(typ162) + 1)
typ162(UBound(typ162)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 93)
Typ = GetType(VarAsgnStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(VarAsgnStmt).GetField("RExpr"))
Typ = GetType(VarAsgnStmt).GetField("RExpr").FieldType
ReDim Preserve typ162(UBound(typ162) + 1)
typ162(UBound(typ162)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("StoreEmit", typ162))
Typ = Typ03.GetMethod("StoreEmit", typ162).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 666, 1, 666, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc14, 667, 1, 667, 100)
ReadIL.Emit(OpCodes.Br, cont516)
ReadIL.MarkLabel(fa516)
ReadIL.Emit(OpCodes.Br, cont516)
ReadIL.MarkLabel(cont516)
ReadIL.MarkSequencePoint(doc14, 669, 1, 669, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(NSStmt))
Dim typ163 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ163))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ163).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc14, 670, 1, 670, 100)
Dim typ164(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ164(UBound(typ164) + 1)
typ164(UBound(typ164)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ164))
Typ = Typ03.GetMethod("IsInstanceOfType", typ164).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc14, 672, 1, 672, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa518 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru518 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont518 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru518)
ReadIL.Emit(OpCodes.Br, fa518)
ReadIL.MarkLabel(tru518)
ReadIL.MarkSequencePoint(doc14, 674, 1, 674, 100)
Dim locbldr468 As LocalBuilder = ReadIL.DeclareLocal(GetType(NSStmt))
locbldr468.SetLocalSymInfo("nss")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 94)
ReadIL.MarkSequencePoint(doc14, 675, 1, 675, 100)
Dim locbldr469 As LocalBuilder = ReadIL.DeclareLocal(GetType(Token))
locbldr469.SetLocalSymInfo("nssns")
ReadIL.Emit(OpCodes.Ldloc, 94)
Typ = GetType(NSStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(NSStmt).GetField("NS"))
Typ = GetType(NSStmt).GetField("NS").FieldType
ReadIL.Emit(OpCodes.Stloc, 95)
ReadIL.MarkSequencePoint(doc14, 677, 1, 677, 100)
Dim typ165(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "^")
Typ = GetType(System.String)
ReDim Preserve typ165(UBound(typ165) + 1)
typ165(UBound(typ165)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ165(UBound(typ165) + 1)
typ165(UBound(typ165)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "(.)*")
Typ = GetType(System.String)
ReDim Preserve typ165(UBound(typ165) + 1)
typ165(UBound(typ165)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ165(UBound(typ165) + 1)
typ165(UBound(typ165)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ165))
Typ = GetType(String).GetMethod("Concat", typ165).ReturnType
ReadIL.Emit(OpCodes.Stloc, 2)
ReadIL.MarkSequencePoint(doc14, 678, 1, 678, 100)
Dim typ166(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReDim Preserve typ166(UBound(typ166) + 1)
typ166(UBound(typ166)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "$")
Typ = GetType(System.String)
ReDim Preserve typ166(UBound(typ166) + 1)
typ166(UBound(typ166)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ166))
Typ = GetType(String).GetMethod("Concat", typ166).ReturnType
ReadIL.Emit(OpCodes.Stloc, 2)
ReadIL.MarkSequencePoint(doc14, 679, 1, 679, 100)
Dim typ167(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 95)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ167(UBound(typ167) + 1)
typ167(UBound(typ167)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReDim Preserve typ167(UBound(typ167) + 1)
typ167(UBound(typ167)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ167))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ167).ReturnType
ReadIL.Emit(OpCodes.Stloc, 6)
ReadIL.MarkSequencePoint(doc14, 681, 1, 681, 100)
ReadIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa519 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru519 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont519 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru519)
ReadIL.Emit(OpCodes.Br, fa519)
ReadIL.MarkLabel(tru519)
ReadIL.MarkSequencePoint(doc14, 682, 1, 682, 100)
ReadIL.Emit(OpCodes.Ldloc, 95)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stloc, 2)
ReadIL.MarkSequencePoint(doc14, 683, 1, 683, 100)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Char))
ReadIL.Emit(OpCodes.Stloc, 7)
ReadIL.MarkSequencePoint(doc14, 684, 1, 684, 100)
ReadIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
Dim typ168 As Type() = {Typ}
ReadIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ168))
Typ = GetType(System.Convert).GetMethod("ToChar", typ168).ReturnType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc14, 685, 1, 685, 100)
Dim typ169(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ169(UBound(typ169) + 1)
typ169(UBound(typ169)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Trim", typ169))
Typ = Typ03.GetMethod("Trim", typ169).ReturnType
ReadIL.Emit(OpCodes.Stloc, 2)
ReadIL.MarkSequencePoint(doc14, 686, 1, 686, 100)
ReadIL.Emit(OpCodes.Ldloc, 95)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReadIL.Emit(OpCodes.Stfld, GetType(Token).GetField("Value"))
ReadIL.MarkSequencePoint(doc14, 687, 1, 687, 100)
ReadIL.Emit(OpCodes.Br, cont519)
ReadIL.MarkLabel(fa519)
ReadIL.Emit(OpCodes.Br, cont519)
ReadIL.MarkLabel(cont519)
ReadIL.MarkSequencePoint(doc14, 689, 1, 689, 100)
ReadIL.Emit(OpCodes.Ldloc, 95)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnNS"))
ReadIL.MarkSequencePoint(doc14, 691, 1, 691, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc14, 692, 1, 692, 100)
ReadIL.Emit(OpCodes.Br, cont518)
ReadIL.MarkLabel(fa518)
ReadIL.Emit(OpCodes.Br, cont518)
ReadIL.MarkLabel(cont518)
ReadIL.MarkSequencePoint(doc14, 694, 1, 694, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(EndNSStmt))
Dim typ170 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ170))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ170).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc14, 695, 1, 695, 100)
Dim typ171(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ171(UBound(typ171) + 1)
typ171(UBound(typ171)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ171))
Typ = Typ03.GetMethod("IsInstanceOfType", typ171).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc14, 697, 1, 697, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa520 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru520 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont520 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru520)
ReadIL.Emit(OpCodes.Br, fa520)
ReadIL.MarkLabel(tru520)
ReadIL.MarkSequencePoint(doc14, 698, 1, 698, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("DfltNS"))
Typ = GetType(AsmFactory).GetField("DfltNS").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnNS"))
ReadIL.MarkSequencePoint(doc14, 699, 1, 699, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc14, 700, 1, 700, 100)
ReadIL.Emit(OpCodes.Br, cont520)
ReadIL.MarkLabel(fa520)
ReadIL.Emit(OpCodes.Br, cont520)
ReadIL.MarkLabel(cont520)
ReadIL.MarkSequencePoint(doc14, 703, 1, 703, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(AssignStmt))
Dim typ172 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ172))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ172).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc14, 704, 1, 704, 100)
Dim typ173(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ173(UBound(typ173) + 1)
typ173(UBound(typ173)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ173))
Typ = Typ03.GetMethod("IsInstanceOfType", typ173).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc14, 706, 1, 706, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa521 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru521 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont521 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru521)
ReadIL.Emit(OpCodes.Br, fa521)
ReadIL.MarkLabel(tru521)
ReadIL.MarkSequencePoint(doc14, 707, 1, 707, 100)
Dim locbldr470 As LocalBuilder = ReadIL.DeclareLocal(GetType(AssignStmt))
locbldr470.SetLocalSymInfo("asgnstm")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 96)
ReadIL.MarkSequencePoint(doc14, 708, 1, 708, 100)
ReadIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator").GetConstructor(Type.EmptyTypes))
ReadIL.Emit(OpCodes.Stloc, 90)
ReadIL.MarkSequencePoint(doc14, 709, 1, 709, 100)
Dim locbldr471 As LocalBuilder = ReadIL.DeclareLocal(GetType(Expr))
locbldr471.SetLocalSymInfo("asgnstmle")
ReadIL.Emit(OpCodes.Ldloc, 96)
Typ = GetType(AssignStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(AssignStmt).GetField("LExp"))
Typ = GetType(AssignStmt).GetField("LExp").FieldType
ReadIL.Emit(OpCodes.Stloc, 97)
ReadIL.MarkSequencePoint(doc14, 710, 1, 710, 100)
Dim locbldr472 As LocalBuilder = ReadIL.DeclareLocal(GetType(Token))
locbldr472.SetLocalSymInfo("asgnstmletok")
ReadIL.Emit(OpCodes.Ldloc, 97)
Typ = GetType(Expr)
ReadIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ReadIL.Emit(OpCodes.Stloc, 98)
ReadIL.MarkSequencePoint(doc14, 714, 1, 714, 100)
Dim typ174(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 90)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator")
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 98)
Typ = GetType(Token)
ReDim Preserve typ174(UBound(typ174) + 1)
typ174(UBound(typ174)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 96)
Typ = GetType(AssignStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(AssignStmt).GetField("RExp"))
Typ = GetType(AssignStmt).GetField("RExp").FieldType
ReDim Preserve typ174(UBound(typ174) + 1)
typ174(UBound(typ174)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("StoreEmit", typ174))
Typ = Typ03.GetMethod("StoreEmit", typ174).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 715, 1, 715, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc14, 716, 1, 716, 100)
ReadIL.Emit(OpCodes.Br, cont521)
ReadIL.MarkLabel(fa521)
ReadIL.Emit(OpCodes.Br, cont521)
ReadIL.MarkLabel(cont521)
ReadIL.MarkSequencePoint(doc14, 718, 1, 718, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(MethodCallStmt))
Dim typ175 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ175))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ175).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc14, 719, 1, 719, 100)
Dim typ176(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ176(UBound(typ176) + 1)
typ176(UBound(typ176)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ176))
Typ = Typ03.GetMethod("IsInstanceOfType", typ176).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc14, 721, 1, 721, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa522 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru522 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont522 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru522)
ReadIL.Emit(OpCodes.Br, fa522)
ReadIL.MarkLabel(tru522)
ReadIL.MarkSequencePoint(doc14, 722, 1, 722, 100)
Dim locbldr473 As LocalBuilder = ReadIL.DeclareLocal(GetType(MethodCallStmt))
locbldr473.SetLocalSymInfo("mcstmt")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 99)
ReadIL.MarkSequencePoint(doc14, 723, 1, 723, 100)
Dim locbldr474 As LocalBuilder = ReadIL.DeclareLocal(GetType(Expr))
locbldr474.SetLocalSymInfo("mcstmtexp")
ReadIL.Emit(OpCodes.Newobj, GetType(Expr).GetConstructor(Type.EmptyTypes))
ReadIL.Emit(OpCodes.Stloc, 100)
ReadIL.MarkSequencePoint(doc14, 724, 1, 724, 100)
Dim locbldr475 As LocalBuilder = ReadIL.DeclareLocal(GetType(Token))
locbldr475.SetLocalSymInfo("mcstmttok")
ReadIL.Emit(OpCodes.Ldloc, 99)
Typ = GetType(MethodCallStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(MethodCallStmt).GetField("MethodToken"))
Typ = GetType(MethodCallStmt).GetField("MethodToken").FieldType
ReadIL.Emit(OpCodes.Stloc, 101)
ReadIL.MarkSequencePoint(doc14, 725, 1, 725, 100)
Dim typ177(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 101)
Typ = GetType(Token)
ReDim Preserve typ177(UBound(typ177) + 1)
typ177(UBound(typ177)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("SetPopFlg", typ177))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("SetPopFlg", typ177).ReturnType
ReadIL.Emit(OpCodes.Stloc, 101)
ReadIL.MarkSequencePoint(doc14, 726, 1, 726, 100)
ReadIL.Emit(OpCodes.Ldloc, 101)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldnull)
Dim fa523 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru523 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont523 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, fa523)
ReadIL.Emit(OpCodes.Br, tru523)
ReadIL.MarkLabel(tru523)
ReadIL.MarkSequencePoint(doc14, 727, 1, 727, 100)
Dim typ178(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 100)
Typ = GetType(Expr)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 101)
Typ = GetType(Token)
ReDim Preserve typ178(UBound(typ178) + 1)
typ178(UBound(typ178)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ178))
Typ = Typ03.GetMethod("AddToken", typ178).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 728, 1, 728, 100)
ReadIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator").GetConstructor(Type.EmptyTypes))
ReadIL.Emit(OpCodes.Stloc, 90)
ReadIL.MarkSequencePoint(doc14, 729, 1, 729, 100)
Dim typ179(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 90)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator")
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 100)
Typ = GetType(Expr)
ReDim Preserve typ179(UBound(typ179) + 1)
typ179(UBound(typ179)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Evaluate", typ179))
Typ = Typ03.GetMethod("Evaluate", typ179).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 730, 1, 730, 100)
ReadIL.Emit(OpCodes.Br, cont523)
ReadIL.MarkLabel(fa523)
ReadIL.Emit(OpCodes.Br, cont523)
ReadIL.MarkLabel(cont523)
ReadIL.MarkSequencePoint(doc14, 731, 1, 731, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc14, 732, 1, 732, 100)
ReadIL.Emit(OpCodes.Br, cont522)
ReadIL.MarkLabel(fa522)
ReadIL.Emit(OpCodes.Br, cont522)
ReadIL.MarkLabel(cont522)
ReadIL.MarkSequencePoint(doc14, 734, 1, 734, 100)
Dim locbldr476 As LocalBuilder = ReadIL.DeclareLocal(GetType(Emit.Label))
locbldr476.SetLocalSymInfo("ifendl")
ReadIL.MarkSequencePoint(doc14, 735, 1, 735, 100)
Dim locbldr477 As LocalBuilder = ReadIL.DeclareLocal(GetType(Emit.Label))
locbldr477.SetLocalSymInfo("ifnbl")
ReadIL.MarkSequencePoint(doc14, 736, 1, 736, 100)
Dim locbldr478 As LocalBuilder = ReadIL.DeclareLocal(GetType(Emit.Label))
locbldr478.SetLocalSymInfo("genlbl")
ReadIL.MarkSequencePoint(doc14, 738, 1, 738, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(IfStmt))
Dim typ180 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ180))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ180).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc14, 739, 1, 739, 100)
Dim typ181(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ181(UBound(typ181) + 1)
typ181(UBound(typ181)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ181))
Typ = Typ03.GetMethod("IsInstanceOfType", typ181).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc14, 741, 1, 741, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa524 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru524 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont524 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru524)
ReadIL.Emit(OpCodes.Br, fa524)
ReadIL.MarkLabel(tru524)
ReadIL.MarkSequencePoint(doc14, 742, 1, 742, 100)
Dim locbldr479 As LocalBuilder = ReadIL.DeclareLocal(GetType(IfStmt))
locbldr479.SetLocalSymInfo("ifstm")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 105)
ReadIL.MarkSequencePoint(doc14, 743, 1, 743, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddIf", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddIf", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 744, 1, 744, 100)
Dim locbldr480 As LocalBuilder = ReadIL.DeclareLocal(GetType(Expr))
locbldr480.SetLocalSymInfo("ifexp")
ReadIL.Emit(OpCodes.Ldloc, 105)
Typ = GetType(IfStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(IfStmt).GetField("Exp"))
Typ = GetType(IfStmt).GetField("Exp").FieldType
ReadIL.Emit(OpCodes.Stloc, 106)
ReadIL.MarkSequencePoint(doc14, 745, 1, 745, 100)
ReadIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator").GetConstructor(Type.EmptyTypes))
ReadIL.Emit(OpCodes.Stloc, 90)
ReadIL.MarkSequencePoint(doc14, 746, 1, 746, 100)
Dim typ182(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 90)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator")
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 106)
Typ = GetType(Expr)
ReDim Preserve typ182(UBound(typ182) + 1)
typ182(UBound(typ182)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Evaluate", typ182))
Typ = Typ03.GetMethod("Evaluate", typ182).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 748, 1, 748, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfNxtBlkLbl", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfNxtBlkLbl", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 103)
ReadIL.MarkSequencePoint(doc14, 749, 1, 749, 100)
Dim typ183(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 103)
Typ = GetType(Emit.Label)
ReDim Preserve typ183(UBound(typ183) + 1)
typ183(UBound(typ183)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitBrfalse", typ183))
Typ = GetType(ILEmitter).GetMethod("EmitBrfalse", typ183).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 751, 1, 751, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc14, 752, 1, 752, 100)
ReadIL.Emit(OpCodes.Br, cont524)
ReadIL.MarkLabel(fa524)
ReadIL.Emit(OpCodes.Br, cont524)
ReadIL.MarkLabel(cont524)
ReadIL.MarkSequencePoint(doc14, 754, 1, 754, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(ElseIfStmt))
Dim typ184 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ184))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ184).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc14, 755, 1, 755, 100)
Dim typ185(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ185(UBound(typ185) + 1)
typ185(UBound(typ185)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ185))
Typ = Typ03.GetMethod("IsInstanceOfType", typ185).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc14, 757, 1, 757, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa525 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru525 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont525 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru525)
ReadIL.Emit(OpCodes.Br, fa525)
ReadIL.MarkLabel(tru525)
ReadIL.MarkSequencePoint(doc14, 759, 1, 759, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfEndLbl", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfEndLbl", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 102)
ReadIL.MarkSequencePoint(doc14, 760, 1, 760, 100)
Dim typ186(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 102)
Typ = GetType(Emit.Label)
ReDim Preserve typ186(UBound(typ186) + 1)
typ186(UBound(typ186)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitBr", typ186))
Typ = GetType(ILEmitter).GetMethod("EmitBr", typ186).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 761, 1, 761, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfNxtBlkLbl", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfNxtBlkLbl", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 103)
ReadIL.MarkSequencePoint(doc14, 762, 1, 762, 100)
Dim typ187(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 103)
Typ = GetType(Emit.Label)
ReDim Preserve typ187(UBound(typ187) + 1)
typ187(UBound(typ187)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("MarkLbl", typ187))
Typ = GetType(ILEmitter).GetMethod("MarkLbl", typ187).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 763, 1, 763, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("SetIfNxtBlkLbl", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("SetIfNxtBlkLbl", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 765, 1, 765, 100)
Dim locbldr481 As LocalBuilder = ReadIL.DeclareLocal(GetType(ElseIfStmt))
locbldr481.SetLocalSymInfo("elifstm")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 107)
ReadIL.MarkSequencePoint(doc14, 766, 1, 766, 100)
Dim locbldr482 As LocalBuilder = ReadIL.DeclareLocal(GetType(Expr))
locbldr482.SetLocalSymInfo("elifexp")
ReadIL.Emit(OpCodes.Ldloc, 107)
Typ = GetType(ElseIfStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(ElseIfStmt).GetField("Exp"))
Typ = GetType(ElseIfStmt).GetField("Exp").FieldType
ReadIL.Emit(OpCodes.Stloc, 108)
ReadIL.MarkSequencePoint(doc14, 767, 1, 767, 100)
ReadIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator").GetConstructor(Type.EmptyTypes))
ReadIL.Emit(OpCodes.Stloc, 90)
ReadIL.MarkSequencePoint(doc14, 768, 1, 768, 100)
Dim typ188(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 90)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator")
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 108)
Typ = GetType(Expr)
ReDim Preserve typ188(UBound(typ188) + 1)
typ188(UBound(typ188)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Evaluate", typ188))
Typ = Typ03.GetMethod("Evaluate", typ188).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 770, 1, 770, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfNxtBlkLbl", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfNxtBlkLbl", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 103)
ReadIL.MarkSequencePoint(doc14, 771, 1, 771, 100)
Dim typ189(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 103)
Typ = GetType(Emit.Label)
ReDim Preserve typ189(UBound(typ189) + 1)
typ189(UBound(typ189)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitBrfalse", typ189))
Typ = GetType(ILEmitter).GetMethod("EmitBrfalse", typ189).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 773, 1, 773, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc14, 774, 1, 774, 100)
ReadIL.Emit(OpCodes.Br, cont525)
ReadIL.MarkLabel(fa525)
ReadIL.Emit(OpCodes.Br, cont525)
ReadIL.MarkLabel(cont525)
ReadIL.MarkSequencePoint(doc14, 776, 1, 776, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(ElseStmt))
Dim typ190 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ190))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ190).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc14, 777, 1, 777, 100)
Dim typ191(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ191(UBound(typ191) + 1)
typ191(UBound(typ191)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ191))
Typ = Typ03.GetMethod("IsInstanceOfType", typ191).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc14, 779, 1, 779, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa526 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru526 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont526 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru526)
ReadIL.Emit(OpCodes.Br, fa526)
ReadIL.MarkLabel(tru526)
ReadIL.MarkSequencePoint(doc14, 780, 1, 780, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfEndLbl", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfEndLbl", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 102)
ReadIL.MarkSequencePoint(doc14, 781, 1, 781, 100)
Dim typ192(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 102)
Typ = GetType(Emit.Label)
ReDim Preserve typ192(UBound(typ192) + 1)
typ192(UBound(typ192)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitBr", typ192))
Typ = GetType(ILEmitter).GetMethod("EmitBr", typ192).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 782, 1, 782, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfNxtBlkLbl", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfNxtBlkLbl", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 103)
ReadIL.MarkSequencePoint(doc14, 783, 1, 783, 100)
Dim typ193(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 103)
Typ = GetType(Emit.Label)
ReDim Preserve typ193(UBound(typ193) + 1)
typ193(UBound(typ193)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("MarkLbl", typ193))
Typ = GetType(ILEmitter).GetMethod("MarkLbl", typ193).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 784, 1, 784, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("SetIfElsePass", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("SetIfElsePass", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 785, 1, 785, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc14, 786, 1, 786, 100)
ReadIL.Emit(OpCodes.Br, cont526)
ReadIL.MarkLabel(fa526)
ReadIL.Emit(OpCodes.Br, cont526)
ReadIL.MarkLabel(cont526)
ReadIL.MarkSequencePoint(doc14, 788, 1, 788, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(EndIfStmt))
Dim typ194 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ194))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ194).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc14, 789, 1, 789, 100)
Dim typ195(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ195(UBound(typ195) + 1)
typ195(UBound(typ195)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ195))
Typ = Typ03.GetMethod("IsInstanceOfType", typ195).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc14, 791, 1, 791, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa527 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru527 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont527 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru527)
ReadIL.Emit(OpCodes.Br, fa527)
ReadIL.MarkLabel(tru527)
ReadIL.MarkSequencePoint(doc14, 793, 1, 793, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfElsePass", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfElsePass", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc14, 795, 1, 795, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa528 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru528 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont528 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru528)
ReadIL.Emit(OpCodes.Br, fa528)
ReadIL.MarkLabel(tru528)
ReadIL.MarkSequencePoint(doc14, 796, 1, 796, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfNxtBlkLbl", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfNxtBlkLbl", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 103)
ReadIL.MarkSequencePoint(doc14, 797, 1, 797, 100)
Dim typ196(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 103)
Typ = GetType(Emit.Label)
ReDim Preserve typ196(UBound(typ196) + 1)
typ196(UBound(typ196)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("MarkLbl", typ196))
Typ = GetType(ILEmitter).GetMethod("MarkLbl", typ196).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 798, 1, 798, 100)
ReadIL.Emit(OpCodes.Br, cont528)
ReadIL.MarkLabel(fa528)
ReadIL.Emit(OpCodes.Br, cont528)
ReadIL.MarkLabel(cont528)
ReadIL.MarkSequencePoint(doc14, 800, 1, 800, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfEndLbl", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfEndLbl", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 102)
ReadIL.MarkSequencePoint(doc14, 801, 1, 801, 100)
Dim typ197(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 102)
Typ = GetType(Emit.Label)
ReDim Preserve typ197(UBound(typ197) + 1)
typ197(UBound(typ197)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("MarkLbl", typ197))
Typ = GetType(ILEmitter).GetMethod("MarkLbl", typ197).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 802, 1, 802, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("PopIf", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("PopIf", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 803, 1, 803, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc14, 804, 1, 804, 100)
ReadIL.Emit(OpCodes.Br, cont527)
ReadIL.MarkLabel(fa527)
ReadIL.Emit(OpCodes.Br, cont527)
ReadIL.MarkLabel(cont527)
ReadIL.MarkSequencePoint(doc14, 806, 1, 806, 100)
Dim locbldr483 As LocalBuilder = ReadIL.DeclareLocal(GetType(Ident))
locbldr483.SetLocalSymInfo("lblidt")
ReadIL.MarkSequencePoint(doc14, 808, 1, 808, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(LabelStmt))
Dim typ198 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ198))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ198).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc14, 809, 1, 809, 100)
Dim typ199(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ199(UBound(typ199) + 1)
typ199(UBound(typ199)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ199))
Typ = Typ03.GetMethod("IsInstanceOfType", typ199).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc14, 811, 1, 811, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa529 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru529 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont529 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru529)
ReadIL.Emit(OpCodes.Br, fa529)
ReadIL.MarkLabel(tru529)
ReadIL.MarkSequencePoint(doc14, 812, 1, 812, 100)
Dim locbldr484 As LocalBuilder = ReadIL.DeclareLocal(GetType(LabelStmt))
locbldr484.SetLocalSymInfo("lblstm")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 110)
ReadIL.MarkSequencePoint(doc14, 813, 1, 813, 100)
ReadIL.Emit(OpCodes.Ldloc, 110)
Typ = GetType(LabelStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(LabelStmt).GetField("LabelName"))
Typ = GetType(LabelStmt).GetField("LabelName").FieldType
ReadIL.Emit(OpCodes.Stloc, 109)
ReadIL.MarkSequencePoint(doc14, 814, 1, 814, 100)
Dim typ200(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 109)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ200(UBound(typ200) + 1)
typ200(UBound(typ200)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddLbl", typ200))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddLbl", typ200).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 815, 1, 815, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc14, 816, 1, 816, 100)
ReadIL.Emit(OpCodes.Br, cont529)
ReadIL.MarkLabel(fa529)
ReadIL.Emit(OpCodes.Br, cont529)
ReadIL.MarkLabel(cont529)
ReadIL.MarkSequencePoint(doc14, 818, 1, 818, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(PlaceStmt))
Dim typ201 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ201))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ201).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc14, 819, 1, 819, 100)
Dim typ202(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ202(UBound(typ202) + 1)
typ202(UBound(typ202)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ202))
Typ = Typ03.GetMethod("IsInstanceOfType", typ202).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc14, 821, 1, 821, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa530 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru530 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont530 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru530)
ReadIL.Emit(OpCodes.Br, fa530)
ReadIL.MarkLabel(tru530)
ReadIL.MarkSequencePoint(doc14, 822, 1, 822, 100)
Dim locbldr485 As LocalBuilder = ReadIL.DeclareLocal(GetType(PlaceStmt))
locbldr485.SetLocalSymInfo("plcstm")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 111)
ReadIL.MarkSequencePoint(doc14, 823, 1, 823, 100)
ReadIL.Emit(OpCodes.Ldloc, 111)
Typ = GetType(PlaceStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(PlaceStmt).GetField("LabelName"))
Typ = GetType(PlaceStmt).GetField("LabelName").FieldType
ReadIL.Emit(OpCodes.Stloc, 109)
ReadIL.MarkSequencePoint(doc14, 824, 1, 824, 100)
Dim typ203(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 109)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ203(UBound(typ203) + 1)
typ203(UBound(typ203)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLbl", typ203))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLbl", typ203).ReturnType
ReadIL.Emit(OpCodes.Stloc, 104)
ReadIL.MarkSequencePoint(doc14, 825, 1, 825, 100)
Dim typ204(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 104)
Typ = GetType(Emit.Label)
ReDim Preserve typ204(UBound(typ204) + 1)
typ204(UBound(typ204)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("MarkLbl", typ204))
Typ = GetType(ILEmitter).GetMethod("MarkLbl", typ204).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 826, 1, 826, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc14, 827, 1, 827, 100)
ReadIL.Emit(OpCodes.Br, cont530)
ReadIL.MarkLabel(fa530)
ReadIL.Emit(OpCodes.Br, cont530)
ReadIL.MarkLabel(cont530)
ReadIL.MarkSequencePoint(doc14, 829, 1, 829, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(GotoStmt))
Dim typ205 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ205))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ205).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc14, 830, 1, 830, 100)
Dim typ206(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ206(UBound(typ206) + 1)
typ206(UBound(typ206)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ206))
Typ = Typ03.GetMethod("IsInstanceOfType", typ206).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc14, 832, 1, 832, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa531 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru531 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont531 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru531)
ReadIL.Emit(OpCodes.Br, fa531)
ReadIL.MarkLabel(tru531)
ReadIL.MarkSequencePoint(doc14, 833, 1, 833, 100)
Dim locbldr486 As LocalBuilder = ReadIL.DeclareLocal(GetType(GotoStmt))
locbldr486.SetLocalSymInfo("gtostm")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 112)
ReadIL.MarkSequencePoint(doc14, 834, 1, 834, 100)
ReadIL.Emit(OpCodes.Ldloc, 112)
Typ = GetType(GotoStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(GotoStmt).GetField("LabelName"))
Typ = GetType(GotoStmt).GetField("LabelName").FieldType
ReadIL.Emit(OpCodes.Stloc, 109)
ReadIL.MarkSequencePoint(doc14, 835, 1, 835, 100)
Dim typ207(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 109)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ207(UBound(typ207) + 1)
typ207(UBound(typ207)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLbl", typ207))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLbl", typ207).ReturnType
ReadIL.Emit(OpCodes.Stloc, 104)
ReadIL.MarkSequencePoint(doc14, 836, 1, 836, 100)
Dim typ208(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 104)
Typ = GetType(Emit.Label)
ReDim Preserve typ208(UBound(typ208) + 1)
typ208(UBound(typ208)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitBr", typ208))
Typ = GetType(ILEmitter).GetMethod("EmitBr", typ208).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc14, 837, 1, 837, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc14, 838, 1, 838, 100)
ReadIL.Emit(OpCodes.Br, cont531)
ReadIL.MarkLabel(fa531)
ReadIL.Emit(OpCodes.Br, cont531)
ReadIL.MarkLabel(cont531)
ReadIL.MarkSequencePoint(doc14, 840, 1, 840, 100)
ReadIL.MarkLabel(label0)
ReadIL.MarkSequencePoint(doc14, 842, 1, 842, 100)
ReadIL.Emit(OpCodes.Ret)
StmtReader.CreateType()
End Sub


Dim doc15 As ISymbolDocumentWriter

Sub CodeGenerator()
Dim CodeGenerator As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "CodeGenerator", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(StmtSet)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
Dim EmitMSIL As MethodBuilder = CodeGenerator.DefineMethod("EmitMSIL", MethodAttributes.Public, GetType(System.Void), typ0)
Dim EmitMSILIL As ILGenerator = EmitMSIL.GetILGenerator()
Dim EmitMSILparam01 As ParameterBuilder = EmitMSIL.DefineParameter(1, ParameterAttributes.None, "stmts")
Dim EmitMSILparam02 As ParameterBuilder = EmitMSIL.DefineParameter(2, ParameterAttributes.None, "fpath")
EmitMSILIL.MarkSequencePoint(doc15, 13, 1, 13, 100)
Dim locbldr487 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(System.Int32))
locbldr487.SetLocalSymInfo("i")
EmitMSILIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Stloc, 0)
EmitMSILIL.MarkSequencePoint(doc15, 14, 1, 14, 100)
Dim locbldr488 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(System.Int32))
locbldr488.SetLocalSymInfo("len")
EmitMSILIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(StmtSet)
EmitMSILIL.Emit(OpCodes.Ldfld, GetType(StmtSet).GetField("Stmts"))
Typ = GetType(StmtSet).GetField("Stmts").FieldType
EmitMSILIL.Emit(OpCodes.Ldlen)
EmitMSILIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Sub)
EmitMSILIL.Emit(OpCodes.Stloc, 1)
EmitMSILIL.MarkSequencePoint(doc15, 15, 1, 15, 100)
Dim locbldr489 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(Stmt))
locbldr489.SetLocalSymInfo("stm")
EmitMSILIL.Emit(OpCodes.Ldnull)
EmitMSILIL.Emit(OpCodes.Stloc, 2)
EmitMSILIL.MarkSequencePoint(doc15, 16, 1, 16, 100)
Dim locbldr490 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(System.Type))
locbldr490.SetLocalSymInfo("typ")
EmitMSILIL.MarkSequencePoint(doc15, 17, 1, 17, 100)
Dim locbldr491 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(System.Boolean))
locbldr491.SetLocalSymInfo("b")
EmitMSILIL.MarkSequencePoint(doc15, 18, 1, 18, 100)
Dim locbldr492 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(System.String))
locbldr492.SetLocalSymInfo("tmpstr")
EmitMSILIL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
EmitMSILIL.Emit(OpCodes.Stloc, 5)
EmitMSILIL.MarkSequencePoint(doc15, 20, 1, 20, 100)
EmitMSILIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.String)
EmitMSILIL.Emit(OpCodes.Stsfld, GetType(ILEmitter).GetField("CurSrcFile"))
EmitMSILIL.MarkSequencePoint(doc15, 21, 1, 21, 100)
Dim typ1(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.String)
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = Typ
EmitMSILIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("AddSrcFile", typ1))
Typ = GetType(ILEmitter).GetMethod("AddSrcFile", typ1).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMSILIL.Emit(OpCodes.Pop)
End If
EmitMSILIL.MarkSequencePoint(doc15, 23, 1, 23, 100)
EmitMSILIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("DocWriters"))
Typ = GetType(ILEmitter).GetField("DocWriters").FieldType
EmitMSILIL.Emit(OpCodes.Ldlen)
EmitMSILIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa532 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
Dim tru532 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
Dim cont532 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
EmitMSILIL.Emit(OpCodes.Bgt, tru532)
EmitMSILIL.Emit(OpCodes.Br, fa532)
EmitMSILIL.MarkLabel(tru532)
EmitMSILIL.MarkSequencePoint(doc15, 24, 1, 24, 100)
Dim locbldr493 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(ModuleBuilder))
locbldr493.SetLocalSymInfo("mdlbldbg")
EmitMSILIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("MdlB"))
Typ = GetType(AsmFactory).GetField("MdlB").FieldType
EmitMSILIL.Emit(OpCodes.Stloc, 6)
EmitMSILIL.MarkSequencePoint(doc15, 25, 1, 25, 100)
Dim typ2(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.String)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = Typ
EmitMSILIL.Emit(OpCodes.Call, GetType(Path).GetMethod("GetFullPath", typ2))
Typ = GetType(Path).GetMethod("GetFullPath", typ2).ReturnType
EmitMSILIL.Emit(OpCodes.Starg, 2)
EmitMSILIL.MarkSequencePoint(doc15, 26, 1, 26, 100)
Dim locbldr494 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(ISymbolDocumentWriter))
locbldr494.SetLocalSymInfo("docw")
Dim typ3(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(ModuleBuilder)
Typ03 = Typ
EmitMSILIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.String)
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = Typ
EmitMSILIL.Emit(OpCodes.Ldsfld, GetType(Guid).GetField("Empty"))
Typ = GetType(Guid).GetField("Empty").FieldType
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = Typ
EmitMSILIL.Emit(OpCodes.Ldsfld, GetType(Guid).GetField("Empty"))
Typ = GetType(Guid).GetField("Empty").FieldType
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = Typ
EmitMSILIL.Emit(OpCodes.Ldsfld, GetType(Guid).GetField("Empty"))
Typ = GetType(Guid).GetField("Empty").FieldType
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = Typ
EmitMSILIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineDocument", typ3))
Typ = Typ03.GetMethod("DefineDocument", typ3).ReturnType
EmitMSILIL.Emit(OpCodes.Stloc, 7)
EmitMSILIL.MarkSequencePoint(doc15, 27, 1, 27, 100)
EmitMSILIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(ISymbolDocumentWriter)
EmitMSILIL.Emit(OpCodes.Stsfld, GetType(ILEmitter).GetField("DocWriter"))
EmitMSILIL.MarkSequencePoint(doc15, 28, 1, 28, 100)
Dim typ4(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(ISymbolDocumentWriter)
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
EmitMSILIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("AddDocWriter", typ4))
Typ = GetType(ILEmitter).GetMethod("AddDocWriter", typ4).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMSILIL.Emit(OpCodes.Pop)
End If
EmitMSILIL.MarkSequencePoint(doc15, 29, 1, 29, 100)
EmitMSILIL.Emit(OpCodes.Br, cont532)
EmitMSILIL.MarkLabel(fa532)
EmitMSILIL.Emit(OpCodes.Br, cont532)
EmitMSILIL.MarkLabel(cont532)
EmitMSILIL.MarkSequencePoint(doc15, 31, 1, 31, 100)
Dim label0 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
EmitMSILIL.MarkSequencePoint(doc15, 32, 1, 32, 100)
Dim label1 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
EmitMSILIL.MarkSequencePoint(doc15, 34, 1, 34, 100)
EmitMSILIL.MarkLabel(label0)
EmitMSILIL.MarkSequencePoint(doc15, 36, 1, 36, 100)
EmitMSILIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Add)
EmitMSILIL.Emit(OpCodes.Stloc, 0)
EmitMSILIL.MarkSequencePoint(doc15, 38, 1, 38, 100)
EmitMSILIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(StmtSet)
EmitMSILIL.Emit(OpCodes.Ldfld, GetType(StmtSet).GetField("Stmts"))
Typ = GetType(StmtSet).GetField("Stmts").FieldType
Typ02 = Typ
EmitMSILIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitMSILIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
EmitMSILIL.Emit(OpCodes.Stloc, 2)
EmitMSILIL.MarkSequencePoint(doc15, 39, 1, 39, 100)
EmitMSILIL.Emit(OpCodes.Ldtoken, GetType(IncludeStmt))
Dim typ5 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitMSILIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ5))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ5).ReturnType
EmitMSILIL.Emit(OpCodes.Stloc, 3)
EmitMSILIL.MarkSequencePoint(doc15, 40, 1, 40, 100)
Dim typ6(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Type)
Typ03 = Typ
EmitMSILIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Stmt)
EmitMSILIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = Typ
EmitMSILIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ6))
Typ = Typ03.GetMethod("IsInstanceOfType", typ6).ReturnType
EmitMSILIL.Emit(OpCodes.Stloc, 4)
EmitMSILIL.MarkSequencePoint(doc15, 42, 1, 42, 100)
EmitMSILIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
EmitMSILIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa533 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
Dim tru533 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
Dim cont533 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
EmitMSILIL.Emit(OpCodes.Beq, tru533)
EmitMSILIL.Emit(OpCodes.Br, fa533)
EmitMSILIL.MarkLabel(tru533)
EmitMSILIL.MarkSequencePoint(doc15, 44, 1, 44, 100)
Dim locbldr495 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(IncludeStmt))
locbldr495.SetLocalSymInfo("inclustm")
EmitMSILIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Stmt)
EmitMSILIL.Emit(OpCodes.Stloc, 8)
EmitMSILIL.MarkSequencePoint(doc15, 45, 1, 45, 100)
Dim locbldr496 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(Token))
locbldr496.SetLocalSymInfo("p")
EmitMSILIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(IncludeStmt)
EmitMSILIL.Emit(OpCodes.Ldfld, GetType(IncludeStmt).GetField("Path"))
Typ = GetType(IncludeStmt).GetField("Path").FieldType
EmitMSILIL.Emit(OpCodes.Stloc, 9)
EmitMSILIL.MarkSequencePoint(doc15, 47, 1, 47, 100)
Dim typ7(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldstr, "^")
Typ = GetType(System.String)
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = Typ
EmitMSILIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = Typ
EmitMSILIL.Emit(OpCodes.Ldstr, "(.)*")
Typ = GetType(System.String)
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = Typ
EmitMSILIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = Typ
EmitMSILIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ7))
Typ = GetType(String).GetMethod("Concat", typ7).ReturnType
EmitMSILIL.Emit(OpCodes.Stloc, 5)
EmitMSILIL.MarkSequencePoint(doc15, 48, 1, 48, 100)
Dim typ8(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.String)
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = Typ
EmitMSILIL.Emit(OpCodes.Ldstr, "$")
Typ = GetType(System.String)
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = Typ
EmitMSILIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ8))
Typ = GetType(String).GetMethod("Concat", typ8).ReturnType
EmitMSILIL.Emit(OpCodes.Stloc, 5)
EmitMSILIL.MarkSequencePoint(doc15, 49, 1, 49, 100)
Dim locbldr497 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(System.Boolean))
locbldr497.SetLocalSymInfo("compb")
Dim typ9(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
EmitMSILIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = Typ
EmitMSILIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.String)
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = Typ
EmitMSILIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ9))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ9).ReturnType
EmitMSILIL.Emit(OpCodes.Stloc, 10)
EmitMSILIL.MarkSequencePoint(doc15, 51, 1, 51, 100)
EmitMSILIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(System.Boolean)
EmitMSILIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa534 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
Dim tru534 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
Dim cont534 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
EmitMSILIL.Emit(OpCodes.Beq, tru534)
EmitMSILIL.Emit(OpCodes.Br, fa534)
EmitMSILIL.MarkLabel(tru534)
EmitMSILIL.MarkSequencePoint(doc15, 52, 1, 52, 100)
EmitMSILIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
EmitMSILIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
EmitMSILIL.Emit(OpCodes.Stloc, 5)
EmitMSILIL.MarkSequencePoint(doc15, 53, 1, 53, 100)
Dim locbldr498 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(System.Char).MakeArrayType())
locbldr498.SetLocalSymInfo("tmpchrarr")
EmitMSILIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Conv_U)
EmitMSILIL.Emit(OpCodes.Newarr, GetType(System.Char))
EmitMSILIL.Emit(OpCodes.Stloc, 11)
EmitMSILIL.MarkSequencePoint(doc15, 54, 1, 54, 100)
EmitMSILIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
EmitMSILIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitMSILIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
Dim typ10 As Type() = {Typ}
EmitMSILIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ10))
Typ = GetType(System.Convert).GetMethod("ToChar", typ10).ReturnType
EmitMSILIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
EmitMSILIL.MarkSequencePoint(doc15, 55, 1, 55, 100)
Dim typ11(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.String)
Typ03 = Typ
EmitMSILIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ11(UBound(typ11) + 1)
typ11(UBound(typ11)) = Typ
EmitMSILIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Trim", typ11))
Typ = Typ03.GetMethod("Trim", typ11).ReturnType
EmitMSILIL.Emit(OpCodes.Stloc, 5)
EmitMSILIL.MarkSequencePoint(doc15, 56, 1, 56, 100)
EmitMSILIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
EmitMSILIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.String)
EmitMSILIL.Emit(OpCodes.Stfld, GetType(Token).GetField("Value"))
EmitMSILIL.MarkSequencePoint(doc15, 57, 1, 57, 100)
EmitMSILIL.Emit(OpCodes.Br, cont534)
EmitMSILIL.MarkLabel(fa534)
EmitMSILIL.Emit(OpCodes.Br, cont534)
EmitMSILIL.MarkLabel(cont534)
EmitMSILIL.MarkSequencePoint(doc15, 59, 1, 59, 100)
EmitMSILIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
Dim typ12(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
EmitMSILIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ12(UBound(typ12) + 1)
typ12(UBound(typ12)) = Typ
EmitMSILIL.Emit(OpCodes.Call, GetType(ParseUtils).GetMethod("ProcessMSYSPath", typ12))
Typ = GetType(ParseUtils).GetMethod("ProcessMSYSPath", typ12).ReturnType
EmitMSILIL.Emit(OpCodes.Stfld, GetType(Token).GetField("Value"))
EmitMSILIL.MarkSequencePoint(doc15, 60, 1, 60, 100)
Dim locbldr499 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(Lexer))
locbldr499.SetLocalSymInfo("lx")
EmitMSILIL.Emit(OpCodes.Newobj, GetType(Lexer).GetConstructor(Type.EmptyTypes))
EmitMSILIL.Emit(OpCodes.Stloc, 12)
EmitMSILIL.MarkSequencePoint(doc15, 61, 1, 61, 100)
Dim typ13(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldstr, "Now Lexing: ")
Typ = GetType(System.String)
ReDim Preserve typ13(UBound(typ13) + 1)
typ13(UBound(typ13)) = Typ
EmitMSILIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("Write", typ13))
Typ = GetType(StreamUtils).GetMethod("Write", typ13).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMSILIL.Emit(OpCodes.Pop)
End If
EmitMSILIL.MarkSequencePoint(doc15, 62, 1, 62, 100)
Dim typ14(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
EmitMSILIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = Typ
EmitMSILIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("Write", typ14))
Typ = GetType(StreamUtils).GetMethod("Write", typ14).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMSILIL.Emit(OpCodes.Pop)
End If
EmitMSILIL.MarkSequencePoint(doc15, 63, 1, 63, 100)
Dim locbldr500 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(StmtSet))
locbldr500.SetLocalSymInfo("pstmts")
Dim typ15(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(Lexer)
Typ03 = Typ
EmitMSILIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
EmitMSILIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ15(UBound(typ15) + 1)
typ15(UBound(typ15)) = Typ
EmitMSILIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Analyze", typ15))
Typ = Typ03.GetMethod("Analyze", typ15).ReturnType
EmitMSILIL.Emit(OpCodes.Stloc, 13)
EmitMSILIL.MarkSequencePoint(doc15, 64, 1, 64, 100)
Dim typ16(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldstr, "...Done.")
Typ = GetType(System.String)
ReDim Preserve typ16(UBound(typ16) + 1)
typ16(UBound(typ16)) = Typ
EmitMSILIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("WriteLine", typ16))
Typ = GetType(StreamUtils).GetMethod("WriteLine", typ16).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMSILIL.Emit(OpCodes.Pop)
End If
EmitMSILIL.MarkSequencePoint(doc15, 65, 1, 65, 100)
Dim locbldr501 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(Parser))
locbldr501.SetLocalSymInfo("ps")
EmitMSILIL.Emit(OpCodes.Newobj, GetType(Parser).GetConstructor(Type.EmptyTypes))
EmitMSILIL.Emit(OpCodes.Stloc, 14)
EmitMSILIL.MarkSequencePoint(doc15, 66, 1, 66, 100)
Dim typ17(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldstr, "Now Parsing: ")
Typ = GetType(System.String)
ReDim Preserve typ17(UBound(typ17) + 1)
typ17(UBound(typ17)) = Typ
EmitMSILIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("Write", typ17))
Typ = GetType(StreamUtils).GetMethod("Write", typ17).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMSILIL.Emit(OpCodes.Pop)
End If
EmitMSILIL.MarkSequencePoint(doc15, 67, 1, 67, 100)
Dim typ18(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
EmitMSILIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ18(UBound(typ18) + 1)
typ18(UBound(typ18)) = Typ
EmitMSILIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("Write", typ18))
Typ = GetType(StreamUtils).GetMethod("Write", typ18).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMSILIL.Emit(OpCodes.Pop)
End If
EmitMSILIL.MarkSequencePoint(doc15, 68, 1, 68, 100)
Dim locbldr502 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(StmtSet))
locbldr502.SetLocalSymInfo("ppstmts")
Dim typ19(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(Parser)
Typ03 = Typ
EmitMSILIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(StmtSet)
ReDim Preserve typ19(UBound(typ19) + 1)
typ19(UBound(typ19)) = Typ
EmitMSILIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Parse", typ19))
Typ = Typ03.GetMethod("Parse", typ19).ReturnType
EmitMSILIL.Emit(OpCodes.Stloc, 15)
EmitMSILIL.MarkSequencePoint(doc15, 69, 1, 69, 100)
Dim typ20(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldstr, "...Done.")
Typ = GetType(System.String)
ReDim Preserve typ20(UBound(typ20) + 1)
typ20(UBound(typ20)) = Typ
EmitMSILIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("WriteLine", typ20))
Typ = GetType(StreamUtils).GetMethod("WriteLine", typ20).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMSILIL.Emit(OpCodes.Pop)
End If
EmitMSILIL.MarkSequencePoint(doc15, 70, 1, 70, 100)
EmitMSILIL.Emit(OpCodes.Ldarg_0)
Dim typ21(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(StmtSet)
ReDim Preserve typ21(UBound(typ21) + 1)
typ21(UBound(typ21)) = Typ
EmitMSILIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
EmitMSILIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ21(UBound(typ21) + 1)
typ21(UBound(typ21)) = Typ
EmitMSILIL.Emit(OpCodes.Callvirt, EmitMSIL)
Typ = EmitMSIL.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMSILIL.Emit(OpCodes.Pop)
End If
EmitMSILIL.MarkSequencePoint(doc15, 72, 1, 72, 100)
EmitMSILIL.Emit(OpCodes.Br, cont533)
EmitMSILIL.MarkLabel(fa533)
EmitMSILIL.MarkSequencePoint(doc15, 74, 1, 74, 100)
Dim locbldr503 As LocalBuilder = EmitMSILIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.StmtReader"))
locbldr503.SetLocalSymInfo("sr")
EmitMSILIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.StmtReader").GetConstructor(Type.EmptyTypes))
EmitMSILIL.Emit(OpCodes.Stloc, 16)
EmitMSILIL.MarkSequencePoint(doc15, 75, 1, 75, 100)
Dim typ22(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldloc, 16)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.StmtReader")
Typ03 = Typ
EmitMSILIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Stmt)
ReDim Preserve typ22(UBound(typ22) + 1)
typ22(UBound(typ22)) = Typ
EmitMSILIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.String)
ReDim Preserve typ22(UBound(typ22) + 1)
typ22(UBound(typ22)) = Typ
EmitMSILIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Read", typ22))
Typ = Typ03.GetMethod("Read", typ22).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMSILIL.Emit(OpCodes.Pop)
End If
EmitMSILIL.MarkSequencePoint(doc15, 77, 1, 77, 100)
EmitMSILIL.Emit(OpCodes.Br, cont533)
EmitMSILIL.MarkLabel(cont533)
EmitMSILIL.MarkSequencePoint(doc15, 79, 1, 79, 100)
EmitMSILIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
Dim fa535 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
Dim tru535 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
Dim cont535 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
EmitMSILIL.Emit(OpCodes.Beq, tru535)
EmitMSILIL.Emit(OpCodes.Br, fa535)
EmitMSILIL.MarkLabel(tru535)
EmitMSILIL.MarkSequencePoint(doc15, 80, 1, 80, 100)
EmitMSILIL.Emit(OpCodes.Br, label1)
EmitMSILIL.MarkSequencePoint(doc15, 81, 1, 81, 100)
EmitMSILIL.Emit(OpCodes.Br, cont535)
EmitMSILIL.MarkLabel(fa535)
EmitMSILIL.MarkSequencePoint(doc15, 82, 1, 82, 100)
EmitMSILIL.Emit(OpCodes.Br, label0)
EmitMSILIL.MarkSequencePoint(doc15, 83, 1, 83, 100)
EmitMSILIL.Emit(OpCodes.Br, cont535)
EmitMSILIL.MarkLabel(cont535)
EmitMSILIL.MarkSequencePoint(doc15, 85, 1, 85, 100)
EmitMSILIL.MarkLabel(label1)
EmitMSILIL.MarkSequencePoint(doc15, 87, 1, 87, 100)
EmitMSILIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("PopSrcFile", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("PopSrcFile", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMSILIL.Emit(OpCodes.Pop)
End If
EmitMSILIL.MarkSequencePoint(doc15, 88, 1, 88, 100)
EmitMSILIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("SrcFiles"))
Typ = GetType(ILEmitter).GetField("SrcFiles").FieldType
EmitMSILIL.Emit(OpCodes.Ldlen)
EmitMSILIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Sub)
EmitMSILIL.Emit(OpCodes.Stloc, 0)
EmitMSILIL.MarkSequencePoint(doc15, 89, 1, 89, 100)
EmitMSILIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa536 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
Dim tru536 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
Dim cont536 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
EmitMSILIL.Emit(OpCodes.Bge, tru536)
EmitMSILIL.Emit(OpCodes.Br, fa536)
EmitMSILIL.MarkLabel(tru536)
EmitMSILIL.MarkSequencePoint(doc15, 90, 1, 90, 100)
EmitMSILIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("SrcFiles"))
Typ = GetType(ILEmitter).GetField("SrcFiles").FieldType
Typ02 = Typ
EmitMSILIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitMSILIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
EmitMSILIL.Emit(OpCodes.Stsfld, GetType(ILEmitter).GetField("CurSrcFile"))
EmitMSILIL.MarkSequencePoint(doc15, 91, 1, 91, 100)
EmitMSILIL.Emit(OpCodes.Br, cont536)
EmitMSILIL.MarkLabel(fa536)
EmitMSILIL.Emit(OpCodes.Br, cont536)
EmitMSILIL.MarkLabel(cont536)
EmitMSILIL.MarkSequencePoint(doc15, 93, 1, 93, 100)
EmitMSILIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("DocWriters"))
Typ = GetType(ILEmitter).GetField("DocWriters").FieldType
EmitMSILIL.Emit(OpCodes.Ldlen)
EmitMSILIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Sub)
EmitMSILIL.Emit(OpCodes.Stloc, 0)
EmitMSILIL.MarkSequencePoint(doc15, 94, 1, 94, 100)
EmitMSILIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa537 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
Dim tru537 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
Dim cont537 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
EmitMSILIL.Emit(OpCodes.Bge, tru537)
EmitMSILIL.Emit(OpCodes.Br, fa537)
EmitMSILIL.MarkLabel(tru537)
EmitMSILIL.MarkSequencePoint(doc15, 95, 1, 95, 100)
EmitMSILIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("PopDocWriter", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("PopDocWriter", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMSILIL.Emit(OpCodes.Pop)
End If
EmitMSILIL.MarkSequencePoint(doc15, 96, 1, 96, 100)
EmitMSILIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("DocWriters"))
Typ = GetType(ILEmitter).GetField("DocWriters").FieldType
EmitMSILIL.Emit(OpCodes.Ldlen)
EmitMSILIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Sub)
EmitMSILIL.Emit(OpCodes.Stloc, 0)
EmitMSILIL.MarkSequencePoint(doc15, 97, 1, 97, 100)
EmitMSILIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa538 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
Dim tru538 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
Dim cont538 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
EmitMSILIL.Emit(OpCodes.Bge, tru538)
EmitMSILIL.Emit(OpCodes.Br, fa538)
EmitMSILIL.MarkLabel(tru538)
EmitMSILIL.MarkSequencePoint(doc15, 98, 1, 98, 100)
EmitMSILIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("DocWriters"))
Typ = GetType(ILEmitter).GetField("DocWriters").FieldType
Typ02 = Typ
EmitMSILIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitMSILIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
EmitMSILIL.Emit(OpCodes.Stsfld, GetType(ILEmitter).GetField("DocWriter"))
EmitMSILIL.MarkSequencePoint(doc15, 99, 1, 99, 100)
EmitMSILIL.Emit(OpCodes.Br, cont538)
EmitMSILIL.MarkLabel(fa538)
EmitMSILIL.Emit(OpCodes.Br, cont538)
EmitMSILIL.MarkLabel(cont538)
EmitMSILIL.MarkSequencePoint(doc15, 100, 1, 100, 100)
EmitMSILIL.Emit(OpCodes.Br, cont537)
EmitMSILIL.MarkLabel(fa537)
EmitMSILIL.Emit(OpCodes.Br, cont537)
EmitMSILIL.MarkLabel(cont537)
EmitMSILIL.MarkSequencePoint(doc15, 102, 1, 102, 100)
EmitMSILIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("SrcFiles"))
Typ = GetType(ILEmitter).GetField("SrcFiles").FieldType
EmitMSILIL.Emit(OpCodes.Ldlen)
EmitMSILIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa539 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
Dim tru539 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
Dim cont539 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
EmitMSILIL.Emit(OpCodes.Beq, tru539)
EmitMSILIL.Emit(OpCodes.Br, fa539)
EmitMSILIL.MarkLabel(tru539)
EmitMSILIL.MarkSequencePoint(doc15, 104, 1, 104, 100)
Dim typ23(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldstr, "Writing Assembly to Disk")
Typ = GetType(System.String)
ReDim Preserve typ23(UBound(typ23) + 1)
typ23(UBound(typ23)) = Typ
EmitMSILIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("Write", typ23))
Typ = GetType(StreamUtils).GetMethod("Write", typ23).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMSILIL.Emit(OpCodes.Pop)
End If
EmitMSILIL.MarkSequencePoint(doc15, 105, 1, 105, 100)
Dim locbldr504 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(AssemblyBuilder))
locbldr504.SetLocalSymInfo("ab")
EmitMSILIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmB"))
Typ = GetType(AsmFactory).GetField("AsmB").FieldType
EmitMSILIL.Emit(OpCodes.Stloc, 17)
EmitMSILIL.MarkSequencePoint(doc15, 106, 1, 106, 100)
EmitMSILIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(AssemblyBuilder)
Typ03 = Typ
EmitMSILIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineVersionInfoResource", Type.EmptyTypes))
Typ = Typ03.GetMethod("DefineVersionInfoResource", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMSILIL.Emit(OpCodes.Pop)
End If
EmitMSILIL.MarkSequencePoint(doc15, 107, 1, 107, 100)
Dim typ25(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(AssemblyBuilder)
Typ03 = Typ
EmitMSILIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmFile"))
Typ = GetType(AsmFactory).GetField("AsmFile").FieldType
ReDim Preserve typ25(UBound(typ25) + 1)
typ25(UBound(typ25)) = Typ
EmitMSILIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Save", typ25))
Typ = Typ03.GetMethod("Save", typ25).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMSILIL.Emit(OpCodes.Pop)
End If
EmitMSILIL.MarkSequencePoint(doc15, 108, 1, 108, 100)
Dim typ26(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldstr, "...Done.")
Typ = GetType(System.String)
ReDim Preserve typ26(UBound(typ26) + 1)
typ26(UBound(typ26)) = Typ
EmitMSILIL.Emit(OpCodes.Call, GetType(StreamUtils).GetMethod("WriteLine", typ26))
Typ = GetType(StreamUtils).GetMethod("WriteLine", typ26).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMSILIL.Emit(OpCodes.Pop)
End If
EmitMSILIL.MarkSequencePoint(doc15, 110, 1, 110, 100)
EmitMSILIL.Emit(OpCodes.Br, cont539)
EmitMSILIL.MarkLabel(fa539)
EmitMSILIL.Emit(OpCodes.Br, cont539)
EmitMSILIL.MarkLabel(cont539)
EmitMSILIL.MarkSequencePoint(doc15, 112, 1, 112, 100)
EmitMSILIL.Emit(OpCodes.Ret)
CodeGenerator.CreateType()
End Sub

Sub Main()

asmName = New AssemblyName("tokenizer.CodeGen")
asmName.Version = New System.Version(11, 2, 8, 6)
asm  = AppDomain.CurrentDomain.DefineDynamicAssembly(asmName, AssemblyBuilderAccess.Save, CStr("E:\Code\dylannet\compiler\"))
mdl = asm.DefineDynamicModule(asmName.Name & ".dll" , asmName.Name & ".dll", True)
resw = mdl.DefineResource("tokenizer.CodeGen.resources" ,  "Description")
doc = mdl.DefineDocument("E:\Code\dylannet\compiler\tokenizer.CodeGen.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc2 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\varitem.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc3 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\fielditem.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc4 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\methoditem.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc5 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\ctoritem.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc6 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\labelitem.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc7 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\ifitem.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc8 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\typearr.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc9 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\symtable.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc10 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\helpers.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc11 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\constldr.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc12 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\opstack.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc13 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\eval.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc14 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\stmtreader.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc15 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\codegenerator.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
addstr("tokenizer.CodeGen")
addasm(asm)
Dim daType As Type = GetType(DebuggableAttribute)
Dim daCtor As ConstructorInfo = daType.GetConstructor(New Type() { GetType(DebuggableAttribute.DebuggingModes) })
Dim daBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(daCtor, New Object() {DebuggableAttribute.DebuggingModes.DisableOptimizations Or _
DebuggableAttribute.DebuggingModes.Default })
asm.SetCustomAttribute(daBuilder)

VarItem()
FieldItem()
MethodItem()
CtorItem()
LabelItem()
IfItem()
TypeArr()
SymTable()
Helpers()
OpStack()
Evaluator()
StmtReader()
CodeGenerator()
Dim vaType As Type = GetType(AssemblyFileVersionAttribute)
Dim vaCtor As ConstructorInfo = vaType.GetConstructor(New Type() { GetType(String) })
Dim vaBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(vaCtor, New Object() {"11.2.8.6"})
asm.SetCustomAttribute(vaBuilder)

Dim paType As Type = GetType(AssemblyProductAttribute)
Dim paCtor As ConstructorInfo = paType.GetConstructor(New Type() { GetType(String) })
Dim paBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(paCtor, New Object() {"tokenizer.CodeGen"})
asm.SetCustomAttribute(paBuilder)

Dim ataType As Type = GetType(AssemblyTitleAttribute)
Dim ataCtor As ConstructorInfo = ataType.GetConstructor(New Type() { GetType(String) })
Dim ataBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(ataCtor, New Object() {"tokenizer.CodeGen"})
asm.SetCustomAttribute(ataBuilder)

Dim deaType As Type = GetType(AssemblyDescriptionAttribute)
Dim deaCtor As ConstructorInfo = deaType.GetConstructor(New Type() { GetType(String) })
Dim deaBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(deaCtor, New Object() {"tokenizer.CodeGen"})
asm.SetCustomAttribute(deaBuilder)


asm.DefineVersionInfoResource()
asm.Save(asmName.Name & ".dll")
End Sub


End Module