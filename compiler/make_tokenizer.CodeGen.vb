Imports dylan.NET.Tokenizer.Parser
Imports dylan.NET.Tokenizer.AST.Tokens.Chars
Imports dylan.NET.Tokenizer.AST.Tokens.Attributes
Imports dylan.NET.Tokenizer.AST.Tokens.Literals
Imports dylan.NET.Tokenizer.AST.Tokens.TypeToks
Imports dylan.NET.Tokenizer.AST.Tokens.Ops
Imports dylan.NET.Tokenizer.AST.Stmts
Imports dylan.NET.Tokenizer.AST.Exprs
Imports dylan.NET.Tokenizer.AST.Tokens
Imports dylan.NET.Tokenizer.AST
Imports dylan.NET.Tokenizer.Lexer
Imports dylan.NET.Reflection
Imports dylan.NET.Utils
Imports dylan.NET
Imports System.Linq
Imports System.Collections.Generic
Imports System.Collections
Imports System.IO
Imports Microsoft.VisualBasic
Imports System.Xml
Imports System.Xml.Linq
Imports System.Data

Imports System
Imports System.Diagnostics
Imports System.Diagnostics.SymbolStore
Imports System.Reflection
Imports System.Resources
Imports System.Reflection.Emit
Module Module1

Public asmName As AssemblyName
Public asm As AssemblyBuilder
Public Typ As Type
Public Typ02 As Type
Public Typ03 As Type
Public Typ04 As Type
Public impstr(-1) As String
Public impasm(-1) As Assembly
Public interfacebool As Boolean
Public mdl As ModuleBuilder
Public resw As IResourceWriter
Public resobj As Object

Dim doc As ISymbolDocumentWriter

Sub addstr(ByVal str As String)
ReDim Preserve impstr(UBound(impstr) + 1)
impstr(UBound(impstr)) = str
End Sub

Sub addasm(ByVal asm As Assembly)
ReDim Preserve impasm(UBound(impasm) + 1)
impasm(UBound(impasm)) = asm
End Sub

Function MakeGetType(ByVal TypeName As String) As Type
Dim attachbrackets As Boolean = False
If TypeName Like "*[[]*]" Then
Dim split As String() = TypeName.Split(New [Char] () {"[","]"})
TypeName = split(0)
attachbrackets = True
End If
Dim ind As Integer = -1
Dim i As Integer = -1
Dim len As Integer = impstr.Length - 1
Do Until i = len
i = i + 1
If TypeName Like impstr(i) & "*" Then
ind = i
End If
Loop
If ind <> -1 Then
Dim assem As Assembly = impasm(ind)
If attachbrackets = True Then
TypeName = TypeName & "[]"
End If
MakeGetType = assem.GetType(TypeName)
Else
If attachbrackets = True Then
TypeName = TypeName & "[]"
End If
MakeGetType = Type.GetType(TypeName)
End If
Return MakeGetType
End Function

Dim doc2 As ISymbolDocumentWriter

Sub Helpers()
Dim Helpers As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "Helpers", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(Attributes.Attribute).MakeArrayType()
Dim ProcessClassAttrs As MethodBuilder = Helpers.DefineMethod("ProcessClassAttrs", MethodAttributes.Public Or MethodAttributes.Static, GetType(TypeAttributes), typ0)
Dim ProcessClassAttrsIL As ILGenerator = ProcessClassAttrs.GetILGenerator()
Dim ProcessClassAttrsparam01 As ParameterBuilder = ProcessClassAttrs.DefineParameter(1, ParameterAttributes.None, "attrs")
ProcessClassAttrsIL.MarkSequencePoint(doc2, 4, 1, 4, 100)
Dim locbldr0 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(TypeAttributes))
locbldr0.SetLocalSymInfo("ta")
ProcessClassAttrsIL.MarkSequencePoint(doc2, 5, 1, 5, 100)
Dim locbldr1 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(TypeAttributes))
locbldr1.SetLocalSymInfo("temp")
ProcessClassAttrsIL.MarkSequencePoint(doc2, 7, 1, 7, 100)
Dim label0 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.MarkSequencePoint(doc2, 8, 1, 8, 100)
Dim label1 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.MarkSequencePoint(doc2, 9, 1, 9, 100)
Dim label2 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.MarkSequencePoint(doc2, 11, 1, 11, 100)
Dim locbldr2 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(System.Int32))
locbldr2.SetLocalSymInfo("len")
ProcessClassAttrsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Attributes.Attribute).MakeArrayType()
ProcessClassAttrsIL.Emit(OpCodes.Ldlen)
ProcessClassAttrsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Sub)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 2)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 12, 1, 12, 100)
Dim locbldr3 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(System.Int32))
locbldr3.SetLocalSymInfo("i")
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 3)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 13, 1, 13, 100)
Dim locbldr4 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(System.Boolean))
locbldr4.SetLocalSymInfo("b")
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 14, 1, 14, 100)
Dim locbldr5 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(System.Type))
locbldr5.SetLocalSymInfo("typ")
ProcessClassAttrsIL.MarkSequencePoint(doc2, 15, 1, 15, 100)
Dim locbldr6 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(Attributes.Attribute))
locbldr6.SetLocalSymInfo("curattr")
ProcessClassAttrsIL.Emit(OpCodes.Ldnull)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 6)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 16, 1, 16, 100)
Dim locbldr7 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(System.Boolean))
locbldr7.SetLocalSymInfo("fir")
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 18, 1, 18, 100)
ProcessClassAttrsIL.MarkLabel(label0)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 20, 1, 20, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Add)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 3)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 22, 1, 22, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Attributes.Attribute).MakeArrayType()
Typ02 = Typ
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ProcessClassAttrsIL.Emit(OpCodes.Ldelem, GetType(Attributes.Attribute).MakeArrayType().GetElementType())
Typ = GetType(Attributes.Attribute).MakeArrayType().GetElementType()
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 6)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 24, 1, 24, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.PublicAttr))
Dim typ1 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessClassAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ1))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ1).ReturnType
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 25, 1, 25, 100)
Dim typ2(-1) As Type
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessClassAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = Typ
ProcessClassAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ2))
Typ = Typ03.GetMethod("IsInstanceOfType", typ2).ReturnType
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 27, 1, 27, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa0 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru0 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont0 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru0)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa0)
ProcessClassAttrsIL.MarkLabel(tru0)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 28, 1, 28, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa1 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru1 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont1 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru1)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa1)
ProcessClassAttrsIL.MarkLabel(tru1)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 29, 1, 29, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 30, 1, 30, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont1)
ProcessClassAttrsIL.MarkLabel(fa1)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 31, 1, 31, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 32, 1, 32, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont1)
ProcessClassAttrsIL.MarkLabel(cont1)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 33, 1, 33, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa2 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru2 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont2 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru2)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa2)
ProcessClassAttrsIL.MarkLabel(tru2)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 34, 1, 34, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.And)
ProcessClassAttrsIL.Emit(OpCodes.Not)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 35, 1, 35, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 36, 1, 36, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont2)
ProcessClassAttrsIL.MarkLabel(fa2)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 37, 1, 37, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Or)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 38, 1, 38, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont2)
ProcessClassAttrsIL.MarkLabel(cont2)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 39, 1, 39, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, label2)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 40, 1, 40, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont0)
ProcessClassAttrsIL.MarkLabel(fa0)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont0)
ProcessClassAttrsIL.MarkLabel(cont0)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 42, 1, 42, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.AutoLayoutAttr))
Dim typ3 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessClassAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ3))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ3).ReturnType
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 43, 1, 43, 100)
Dim typ4(-1) As Type
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessClassAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
ProcessClassAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ4))
Typ = Typ03.GetMethod("IsInstanceOfType", typ4).ReturnType
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 45, 1, 45, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa3 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru3 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont3 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru3)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa3)
ProcessClassAttrsIL.MarkLabel(tru3)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 46, 1, 46, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 47, 1, 47, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa4 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru4 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont4 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru4)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa4)
ProcessClassAttrsIL.MarkLabel(tru4)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 48, 1, 48, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.And)
ProcessClassAttrsIL.Emit(OpCodes.Not)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 49, 1, 49, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 50, 1, 50, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont4)
ProcessClassAttrsIL.MarkLabel(fa4)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 51, 1, 51, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Or)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 52, 1, 52, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont4)
ProcessClassAttrsIL.MarkLabel(cont4)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 53, 1, 53, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, label2)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 54, 1, 54, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont3)
ProcessClassAttrsIL.MarkLabel(fa3)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont3)
ProcessClassAttrsIL.MarkLabel(cont3)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 56, 1, 56, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.AnsiClassAttr))
Dim typ5 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessClassAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ5))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ5).ReturnType
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 57, 1, 57, 100)
Dim typ6(-1) As Type
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessClassAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = Typ
ProcessClassAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ6))
Typ = Typ03.GetMethod("IsInstanceOfType", typ6).ReturnType
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 59, 1, 59, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa5 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru5 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont5 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru5)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa5)
ProcessClassAttrsIL.MarkLabel(tru5)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 60, 1, 60, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 61, 1, 61, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa6 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru6 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont6 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru6)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa6)
ProcessClassAttrsIL.MarkLabel(tru6)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 62, 1, 62, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.And)
ProcessClassAttrsIL.Emit(OpCodes.Not)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 63, 1, 63, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 64, 1, 64, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont6)
ProcessClassAttrsIL.MarkLabel(fa6)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 65, 1, 65, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Or)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 66, 1, 66, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont6)
ProcessClassAttrsIL.MarkLabel(cont6)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 67, 1, 67, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, label2)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 68, 1, 68, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont5)
ProcessClassAttrsIL.MarkLabel(fa5)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont5)
ProcessClassAttrsIL.MarkLabel(cont5)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 70, 1, 70, 100)
ProcessClassAttrsIL.MarkLabel(label2)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 72, 1, 72, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa7 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru7 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont7 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru7)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa7)
ProcessClassAttrsIL.MarkLabel(tru7)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 73, 1, 73, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, label1)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 74, 1, 74, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont7)
ProcessClassAttrsIL.MarkLabel(fa7)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 75, 1, 75, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, label0)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 76, 1, 76, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont7)
ProcessClassAttrsIL.MarkLabel(cont7)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 79, 1, 79, 100)
ProcessClassAttrsIL.MarkLabel(label1)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 82, 1, 82, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.MarkSequencePoint(doc2, 83, 1, 83, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ret)
Dim typ7(-1) As Type
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = GetType(Attributes.Attribute).MakeArrayType()
Dim ProcessMethodAttrs As MethodBuilder = Helpers.DefineMethod("ProcessMethodAttrs", MethodAttributes.Public Or MethodAttributes.Static, GetType(MethodAttributes), typ7)
Dim ProcessMethodAttrsIL As ILGenerator = ProcessMethodAttrs.GetILGenerator()
Dim ProcessMethodAttrsparam01 As ParameterBuilder = ProcessMethodAttrs.DefineParameter(1, ParameterAttributes.None, "attrs")
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 86, 1, 86, 100)
Dim locbldr8 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(MethodAttributes))
locbldr8.SetLocalSymInfo("ta")
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 87, 1, 87, 100)
Dim locbldr9 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(MethodAttributes))
locbldr9.SetLocalSymInfo("temp")
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 89, 1, 89, 100)
Dim label3 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 90, 1, 90, 100)
Dim label4 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 91, 1, 91, 100)
Dim label5 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 93, 1, 93, 100)
Dim locbldr10 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(System.Int32))
locbldr10.SetLocalSymInfo("len")
ProcessMethodAttrsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Attributes.Attribute).MakeArrayType()
ProcessMethodAttrsIL.Emit(OpCodes.Ldlen)
ProcessMethodAttrsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Sub)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 2)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 94, 1, 94, 100)
Dim locbldr11 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(System.Int32))
locbldr11.SetLocalSymInfo("i")
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 3)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 95, 1, 95, 100)
Dim locbldr12 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(System.Boolean))
locbldr12.SetLocalSymInfo("b")
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 96, 1, 96, 100)
Dim locbldr13 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(System.Type))
locbldr13.SetLocalSymInfo("typ")
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 97, 1, 97, 100)
Dim locbldr14 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(Attributes.Attribute))
locbldr14.SetLocalSymInfo("curattr")
ProcessMethodAttrsIL.Emit(OpCodes.Ldnull)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 6)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 98, 1, 98, 100)
Dim locbldr15 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(System.Boolean))
locbldr15.SetLocalSymInfo("fir")
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 100, 1, 100, 100)
ProcessMethodAttrsIL.MarkLabel(label3)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 102, 1, 102, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Add)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 3)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 104, 1, 104, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Attributes.Attribute).MakeArrayType()
Typ02 = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ProcessMethodAttrsIL.Emit(OpCodes.Ldelem, GetType(Attributes.Attribute).MakeArrayType().GetElementType())
Typ = GetType(Attributes.Attribute).MakeArrayType().GetElementType()
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 6)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 106, 1, 106, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.PublicAttr))
Dim typ8 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessMethodAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ8))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ8).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 107, 1, 107, 100)
Dim typ9(-1) As Type
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessMethodAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ9))
Typ = Typ03.GetMethod("IsInstanceOfType", typ9).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 109, 1, 109, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa8 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru8 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont8 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru8)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa8)
ProcessMethodAttrsIL.MarkLabel(tru8)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 110, 1, 110, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, CInt(6))
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 111, 1, 111, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa9 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru9 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont9 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru9)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa9)
ProcessMethodAttrsIL.MarkLabel(tru9)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 112, 1, 112, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.And)
ProcessMethodAttrsIL.Emit(OpCodes.Not)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 113, 1, 113, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 114, 1, 114, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont9)
ProcessMethodAttrsIL.MarkLabel(fa9)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 115, 1, 115, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Or)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 116, 1, 116, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont9)
ProcessMethodAttrsIL.MarkLabel(cont9)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 117, 1, 117, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, label5)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 118, 1, 118, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont8)
ProcessMethodAttrsIL.MarkLabel(fa8)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont8)
ProcessMethodAttrsIL.MarkLabel(cont8)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 120, 1, 120, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.StaticAttr))
Dim typ10 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessMethodAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ10))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ10).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 121, 1, 121, 100)
Dim typ11(-1) As Type
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessMethodAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ11(UBound(typ11) + 1)
typ11(UBound(typ11)) = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ11))
Typ = Typ03.GetMethod("IsInstanceOfType", typ11).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 123, 1, 123, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa10 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru10 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont10 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru10)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa10)
ProcessMethodAttrsIL.MarkLabel(tru10)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 124, 1, 124, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, CInt(16))
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 125, 1, 125, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa11 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru11 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont11 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru11)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa11)
ProcessMethodAttrsIL.MarkLabel(tru11)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 126, 1, 126, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.And)
ProcessMethodAttrsIL.Emit(OpCodes.Not)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 127, 1, 127, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 128, 1, 128, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont11)
ProcessMethodAttrsIL.MarkLabel(fa11)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 129, 1, 129, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Or)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 130, 1, 130, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont11)
ProcessMethodAttrsIL.MarkLabel(cont11)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 131, 1, 131, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, label5)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 132, 1, 132, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont10)
ProcessMethodAttrsIL.MarkLabel(fa10)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont10)
ProcessMethodAttrsIL.MarkLabel(cont10)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 134, 1, 134, 100)
ProcessMethodAttrsIL.MarkLabel(label5)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 136, 1, 136, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa12 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru12 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont12 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru12)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa12)
ProcessMethodAttrsIL.MarkLabel(tru12)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 137, 1, 137, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, label4)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 138, 1, 138, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont12)
ProcessMethodAttrsIL.MarkLabel(fa12)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 139, 1, 139, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, label3)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 140, 1, 140, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont12)
ProcessMethodAttrsIL.MarkLabel(cont12)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 143, 1, 143, 100)
ProcessMethodAttrsIL.MarkLabel(label4)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 146, 1, 146, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.MarkSequencePoint(doc2, 147, 1, 147, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ret)
Dim typ12(-1) As Type
ReDim Preserve typ12(UBound(typ12) + 1)
typ12(UBound(typ12)) = GetType(Attributes.Attribute).MakeArrayType()
Dim ProcessFieldAttrs As MethodBuilder = Helpers.DefineMethod("ProcessFieldAttrs", MethodAttributes.Public Or MethodAttributes.Static, GetType(FieldAttributes), typ12)
Dim ProcessFieldAttrsIL As ILGenerator = ProcessFieldAttrs.GetILGenerator()
Dim ProcessFieldAttrsparam01 As ParameterBuilder = ProcessFieldAttrs.DefineParameter(1, ParameterAttributes.None, "attrs")
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 151, 1, 151, 100)
Dim locbldr16 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(FieldAttributes))
locbldr16.SetLocalSymInfo("ta")
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 152, 1, 152, 100)
Dim locbldr17 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(FieldAttributes))
locbldr17.SetLocalSymInfo("temp")
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 154, 1, 154, 100)
Dim label6 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 155, 1, 155, 100)
Dim label7 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 156, 1, 156, 100)
Dim label8 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 158, 1, 158, 100)
Dim locbldr18 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(System.Int32))
locbldr18.SetLocalSymInfo("len")
ProcessFieldAttrsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Attributes.Attribute).MakeArrayType()
ProcessFieldAttrsIL.Emit(OpCodes.Ldlen)
ProcessFieldAttrsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Sub)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 2)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 159, 1, 159, 100)
Dim locbldr19 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(System.Int32))
locbldr19.SetLocalSymInfo("i")
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 3)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 160, 1, 160, 100)
Dim locbldr20 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(System.Boolean))
locbldr20.SetLocalSymInfo("b")
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 161, 1, 161, 100)
Dim locbldr21 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(System.Type))
locbldr21.SetLocalSymInfo("typ")
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 162, 1, 162, 100)
Dim locbldr22 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(Attributes.Attribute))
locbldr22.SetLocalSymInfo("curattr")
ProcessFieldAttrsIL.Emit(OpCodes.Ldnull)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 6)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 163, 1, 163, 100)
Dim locbldr23 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(System.Boolean))
locbldr23.SetLocalSymInfo("fir")
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 165, 1, 165, 100)
ProcessFieldAttrsIL.MarkLabel(label6)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 167, 1, 167, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Add)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 3)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 169, 1, 169, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Attributes.Attribute).MakeArrayType()
Typ02 = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ProcessFieldAttrsIL.Emit(OpCodes.Ldelem, GetType(Attributes.Attribute).MakeArrayType().GetElementType())
Typ = GetType(Attributes.Attribute).MakeArrayType().GetElementType()
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 6)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 171, 1, 171, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.PublicAttr))
Dim typ13 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessFieldAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ13))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ13).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 172, 1, 172, 100)
Dim typ14(-1) As Type
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessFieldAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ14))
Typ = Typ03.GetMethod("IsInstanceOfType", typ14).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 174, 1, 174, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa13 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru13 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont13 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru13)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa13)
ProcessFieldAttrsIL.MarkLabel(tru13)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 175, 1, 175, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(6))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 176, 1, 176, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa14 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru14 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont14 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru14)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa14)
ProcessFieldAttrsIL.MarkLabel(tru14)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 177, 1, 177, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.And)
ProcessFieldAttrsIL.Emit(OpCodes.Not)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 178, 1, 178, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 179, 1, 179, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont14)
ProcessFieldAttrsIL.MarkLabel(fa14)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 180, 1, 180, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Or)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 181, 1, 181, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont14)
ProcessFieldAttrsIL.MarkLabel(cont14)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 182, 1, 182, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, label8)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 183, 1, 183, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont13)
ProcessFieldAttrsIL.MarkLabel(fa13)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont13)
ProcessFieldAttrsIL.MarkLabel(cont13)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 185, 1, 185, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.StaticAttr))
Dim typ15 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessFieldAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ15))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ15).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 186, 1, 186, 100)
Dim typ16(-1) As Type
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessFieldAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ16(UBound(typ16) + 1)
typ16(UBound(typ16)) = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ16))
Typ = Typ03.GetMethod("IsInstanceOfType", typ16).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 188, 1, 188, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa15 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru15 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont15 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru15)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa15)
ProcessFieldAttrsIL.MarkLabel(tru15)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 189, 1, 189, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(16))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 190, 1, 190, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa16 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru16 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont16 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru16)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa16)
ProcessFieldAttrsIL.MarkLabel(tru16)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 191, 1, 191, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.And)
ProcessFieldAttrsIL.Emit(OpCodes.Not)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 192, 1, 192, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 193, 1, 193, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont16)
ProcessFieldAttrsIL.MarkLabel(fa16)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 194, 1, 194, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Or)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 195, 1, 195, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont16)
ProcessFieldAttrsIL.MarkLabel(cont16)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 196, 1, 196, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, label8)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 197, 1, 197, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont15)
ProcessFieldAttrsIL.MarkLabel(fa15)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont15)
ProcessFieldAttrsIL.MarkLabel(cont15)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 199, 1, 199, 100)
ProcessFieldAttrsIL.MarkLabel(label8)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 201, 1, 201, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa17 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru17 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont17 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru17)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa17)
ProcessFieldAttrsIL.MarkLabel(tru17)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 202, 1, 202, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, label7)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 203, 1, 203, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont17)
ProcessFieldAttrsIL.MarkLabel(fa17)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 204, 1, 204, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, label6)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 205, 1, 205, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont17)
ProcessFieldAttrsIL.MarkLabel(cont17)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 208, 1, 208, 100)
ProcessFieldAttrsIL.MarkLabel(label7)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 211, 1, 211, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.MarkSequencePoint(doc2, 212, 1, 212, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ret)
Dim typ17(-1) As Type
ReDim Preserve typ17(UBound(typ17) + 1)
typ17(UBound(typ17)) = GetType(Expr).MakeArrayType()
Dim ProcessParams As MethodBuilder = Helpers.DefineMethod("ProcessParams", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ17)
Dim ProcessParamsIL As ILGenerator = ProcessParams.GetILGenerator()
Dim ProcessParamsparam01 As ParameterBuilder = ProcessParams.DefineParameter(1, ParameterAttributes.None, "ps")
ProcessParamsIL.MarkSequencePoint(doc2, 217, 1, 217, 100)
Dim locbldr24 As LocalBuilder = ProcessParamsIL.DeclareLocal(GetType(System.Int32))
locbldr24.SetLocalSymInfo("len")
ProcessParamsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Expr).MakeArrayType()
ProcessParamsIL.Emit(OpCodes.Ldlen)
ProcessParamsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessParamsIL.Emit(OpCodes.Sub)
ProcessParamsIL.Emit(OpCodes.Stloc, 0)
ProcessParamsIL.MarkSequencePoint(doc2, 218, 1, 218, 100)
Dim locbldr25 As LocalBuilder = ProcessParamsIL.DeclareLocal(GetType(System.Int32))
locbldr25.SetLocalSymInfo("i")
ProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ProcessParamsIL.Emit(OpCodes.Stloc, 1)
ProcessParamsIL.MarkSequencePoint(doc2, 219, 1, 219, 100)
Dim locbldr26 As LocalBuilder = ProcessParamsIL.DeclareLocal(GetType(VarExpr))
locbldr26.SetLocalSymInfo("curp")
ProcessParamsIL.Emit(OpCodes.Ldnull)
ProcessParamsIL.Emit(OpCodes.Stloc, 2)
ProcessParamsIL.MarkSequencePoint(doc2, 220, 1, 220, 100)
Dim locbldr27 As LocalBuilder = ProcessParamsIL.DeclareLocal(GetType(TypeTok))
locbldr27.SetLocalSymInfo("typtok")
ProcessParamsIL.MarkSequencePoint(doc2, 221, 1, 221, 100)
Dim locbldr28 As LocalBuilder = ProcessParamsIL.DeclareLocal(GetType(Ident))
locbldr28.SetLocalSymInfo("nam")
ProcessParamsIL.MarkSequencePoint(doc2, 222, 1, 222, 100)
Dim locbldr29 As LocalBuilder = ProcessParamsIL.DeclareLocal(GetType(System.Type))
locbldr29.SetLocalSymInfo("typ")
ProcessParamsIL.Emit(OpCodes.Ldnull)
ProcessParamsIL.Emit(OpCodes.Stloc, 5)
ProcessParamsIL.MarkSequencePoint(doc2, 223, 1, 223, 100)
Dim locbldr30 As LocalBuilder = ProcessParamsIL.DeclareLocal(GetType(System.Type))
locbldr30.SetLocalSymInfo("reft")
ProcessParamsIL.MarkSequencePoint(doc2, 226, 1, 226, 100)
Dim label9 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
ProcessParamsIL.MarkSequencePoint(doc2, 227, 1, 227, 100)
Dim label10 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
ProcessParamsIL.MarkSequencePoint(doc2, 229, 1, 229, 100)
ProcessParamsIL.MarkLabel(label9)
ProcessParamsIL.MarkSequencePoint(doc2, 231, 1, 231, 100)
ProcessParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessParamsIL.Emit(OpCodes.Add)
ProcessParamsIL.Emit(OpCodes.Stloc, 1)
ProcessParamsIL.MarkSequencePoint(doc2, 233, 1, 233, 100)
ProcessParamsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Expr).MakeArrayType()
Typ02 = Typ
ProcessParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ProcessParamsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ProcessParamsIL.Emit(OpCodes.Ldelem, GetType(Expr).MakeArrayType().GetElementType())
Typ = GetType(Expr).MakeArrayType().GetElementType()
ProcessParamsIL.Emit(OpCodes.Stloc, 2)
ProcessParamsIL.MarkSequencePoint(doc2, 234, 1, 234, 100)
ProcessParamsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarExpr)
ProcessParamsIL.Emit(OpCodes.Ldfld, GetType(VarExpr).GetField("VarTyp"))
Typ = GetType(VarExpr).GetField("VarTyp").FieldType
ProcessParamsIL.Emit(OpCodes.Stloc, 3)
ProcessParamsIL.MarkSequencePoint(doc2, 235, 1, 235, 100)
ProcessParamsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(TypeTok)
ProcessParamsIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("RefTyp"))
Typ = GetType(TypeTok).GetField("RefTyp").FieldType
ProcessParamsIL.Emit(OpCodes.Stloc, 6)
ProcessParamsIL.MarkSequencePoint(doc2, 237, 1, 237, 100)
ProcessParamsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Type)
ProcessParamsIL.Emit(OpCodes.Ldnull)
Dim fa18 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
Dim tru18 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
Dim cont18 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
ProcessParamsIL.Emit(OpCodes.Beq, tru18)
ProcessParamsIL.Emit(OpCodes.Br, fa18)
ProcessParamsIL.MarkLabel(tru18)
ProcessParamsIL.MarkSequencePoint(doc2, 238, 1, 238, 100)
ProcessParamsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(TypeTok)
ProcessParamsIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("IsArray"))
Typ = GetType(TypeTok).GetField("IsArray").FieldType
ProcessParamsIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeArr"))
ProcessParamsIL.MarkSequencePoint(doc2, 239, 1, 239, 100)
ProcessParamsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(TypeTok)
ProcessParamsIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("IsByRef"))
Typ = GetType(TypeTok).GetField("IsByRef").FieldType
ProcessParamsIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeRef"))
ProcessParamsIL.MarkSequencePoint(doc2, 240, 1, 240, 100)
Dim typ18(-1) As Type
ProcessParamsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(TypeTok)
ProcessParamsIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("Value"))
Typ = GetType(TypeTok).GetField("Value").FieldType
ReDim Preserve typ18(UBound(typ18) + 1)
typ18(UBound(typ18)) = Typ
ProcessParamsIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadClass", typ18))
Typ = GetType(Loader).GetMethod("LoadClass", typ18).ReturnType
ProcessParamsIL.Emit(OpCodes.Stloc, 5)
ProcessParamsIL.MarkSequencePoint(doc2, 241, 1, 241, 100)
ProcessParamsIL.Emit(OpCodes.Br, cont18)
ProcessParamsIL.MarkLabel(fa18)
ProcessParamsIL.MarkSequencePoint(doc2, 242, 1, 242, 100)
ProcessParamsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(TypeTok)
ProcessParamsIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("IsArray"))
Typ = GetType(TypeTok).GetField("IsArray").FieldType
ProcessParamsIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeArr"))
ProcessParamsIL.MarkSequencePoint(doc2, 243, 1, 243, 100)
ProcessParamsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(TypeTok)
ProcessParamsIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("IsByRef"))
Typ = GetType(TypeTok).GetField("IsByRef").FieldType
ProcessParamsIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeRef"))
ProcessParamsIL.MarkSequencePoint(doc2, 244, 1, 244, 100)
Dim typ19(-1) As Type
ProcessParamsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Type)
ReDim Preserve typ19(UBound(typ19) + 1)
typ19(UBound(typ19)) = Typ
ProcessParamsIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("ProcessType", typ19))
Typ = GetType(Loader).GetMethod("ProcessType", typ19).ReturnType
ProcessParamsIL.Emit(OpCodes.Stloc, 5)
ProcessParamsIL.MarkSequencePoint(doc2, 245, 1, 245, 100)
ProcessParamsIL.Emit(OpCodes.Br, cont18)
ProcessParamsIL.MarkLabel(cont18)
ProcessParamsIL.MarkSequencePoint(doc2, 247, 1, 247, 100)
ProcessParamsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
ProcessParamsIL.Emit(OpCodes.Ldnull)
Dim fa19 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
Dim tru19 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
Dim cont19 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
ProcessParamsIL.Emit(OpCodes.Beq, fa19)
ProcessParamsIL.Emit(OpCodes.Br, tru19)
ProcessParamsIL.MarkLabel(tru19)
ProcessParamsIL.MarkSequencePoint(doc2, 248, 1, 248, 100)
Dim typ20(-1) As Type
ProcessParamsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
ReDim Preserve typ20(UBound(typ20) + 1)
typ20(UBound(typ20)) = Typ
ProcessParamsIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("AddTyp", typ20))
Typ = GetType(AsmFactory).GetMethod("AddTyp", typ20).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ProcessParamsIL.Emit(OpCodes.Pop)
End If
ProcessParamsIL.MarkSequencePoint(doc2, 249, 1, 249, 100)
ProcessParamsIL.Emit(OpCodes.Br, cont19)
ProcessParamsIL.MarkLabel(fa19)
ProcessParamsIL.Emit(OpCodes.Br, cont19)
ProcessParamsIL.MarkLabel(cont19)
ProcessParamsIL.MarkSequencePoint(doc2, 251, 1, 251, 100)
ProcessParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ProcessParamsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
Dim fa20 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
Dim tru20 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
Dim cont20 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
ProcessParamsIL.Emit(OpCodes.Beq, tru20)
ProcessParamsIL.Emit(OpCodes.Br, fa20)
ProcessParamsIL.MarkLabel(tru20)
ProcessParamsIL.MarkSequencePoint(doc2, 252, 1, 252, 100)
ProcessParamsIL.Emit(OpCodes.Br, label10)
ProcessParamsIL.MarkSequencePoint(doc2, 253, 1, 253, 100)
ProcessParamsIL.Emit(OpCodes.Br, cont20)
ProcessParamsIL.MarkLabel(fa20)
ProcessParamsIL.MarkSequencePoint(doc2, 254, 1, 254, 100)
ProcessParamsIL.Emit(OpCodes.Br, label9)
ProcessParamsIL.MarkSequencePoint(doc2, 255, 1, 255, 100)
ProcessParamsIL.Emit(OpCodes.Br, cont20)
ProcessParamsIL.MarkLabel(cont20)
ProcessParamsIL.MarkSequencePoint(doc2, 257, 1, 257, 100)
ProcessParamsIL.MarkLabel(label10)
ProcessParamsIL.MarkSequencePoint(doc2, 259, 1, 259, 100)
ProcessParamsIL.Emit(OpCodes.Ret)
Dim typ21(-1) As Type
ReDim Preserve typ21(UBound(typ21) + 1)
typ21(UBound(typ21)) = GetType(Expr).MakeArrayType()
Dim PostProcessParams As MethodBuilder = Helpers.DefineMethod("PostProcessParams", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ21)
Dim PostProcessParamsIL As ILGenerator = PostProcessParams.GetILGenerator()
Dim PostProcessParamsparam01 As ParameterBuilder = PostProcessParams.DefineParameter(1, ParameterAttributes.None, "ps")
PostProcessParamsIL.MarkSequencePoint(doc2, 263, 1, 263, 100)
Dim locbldr31 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(System.Int32))
locbldr31.SetLocalSymInfo("len")
PostProcessParamsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Expr).MakeArrayType()
PostProcessParamsIL.Emit(OpCodes.Ldlen)
PostProcessParamsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Sub)
PostProcessParamsIL.Emit(OpCodes.Stloc, 0)
PostProcessParamsIL.MarkSequencePoint(doc2, 264, 1, 264, 100)
Dim locbldr32 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(System.Int32))
locbldr32.SetLocalSymInfo("i")
PostProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Stloc, 1)
PostProcessParamsIL.MarkSequencePoint(doc2, 265, 1, 265, 100)
Dim locbldr33 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(VarExpr))
locbldr33.SetLocalSymInfo("curp")
PostProcessParamsIL.Emit(OpCodes.Ldnull)
PostProcessParamsIL.Emit(OpCodes.Stloc, 2)
PostProcessParamsIL.MarkSequencePoint(doc2, 266, 1, 266, 100)
Dim locbldr34 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(Ident))
locbldr34.SetLocalSymInfo("nam")
PostProcessParamsIL.MarkSequencePoint(doc2, 268, 1, 268, 100)
Dim label11 As System.Reflection.Emit.Label = PostProcessParamsIL.DefineLabel()
PostProcessParamsIL.MarkSequencePoint(doc2, 269, 1, 269, 100)
Dim label12 As System.Reflection.Emit.Label = PostProcessParamsIL.DefineLabel()
PostProcessParamsIL.MarkSequencePoint(doc2, 271, 1, 271, 100)
PostProcessParamsIL.MarkLabel(label11)
PostProcessParamsIL.MarkSequencePoint(doc2, 273, 1, 273, 100)
PostProcessParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Add)
PostProcessParamsIL.Emit(OpCodes.Stloc, 1)
PostProcessParamsIL.MarkSequencePoint(doc2, 275, 1, 275, 100)
PostProcessParamsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Expr).MakeArrayType()
Typ02 = Typ
PostProcessParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
PostProcessParamsIL.Emit(OpCodes.Ldelem, GetType(Expr).MakeArrayType().GetElementType())
Typ = GetType(Expr).MakeArrayType().GetElementType()
PostProcessParamsIL.Emit(OpCodes.Stloc, 2)
PostProcessParamsIL.MarkSequencePoint(doc2, 277, 1, 277, 100)
Dim locbldr35 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(MethodBuilder))
locbldr35.SetLocalSymInfo("mb")
PostProcessParamsIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("Met"))
Typ = GetType(ILEmitter).GetField("Met").FieldType
PostProcessParamsIL.Emit(OpCodes.Stloc, 4)
PostProcessParamsIL.MarkSequencePoint(doc2, 278, 1, 278, 100)
Dim locbldr36 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(ParameterAttributes))
locbldr36.SetLocalSymInfo("non")
PostProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Stloc, 5)
PostProcessParamsIL.MarkSequencePoint(doc2, 279, 1, 279, 100)
PostProcessParamsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarExpr)
PostProcessParamsIL.Emit(OpCodes.Ldfld, GetType(VarExpr).GetField("VarName"))
Typ = GetType(VarExpr).GetField("VarName").FieldType
PostProcessParamsIL.Emit(OpCodes.Stloc, 3)
PostProcessParamsIL.MarkSequencePoint(doc2, 280, 1, 280, 100)
Dim locbldr37 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(System.Int32))
locbldr37.SetLocalSymInfo("ind")
PostProcessParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Add)
PostProcessParamsIL.Emit(OpCodes.Stloc, 6)
PostProcessParamsIL.MarkSequencePoint(doc2, 281, 1, 281, 100)
Dim typ22(-1) As Type
PostProcessParamsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodBuilder)
Typ03 = Typ
PostProcessParamsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
ReDim Preserve typ22(UBound(typ22) + 1)
typ22(UBound(typ22)) = Typ
PostProcessParamsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(ParameterAttributes)
ReDim Preserve typ22(UBound(typ22) + 1)
typ22(UBound(typ22)) = Typ
PostProcessParamsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Ident)
PostProcessParamsIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ22(UBound(typ22) + 1)
typ22(UBound(typ22)) = Typ
PostProcessParamsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineParameter", typ22))
Typ = Typ03.GetMethod("DefineParameter", typ22).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
PostProcessParamsIL.Emit(OpCodes.Pop)
End If
PostProcessParamsIL.MarkSequencePoint(doc2, 283, 1, 283, 100)
PostProcessParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
Dim fa21 As System.Reflection.Emit.Label = PostProcessParamsIL.DefineLabel()
Dim tru21 As System.Reflection.Emit.Label = PostProcessParamsIL.DefineLabel()
Dim cont21 As System.Reflection.Emit.Label = PostProcessParamsIL.DefineLabel()
PostProcessParamsIL.Emit(OpCodes.Beq, tru21)
PostProcessParamsIL.Emit(OpCodes.Br, fa21)
PostProcessParamsIL.MarkLabel(tru21)
PostProcessParamsIL.MarkSequencePoint(doc2, 284, 1, 284, 100)
PostProcessParamsIL.Emit(OpCodes.Br, label12)
PostProcessParamsIL.MarkSequencePoint(doc2, 285, 1, 285, 100)
PostProcessParamsIL.Emit(OpCodes.Br, cont21)
PostProcessParamsIL.MarkLabel(fa21)
PostProcessParamsIL.MarkSequencePoint(doc2, 286, 1, 286, 100)
PostProcessParamsIL.Emit(OpCodes.Br, label11)
PostProcessParamsIL.MarkSequencePoint(doc2, 287, 1, 287, 100)
PostProcessParamsIL.Emit(OpCodes.Br, cont21)
PostProcessParamsIL.MarkLabel(cont21)
PostProcessParamsIL.MarkSequencePoint(doc2, 289, 1, 289, 100)
PostProcessParamsIL.MarkLabel(label12)
PostProcessParamsIL.MarkSequencePoint(doc2, 291, 1, 291, 100)
PostProcessParamsIL.Emit(OpCodes.Ret)
Helpers.CreateType()
End Sub


Dim doc3 As ISymbolDocumentWriter

Sub StmtReader()
Dim StmtReader As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "StmtReader", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(Stmt)
Dim Read As MethodBuilder = StmtReader.DefineMethod("Read", MethodAttributes.Public, GetType(System.Void), typ0)
Dim ReadIL As ILGenerator = Read.GetILGenerator()
Dim Readparam01 As ParameterBuilder = Read.DefineParameter(1, ParameterAttributes.None, "stm")
ReadIL.MarkSequencePoint(doc3, 5, 1, 5, 100)
Dim locbldr38 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr38.SetLocalSymInfo("typ")
ReadIL.MarkSequencePoint(doc3, 6, 1, 6, 100)
Dim locbldr39 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Boolean))
locbldr39.SetLocalSymInfo("b")
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc3, 8, 1, 8, 100)
Dim label0 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.MarkSequencePoint(doc3, 10, 1, 10, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(RefasmStmt))
Dim typ1 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ1))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ1).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc3, 11, 1, 11, 100)
Dim typ2(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ2))
Typ = Typ03.GetMethod("IsInstanceOfType", typ2).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc3, 13, 1, 13, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa22 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru22 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont22 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru22)
ReadIL.Emit(OpCodes.Br, fa22)
ReadIL.MarkLabel(tru22)
ReadIL.MarkSequencePoint(doc3, 14, 1, 14, 100)
Dim locbldr40 As LocalBuilder = ReadIL.DeclareLocal(GetType(RefasmStmt))
locbldr40.SetLocalSymInfo("rastm")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 2)
ReadIL.MarkSequencePoint(doc3, 15, 1, 15, 100)
Dim locbldr41 As LocalBuilder = ReadIL.DeclareLocal(GetType(Token))
locbldr41.SetLocalSymInfo("ap")
ReadIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(RefasmStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(RefasmStmt).GetField("AsmPath"))
Typ = GetType(RefasmStmt).GetField("AsmPath").FieldType
ReadIL.Emit(OpCodes.Stloc, 3)
ReadIL.MarkSequencePoint(doc3, 17, 1, 17, 100)
Dim locbldr42 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.String))
locbldr42.SetLocalSymInfo("tmpstr")
Dim typ3(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "*")
Typ = GetType(System.String)
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ3))
Typ = GetType(String).GetMethod("Concat", typ3).ReturnType
ReadIL.Emit(OpCodes.Stloc, 4)
ReadIL.MarkSequencePoint(doc3, 18, 1, 18, 100)
Dim locbldr43 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Boolean))
locbldr43.SetLocalSymInfo("compb")
Dim typ4(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String)
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ4))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ4).ReturnType
ReadIL.Emit(OpCodes.Stloc, 5)
ReadIL.MarkSequencePoint(doc3, 20, 1, 20, 100)
ReadIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa23 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru23 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont23 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru23)
ReadIL.Emit(OpCodes.Br, fa23)
ReadIL.MarkLabel(tru23)
ReadIL.MarkSequencePoint(doc3, 21, 1, 21, 100)
ReadIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stloc, 4)
ReadIL.MarkSequencePoint(doc3, 22, 1, 22, 100)
Dim locbldr44 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Char).MakeArrayType())
locbldr44.SetLocalSymInfo("tmpchrarr")
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Char))
ReadIL.Emit(OpCodes.Stloc, 6)
ReadIL.MarkSequencePoint(doc3, 23, 1, 23, 100)
ReadIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
Dim typ5 As Type() = {Typ}
ReadIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ5))
Typ = GetType(System.Convert).GetMethod("ToChar", typ5).ReturnType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc3, 24, 1, 24, 100)
Dim typ6(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Trim", typ6))
Typ = Typ03.GetMethod("Trim", typ6).ReturnType
ReadIL.Emit(OpCodes.Stloc, 4)
ReadIL.MarkSequencePoint(doc3, 25, 1, 25, 100)
ReadIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String)
ReadIL.Emit(OpCodes.Stfld, GetType(Token).GetField("Value"))
ReadIL.MarkSequencePoint(doc3, 26, 1, 26, 100)
ReadIL.Emit(OpCodes.Br, cont23)
ReadIL.MarkLabel(fa23)
ReadIL.Emit(OpCodes.Br, cont23)
ReadIL.MarkLabel(cont23)
ReadIL.MarkSequencePoint(doc3, 28, 1, 28, 100)
Dim locbldr45 As LocalBuilder = ReadIL.DeclareLocal(GetType(Assembly))
locbldr45.SetLocalSymInfo("asm")
Dim typ7(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Assembly).GetMethod("LoadFrom", typ7))
Typ = GetType(Assembly).GetMethod("LoadFrom", typ7).ReturnType
ReadIL.Emit(OpCodes.Stloc, 7)
ReadIL.MarkSequencePoint(doc3, 29, 1, 29, 100)
Dim typ8(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Referencing Assembly: ")
Typ = GetType(System.String)
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ8))
Typ = GetType(Console).GetMethod("Write", typ8).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc3, 30, 1, 30, 100)
Dim typ9(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ9))
Typ = GetType(Console).GetMethod("WriteLine", typ9).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc3, 31, 1, 31, 100)
Dim typ10(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(Assembly)
ReDim Preserve typ10(UBound(typ10) + 1)
typ10(UBound(typ10)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Importer).GetMethod("AddAsm", typ10))
Typ = GetType(Importer).GetMethod("AddAsm", typ10).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc3, 32, 1, 32, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc3, 33, 1, 33, 100)
ReadIL.Emit(OpCodes.Br, cont22)
ReadIL.MarkLabel(fa22)
ReadIL.Emit(OpCodes.Br, cont22)
ReadIL.MarkLabel(cont22)
ReadIL.MarkSequencePoint(doc3, 35, 1, 35, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(ImportStmt))
Dim typ11 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ11))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ11).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc3, 36, 1, 36, 100)
Dim typ12(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ12(UBound(typ12) + 1)
typ12(UBound(typ12)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ12))
Typ = Typ03.GetMethod("IsInstanceOfType", typ12).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc3, 38, 1, 38, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa24 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru24 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont24 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru24)
ReadIL.Emit(OpCodes.Br, fa24)
ReadIL.MarkLabel(tru24)
ReadIL.MarkSequencePoint(doc3, 39, 1, 39, 100)
Dim locbldr46 As LocalBuilder = ReadIL.DeclareLocal(GetType(ImportStmt))
locbldr46.SetLocalSymInfo("istm")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 8)
ReadIL.MarkSequencePoint(doc3, 40, 1, 40, 100)
Dim locbldr47 As LocalBuilder = ReadIL.DeclareLocal(GetType(Token))
locbldr47.SetLocalSymInfo("ina")
ReadIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(ImportStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(ImportStmt).GetField("NS"))
Typ = GetType(ImportStmt).GetField("NS").FieldType
ReadIL.Emit(OpCodes.Stloc, 9)
ReadIL.MarkSequencePoint(doc3, 42, 1, 42, 100)
Dim typ13(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ13(UBound(typ13) + 1)
typ13(UBound(typ13)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "*")
Typ = GetType(System.String)
ReDim Preserve typ13(UBound(typ13) + 1)
typ13(UBound(typ13)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ13(UBound(typ13) + 1)
typ13(UBound(typ13)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ13))
Typ = GetType(String).GetMethod("Concat", typ13).ReturnType
ReadIL.Emit(OpCodes.Stloc, 4)
ReadIL.MarkSequencePoint(doc3, 43, 1, 43, 100)
Dim typ14(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String)
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ14))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ14).ReturnType
ReadIL.Emit(OpCodes.Stloc, 5)
ReadIL.MarkSequencePoint(doc3, 45, 1, 45, 100)
ReadIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa25 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru25 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont25 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru25)
ReadIL.Emit(OpCodes.Br, fa25)
ReadIL.MarkLabel(tru25)
ReadIL.MarkSequencePoint(doc3, 46, 1, 46, 100)
ReadIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stloc, 4)
ReadIL.MarkSequencePoint(doc3, 47, 1, 47, 100)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Char))
ReadIL.Emit(OpCodes.Stloc, 6)
ReadIL.MarkSequencePoint(doc3, 48, 1, 48, 100)
ReadIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
Dim typ15 As Type() = {Typ}
ReadIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ15))
Typ = GetType(System.Convert).GetMethod("ToChar", typ15).ReturnType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc3, 49, 1, 49, 100)
Dim typ16(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ16(UBound(typ16) + 1)
typ16(UBound(typ16)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Trim", typ16))
Typ = Typ03.GetMethod("Trim", typ16).ReturnType
ReadIL.Emit(OpCodes.Stloc, 4)
ReadIL.MarkSequencePoint(doc3, 50, 1, 50, 100)
ReadIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String)
ReadIL.Emit(OpCodes.Stfld, GetType(Token).GetField("Value"))
ReadIL.MarkSequencePoint(doc3, 51, 1, 51, 100)
ReadIL.Emit(OpCodes.Br, cont25)
ReadIL.MarkLabel(fa25)
ReadIL.Emit(OpCodes.Br, cont25)
ReadIL.MarkLabel(cont25)
ReadIL.MarkSequencePoint(doc3, 53, 1, 53, 100)
Dim typ17(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Importing Namespace: ")
Typ = GetType(System.String)
ReDim Preserve typ17(UBound(typ17) + 1)
typ17(UBound(typ17)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ17))
Typ = GetType(Console).GetMethod("Write", typ17).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc3, 54, 1, 54, 100)
Dim typ18(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ18(UBound(typ18) + 1)
typ18(UBound(typ18)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ18))
Typ = GetType(Console).GetMethod("WriteLine", typ18).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc3, 56, 1, 56, 100)
Dim typ19(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ19(UBound(typ19) + 1)
typ19(UBound(typ19)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Importer).GetMethod("AddImp", typ19))
Typ = GetType(Importer).GetMethod("AddImp", typ19).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc3, 57, 1, 57, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc3, 58, 1, 58, 100)
ReadIL.Emit(OpCodes.Br, cont24)
ReadIL.MarkLabel(fa24)
ReadIL.Emit(OpCodes.Br, cont24)
ReadIL.MarkLabel(cont24)
ReadIL.MarkSequencePoint(doc3, 60, 1, 60, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(LocimportStmt))
Dim typ20 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ20))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ20).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc3, 61, 1, 61, 100)
Dim typ21(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ21(UBound(typ21) + 1)
typ21(UBound(typ21)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ21))
Typ = Typ03.GetMethod("IsInstanceOfType", typ21).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc3, 63, 1, 63, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa26 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru26 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont26 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru26)
ReadIL.Emit(OpCodes.Br, fa26)
ReadIL.MarkLabel(tru26)
ReadIL.MarkSequencePoint(doc3, 64, 1, 64, 100)
Dim locbldr48 As LocalBuilder = ReadIL.DeclareLocal(GetType(LocimportStmt))
locbldr48.SetLocalSymInfo("listm")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 10)
ReadIL.MarkSequencePoint(doc3, 65, 1, 65, 100)
Dim locbldr49 As LocalBuilder = ReadIL.DeclareLocal(GetType(Token))
locbldr49.SetLocalSymInfo("lina")
ReadIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(LocimportStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(LocimportStmt).GetField("NS"))
Typ = GetType(LocimportStmt).GetField("NS").FieldType
ReadIL.Emit(OpCodes.Stloc, 11)
ReadIL.MarkSequencePoint(doc3, 67, 1, 67, 100)
Dim typ22(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ22(UBound(typ22) + 1)
typ22(UBound(typ22)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "*")
Typ = GetType(System.String)
ReDim Preserve typ22(UBound(typ22) + 1)
typ22(UBound(typ22)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ22(UBound(typ22) + 1)
typ22(UBound(typ22)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ22))
Typ = GetType(String).GetMethod("Concat", typ22).ReturnType
ReadIL.Emit(OpCodes.Stloc, 4)
ReadIL.MarkSequencePoint(doc3, 68, 1, 68, 100)
Dim typ23(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ23(UBound(typ23) + 1)
typ23(UBound(typ23)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String)
ReDim Preserve typ23(UBound(typ23) + 1)
typ23(UBound(typ23)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ23))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ23).ReturnType
ReadIL.Emit(OpCodes.Stloc, 5)
ReadIL.MarkSequencePoint(doc3, 70, 1, 70, 100)
ReadIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa27 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru27 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont27 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru27)
ReadIL.Emit(OpCodes.Br, fa27)
ReadIL.MarkLabel(tru27)
ReadIL.MarkSequencePoint(doc3, 71, 1, 71, 100)
ReadIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stloc, 4)
ReadIL.MarkSequencePoint(doc3, 72, 1, 72, 100)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Char))
ReadIL.Emit(OpCodes.Stloc, 6)
ReadIL.MarkSequencePoint(doc3, 73, 1, 73, 100)
ReadIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
Dim typ24 As Type() = {Typ}
ReadIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ24))
Typ = GetType(System.Convert).GetMethod("ToChar", typ24).ReturnType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc3, 74, 1, 74, 100)
Dim typ25(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ25(UBound(typ25) + 1)
typ25(UBound(typ25)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Trim", typ25))
Typ = Typ03.GetMethod("Trim", typ25).ReturnType
ReadIL.Emit(OpCodes.Stloc, 4)
ReadIL.MarkSequencePoint(doc3, 75, 1, 75, 100)
ReadIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String)
ReadIL.Emit(OpCodes.Stfld, GetType(Token).GetField("Value"))
ReadIL.MarkSequencePoint(doc3, 76, 1, 76, 100)
ReadIL.Emit(OpCodes.Br, cont27)
ReadIL.MarkLabel(fa27)
ReadIL.Emit(OpCodes.Br, cont27)
ReadIL.MarkLabel(cont27)
ReadIL.MarkSequencePoint(doc3, 78, 1, 78, 100)
Dim typ26(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Importing Namespace: ")
Typ = GetType(System.String)
ReDim Preserve typ26(UBound(typ26) + 1)
typ26(UBound(typ26)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ26))
Typ = GetType(Console).GetMethod("Write", typ26).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc3, 79, 1, 79, 100)
Dim typ27(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ27(UBound(typ27) + 1)
typ27(UBound(typ27)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ27))
Typ = GetType(Console).GetMethod("WriteLine", typ27).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc3, 81, 1, 81, 100)
Dim typ28(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ28(UBound(typ28) + 1)
typ28(UBound(typ28)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Importer).GetMethod("AddLocImp", typ28))
Typ = GetType(Importer).GetMethod("AddLocImp", typ28).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc3, 82, 1, 82, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc3, 83, 1, 83, 100)
ReadIL.Emit(OpCodes.Br, cont26)
ReadIL.MarkLabel(fa26)
ReadIL.Emit(OpCodes.Br, cont26)
ReadIL.MarkLabel(cont26)
ReadIL.MarkSequencePoint(doc3, 85, 1, 85, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(AssemblyStmt))
Dim typ29 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ29))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ29).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc3, 86, 1, 86, 100)
Dim typ30(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ30(UBound(typ30) + 1)
typ30(UBound(typ30)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ30))
Typ = Typ03.GetMethod("IsInstanceOfType", typ30).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc3, 88, 1, 88, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa28 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru28 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont28 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru28)
ReadIL.Emit(OpCodes.Br, fa28)
ReadIL.MarkLabel(tru28)
ReadIL.MarkSequencePoint(doc3, 90, 1, 90, 100)
Dim locbldr50 As LocalBuilder = ReadIL.DeclareLocal(GetType(AssemblyStmt))
locbldr50.SetLocalSymInfo("asms")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 12)
ReadIL.MarkSequencePoint(doc3, 91, 1, 91, 100)
Dim locbldr51 As LocalBuilder = ReadIL.DeclareLocal(GetType(Ident))
locbldr51.SetLocalSymInfo("asmn")
ReadIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(AssemblyStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(AssemblyStmt).GetField("AsmName"))
Typ = GetType(AssemblyStmt).GetField("AsmName").FieldType
ReadIL.Emit(OpCodes.Stloc, 13)
ReadIL.MarkSequencePoint(doc3, 92, 1, 92, 100)
Dim typ31(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ31(UBound(typ31) + 1)
typ31(UBound(typ31)) = Typ
ReadIL.Emit(OpCodes.Newobj, GetType(AssemblyName).GetConstructor(typ31))
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AsmNameStr"))
ReadIL.MarkSequencePoint(doc3, 93, 1, 93, 100)
Dim locbldr52 As LocalBuilder = ReadIL.DeclareLocal(GetType(Token))
locbldr52.SetLocalSymInfo("asmm")
ReadIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(AssemblyStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(AssemblyStmt).GetField("Mode"))
Typ = GetType(AssemblyStmt).GetField("Mode").FieldType
ReadIL.Emit(OpCodes.Stloc, 14)
ReadIL.MarkSequencePoint(doc3, 94, 1, 94, 100)
ReadIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AsmMode"))
ReadIL.MarkSequencePoint(doc3, 95, 1, 95, 100)
ReadIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("DfltNS"))
ReadIL.MarkSequencePoint(doc3, 96, 1, 96, 100)
ReadIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnNS"))
ReadIL.MarkSequencePoint(doc3, 98, 1, 98, 100)
Dim typ32(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Beginning Assembly: ")
Typ = GetType(System.String)
ReDim Preserve typ32(UBound(typ32) + 1)
typ32(UBound(typ32)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ32))
Typ = GetType(Console).GetMethod("Write", typ32).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc3, 99, 1, 99, 100)
Dim typ33(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ33(UBound(typ33) + 1)
typ33(UBound(typ33)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ33))
Typ = GetType(Console).GetMethod("WriteLine", typ33).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc3, 101, 1, 101, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc3, 103, 1, 103, 100)
ReadIL.Emit(OpCodes.Br, cont28)
ReadIL.MarkLabel(fa28)
ReadIL.Emit(OpCodes.Br, cont28)
ReadIL.MarkLabel(cont28)
ReadIL.MarkSequencePoint(doc3, 105, 1, 105, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(VerStmt))
Dim typ34 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ34))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ34).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc3, 106, 1, 106, 100)
Dim typ35(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ35(UBound(typ35) + 1)
typ35(UBound(typ35)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ35))
Typ = Typ03.GetMethod("IsInstanceOfType", typ35).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc3, 108, 1, 108, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa29 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru29 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont29 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru29)
ReadIL.Emit(OpCodes.Br, fa29)
ReadIL.MarkLabel(tru29)
ReadIL.MarkSequencePoint(doc3, 109, 1, 109, 100)
Dim locbldr53 As LocalBuilder = ReadIL.DeclareLocal(GetType(VerStmt))
locbldr53.SetLocalSymInfo("asmv")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 15)
ReadIL.MarkSequencePoint(doc3, 110, 1, 110, 100)
Dim locbldr54 As LocalBuilder = ReadIL.DeclareLocal(GetType(IntLiteral).MakeArrayType())
locbldr54.SetLocalSymInfo("vns")
ReadIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(VerStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(VerStmt).GetField("VersionNos"))
Typ = GetType(VerStmt).GetField("VersionNos").FieldType
ReadIL.Emit(OpCodes.Stloc, 16)
ReadIL.MarkSequencePoint(doc3, 111, 1, 111, 100)
Dim locbldr55 As LocalBuilder = ReadIL.DeclareLocal(GetType(IntLiteral))
locbldr55.SetLocalSymInfo("vne")
ReadIL.MarkSequencePoint(doc3, 112, 1, 112, 100)
Dim locbldr56 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Int32).MakeArrayType())
locbldr56.SetLocalSymInfo("vernos")
ReadIL.Emit(OpCodes.Ldc_I4, CInt(4))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Int32))
ReadIL.Emit(OpCodes.Stloc, 18)
ReadIL.MarkSequencePoint(doc3, 113, 1, 113, 100)
ReadIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(IntLiteral).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(IntLiteral).MakeArrayType().GetElementType())
Typ = GetType(IntLiteral).MakeArrayType().GetElementType()
ReadIL.Emit(OpCodes.Stloc, 17)
ReadIL.MarkSequencePoint(doc3, 114, 1, 114, 100)
ReadIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(IntLiteral)
ReadIL.Emit(OpCodes.Ldfld, GetType(IntLiteral).GetField("NumVal"))
Typ = GetType(IntLiteral).GetField("NumVal").FieldType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Int32).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc3, 115, 1, 115, 100)
ReadIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(IntLiteral).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(IntLiteral).MakeArrayType().GetElementType())
Typ = GetType(IntLiteral).MakeArrayType().GetElementType()
ReadIL.Emit(OpCodes.Stloc, 17)
ReadIL.MarkSequencePoint(doc3, 116, 1, 116, 100)
ReadIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(IntLiteral)
ReadIL.Emit(OpCodes.Ldfld, GetType(IntLiteral).GetField("NumVal"))
Typ = GetType(IntLiteral).GetField("NumVal").FieldType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Int32).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc3, 117, 1, 117, 100)
ReadIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(IntLiteral).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(IntLiteral).MakeArrayType().GetElementType())
Typ = GetType(IntLiteral).MakeArrayType().GetElementType()
ReadIL.Emit(OpCodes.Stloc, 17)
ReadIL.MarkSequencePoint(doc3, 118, 1, 118, 100)
ReadIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(IntLiteral)
ReadIL.Emit(OpCodes.Ldfld, GetType(IntLiteral).GetField("NumVal"))
Typ = GetType(IntLiteral).GetField("NumVal").FieldType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Int32).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc3, 119, 1, 119, 100)
ReadIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(IntLiteral).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(IntLiteral).MakeArrayType().GetElementType())
Typ = GetType(IntLiteral).MakeArrayType().GetElementType()
ReadIL.Emit(OpCodes.Stloc, 17)
ReadIL.MarkSequencePoint(doc3, 120, 1, 120, 100)
ReadIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(IntLiteral)
ReadIL.Emit(OpCodes.Ldfld, GetType(IntLiteral).GetField("NumVal"))
Typ = GetType(IntLiteral).GetField("NumVal").FieldType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Int32).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc3, 121, 1, 121, 100)
Dim locbldr57 As LocalBuilder = ReadIL.DeclareLocal(GetType(Version))
locbldr57.SetLocalSymInfo("asmver")
Dim typ36(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(System.Int32).MakeArrayType().GetElementType())
Typ = GetType(System.Int32).MakeArrayType().GetElementType()
ReDim Preserve typ36(UBound(typ36) + 1)
typ36(UBound(typ36)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(System.Int32).MakeArrayType().GetElementType())
Typ = GetType(System.Int32).MakeArrayType().GetElementType()
ReDim Preserve typ36(UBound(typ36) + 1)
typ36(UBound(typ36)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(System.Int32).MakeArrayType().GetElementType())
Typ = GetType(System.Int32).MakeArrayType().GetElementType()
ReDim Preserve typ36(UBound(typ36) + 1)
typ36(UBound(typ36)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(System.Int32).MakeArrayType().GetElementType())
Typ = GetType(System.Int32).MakeArrayType().GetElementType()
ReDim Preserve typ36(UBound(typ36) + 1)
typ36(UBound(typ36)) = Typ
ReadIL.Emit(OpCodes.Newobj, GetType(Version).GetConstructor(typ36))
ReadIL.Emit(OpCodes.Stloc, 19)
ReadIL.MarkSequencePoint(doc3, 122, 1, 122, 100)
Dim locbldr58 As LocalBuilder = ReadIL.DeclareLocal(GetType(AssemblyName))
locbldr58.SetLocalSymInfo("asmnm")
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmNameStr"))
Typ = GetType(AsmFactory).GetField("AsmNameStr").FieldType
ReadIL.Emit(OpCodes.Stloc, 20)
ReadIL.MarkSequencePoint(doc3, 123, 1, 123, 100)
Dim typ37(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(AssemblyName)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(Version)
ReDim Preserve typ37(UBound(typ37) + 1)
typ37(UBound(typ37)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("set_Version", typ37))
Typ = Typ03.GetMethod("set_Version", typ37).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc3, 124, 1, 124, 100)
ReadIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(AssemblyName)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AsmNameStr"))
ReadIL.MarkSequencePoint(doc3, 125, 1, 125, 100)
Dim locbldr59 As LocalBuilder = ReadIL.DeclareLocal(GetType(AppDomain))
locbldr59.SetLocalSymInfo("cad")
ReadIL.Emit(OpCodes.Call, GetType(AppDomain).GetMethod("get_CurrentDomain", Type.EmptyTypes))
Typ = GetType(AppDomain).GetMethod("get_CurrentDomain", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 21)
ReadIL.MarkSequencePoint(doc3, 126, 1, 126, 100)
Dim locbldr60 As LocalBuilder = ReadIL.DeclareLocal(GetType(AssemblyBuilderAccess))
locbldr60.SetLocalSymInfo("aasv")
ReadIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Stloc, 22)
ReadIL.MarkSequencePoint(doc3, 127, 1, 127, 100)
Dim locbldr61 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.String))
locbldr61.SetLocalSymInfo("curd")
ReadIL.Emit(OpCodes.Call, GetType(Directory).GetMethod("GetCurrentDirectory", Type.EmptyTypes))
Typ = GetType(Directory).GetMethod("GetCurrentDirectory", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 23)
ReadIL.MarkSequencePoint(doc3, 128, 1, 128, 100)
Dim typ38(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(AppDomain)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(AssemblyName)
ReDim Preserve typ38(UBound(typ38) + 1)
typ38(UBound(typ38)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(AssemblyBuilderAccess)
ReDim Preserve typ38(UBound(typ38) + 1)
typ38(UBound(typ38)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 23)
Typ = GetType(System.String)
ReDim Preserve typ38(UBound(typ38) + 1)
typ38(UBound(typ38)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineDynamicAssembly", typ38))
Typ = Typ03.GetMethod("DefineDynamicAssembly", typ38).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AsmB"))
ReadIL.MarkSequencePoint(doc3, 129, 1, 129, 100)
Dim locbldr62 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.String))
locbldr62.SetLocalSymInfo("asmnme")
ReadIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(AssemblyName)
Typ03 = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_Name", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_Name", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 24)
ReadIL.MarkSequencePoint(doc3, 130, 1, 130, 100)
Dim typ40(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(System.String)
ReDim Preserve typ40(UBound(typ40) + 1)
typ40(UBound(typ40)) = Typ
ReadIL.Emit(OpCodes.Ldstr, ".")
Typ = GetType(System.String)
ReDim Preserve typ40(UBound(typ40) + 1)
typ40(UBound(typ40)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmMode"))
Typ = GetType(AsmFactory).GetField("AsmMode").FieldType
ReDim Preserve typ40(UBound(typ40) + 1)
typ40(UBound(typ40)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ40))
Typ = GetType(String).GetMethod("Concat", typ40).ReturnType
ReadIL.Emit(OpCodes.Stloc, 24)
ReadIL.MarkSequencePoint(doc3, 131, 1, 131, 100)
Dim locbldr63 As LocalBuilder = ReadIL.DeclareLocal(GetType(AssemblyBuilder))
locbldr63.SetLocalSymInfo("ab")
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmB"))
Typ = GetType(AsmFactory).GetField("AsmB").FieldType
ReadIL.Emit(OpCodes.Stloc, 25)
ReadIL.MarkSequencePoint(doc3, 132, 1, 132, 100)
Dim typ41(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(AssemblyBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(System.String)
ReDim Preserve typ41(UBound(typ41) + 1)
typ41(UBound(typ41)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(System.String)
ReDim Preserve typ41(UBound(typ41) + 1)
typ41(UBound(typ41)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("DebugFlg"))
Typ = GetType(AsmFactory).GetField("DebugFlg").FieldType
ReDim Preserve typ41(UBound(typ41) + 1)
typ41(UBound(typ41)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineDynamicModule", typ41))
Typ = Typ03.GetMethod("DefineDynamicModule", typ41).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("MdlB"))
ReadIL.MarkSequencePoint(doc3, 133, 1, 133, 100)
ReadIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(System.String)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AsmFile"))
ReadIL.MarkSequencePoint(doc3, 134, 1, 134, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc3, 135, 1, 135, 100)
ReadIL.Emit(OpCodes.Br, cont29)
ReadIL.MarkLabel(fa29)
ReadIL.Emit(OpCodes.Br, cont29)
ReadIL.MarkLabel(cont29)
ReadIL.MarkSequencePoint(doc3, 137, 1, 137, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(DebugStmt))
Dim typ42 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ42))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ42).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc3, 138, 1, 138, 100)
Dim typ43(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ43(UBound(typ43) + 1)
typ43(UBound(typ43)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ43))
Typ = Typ03.GetMethod("IsInstanceOfType", typ43).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc3, 140, 1, 140, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa30 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru30 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont30 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru30)
ReadIL.Emit(OpCodes.Br, fa30)
ReadIL.MarkLabel(tru30)
ReadIL.MarkSequencePoint(doc3, 141, 1, 141, 100)
Dim locbldr64 As LocalBuilder = ReadIL.DeclareLocal(GetType(DebugStmt))
locbldr64.SetLocalSymInfo("dbgs")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 26)
ReadIL.MarkSequencePoint(doc3, 142, 1, 142, 100)
ReadIL.Emit(OpCodes.Ldloc, 26)
Typ = GetType(DebugStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(DebugStmt).GetField("Flg"))
Typ = GetType(DebugStmt).GetField("Flg").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("DebugFlg"))
ReadIL.MarkSequencePoint(doc3, 143, 1, 143, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc3, 144, 1, 144, 100)
ReadIL.Emit(OpCodes.Br, cont30)
ReadIL.MarkLabel(fa30)
ReadIL.Emit(OpCodes.Br, cont30)
ReadIL.MarkLabel(cont30)
ReadIL.MarkSequencePoint(doc3, 146, 1, 146, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(ClassStmt))
Dim typ44 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ44))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ44).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc3, 147, 1, 147, 100)
Dim typ45(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ45(UBound(typ45) + 1)
typ45(UBound(typ45)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ45))
Typ = Typ03.GetMethod("IsInstanceOfType", typ45).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc3, 149, 1, 149, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa31 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru31 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont31 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru31)
ReadIL.Emit(OpCodes.Br, fa31)
ReadIL.MarkLabel(tru31)
ReadIL.MarkSequencePoint(doc3, 150, 1, 150, 100)
Dim locbldr65 As LocalBuilder = ReadIL.DeclareLocal(GetType(ClassStmt))
locbldr65.SetLocalSymInfo("clss")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 27)
ReadIL.MarkSequencePoint(doc3, 152, 1, 152, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("inClass"))
Typ = GetType(AsmFactory).GetField("inClass").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa32 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru32 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont32 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru32)
ReadIL.Emit(OpCodes.Br, fa32)
ReadIL.MarkLabel(tru32)
ReadIL.MarkSequencePoint(doc3, 153, 1, 153, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("isNested"))
ReadIL.MarkSequencePoint(doc3, 154, 1, 154, 100)
ReadIL.Emit(OpCodes.Br, cont32)
ReadIL.MarkLabel(fa32)
ReadIL.Emit(OpCodes.Br, cont32)
ReadIL.MarkLabel(cont32)
ReadIL.MarkSequencePoint(doc3, 156, 1, 156, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa33 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru33 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont33 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru33)
ReadIL.Emit(OpCodes.Br, fa33)
ReadIL.MarkLabel(tru33)
ReadIL.MarkSequencePoint(doc3, 157, 1, 157, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("inClass"))
ReadIL.MarkSequencePoint(doc3, 158, 1, 158, 100)
ReadIL.Emit(OpCodes.Br, cont33)
ReadIL.MarkLabel(fa33)
ReadIL.Emit(OpCodes.Br, cont33)
ReadIL.MarkLabel(cont33)
ReadIL.MarkSequencePoint(doc3, 160, 1, 160, 100)
Dim locbldr66 As LocalBuilder = ReadIL.DeclareLocal(GetType(Attributes.Attribute).MakeArrayType())
locbldr66.SetLocalSymInfo("attrs")
ReadIL.Emit(OpCodes.Ldloc, 27)
Typ = GetType(ClassStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(ClassStmt).GetField("Attrs"))
Typ = GetType(ClassStmt).GetField("Attrs").FieldType
ReadIL.Emit(OpCodes.Stloc, 28)
ReadIL.MarkSequencePoint(doc3, 161, 1, 161, 100)
Dim locbldr67 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeAttributes))
locbldr67.SetLocalSymInfo("ta")
Dim typ46(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(Attributes.Attribute).MakeArrayType()
ReDim Preserve typ46(UBound(typ46) + 1)
typ46(UBound(typ46)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessClassAttrs", typ46))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessClassAttrs", typ46).ReturnType
ReadIL.Emit(OpCodes.Stloc, 29)
ReadIL.MarkSequencePoint(doc3, 162, 1, 162, 100)
Dim locbldr68 As LocalBuilder = ReadIL.DeclareLocal(GetType(Ident))
locbldr68.SetLocalSymInfo("clssnam")
ReadIL.Emit(OpCodes.Ldloc, 27)
Typ = GetType(ClassStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(ClassStmt).GetField("ClassName"))
Typ = GetType(ClassStmt).GetField("ClassName").FieldType
ReadIL.Emit(OpCodes.Stloc, 30)
ReadIL.MarkSequencePoint(doc3, 163, 1, 163, 100)
Dim locbldr69 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.String))
locbldr69.SetLocalSymInfo("clsnamstr")
ReadIL.Emit(OpCodes.Ldloc, 30)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stloc, 31)
ReadIL.MarkSequencePoint(doc3, 164, 1, 164, 100)
Dim locbldr70 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeTok))
locbldr70.SetLocalSymInfo("inhclstok")
ReadIL.Emit(OpCodes.Ldloc, 27)
Typ = GetType(ClassStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(ClassStmt).GetField("InhClass"))
Typ = GetType(ClassStmt).GetField("InhClass").FieldType
ReadIL.Emit(OpCodes.Stloc, 32)
ReadIL.MarkSequencePoint(doc3, 165, 1, 165, 100)
Dim locbldr71 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr71.SetLocalSymInfo("inhtyp")
ReadIL.Emit(OpCodes.Ldnull)
ReadIL.Emit(OpCodes.Stloc, 33)
ReadIL.MarkSequencePoint(doc3, 166, 1, 166, 100)
Dim locbldr72 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr72.SetLocalSymInfo("reft")
ReadIL.Emit(OpCodes.Ldloc, 32)
Typ = GetType(TypeTok)
ReadIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("RefTyp"))
Typ = GetType(TypeTok).GetField("RefTyp").FieldType
ReadIL.Emit(OpCodes.Stloc, 34)
ReadIL.MarkSequencePoint(doc3, 167, 1, 167, 100)
Dim locbldr73 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Int32))
locbldr73.SetLocalSymInfo("cmp")
Dim typ47(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 32)
Typ = GetType(TypeTok)
ReadIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("Value"))
Typ = GetType(TypeTok).GetField("Value").FieldType
ReDim Preserve typ47(UBound(typ47) + 1)
typ47(UBound(typ47)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ReDim Preserve typ47(UBound(typ47) + 1)
typ47(UBound(typ47)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ47))
Typ = GetType(String).GetMethod("Compare", typ47).ReturnType
ReadIL.Emit(OpCodes.Stloc, 35)
ReadIL.MarkSequencePoint(doc3, 169, 1, 169, 100)
ReadIL.Emit(OpCodes.Ldloc, 34)
Typ = GetType(System.Type)
ReadIL.Emit(OpCodes.Ldnull)
Dim fa34 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru34 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont34 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru34)
ReadIL.Emit(OpCodes.Br, fa34)
ReadIL.MarkLabel(tru34)
ReadIL.MarkSequencePoint(doc3, 170, 1, 170, 100)
ReadIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa35 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru35 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont35 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru35)
ReadIL.Emit(OpCodes.Br, fa35)
ReadIL.MarkLabel(tru35)
ReadIL.MarkSequencePoint(doc3, 171, 1, 171, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(System.Object))
Dim typ48 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ48))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ48).ReturnType
ReadIL.Emit(OpCodes.Stloc, 33)
ReadIL.MarkSequencePoint(doc3, 172, 1, 172, 100)
ReadIL.Emit(OpCodes.Br, cont35)
ReadIL.MarkLabel(fa35)
ReadIL.MarkSequencePoint(doc3, 173, 1, 173, 100)
Dim typ49(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 32)
Typ = GetType(TypeTok)
ReadIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("Value"))
Typ = GetType(TypeTok).GetField("Value").FieldType
ReDim Preserve typ49(UBound(typ49) + 1)
typ49(UBound(typ49)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadClass", typ49))
Typ = GetType(Loader).GetMethod("LoadClass", typ49).ReturnType
ReadIL.Emit(OpCodes.Stloc, 33)
ReadIL.MarkSequencePoint(doc3, 174, 1, 174, 100)
ReadIL.Emit(OpCodes.Br, cont35)
ReadIL.MarkLabel(cont35)
ReadIL.MarkSequencePoint(doc3, 175, 1, 175, 100)
ReadIL.Emit(OpCodes.Br, cont34)
ReadIL.MarkLabel(fa34)
ReadIL.MarkSequencePoint(doc3, 176, 1, 176, 100)
ReadIL.Emit(OpCodes.Ldloc, 34)
Typ = GetType(System.Type)
ReadIL.Emit(OpCodes.Stloc, 33)
ReadIL.MarkSequencePoint(doc3, 177, 1, 177, 100)
ReadIL.Emit(OpCodes.Br, cont34)
ReadIL.MarkLabel(cont34)
ReadIL.MarkSequencePoint(doc3, 180, 1, 180, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa36 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru36 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont36 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru36)
ReadIL.Emit(OpCodes.Br, fa36)
ReadIL.MarkLabel(tru36)
ReadIL.MarkSequencePoint(doc3, 181, 1, 181, 100)
Dim locbldr74 As LocalBuilder = ReadIL.DeclareLocal(GetType(ModuleBuilder))
locbldr74.SetLocalSymInfo("mdlbld")
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("MdlB"))
Typ = GetType(AsmFactory).GetField("MdlB").FieldType
ReadIL.Emit(OpCodes.Stloc, 36)
ReadIL.MarkSequencePoint(doc3, 182, 1, 182, 100)
Dim typ50(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnNS"))
Typ = GetType(AsmFactory).GetField("CurnNS").FieldType
ReDim Preserve typ50(UBound(typ50) + 1)
typ50(UBound(typ50)) = Typ
ReadIL.Emit(OpCodes.Ldstr, ".")
Typ = GetType(System.String)
ReDim Preserve typ50(UBound(typ50) + 1)
typ50(UBound(typ50)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.String)
ReDim Preserve typ50(UBound(typ50) + 1)
typ50(UBound(typ50)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ50))
Typ = GetType(String).GetMethod("Concat", typ50).ReturnType
ReadIL.Emit(OpCodes.Stloc, 31)
ReadIL.MarkSequencePoint(doc3, 183, 1, 183, 100)
Dim typ51(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 36)
Typ = GetType(ModuleBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.String)
ReDim Preserve typ51(UBound(typ51) + 1)
typ51(UBound(typ51)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 29)
Typ = GetType(TypeAttributes)
ReDim Preserve typ51(UBound(typ51) + 1)
typ51(UBound(typ51)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 33)
Typ = GetType(System.Type)
ReDim Preserve typ51(UBound(typ51) + 1)
typ51(UBound(typ51)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineType", typ51))
Typ = Typ03.GetMethod("DefineType", typ51).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnTypB"))
ReadIL.MarkSequencePoint(doc3, 185, 1, 185, 100)
Dim typ52(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Adding Class: ")
Typ = GetType(System.String)
ReDim Preserve typ52(UBound(typ52) + 1)
typ52(UBound(typ52)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ52))
Typ = GetType(Console).GetMethod("Write", typ52).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc3, 186, 1, 186, 100)
Dim typ53(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.String)
ReDim Preserve typ53(UBound(typ53) + 1)
typ53(UBound(typ53)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ53))
Typ = GetType(Console).GetMethod("WriteLine", typ53).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc3, 187, 1, 187, 100)
ReadIL.Emit(OpCodes.Br, cont36)
ReadIL.MarkLabel(fa36)
ReadIL.MarkSequencePoint(doc3, 188, 1, 188, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnTypB2"))
ReadIL.MarkSequencePoint(doc3, 189, 1, 189, 100)
Dim locbldr75 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeBuilder))
locbldr75.SetLocalSymInfo("ctb2")
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB2"))
Typ = GetType(AsmFactory).GetField("CurnTypB2").FieldType
ReadIL.Emit(OpCodes.Stloc, 37)
ReadIL.MarkSequencePoint(doc3, 190, 1, 190, 100)
Dim typ54(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Adding Nested Class: ")
Typ = GetType(System.String)
ReDim Preserve typ54(UBound(typ54) + 1)
typ54(UBound(typ54)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ54))
Typ = GetType(Console).GetMethod("Write", typ54).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc3, 191, 1, 191, 100)
Dim typ55(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.String)
ReDim Preserve typ55(UBound(typ55) + 1)
typ55(UBound(typ55)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ55))
Typ = GetType(Console).GetMethod("WriteLine", typ55).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc3, 192, 1, 192, 100)
Dim typ56(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 37)
Typ = GetType(TypeBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.String)
ReDim Preserve typ56(UBound(typ56) + 1)
typ56(UBound(typ56)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 29)
Typ = GetType(TypeAttributes)
ReDim Preserve typ56(UBound(typ56) + 1)
typ56(UBound(typ56)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 33)
Typ = GetType(System.Type)
ReDim Preserve typ56(UBound(typ56) + 1)
typ56(UBound(typ56)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineNestedType", typ56))
Typ = Typ03.GetMethod("DefineNestedType", typ56).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnTypB"))
ReadIL.MarkSequencePoint(doc3, 193, 1, 193, 100)
ReadIL.Emit(OpCodes.Br, cont36)
ReadIL.MarkLabel(cont36)
ReadIL.MarkSequencePoint(doc3, 195, 1, 195, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc3, 196, 1, 196, 100)
ReadIL.Emit(OpCodes.Br, cont31)
ReadIL.MarkLabel(fa31)
ReadIL.Emit(OpCodes.Br, cont31)
ReadIL.MarkLabel(cont31)
ReadIL.MarkSequencePoint(doc3, 198, 1, 198, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(FieldStmt))
Dim typ57 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ57))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ57).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc3, 199, 1, 199, 100)
Dim typ58(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ58(UBound(typ58) + 1)
typ58(UBound(typ58)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ58))
Typ = Typ03.GetMethod("IsInstanceOfType", typ58).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc3, 201, 1, 201, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa37 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru37 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont37 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru37)
ReadIL.Emit(OpCodes.Br, fa37)
ReadIL.MarkLabel(tru37)
ReadIL.MarkSequencePoint(doc3, 202, 1, 202, 100)
Dim locbldr76 As LocalBuilder = ReadIL.DeclareLocal(GetType(FieldStmt))
locbldr76.SetLocalSymInfo("flss")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 38)
ReadIL.MarkSequencePoint(doc3, 204, 1, 204, 100)
Dim locbldr77 As LocalBuilder = ReadIL.DeclareLocal(GetType(Attributes.Attribute).MakeArrayType())
locbldr77.SetLocalSymInfo("fattrs")
ReadIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(FieldStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(FieldStmt).GetField("Attrs"))
Typ = GetType(FieldStmt).GetField("Attrs").FieldType
ReadIL.Emit(OpCodes.Stloc, 39)
ReadIL.MarkSequencePoint(doc3, 205, 1, 205, 100)
Dim locbldr78 As LocalBuilder = ReadIL.DeclareLocal(GetType(FieldAttributes))
locbldr78.SetLocalSymInfo("fa")
Dim typ59(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(Attributes.Attribute).MakeArrayType()
ReDim Preserve typ59(UBound(typ59) + 1)
typ59(UBound(typ59)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessFieldAttrs", typ59))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessFieldAttrs", typ59).ReturnType
ReadIL.Emit(OpCodes.Stloc, 40)
ReadIL.MarkSequencePoint(doc3, 206, 1, 206, 100)
Dim locbldr79 As LocalBuilder = ReadIL.DeclareLocal(GetType(Ident))
locbldr79.SetLocalSymInfo("flssnam")
ReadIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(FieldStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(FieldStmt).GetField("FieldName"))
Typ = GetType(FieldStmt).GetField("FieldName").FieldType
ReadIL.Emit(OpCodes.Stloc, 41)
ReadIL.MarkSequencePoint(doc3, 207, 1, 207, 100)
Dim locbldr80 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.String))
locbldr80.SetLocalSymInfo("flsnamstr")
ReadIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stloc, 42)
ReadIL.MarkSequencePoint(doc3, 208, 1, 208, 100)
Dim locbldr81 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeTok))
locbldr81.SetLocalSymInfo("ftyptok")
ReadIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(FieldStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(FieldStmt).GetField("FieldTyp"))
Typ = GetType(FieldStmt).GetField("FieldTyp").FieldType
ReadIL.Emit(OpCodes.Stloc, 43)
ReadIL.MarkSequencePoint(doc3, 209, 1, 209, 100)
Dim locbldr82 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr82.SetLocalSymInfo("ftyp")
ReadIL.Emit(OpCodes.Ldnull)
ReadIL.Emit(OpCodes.Stloc, 44)
ReadIL.MarkSequencePoint(doc3, 210, 1, 210, 100)
Dim locbldr83 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr83.SetLocalSymInfo("reft3")
ReadIL.Emit(OpCodes.Ldloc, 43)
Typ = GetType(TypeTok)
ReadIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("RefTyp"))
Typ = GetType(TypeTok).GetField("RefTyp").FieldType
ReadIL.Emit(OpCodes.Stloc, 45)
ReadIL.MarkSequencePoint(doc3, 212, 1, 212, 100)
ReadIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(System.Type)
ReadIL.Emit(OpCodes.Ldnull)
Dim fa38 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru38 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont38 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru38)
ReadIL.Emit(OpCodes.Br, fa38)
ReadIL.MarkLabel(tru38)
ReadIL.MarkSequencePoint(doc3, 213, 1, 213, 100)
ReadIL.Emit(OpCodes.Ldloc, 43)
Typ = GetType(TypeTok)
ReadIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("IsArray"))
Typ = GetType(TypeTok).GetField("IsArray").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeArr"))
ReadIL.MarkSequencePoint(doc3, 214, 1, 214, 100)
ReadIL.Emit(OpCodes.Ldloc, 43)
Typ = GetType(TypeTok)
ReadIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("IsByRef"))
Typ = GetType(TypeTok).GetField("IsByRef").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeRef"))
ReadIL.MarkSequencePoint(doc3, 215, 1, 215, 100)
Dim typ60(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 43)
Typ = GetType(TypeTok)
ReadIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("Value"))
Typ = GetType(TypeTok).GetField("Value").FieldType
ReDim Preserve typ60(UBound(typ60) + 1)
typ60(UBound(typ60)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadClass", typ60))
Typ = GetType(Loader).GetMethod("LoadClass", typ60).ReturnType
ReadIL.Emit(OpCodes.Stloc, 44)
ReadIL.MarkSequencePoint(doc3, 216, 1, 216, 100)
ReadIL.Emit(OpCodes.Br, cont38)
ReadIL.MarkLabel(fa38)
ReadIL.MarkSequencePoint(doc3, 217, 1, 217, 100)
ReadIL.Emit(OpCodes.Ldloc, 43)
Typ = GetType(TypeTok)
ReadIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("IsArray"))
Typ = GetType(TypeTok).GetField("IsArray").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeArr"))
ReadIL.MarkSequencePoint(doc3, 218, 1, 218, 100)
ReadIL.Emit(OpCodes.Ldloc, 43)
Typ = GetType(TypeTok)
ReadIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("IsByRef"))
Typ = GetType(TypeTok).GetField("IsByRef").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeRef"))
ReadIL.MarkSequencePoint(doc3, 219, 1, 219, 100)
Dim typ61(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(System.Type)
ReDim Preserve typ61(UBound(typ61) + 1)
typ61(UBound(typ61)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("ProcessType", typ61))
Typ = GetType(Loader).GetMethod("ProcessType", typ61).ReturnType
ReadIL.Emit(OpCodes.Stloc, 44)
ReadIL.MarkSequencePoint(doc3, 220, 1, 220, 100)
ReadIL.Emit(OpCodes.Br, cont38)
ReadIL.MarkLabel(cont38)
ReadIL.MarkSequencePoint(doc3, 222, 1, 222, 100)
Dim locbldr84 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeBuilder))
locbldr84.SetLocalSymInfo("typb2")
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
ReadIL.Emit(OpCodes.Stloc, 46)
ReadIL.MarkSequencePoint(doc3, 223, 1, 223, 100)
Dim typ62(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 46)
Typ = GetType(TypeBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(System.String)
ReDim Preserve typ62(UBound(typ62) + 1)
typ62(UBound(typ62)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 44)
Typ = GetType(System.Type)
ReDim Preserve typ62(UBound(typ62) + 1)
typ62(UBound(typ62)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(FieldAttributes)
ReDim Preserve typ62(UBound(typ62) + 1)
typ62(UBound(typ62)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineField", typ62))
Typ = Typ03.GetMethod("DefineField", typ62).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnFldB"))
ReadIL.MarkSequencePoint(doc3, 225, 1, 225, 100)
Dim typ63(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Adding Field: ")
Typ = GetType(System.String)
ReDim Preserve typ63(UBound(typ63) + 1)
typ63(UBound(typ63)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ63))
Typ = GetType(Console).GetMethod("Write", typ63).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc3, 226, 1, 226, 100)
Dim typ64(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(System.String)
ReDim Preserve typ64(UBound(typ64) + 1)
typ64(UBound(typ64)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ64))
Typ = GetType(Console).GetMethod("WriteLine", typ64).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc3, 228, 1, 228, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc3, 229, 1, 229, 100)
ReadIL.Emit(OpCodes.Br, cont37)
ReadIL.MarkLabel(fa37)
ReadIL.Emit(OpCodes.Br, cont37)
ReadIL.MarkLabel(cont37)
ReadIL.MarkSequencePoint(doc3, 232, 1, 232, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(EndClassStmt))
Dim typ65 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ65))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ65).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc3, 233, 1, 233, 100)
Dim typ66(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ66(UBound(typ66) + 1)
typ66(UBound(typ66)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ66))
Typ = Typ03.GetMethod("IsInstanceOfType", typ66).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc3, 235, 1, 235, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa39 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru39 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont39 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru39)
ReadIL.Emit(OpCodes.Br, fa39)
ReadIL.MarkLabel(tru39)
ReadIL.MarkSequencePoint(doc3, 236, 1, 236, 100)
ReadIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("CreateTyp", Type.EmptyTypes))
Typ = GetType(AsmFactory).GetMethod("CreateTyp", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc3, 237, 1, 237, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa40 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru40 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont40 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru40)
ReadIL.Emit(OpCodes.Br, fa40)
ReadIL.MarkLabel(tru40)
ReadIL.MarkSequencePoint(doc3, 238, 1, 238, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("inClass"))
ReadIL.MarkSequencePoint(doc3, 239, 1, 239, 100)
ReadIL.Emit(OpCodes.Br, cont40)
ReadIL.MarkLabel(fa40)
ReadIL.Emit(OpCodes.Br, cont40)
ReadIL.MarkLabel(cont40)
ReadIL.MarkSequencePoint(doc3, 240, 1, 240, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa41 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru41 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont41 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru41)
ReadIL.Emit(OpCodes.Br, fa41)
ReadIL.MarkLabel(tru41)
ReadIL.MarkSequencePoint(doc3, 241, 1, 241, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB2"))
Typ = GetType(AsmFactory).GetField("CurnTypB2").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnTypB"))
ReadIL.MarkSequencePoint(doc3, 242, 1, 242, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("isNested"))
ReadIL.MarkSequencePoint(doc3, 243, 1, 243, 100)
ReadIL.Emit(OpCodes.Br, cont41)
ReadIL.MarkLabel(fa41)
ReadIL.Emit(OpCodes.Br, cont41)
ReadIL.MarkLabel(cont41)
ReadIL.MarkSequencePoint(doc3, 244, 1, 244, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc3, 245, 1, 245, 100)
ReadIL.Emit(OpCodes.Br, cont39)
ReadIL.MarkLabel(fa39)
ReadIL.Emit(OpCodes.Br, cont39)
ReadIL.MarkLabel(cont39)
ReadIL.MarkSequencePoint(doc3, 247, 1, 247, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(MethodStmt))
Dim typ67 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ67))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ67).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc3, 248, 1, 248, 100)
Dim typ68(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ68(UBound(typ68) + 1)
typ68(UBound(typ68)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ68))
Typ = Typ03.GetMethod("IsInstanceOfType", typ68).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc3, 250, 1, 250, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa42 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru42 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont42 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru42)
ReadIL.Emit(OpCodes.Br, fa42)
ReadIL.MarkLabel(tru42)
ReadIL.MarkSequencePoint(doc3, 251, 1, 251, 100)
Dim locbldr85 As LocalBuilder = ReadIL.DeclareLocal(GetType(MethodStmt))
locbldr85.SetLocalSymInfo("mtss")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 47)
ReadIL.MarkSequencePoint(doc3, 254, 1, 254, 100)
Dim locbldr86 As LocalBuilder = ReadIL.DeclareLocal(GetType(Attributes.Attribute).MakeArrayType())
locbldr86.SetLocalSymInfo("mattrs")
ReadIL.Emit(OpCodes.Ldloc, 47)
Typ = GetType(MethodStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(MethodStmt).GetField("Attrs"))
Typ = GetType(MethodStmt).GetField("Attrs").FieldType
ReadIL.Emit(OpCodes.Stloc, 48)
ReadIL.MarkSequencePoint(doc3, 255, 1, 255, 100)
Dim locbldr87 As LocalBuilder = ReadIL.DeclareLocal(GetType(MethodAttributes))
locbldr87.SetLocalSymInfo("ma")
Dim typ69(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 48)
Typ = GetType(Attributes.Attribute).MakeArrayType()
ReDim Preserve typ69(UBound(typ69) + 1)
typ69(UBound(typ69)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessMethodAttrs", typ69))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessMethodAttrs", typ69).ReturnType
ReadIL.Emit(OpCodes.Stloc, 49)
ReadIL.MarkSequencePoint(doc3, 256, 1, 256, 100)
Dim locbldr88 As LocalBuilder = ReadIL.DeclareLocal(GetType(Ident))
locbldr88.SetLocalSymInfo("mtssnam")
ReadIL.Emit(OpCodes.Ldloc, 47)
Typ = GetType(MethodStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(MethodStmt).GetField("MethodName"))
Typ = GetType(MethodStmt).GetField("MethodName").FieldType
ReadIL.Emit(OpCodes.Stloc, 50)
ReadIL.MarkSequencePoint(doc3, 257, 1, 257, 100)
Dim locbldr89 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.String))
locbldr89.SetLocalSymInfo("mtssnamstr")
ReadIL.Emit(OpCodes.Ldloc, 50)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stloc, 51)
ReadIL.MarkSequencePoint(doc3, 258, 1, 258, 100)
Dim locbldr90 As LocalBuilder = ReadIL.DeclareLocal(GetType(Expr).MakeArrayType())
locbldr90.SetLocalSymInfo("paramarr")
ReadIL.Emit(OpCodes.Ldloc, 47)
Typ = GetType(MethodStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(MethodStmt).GetField("Params"))
Typ = GetType(MethodStmt).GetField("Params").FieldType
ReadIL.Emit(OpCodes.Stloc, 52)
ReadIL.MarkSequencePoint(doc3, 259, 1, 259, 100)
Dim locbldr91 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Int32))
locbldr91.SetLocalSymInfo("paramlen")
ReadIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(Expr).MakeArrayType()
ReadIL.Emit(OpCodes.Ldlen)
ReadIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Stloc, 53)
ReadIL.MarkSequencePoint(doc3, 260, 1, 260, 100)
Dim locbldr92 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeTok))
locbldr92.SetLocalSymInfo("rettyptok")
ReadIL.Emit(OpCodes.Ldloc, 47)
Typ = GetType(MethodStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(MethodStmt).GetField("RetTyp"))
Typ = GetType(MethodStmt).GetField("RetTyp").FieldType
ReadIL.Emit(OpCodes.Stloc, 54)
ReadIL.MarkSequencePoint(doc3, 261, 1, 261, 100)
Dim locbldr93 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr93.SetLocalSymInfo("rettyp")
ReadIL.Emit(OpCodes.Ldnull)
ReadIL.Emit(OpCodes.Stloc, 55)
ReadIL.MarkSequencePoint(doc3, 262, 1, 262, 100)
ReadIL.Emit(OpCodes.Ldloc, 54)
Typ = GetType(TypeTok)
ReadIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("RefTyp"))
Typ = GetType(TypeTok).GetField("RefTyp").FieldType
ReadIL.Emit(OpCodes.Stloc, 34)
ReadIL.MarkSequencePoint(doc3, 263, 1, 263, 100)
Dim typ70(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 54)
Typ = GetType(TypeTok)
ReadIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("Value"))
Typ = GetType(TypeTok).GetField("Value").FieldType
ReDim Preserve typ70(UBound(typ70) + 1)
typ70(UBound(typ70)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ReDim Preserve typ70(UBound(typ70) + 1)
typ70(UBound(typ70)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ70))
Typ = GetType(String).GetMethod("Compare", typ70).ReturnType
ReadIL.Emit(OpCodes.Stloc, 35)
ReadIL.MarkSequencePoint(doc3, 265, 1, 265, 100)
ReadIL.Emit(OpCodes.Ldloc, 34)
Typ = GetType(System.Type)
ReadIL.Emit(OpCodes.Ldnull)
Dim fa43 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru43 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont43 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru43)
ReadIL.Emit(OpCodes.Br, fa43)
ReadIL.MarkLabel(tru43)
ReadIL.MarkSequencePoint(doc3, 266, 1, 266, 100)
ReadIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa44 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru44 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont44 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru44)
ReadIL.Emit(OpCodes.Br, fa44)
ReadIL.MarkLabel(tru44)
ReadIL.MarkSequencePoint(doc3, 267, 1, 267, 100)
ReadIL.Emit(OpCodes.Br, cont44)
ReadIL.MarkLabel(fa44)
ReadIL.MarkSequencePoint(doc3, 268, 1, 268, 100)
ReadIL.Emit(OpCodes.Ldloc, 54)
Typ = GetType(TypeTok)
ReadIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("IsArray"))
Typ = GetType(TypeTok).GetField("IsArray").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeArr"))
ReadIL.MarkSequencePoint(doc3, 269, 1, 269, 100)
ReadIL.Emit(OpCodes.Ldloc, 54)
Typ = GetType(TypeTok)
ReadIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("IsByRef"))
Typ = GetType(TypeTok).GetField("IsByRef").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeRef"))
ReadIL.MarkSequencePoint(doc3, 270, 1, 270, 100)
Dim typ71(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 54)
Typ = GetType(TypeTok)
ReadIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("Value"))
Typ = GetType(TypeTok).GetField("Value").FieldType
ReDim Preserve typ71(UBound(typ71) + 1)
typ71(UBound(typ71)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadClass", typ71))
Typ = GetType(Loader).GetMethod("LoadClass", typ71).ReturnType
ReadIL.Emit(OpCodes.Stloc, 55)
ReadIL.MarkSequencePoint(doc3, 271, 1, 271, 100)
ReadIL.Emit(OpCodes.Br, cont44)
ReadIL.MarkLabel(cont44)
ReadIL.MarkSequencePoint(doc3, 272, 1, 272, 100)
ReadIL.Emit(OpCodes.Br, cont43)
ReadIL.MarkLabel(fa43)
ReadIL.MarkSequencePoint(doc3, 273, 1, 273, 100)
ReadIL.Emit(OpCodes.Ldloc, 54)
Typ = GetType(TypeTok)
ReadIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("IsArray"))
Typ = GetType(TypeTok).GetField("IsArray").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeArr"))
ReadIL.MarkSequencePoint(doc3, 274, 1, 274, 100)
ReadIL.Emit(OpCodes.Ldloc, 54)
Typ = GetType(TypeTok)
ReadIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("IsByRef"))
Typ = GetType(TypeTok).GetField("IsByRef").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeRef"))
ReadIL.MarkSequencePoint(doc3, 275, 1, 275, 100)
Dim typ72(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 34)
Typ = GetType(System.Type)
ReDim Preserve typ72(UBound(typ72) + 1)
typ72(UBound(typ72)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("ProcessType", typ72))
Typ = GetType(Loader).GetMethod("ProcessType", typ72).ReturnType
ReadIL.Emit(OpCodes.Stloc, 55)
ReadIL.MarkSequencePoint(doc3, 276, 1, 276, 100)
ReadIL.Emit(OpCodes.Br, cont43)
ReadIL.MarkLabel(cont43)
ReadIL.MarkSequencePoint(doc3, 278, 1, 278, 100)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Type))
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("TypArr"))
ReadIL.MarkSequencePoint(doc3, 280, 1, 280, 100)
ReadIL.Emit(OpCodes.Ldloc, 53)
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa45 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru45 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont45 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru45)
ReadIL.Emit(OpCodes.Br, fa45)
ReadIL.MarkLabel(tru45)
ReadIL.MarkSequencePoint(doc3, 281, 1, 281, 100)
ReadIL.Emit(OpCodes.Br, cont45)
ReadIL.MarkLabel(fa45)
ReadIL.MarkSequencePoint(doc3, 282, 1, 282, 100)
Dim typ73(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(Expr).MakeArrayType()
ReDim Preserve typ73(UBound(typ73) + 1)
typ73(UBound(typ73)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessParams", typ73))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessParams", typ73).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc3, 283, 1, 283, 100)
ReadIL.Emit(OpCodes.Br, cont45)
ReadIL.MarkLabel(cont45)
ReadIL.MarkSequencePoint(doc3, 285, 1, 285, 100)
Dim locbldr94 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeBuilder))
locbldr94.SetLocalSymInfo("typb")
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
ReadIL.Emit(OpCodes.Stloc, 56)
ReadIL.MarkSequencePoint(doc3, 286, 1, 286, 100)
Dim typ74(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 56)
Typ = GetType(TypeBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 51)
Typ = GetType(System.String)
ReDim Preserve typ74(UBound(typ74) + 1)
typ74(UBound(typ74)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 49)
Typ = GetType(MethodAttributes)
ReDim Preserve typ74(UBound(typ74) + 1)
typ74(UBound(typ74)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 55)
Typ = GetType(System.Type)
ReDim Preserve typ74(UBound(typ74) + 1)
typ74(UBound(typ74)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ReDim Preserve typ74(UBound(typ74) + 1)
typ74(UBound(typ74)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineMethod", typ74))
Typ = Typ03.GetMethod("DefineMethod", typ74).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnMetB"))
ReadIL.MarkSequencePoint(doc3, 287, 1, 287, 100)
ReadIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("InitMtd", Type.EmptyTypes))
Typ = GetType(AsmFactory).GetMethod("InitMtd", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc3, 288, 1, 288, 100)
Dim typ75(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Adding Method: ")
Typ = GetType(System.String)
ReDim Preserve typ75(UBound(typ75) + 1)
typ75(UBound(typ75)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ75))
Typ = GetType(Console).GetMethod("Write", typ75).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc3, 289, 1, 289, 100)
Dim typ76(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 51)
Typ = GetType(System.String)
ReDim Preserve typ76(UBound(typ76) + 1)
typ76(UBound(typ76)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ76))
Typ = GetType(Console).GetMethod("WriteLine", typ76).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc3, 291, 1, 291, 100)
ReadIL.Emit(OpCodes.Ldloc, 53)
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa46 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru46 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont46 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru46)
ReadIL.Emit(OpCodes.Br, fa46)
ReadIL.MarkLabel(tru46)
ReadIL.MarkSequencePoint(doc3, 292, 1, 292, 100)
ReadIL.Emit(OpCodes.Br, cont46)
ReadIL.MarkLabel(fa46)
ReadIL.MarkSequencePoint(doc3, 293, 1, 293, 100)
Dim typ77(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(Expr).MakeArrayType()
ReDim Preserve typ77(UBound(typ77) + 1)
typ77(UBound(typ77)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("PostProcessParams", typ77))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("PostProcessParams", typ77).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc3, 294, 1, 294, 100)
ReadIL.Emit(OpCodes.Br, cont46)
ReadIL.MarkLabel(cont46)
ReadIL.MarkSequencePoint(doc3, 296, 1, 296, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc3, 297, 1, 297, 100)
ReadIL.Emit(OpCodes.Br, cont42)
ReadIL.MarkLabel(fa42)
ReadIL.Emit(OpCodes.Br, cont42)
ReadIL.MarkLabel(cont42)
ReadIL.MarkSequencePoint(doc3, 299, 1, 299, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(EndMethodStmt))
Dim typ78 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ78))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ78).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc3, 300, 1, 300, 100)
Dim typ79(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ79(UBound(typ79) + 1)
typ79(UBound(typ79)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ79))
Typ = Typ03.GetMethod("IsInstanceOfType", typ79).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc3, 302, 1, 302, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa47 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru47 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont47 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru47)
ReadIL.Emit(OpCodes.Br, fa47)
ReadIL.MarkLabel(tru47)
ReadIL.MarkSequencePoint(doc3, 303, 1, 303, 100)
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitRet", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitRet", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc3, 304, 1, 304, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc3, 305, 1, 305, 100)
ReadIL.Emit(OpCodes.Br, cont47)
ReadIL.MarkLabel(fa47)
ReadIL.Emit(OpCodes.Br, cont47)
ReadIL.MarkLabel(cont47)
ReadIL.MarkSequencePoint(doc3, 308, 1, 308, 100)
ReadIL.MarkLabel(label0)
ReadIL.MarkSequencePoint(doc3, 310, 1, 310, 100)
ReadIL.Emit(OpCodes.Ret)
StmtReader.CreateType()
End Sub


Dim doc4 As ISymbolDocumentWriter

Sub CodeGenerator()
Dim CodeGenerator As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "CodeGenerator", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(StmtSet)
Dim EmitMSIL As MethodBuilder = CodeGenerator.DefineMethod("EmitMSIL", MethodAttributes.Public, GetType(System.Void), typ0)
Dim EmitMSILIL As ILGenerator = EmitMSIL.GetILGenerator()
Dim EmitMSILparam01 As ParameterBuilder = EmitMSIL.DefineParameter(1, ParameterAttributes.None, "stmts")
EmitMSILIL.MarkSequencePoint(doc4, 5, 1, 5, 100)
Dim locbldr95 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(System.Int32))
locbldr95.SetLocalSymInfo("i")
EmitMSILIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Stloc, 0)
EmitMSILIL.MarkSequencePoint(doc4, 6, 1, 6, 100)
Dim locbldr96 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(System.Int32))
locbldr96.SetLocalSymInfo("len")
EmitMSILIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(StmtSet)
EmitMSILIL.Emit(OpCodes.Ldfld, GetType(StmtSet).GetField("Stmts"))
Typ = GetType(StmtSet).GetField("Stmts").FieldType
EmitMSILIL.Emit(OpCodes.Ldlen)
EmitMSILIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Sub)
EmitMSILIL.Emit(OpCodes.Stloc, 1)
EmitMSILIL.MarkSequencePoint(doc4, 7, 1, 7, 100)
Dim locbldr97 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(Stmt))
locbldr97.SetLocalSymInfo("stm")
EmitMSILIL.Emit(OpCodes.Ldnull)
EmitMSILIL.Emit(OpCodes.Stloc, 2)
EmitMSILIL.MarkSequencePoint(doc4, 8, 1, 8, 100)
Dim locbldr98 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(System.Type))
locbldr98.SetLocalSymInfo("typ")
EmitMSILIL.MarkSequencePoint(doc4, 9, 1, 9, 100)
Dim locbldr99 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(System.Boolean))
locbldr99.SetLocalSymInfo("b")
EmitMSILIL.MarkSequencePoint(doc4, 11, 1, 11, 100)
Dim label0 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
EmitMSILIL.MarkSequencePoint(doc4, 12, 1, 12, 100)
Dim label1 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
EmitMSILIL.MarkSequencePoint(doc4, 14, 1, 14, 100)
EmitMSILIL.MarkLabel(label0)
EmitMSILIL.MarkSequencePoint(doc4, 16, 1, 16, 100)
EmitMSILIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Add)
EmitMSILIL.Emit(OpCodes.Stloc, 0)
EmitMSILIL.MarkSequencePoint(doc4, 18, 1, 18, 100)
EmitMSILIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(StmtSet)
EmitMSILIL.Emit(OpCodes.Ldfld, GetType(StmtSet).GetField("Stmts"))
Typ = GetType(StmtSet).GetField("Stmts").FieldType
Typ02 = Typ
EmitMSILIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitMSILIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
EmitMSILIL.Emit(OpCodes.Stloc, 2)
EmitMSILIL.MarkSequencePoint(doc4, 19, 1, 19, 100)
EmitMSILIL.Emit(OpCodes.Ldtoken, GetType(IncludeStmt))
Dim typ1 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitMSILIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ1))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ1).ReturnType
EmitMSILIL.Emit(OpCodes.Stloc, 3)
EmitMSILIL.MarkSequencePoint(doc4, 20, 1, 20, 100)
Dim typ2(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Type)
Typ03 = Typ
EmitMSILIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Stmt)
EmitMSILIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = Typ
EmitMSILIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ2))
Typ = Typ03.GetMethod("IsInstanceOfType", typ2).ReturnType
EmitMSILIL.Emit(OpCodes.Stloc, 4)
EmitMSILIL.MarkSequencePoint(doc4, 22, 1, 22, 100)
EmitMSILIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
EmitMSILIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa48 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
Dim tru48 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
Dim cont48 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
EmitMSILIL.Emit(OpCodes.Beq, tru48)
EmitMSILIL.Emit(OpCodes.Br, fa48)
EmitMSILIL.MarkLabel(tru48)
EmitMSILIL.MarkSequencePoint(doc4, 23, 1, 23, 100)
EmitMSILIL.Emit(OpCodes.Br, cont48)
EmitMSILIL.MarkLabel(fa48)
EmitMSILIL.MarkSequencePoint(doc4, 25, 1, 25, 100)
Dim locbldr100 As LocalBuilder = EmitMSILIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.StmtReader"))
locbldr100.SetLocalSymInfo("sr")
EmitMSILIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.StmtReader").GetConstructor(Type.EmptyTypes))
EmitMSILIL.Emit(OpCodes.Stloc, 5)
EmitMSILIL.MarkSequencePoint(doc4, 26, 1, 26, 100)
Dim typ3(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.StmtReader")
Typ03 = Typ
EmitMSILIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Stmt)
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = Typ
EmitMSILIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Read", typ3))
Typ = Typ03.GetMethod("Read", typ3).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMSILIL.Emit(OpCodes.Pop)
End If
EmitMSILIL.MarkSequencePoint(doc4, 28, 1, 28, 100)
EmitMSILIL.Emit(OpCodes.Br, cont48)
EmitMSILIL.MarkLabel(cont48)
EmitMSILIL.MarkSequencePoint(doc4, 30, 1, 30, 100)
EmitMSILIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
Dim fa49 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
Dim tru49 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
Dim cont49 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
EmitMSILIL.Emit(OpCodes.Beq, tru49)
EmitMSILIL.Emit(OpCodes.Br, fa49)
EmitMSILIL.MarkLabel(tru49)
EmitMSILIL.MarkSequencePoint(doc4, 32, 1, 32, 100)
Dim locbldr101 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(AssemblyBuilder))
locbldr101.SetLocalSymInfo("ab")
EmitMSILIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmB"))
Typ = GetType(AsmFactory).GetField("AsmB").FieldType
EmitMSILIL.Emit(OpCodes.Stloc, 6)
EmitMSILIL.MarkSequencePoint(doc4, 33, 1, 33, 100)
Dim typ4(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(AssemblyBuilder)
Typ03 = Typ
EmitMSILIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmFile"))
Typ = GetType(AsmFactory).GetField("AsmFile").FieldType
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
EmitMSILIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Save", typ4))
Typ = Typ03.GetMethod("Save", typ4).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMSILIL.Emit(OpCodes.Pop)
End If
EmitMSILIL.MarkSequencePoint(doc4, 35, 1, 35, 100)
EmitMSILIL.Emit(OpCodes.Br, label1)
EmitMSILIL.MarkSequencePoint(doc4, 36, 1, 36, 100)
EmitMSILIL.Emit(OpCodes.Br, cont49)
EmitMSILIL.MarkLabel(fa49)
EmitMSILIL.MarkSequencePoint(doc4, 37, 1, 37, 100)
EmitMSILIL.Emit(OpCodes.Br, label0)
EmitMSILIL.MarkSequencePoint(doc4, 38, 1, 38, 100)
EmitMSILIL.Emit(OpCodes.Br, cont49)
EmitMSILIL.MarkLabel(cont49)
EmitMSILIL.MarkSequencePoint(doc4, 40, 1, 40, 100)
EmitMSILIL.MarkLabel(label1)
EmitMSILIL.MarkSequencePoint(doc4, 42, 1, 42, 100)
EmitMSILIL.Emit(OpCodes.Ret)
CodeGenerator.CreateType()
End Sub

Sub Main()

asmName = New AssemblyName("tokenizer.CodeGen")
asmName.Version = New System.Version(11, 2, 5, 0)
asm  = AppDomain.CurrentDomain.DefineDynamicAssembly(asmName, AssemblyBuilderAccess.Save, CStr("E:\Code\dylannet\compiler\"))
mdl = asm.DefineDynamicModule(asmName.Name & ".dll" , asmName.Name & ".dll", True)
resw = mdl.DefineResource("tokenizer.CodeGen.resources" ,  "Description")
doc = mdl.DefineDocument("E:\Code\dylannet\compiler\tokenizer.CodeGen.txt", Guid.Empty, Guid.Empty, Guid.Empty)
doc2 = mdl.DefineDocument("E:\Code\dylannet\compiler\helpers.txt", Guid.Empty, Guid.Empty, Guid.Empty)
doc3 = mdl.DefineDocument("E:\Code\dylannet\compiler\stmtreader.txt", Guid.Empty, Guid.Empty, Guid.Empty)
doc4 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegenerator.txt", Guid.Empty, Guid.Empty, Guid.Empty)
addstr("tokenizer.CodeGen")
addasm(asm)
Dim daType As Type = GetType(DebuggableAttribute)
Dim daCtor As ConstructorInfo = daType.GetConstructor(New Type() { GetType(DebuggableAttribute.DebuggingModes) })
Dim daBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(daCtor, New Object() {DebuggableAttribute.DebuggingModes.DisableOptimizations Or _
DebuggableAttribute.DebuggingModes.Default })
asm.SetCustomAttribute(daBuilder)

Helpers()
StmtReader()
CodeGenerator()
Dim vaType As Type = GetType(AssemblyFileVersionAttribute)
Dim vaCtor As ConstructorInfo = vaType.GetConstructor(New Type() { GetType(String) })
Dim vaBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(vaCtor, New Object() {"11.2.5.0"})
asm.SetCustomAttribute(vaBuilder)

Dim paType As Type = GetType(AssemblyProductAttribute)
Dim paCtor As ConstructorInfo = paType.GetConstructor(New Type() { GetType(String) })
Dim paBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(paCtor, New Object() {"tokenizer.CodeGen"})
asm.SetCustomAttribute(paBuilder)

Dim ataType As Type = GetType(AssemblyTitleAttribute)
Dim ataCtor As ConstructorInfo = ataType.GetConstructor(New Type() { GetType(String) })
Dim ataBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(ataCtor, New Object() {"tokenizer.CodeGen"})
asm.SetCustomAttribute(ataBuilder)

Dim deaType As Type = GetType(AssemblyDescriptionAttribute)
Dim deaCtor As ConstructorInfo = deaType.GetConstructor(New Type() { GetType(String) })
Dim deaBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(deaCtor, New Object() {"tokenizer.CodeGen"})
asm.SetCustomAttribute(deaBuilder)


asm.DefineVersionInfoResource()
asm.Save(asmName.Name & ".dll")
End Sub


End Module