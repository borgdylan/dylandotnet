Imports dylan.NET.Tokenizer.Parser
Imports dylan.NET.Tokenizer.AST.Tokens.Chars
Imports dylan.NET.Tokenizer.AST.Tokens.Attributes
Imports dylan.NET.Tokenizer.AST.Tokens.Literals
Imports dylan.NET.Tokenizer.AST.Tokens.TypeToks
Imports dylan.NET.Tokenizer.AST.Tokens.Ops
Imports dylan.NET.Tokenizer.AST.Stmts
Imports dylan.NET.Tokenizer.AST.Exprs
Imports dylan.NET.Tokenizer.AST.Tokens
Imports dylan.NET.Tokenizer.AST
Imports dylan.NET.Tokenizer.Lexer
Imports dylan.NET.Reflection
Imports dylan.NET.Utils
Imports dylan.NET
Imports System.Linq
Imports System.Collections.Generic
Imports System.Collections
Imports System.IO
Imports Microsoft.VisualBasic
Imports System.Xml
Imports System.Xml.Linq
Imports System.Data

Imports System
Imports System.Diagnostics
Imports System.Diagnostics.SymbolStore
Imports System.Reflection
Imports System.Resources
Imports System.Reflection.Emit
Module Module1

Public asmName As AssemblyName
Public asm As AssemblyBuilder
Public Typ As Type
Public Typ02 As Type
Public Typ03 As Type
Public Typ04 As Type
Public impstr(-1) As String
Public impasm(-1) As Assembly
Public interfacebool As Boolean
Public mdl As ModuleBuilder
Public resw As IResourceWriter
Public resobj As Object

Dim doc As ISymbolDocumentWriter

Sub addstr(ByVal str As String)
ReDim Preserve impstr(UBound(impstr) + 1)
impstr(UBound(impstr)) = str
End Sub

Sub addasm(ByVal asm As Assembly)
ReDim Preserve impasm(UBound(impasm) + 1)
impasm(UBound(impasm)) = asm
End Sub

Function MakeGetType(ByVal TypeName As String) As Type
Dim attachbrackets As Boolean = False
If TypeName Like "*[[]*]" Then
Dim split As String() = TypeName.Split(New [Char] () {"[","]"})
TypeName = split(0)
attachbrackets = True
End If
Dim ind As Integer = -1
Dim i As Integer = -1
Dim len As Integer = impstr.Length - 1
Do Until i = len
i = i + 1
If TypeName Like impstr(i) & "*" Then
ind = i
End If
Loop
If ind <> -1 Then
Dim assem As Assembly = impasm(ind)
If attachbrackets = True Then
TypeName = TypeName & "[]"
End If
MakeGetType = assem.GetType(TypeName)
Else
If attachbrackets = True Then
TypeName = TypeName & "[]"
End If
MakeGetType = Type.GetType(TypeName)
End If
Return MakeGetType
End Function

Dim doc2 As ISymbolDocumentWriter

Sub VarItem()
Dim VarItem As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "VarItem", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim Name As FieldBuilder = VarItem.DefineField("Name", GetType(System.String), FieldAttributes.Public)
Dim LocArg As FieldBuilder = VarItem.DefineField("LocArg", GetType(System.Boolean), FieldAttributes.Public)
Dim Index As FieldBuilder = VarItem.DefineField("Index", GetType(System.Int32), FieldAttributes.Public)
Dim VarTyp As FieldBuilder = VarItem.DefineField("VarTyp", GetType(System.Type), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = VarItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc2, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc2, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, Name)
ctor0IL.MarkSequencePoint(doc2, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, LocArg)
ctor0IL.MarkSequencePoint(doc2, 21, 1, 21, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, Index)
ctor0IL.MarkSequencePoint(doc2, 22, 1, 22, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, VarTyp)
ctor0IL.MarkSequencePoint(doc2, 23, 1, 23, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Boolean)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Int32)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Type)
Dim ctor1 As ConstructorBuilder = VarItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "nme")
Dim ctor1param02 As ParameterBuilder = ctor1.DefineParameter(2, ParameterAttributes.None, "la")
Dim ctor1param03 As ParameterBuilder = ctor1.DefineParameter(3, ParameterAttributes.None, "ind")
Dim ctor1param04 As ParameterBuilder = ctor1.DefineParameter(4, ParameterAttributes.None, "typ")
ctor1IL.MarkSequencePoint(doc2, 26, 1, 26, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc2, 27, 1, 27, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, Name)
ctor1IL.MarkSequencePoint(doc2, 28, 1, 28, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, LocArg)
ctor1IL.MarkSequencePoint(doc2, 29, 1, 29, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 3)
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, Index)
ctor1IL.MarkSequencePoint(doc2, 30, 1, 30, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 4)
Typ = GetType(System.Type)
ctor1IL.Emit(OpCodes.Stfld, VarTyp)
ctor1IL.MarkSequencePoint(doc2, 31, 1, 31, 100)
ctor1IL.Emit(OpCodes.Ret)
VarItem.CreateType()
End Sub


Dim doc3 As ISymbolDocumentWriter

Sub FieldItem()
Dim FieldItem As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "FieldItem", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim Name As FieldBuilder = FieldItem.DefineField("Name", GetType(System.String), FieldAttributes.Public)
Dim FieldTyp As FieldBuilder = FieldItem.DefineField("FieldTyp", GetType(System.Type), FieldAttributes.Public)
Dim FieldBldr As FieldBuilder = FieldItem.DefineField("FieldBldr", GetType(FieldBuilder), FieldAttributes.Public)
Dim LitVal As FieldBuilder = FieldItem.DefineField("LitVal", GetType(Literal), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = FieldItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc3, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc3, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, Name)
ctor0IL.MarkSequencePoint(doc3, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, FieldTyp)
ctor0IL.MarkSequencePoint(doc3, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, FieldBldr)
ctor0IL.MarkSequencePoint(doc3, 21, 1, 21, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, LitVal)
ctor0IL.MarkSequencePoint(doc3, 22, 1, 22, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Type)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(FieldBuilder)
Dim ctor1 As ConstructorBuilder = FieldItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "nme")
Dim ctor1param02 As ParameterBuilder = ctor1.DefineParameter(2, ParameterAttributes.None, "typ")
Dim ctor1param03 As ParameterBuilder = ctor1.DefineParameter(3, ParameterAttributes.None, "bld")
ctor1IL.MarkSequencePoint(doc3, 25, 1, 25, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc3, 26, 1, 26, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, Name)
ctor1IL.MarkSequencePoint(doc3, 27, 1, 27, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Type)
ctor1IL.Emit(OpCodes.Stfld, FieldTyp)
ctor1IL.MarkSequencePoint(doc3, 28, 1, 28, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 3)
Typ = GetType(FieldBuilder)
ctor1IL.Emit(OpCodes.Stfld, FieldBldr)
ctor1IL.MarkSequencePoint(doc3, 29, 1, 29, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldnull)
ctor1IL.Emit(OpCodes.Stfld, LitVal)
ctor1IL.MarkSequencePoint(doc3, 30, 1, 30, 100)
ctor1IL.Emit(OpCodes.Ret)
FieldItem.CreateType()
End Sub


Dim doc4 As ISymbolDocumentWriter

Sub MethodItem()
Dim MethodItem As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "MethodItem", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim Name As FieldBuilder = MethodItem.DefineField("Name", GetType(System.String), FieldAttributes.Public)
Dim MethodTyp As FieldBuilder = MethodItem.DefineField("MethodTyp", GetType(System.Type), FieldAttributes.Public)
Dim ParamTyps As FieldBuilder = MethodItem.DefineField("ParamTyps", GetType(System.Type).MakeArrayType(), FieldAttributes.Public)
Dim MethodBldr As FieldBuilder = MethodItem.DefineField("MethodBldr", GetType(MethodBuilder), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = MethodItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc4, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc4, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, Name)
ctor0IL.MarkSequencePoint(doc4, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, MethodTyp)
ctor0IL.MarkSequencePoint(doc4, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, MethodBldr)
ctor0IL.MarkSequencePoint(doc4, 21, 1, 21, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, GetType(System.Type))
ctor0IL.Emit(OpCodes.Stfld, ParamTyps)
ctor0IL.MarkSequencePoint(doc4, 22, 1, 22, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Type)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Type).MakeArrayType()
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(MethodBuilder)
Dim ctor1 As ConstructorBuilder = MethodItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "nme")
Dim ctor1param02 As ParameterBuilder = ctor1.DefineParameter(2, ParameterAttributes.None, "typ")
Dim ctor1param03 As ParameterBuilder = ctor1.DefineParameter(3, ParameterAttributes.None, "ptyps")
Dim ctor1param04 As ParameterBuilder = ctor1.DefineParameter(4, ParameterAttributes.None, "bld")
ctor1IL.MarkSequencePoint(doc4, 25, 1, 25, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc4, 26, 1, 26, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, Name)
ctor1IL.MarkSequencePoint(doc4, 27, 1, 27, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Type)
ctor1IL.Emit(OpCodes.Stfld, MethodTyp)
ctor1IL.MarkSequencePoint(doc4, 28, 1, 28, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 4)
Typ = GetType(MethodBuilder)
ctor1IL.Emit(OpCodes.Stfld, MethodBldr)
ctor1IL.MarkSequencePoint(doc4, 29, 1, 29, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 3)
Typ = GetType(System.Type).MakeArrayType()
ctor1IL.Emit(OpCodes.Stfld, ParamTyps)
ctor1IL.MarkSequencePoint(doc4, 30, 1, 30, 100)
ctor1IL.Emit(OpCodes.Ret)
MethodItem.CreateType()
End Sub


Dim doc5 As ISymbolDocumentWriter

Sub CtorItem()
Dim CtorItem As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "CtorItem", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim ParamTyps As FieldBuilder = CtorItem.DefineField("ParamTyps", GetType(System.Type).MakeArrayType(), FieldAttributes.Public)
Dim CtorBldr As FieldBuilder = CtorItem.DefineField("CtorBldr", GetType(ConstructorBuilder), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = CtorItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc5, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc5, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, CtorBldr)
ctor0IL.MarkSequencePoint(doc5, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, GetType(System.Type))
ctor0IL.Emit(OpCodes.Stfld, ParamTyps)
ctor0IL.MarkSequencePoint(doc5, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Type).MakeArrayType()
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(ConstructorBuilder)
Dim ctor1 As ConstructorBuilder = CtorItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "ptyps")
Dim ctor1param02 As ParameterBuilder = ctor1.DefineParameter(2, ParameterAttributes.None, "bld")
ctor1IL.MarkSequencePoint(doc5, 21, 1, 21, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc5, 22, 1, 22, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(ConstructorBuilder)
ctor1IL.Emit(OpCodes.Stfld, CtorBldr)
ctor1IL.MarkSequencePoint(doc5, 23, 1, 23, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type).MakeArrayType()
ctor1IL.Emit(OpCodes.Stfld, ParamTyps)
ctor1IL.MarkSequencePoint(doc5, 24, 1, 24, 100)
ctor1IL.Emit(OpCodes.Ret)
CtorItem.CreateType()
End Sub


Dim doc6 As ISymbolDocumentWriter

Sub IfItem()
Dim IfItem As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "IfItem", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim EndLabel As FieldBuilder = IfItem.DefineField("EndLabel", GetType(Emit.Label), FieldAttributes.Public)
Dim NextBlkLabel As FieldBuilder = IfItem.DefineField("NextBlkLabel", GetType(Emit.Label), FieldAttributes.Public)
Dim ElsePass As FieldBuilder = IfItem.DefineField("ElsePass", GetType(System.Boolean), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = IfItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc6, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc6, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, ElsePass)
ctor0IL.MarkSequencePoint(doc6, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(Emit.Label)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(Emit.Label)
Dim ctor1 As ConstructorBuilder = IfItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "endl")
Dim ctor1param02 As ParameterBuilder = ctor1.DefineParameter(2, ParameterAttributes.None, "nbl")
ctor1IL.MarkSequencePoint(doc6, 21, 1, 21, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc6, 22, 1, 22, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Emit.Label)
ctor1IL.Emit(OpCodes.Stfld, EndLabel)
ctor1IL.MarkSequencePoint(doc6, 23, 1, 23, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(Emit.Label)
ctor1IL.Emit(OpCodes.Stfld, NextBlkLabel)
ctor1IL.MarkSequencePoint(doc6, 24, 1, 24, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, ElsePass)
ctor1IL.MarkSequencePoint(doc6, 25, 1, 25, 100)
ctor1IL.Emit(OpCodes.Ret)
IfItem.CreateType()
End Sub


Dim doc7 As ISymbolDocumentWriter

Sub TypeArr()
Dim TypeArr As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "TypeArr", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim Arr As FieldBuilder = TypeArr.DefineField("Arr", GetType(System.Type).MakeArrayType(), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = TypeArr.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc7, 6, 1, 6, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc7, 7, 1, 7, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, GetType(System.Type))
ctor0IL.Emit(OpCodes.Stfld, Arr)
ctor0IL.MarkSequencePoint(doc7, 8, 1, 8, 100)
ctor0IL.Emit(OpCodes.Ret)
TypeArr.CreateType()
End Sub


Dim doc8 As ISymbolDocumentWriter

Sub SymTable()
Dim SymTable As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "SymTable", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass Or TypeAttributes.BeforeFieldInit, GetType(System.Object))
Dim VarLst As FieldBuilder = SymTable.DefineField("VarLst", asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").MakeArrayType(), FieldAttributes.Public Or FieldAttributes.Static)
Dim FldLst As FieldBuilder = SymTable.DefineField("FldLst", asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType(), FieldAttributes.Public Or FieldAttributes.Static)
Dim NestedFldLst As FieldBuilder = SymTable.DefineField("NestedFldLst", asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType(), FieldAttributes.Public Or FieldAttributes.Static)
Dim MetLst As FieldBuilder = SymTable.DefineField("MetLst", asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType(), FieldAttributes.Public Or FieldAttributes.Static)
Dim NestedMetLst As FieldBuilder = SymTable.DefineField("NestedMetLst", asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType(), FieldAttributes.Public Or FieldAttributes.Static)
Dim CtorLst As FieldBuilder = SymTable.DefineField("CtorLst", asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType(), FieldAttributes.Public Or FieldAttributes.Static)
Dim NestedCtorLst As FieldBuilder = SymTable.DefineField("NestedCtorLst", asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType(), FieldAttributes.Public Or FieldAttributes.Static)
Dim IfLst As FieldBuilder = SymTable.DefineField("IfLst", asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").MakeArrayType(), FieldAttributes.Public Or FieldAttributes.Static)
Dim TypLst As FieldBuilder = SymTable.DefineField("TypLst", asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr").MakeArrayType(), FieldAttributes.Public Or FieldAttributes.Static)
Dim ctor0 As ConstructorBuilder = SymTable.DefineConstructor(MethodAttributes.Public Or MethodAttributes.Static,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc8, 22, 1, 22, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"))
ctor0IL.Emit(OpCodes.Stsfld, VarLst)
ctor0IL.MarkSequencePoint(doc8, 23, 1, 23, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
ctor0IL.Emit(OpCodes.Stsfld, FldLst)
ctor0IL.MarkSequencePoint(doc8, 24, 1, 24, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
ctor0IL.Emit(OpCodes.Stsfld, NestedFldLst)
ctor0IL.MarkSequencePoint(doc8, 25, 1, 25, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
ctor0IL.Emit(OpCodes.Stsfld, MetLst)
ctor0IL.MarkSequencePoint(doc8, 26, 1, 26, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
ctor0IL.Emit(OpCodes.Stsfld, NestedMetLst)
ctor0IL.MarkSequencePoint(doc8, 27, 1, 27, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
ctor0IL.Emit(OpCodes.Stsfld, CtorLst)
ctor0IL.MarkSequencePoint(doc8, 28, 1, 28, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
ctor0IL.Emit(OpCodes.Stsfld, NestedCtorLst)
ctor0IL.MarkSequencePoint(doc8, 29, 1, 29, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem"))
ctor0IL.Emit(OpCodes.Stsfld, IfLst)
ctor0IL.MarkSequencePoint(doc8, 30, 1, 30, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr"))
ctor0IL.Emit(OpCodes.Stsfld, TypLst)
ctor0IL.MarkSequencePoint(doc8, 31, 1, 31, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim ResetIf As MethodBuilder = SymTable.DefineMethod("ResetIf", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim ResetIfIL As ILGenerator = ResetIf.GetILGenerator()
ResetIfIL.MarkSequencePoint(doc8, 34, 1, 34, 100)
ResetIfIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ResetIfIL.Emit(OpCodes.Conv_U)
ResetIfIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem"))
ResetIfIL.Emit(OpCodes.Stsfld, IfLst)
ResetIfIL.MarkSequencePoint(doc8, 35, 1, 35, 100)
ResetIfIL.Emit(OpCodes.Ret)
Dim ResetVar As MethodBuilder = SymTable.DefineMethod("ResetVar", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim ResetVarIL As ILGenerator = ResetVar.GetILGenerator()
ResetVarIL.MarkSequencePoint(doc8, 38, 1, 38, 100)
ResetVarIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ResetVarIL.Emit(OpCodes.Conv_U)
ResetVarIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"))
ResetVarIL.Emit(OpCodes.Stsfld, VarLst)
ResetVarIL.MarkSequencePoint(doc8, 39, 1, 39, 100)
ResetVarIL.Emit(OpCodes.Ret)
Dim ResetFld As MethodBuilder = SymTable.DefineMethod("ResetFld", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim ResetFldIL As ILGenerator = ResetFld.GetILGenerator()
ResetFldIL.MarkSequencePoint(doc8, 42, 1, 42, 100)
ResetFldIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ResetFldIL.Emit(OpCodes.Conv_U)
ResetFldIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
ResetFldIL.Emit(OpCodes.Stsfld, FldLst)
ResetFldIL.MarkSequencePoint(doc8, 43, 1, 43, 100)
ResetFldIL.Emit(OpCodes.Ret)
Dim ResetNestedFld As MethodBuilder = SymTable.DefineMethod("ResetNestedFld", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim ResetNestedFldIL As ILGenerator = ResetNestedFld.GetILGenerator()
ResetNestedFldIL.MarkSequencePoint(doc8, 46, 1, 46, 100)
ResetNestedFldIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ResetNestedFldIL.Emit(OpCodes.Conv_U)
ResetNestedFldIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
ResetNestedFldIL.Emit(OpCodes.Stsfld, NestedFldLst)
ResetNestedFldIL.MarkSequencePoint(doc8, 47, 1, 47, 100)
ResetNestedFldIL.Emit(OpCodes.Ret)
Dim ResetMet As MethodBuilder = SymTable.DefineMethod("ResetMet", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim ResetMetIL As ILGenerator = ResetMet.GetILGenerator()
ResetMetIL.MarkSequencePoint(doc8, 50, 1, 50, 100)
ResetMetIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ResetMetIL.Emit(OpCodes.Conv_U)
ResetMetIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
ResetMetIL.Emit(OpCodes.Stsfld, MetLst)
ResetMetIL.MarkSequencePoint(doc8, 51, 1, 51, 100)
ResetMetIL.Emit(OpCodes.Ret)
Dim ResetNestedMet As MethodBuilder = SymTable.DefineMethod("ResetNestedMet", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim ResetNestedMetIL As ILGenerator = ResetNestedMet.GetILGenerator()
ResetNestedMetIL.MarkSequencePoint(doc8, 54, 1, 54, 100)
ResetNestedMetIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ResetNestedMetIL.Emit(OpCodes.Conv_U)
ResetNestedMetIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
ResetNestedMetIL.Emit(OpCodes.Stsfld, NestedMetLst)
ResetNestedMetIL.MarkSequencePoint(doc8, 55, 1, 55, 100)
ResetNestedMetIL.Emit(OpCodes.Ret)
Dim ResetCtor As MethodBuilder = SymTable.DefineMethod("ResetCtor", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim ResetCtorIL As ILGenerator = ResetCtor.GetILGenerator()
ResetCtorIL.MarkSequencePoint(doc8, 58, 1, 58, 100)
ResetCtorIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ResetCtorIL.Emit(OpCodes.Conv_U)
ResetCtorIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
ResetCtorIL.Emit(OpCodes.Stsfld, CtorLst)
ResetCtorIL.MarkSequencePoint(doc8, 59, 1, 59, 100)
ResetCtorIL.Emit(OpCodes.Ret)
Dim ResetNestedCtor As MethodBuilder = SymTable.DefineMethod("ResetNestedCtor", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim ResetNestedCtorIL As ILGenerator = ResetNestedCtor.GetILGenerator()
ResetNestedCtorIL.MarkSequencePoint(doc8, 62, 1, 62, 100)
ResetNestedCtorIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ResetNestedCtorIL.Emit(OpCodes.Conv_U)
ResetNestedCtorIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
ResetNestedCtorIL.Emit(OpCodes.Stsfld, NestedCtorLst)
ResetNestedCtorIL.MarkSequencePoint(doc8, 63, 1, 63, 100)
ResetNestedCtorIL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Boolean)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Int32)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Type)
Dim AddVar As MethodBuilder = SymTable.DefineMethod("AddVar", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ0)
Dim AddVarIL As ILGenerator = AddVar.GetILGenerator()
Dim AddVarparam01 As ParameterBuilder = AddVar.DefineParameter(1, ParameterAttributes.None, "nme")
Dim AddVarparam02 As ParameterBuilder = AddVar.DefineParameter(2, ParameterAttributes.None, "la")
Dim AddVarparam03 As ParameterBuilder = AddVar.DefineParameter(3, ParameterAttributes.None, "ind")
Dim AddVarparam04 As ParameterBuilder = AddVar.DefineParameter(4, ParameterAttributes.None, "typ")
AddVarIL.MarkSequencePoint(doc8, 67, 1, 67, 100)
Dim locbldr0 As LocalBuilder = AddVarIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"))
locbldr0.SetLocalSymInfo("vr")
Dim typ1(-1) As Type
AddVarIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = Typ
AddVarIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = Typ
AddVarIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = Typ
AddVarIL.Emit(OpCodes.Ldarg, 3)
Typ = GetType(System.Type)
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = Typ
AddVarIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetConstructor(typ1))
AddVarIL.Emit(OpCodes.Stloc, 0)
AddVarIL.MarkSequencePoint(doc8, 69, 1, 69, 100)
Dim locbldr1 As LocalBuilder = AddVarIL.DeclareLocal(GetType(System.Int32))
locbldr1.SetLocalSymInfo("len")
AddVarIL.Emit(OpCodes.Ldsfld, VarLst)
Typ = VarLst.FieldType
AddVarIL.Emit(OpCodes.Ldlen)
AddVarIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Stloc, 1)
AddVarIL.MarkSequencePoint(doc8, 70, 1, 70, 100)
Dim locbldr2 As LocalBuilder = AddVarIL.DeclareLocal(GetType(System.Int32))
locbldr2.SetLocalSymInfo("destl")
AddVarIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Add)
AddVarIL.Emit(OpCodes.Stloc, 2)
AddVarIL.MarkSequencePoint(doc8, 71, 1, 71, 100)
Dim locbldr3 As LocalBuilder = AddVarIL.DeclareLocal(GetType(System.Int32))
locbldr3.SetLocalSymInfo("stopel")
AddVarIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Sub)
AddVarIL.Emit(OpCodes.Stloc, 3)
AddVarIL.MarkSequencePoint(doc8, 72, 1, 72, 100)
Dim locbldr4 As LocalBuilder = AddVarIL.DeclareLocal(GetType(System.Int32))
locbldr4.SetLocalSymInfo("i")
AddVarIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Stloc, 4)
AddVarIL.MarkSequencePoint(doc8, 74, 1, 74, 100)
Dim locbldr5 As LocalBuilder = AddVarIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").MakeArrayType())
locbldr5.SetLocalSymInfo("destarr")
AddVarIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Conv_U)
AddVarIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"))
AddVarIL.Emit(OpCodes.Stloc, 5)
AddVarIL.MarkSequencePoint(doc8, 76, 1, 76, 100)
Dim label0 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
AddVarIL.MarkSequencePoint(doc8, 77, 1, 77, 100)
Dim label1 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
AddVarIL.MarkSequencePoint(doc8, 79, 1, 79, 100)
AddVarIL.MarkLabel(label0)
AddVarIL.MarkSequencePoint(doc8, 81, 1, 81, 100)
AddVarIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Add)
AddVarIL.Emit(OpCodes.Stloc, 4)
AddVarIL.MarkSequencePoint(doc8, 83, 1, 83, 100)
AddVarIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa0 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
Dim tru0 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
Dim cont0 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
AddVarIL.Emit(OpCodes.Bgt, tru0)
AddVarIL.Emit(OpCodes.Br, fa0)
AddVarIL.MarkLabel(tru0)
AddVarIL.MarkSequencePoint(doc8, 85, 1, 85, 100)
AddVarIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").MakeArrayType()
Typ02 = Typ
AddVarIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddVarIL.Emit(OpCodes.Ldsfld, VarLst)
Typ = VarLst.FieldType
Typ02 = Typ
AddVarIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddVarIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddVarIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").MakeArrayType().GetElementType())
AddVarIL.MarkSequencePoint(doc8, 87, 1, 87, 100)
AddVarIL.Emit(OpCodes.Br, cont0)
AddVarIL.MarkLabel(fa0)
AddVarIL.Emit(OpCodes.Br, cont0)
AddVarIL.MarkLabel(cont0)
AddVarIL.MarkSequencePoint(doc8, 89, 1, 89, 100)
AddVarIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
Dim fa1 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
Dim tru1 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
Dim cont1 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
AddVarIL.Emit(OpCodes.Beq, tru1)
AddVarIL.Emit(OpCodes.Br, fa1)
AddVarIL.MarkLabel(tru1)
AddVarIL.MarkSequencePoint(doc8, 90, 1, 90, 100)
AddVarIL.Emit(OpCodes.Br, label1)
AddVarIL.MarkSequencePoint(doc8, 91, 1, 91, 100)
AddVarIL.Emit(OpCodes.Br, cont1)
AddVarIL.MarkLabel(fa1)
AddVarIL.MarkSequencePoint(doc8, 92, 1, 92, 100)
AddVarIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa2 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
Dim tru2 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
Dim cont2 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
AddVarIL.Emit(OpCodes.Beq, fa2)
AddVarIL.Emit(OpCodes.Br, tru2)
AddVarIL.MarkLabel(tru2)
AddVarIL.MarkSequencePoint(doc8, 93, 1, 93, 100)
AddVarIL.Emit(OpCodes.Br, label0)
AddVarIL.MarkSequencePoint(doc8, 94, 1, 94, 100)
AddVarIL.Emit(OpCodes.Br, cont2)
AddVarIL.MarkLabel(fa2)
AddVarIL.MarkSequencePoint(doc8, 95, 1, 95, 100)
AddVarIL.Emit(OpCodes.Br, label1)
AddVarIL.MarkSequencePoint(doc8, 96, 1, 96, 100)
AddVarIL.Emit(OpCodes.Br, cont2)
AddVarIL.MarkLabel(cont2)
AddVarIL.MarkSequencePoint(doc8, 97, 1, 97, 100)
AddVarIL.Emit(OpCodes.Br, cont1)
AddVarIL.MarkLabel(cont1)
AddVarIL.MarkSequencePoint(doc8, 99, 1, 99, 100)
AddVarIL.MarkLabel(label1)
AddVarIL.MarkSequencePoint(doc8, 101, 1, 101, 100)
AddVarIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").MakeArrayType()
Typ02 = Typ
AddVarIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddVarIL.Emit(OpCodes.Ldloc, 0)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
AddVarIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").MakeArrayType().GetElementType())
AddVarIL.MarkSequencePoint(doc8, 103, 1, 103, 100)
AddVarIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").MakeArrayType()
AddVarIL.Emit(OpCodes.Stsfld, VarLst)
AddVarIL.MarkSequencePoint(doc8, 105, 1, 105, 100)
AddVarIL.Emit(OpCodes.Ret)
Dim typ2(-1) As Type
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = GetType(System.Type).MakeArrayType()
Dim AddTypArr As MethodBuilder = SymTable.DefineMethod("AddTypArr", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ2)
Dim AddTypArrIL As ILGenerator = AddTypArr.GetILGenerator()
Dim AddTypArrparam01 As ParameterBuilder = AddTypArr.DefineParameter(1, ParameterAttributes.None, "arr")
AddTypArrIL.MarkSequencePoint(doc8, 109, 1, 109, 100)
Dim locbldr6 As LocalBuilder = AddTypArrIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr"))
locbldr6.SetLocalSymInfo("vr")
AddTypArrIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr").GetConstructor(Type.EmptyTypes))
AddTypArrIL.Emit(OpCodes.Stloc, 0)
AddTypArrIL.MarkSequencePoint(doc8, 110, 1, 110, 100)
AddTypArrIL.Emit(OpCodes.Ldloc, 0)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr")
AddTypArrIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type).MakeArrayType()
AddTypArrIL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr").GetField("Arr"))
AddTypArrIL.MarkSequencePoint(doc8, 112, 1, 112, 100)
Dim locbldr7 As LocalBuilder = AddTypArrIL.DeclareLocal(GetType(System.Int32))
locbldr7.SetLocalSymInfo("len")
AddTypArrIL.Emit(OpCodes.Ldsfld, TypLst)
Typ = TypLst.FieldType
AddTypArrIL.Emit(OpCodes.Ldlen)
AddTypArrIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddTypArrIL.Emit(OpCodes.Stloc, 1)
AddTypArrIL.MarkSequencePoint(doc8, 113, 1, 113, 100)
Dim locbldr8 As LocalBuilder = AddTypArrIL.DeclareLocal(GetType(System.Int32))
locbldr8.SetLocalSymInfo("destl")
AddTypArrIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddTypArrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddTypArrIL.Emit(OpCodes.Add)
AddTypArrIL.Emit(OpCodes.Stloc, 2)
AddTypArrIL.MarkSequencePoint(doc8, 114, 1, 114, 100)
Dim locbldr9 As LocalBuilder = AddTypArrIL.DeclareLocal(GetType(System.Int32))
locbldr9.SetLocalSymInfo("stopel")
AddTypArrIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddTypArrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddTypArrIL.Emit(OpCodes.Sub)
AddTypArrIL.Emit(OpCodes.Stloc, 3)
AddTypArrIL.MarkSequencePoint(doc8, 115, 1, 115, 100)
Dim locbldr10 As LocalBuilder = AddTypArrIL.DeclareLocal(GetType(System.Int32))
locbldr10.SetLocalSymInfo("i")
AddTypArrIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddTypArrIL.Emit(OpCodes.Stloc, 4)
AddTypArrIL.MarkSequencePoint(doc8, 117, 1, 117, 100)
Dim locbldr11 As LocalBuilder = AddTypArrIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr").MakeArrayType())
locbldr11.SetLocalSymInfo("destarr")
AddTypArrIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddTypArrIL.Emit(OpCodes.Conv_U)
AddTypArrIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr"))
AddTypArrIL.Emit(OpCodes.Stloc, 5)
AddTypArrIL.MarkSequencePoint(doc8, 119, 1, 119, 100)
Dim label2 As System.Reflection.Emit.Label = AddTypArrIL.DefineLabel()
AddTypArrIL.MarkSequencePoint(doc8, 120, 1, 120, 100)
Dim label3 As System.Reflection.Emit.Label = AddTypArrIL.DefineLabel()
AddTypArrIL.MarkSequencePoint(doc8, 122, 1, 122, 100)
AddTypArrIL.MarkLabel(label2)
AddTypArrIL.MarkSequencePoint(doc8, 124, 1, 124, 100)
AddTypArrIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddTypArrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddTypArrIL.Emit(OpCodes.Add)
AddTypArrIL.Emit(OpCodes.Stloc, 4)
AddTypArrIL.MarkSequencePoint(doc8, 126, 1, 126, 100)
AddTypArrIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddTypArrIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa3 As System.Reflection.Emit.Label = AddTypArrIL.DefineLabel()
Dim tru3 As System.Reflection.Emit.Label = AddTypArrIL.DefineLabel()
Dim cont3 As System.Reflection.Emit.Label = AddTypArrIL.DefineLabel()
AddTypArrIL.Emit(OpCodes.Bgt, tru3)
AddTypArrIL.Emit(OpCodes.Br, fa3)
AddTypArrIL.MarkLabel(tru3)
AddTypArrIL.MarkSequencePoint(doc8, 128, 1, 128, 100)
AddTypArrIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr").MakeArrayType()
Typ02 = Typ
AddTypArrIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddTypArrIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddTypArrIL.Emit(OpCodes.Ldsfld, TypLst)
Typ = TypLst.FieldType
Typ02 = Typ
AddTypArrIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddTypArrIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddTypArrIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddTypArrIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr").MakeArrayType().GetElementType())
AddTypArrIL.MarkSequencePoint(doc8, 130, 1, 130, 100)
AddTypArrIL.Emit(OpCodes.Br, cont3)
AddTypArrIL.MarkLabel(fa3)
AddTypArrIL.Emit(OpCodes.Br, cont3)
AddTypArrIL.MarkLabel(cont3)
AddTypArrIL.MarkSequencePoint(doc8, 132, 1, 132, 100)
AddTypArrIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddTypArrIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
Dim fa4 As System.Reflection.Emit.Label = AddTypArrIL.DefineLabel()
Dim tru4 As System.Reflection.Emit.Label = AddTypArrIL.DefineLabel()
Dim cont4 As System.Reflection.Emit.Label = AddTypArrIL.DefineLabel()
AddTypArrIL.Emit(OpCodes.Beq, tru4)
AddTypArrIL.Emit(OpCodes.Br, fa4)
AddTypArrIL.MarkLabel(tru4)
AddTypArrIL.MarkSequencePoint(doc8, 133, 1, 133, 100)
AddTypArrIL.Emit(OpCodes.Br, label3)
AddTypArrIL.MarkSequencePoint(doc8, 134, 1, 134, 100)
AddTypArrIL.Emit(OpCodes.Br, cont4)
AddTypArrIL.MarkLabel(fa4)
AddTypArrIL.MarkSequencePoint(doc8, 135, 1, 135, 100)
AddTypArrIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddTypArrIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa5 As System.Reflection.Emit.Label = AddTypArrIL.DefineLabel()
Dim tru5 As System.Reflection.Emit.Label = AddTypArrIL.DefineLabel()
Dim cont5 As System.Reflection.Emit.Label = AddTypArrIL.DefineLabel()
AddTypArrIL.Emit(OpCodes.Beq, fa5)
AddTypArrIL.Emit(OpCodes.Br, tru5)
AddTypArrIL.MarkLabel(tru5)
AddTypArrIL.MarkSequencePoint(doc8, 136, 1, 136, 100)
AddTypArrIL.Emit(OpCodes.Br, label2)
AddTypArrIL.MarkSequencePoint(doc8, 137, 1, 137, 100)
AddTypArrIL.Emit(OpCodes.Br, cont5)
AddTypArrIL.MarkLabel(fa5)
AddTypArrIL.MarkSequencePoint(doc8, 138, 1, 138, 100)
AddTypArrIL.Emit(OpCodes.Br, label3)
AddTypArrIL.MarkSequencePoint(doc8, 139, 1, 139, 100)
AddTypArrIL.Emit(OpCodes.Br, cont5)
AddTypArrIL.MarkLabel(cont5)
AddTypArrIL.MarkSequencePoint(doc8, 140, 1, 140, 100)
AddTypArrIL.Emit(OpCodes.Br, cont4)
AddTypArrIL.MarkLabel(cont4)
AddTypArrIL.MarkSequencePoint(doc8, 142, 1, 142, 100)
AddTypArrIL.MarkLabel(label3)
AddTypArrIL.MarkSequencePoint(doc8, 144, 1, 144, 100)
AddTypArrIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr").MakeArrayType()
Typ02 = Typ
AddTypArrIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddTypArrIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddTypArrIL.Emit(OpCodes.Ldloc, 0)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr")
AddTypArrIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr").MakeArrayType().GetElementType())
AddTypArrIL.MarkSequencePoint(doc8, 146, 1, 146, 100)
AddTypArrIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr").MakeArrayType()
AddTypArrIL.Emit(OpCodes.Stsfld, TypLst)
AddTypArrIL.MarkSequencePoint(doc8, 148, 1, 148, 100)
AddTypArrIL.Emit(OpCodes.Ret)
Dim PopTypArr As MethodBuilder = SymTable.DefineMethod("PopTypArr", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Type).MakeArrayType(), Type.EmptyTypes)
Dim PopTypArrIL As ILGenerator = PopTypArr.GetILGenerator()
PopTypArrIL.MarkSequencePoint(doc8, 152, 1, 152, 100)
Dim locbldr12 As LocalBuilder = PopTypArrIL.DeclareLocal(GetType(System.Type).MakeArrayType())
locbldr12.SetLocalSymInfo("a")
PopTypArrIL.Emit(OpCodes.Ldnull)
PopTypArrIL.Emit(OpCodes.Stloc, 0)
PopTypArrIL.MarkSequencePoint(doc8, 153, 1, 153, 100)
Dim locbldr13 As LocalBuilder = PopTypArrIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr"))
locbldr13.SetLocalSymInfo("b")
PopTypArrIL.Emit(OpCodes.Ldnull)
PopTypArrIL.Emit(OpCodes.Stloc, 1)
PopTypArrIL.MarkSequencePoint(doc8, 154, 1, 154, 100)
Dim locbldr14 As LocalBuilder = PopTypArrIL.DeclareLocal(GetType(System.Int32))
locbldr14.SetLocalSymInfo("len")
PopTypArrIL.Emit(OpCodes.Ldsfld, TypLst)
Typ = TypLst.FieldType
PopTypArrIL.Emit(OpCodes.Ldlen)
PopTypArrIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
PopTypArrIL.Emit(OpCodes.Stloc, 2)
PopTypArrIL.MarkSequencePoint(doc8, 155, 1, 155, 100)
Dim locbldr15 As LocalBuilder = PopTypArrIL.DeclareLocal(GetType(System.Int32))
locbldr15.SetLocalSymInfo("destl")
PopTypArrIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
PopTypArrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PopTypArrIL.Emit(OpCodes.Sub)
PopTypArrIL.Emit(OpCodes.Stloc, 3)
PopTypArrIL.MarkSequencePoint(doc8, 156, 1, 156, 100)
Dim locbldr16 As LocalBuilder = PopTypArrIL.DeclareLocal(GetType(System.Int32))
locbldr16.SetLocalSymInfo("stopel")
PopTypArrIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
PopTypArrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PopTypArrIL.Emit(OpCodes.Sub)
PopTypArrIL.Emit(OpCodes.Stloc, 4)
PopTypArrIL.MarkSequencePoint(doc8, 157, 1, 157, 100)
Dim locbldr17 As LocalBuilder = PopTypArrIL.DeclareLocal(GetType(System.Int32))
locbldr17.SetLocalSymInfo("i")
PopTypArrIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
PopTypArrIL.Emit(OpCodes.Stloc, 5)
PopTypArrIL.MarkSequencePoint(doc8, 158, 1, 158, 100)
Dim locbldr18 As LocalBuilder = PopTypArrIL.DeclareLocal(GetType(System.Int32))
locbldr18.SetLocalSymInfo("j")
PopTypArrIL.MarkSequencePoint(doc8, 160, 1, 160, 100)
Dim locbldr19 As LocalBuilder = PopTypArrIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr").MakeArrayType())
locbldr19.SetLocalSymInfo("destarr")
PopTypArrIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
PopTypArrIL.Emit(OpCodes.Conv_U)
PopTypArrIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr"))
PopTypArrIL.Emit(OpCodes.Stloc, 7)
PopTypArrIL.MarkSequencePoint(doc8, 162, 1, 162, 100)
Dim label4 As System.Reflection.Emit.Label = PopTypArrIL.DefineLabel()
PopTypArrIL.MarkSequencePoint(doc8, 163, 1, 163, 100)
Dim label5 As System.Reflection.Emit.Label = PopTypArrIL.DefineLabel()
PopTypArrIL.MarkSequencePoint(doc8, 165, 1, 165, 100)
PopTypArrIL.MarkLabel(label4)
PopTypArrIL.MarkSequencePoint(doc8, 167, 1, 167, 100)
PopTypArrIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Int32)
PopTypArrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PopTypArrIL.Emit(OpCodes.Add)
PopTypArrIL.Emit(OpCodes.Stloc, 5)
PopTypArrIL.MarkSequencePoint(doc8, 169, 1, 169, 100)
PopTypArrIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
PopTypArrIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa6 As System.Reflection.Emit.Label = PopTypArrIL.DefineLabel()
Dim tru6 As System.Reflection.Emit.Label = PopTypArrIL.DefineLabel()
Dim cont6 As System.Reflection.Emit.Label = PopTypArrIL.DefineLabel()
PopTypArrIL.Emit(OpCodes.Bgt, tru6)
PopTypArrIL.Emit(OpCodes.Br, fa6)
PopTypArrIL.MarkLabel(tru6)
PopTypArrIL.MarkSequencePoint(doc8, 172, 1, 172, 100)
PopTypArrIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
PopTypArrIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa7 As System.Reflection.Emit.Label = PopTypArrIL.DefineLabel()
Dim tru7 As System.Reflection.Emit.Label = PopTypArrIL.DefineLabel()
Dim cont7 As System.Reflection.Emit.Label = PopTypArrIL.DefineLabel()
PopTypArrIL.Emit(OpCodes.Bgt, tru7)
PopTypArrIL.Emit(OpCodes.Br, fa7)
PopTypArrIL.MarkLabel(tru7)
PopTypArrIL.MarkSequencePoint(doc8, 174, 1, 174, 100)
PopTypArrIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Int32)
PopTypArrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PopTypArrIL.Emit(OpCodes.Sub)
PopTypArrIL.Emit(OpCodes.Stloc, 6)
PopTypArrIL.MarkSequencePoint(doc8, 175, 1, 175, 100)
PopTypArrIL.Emit(OpCodes.Ldloc, 7)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr").MakeArrayType()
Typ02 = Typ
PopTypArrIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
PopTypArrIL.Emit(OpCodes.Conv_U)
Typ = Typ02
PopTypArrIL.Emit(OpCodes.Ldsfld, TypLst)
Typ = TypLst.FieldType
Typ02 = Typ
PopTypArrIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Int32)
PopTypArrIL.Emit(OpCodes.Conv_U)
Typ = Typ02
PopTypArrIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
PopTypArrIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr").MakeArrayType().GetElementType())
PopTypArrIL.MarkSequencePoint(doc8, 177, 1, 177, 100)
PopTypArrIL.Emit(OpCodes.Br, cont7)
PopTypArrIL.MarkLabel(fa7)
PopTypArrIL.Emit(OpCodes.Br, cont7)
PopTypArrIL.MarkLabel(cont7)
PopTypArrIL.MarkSequencePoint(doc8, 179, 1, 179, 100)
PopTypArrIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Int32)
PopTypArrIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
Dim fa8 As System.Reflection.Emit.Label = PopTypArrIL.DefineLabel()
Dim tru8 As System.Reflection.Emit.Label = PopTypArrIL.DefineLabel()
Dim cont8 As System.Reflection.Emit.Label = PopTypArrIL.DefineLabel()
PopTypArrIL.Emit(OpCodes.Beq, tru8)
PopTypArrIL.Emit(OpCodes.Br, fa8)
PopTypArrIL.MarkLabel(tru8)
PopTypArrIL.MarkSequencePoint(doc8, 180, 1, 180, 100)
PopTypArrIL.Emit(OpCodes.Br, label5)
PopTypArrIL.MarkSequencePoint(doc8, 181, 1, 181, 100)
PopTypArrIL.Emit(OpCodes.Br, cont8)
PopTypArrIL.MarkLabel(fa8)
PopTypArrIL.MarkSequencePoint(doc8, 182, 1, 182, 100)
PopTypArrIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
PopTypArrIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa9 As System.Reflection.Emit.Label = PopTypArrIL.DefineLabel()
Dim tru9 As System.Reflection.Emit.Label = PopTypArrIL.DefineLabel()
Dim cont9 As System.Reflection.Emit.Label = PopTypArrIL.DefineLabel()
PopTypArrIL.Emit(OpCodes.Beq, fa9)
PopTypArrIL.Emit(OpCodes.Br, tru9)
PopTypArrIL.MarkLabel(tru9)
PopTypArrIL.MarkSequencePoint(doc8, 183, 1, 183, 100)
PopTypArrIL.Emit(OpCodes.Br, label4)
PopTypArrIL.MarkSequencePoint(doc8, 184, 1, 184, 100)
PopTypArrIL.Emit(OpCodes.Br, cont9)
PopTypArrIL.MarkLabel(fa9)
PopTypArrIL.MarkSequencePoint(doc8, 185, 1, 185, 100)
PopTypArrIL.Emit(OpCodes.Br, label5)
PopTypArrIL.MarkSequencePoint(doc8, 186, 1, 186, 100)
PopTypArrIL.Emit(OpCodes.Br, cont9)
PopTypArrIL.MarkLabel(cont9)
PopTypArrIL.MarkSequencePoint(doc8, 187, 1, 187, 100)
PopTypArrIL.Emit(OpCodes.Br, cont8)
PopTypArrIL.MarkLabel(cont8)
PopTypArrIL.MarkSequencePoint(doc8, 189, 1, 189, 100)
PopTypArrIL.Emit(OpCodes.Br, cont6)
PopTypArrIL.MarkLabel(fa6)
PopTypArrIL.Emit(OpCodes.Br, cont6)
PopTypArrIL.MarkLabel(cont6)
PopTypArrIL.MarkSequencePoint(doc8, 192, 1, 192, 100)
PopTypArrIL.MarkLabel(label5)
PopTypArrIL.MarkSequencePoint(doc8, 194, 1, 194, 100)
PopTypArrIL.Emit(OpCodes.Ldsfld, TypLst)
Typ = TypLst.FieldType
Typ02 = Typ
PopTypArrIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
PopTypArrIL.Emit(OpCodes.Conv_U)
Typ = Typ02
PopTypArrIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
PopTypArrIL.Emit(OpCodes.Stloc, 1)
PopTypArrIL.MarkSequencePoint(doc8, 195, 1, 195, 100)
PopTypArrIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr")
PopTypArrIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr").GetField("Arr"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr").GetField("Arr").FieldType
PopTypArrIL.Emit(OpCodes.Stloc, 0)
PopTypArrIL.MarkSequencePoint(doc8, 197, 1, 197, 100)
PopTypArrIL.Emit(OpCodes.Ldloc, 7)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr").MakeArrayType()
PopTypArrIL.Emit(OpCodes.Stsfld, TypLst)
PopTypArrIL.MarkSequencePoint(doc8, 199, 1, 199, 100)
PopTypArrIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type).MakeArrayType()
PopTypArrIL.MarkSequencePoint(doc8, 201, 1, 201, 100)
PopTypArrIL.Emit(OpCodes.Ret)
Dim typ3(-1) As Type
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = GetType(System.String)
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = GetType(System.Type)
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = GetType(FieldBuilder)
Dim AddFld As MethodBuilder = SymTable.DefineMethod("AddFld", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ3)
Dim AddFldIL As ILGenerator = AddFld.GetILGenerator()
Dim AddFldparam01 As ParameterBuilder = AddFld.DefineParameter(1, ParameterAttributes.None, "nme")
Dim AddFldparam02 As ParameterBuilder = AddFld.DefineParameter(2, ParameterAttributes.None, "typ")
Dim AddFldparam03 As ParameterBuilder = AddFld.DefineParameter(3, ParameterAttributes.None, "fld")
AddFldIL.MarkSequencePoint(doc8, 206, 1, 206, 100)
Dim locbldr20 As LocalBuilder = AddFldIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
locbldr20.SetLocalSymInfo("vr")
Dim typ4(-1) As Type
AddFldIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
AddFldIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
AddFldIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(FieldBuilder)
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
AddFldIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").GetConstructor(typ4))
AddFldIL.Emit(OpCodes.Stloc, 0)
AddFldIL.MarkSequencePoint(doc8, 208, 1, 208, 100)
Dim locbldr21 As LocalBuilder = AddFldIL.DeclareLocal(GetType(System.Int32))
locbldr21.SetLocalSymInfo("len")
AddFldIL.Emit(OpCodes.Ldsfld, FldLst)
Typ = FldLst.FieldType
AddFldIL.Emit(OpCodes.Ldlen)
AddFldIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Stloc, 1)
AddFldIL.MarkSequencePoint(doc8, 209, 1, 209, 100)
Dim locbldr22 As LocalBuilder = AddFldIL.DeclareLocal(GetType(System.Int32))
locbldr22.SetLocalSymInfo("destl")
AddFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Add)
AddFldIL.Emit(OpCodes.Stloc, 2)
AddFldIL.MarkSequencePoint(doc8, 210, 1, 210, 100)
Dim locbldr23 As LocalBuilder = AddFldIL.DeclareLocal(GetType(System.Int32))
locbldr23.SetLocalSymInfo("stopel")
AddFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Sub)
AddFldIL.Emit(OpCodes.Stloc, 3)
AddFldIL.MarkSequencePoint(doc8, 211, 1, 211, 100)
Dim locbldr24 As LocalBuilder = AddFldIL.DeclareLocal(GetType(System.Int32))
locbldr24.SetLocalSymInfo("i")
AddFldIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Stloc, 4)
AddFldIL.MarkSequencePoint(doc8, 213, 1, 213, 100)
Dim locbldr25 As LocalBuilder = AddFldIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType())
locbldr25.SetLocalSymInfo("destarr")
AddFldIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Conv_U)
AddFldIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
AddFldIL.Emit(OpCodes.Stloc, 5)
AddFldIL.MarkSequencePoint(doc8, 215, 1, 215, 100)
Dim label6 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
AddFldIL.MarkSequencePoint(doc8, 216, 1, 216, 100)
Dim label7 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
AddFldIL.MarkSequencePoint(doc8, 218, 1, 218, 100)
AddFldIL.MarkLabel(label6)
AddFldIL.MarkSequencePoint(doc8, 220, 1, 220, 100)
AddFldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Add)
AddFldIL.Emit(OpCodes.Stloc, 4)
AddFldIL.MarkSequencePoint(doc8, 222, 1, 222, 100)
AddFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa10 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
Dim tru10 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
Dim cont10 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
AddFldIL.Emit(OpCodes.Bgt, tru10)
AddFldIL.Emit(OpCodes.Br, fa10)
AddFldIL.MarkLabel(tru10)
AddFldIL.MarkSequencePoint(doc8, 224, 1, 224, 100)
AddFldIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType()
Typ02 = Typ
AddFldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddFldIL.Emit(OpCodes.Ldsfld, FldLst)
Typ = FldLst.FieldType
Typ02 = Typ
AddFldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddFldIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddFldIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType().GetElementType())
AddFldIL.MarkSequencePoint(doc8, 226, 1, 226, 100)
AddFldIL.Emit(OpCodes.Br, cont10)
AddFldIL.MarkLabel(fa10)
AddFldIL.Emit(OpCodes.Br, cont10)
AddFldIL.MarkLabel(cont10)
AddFldIL.MarkSequencePoint(doc8, 228, 1, 228, 100)
AddFldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
Dim fa11 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
Dim tru11 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
Dim cont11 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
AddFldIL.Emit(OpCodes.Beq, tru11)
AddFldIL.Emit(OpCodes.Br, fa11)
AddFldIL.MarkLabel(tru11)
AddFldIL.MarkSequencePoint(doc8, 229, 1, 229, 100)
AddFldIL.Emit(OpCodes.Br, label7)
AddFldIL.MarkSequencePoint(doc8, 230, 1, 230, 100)
AddFldIL.Emit(OpCodes.Br, cont11)
AddFldIL.MarkLabel(fa11)
AddFldIL.MarkSequencePoint(doc8, 231, 1, 231, 100)
AddFldIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa12 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
Dim tru12 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
Dim cont12 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
AddFldIL.Emit(OpCodes.Beq, fa12)
AddFldIL.Emit(OpCodes.Br, tru12)
AddFldIL.MarkLabel(tru12)
AddFldIL.MarkSequencePoint(doc8, 232, 1, 232, 100)
AddFldIL.Emit(OpCodes.Br, label6)
AddFldIL.MarkSequencePoint(doc8, 233, 1, 233, 100)
AddFldIL.Emit(OpCodes.Br, cont12)
AddFldIL.MarkLabel(fa12)
AddFldIL.MarkSequencePoint(doc8, 234, 1, 234, 100)
AddFldIL.Emit(OpCodes.Br, label7)
AddFldIL.MarkSequencePoint(doc8, 235, 1, 235, 100)
AddFldIL.Emit(OpCodes.Br, cont12)
AddFldIL.MarkLabel(cont12)
AddFldIL.MarkSequencePoint(doc8, 236, 1, 236, 100)
AddFldIL.Emit(OpCodes.Br, cont11)
AddFldIL.MarkLabel(cont11)
AddFldIL.MarkSequencePoint(doc8, 238, 1, 238, 100)
AddFldIL.MarkLabel(label7)
AddFldIL.MarkSequencePoint(doc8, 240, 1, 240, 100)
AddFldIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType()
Typ02 = Typ
AddFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddFldIL.Emit(OpCodes.Ldloc, 0)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem")
AddFldIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType().GetElementType())
AddFldIL.MarkSequencePoint(doc8, 242, 1, 242, 100)
AddFldIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType()
AddFldIL.Emit(OpCodes.Stsfld, FldLst)
AddFldIL.MarkSequencePoint(doc8, 244, 1, 244, 100)
AddFldIL.Emit(OpCodes.Ret)
Dim typ5(-1) As Type
ReDim Preserve typ5(UBound(typ5) + 1)
typ5(UBound(typ5)) = GetType(System.String)
ReDim Preserve typ5(UBound(typ5) + 1)
typ5(UBound(typ5)) = GetType(System.Type)
ReDim Preserve typ5(UBound(typ5) + 1)
typ5(UBound(typ5)) = GetType(FieldBuilder)
Dim AddNestedFld As MethodBuilder = SymTable.DefineMethod("AddNestedFld", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ5)
Dim AddNestedFldIL As ILGenerator = AddNestedFld.GetILGenerator()
Dim AddNestedFldparam01 As ParameterBuilder = AddNestedFld.DefineParameter(1, ParameterAttributes.None, "nme")
Dim AddNestedFldparam02 As ParameterBuilder = AddNestedFld.DefineParameter(2, ParameterAttributes.None, "typ")
Dim AddNestedFldparam03 As ParameterBuilder = AddNestedFld.DefineParameter(3, ParameterAttributes.None, "fld")
AddNestedFldIL.MarkSequencePoint(doc8, 248, 1, 248, 100)
Dim locbldr26 As LocalBuilder = AddNestedFldIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
locbldr26.SetLocalSymInfo("vr")
Dim typ6(-1) As Type
AddNestedFldIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = Typ
AddNestedFldIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = Typ
AddNestedFldIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(FieldBuilder)
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = Typ
AddNestedFldIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").GetConstructor(typ6))
AddNestedFldIL.Emit(OpCodes.Stloc, 0)
AddNestedFldIL.MarkSequencePoint(doc8, 250, 1, 250, 100)
Dim locbldr27 As LocalBuilder = AddNestedFldIL.DeclareLocal(GetType(System.Int32))
locbldr27.SetLocalSymInfo("len")
AddNestedFldIL.Emit(OpCodes.Ldsfld, NestedFldLst)
Typ = NestedFldLst.FieldType
AddNestedFldIL.Emit(OpCodes.Ldlen)
AddNestedFldIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Stloc, 1)
AddNestedFldIL.MarkSequencePoint(doc8, 251, 1, 251, 100)
Dim locbldr28 As LocalBuilder = AddNestedFldIL.DeclareLocal(GetType(System.Int32))
locbldr28.SetLocalSymInfo("destl")
AddNestedFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Add)
AddNestedFldIL.Emit(OpCodes.Stloc, 2)
AddNestedFldIL.MarkSequencePoint(doc8, 252, 1, 252, 100)
Dim locbldr29 As LocalBuilder = AddNestedFldIL.DeclareLocal(GetType(System.Int32))
locbldr29.SetLocalSymInfo("stopel")
AddNestedFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Sub)
AddNestedFldIL.Emit(OpCodes.Stloc, 3)
AddNestedFldIL.MarkSequencePoint(doc8, 253, 1, 253, 100)
Dim locbldr30 As LocalBuilder = AddNestedFldIL.DeclareLocal(GetType(System.Int32))
locbldr30.SetLocalSymInfo("i")
AddNestedFldIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Stloc, 4)
AddNestedFldIL.MarkSequencePoint(doc8, 255, 1, 255, 100)
Dim locbldr31 As LocalBuilder = AddNestedFldIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType())
locbldr31.SetLocalSymInfo("destarr")
AddNestedFldIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Conv_U)
AddNestedFldIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
AddNestedFldIL.Emit(OpCodes.Stloc, 5)
AddNestedFldIL.MarkSequencePoint(doc8, 257, 1, 257, 100)
Dim label8 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
AddNestedFldIL.MarkSequencePoint(doc8, 258, 1, 258, 100)
Dim label9 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
AddNestedFldIL.MarkSequencePoint(doc8, 260, 1, 260, 100)
AddNestedFldIL.MarkLabel(label8)
AddNestedFldIL.MarkSequencePoint(doc8, 262, 1, 262, 100)
AddNestedFldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Add)
AddNestedFldIL.Emit(OpCodes.Stloc, 4)
AddNestedFldIL.MarkSequencePoint(doc8, 264, 1, 264, 100)
AddNestedFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa13 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
Dim tru13 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
Dim cont13 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
AddNestedFldIL.Emit(OpCodes.Bgt, tru13)
AddNestedFldIL.Emit(OpCodes.Br, fa13)
AddNestedFldIL.MarkLabel(tru13)
AddNestedFldIL.MarkSequencePoint(doc8, 266, 1, 266, 100)
AddNestedFldIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType()
Typ02 = Typ
AddNestedFldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNestedFldIL.Emit(OpCodes.Ldsfld, NestedFldLst)
Typ = NestedFldLst.FieldType
Typ02 = Typ
AddNestedFldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNestedFldIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddNestedFldIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType().GetElementType())
AddNestedFldIL.MarkSequencePoint(doc8, 268, 1, 268, 100)
AddNestedFldIL.Emit(OpCodes.Br, cont13)
AddNestedFldIL.MarkLabel(fa13)
AddNestedFldIL.Emit(OpCodes.Br, cont13)
AddNestedFldIL.MarkLabel(cont13)
AddNestedFldIL.MarkSequencePoint(doc8, 270, 1, 270, 100)
AddNestedFldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
Dim fa14 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
Dim tru14 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
Dim cont14 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
AddNestedFldIL.Emit(OpCodes.Beq, tru14)
AddNestedFldIL.Emit(OpCodes.Br, fa14)
AddNestedFldIL.MarkLabel(tru14)
AddNestedFldIL.MarkSequencePoint(doc8, 271, 1, 271, 100)
AddNestedFldIL.Emit(OpCodes.Br, label9)
AddNestedFldIL.MarkSequencePoint(doc8, 272, 1, 272, 100)
AddNestedFldIL.Emit(OpCodes.Br, cont14)
AddNestedFldIL.MarkLabel(fa14)
AddNestedFldIL.MarkSequencePoint(doc8, 273, 1, 273, 100)
AddNestedFldIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa15 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
Dim tru15 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
Dim cont15 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
AddNestedFldIL.Emit(OpCodes.Beq, fa15)
AddNestedFldIL.Emit(OpCodes.Br, tru15)
AddNestedFldIL.MarkLabel(tru15)
AddNestedFldIL.MarkSequencePoint(doc8, 274, 1, 274, 100)
AddNestedFldIL.Emit(OpCodes.Br, label8)
AddNestedFldIL.MarkSequencePoint(doc8, 275, 1, 275, 100)
AddNestedFldIL.Emit(OpCodes.Br, cont15)
AddNestedFldIL.MarkLabel(fa15)
AddNestedFldIL.MarkSequencePoint(doc8, 276, 1, 276, 100)
AddNestedFldIL.Emit(OpCodes.Br, label9)
AddNestedFldIL.MarkSequencePoint(doc8, 277, 1, 277, 100)
AddNestedFldIL.Emit(OpCodes.Br, cont15)
AddNestedFldIL.MarkLabel(cont15)
AddNestedFldIL.MarkSequencePoint(doc8, 278, 1, 278, 100)
AddNestedFldIL.Emit(OpCodes.Br, cont14)
AddNestedFldIL.MarkLabel(cont14)
AddNestedFldIL.MarkSequencePoint(doc8, 280, 1, 280, 100)
AddNestedFldIL.MarkLabel(label9)
AddNestedFldIL.MarkSequencePoint(doc8, 282, 1, 282, 100)
AddNestedFldIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType()
Typ02 = Typ
AddNestedFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNestedFldIL.Emit(OpCodes.Ldloc, 0)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem")
AddNestedFldIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType().GetElementType())
AddNestedFldIL.MarkSequencePoint(doc8, 284, 1, 284, 100)
AddNestedFldIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType()
AddNestedFldIL.Emit(OpCodes.Stsfld, NestedFldLst)
AddNestedFldIL.MarkSequencePoint(doc8, 286, 1, 286, 100)
AddNestedFldIL.Emit(OpCodes.Ret)
Dim typ7(-1) As Type
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = GetType(System.String)
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = GetType(System.Type)
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = GetType(System.Type).MakeArrayType()
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = GetType(MethodBuilder)
Dim AddMet As MethodBuilder = SymTable.DefineMethod("AddMet", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ7)
Dim AddMetIL As ILGenerator = AddMet.GetILGenerator()
Dim AddMetparam01 As ParameterBuilder = AddMet.DefineParameter(1, ParameterAttributes.None, "nme")
Dim AddMetparam02 As ParameterBuilder = AddMet.DefineParameter(2, ParameterAttributes.None, "typ")
Dim AddMetparam03 As ParameterBuilder = AddMet.DefineParameter(3, ParameterAttributes.None, "ptyps")
Dim AddMetparam04 As ParameterBuilder = AddMet.DefineParameter(4, ParameterAttributes.None, "met")
AddMetIL.MarkSequencePoint(doc8, 291, 1, 291, 100)
Dim locbldr32 As LocalBuilder = AddMetIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
locbldr32.SetLocalSymInfo("vr")
Dim typ8(-1) As Type
AddMetIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = Typ
AddMetIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = Typ
AddMetIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = Typ
AddMetIL.Emit(OpCodes.Ldarg, 3)
Typ = GetType(MethodBuilder)
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = Typ
AddMetIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").GetConstructor(typ8))
AddMetIL.Emit(OpCodes.Stloc, 0)
AddMetIL.MarkSequencePoint(doc8, 293, 1, 293, 100)
Dim locbldr33 As LocalBuilder = AddMetIL.DeclareLocal(GetType(System.Int32))
locbldr33.SetLocalSymInfo("len")
AddMetIL.Emit(OpCodes.Ldsfld, MetLst)
Typ = MetLst.FieldType
AddMetIL.Emit(OpCodes.Ldlen)
AddMetIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Stloc, 1)
AddMetIL.MarkSequencePoint(doc8, 294, 1, 294, 100)
Dim locbldr34 As LocalBuilder = AddMetIL.DeclareLocal(GetType(System.Int32))
locbldr34.SetLocalSymInfo("destl")
AddMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Add)
AddMetIL.Emit(OpCodes.Stloc, 2)
AddMetIL.MarkSequencePoint(doc8, 295, 1, 295, 100)
Dim locbldr35 As LocalBuilder = AddMetIL.DeclareLocal(GetType(System.Int32))
locbldr35.SetLocalSymInfo("stopel")
AddMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Sub)
AddMetIL.Emit(OpCodes.Stloc, 3)
AddMetIL.MarkSequencePoint(doc8, 296, 1, 296, 100)
Dim locbldr36 As LocalBuilder = AddMetIL.DeclareLocal(GetType(System.Int32))
locbldr36.SetLocalSymInfo("i")
AddMetIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Stloc, 4)
AddMetIL.MarkSequencePoint(doc8, 298, 1, 298, 100)
Dim locbldr37 As LocalBuilder = AddMetIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType())
locbldr37.SetLocalSymInfo("destarr")
AddMetIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Conv_U)
AddMetIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
AddMetIL.Emit(OpCodes.Stloc, 5)
AddMetIL.MarkSequencePoint(doc8, 300, 1, 300, 100)
Dim label10 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
AddMetIL.MarkSequencePoint(doc8, 301, 1, 301, 100)
Dim label11 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
AddMetIL.MarkSequencePoint(doc8, 303, 1, 303, 100)
AddMetIL.MarkLabel(label10)
AddMetIL.MarkSequencePoint(doc8, 305, 1, 305, 100)
AddMetIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Add)
AddMetIL.Emit(OpCodes.Stloc, 4)
AddMetIL.MarkSequencePoint(doc8, 307, 1, 307, 100)
AddMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa16 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
Dim tru16 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
Dim cont16 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
AddMetIL.Emit(OpCodes.Bgt, tru16)
AddMetIL.Emit(OpCodes.Br, fa16)
AddMetIL.MarkLabel(tru16)
AddMetIL.MarkSequencePoint(doc8, 309, 1, 309, 100)
AddMetIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType()
Typ02 = Typ
AddMetIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddMetIL.Emit(OpCodes.Ldsfld, MetLst)
Typ = MetLst.FieldType
Typ02 = Typ
AddMetIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddMetIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddMetIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType().GetElementType())
AddMetIL.MarkSequencePoint(doc8, 311, 1, 311, 100)
AddMetIL.Emit(OpCodes.Br, cont16)
AddMetIL.MarkLabel(fa16)
AddMetIL.Emit(OpCodes.Br, cont16)
AddMetIL.MarkLabel(cont16)
AddMetIL.MarkSequencePoint(doc8, 313, 1, 313, 100)
AddMetIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
Dim fa17 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
Dim tru17 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
Dim cont17 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
AddMetIL.Emit(OpCodes.Beq, tru17)
AddMetIL.Emit(OpCodes.Br, fa17)
AddMetIL.MarkLabel(tru17)
AddMetIL.MarkSequencePoint(doc8, 314, 1, 314, 100)
AddMetIL.Emit(OpCodes.Br, label11)
AddMetIL.MarkSequencePoint(doc8, 315, 1, 315, 100)
AddMetIL.Emit(OpCodes.Br, cont17)
AddMetIL.MarkLabel(fa17)
AddMetIL.MarkSequencePoint(doc8, 316, 1, 316, 100)
AddMetIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa18 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
Dim tru18 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
Dim cont18 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
AddMetIL.Emit(OpCodes.Beq, fa18)
AddMetIL.Emit(OpCodes.Br, tru18)
AddMetIL.MarkLabel(tru18)
AddMetIL.MarkSequencePoint(doc8, 317, 1, 317, 100)
AddMetIL.Emit(OpCodes.Br, label10)
AddMetIL.MarkSequencePoint(doc8, 318, 1, 318, 100)
AddMetIL.Emit(OpCodes.Br, cont18)
AddMetIL.MarkLabel(fa18)
AddMetIL.MarkSequencePoint(doc8, 319, 1, 319, 100)
AddMetIL.Emit(OpCodes.Br, label11)
AddMetIL.MarkSequencePoint(doc8, 320, 1, 320, 100)
AddMetIL.Emit(OpCodes.Br, cont18)
AddMetIL.MarkLabel(cont18)
AddMetIL.MarkSequencePoint(doc8, 321, 1, 321, 100)
AddMetIL.Emit(OpCodes.Br, cont17)
AddMetIL.MarkLabel(cont17)
AddMetIL.MarkSequencePoint(doc8, 323, 1, 323, 100)
AddMetIL.MarkLabel(label11)
AddMetIL.MarkSequencePoint(doc8, 325, 1, 325, 100)
AddMetIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType()
Typ02 = Typ
AddMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddMetIL.Emit(OpCodes.Ldloc, 0)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem")
AddMetIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType().GetElementType())
AddMetIL.MarkSequencePoint(doc8, 327, 1, 327, 100)
AddMetIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType()
AddMetIL.Emit(OpCodes.Stsfld, MetLst)
AddMetIL.MarkSequencePoint(doc8, 329, 1, 329, 100)
AddMetIL.Emit(OpCodes.Ret)
Dim typ9(-1) As Type
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = GetType(System.String)
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = GetType(System.Type)
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = GetType(System.Type).MakeArrayType()
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = GetType(MethodBuilder)
Dim AddNestedMet As MethodBuilder = SymTable.DefineMethod("AddNestedMet", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ9)
Dim AddNestedMetIL As ILGenerator = AddNestedMet.GetILGenerator()
Dim AddNestedMetparam01 As ParameterBuilder = AddNestedMet.DefineParameter(1, ParameterAttributes.None, "nme")
Dim AddNestedMetparam02 As ParameterBuilder = AddNestedMet.DefineParameter(2, ParameterAttributes.None, "typ")
Dim AddNestedMetparam03 As ParameterBuilder = AddNestedMet.DefineParameter(3, ParameterAttributes.None, "ptyps")
Dim AddNestedMetparam04 As ParameterBuilder = AddNestedMet.DefineParameter(4, ParameterAttributes.None, "met")
AddNestedMetIL.MarkSequencePoint(doc8, 334, 1, 334, 100)
Dim locbldr38 As LocalBuilder = AddNestedMetIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
locbldr38.SetLocalSymInfo("vr")
Dim typ10(-1) As Type
AddNestedMetIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ10(UBound(typ10) + 1)
typ10(UBound(typ10)) = Typ
AddNestedMetIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ10(UBound(typ10) + 1)
typ10(UBound(typ10)) = Typ
AddNestedMetIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ10(UBound(typ10) + 1)
typ10(UBound(typ10)) = Typ
AddNestedMetIL.Emit(OpCodes.Ldarg, 3)
Typ = GetType(MethodBuilder)
ReDim Preserve typ10(UBound(typ10) + 1)
typ10(UBound(typ10)) = Typ
AddNestedMetIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").GetConstructor(typ10))
AddNestedMetIL.Emit(OpCodes.Stloc, 0)
AddNestedMetIL.MarkSequencePoint(doc8, 336, 1, 336, 100)
Dim locbldr39 As LocalBuilder = AddNestedMetIL.DeclareLocal(GetType(System.Int32))
locbldr39.SetLocalSymInfo("len")
AddNestedMetIL.Emit(OpCodes.Ldsfld, NestedMetLst)
Typ = NestedMetLst.FieldType
AddNestedMetIL.Emit(OpCodes.Ldlen)
AddNestedMetIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Stloc, 1)
AddNestedMetIL.MarkSequencePoint(doc8, 337, 1, 337, 100)
Dim locbldr40 As LocalBuilder = AddNestedMetIL.DeclareLocal(GetType(System.Int32))
locbldr40.SetLocalSymInfo("destl")
AddNestedMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Add)
AddNestedMetIL.Emit(OpCodes.Stloc, 2)
AddNestedMetIL.MarkSequencePoint(doc8, 338, 1, 338, 100)
Dim locbldr41 As LocalBuilder = AddNestedMetIL.DeclareLocal(GetType(System.Int32))
locbldr41.SetLocalSymInfo("stopel")
AddNestedMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Sub)
AddNestedMetIL.Emit(OpCodes.Stloc, 3)
AddNestedMetIL.MarkSequencePoint(doc8, 339, 1, 339, 100)
Dim locbldr42 As LocalBuilder = AddNestedMetIL.DeclareLocal(GetType(System.Int32))
locbldr42.SetLocalSymInfo("i")
AddNestedMetIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Stloc, 4)
AddNestedMetIL.MarkSequencePoint(doc8, 341, 1, 341, 100)
Dim locbldr43 As LocalBuilder = AddNestedMetIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType())
locbldr43.SetLocalSymInfo("destarr")
AddNestedMetIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Conv_U)
AddNestedMetIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
AddNestedMetIL.Emit(OpCodes.Stloc, 5)
AddNestedMetIL.MarkSequencePoint(doc8, 343, 1, 343, 100)
Dim label12 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
AddNestedMetIL.MarkSequencePoint(doc8, 344, 1, 344, 100)
Dim label13 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
AddNestedMetIL.MarkSequencePoint(doc8, 346, 1, 346, 100)
AddNestedMetIL.MarkLabel(label12)
AddNestedMetIL.MarkSequencePoint(doc8, 348, 1, 348, 100)
AddNestedMetIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Add)
AddNestedMetIL.Emit(OpCodes.Stloc, 4)
AddNestedMetIL.MarkSequencePoint(doc8, 350, 1, 350, 100)
AddNestedMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa19 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
Dim tru19 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
Dim cont19 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
AddNestedMetIL.Emit(OpCodes.Bgt, tru19)
AddNestedMetIL.Emit(OpCodes.Br, fa19)
AddNestedMetIL.MarkLabel(tru19)
AddNestedMetIL.MarkSequencePoint(doc8, 352, 1, 352, 100)
AddNestedMetIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType()
Typ02 = Typ
AddNestedMetIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNestedMetIL.Emit(OpCodes.Ldsfld, NestedMetLst)
Typ = NestedMetLst.FieldType
Typ02 = Typ
AddNestedMetIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNestedMetIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddNestedMetIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType().GetElementType())
AddNestedMetIL.MarkSequencePoint(doc8, 354, 1, 354, 100)
AddNestedMetIL.Emit(OpCodes.Br, cont19)
AddNestedMetIL.MarkLabel(fa19)
AddNestedMetIL.Emit(OpCodes.Br, cont19)
AddNestedMetIL.MarkLabel(cont19)
AddNestedMetIL.MarkSequencePoint(doc8, 356, 1, 356, 100)
AddNestedMetIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
Dim fa20 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
Dim tru20 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
Dim cont20 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
AddNestedMetIL.Emit(OpCodes.Beq, tru20)
AddNestedMetIL.Emit(OpCodes.Br, fa20)
AddNestedMetIL.MarkLabel(tru20)
AddNestedMetIL.MarkSequencePoint(doc8, 357, 1, 357, 100)
AddNestedMetIL.Emit(OpCodes.Br, label13)
AddNestedMetIL.MarkSequencePoint(doc8, 358, 1, 358, 100)
AddNestedMetIL.Emit(OpCodes.Br, cont20)
AddNestedMetIL.MarkLabel(fa20)
AddNestedMetIL.MarkSequencePoint(doc8, 359, 1, 359, 100)
AddNestedMetIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa21 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
Dim tru21 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
Dim cont21 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
AddNestedMetIL.Emit(OpCodes.Beq, fa21)
AddNestedMetIL.Emit(OpCodes.Br, tru21)
AddNestedMetIL.MarkLabel(tru21)
AddNestedMetIL.MarkSequencePoint(doc8, 360, 1, 360, 100)
AddNestedMetIL.Emit(OpCodes.Br, label12)
AddNestedMetIL.MarkSequencePoint(doc8, 361, 1, 361, 100)
AddNestedMetIL.Emit(OpCodes.Br, cont21)
AddNestedMetIL.MarkLabel(fa21)
AddNestedMetIL.MarkSequencePoint(doc8, 362, 1, 362, 100)
AddNestedMetIL.Emit(OpCodes.Br, label13)
AddNestedMetIL.MarkSequencePoint(doc8, 363, 1, 363, 100)
AddNestedMetIL.Emit(OpCodes.Br, cont21)
AddNestedMetIL.MarkLabel(cont21)
AddNestedMetIL.MarkSequencePoint(doc8, 364, 1, 364, 100)
AddNestedMetIL.Emit(OpCodes.Br, cont20)
AddNestedMetIL.MarkLabel(cont20)
AddNestedMetIL.MarkSequencePoint(doc8, 366, 1, 366, 100)
AddNestedMetIL.MarkLabel(label13)
AddNestedMetIL.MarkSequencePoint(doc8, 368, 1, 368, 100)
AddNestedMetIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType()
Typ02 = Typ
AddNestedMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNestedMetIL.Emit(OpCodes.Ldloc, 0)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem")
AddNestedMetIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType().GetElementType())
AddNestedMetIL.MarkSequencePoint(doc8, 370, 1, 370, 100)
AddNestedMetIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType()
AddNestedMetIL.Emit(OpCodes.Stsfld, NestedMetLst)
AddNestedMetIL.MarkSequencePoint(doc8, 372, 1, 372, 100)
AddNestedMetIL.Emit(OpCodes.Ret)
Dim typ11(-1) As Type
ReDim Preserve typ11(UBound(typ11) + 1)
typ11(UBound(typ11)) = GetType(System.Type).MakeArrayType()
ReDim Preserve typ11(UBound(typ11) + 1)
typ11(UBound(typ11)) = GetType(ConstructorBuilder)
Dim AddCtor As MethodBuilder = SymTable.DefineMethod("AddCtor", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ11)
Dim AddCtorIL As ILGenerator = AddCtor.GetILGenerator()
Dim AddCtorparam01 As ParameterBuilder = AddCtor.DefineParameter(1, ParameterAttributes.None, "ptyps")
Dim AddCtorparam02 As ParameterBuilder = AddCtor.DefineParameter(2, ParameterAttributes.None, "met")
AddCtorIL.MarkSequencePoint(doc8, 377, 1, 377, 100)
Dim locbldr44 As LocalBuilder = AddCtorIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
locbldr44.SetLocalSymInfo("vr")
Dim typ12(-1) As Type
AddCtorIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ12(UBound(typ12) + 1)
typ12(UBound(typ12)) = Typ
AddCtorIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(ConstructorBuilder)
ReDim Preserve typ12(UBound(typ12) + 1)
typ12(UBound(typ12)) = Typ
AddCtorIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").GetConstructor(typ12))
AddCtorIL.Emit(OpCodes.Stloc, 0)
AddCtorIL.MarkSequencePoint(doc8, 379, 1, 379, 100)
Dim locbldr45 As LocalBuilder = AddCtorIL.DeclareLocal(GetType(System.Int32))
locbldr45.SetLocalSymInfo("len")
AddCtorIL.Emit(OpCodes.Ldsfld, CtorLst)
Typ = CtorLst.FieldType
AddCtorIL.Emit(OpCodes.Ldlen)
AddCtorIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Stloc, 1)
AddCtorIL.MarkSequencePoint(doc8, 380, 1, 380, 100)
Dim locbldr46 As LocalBuilder = AddCtorIL.DeclareLocal(GetType(System.Int32))
locbldr46.SetLocalSymInfo("destl")
AddCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Add)
AddCtorIL.Emit(OpCodes.Stloc, 2)
AddCtorIL.MarkSequencePoint(doc8, 381, 1, 381, 100)
Dim locbldr47 As LocalBuilder = AddCtorIL.DeclareLocal(GetType(System.Int32))
locbldr47.SetLocalSymInfo("stopel")
AddCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Sub)
AddCtorIL.Emit(OpCodes.Stloc, 3)
AddCtorIL.MarkSequencePoint(doc8, 382, 1, 382, 100)
Dim locbldr48 As LocalBuilder = AddCtorIL.DeclareLocal(GetType(System.Int32))
locbldr48.SetLocalSymInfo("i")
AddCtorIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Stloc, 4)
AddCtorIL.MarkSequencePoint(doc8, 384, 1, 384, 100)
Dim locbldr49 As LocalBuilder = AddCtorIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType())
locbldr49.SetLocalSymInfo("destarr")
AddCtorIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Conv_U)
AddCtorIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
AddCtorIL.Emit(OpCodes.Stloc, 5)
AddCtorIL.MarkSequencePoint(doc8, 386, 1, 386, 100)
Dim label14 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
AddCtorIL.MarkSequencePoint(doc8, 387, 1, 387, 100)
Dim label15 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
AddCtorIL.MarkSequencePoint(doc8, 389, 1, 389, 100)
AddCtorIL.MarkLabel(label14)
AddCtorIL.MarkSequencePoint(doc8, 391, 1, 391, 100)
AddCtorIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Add)
AddCtorIL.Emit(OpCodes.Stloc, 4)
AddCtorIL.MarkSequencePoint(doc8, 393, 1, 393, 100)
AddCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa22 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
Dim tru22 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
Dim cont22 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
AddCtorIL.Emit(OpCodes.Bgt, tru22)
AddCtorIL.Emit(OpCodes.Br, fa22)
AddCtorIL.MarkLabel(tru22)
AddCtorIL.MarkSequencePoint(doc8, 395, 1, 395, 100)
AddCtorIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType()
Typ02 = Typ
AddCtorIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddCtorIL.Emit(OpCodes.Ldsfld, CtorLst)
Typ = CtorLst.FieldType
Typ02 = Typ
AddCtorIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddCtorIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddCtorIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType().GetElementType())
AddCtorIL.MarkSequencePoint(doc8, 397, 1, 397, 100)
AddCtorIL.Emit(OpCodes.Br, cont22)
AddCtorIL.MarkLabel(fa22)
AddCtorIL.Emit(OpCodes.Br, cont22)
AddCtorIL.MarkLabel(cont22)
AddCtorIL.MarkSequencePoint(doc8, 399, 1, 399, 100)
AddCtorIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
Dim fa23 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
Dim tru23 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
Dim cont23 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
AddCtorIL.Emit(OpCodes.Beq, tru23)
AddCtorIL.Emit(OpCodes.Br, fa23)
AddCtorIL.MarkLabel(tru23)
AddCtorIL.MarkSequencePoint(doc8, 400, 1, 400, 100)
AddCtorIL.Emit(OpCodes.Br, label15)
AddCtorIL.MarkSequencePoint(doc8, 401, 1, 401, 100)
AddCtorIL.Emit(OpCodes.Br, cont23)
AddCtorIL.MarkLabel(fa23)
AddCtorIL.MarkSequencePoint(doc8, 402, 1, 402, 100)
AddCtorIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa24 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
Dim tru24 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
Dim cont24 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
AddCtorIL.Emit(OpCodes.Beq, fa24)
AddCtorIL.Emit(OpCodes.Br, tru24)
AddCtorIL.MarkLabel(tru24)
AddCtorIL.MarkSequencePoint(doc8, 403, 1, 403, 100)
AddCtorIL.Emit(OpCodes.Br, label14)
AddCtorIL.MarkSequencePoint(doc8, 404, 1, 404, 100)
AddCtorIL.Emit(OpCodes.Br, cont24)
AddCtorIL.MarkLabel(fa24)
AddCtorIL.MarkSequencePoint(doc8, 405, 1, 405, 100)
AddCtorIL.Emit(OpCodes.Br, label15)
AddCtorIL.MarkSequencePoint(doc8, 406, 1, 406, 100)
AddCtorIL.Emit(OpCodes.Br, cont24)
AddCtorIL.MarkLabel(cont24)
AddCtorIL.MarkSequencePoint(doc8, 407, 1, 407, 100)
AddCtorIL.Emit(OpCodes.Br, cont23)
AddCtorIL.MarkLabel(cont23)
AddCtorIL.MarkSequencePoint(doc8, 409, 1, 409, 100)
AddCtorIL.MarkLabel(label15)
AddCtorIL.MarkSequencePoint(doc8, 411, 1, 411, 100)
AddCtorIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType()
Typ02 = Typ
AddCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddCtorIL.Emit(OpCodes.Ldloc, 0)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem")
AddCtorIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType().GetElementType())
AddCtorIL.MarkSequencePoint(doc8, 413, 1, 413, 100)
AddCtorIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType()
AddCtorIL.Emit(OpCodes.Stsfld, CtorLst)
AddCtorIL.MarkSequencePoint(doc8, 415, 1, 415, 100)
AddCtorIL.Emit(OpCodes.Ret)
Dim typ13(-1) As Type
ReDim Preserve typ13(UBound(typ13) + 1)
typ13(UBound(typ13)) = GetType(System.Type).MakeArrayType()
ReDim Preserve typ13(UBound(typ13) + 1)
typ13(UBound(typ13)) = GetType(ConstructorBuilder)
Dim AddNestedCtor As MethodBuilder = SymTable.DefineMethod("AddNestedCtor", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ13)
Dim AddNestedCtorIL As ILGenerator = AddNestedCtor.GetILGenerator()
Dim AddNestedCtorparam01 As ParameterBuilder = AddNestedCtor.DefineParameter(1, ParameterAttributes.None, "ptyps")
Dim AddNestedCtorparam02 As ParameterBuilder = AddNestedCtor.DefineParameter(2, ParameterAttributes.None, "met")
AddNestedCtorIL.MarkSequencePoint(doc8, 420, 1, 420, 100)
Dim locbldr50 As LocalBuilder = AddNestedCtorIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
locbldr50.SetLocalSymInfo("vr")
Dim typ14(-1) As Type
AddNestedCtorIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = Typ
AddNestedCtorIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(ConstructorBuilder)
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = Typ
AddNestedCtorIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").GetConstructor(typ14))
AddNestedCtorIL.Emit(OpCodes.Stloc, 0)
AddNestedCtorIL.MarkSequencePoint(doc8, 422, 1, 422, 100)
Dim locbldr51 As LocalBuilder = AddNestedCtorIL.DeclareLocal(GetType(System.Int32))
locbldr51.SetLocalSymInfo("len")
AddNestedCtorIL.Emit(OpCodes.Ldsfld, NestedCtorLst)
Typ = NestedCtorLst.FieldType
AddNestedCtorIL.Emit(OpCodes.Ldlen)
AddNestedCtorIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Stloc, 1)
AddNestedCtorIL.MarkSequencePoint(doc8, 423, 1, 423, 100)
Dim locbldr52 As LocalBuilder = AddNestedCtorIL.DeclareLocal(GetType(System.Int32))
locbldr52.SetLocalSymInfo("destl")
AddNestedCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Add)
AddNestedCtorIL.Emit(OpCodes.Stloc, 2)
AddNestedCtorIL.MarkSequencePoint(doc8, 424, 1, 424, 100)
Dim locbldr53 As LocalBuilder = AddNestedCtorIL.DeclareLocal(GetType(System.Int32))
locbldr53.SetLocalSymInfo("stopel")
AddNestedCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Sub)
AddNestedCtorIL.Emit(OpCodes.Stloc, 3)
AddNestedCtorIL.MarkSequencePoint(doc8, 425, 1, 425, 100)
Dim locbldr54 As LocalBuilder = AddNestedCtorIL.DeclareLocal(GetType(System.Int32))
locbldr54.SetLocalSymInfo("i")
AddNestedCtorIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Stloc, 4)
AddNestedCtorIL.MarkSequencePoint(doc8, 427, 1, 427, 100)
Dim locbldr55 As LocalBuilder = AddNestedCtorIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType())
locbldr55.SetLocalSymInfo("destarr")
AddNestedCtorIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Conv_U)
AddNestedCtorIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
AddNestedCtorIL.Emit(OpCodes.Stloc, 5)
AddNestedCtorIL.MarkSequencePoint(doc8, 429, 1, 429, 100)
Dim label16 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
AddNestedCtorIL.MarkSequencePoint(doc8, 430, 1, 430, 100)
Dim label17 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
AddNestedCtorIL.MarkSequencePoint(doc8, 432, 1, 432, 100)
AddNestedCtorIL.MarkLabel(label16)
AddNestedCtorIL.MarkSequencePoint(doc8, 434, 1, 434, 100)
AddNestedCtorIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Add)
AddNestedCtorIL.Emit(OpCodes.Stloc, 4)
AddNestedCtorIL.MarkSequencePoint(doc8, 436, 1, 436, 100)
AddNestedCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa25 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
Dim tru25 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
Dim cont25 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
AddNestedCtorIL.Emit(OpCodes.Bgt, tru25)
AddNestedCtorIL.Emit(OpCodes.Br, fa25)
AddNestedCtorIL.MarkLabel(tru25)
AddNestedCtorIL.MarkSequencePoint(doc8, 438, 1, 438, 100)
AddNestedCtorIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType()
Typ02 = Typ
AddNestedCtorIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNestedCtorIL.Emit(OpCodes.Ldsfld, NestedCtorLst)
Typ = NestedCtorLst.FieldType
Typ02 = Typ
AddNestedCtorIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNestedCtorIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddNestedCtorIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType().GetElementType())
AddNestedCtorIL.MarkSequencePoint(doc8, 440, 1, 440, 100)
AddNestedCtorIL.Emit(OpCodes.Br, cont25)
AddNestedCtorIL.MarkLabel(fa25)
AddNestedCtorIL.Emit(OpCodes.Br, cont25)
AddNestedCtorIL.MarkLabel(cont25)
AddNestedCtorIL.MarkSequencePoint(doc8, 442, 1, 442, 100)
AddNestedCtorIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
Dim fa26 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
Dim tru26 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
Dim cont26 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
AddNestedCtorIL.Emit(OpCodes.Beq, tru26)
AddNestedCtorIL.Emit(OpCodes.Br, fa26)
AddNestedCtorIL.MarkLabel(tru26)
AddNestedCtorIL.MarkSequencePoint(doc8, 443, 1, 443, 100)
AddNestedCtorIL.Emit(OpCodes.Br, label17)
AddNestedCtorIL.MarkSequencePoint(doc8, 444, 1, 444, 100)
AddNestedCtorIL.Emit(OpCodes.Br, cont26)
AddNestedCtorIL.MarkLabel(fa26)
AddNestedCtorIL.MarkSequencePoint(doc8, 445, 1, 445, 100)
AddNestedCtorIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa27 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
Dim tru27 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
Dim cont27 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
AddNestedCtorIL.Emit(OpCodes.Beq, fa27)
AddNestedCtorIL.Emit(OpCodes.Br, tru27)
AddNestedCtorIL.MarkLabel(tru27)
AddNestedCtorIL.MarkSequencePoint(doc8, 446, 1, 446, 100)
AddNestedCtorIL.Emit(OpCodes.Br, label16)
AddNestedCtorIL.MarkSequencePoint(doc8, 447, 1, 447, 100)
AddNestedCtorIL.Emit(OpCodes.Br, cont27)
AddNestedCtorIL.MarkLabel(fa27)
AddNestedCtorIL.MarkSequencePoint(doc8, 448, 1, 448, 100)
AddNestedCtorIL.Emit(OpCodes.Br, label17)
AddNestedCtorIL.MarkSequencePoint(doc8, 449, 1, 449, 100)
AddNestedCtorIL.Emit(OpCodes.Br, cont27)
AddNestedCtorIL.MarkLabel(cont27)
AddNestedCtorIL.MarkSequencePoint(doc8, 450, 1, 450, 100)
AddNestedCtorIL.Emit(OpCodes.Br, cont26)
AddNestedCtorIL.MarkLabel(cont26)
AddNestedCtorIL.MarkSequencePoint(doc8, 452, 1, 452, 100)
AddNestedCtorIL.MarkLabel(label17)
AddNestedCtorIL.MarkSequencePoint(doc8, 454, 1, 454, 100)
AddNestedCtorIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType()
Typ02 = Typ
AddNestedCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNestedCtorIL.Emit(OpCodes.Ldloc, 0)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem")
AddNestedCtorIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType().GetElementType())
AddNestedCtorIL.MarkSequencePoint(doc8, 456, 1, 456, 100)
AddNestedCtorIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType()
AddNestedCtorIL.Emit(OpCodes.Stsfld, NestedCtorLst)
AddNestedCtorIL.MarkSequencePoint(doc8, 458, 1, 458, 100)
AddNestedCtorIL.Emit(OpCodes.Ret)
Dim AddIf As MethodBuilder = SymTable.DefineMethod("AddIf", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim AddIfIL As ILGenerator = AddIf.GetILGenerator()
AddIfIL.MarkSequencePoint(doc8, 462, 1, 462, 100)
Dim locbldr56 As LocalBuilder = AddIfIL.DeclareLocal(GetType(Emit.Label))
locbldr56.SetLocalSymInfo("endl")
AddIfIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("DefineLbl", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("DefineLbl", Type.EmptyTypes).ReturnType
AddIfIL.Emit(OpCodes.Stloc, 0)
AddIfIL.MarkSequencePoint(doc8, 463, 1, 463, 100)
Dim locbldr57 As LocalBuilder = AddIfIL.DeclareLocal(GetType(Emit.Label))
locbldr57.SetLocalSymInfo("nbl")
AddIfIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("DefineLbl", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("DefineLbl", Type.EmptyTypes).ReturnType
AddIfIL.Emit(OpCodes.Stloc, 1)
AddIfIL.MarkSequencePoint(doc8, 464, 1, 464, 100)
Dim locbldr58 As LocalBuilder = AddIfIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem"))
locbldr58.SetLocalSymInfo("vr")
Dim typ15(-1) As Type
AddIfIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Emit.Label)
ReDim Preserve typ15(UBound(typ15) + 1)
typ15(UBound(typ15)) = Typ
AddIfIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Emit.Label)
ReDim Preserve typ15(UBound(typ15) + 1)
typ15(UBound(typ15)) = Typ
AddIfIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").GetConstructor(typ15))
AddIfIL.Emit(OpCodes.Stloc, 2)
AddIfIL.MarkSequencePoint(doc8, 466, 1, 466, 100)
Dim locbldr59 As LocalBuilder = AddIfIL.DeclareLocal(GetType(System.Int32))
locbldr59.SetLocalSymInfo("len")
AddIfIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
AddIfIL.Emit(OpCodes.Ldlen)
AddIfIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Stloc, 3)
AddIfIL.MarkSequencePoint(doc8, 467, 1, 467, 100)
Dim locbldr60 As LocalBuilder = AddIfIL.DeclareLocal(GetType(System.Int32))
locbldr60.SetLocalSymInfo("destl")
AddIfIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Add)
AddIfIL.Emit(OpCodes.Stloc, 4)
AddIfIL.MarkSequencePoint(doc8, 468, 1, 468, 100)
Dim locbldr61 As LocalBuilder = AddIfIL.DeclareLocal(GetType(System.Int32))
locbldr61.SetLocalSymInfo("stopel")
AddIfIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Sub)
AddIfIL.Emit(OpCodes.Stloc, 5)
AddIfIL.MarkSequencePoint(doc8, 469, 1, 469, 100)
Dim locbldr62 As LocalBuilder = AddIfIL.DeclareLocal(GetType(System.Int32))
locbldr62.SetLocalSymInfo("i")
AddIfIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Stloc, 6)
AddIfIL.MarkSequencePoint(doc8, 471, 1, 471, 100)
Dim locbldr63 As LocalBuilder = AddIfIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").MakeArrayType())
locbldr63.SetLocalSymInfo("destarr")
AddIfIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Conv_U)
AddIfIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem"))
AddIfIL.Emit(OpCodes.Stloc, 7)
AddIfIL.MarkSequencePoint(doc8, 473, 1, 473, 100)
Dim label18 As System.Reflection.Emit.Label = AddIfIL.DefineLabel()
AddIfIL.MarkSequencePoint(doc8, 474, 1, 474, 100)
Dim label19 As System.Reflection.Emit.Label = AddIfIL.DefineLabel()
AddIfIL.MarkSequencePoint(doc8, 476, 1, 476, 100)
AddIfIL.MarkLabel(label18)
AddIfIL.MarkSequencePoint(doc8, 478, 1, 478, 100)
AddIfIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Add)
AddIfIL.Emit(OpCodes.Stloc, 6)
AddIfIL.MarkSequencePoint(doc8, 480, 1, 480, 100)
AddIfIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa28 As System.Reflection.Emit.Label = AddIfIL.DefineLabel()
Dim tru28 As System.Reflection.Emit.Label = AddIfIL.DefineLabel()
Dim cont28 As System.Reflection.Emit.Label = AddIfIL.DefineLabel()
AddIfIL.Emit(OpCodes.Bgt, tru28)
AddIfIL.Emit(OpCodes.Br, fa28)
AddIfIL.MarkLabel(tru28)
AddIfIL.MarkSequencePoint(doc8, 482, 1, 482, 100)
AddIfIL.Emit(OpCodes.Ldloc, 7)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").MakeArrayType()
Typ02 = Typ
AddIfIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddIfIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
Typ02 = Typ
AddIfIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddIfIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddIfIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").MakeArrayType().GetElementType())
AddIfIL.MarkSequencePoint(doc8, 484, 1, 484, 100)
AddIfIL.Emit(OpCodes.Br, cont28)
AddIfIL.MarkLabel(fa28)
AddIfIL.Emit(OpCodes.Br, cont28)
AddIfIL.MarkLabel(cont28)
AddIfIL.MarkSequencePoint(doc8, 486, 1, 486, 100)
AddIfIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Int32)
Dim fa29 As System.Reflection.Emit.Label = AddIfIL.DefineLabel()
Dim tru29 As System.Reflection.Emit.Label = AddIfIL.DefineLabel()
Dim cont29 As System.Reflection.Emit.Label = AddIfIL.DefineLabel()
AddIfIL.Emit(OpCodes.Beq, tru29)
AddIfIL.Emit(OpCodes.Br, fa29)
AddIfIL.MarkLabel(tru29)
AddIfIL.MarkSequencePoint(doc8, 487, 1, 487, 100)
AddIfIL.Emit(OpCodes.Br, label19)
AddIfIL.MarkSequencePoint(doc8, 488, 1, 488, 100)
AddIfIL.Emit(OpCodes.Br, cont29)
AddIfIL.MarkLabel(fa29)
AddIfIL.MarkSequencePoint(doc8, 489, 1, 489, 100)
AddIfIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa30 As System.Reflection.Emit.Label = AddIfIL.DefineLabel()
Dim tru30 As System.Reflection.Emit.Label = AddIfIL.DefineLabel()
Dim cont30 As System.Reflection.Emit.Label = AddIfIL.DefineLabel()
AddIfIL.Emit(OpCodes.Beq, fa30)
AddIfIL.Emit(OpCodes.Br, tru30)
AddIfIL.MarkLabel(tru30)
AddIfIL.MarkSequencePoint(doc8, 490, 1, 490, 100)
AddIfIL.Emit(OpCodes.Br, label18)
AddIfIL.MarkSequencePoint(doc8, 491, 1, 491, 100)
AddIfIL.Emit(OpCodes.Br, cont30)
AddIfIL.MarkLabel(fa30)
AddIfIL.MarkSequencePoint(doc8, 492, 1, 492, 100)
AddIfIL.Emit(OpCodes.Br, label19)
AddIfIL.MarkSequencePoint(doc8, 493, 1, 493, 100)
AddIfIL.Emit(OpCodes.Br, cont30)
AddIfIL.MarkLabel(cont30)
AddIfIL.MarkSequencePoint(doc8, 494, 1, 494, 100)
AddIfIL.Emit(OpCodes.Br, cont29)
AddIfIL.MarkLabel(cont29)
AddIfIL.MarkSequencePoint(doc8, 496, 1, 496, 100)
AddIfIL.MarkLabel(label19)
AddIfIL.MarkSequencePoint(doc8, 498, 1, 498, 100)
AddIfIL.Emit(OpCodes.Ldloc, 7)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").MakeArrayType()
Typ02 = Typ
AddIfIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddIfIL.Emit(OpCodes.Ldloc, 2)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem")
AddIfIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").MakeArrayType().GetElementType())
AddIfIL.MarkSequencePoint(doc8, 500, 1, 500, 100)
AddIfIL.Emit(OpCodes.Ldloc, 7)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").MakeArrayType()
AddIfIL.Emit(OpCodes.Stsfld, IfLst)
AddIfIL.MarkSequencePoint(doc8, 502, 1, 502, 100)
AddIfIL.Emit(OpCodes.Ret)
Dim PopIf As MethodBuilder = SymTable.DefineMethod("PopIf", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim PopIfIL As ILGenerator = PopIf.GetILGenerator()
PopIfIL.MarkSequencePoint(doc8, 506, 1, 506, 100)
Dim locbldr64 As LocalBuilder = PopIfIL.DeclareLocal(GetType(System.Int32))
locbldr64.SetLocalSymInfo("len")
PopIfIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
PopIfIL.Emit(OpCodes.Ldlen)
PopIfIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Stloc, 0)
PopIfIL.MarkSequencePoint(doc8, 507, 1, 507, 100)
Dim locbldr65 As LocalBuilder = PopIfIL.DeclareLocal(GetType(System.Int32))
locbldr65.SetLocalSymInfo("destl")
PopIfIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Sub)
PopIfIL.Emit(OpCodes.Stloc, 1)
PopIfIL.MarkSequencePoint(doc8, 508, 1, 508, 100)
Dim locbldr66 As LocalBuilder = PopIfIL.DeclareLocal(GetType(System.Int32))
locbldr66.SetLocalSymInfo("stopel")
PopIfIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Sub)
PopIfIL.Emit(OpCodes.Stloc, 2)
PopIfIL.MarkSequencePoint(doc8, 509, 1, 509, 100)
Dim locbldr67 As LocalBuilder = PopIfIL.DeclareLocal(GetType(System.Int32))
locbldr67.SetLocalSymInfo("i")
PopIfIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Stloc, 3)
PopIfIL.MarkSequencePoint(doc8, 511, 1, 511, 100)
Dim locbldr68 As LocalBuilder = PopIfIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").MakeArrayType())
locbldr68.SetLocalSymInfo("destarr")
PopIfIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Conv_U)
PopIfIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem"))
PopIfIL.Emit(OpCodes.Stloc, 4)
PopIfIL.MarkSequencePoint(doc8, 513, 1, 513, 100)
Dim label20 As System.Reflection.Emit.Label = PopIfIL.DefineLabel()
PopIfIL.MarkSequencePoint(doc8, 514, 1, 514, 100)
Dim label21 As System.Reflection.Emit.Label = PopIfIL.DefineLabel()
PopIfIL.MarkSequencePoint(doc8, 516, 1, 516, 100)
PopIfIL.MarkLabel(label20)
PopIfIL.MarkSequencePoint(doc8, 518, 1, 518, 100)
PopIfIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Add)
PopIfIL.Emit(OpCodes.Stloc, 3)
PopIfIL.MarkSequencePoint(doc8, 520, 1, 520, 100)
PopIfIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa31 As System.Reflection.Emit.Label = PopIfIL.DefineLabel()
Dim tru31 As System.Reflection.Emit.Label = PopIfIL.DefineLabel()
Dim cont31 As System.Reflection.Emit.Label = PopIfIL.DefineLabel()
PopIfIL.Emit(OpCodes.Bge, tru31)
PopIfIL.Emit(OpCodes.Br, fa31)
PopIfIL.MarkLabel(tru31)
PopIfIL.MarkSequencePoint(doc8, 522, 1, 522, 100)
PopIfIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").MakeArrayType()
Typ02 = Typ
PopIfIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Conv_U)
Typ = Typ02
PopIfIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
Typ02 = Typ
PopIfIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Conv_U)
Typ = Typ02
PopIfIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
PopIfIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").MakeArrayType().GetElementType())
PopIfIL.MarkSequencePoint(doc8, 524, 1, 524, 100)
PopIfIL.Emit(OpCodes.Br, cont31)
PopIfIL.MarkLabel(fa31)
PopIfIL.Emit(OpCodes.Br, cont31)
PopIfIL.MarkLabel(cont31)
PopIfIL.MarkSequencePoint(doc8, 526, 1, 526, 100)
PopIfIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa32 As System.Reflection.Emit.Label = PopIfIL.DefineLabel()
Dim tru32 As System.Reflection.Emit.Label = PopIfIL.DefineLabel()
Dim cont32 As System.Reflection.Emit.Label = PopIfIL.DefineLabel()
PopIfIL.Emit(OpCodes.Beq, tru32)
PopIfIL.Emit(OpCodes.Br, fa32)
PopIfIL.MarkLabel(tru32)
PopIfIL.MarkSequencePoint(doc8, 527, 1, 527, 100)
PopIfIL.Emit(OpCodes.Br, label21)
PopIfIL.MarkSequencePoint(doc8, 528, 1, 528, 100)
PopIfIL.Emit(OpCodes.Br, cont32)
PopIfIL.MarkLabel(fa32)
PopIfIL.MarkSequencePoint(doc8, 529, 1, 529, 100)
PopIfIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa33 As System.Reflection.Emit.Label = PopIfIL.DefineLabel()
Dim tru33 As System.Reflection.Emit.Label = PopIfIL.DefineLabel()
Dim cont33 As System.Reflection.Emit.Label = PopIfIL.DefineLabel()
PopIfIL.Emit(OpCodes.Beq, fa33)
PopIfIL.Emit(OpCodes.Br, tru33)
PopIfIL.MarkLabel(tru33)
PopIfIL.MarkSequencePoint(doc8, 530, 1, 530, 100)
PopIfIL.Emit(OpCodes.Br, label20)
PopIfIL.MarkSequencePoint(doc8, 531, 1, 531, 100)
PopIfIL.Emit(OpCodes.Br, cont33)
PopIfIL.MarkLabel(fa33)
PopIfIL.MarkSequencePoint(doc8, 532, 1, 532, 100)
PopIfIL.Emit(OpCodes.Br, label21)
PopIfIL.MarkSequencePoint(doc8, 533, 1, 533, 100)
PopIfIL.Emit(OpCodes.Br, cont33)
PopIfIL.MarkLabel(cont33)
PopIfIL.MarkSequencePoint(doc8, 534, 1, 534, 100)
PopIfIL.Emit(OpCodes.Br, cont32)
PopIfIL.MarkLabel(cont32)
PopIfIL.MarkSequencePoint(doc8, 536, 1, 536, 100)
PopIfIL.MarkLabel(label21)
PopIfIL.MarkSequencePoint(doc8, 538, 1, 538, 100)
PopIfIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").MakeArrayType()
PopIfIL.Emit(OpCodes.Stsfld, IfLst)
PopIfIL.MarkSequencePoint(doc8, 540, 1, 540, 100)
PopIfIL.Emit(OpCodes.Ret)
Dim ReadIfEndLbl As MethodBuilder = SymTable.DefineMethod("ReadIfEndLbl", MethodAttributes.Public Or MethodAttributes.Static, GetType(Emit.Label), Type.EmptyTypes)
Dim ReadIfEndLblIL As ILGenerator = ReadIfEndLbl.GetILGenerator()
ReadIfEndLblIL.MarkSequencePoint(doc8, 543, 1, 543, 100)
Dim locbldr69 As LocalBuilder = ReadIfEndLblIL.DeclareLocal(GetType(System.Int32))
locbldr69.SetLocalSymInfo("lastel")
ReadIfEndLblIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
ReadIfEndLblIL.Emit(OpCodes.Ldlen)
ReadIfEndLblIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ReadIfEndLblIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIfEndLblIL.Emit(OpCodes.Sub)
ReadIfEndLblIL.Emit(OpCodes.Stloc, 0)
ReadIfEndLblIL.MarkSequencePoint(doc8, 544, 1, 544, 100)
Dim locbldr70 As LocalBuilder = ReadIfEndLblIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem"))
locbldr70.SetLocalSymInfo("ifi")
ReadIfEndLblIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
Typ02 = Typ
ReadIfEndLblIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
ReadIfEndLblIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIfEndLblIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ReadIfEndLblIL.Emit(OpCodes.Stloc, 1)
ReadIfEndLblIL.MarkSequencePoint(doc8, 545, 1, 545, 100)
ReadIfEndLblIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem")
ReadIfEndLblIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").GetField("EndLabel"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").GetField("EndLabel").FieldType
ReadIfEndLblIL.MarkSequencePoint(doc8, 546, 1, 546, 100)
ReadIfEndLblIL.Emit(OpCodes.Ret)
Dim ReadIfNxtBlkLbl As MethodBuilder = SymTable.DefineMethod("ReadIfNxtBlkLbl", MethodAttributes.Public Or MethodAttributes.Static, GetType(Emit.Label), Type.EmptyTypes)
Dim ReadIfNxtBlkLblIL As ILGenerator = ReadIfNxtBlkLbl.GetILGenerator()
ReadIfNxtBlkLblIL.MarkSequencePoint(doc8, 549, 1, 549, 100)
Dim locbldr71 As LocalBuilder = ReadIfNxtBlkLblIL.DeclareLocal(GetType(System.Int32))
locbldr71.SetLocalSymInfo("lastel")
ReadIfNxtBlkLblIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
ReadIfNxtBlkLblIL.Emit(OpCodes.Ldlen)
ReadIfNxtBlkLblIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ReadIfNxtBlkLblIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIfNxtBlkLblIL.Emit(OpCodes.Sub)
ReadIfNxtBlkLblIL.Emit(OpCodes.Stloc, 0)
ReadIfNxtBlkLblIL.MarkSequencePoint(doc8, 550, 1, 550, 100)
Dim locbldr72 As LocalBuilder = ReadIfNxtBlkLblIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem"))
locbldr72.SetLocalSymInfo("ifi")
ReadIfNxtBlkLblIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
Typ02 = Typ
ReadIfNxtBlkLblIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
ReadIfNxtBlkLblIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIfNxtBlkLblIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ReadIfNxtBlkLblIL.Emit(OpCodes.Stloc, 1)
ReadIfNxtBlkLblIL.MarkSequencePoint(doc8, 551, 1, 551, 100)
ReadIfNxtBlkLblIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem")
ReadIfNxtBlkLblIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").GetField("NextBlkLabel"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").GetField("NextBlkLabel").FieldType
ReadIfNxtBlkLblIL.MarkSequencePoint(doc8, 552, 1, 552, 100)
ReadIfNxtBlkLblIL.Emit(OpCodes.Ret)
Dim ReadIfElsePass As MethodBuilder = SymTable.DefineMethod("ReadIfElsePass", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Boolean), Type.EmptyTypes)
Dim ReadIfElsePassIL As ILGenerator = ReadIfElsePass.GetILGenerator()
ReadIfElsePassIL.MarkSequencePoint(doc8, 555, 1, 555, 100)
Dim locbldr73 As LocalBuilder = ReadIfElsePassIL.DeclareLocal(GetType(System.Int32))
locbldr73.SetLocalSymInfo("lastel")
ReadIfElsePassIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
ReadIfElsePassIL.Emit(OpCodes.Ldlen)
ReadIfElsePassIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ReadIfElsePassIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIfElsePassIL.Emit(OpCodes.Sub)
ReadIfElsePassIL.Emit(OpCodes.Stloc, 0)
ReadIfElsePassIL.MarkSequencePoint(doc8, 556, 1, 556, 100)
Dim locbldr74 As LocalBuilder = ReadIfElsePassIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem"))
locbldr74.SetLocalSymInfo("ifi")
ReadIfElsePassIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
Typ02 = Typ
ReadIfElsePassIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
ReadIfElsePassIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIfElsePassIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ReadIfElsePassIL.Emit(OpCodes.Stloc, 1)
ReadIfElsePassIL.MarkSequencePoint(doc8, 557, 1, 557, 100)
ReadIfElsePassIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem")
ReadIfElsePassIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").GetField("ElsePass"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").GetField("ElsePass").FieldType
ReadIfElsePassIL.MarkSequencePoint(doc8, 558, 1, 558, 100)
ReadIfElsePassIL.Emit(OpCodes.Ret)
Dim SetIfElsePass As MethodBuilder = SymTable.DefineMethod("SetIfElsePass", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim SetIfElsePassIL As ILGenerator = SetIfElsePass.GetILGenerator()
SetIfElsePassIL.MarkSequencePoint(doc8, 561, 1, 561, 100)
Dim locbldr75 As LocalBuilder = SetIfElsePassIL.DeclareLocal(GetType(System.Int32))
locbldr75.SetLocalSymInfo("lastel")
SetIfElsePassIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
SetIfElsePassIL.Emit(OpCodes.Ldlen)
SetIfElsePassIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
SetIfElsePassIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
SetIfElsePassIL.Emit(OpCodes.Sub)
SetIfElsePassIL.Emit(OpCodes.Stloc, 0)
SetIfElsePassIL.MarkSequencePoint(doc8, 562, 1, 562, 100)
Dim locbldr76 As LocalBuilder = SetIfElsePassIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem"))
locbldr76.SetLocalSymInfo("ifi")
SetIfElsePassIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
Typ02 = Typ
SetIfElsePassIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
SetIfElsePassIL.Emit(OpCodes.Conv_U)
Typ = Typ02
SetIfElsePassIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
SetIfElsePassIL.Emit(OpCodes.Stloc, 1)
SetIfElsePassIL.MarkSequencePoint(doc8, 563, 1, 563, 100)
SetIfElsePassIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem")
SetIfElsePassIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
SetIfElsePassIL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").GetField("ElsePass"))
SetIfElsePassIL.MarkSequencePoint(doc8, 564, 1, 564, 100)
SetIfElsePassIL.Emit(OpCodes.Ret)
Dim SetIfNxtBlkLbl As MethodBuilder = SymTable.DefineMethod("SetIfNxtBlkLbl", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim SetIfNxtBlkLblIL As ILGenerator = SetIfNxtBlkLbl.GetILGenerator()
SetIfNxtBlkLblIL.MarkSequencePoint(doc8, 567, 1, 567, 100)
Dim locbldr77 As LocalBuilder = SetIfNxtBlkLblIL.DeclareLocal(GetType(System.Int32))
locbldr77.SetLocalSymInfo("lastel")
SetIfNxtBlkLblIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
SetIfNxtBlkLblIL.Emit(OpCodes.Ldlen)
SetIfNxtBlkLblIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
SetIfNxtBlkLblIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
SetIfNxtBlkLblIL.Emit(OpCodes.Sub)
SetIfNxtBlkLblIL.Emit(OpCodes.Stloc, 0)
SetIfNxtBlkLblIL.MarkSequencePoint(doc8, 568, 1, 568, 100)
Dim locbldr78 As LocalBuilder = SetIfNxtBlkLblIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem"))
locbldr78.SetLocalSymInfo("ifi")
SetIfNxtBlkLblIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
Typ02 = Typ
SetIfNxtBlkLblIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
SetIfNxtBlkLblIL.Emit(OpCodes.Conv_U)
Typ = Typ02
SetIfNxtBlkLblIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
SetIfNxtBlkLblIL.Emit(OpCodes.Stloc, 1)
SetIfNxtBlkLblIL.MarkSequencePoint(doc8, 569, 1, 569, 100)
SetIfNxtBlkLblIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem")
SetIfNxtBlkLblIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("DefineLbl", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("DefineLbl", Type.EmptyTypes).ReturnType
SetIfNxtBlkLblIL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").GetField("NextBlkLabel"))
SetIfNxtBlkLblIL.MarkSequencePoint(doc8, 570, 1, 570, 100)
SetIfNxtBlkLblIL.Emit(OpCodes.Ret)
Dim typ16(-1) As Type
ReDim Preserve typ16(UBound(typ16) + 1)
typ16(UBound(typ16)) = GetType(System.String)
Dim FindVar As MethodBuilder = SymTable.DefineMethod("FindVar", MethodAttributes.Public Or MethodAttributes.Static, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"), typ16)
Dim FindVarIL As ILGenerator = FindVar.GetILGenerator()
Dim FindVarparam01 As ParameterBuilder = FindVar.DefineParameter(1, ParameterAttributes.None, "nam")
FindVarIL.MarkSequencePoint(doc8, 574, 1, 574, 100)
Dim locbldr79 As LocalBuilder = FindVarIL.DeclareLocal(GetType(System.Int32))
locbldr79.SetLocalSymInfo("len")
FindVarIL.Emit(OpCodes.Ldsfld, VarLst)
Typ = VarLst.FieldType
FindVarIL.Emit(OpCodes.Ldlen)
FindVarIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Sub)
FindVarIL.Emit(OpCodes.Stloc, 0)
FindVarIL.MarkSequencePoint(doc8, 575, 1, 575, 100)
Dim locbldr80 As LocalBuilder = FindVarIL.DeclareLocal(GetType(System.Int32))
locbldr80.SetLocalSymInfo("i")
FindVarIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Stloc, 1)
FindVarIL.MarkSequencePoint(doc8, 576, 1, 576, 100)
Dim locbldr81 As LocalBuilder = FindVarIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"))
locbldr81.SetLocalSymInfo("vr")
FindVarIL.Emit(OpCodes.Ldnull)
FindVarIL.Emit(OpCodes.Stloc, 2)
FindVarIL.MarkSequencePoint(doc8, 577, 1, 577, 100)
Dim locbldr82 As LocalBuilder = FindVarIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"))
locbldr82.SetLocalSymInfo("rvr")
FindVarIL.Emit(OpCodes.Ldnull)
FindVarIL.Emit(OpCodes.Stloc, 3)
FindVarIL.MarkSequencePoint(doc8, 578, 1, 578, 100)
Dim locbldr83 As LocalBuilder = FindVarIL.DeclareLocal(GetType(System.Int32))
locbldr83.SetLocalSymInfo("comp")
FindVarIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Stloc, 4)
FindVarIL.MarkSequencePoint(doc8, 580, 1, 580, 100)
Dim label22 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
FindVarIL.MarkSequencePoint(doc8, 581, 1, 581, 100)
Dim label23 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
FindVarIL.MarkSequencePoint(doc8, 583, 1, 583, 100)
FindVarIL.Emit(OpCodes.Ldsfld, VarLst)
Typ = VarLst.FieldType
FindVarIL.Emit(OpCodes.Ldlen)
FindVarIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa34 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
Dim tru34 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
Dim cont34 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
FindVarIL.Emit(OpCodes.Beq, tru34)
FindVarIL.Emit(OpCodes.Br, fa34)
FindVarIL.MarkLabel(tru34)
FindVarIL.MarkSequencePoint(doc8, 584, 1, 584, 100)
FindVarIL.Emit(OpCodes.Br, label22)
FindVarIL.MarkSequencePoint(doc8, 585, 1, 585, 100)
FindVarIL.Emit(OpCodes.Br, cont34)
FindVarIL.MarkLabel(fa34)
FindVarIL.Emit(OpCodes.Br, cont34)
FindVarIL.MarkLabel(cont34)
FindVarIL.MarkSequencePoint(doc8, 587, 1, 587, 100)
FindVarIL.MarkLabel(label23)
FindVarIL.MarkSequencePoint(doc8, 589, 1, 589, 100)
FindVarIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Add)
FindVarIL.Emit(OpCodes.Stloc, 1)
FindVarIL.MarkSequencePoint(doc8, 591, 1, 591, 100)
FindVarIL.Emit(OpCodes.Ldsfld, VarLst)
Typ = VarLst.FieldType
Typ02 = Typ
FindVarIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Conv_U)
Typ = Typ02
FindVarIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
FindVarIL.Emit(OpCodes.Stloc, 2)
FindVarIL.MarkSequencePoint(doc8, 592, 1, 592, 100)
Dim typ17(-1) As Type
FindVarIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ17(UBound(typ17) + 1)
typ17(UBound(typ17)) = Typ
FindVarIL.Emit(OpCodes.Ldloc, 2)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
FindVarIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("Name"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("Name").FieldType
ReDim Preserve typ17(UBound(typ17) + 1)
typ17(UBound(typ17)) = Typ
FindVarIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ17))
Typ = GetType(String).GetMethod("Compare", typ17).ReturnType
FindVarIL.Emit(OpCodes.Stloc, 4)
FindVarIL.MarkSequencePoint(doc8, 593, 1, 593, 100)
FindVarIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa35 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
Dim tru35 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
Dim cont35 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
FindVarIL.Emit(OpCodes.Beq, tru35)
FindVarIL.Emit(OpCodes.Br, fa35)
FindVarIL.MarkLabel(tru35)
FindVarIL.MarkSequencePoint(doc8, 594, 1, 594, 100)
FindVarIL.Emit(OpCodes.Ldloc, 2)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
FindVarIL.Emit(OpCodes.Stloc, 3)
FindVarIL.MarkSequencePoint(doc8, 595, 1, 595, 100)
FindVarIL.Emit(OpCodes.Br, label22)
FindVarIL.MarkSequencePoint(doc8, 596, 1, 596, 100)
FindVarIL.Emit(OpCodes.Br, cont35)
FindVarIL.MarkLabel(fa35)
FindVarIL.Emit(OpCodes.Br, cont35)
FindVarIL.MarkLabel(cont35)
FindVarIL.MarkSequencePoint(doc8, 598, 1, 598, 100)
FindVarIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
Dim fa36 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
Dim tru36 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
Dim cont36 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
FindVarIL.Emit(OpCodes.Beq, tru36)
FindVarIL.Emit(OpCodes.Br, fa36)
FindVarIL.MarkLabel(tru36)
FindVarIL.MarkSequencePoint(doc8, 599, 1, 599, 100)
FindVarIL.Emit(OpCodes.Br, label22)
FindVarIL.MarkSequencePoint(doc8, 600, 1, 600, 100)
FindVarIL.Emit(OpCodes.Br, cont36)
FindVarIL.MarkLabel(fa36)
FindVarIL.MarkSequencePoint(doc8, 601, 1, 601, 100)
FindVarIL.Emit(OpCodes.Br, label23)
FindVarIL.MarkSequencePoint(doc8, 602, 1, 602, 100)
FindVarIL.Emit(OpCodes.Br, cont36)
FindVarIL.MarkLabel(cont36)
FindVarIL.MarkSequencePoint(doc8, 604, 1, 604, 100)
FindVarIL.MarkLabel(label22)
FindVarIL.MarkSequencePoint(doc8, 606, 1, 606, 100)
FindVarIL.Emit(OpCodes.Ldloc, 3)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
FindVarIL.MarkSequencePoint(doc8, 607, 1, 607, 100)
FindVarIL.Emit(OpCodes.Ret)
Dim typ18(-1) As Type
ReDim Preserve typ18(UBound(typ18) + 1)
typ18(UBound(typ18)) = GetType(System.String)
Dim FindFld As MethodBuilder = SymTable.DefineMethod("FindFld", MethodAttributes.Public Or MethodAttributes.Static, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"), typ18)
Dim FindFldIL As ILGenerator = FindFld.GetILGenerator()
Dim FindFldparam01 As ParameterBuilder = FindFld.DefineParameter(1, ParameterAttributes.None, "nam")
FindFldIL.MarkSequencePoint(doc8, 611, 1, 611, 100)
Dim locbldr84 As LocalBuilder = FindFldIL.DeclareLocal(GetType(System.Int32))
locbldr84.SetLocalSymInfo("len")
FindFldIL.Emit(OpCodes.Ldsfld, FldLst)
Typ = FldLst.FieldType
FindFldIL.Emit(OpCodes.Ldlen)
FindFldIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
FindFldIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
FindFldIL.Emit(OpCodes.Sub)
FindFldIL.Emit(OpCodes.Stloc, 0)
FindFldIL.MarkSequencePoint(doc8, 612, 1, 612, 100)
Dim locbldr85 As LocalBuilder = FindFldIL.DeclareLocal(GetType(System.Int32))
locbldr85.SetLocalSymInfo("i")
FindFldIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
FindFldIL.Emit(OpCodes.Stloc, 1)
FindFldIL.MarkSequencePoint(doc8, 613, 1, 613, 100)
Dim locbldr86 As LocalBuilder = FindFldIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
locbldr86.SetLocalSymInfo("fld")
FindFldIL.Emit(OpCodes.Ldnull)
FindFldIL.Emit(OpCodes.Stloc, 2)
FindFldIL.MarkSequencePoint(doc8, 614, 1, 614, 100)
Dim locbldr87 As LocalBuilder = FindFldIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
locbldr87.SetLocalSymInfo("rfld")
FindFldIL.Emit(OpCodes.Ldnull)
FindFldIL.Emit(OpCodes.Stloc, 3)
FindFldIL.MarkSequencePoint(doc8, 615, 1, 615, 100)
Dim locbldr88 As LocalBuilder = FindFldIL.DeclareLocal(GetType(System.Int32))
locbldr88.SetLocalSymInfo("comp")
FindFldIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
FindFldIL.Emit(OpCodes.Stloc, 4)
FindFldIL.MarkSequencePoint(doc8, 617, 1, 617, 100)
Dim label24 As System.Reflection.Emit.Label = FindFldIL.DefineLabel()
FindFldIL.MarkSequencePoint(doc8, 618, 1, 618, 100)
Dim label25 As System.Reflection.Emit.Label = FindFldIL.DefineLabel()
FindFldIL.MarkSequencePoint(doc8, 620, 1, 620, 100)
FindFldIL.Emit(OpCodes.Ldsfld, FldLst)
Typ = FldLst.FieldType
FindFldIL.Emit(OpCodes.Ldlen)
FindFldIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
FindFldIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa37 As System.Reflection.Emit.Label = FindFldIL.DefineLabel()
Dim tru37 As System.Reflection.Emit.Label = FindFldIL.DefineLabel()
Dim cont37 As System.Reflection.Emit.Label = FindFldIL.DefineLabel()
FindFldIL.Emit(OpCodes.Beq, tru37)
FindFldIL.Emit(OpCodes.Br, fa37)
FindFldIL.MarkLabel(tru37)
FindFldIL.MarkSequencePoint(doc8, 621, 1, 621, 100)
FindFldIL.Emit(OpCodes.Br, label24)
FindFldIL.MarkSequencePoint(doc8, 622, 1, 622, 100)
FindFldIL.Emit(OpCodes.Br, cont37)
FindFldIL.MarkLabel(fa37)
FindFldIL.Emit(OpCodes.Br, cont37)
FindFldIL.MarkLabel(cont37)
FindFldIL.MarkSequencePoint(doc8, 624, 1, 624, 100)
FindFldIL.MarkLabel(label25)
FindFldIL.MarkSequencePoint(doc8, 626, 1, 626, 100)
FindFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindFldIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
FindFldIL.Emit(OpCodes.Add)
FindFldIL.Emit(OpCodes.Stloc, 1)
FindFldIL.MarkSequencePoint(doc8, 628, 1, 628, 100)
FindFldIL.Emit(OpCodes.Ldsfld, FldLst)
Typ = FldLst.FieldType
Typ02 = Typ
FindFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindFldIL.Emit(OpCodes.Conv_U)
Typ = Typ02
FindFldIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
FindFldIL.Emit(OpCodes.Stloc, 2)
FindFldIL.MarkSequencePoint(doc8, 629, 1, 629, 100)
Dim typ19(-1) As Type
FindFldIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ19(UBound(typ19) + 1)
typ19(UBound(typ19)) = Typ
FindFldIL.Emit(OpCodes.Ldloc, 2)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem")
FindFldIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").GetField("Name"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").GetField("Name").FieldType
ReDim Preserve typ19(UBound(typ19) + 1)
typ19(UBound(typ19)) = Typ
FindFldIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ19))
Typ = GetType(String).GetMethod("Compare", typ19).ReturnType
FindFldIL.Emit(OpCodes.Stloc, 4)
FindFldIL.MarkSequencePoint(doc8, 630, 1, 630, 100)
FindFldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
FindFldIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa38 As System.Reflection.Emit.Label = FindFldIL.DefineLabel()
Dim tru38 As System.Reflection.Emit.Label = FindFldIL.DefineLabel()
Dim cont38 As System.Reflection.Emit.Label = FindFldIL.DefineLabel()
FindFldIL.Emit(OpCodes.Beq, tru38)
FindFldIL.Emit(OpCodes.Br, fa38)
FindFldIL.MarkLabel(tru38)
FindFldIL.MarkSequencePoint(doc8, 631, 1, 631, 100)
FindFldIL.Emit(OpCodes.Ldloc, 2)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem")
FindFldIL.Emit(OpCodes.Stloc, 3)
FindFldIL.MarkSequencePoint(doc8, 632, 1, 632, 100)
FindFldIL.Emit(OpCodes.Br, label24)
FindFldIL.MarkSequencePoint(doc8, 633, 1, 633, 100)
FindFldIL.Emit(OpCodes.Br, cont38)
FindFldIL.MarkLabel(fa38)
FindFldIL.Emit(OpCodes.Br, cont38)
FindFldIL.MarkLabel(cont38)
FindFldIL.MarkSequencePoint(doc8, 635, 1, 635, 100)
FindFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindFldIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
Dim fa39 As System.Reflection.Emit.Label = FindFldIL.DefineLabel()
Dim tru39 As System.Reflection.Emit.Label = FindFldIL.DefineLabel()
Dim cont39 As System.Reflection.Emit.Label = FindFldIL.DefineLabel()
FindFldIL.Emit(OpCodes.Beq, tru39)
FindFldIL.Emit(OpCodes.Br, fa39)
FindFldIL.MarkLabel(tru39)
FindFldIL.MarkSequencePoint(doc8, 636, 1, 636, 100)
FindFldIL.Emit(OpCodes.Br, label24)
FindFldIL.MarkSequencePoint(doc8, 637, 1, 637, 100)
FindFldIL.Emit(OpCodes.Br, cont39)
FindFldIL.MarkLabel(fa39)
FindFldIL.MarkSequencePoint(doc8, 638, 1, 638, 100)
FindFldIL.Emit(OpCodes.Br, label25)
FindFldIL.MarkSequencePoint(doc8, 639, 1, 639, 100)
FindFldIL.Emit(OpCodes.Br, cont39)
FindFldIL.MarkLabel(cont39)
FindFldIL.MarkSequencePoint(doc8, 641, 1, 641, 100)
FindFldIL.MarkLabel(label24)
FindFldIL.MarkSequencePoint(doc8, 643, 1, 643, 100)
FindFldIL.Emit(OpCodes.Ldloc, 3)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem")
FindFldIL.MarkSequencePoint(doc8, 644, 1, 644, 100)
FindFldIL.Emit(OpCodes.Ret)
Dim typ20(-1) As Type
ReDim Preserve typ20(UBound(typ20) + 1)
typ20(UBound(typ20)) = GetType(System.Type).MakeArrayType()
ReDim Preserve typ20(UBound(typ20) + 1)
typ20(UBound(typ20)) = GetType(System.Type).MakeArrayType()
Dim CmpTyps As MethodBuilder = SymTable.DefineMethod("CmpTyps", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Boolean), typ20)
Dim CmpTypsIL As ILGenerator = CmpTyps.GetILGenerator()
Dim CmpTypsparam01 As ParameterBuilder = CmpTyps.DefineParameter(1, ParameterAttributes.None, "arra")
Dim CmpTypsparam02 As ParameterBuilder = CmpTyps.DefineParameter(2, ParameterAttributes.None, "arrb")
CmpTypsIL.MarkSequencePoint(doc8, 648, 1, 648, 100)
Dim locbldr89 As LocalBuilder = CmpTypsIL.DeclareLocal(GetType(System.Boolean))
locbldr89.SetLocalSymInfo("b")
CmpTypsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
CmpTypsIL.Emit(OpCodes.Stloc, 0)
CmpTypsIL.MarkSequencePoint(doc8, 650, 1, 650, 100)
CmpTypsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type).MakeArrayType()
CmpTypsIL.Emit(OpCodes.Ldlen)
CmpTypsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
CmpTypsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type).MakeArrayType()
CmpTypsIL.Emit(OpCodes.Ldlen)
CmpTypsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
Dim fa40 As System.Reflection.Emit.Label = CmpTypsIL.DefineLabel()
Dim tru40 As System.Reflection.Emit.Label = CmpTypsIL.DefineLabel()
Dim cont40 As System.Reflection.Emit.Label = CmpTypsIL.DefineLabel()
CmpTypsIL.Emit(OpCodes.Beq, tru40)
CmpTypsIL.Emit(OpCodes.Br, fa40)
CmpTypsIL.MarkLabel(tru40)
CmpTypsIL.MarkSequencePoint(doc8, 652, 1, 652, 100)
Dim label26 As System.Reflection.Emit.Label = CmpTypsIL.DefineLabel()
CmpTypsIL.MarkSequencePoint(doc8, 653, 1, 653, 100)
Dim label27 As System.Reflection.Emit.Label = CmpTypsIL.DefineLabel()
CmpTypsIL.MarkSequencePoint(doc8, 656, 1, 656, 100)
CmpTypsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type).MakeArrayType()
CmpTypsIL.Emit(OpCodes.Ldlen)
CmpTypsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
CmpTypsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa41 As System.Reflection.Emit.Label = CmpTypsIL.DefineLabel()
Dim tru41 As System.Reflection.Emit.Label = CmpTypsIL.DefineLabel()
Dim cont41 As System.Reflection.Emit.Label = CmpTypsIL.DefineLabel()
CmpTypsIL.Emit(OpCodes.Beq, tru41)
CmpTypsIL.Emit(OpCodes.Br, fa41)
CmpTypsIL.MarkLabel(tru41)
CmpTypsIL.MarkSequencePoint(doc8, 657, 1, 657, 100)
CmpTypsIL.Emit(OpCodes.Br, label27)
CmpTypsIL.MarkSequencePoint(doc8, 658, 1, 658, 100)
CmpTypsIL.Emit(OpCodes.Br, cont41)
CmpTypsIL.MarkLabel(fa41)
CmpTypsIL.Emit(OpCodes.Br, cont41)
CmpTypsIL.MarkLabel(cont41)
CmpTypsIL.MarkSequencePoint(doc8, 660, 1, 660, 100)
Dim locbldr90 As LocalBuilder = CmpTypsIL.DeclareLocal(GetType(System.Int32))
locbldr90.SetLocalSymInfo("i")
CmpTypsIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
CmpTypsIL.Emit(OpCodes.Stloc, 1)
CmpTypsIL.MarkSequencePoint(doc8, 661, 1, 661, 100)
Dim locbldr91 As LocalBuilder = CmpTypsIL.DeclareLocal(GetType(System.Int32))
locbldr91.SetLocalSymInfo("len")
CmpTypsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type).MakeArrayType()
CmpTypsIL.Emit(OpCodes.Ldlen)
CmpTypsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
CmpTypsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
CmpTypsIL.Emit(OpCodes.Sub)
CmpTypsIL.Emit(OpCodes.Stloc, 2)
CmpTypsIL.MarkSequencePoint(doc8, 662, 1, 662, 100)
Dim locbldr92 As LocalBuilder = CmpTypsIL.DeclareLocal(GetType(System.Type))
locbldr92.SetLocalSymInfo("ta")
CmpTypsIL.MarkSequencePoint(doc8, 663, 1, 663, 100)
Dim locbldr93 As LocalBuilder = CmpTypsIL.DeclareLocal(GetType(System.Type))
locbldr93.SetLocalSymInfo("tb")
CmpTypsIL.MarkSequencePoint(doc8, 665, 1, 665, 100)
CmpTypsIL.MarkLabel(label26)
CmpTypsIL.MarkSequencePoint(doc8, 666, 1, 666, 100)
CmpTypsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
CmpTypsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
CmpTypsIL.Emit(OpCodes.Add)
CmpTypsIL.Emit(OpCodes.Stloc, 1)
CmpTypsIL.MarkSequencePoint(doc8, 668, 1, 668, 100)
CmpTypsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
CmpTypsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
CmpTypsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
CmpTypsIL.Emit(OpCodes.Ldelem, GetType(System.Type).MakeArrayType().GetElementType())
Typ = GetType(System.Type).MakeArrayType().GetElementType()
CmpTypsIL.Emit(OpCodes.Stloc, 3)
CmpTypsIL.MarkSequencePoint(doc8, 669, 1, 669, 100)
CmpTypsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
CmpTypsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
CmpTypsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
CmpTypsIL.Emit(OpCodes.Ldelem, GetType(System.Type).MakeArrayType().GetElementType())
Typ = GetType(System.Type).MakeArrayType().GetElementType()
CmpTypsIL.Emit(OpCodes.Stloc, 4)
CmpTypsIL.MarkSequencePoint(doc8, 671, 1, 671, 100)
Dim typ21(-1) As Type
CmpTypsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Type)
Typ03 = Typ
CmpTypsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Type)
ReDim Preserve typ21(UBound(typ21) + 1)
typ21(UBound(typ21)) = Typ
CmpTypsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsAssignableFrom", typ21))
Typ = Typ03.GetMethod("IsAssignableFrom", typ21).ReturnType
CmpTypsIL.Emit(OpCodes.Stloc, 0)
CmpTypsIL.MarkSequencePoint(doc8, 672, 1, 672, 100)
CmpTypsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Boolean)
CmpTypsIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa42 As System.Reflection.Emit.Label = CmpTypsIL.DefineLabel()
Dim tru42 As System.Reflection.Emit.Label = CmpTypsIL.DefineLabel()
Dim cont42 As System.Reflection.Emit.Label = CmpTypsIL.DefineLabel()
CmpTypsIL.Emit(OpCodes.Beq, tru42)
CmpTypsIL.Emit(OpCodes.Br, fa42)
CmpTypsIL.MarkLabel(tru42)
CmpTypsIL.MarkSequencePoint(doc8, 673, 1, 673, 100)
CmpTypsIL.Emit(OpCodes.Br, label27)
CmpTypsIL.MarkSequencePoint(doc8, 674, 1, 674, 100)
CmpTypsIL.Emit(OpCodes.Br, cont42)
CmpTypsIL.MarkLabel(fa42)
CmpTypsIL.Emit(OpCodes.Br, cont42)
CmpTypsIL.MarkLabel(cont42)
CmpTypsIL.MarkSequencePoint(doc8, 676, 1, 676, 100)
CmpTypsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
CmpTypsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa43 As System.Reflection.Emit.Label = CmpTypsIL.DefineLabel()
Dim tru43 As System.Reflection.Emit.Label = CmpTypsIL.DefineLabel()
Dim cont43 As System.Reflection.Emit.Label = CmpTypsIL.DefineLabel()
CmpTypsIL.Emit(OpCodes.Beq, tru43)
CmpTypsIL.Emit(OpCodes.Br, fa43)
CmpTypsIL.MarkLabel(tru43)
CmpTypsIL.MarkSequencePoint(doc8, 677, 1, 677, 100)
CmpTypsIL.Emit(OpCodes.Br, label27)
CmpTypsIL.MarkSequencePoint(doc8, 678, 1, 678, 100)
CmpTypsIL.Emit(OpCodes.Br, cont43)
CmpTypsIL.MarkLabel(fa43)
CmpTypsIL.MarkSequencePoint(doc8, 679, 1, 679, 100)
CmpTypsIL.Emit(OpCodes.Br, label26)
CmpTypsIL.MarkSequencePoint(doc8, 680, 1, 680, 100)
CmpTypsIL.Emit(OpCodes.Br, cont43)
CmpTypsIL.MarkLabel(cont43)
CmpTypsIL.MarkSequencePoint(doc8, 682, 1, 682, 100)
CmpTypsIL.MarkLabel(label27)
CmpTypsIL.MarkSequencePoint(doc8, 684, 1, 684, 100)
CmpTypsIL.Emit(OpCodes.Br, cont40)
CmpTypsIL.MarkLabel(fa40)
CmpTypsIL.MarkSequencePoint(doc8, 685, 1, 685, 100)
CmpTypsIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
CmpTypsIL.Emit(OpCodes.Stloc, 0)
CmpTypsIL.MarkSequencePoint(doc8, 686, 1, 686, 100)
CmpTypsIL.Emit(OpCodes.Br, cont40)
CmpTypsIL.MarkLabel(cont40)
CmpTypsIL.MarkSequencePoint(doc8, 688, 1, 688, 100)
CmpTypsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Boolean)
CmpTypsIL.MarkSequencePoint(doc8, 690, 1, 690, 100)
CmpTypsIL.Emit(OpCodes.Ret)
Dim typ22(-1) As Type
ReDim Preserve typ22(UBound(typ22) + 1)
typ22(UBound(typ22)) = GetType(System.String)
ReDim Preserve typ22(UBound(typ22) + 1)
typ22(UBound(typ22)) = GetType(System.Type).MakeArrayType()
Dim FindMet As MethodBuilder = SymTable.DefineMethod("FindMet", MethodAttributes.Public Or MethodAttributes.Static, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"), typ22)
Dim FindMetIL As ILGenerator = FindMet.GetILGenerator()
Dim FindMetparam01 As ParameterBuilder = FindMet.DefineParameter(1, ParameterAttributes.None, "nam")
Dim FindMetparam02 As ParameterBuilder = FindMet.DefineParameter(2, ParameterAttributes.None, "params")
FindMetIL.MarkSequencePoint(doc8, 694, 1, 694, 100)
Dim locbldr94 As LocalBuilder = FindMetIL.DeclareLocal(GetType(System.Int32))
locbldr94.SetLocalSymInfo("len")
FindMetIL.Emit(OpCodes.Ldsfld, MetLst)
Typ = MetLst.FieldType
FindMetIL.Emit(OpCodes.Ldlen)
FindMetIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
FindMetIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
FindMetIL.Emit(OpCodes.Sub)
FindMetIL.Emit(OpCodes.Stloc, 0)
FindMetIL.MarkSequencePoint(doc8, 695, 1, 695, 100)
Dim locbldr95 As LocalBuilder = FindMetIL.DeclareLocal(GetType(System.Int32))
locbldr95.SetLocalSymInfo("i")
FindMetIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
FindMetIL.Emit(OpCodes.Stloc, 1)
FindMetIL.MarkSequencePoint(doc8, 696, 1, 696, 100)
Dim locbldr96 As LocalBuilder = FindMetIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
locbldr96.SetLocalSymInfo("met")
FindMetIL.Emit(OpCodes.Ldnull)
FindMetIL.Emit(OpCodes.Stloc, 2)
FindMetIL.MarkSequencePoint(doc8, 697, 1, 697, 100)
Dim locbldr97 As LocalBuilder = FindMetIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
locbldr97.SetLocalSymInfo("rmet")
FindMetIL.Emit(OpCodes.Ldnull)
FindMetIL.Emit(OpCodes.Stloc, 3)
FindMetIL.MarkSequencePoint(doc8, 698, 1, 698, 100)
Dim locbldr98 As LocalBuilder = FindMetIL.DeclareLocal(GetType(System.Int32))
locbldr98.SetLocalSymInfo("comp")
FindMetIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
FindMetIL.Emit(OpCodes.Stloc, 4)
FindMetIL.MarkSequencePoint(doc8, 699, 1, 699, 100)
Dim locbldr99 As LocalBuilder = FindMetIL.DeclareLocal(GetType(System.Boolean))
locbldr99.SetLocalSymInfo("b")
FindMetIL.MarkSequencePoint(doc8, 701, 1, 701, 100)
Dim label28 As System.Reflection.Emit.Label = FindMetIL.DefineLabel()
FindMetIL.MarkSequencePoint(doc8, 702, 1, 702, 100)
Dim label29 As System.Reflection.Emit.Label = FindMetIL.DefineLabel()
FindMetIL.MarkSequencePoint(doc8, 704, 1, 704, 100)
FindMetIL.Emit(OpCodes.Ldsfld, MetLst)
Typ = MetLst.FieldType
FindMetIL.Emit(OpCodes.Ldlen)
FindMetIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
FindMetIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa44 As System.Reflection.Emit.Label = FindMetIL.DefineLabel()
Dim tru44 As System.Reflection.Emit.Label = FindMetIL.DefineLabel()
Dim cont44 As System.Reflection.Emit.Label = FindMetIL.DefineLabel()
FindMetIL.Emit(OpCodes.Beq, tru44)
FindMetIL.Emit(OpCodes.Br, fa44)
FindMetIL.MarkLabel(tru44)
FindMetIL.MarkSequencePoint(doc8, 705, 1, 705, 100)
FindMetIL.Emit(OpCodes.Br, label28)
FindMetIL.MarkSequencePoint(doc8, 706, 1, 706, 100)
FindMetIL.Emit(OpCodes.Br, cont44)
FindMetIL.MarkLabel(fa44)
FindMetIL.Emit(OpCodes.Br, cont44)
FindMetIL.MarkLabel(cont44)
FindMetIL.MarkSequencePoint(doc8, 708, 1, 708, 100)
FindMetIL.MarkLabel(label29)
FindMetIL.MarkSequencePoint(doc8, 710, 1, 710, 100)
FindMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindMetIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
FindMetIL.Emit(OpCodes.Add)
FindMetIL.Emit(OpCodes.Stloc, 1)
FindMetIL.MarkSequencePoint(doc8, 712, 1, 712, 100)
FindMetIL.Emit(OpCodes.Ldsfld, MetLst)
Typ = MetLst.FieldType
Typ02 = Typ
FindMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindMetIL.Emit(OpCodes.Conv_U)
Typ = Typ02
FindMetIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
FindMetIL.Emit(OpCodes.Stloc, 2)
FindMetIL.MarkSequencePoint(doc8, 713, 1, 713, 100)
Dim typ23(-1) As Type
FindMetIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ23(UBound(typ23) + 1)
typ23(UBound(typ23)) = Typ
FindMetIL.Emit(OpCodes.Ldloc, 2)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem")
FindMetIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").GetField("Name"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").GetField("Name").FieldType
ReDim Preserve typ23(UBound(typ23) + 1)
typ23(UBound(typ23)) = Typ
FindMetIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ23))
Typ = GetType(String).GetMethod("Compare", typ23).ReturnType
FindMetIL.Emit(OpCodes.Stloc, 4)
FindMetIL.MarkSequencePoint(doc8, 714, 1, 714, 100)
FindMetIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
FindMetIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa45 As System.Reflection.Emit.Label = FindMetIL.DefineLabel()
Dim tru45 As System.Reflection.Emit.Label = FindMetIL.DefineLabel()
Dim cont45 As System.Reflection.Emit.Label = FindMetIL.DefineLabel()
FindMetIL.Emit(OpCodes.Beq, tru45)
FindMetIL.Emit(OpCodes.Br, fa45)
FindMetIL.MarkLabel(tru45)
FindMetIL.MarkSequencePoint(doc8, 715, 1, 715, 100)
Dim typ24(-1) As Type
FindMetIL.Emit(OpCodes.Ldloc, 2)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem")
FindMetIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").GetField("ParamTyps"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").GetField("ParamTyps").FieldType
ReDim Preserve typ24(UBound(typ24) + 1)
typ24(UBound(typ24)) = Typ
FindMetIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ24(UBound(typ24) + 1)
typ24(UBound(typ24)) = Typ
FindMetIL.Emit(OpCodes.Call, CmpTyps)
Typ = CmpTyps.ReturnType
FindMetIL.Emit(OpCodes.Stloc, 5)
FindMetIL.MarkSequencePoint(doc8, 716, 1, 716, 100)
FindMetIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
FindMetIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa46 As System.Reflection.Emit.Label = FindMetIL.DefineLabel()
Dim tru46 As System.Reflection.Emit.Label = FindMetIL.DefineLabel()
Dim cont46 As System.Reflection.Emit.Label = FindMetIL.DefineLabel()
FindMetIL.Emit(OpCodes.Beq, tru46)
FindMetIL.Emit(OpCodes.Br, fa46)
FindMetIL.MarkLabel(tru46)
FindMetIL.MarkSequencePoint(doc8, 717, 1, 717, 100)
FindMetIL.Emit(OpCodes.Ldloc, 2)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem")
FindMetIL.Emit(OpCodes.Stloc, 3)
FindMetIL.MarkSequencePoint(doc8, 718, 1, 718, 100)
FindMetIL.Emit(OpCodes.Br, label28)
FindMetIL.MarkSequencePoint(doc8, 719, 1, 719, 100)
FindMetIL.Emit(OpCodes.Br, cont46)
FindMetIL.MarkLabel(fa46)
FindMetIL.Emit(OpCodes.Br, cont46)
FindMetIL.MarkLabel(cont46)
FindMetIL.MarkSequencePoint(doc8, 720, 1, 720, 100)
FindMetIL.Emit(OpCodes.Br, cont45)
FindMetIL.MarkLabel(fa45)
FindMetIL.Emit(OpCodes.Br, cont45)
FindMetIL.MarkLabel(cont45)
FindMetIL.MarkSequencePoint(doc8, 722, 1, 722, 100)
FindMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindMetIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
Dim fa47 As System.Reflection.Emit.Label = FindMetIL.DefineLabel()
Dim tru47 As System.Reflection.Emit.Label = FindMetIL.DefineLabel()
Dim cont47 As System.Reflection.Emit.Label = FindMetIL.DefineLabel()
FindMetIL.Emit(OpCodes.Beq, tru47)
FindMetIL.Emit(OpCodes.Br, fa47)
FindMetIL.MarkLabel(tru47)
FindMetIL.MarkSequencePoint(doc8, 723, 1, 723, 100)
FindMetIL.Emit(OpCodes.Br, label28)
FindMetIL.MarkSequencePoint(doc8, 724, 1, 724, 100)
FindMetIL.Emit(OpCodes.Br, cont47)
FindMetIL.MarkLabel(fa47)
FindMetIL.MarkSequencePoint(doc8, 725, 1, 725, 100)
FindMetIL.Emit(OpCodes.Br, label29)
FindMetIL.MarkSequencePoint(doc8, 726, 1, 726, 100)
FindMetIL.Emit(OpCodes.Br, cont47)
FindMetIL.MarkLabel(cont47)
FindMetIL.MarkSequencePoint(doc8, 728, 1, 728, 100)
FindMetIL.MarkLabel(label28)
FindMetIL.MarkSequencePoint(doc8, 730, 1, 730, 100)
FindMetIL.Emit(OpCodes.Ldloc, 3)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem")
FindMetIL.MarkSequencePoint(doc8, 731, 1, 731, 100)
FindMetIL.Emit(OpCodes.Ret)
Dim typ25(-1) As Type
ReDim Preserve typ25(UBound(typ25) + 1)
typ25(UBound(typ25)) = GetType(System.Type).MakeArrayType()
Dim FindCtor As MethodBuilder = SymTable.DefineMethod("FindCtor", MethodAttributes.Public Or MethodAttributes.Static, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"), typ25)
Dim FindCtorIL As ILGenerator = FindCtor.GetILGenerator()
Dim FindCtorparam01 As ParameterBuilder = FindCtor.DefineParameter(1, ParameterAttributes.None, "params")
FindCtorIL.MarkSequencePoint(doc8, 735, 1, 735, 100)
Dim locbldr100 As LocalBuilder = FindCtorIL.DeclareLocal(GetType(System.Int32))
locbldr100.SetLocalSymInfo("len")
FindCtorIL.Emit(OpCodes.Ldsfld, CtorLst)
Typ = CtorLst.FieldType
FindCtorIL.Emit(OpCodes.Ldlen)
FindCtorIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
FindCtorIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
FindCtorIL.Emit(OpCodes.Sub)
FindCtorIL.Emit(OpCodes.Stloc, 0)
FindCtorIL.MarkSequencePoint(doc8, 736, 1, 736, 100)
Dim locbldr101 As LocalBuilder = FindCtorIL.DeclareLocal(GetType(System.Int32))
locbldr101.SetLocalSymInfo("i")
FindCtorIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
FindCtorIL.Emit(OpCodes.Stloc, 1)
FindCtorIL.MarkSequencePoint(doc8, 737, 1, 737, 100)
Dim locbldr102 As LocalBuilder = FindCtorIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
locbldr102.SetLocalSymInfo("met")
FindCtorIL.Emit(OpCodes.Ldnull)
FindCtorIL.Emit(OpCodes.Stloc, 2)
FindCtorIL.MarkSequencePoint(doc8, 738, 1, 738, 100)
Dim locbldr103 As LocalBuilder = FindCtorIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
locbldr103.SetLocalSymInfo("rmet")
FindCtorIL.Emit(OpCodes.Ldnull)
FindCtorIL.Emit(OpCodes.Stloc, 3)
FindCtorIL.MarkSequencePoint(doc8, 739, 1, 739, 100)
Dim locbldr104 As LocalBuilder = FindCtorIL.DeclareLocal(GetType(System.Int32))
locbldr104.SetLocalSymInfo("comp")
FindCtorIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
FindCtorIL.Emit(OpCodes.Stloc, 4)
FindCtorIL.MarkSequencePoint(doc8, 740, 1, 740, 100)
Dim locbldr105 As LocalBuilder = FindCtorIL.DeclareLocal(GetType(System.Boolean))
locbldr105.SetLocalSymInfo("b")
FindCtorIL.MarkSequencePoint(doc8, 742, 1, 742, 100)
Dim label30 As System.Reflection.Emit.Label = FindCtorIL.DefineLabel()
FindCtorIL.MarkSequencePoint(doc8, 743, 1, 743, 100)
Dim label31 As System.Reflection.Emit.Label = FindCtorIL.DefineLabel()
FindCtorIL.MarkSequencePoint(doc8, 745, 1, 745, 100)
FindCtorIL.Emit(OpCodes.Ldsfld, CtorLst)
Typ = CtorLst.FieldType
FindCtorIL.Emit(OpCodes.Ldlen)
FindCtorIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
FindCtorIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa48 As System.Reflection.Emit.Label = FindCtorIL.DefineLabel()
Dim tru48 As System.Reflection.Emit.Label = FindCtorIL.DefineLabel()
Dim cont48 As System.Reflection.Emit.Label = FindCtorIL.DefineLabel()
FindCtorIL.Emit(OpCodes.Beq, tru48)
FindCtorIL.Emit(OpCodes.Br, fa48)
FindCtorIL.MarkLabel(tru48)
FindCtorIL.MarkSequencePoint(doc8, 746, 1, 746, 100)
FindCtorIL.Emit(OpCodes.Br, label30)
FindCtorIL.MarkSequencePoint(doc8, 747, 1, 747, 100)
FindCtorIL.Emit(OpCodes.Br, cont48)
FindCtorIL.MarkLabel(fa48)
FindCtorIL.Emit(OpCodes.Br, cont48)
FindCtorIL.MarkLabel(cont48)
FindCtorIL.MarkSequencePoint(doc8, 749, 1, 749, 100)
FindCtorIL.MarkLabel(label31)
FindCtorIL.MarkSequencePoint(doc8, 751, 1, 751, 100)
FindCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindCtorIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
FindCtorIL.Emit(OpCodes.Add)
FindCtorIL.Emit(OpCodes.Stloc, 1)
FindCtorIL.MarkSequencePoint(doc8, 753, 1, 753, 100)
FindCtorIL.Emit(OpCodes.Ldsfld, CtorLst)
Typ = CtorLst.FieldType
Typ02 = Typ
FindCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindCtorIL.Emit(OpCodes.Conv_U)
Typ = Typ02
FindCtorIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
FindCtorIL.Emit(OpCodes.Stloc, 2)
FindCtorIL.MarkSequencePoint(doc8, 754, 1, 754, 100)
Dim typ26(-1) As Type
FindCtorIL.Emit(OpCodes.Ldloc, 2)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem")
FindCtorIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").GetField("ParamTyps"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").GetField("ParamTyps").FieldType
ReDim Preserve typ26(UBound(typ26) + 1)
typ26(UBound(typ26)) = Typ
FindCtorIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ26(UBound(typ26) + 1)
typ26(UBound(typ26)) = Typ
FindCtorIL.Emit(OpCodes.Call, CmpTyps)
Typ = CmpTyps.ReturnType
FindCtorIL.Emit(OpCodes.Stloc, 5)
FindCtorIL.MarkSequencePoint(doc8, 755, 1, 755, 100)
FindCtorIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
FindCtorIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa49 As System.Reflection.Emit.Label = FindCtorIL.DefineLabel()
Dim tru49 As System.Reflection.Emit.Label = FindCtorIL.DefineLabel()
Dim cont49 As System.Reflection.Emit.Label = FindCtorIL.DefineLabel()
FindCtorIL.Emit(OpCodes.Beq, tru49)
FindCtorIL.Emit(OpCodes.Br, fa49)
FindCtorIL.MarkLabel(tru49)
FindCtorIL.MarkSequencePoint(doc8, 756, 1, 756, 100)
FindCtorIL.Emit(OpCodes.Ldloc, 2)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem")
FindCtorIL.Emit(OpCodes.Stloc, 3)
FindCtorIL.MarkSequencePoint(doc8, 757, 1, 757, 100)
FindCtorIL.Emit(OpCodes.Br, label30)
FindCtorIL.MarkSequencePoint(doc8, 758, 1, 758, 100)
FindCtorIL.Emit(OpCodes.Br, cont49)
FindCtorIL.MarkLabel(fa49)
FindCtorIL.Emit(OpCodes.Br, cont49)
FindCtorIL.MarkLabel(cont49)
FindCtorIL.MarkSequencePoint(doc8, 760, 1, 760, 100)
FindCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindCtorIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
Dim fa50 As System.Reflection.Emit.Label = FindCtorIL.DefineLabel()
Dim tru50 As System.Reflection.Emit.Label = FindCtorIL.DefineLabel()
Dim cont50 As System.Reflection.Emit.Label = FindCtorIL.DefineLabel()
FindCtorIL.Emit(OpCodes.Beq, tru50)
FindCtorIL.Emit(OpCodes.Br, fa50)
FindCtorIL.MarkLabel(tru50)
FindCtorIL.MarkSequencePoint(doc8, 761, 1, 761, 100)
FindCtorIL.Emit(OpCodes.Br, label30)
FindCtorIL.MarkSequencePoint(doc8, 762, 1, 762, 100)
FindCtorIL.Emit(OpCodes.Br, cont50)
FindCtorIL.MarkLabel(fa50)
FindCtorIL.MarkSequencePoint(doc8, 763, 1, 763, 100)
FindCtorIL.Emit(OpCodes.Br, label31)
FindCtorIL.MarkSequencePoint(doc8, 764, 1, 764, 100)
FindCtorIL.Emit(OpCodes.Br, cont50)
FindCtorIL.MarkLabel(cont50)
FindCtorIL.MarkSequencePoint(doc8, 766, 1, 766, 100)
FindCtorIL.MarkLabel(label30)
FindCtorIL.MarkSequencePoint(doc8, 768, 1, 768, 100)
FindCtorIL.Emit(OpCodes.Ldloc, 3)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem")
FindCtorIL.MarkSequencePoint(doc8, 769, 1, 769, 100)
FindCtorIL.Emit(OpCodes.Ret)
SymTable.CreateType()
End Sub


Dim doc9 As ISymbolDocumentWriter

Sub Helpers()
Dim Helpers As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "Helpers", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass Or TypeAttributes.BeforeFieldInit, GetType(System.Object))
Dim StringFlg As FieldBuilder = Helpers.DefineField("StringFlg", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static)
Dim OpCodeSuppFlg As FieldBuilder = Helpers.DefineField("OpCodeSuppFlg", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static)
Dim LeftOp As FieldBuilder = Helpers.DefineField("LeftOp", GetType(System.Type), FieldAttributes.Public Or FieldAttributes.Static)
Dim RightOp As FieldBuilder = Helpers.DefineField("RightOp", GetType(System.Type), FieldAttributes.Public Or FieldAttributes.Static)
Dim ctor0 As ConstructorBuilder = Helpers.DefineConstructor(MethodAttributes.Public Or MethodAttributes.Static,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc9, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, StringFlg)
ctor0IL.MarkSequencePoint(doc9, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, OpCodeSuppFlg)
ctor0IL.MarkSequencePoint(doc9, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stsfld, LeftOp)
ctor0IL.MarkSequencePoint(doc9, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stsfld, RightOp)
ctor0IL.MarkSequencePoint(doc9, 21, 1, 21, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(Attributes.Attribute).MakeArrayType()
Dim ProcessClassAttrs As MethodBuilder = Helpers.DefineMethod("ProcessClassAttrs", MethodAttributes.Public Or MethodAttributes.Static, GetType(TypeAttributes), typ0)
Dim ProcessClassAttrsIL As ILGenerator = ProcessClassAttrs.GetILGenerator()
Dim ProcessClassAttrsparam01 As ParameterBuilder = ProcessClassAttrs.DefineParameter(1, ParameterAttributes.None, "attrs")
ProcessClassAttrsIL.MarkSequencePoint(doc9, 24, 1, 24, 100)
Dim locbldr106 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(TypeAttributes))
locbldr106.SetLocalSymInfo("ta")
ProcessClassAttrsIL.MarkSequencePoint(doc9, 25, 1, 25, 100)
Dim locbldr107 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(TypeAttributes))
locbldr107.SetLocalSymInfo("temp")
ProcessClassAttrsIL.MarkSequencePoint(doc9, 27, 1, 27, 100)
Dim label0 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.MarkSequencePoint(doc9, 28, 1, 28, 100)
Dim label1 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.MarkSequencePoint(doc9, 29, 1, 29, 100)
Dim label2 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.MarkSequencePoint(doc9, 31, 1, 31, 100)
Dim locbldr108 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(System.Int32))
locbldr108.SetLocalSymInfo("len")
ProcessClassAttrsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Attributes.Attribute).MakeArrayType()
ProcessClassAttrsIL.Emit(OpCodes.Ldlen)
ProcessClassAttrsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Sub)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 2)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 32, 1, 32, 100)
Dim locbldr109 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(System.Int32))
locbldr109.SetLocalSymInfo("i")
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 3)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 33, 1, 33, 100)
Dim locbldr110 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(System.Boolean))
locbldr110.SetLocalSymInfo("b")
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 34, 1, 34, 100)
Dim locbldr111 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(System.Type))
locbldr111.SetLocalSymInfo("typ")
ProcessClassAttrsIL.MarkSequencePoint(doc9, 35, 1, 35, 100)
Dim locbldr112 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(Attributes.Attribute))
locbldr112.SetLocalSymInfo("curattr")
ProcessClassAttrsIL.Emit(OpCodes.Ldnull)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 6)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 36, 1, 36, 100)
Dim locbldr113 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(System.Boolean))
locbldr113.SetLocalSymInfo("fir")
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 38, 1, 38, 100)
ProcessClassAttrsIL.MarkLabel(label0)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 40, 1, 40, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Add)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 3)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 42, 1, 42, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Attributes.Attribute).MakeArrayType()
Typ02 = Typ
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ProcessClassAttrsIL.Emit(OpCodes.Ldelem, GetType(Attributes.Attribute).MakeArrayType().GetElementType())
Typ = GetType(Attributes.Attribute).MakeArrayType().GetElementType()
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 6)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 44, 1, 44, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.PublicAttr))
Dim typ1 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessClassAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ1))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ1).ReturnType
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 45, 1, 45, 100)
Dim typ2(-1) As Type
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessClassAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = Typ
ProcessClassAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ2))
Typ = Typ03.GetMethod("IsInstanceOfType", typ2).ReturnType
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 47, 1, 47, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa51 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru51 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont51 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru51)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa51)
ProcessClassAttrsIL.MarkLabel(tru51)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 48, 1, 48, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa52 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru52 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont52 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru52)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa52)
ProcessClassAttrsIL.MarkLabel(tru52)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 49, 1, 49, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 50, 1, 50, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont52)
ProcessClassAttrsIL.MarkLabel(fa52)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 51, 1, 51, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 52, 1, 52, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont52)
ProcessClassAttrsIL.MarkLabel(cont52)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 53, 1, 53, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa53 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru53 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont53 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru53)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa53)
ProcessClassAttrsIL.MarkLabel(tru53)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 54, 1, 54, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.And)
ProcessClassAttrsIL.Emit(OpCodes.Not)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 55, 1, 55, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 56, 1, 56, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont53)
ProcessClassAttrsIL.MarkLabel(fa53)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 57, 1, 57, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Or)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 58, 1, 58, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont53)
ProcessClassAttrsIL.MarkLabel(cont53)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 59, 1, 59, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, label2)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 60, 1, 60, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont51)
ProcessClassAttrsIL.MarkLabel(fa51)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont51)
ProcessClassAttrsIL.MarkLabel(cont51)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 62, 1, 62, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.AutoLayoutAttr))
Dim typ3 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessClassAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ3))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ3).ReturnType
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 63, 1, 63, 100)
Dim typ4(-1) As Type
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessClassAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
ProcessClassAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ4))
Typ = Typ03.GetMethod("IsInstanceOfType", typ4).ReturnType
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 65, 1, 65, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa54 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru54 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont54 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru54)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa54)
ProcessClassAttrsIL.MarkLabel(tru54)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 66, 1, 66, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 67, 1, 67, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa55 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru55 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont55 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru55)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa55)
ProcessClassAttrsIL.MarkLabel(tru55)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 68, 1, 68, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.And)
ProcessClassAttrsIL.Emit(OpCodes.Not)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 69, 1, 69, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 70, 1, 70, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont55)
ProcessClassAttrsIL.MarkLabel(fa55)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 71, 1, 71, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Or)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 72, 1, 72, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont55)
ProcessClassAttrsIL.MarkLabel(cont55)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 73, 1, 73, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, label2)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 74, 1, 74, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont54)
ProcessClassAttrsIL.MarkLabel(fa54)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont54)
ProcessClassAttrsIL.MarkLabel(cont54)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 76, 1, 76, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.AnsiClassAttr))
Dim typ5 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessClassAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ5))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ5).ReturnType
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 77, 1, 77, 100)
Dim typ6(-1) As Type
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessClassAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = Typ
ProcessClassAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ6))
Typ = Typ03.GetMethod("IsInstanceOfType", typ6).ReturnType
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 79, 1, 79, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa56 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru56 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont56 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru56)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa56)
ProcessClassAttrsIL.MarkLabel(tru56)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 80, 1, 80, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 81, 1, 81, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa57 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru57 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont57 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru57)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa57)
ProcessClassAttrsIL.MarkLabel(tru57)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 82, 1, 82, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.And)
ProcessClassAttrsIL.Emit(OpCodes.Not)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 83, 1, 83, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 84, 1, 84, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont57)
ProcessClassAttrsIL.MarkLabel(fa57)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 85, 1, 85, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Or)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 86, 1, 86, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont57)
ProcessClassAttrsIL.MarkLabel(cont57)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 87, 1, 87, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, label2)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 88, 1, 88, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont56)
ProcessClassAttrsIL.MarkLabel(fa56)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont56)
ProcessClassAttrsIL.MarkLabel(cont56)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 90, 1, 90, 100)
ProcessClassAttrsIL.MarkLabel(label2)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 92, 1, 92, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa58 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru58 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont58 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru58)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa58)
ProcessClassAttrsIL.MarkLabel(tru58)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 93, 1, 93, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, label1)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 94, 1, 94, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont58)
ProcessClassAttrsIL.MarkLabel(fa58)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 95, 1, 95, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, label0)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 96, 1, 96, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont58)
ProcessClassAttrsIL.MarkLabel(cont58)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 99, 1, 99, 100)
ProcessClassAttrsIL.MarkLabel(label1)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 102, 1, 102, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.MarkSequencePoint(doc9, 103, 1, 103, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ret)
Dim typ7(-1) As Type
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = GetType(Attributes.Attribute).MakeArrayType()
Dim ProcessMethodAttrs As MethodBuilder = Helpers.DefineMethod("ProcessMethodAttrs", MethodAttributes.Public Or MethodAttributes.Static, GetType(MethodAttributes), typ7)
Dim ProcessMethodAttrsIL As ILGenerator = ProcessMethodAttrs.GetILGenerator()
Dim ProcessMethodAttrsparam01 As ParameterBuilder = ProcessMethodAttrs.DefineParameter(1, ParameterAttributes.None, "attrs")
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 106, 1, 106, 100)
Dim locbldr114 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(MethodAttributes))
locbldr114.SetLocalSymInfo("ta")
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 107, 1, 107, 100)
Dim locbldr115 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(MethodAttributes))
locbldr115.SetLocalSymInfo("temp")
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 109, 1, 109, 100)
Dim label3 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 110, 1, 110, 100)
Dim label4 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 111, 1, 111, 100)
Dim label5 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 113, 1, 113, 100)
Dim locbldr116 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(System.Int32))
locbldr116.SetLocalSymInfo("len")
ProcessMethodAttrsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Attributes.Attribute).MakeArrayType()
ProcessMethodAttrsIL.Emit(OpCodes.Ldlen)
ProcessMethodAttrsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Sub)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 2)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 114, 1, 114, 100)
Dim locbldr117 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(System.Int32))
locbldr117.SetLocalSymInfo("i")
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 3)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 115, 1, 115, 100)
Dim locbldr118 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(System.Boolean))
locbldr118.SetLocalSymInfo("b")
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 116, 1, 116, 100)
Dim locbldr119 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(System.Type))
locbldr119.SetLocalSymInfo("typ")
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 117, 1, 117, 100)
Dim locbldr120 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(Attributes.Attribute))
locbldr120.SetLocalSymInfo("curattr")
ProcessMethodAttrsIL.Emit(OpCodes.Ldnull)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 6)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 118, 1, 118, 100)
Dim locbldr121 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(System.Boolean))
locbldr121.SetLocalSymInfo("fir")
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 120, 1, 120, 100)
ProcessMethodAttrsIL.MarkLabel(label3)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 122, 1, 122, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Add)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 3)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 124, 1, 124, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Attributes.Attribute).MakeArrayType()
Typ02 = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ProcessMethodAttrsIL.Emit(OpCodes.Ldelem, GetType(Attributes.Attribute).MakeArrayType().GetElementType())
Typ = GetType(Attributes.Attribute).MakeArrayType().GetElementType()
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 6)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 126, 1, 126, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.PublicAttr))
Dim typ8 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessMethodAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ8))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ8).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 127, 1, 127, 100)
Dim typ9(-1) As Type
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessMethodAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ9))
Typ = Typ03.GetMethod("IsInstanceOfType", typ9).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 129, 1, 129, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa59 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru59 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont59 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru59)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa59)
ProcessMethodAttrsIL.MarkLabel(tru59)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 130, 1, 130, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, CInt(6))
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 131, 1, 131, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa60 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru60 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont60 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru60)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa60)
ProcessMethodAttrsIL.MarkLabel(tru60)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 132, 1, 132, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.And)
ProcessMethodAttrsIL.Emit(OpCodes.Not)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 133, 1, 133, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 134, 1, 134, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont60)
ProcessMethodAttrsIL.MarkLabel(fa60)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 135, 1, 135, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Or)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 136, 1, 136, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont60)
ProcessMethodAttrsIL.MarkLabel(cont60)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 137, 1, 137, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, label5)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 138, 1, 138, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont59)
ProcessMethodAttrsIL.MarkLabel(fa59)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont59)
ProcessMethodAttrsIL.MarkLabel(cont59)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 140, 1, 140, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.StaticAttr))
Dim typ10 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessMethodAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ10))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ10).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 141, 1, 141, 100)
Dim typ11(-1) As Type
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessMethodAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ11(UBound(typ11) + 1)
typ11(UBound(typ11)) = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ11))
Typ = Typ03.GetMethod("IsInstanceOfType", typ11).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 143, 1, 143, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa61 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru61 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont61 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru61)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa61)
ProcessMethodAttrsIL.MarkLabel(tru61)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 144, 1, 144, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, CInt(16))
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 145, 1, 145, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Stsfld, GetType(ILEmitter).GetField("StaticFlg"))
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 146, 1, 146, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa62 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru62 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont62 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru62)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa62)
ProcessMethodAttrsIL.MarkLabel(tru62)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 147, 1, 147, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.And)
ProcessMethodAttrsIL.Emit(OpCodes.Not)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 148, 1, 148, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 149, 1, 149, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont62)
ProcessMethodAttrsIL.MarkLabel(fa62)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 150, 1, 150, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Or)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 151, 1, 151, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont62)
ProcessMethodAttrsIL.MarkLabel(cont62)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 152, 1, 152, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, label5)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 153, 1, 153, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont61)
ProcessMethodAttrsIL.MarkLabel(fa61)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont61)
ProcessMethodAttrsIL.MarkLabel(cont61)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 155, 1, 155, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.SpecialNameAttr))
Dim typ12 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessMethodAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ12))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ12).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 156, 1, 156, 100)
Dim typ13(-1) As Type
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessMethodAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ13(UBound(typ13) + 1)
typ13(UBound(typ13)) = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ13))
Typ = Typ03.GetMethod("IsInstanceOfType", typ13).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 158, 1, 158, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa63 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru63 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont63 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru63)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa63)
ProcessMethodAttrsIL.MarkLabel(tru63)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 159, 1, 159, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, CInt(2048))
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 160, 1, 160, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa64 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru64 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont64 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru64)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa64)
ProcessMethodAttrsIL.MarkLabel(tru64)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 161, 1, 161, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.And)
ProcessMethodAttrsIL.Emit(OpCodes.Not)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 162, 1, 162, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 163, 1, 163, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont64)
ProcessMethodAttrsIL.MarkLabel(fa64)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 164, 1, 164, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Or)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 165, 1, 165, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont64)
ProcessMethodAttrsIL.MarkLabel(cont64)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 166, 1, 166, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, label5)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 167, 1, 167, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont63)
ProcessMethodAttrsIL.MarkLabel(fa63)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont63)
ProcessMethodAttrsIL.MarkLabel(cont63)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 169, 1, 169, 100)
ProcessMethodAttrsIL.MarkLabel(label5)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 171, 1, 171, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa65 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru65 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont65 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru65)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa65)
ProcessMethodAttrsIL.MarkLabel(tru65)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 172, 1, 172, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, label4)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 173, 1, 173, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont65)
ProcessMethodAttrsIL.MarkLabel(fa65)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 174, 1, 174, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, label3)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 175, 1, 175, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont65)
ProcessMethodAttrsIL.MarkLabel(cont65)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 178, 1, 178, 100)
ProcessMethodAttrsIL.MarkLabel(label4)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 181, 1, 181, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.MarkSequencePoint(doc9, 182, 1, 182, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ret)
Dim typ14(-1) As Type
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = GetType(Attributes.Attribute).MakeArrayType()
Dim ProcessFieldAttrs As MethodBuilder = Helpers.DefineMethod("ProcessFieldAttrs", MethodAttributes.Public Or MethodAttributes.Static, GetType(FieldAttributes), typ14)
Dim ProcessFieldAttrsIL As ILGenerator = ProcessFieldAttrs.GetILGenerator()
Dim ProcessFieldAttrsparam01 As ParameterBuilder = ProcessFieldAttrs.DefineParameter(1, ParameterAttributes.None, "attrs")
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 186, 1, 186, 100)
Dim locbldr122 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(FieldAttributes))
locbldr122.SetLocalSymInfo("ta")
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 187, 1, 187, 100)
Dim locbldr123 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(FieldAttributes))
locbldr123.SetLocalSymInfo("temp")
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 189, 1, 189, 100)
Dim label6 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 190, 1, 190, 100)
Dim label7 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 191, 1, 191, 100)
Dim label8 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 193, 1, 193, 100)
Dim locbldr124 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(System.Int32))
locbldr124.SetLocalSymInfo("len")
ProcessFieldAttrsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Attributes.Attribute).MakeArrayType()
ProcessFieldAttrsIL.Emit(OpCodes.Ldlen)
ProcessFieldAttrsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Sub)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 2)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 194, 1, 194, 100)
Dim locbldr125 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(System.Int32))
locbldr125.SetLocalSymInfo("i")
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 3)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 195, 1, 195, 100)
Dim locbldr126 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(System.Boolean))
locbldr126.SetLocalSymInfo("b")
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 196, 1, 196, 100)
Dim locbldr127 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(System.Type))
locbldr127.SetLocalSymInfo("typ")
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 197, 1, 197, 100)
Dim locbldr128 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(Attributes.Attribute))
locbldr128.SetLocalSymInfo("curattr")
ProcessFieldAttrsIL.Emit(OpCodes.Ldnull)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 6)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 198, 1, 198, 100)
Dim locbldr129 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(System.Boolean))
locbldr129.SetLocalSymInfo("fir")
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 200, 1, 200, 100)
ProcessFieldAttrsIL.MarkLabel(label6)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 202, 1, 202, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Add)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 3)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 204, 1, 204, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Attributes.Attribute).MakeArrayType()
Typ02 = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ProcessFieldAttrsIL.Emit(OpCodes.Ldelem, GetType(Attributes.Attribute).MakeArrayType().GetElementType())
Typ = GetType(Attributes.Attribute).MakeArrayType().GetElementType()
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 6)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 206, 1, 206, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.PublicAttr))
Dim typ15 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessFieldAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ15))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ15).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 207, 1, 207, 100)
Dim typ16(-1) As Type
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessFieldAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ16(UBound(typ16) + 1)
typ16(UBound(typ16)) = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ16))
Typ = Typ03.GetMethod("IsInstanceOfType", typ16).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 209, 1, 209, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa66 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru66 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont66 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru66)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa66)
ProcessFieldAttrsIL.MarkLabel(tru66)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 210, 1, 210, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(6))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 211, 1, 211, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa67 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru67 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont67 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru67)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa67)
ProcessFieldAttrsIL.MarkLabel(tru67)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 212, 1, 212, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.And)
ProcessFieldAttrsIL.Emit(OpCodes.Not)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 213, 1, 213, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 214, 1, 214, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont67)
ProcessFieldAttrsIL.MarkLabel(fa67)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 215, 1, 215, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Or)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 216, 1, 216, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont67)
ProcessFieldAttrsIL.MarkLabel(cont67)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 217, 1, 217, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, label8)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 218, 1, 218, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont66)
ProcessFieldAttrsIL.MarkLabel(fa66)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont66)
ProcessFieldAttrsIL.MarkLabel(cont66)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 220, 1, 220, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.StaticAttr))
Dim typ17 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessFieldAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ17))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ17).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 221, 1, 221, 100)
Dim typ18(-1) As Type
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessFieldAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ18(UBound(typ18) + 1)
typ18(UBound(typ18)) = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ18))
Typ = Typ03.GetMethod("IsInstanceOfType", typ18).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 223, 1, 223, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa68 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru68 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont68 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru68)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa68)
ProcessFieldAttrsIL.MarkLabel(tru68)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 224, 1, 224, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(16))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 225, 1, 225, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa69 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru69 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont69 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru69)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa69)
ProcessFieldAttrsIL.MarkLabel(tru69)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 226, 1, 226, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.And)
ProcessFieldAttrsIL.Emit(OpCodes.Not)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 227, 1, 227, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 228, 1, 228, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont69)
ProcessFieldAttrsIL.MarkLabel(fa69)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 229, 1, 229, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Or)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 230, 1, 230, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont69)
ProcessFieldAttrsIL.MarkLabel(cont69)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 231, 1, 231, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, label8)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 232, 1, 232, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont68)
ProcessFieldAttrsIL.MarkLabel(fa68)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont68)
ProcessFieldAttrsIL.MarkLabel(cont68)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 234, 1, 234, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.InitOnlyAttr))
Dim typ19 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessFieldAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ19))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ19).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 235, 1, 235, 100)
Dim typ20(-1) As Type
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessFieldAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ20(UBound(typ20) + 1)
typ20(UBound(typ20)) = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ20))
Typ = Typ03.GetMethod("IsInstanceOfType", typ20).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 237, 1, 237, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa70 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru70 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont70 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru70)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa70)
ProcessFieldAttrsIL.MarkLabel(tru70)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 238, 1, 238, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(32))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 239, 1, 239, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa71 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru71 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont71 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru71)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa71)
ProcessFieldAttrsIL.MarkLabel(tru71)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 240, 1, 240, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.And)
ProcessFieldAttrsIL.Emit(OpCodes.Not)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 241, 1, 241, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 242, 1, 242, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont71)
ProcessFieldAttrsIL.MarkLabel(fa71)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 243, 1, 243, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Or)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 244, 1, 244, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont71)
ProcessFieldAttrsIL.MarkLabel(cont71)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 245, 1, 245, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, label8)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 246, 1, 246, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont70)
ProcessFieldAttrsIL.MarkLabel(fa70)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont70)
ProcessFieldAttrsIL.MarkLabel(cont70)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 248, 1, 248, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.PrivateAttr))
Dim typ21 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessFieldAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ21))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ21).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 249, 1, 249, 100)
Dim typ22(-1) As Type
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessFieldAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ22(UBound(typ22) + 1)
typ22(UBound(typ22)) = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ22))
Typ = Typ03.GetMethod("IsInstanceOfType", typ22).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 251, 1, 251, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa72 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru72 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont72 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru72)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa72)
ProcessFieldAttrsIL.MarkLabel(tru72)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 252, 1, 252, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 253, 1, 253, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa73 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru73 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont73 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru73)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa73)
ProcessFieldAttrsIL.MarkLabel(tru73)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 254, 1, 254, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.And)
ProcessFieldAttrsIL.Emit(OpCodes.Not)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 255, 1, 255, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 256, 1, 256, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont73)
ProcessFieldAttrsIL.MarkLabel(fa73)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 257, 1, 257, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Or)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 258, 1, 258, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont73)
ProcessFieldAttrsIL.MarkLabel(cont73)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 259, 1, 259, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, label8)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 260, 1, 260, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont72)
ProcessFieldAttrsIL.MarkLabel(fa72)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont72)
ProcessFieldAttrsIL.MarkLabel(cont72)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 263, 1, 263, 100)
ProcessFieldAttrsIL.MarkLabel(label8)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 265, 1, 265, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa74 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru74 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont74 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru74)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa74)
ProcessFieldAttrsIL.MarkLabel(tru74)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 266, 1, 266, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, label7)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 267, 1, 267, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont74)
ProcessFieldAttrsIL.MarkLabel(fa74)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 268, 1, 268, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, label6)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 269, 1, 269, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont74)
ProcessFieldAttrsIL.MarkLabel(cont74)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 272, 1, 272, 100)
ProcessFieldAttrsIL.MarkLabel(label7)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 275, 1, 275, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.MarkSequencePoint(doc9, 276, 1, 276, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ret)
Dim typ23(-1) As Type
ReDim Preserve typ23(UBound(typ23) + 1)
typ23(UBound(typ23)) = GetType(TypeTok)
Dim EvalTTok As MethodBuilder = Helpers.DefineMethod("EvalTTok", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ23)
Dim EvalTTokIL As ILGenerator = EvalTTok.GetILGenerator()
Dim EvalTTokparam01 As ParameterBuilder = EvalTTok.DefineParameter(1, ParameterAttributes.None, "tt")
EvalTTokIL.MarkSequencePoint(doc9, 283, 1, 283, 100)
Dim locbldr130 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.Type).MakeArrayType())
locbldr130.SetLocalSymInfo("tarr")
EvalTTokIL.MarkSequencePoint(doc9, 284, 1, 284, 100)
Dim locbldr131 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.Type))
locbldr131.SetLocalSymInfo("typ")
EvalTTokIL.MarkSequencePoint(doc9, 285, 1, 285, 100)
Dim locbldr132 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.Type))
locbldr132.SetLocalSymInfo("temptyp")
EvalTTokIL.MarkSequencePoint(doc9, 286, 1, 286, 100)
Dim locbldr133 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(GenericTypeTok))
locbldr133.SetLocalSymInfo("gtt")
EvalTTokIL.MarkSequencePoint(doc9, 287, 1, 287, 100)
Dim locbldr134 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(TypeTok).MakeArrayType())
locbldr134.SetLocalSymInfo("pttoks")
EvalTTokIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Conv_U)
EvalTTokIL.Emit(OpCodes.Newarr, GetType(TypeTok))
EvalTTokIL.Emit(OpCodes.Stloc, 4)
EvalTTokIL.MarkSequencePoint(doc9, 288, 1, 288, 100)
Dim locbldr135 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(TypeTok))
locbldr135.SetLocalSymInfo("curpttok")
EvalTTokIL.Emit(OpCodes.Newobj, GetType(TypeToK).GetConstructor(Type.EmptyTypes))
EvalTTokIL.Emit(OpCodes.Stloc, 5)
EvalTTokIL.MarkSequencePoint(doc9, 289, 1, 289, 100)
Dim locbldr136 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.Int32))
locbldr136.SetLocalSymInfo("i")
EvalTTokIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Stloc, 6)
EvalTTokIL.MarkSequencePoint(doc9, 290, 1, 290, 100)
Dim locbldr137 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.Int32))
locbldr137.SetLocalSymInfo("len")
EvalTTokIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Stloc, 7)
EvalTTokIL.MarkSequencePoint(doc9, 291, 1, 291, 100)
Dim locbldr138 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.Int32))
locbldr138.SetLocalSymInfo("n")
EvalTTokIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Stloc, 8)
EvalTTokIL.MarkSequencePoint(doc9, 292, 1, 292, 100)
Dim locbldr139 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.Int32))
locbldr139.SetLocalSymInfo("comp")
EvalTTokIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Stloc, 9)
EvalTTokIL.MarkSequencePoint(doc9, 293, 1, 293, 100)
Dim locbldr140 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.String))
locbldr140.SetLocalSymInfo("tstr")
EvalTTokIL.Emit(OpCodes.Ldstr, " ")
Typ = GetType(System.String)
EvalTTokIL.Emit(OpCodes.Stloc, 10)
EvalTTokIL.MarkSequencePoint(doc9, 295, 1, 295, 100)
Dim locbldr141 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.Type))
locbldr141.SetLocalSymInfo("ttyp")
EvalTTokIL.Emit(OpCodes.Ldtoken, GetType(GenericTypeTok))
Dim typ24 As Type() = {GetType(System.RuntimeTypeHandle)}
EvalTTokIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ24))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ24).ReturnType
EvalTTokIL.Emit(OpCodes.Stloc, 11)
EvalTTokIL.MarkSequencePoint(doc9, 296, 1, 296, 100)
Dim locbldr142 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.Boolean))
locbldr142.SetLocalSymInfo("b")
Dim typ25(-1) As Type
EvalTTokIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Type)
Typ03 = Typ
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ25(UBound(typ25) + 1)
typ25(UBound(typ25)) = Typ
EvalTTokIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ25))
Typ = Typ03.GetMethod("IsInstanceOfType", typ25).ReturnType
EvalTTokIL.Emit(OpCodes.Stloc, 12)
EvalTTokIL.MarkSequencePoint(doc9, 298, 1, 298, 100)
Dim label9 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
EvalTTokIL.MarkSequencePoint(doc9, 299, 1, 299, 100)
Dim label10 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
EvalTTokIL.MarkSequencePoint(doc9, 301, 1, 301, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(System.Boolean)
EvalTTokIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa75 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
Dim tru75 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
Dim cont75 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
EvalTTokIL.Emit(OpCodes.Beq, fa75)
EvalTTokIL.Emit(OpCodes.Br, tru75)
EvalTTokIL.MarkLabel(tru75)
EvalTTokIL.MarkSequencePoint(doc9, 303, 1, 303, 100)
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Stloc, 3)
EvalTTokIL.MarkSequencePoint(doc9, 304, 1, 304, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(GenericTypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(GenericTypeTok).GetField("Params"))
Typ = GetType(GenericTypeTok).GetField("Params").FieldType
EvalTTokIL.Emit(OpCodes.Stloc, 4)
EvalTTokIL.MarkSequencePoint(doc9, 305, 1, 305, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(TypeTok).MakeArrayType()
EvalTTokIL.Emit(OpCodes.Ldlen)
EvalTTokIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Stloc, 8)
EvalTTokIL.MarkSequencePoint(doc9, 306, 1, 306, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Sub)
EvalTTokIL.Emit(OpCodes.Stloc, 7)
EvalTTokIL.MarkSequencePoint(doc9, 308, 1, 308, 100)
EvalTTokIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
EvalTTokIL.Emit(OpCodes.Stloc, 0)
EvalTTokIL.MarkSequencePoint(doc9, 309, 1, 309, 100)
EvalTTokIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Conv_U)
EvalTTokIL.Emit(OpCodes.Newarr, GetType(System.Type))
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("TypArr"))
EvalTTokIL.MarkSequencePoint(doc9, 311, 1, 311, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(GenericTypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(GenericTypeTok).GetField("IsArray"))
Typ = GetType(GenericTypeTok).GetField("IsArray").FieldType
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeArr"))
EvalTTokIL.MarkSequencePoint(doc9, 312, 1, 312, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(GenericTypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(GenericTypeTok).GetField("IsByRef"))
Typ = GetType(GenericTypeTok).GetField("IsByRef").FieldType
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeRef"))
EvalTTokIL.MarkSequencePoint(doc9, 313, 1, 313, 100)
Dim typ26(-1) As Type
EvalTTokIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(GenericTypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(GenericTypeTok).GetField("Value"))
Typ = GetType(GenericTypeTok).GetField("Value").FieldType
ReDim Preserve typ26(UBound(typ26) + 1)
typ26(UBound(typ26)) = Typ
EvalTTokIL.Emit(OpCodes.Ldstr, "`")
Typ = GetType(System.String)
ReDim Preserve typ26(UBound(typ26) + 1)
typ26(UBound(typ26)) = Typ
EvalTTokIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Int32)
Dim typ27 As Type() = {Typ}
EvalTTokIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToString", typ27))
Typ = GetType(System.Convert).GetMethod("ToString", typ27).ReturnType
ReDim Preserve typ26(UBound(typ26) + 1)
typ26(UBound(typ26)) = Typ
EvalTTokIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ26))
Typ = GetType(String).GetMethod("Concat", typ26).ReturnType
EvalTTokIL.Emit(OpCodes.Stloc, 10)
EvalTTokIL.MarkSequencePoint(doc9, 314, 1, 314, 100)
Dim typ28(-1) As Type
EvalTTokIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(System.String)
ReDim Preserve typ28(UBound(typ28) + 1)
typ28(UBound(typ28)) = Typ
EvalTTokIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadClass", typ28))
Typ = GetType(Loader).GetMethod("LoadClass", typ28).ReturnType
EvalTTokIL.Emit(OpCodes.Stloc, 1)
EvalTTokIL.MarkSequencePoint(doc9, 316, 1, 316, 100)
EvalTTokIL.MarkLabel(label10)
EvalTTokIL.MarkSequencePoint(doc9, 318, 1, 318, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Add)
EvalTTokIL.Emit(OpCodes.Stloc, 6)
EvalTTokIL.MarkSequencePoint(doc9, 320, 1, 320, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(TypeTok).MakeArrayType()
Typ02 = Typ
EvalTTokIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EvalTTokIL.Emit(OpCodes.Ldelem, GetType(TypeTok).MakeArrayType().GetElementType())
Typ = GetType(TypeTok).MakeArrayType().GetElementType()
EvalTTokIL.Emit(OpCodes.Stloc, 5)
EvalTTokIL.MarkSequencePoint(doc9, 321, 1, 321, 100)
Dim typ29(-1) As Type
EvalTTokIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(TypeTok)
ReDim Preserve typ29(UBound(typ29) + 1)
typ29(UBound(typ29)) = Typ
EvalTTokIL.Emit(OpCodes.Call, EvalTTok)
Typ = EvalTTok.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EvalTTokIL.Emit(OpCodes.Pop)
End If
EvalTTokIL.MarkSequencePoint(doc9, 322, 1, 322, 100)
EvalTTokIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type01"))
Typ = GetType(AsmFactory).GetField("Type01").FieldType
EvalTTokIL.Emit(OpCodes.Stloc, 2)
EvalTTokIL.MarkSequencePoint(doc9, 323, 1, 323, 100)
Dim typ30(-1) As Type
EvalTTokIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ30(UBound(typ30) + 1)
typ30(UBound(typ30)) = Typ
EvalTTokIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("AddTyp", typ30))
Typ = GetType(AsmFactory).GetMethod("AddTyp", typ30).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EvalTTokIL.Emit(OpCodes.Pop)
End If
EvalTTokIL.MarkSequencePoint(doc9, 325, 1, 325, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
Dim fa76 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
Dim tru76 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
Dim cont76 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
EvalTTokIL.Emit(OpCodes.Beq, tru76)
EvalTTokIL.Emit(OpCodes.Br, fa76)
EvalTTokIL.MarkLabel(tru76)
EvalTTokIL.MarkSequencePoint(doc9, 326, 1, 326, 100)
EvalTTokIL.Emit(OpCodes.Br, label9)
EvalTTokIL.MarkSequencePoint(doc9, 327, 1, 327, 100)
EvalTTokIL.Emit(OpCodes.Br, cont76)
EvalTTokIL.MarkLabel(fa76)
EvalTTokIL.MarkSequencePoint(doc9, 328, 1, 328, 100)
EvalTTokIL.Emit(OpCodes.Br, label10)
EvalTTokIL.MarkSequencePoint(doc9, 329, 1, 329, 100)
EvalTTokIL.Emit(OpCodes.Br, cont76)
EvalTTokIL.MarkLabel(cont76)
EvalTTokIL.MarkSequencePoint(doc9, 331, 1, 331, 100)
EvalTTokIL.MarkLabel(label9)
EvalTTokIL.MarkSequencePoint(doc9, 334, 1, 334, 100)
Dim typ31(-1) As Type
EvalTTokIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EvalTTokIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ReDim Preserve typ31(UBound(typ31) + 1)
typ31(UBound(typ31)) = Typ
EvalTTokIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("MakeGenericType", typ31))
Typ = Typ03.GetMethod("MakeGenericType", typ31).ReturnType
EvalTTokIL.Emit(OpCodes.Stloc, 1)
EvalTTokIL.MarkSequencePoint(doc9, 335, 1, 335, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type).MakeArrayType()
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("TypArr"))
EvalTTokIL.MarkSequencePoint(doc9, 337, 1, 337, 100)
EvalTTokIL.Emit(OpCodes.Br, cont75)
EvalTTokIL.MarkLabel(fa75)
EvalTTokIL.MarkSequencePoint(doc9, 339, 1, 339, 100)
Dim label11 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
EvalTTokIL.MarkSequencePoint(doc9, 341, 1, 341, 100)
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("RefTyp"))
Typ = GetType(TypeTok).GetField("RefTyp").FieldType
EvalTTokIL.Emit(OpCodes.Ldnull)
Dim fa77 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
Dim tru77 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
Dim cont77 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
EvalTTokIL.Emit(OpCodes.Beq, tru77)
EvalTTokIL.Emit(OpCodes.Br, fa77)
EvalTTokIL.MarkLabel(tru77)
EvalTTokIL.MarkSequencePoint(doc9, 342, 1, 342, 100)
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("IsArray"))
Typ = GetType(TypeTok).GetField("IsArray").FieldType
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeArr"))
EvalTTokIL.MarkSequencePoint(doc9, 343, 1, 343, 100)
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("IsByRef"))
Typ = GetType(TypeTok).GetField("IsByRef").FieldType
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeRef"))
EvalTTokIL.MarkSequencePoint(doc9, 344, 1, 344, 100)
Dim typ32(-1) As Type
EvalTTokIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypName"))
Typ = GetType(AsmFactory).GetField("CurnTypName").FieldType
ReDim Preserve typ32(UBound(typ32) + 1)
typ32(UBound(typ32)) = Typ
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("Value"))
Typ = GetType(TypeTok).GetField("Value").FieldType
ReDim Preserve typ32(UBound(typ32) + 1)
typ32(UBound(typ32)) = Typ
EvalTTokIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ32))
Typ = GetType(String).GetMethod("Compare", typ32).ReturnType
EvalTTokIL.Emit(OpCodes.Stloc, 9)
EvalTTokIL.MarkSequencePoint(doc9, 345, 1, 345, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa78 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
Dim tru78 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
Dim cont78 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
EvalTTokIL.Emit(OpCodes.Beq, tru78)
EvalTTokIL.Emit(OpCodes.Br, fa78)
EvalTTokIL.MarkLabel(tru78)
EvalTTokIL.MarkSequencePoint(doc9, 346, 1, 346, 100)
EvalTTokIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
EvalTTokIL.Emit(OpCodes.Stloc, 1)
EvalTTokIL.MarkSequencePoint(doc9, 347, 1, 347, 100)
EvalTTokIL.Emit(OpCodes.Br, cont78)
EvalTTokIL.MarkLabel(fa78)
EvalTTokIL.MarkSequencePoint(doc9, 348, 1, 348, 100)
Dim typ33(-1) As Type
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("Value"))
Typ = GetType(TypeTok).GetField("Value").FieldType
ReDim Preserve typ33(UBound(typ33) + 1)
typ33(UBound(typ33)) = Typ
EvalTTokIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadClass", typ33))
Typ = GetType(Loader).GetMethod("LoadClass", typ33).ReturnType
EvalTTokIL.Emit(OpCodes.Stloc, 1)
EvalTTokIL.MarkSequencePoint(doc9, 349, 1, 349, 100)
EvalTTokIL.Emit(OpCodes.Br, cont78)
EvalTTokIL.MarkLabel(cont78)
EvalTTokIL.MarkSequencePoint(doc9, 350, 1, 350, 100)
EvalTTokIL.Emit(OpCodes.Br, label11)
EvalTTokIL.MarkSequencePoint(doc9, 351, 1, 351, 100)
EvalTTokIL.Emit(OpCodes.Br, cont77)
EvalTTokIL.MarkLabel(fa77)
EvalTTokIL.Emit(OpCodes.Br, cont77)
EvalTTokIL.MarkLabel(cont77)
EvalTTokIL.MarkSequencePoint(doc9, 353, 1, 353, 100)
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("IsArray"))
Typ = GetType(TypeTok).GetField("IsArray").FieldType
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeArr"))
EvalTTokIL.MarkSequencePoint(doc9, 354, 1, 354, 100)
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("IsByRef"))
Typ = GetType(TypeTok).GetField("IsByRef").FieldType
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeRef"))
EvalTTokIL.MarkSequencePoint(doc9, 355, 1, 355, 100)
Dim typ34(-1) As Type
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("RefTyp"))
Typ = GetType(TypeTok).GetField("RefTyp").FieldType
ReDim Preserve typ34(UBound(typ34) + 1)
typ34(UBound(typ34)) = Typ
EvalTTokIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("ProcessType", typ34))
Typ = GetType(Loader).GetMethod("ProcessType", typ34).ReturnType
EvalTTokIL.Emit(OpCodes.Stloc, 1)
EvalTTokIL.MarkSequencePoint(doc9, 357, 1, 357, 100)
EvalTTokIL.MarkLabel(label11)
EvalTTokIL.MarkSequencePoint(doc9, 359, 1, 359, 100)
EvalTTokIL.Emit(OpCodes.Br, cont75)
EvalTTokIL.MarkLabel(cont75)
EvalTTokIL.MarkSequencePoint(doc9, 361, 1, 361, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type01"))
EvalTTokIL.MarkSequencePoint(doc9, 363, 1, 363, 100)
EvalTTokIL.Emit(OpCodes.Ret)
Dim typ35(-1) As Type
ReDim Preserve typ35(UBound(typ35) + 1)
typ35(UBound(typ35)) = GetType(TypeTok)
Dim CommitEvalTTok As MethodBuilder = Helpers.DefineMethod("CommitEvalTTok", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Type), typ35)
Dim CommitEvalTTokIL As ILGenerator = CommitEvalTTok.GetILGenerator()
Dim CommitEvalTTokparam01 As ParameterBuilder = CommitEvalTTok.DefineParameter(1, ParameterAttributes.None, "tt")
CommitEvalTTokIL.MarkSequencePoint(doc9, 366, 1, 366, 100)
Dim typ36(-1) As Type
CommitEvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
ReDim Preserve typ36(UBound(typ36) + 1)
typ36(UBound(typ36)) = Typ
CommitEvalTTokIL.Emit(OpCodes.Call, EvalTTok)
Typ = EvalTTok.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
CommitEvalTTokIL.Emit(OpCodes.Pop)
End If
CommitEvalTTokIL.MarkSequencePoint(doc9, 367, 1, 367, 100)
CommitEvalTTokIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type01"))
Typ = GetType(AsmFactory).GetField("Type01").FieldType
CommitEvalTTokIL.MarkSequencePoint(doc9, 368, 1, 368, 100)
CommitEvalTTokIL.Emit(OpCodes.Ret)
Dim typ37(-1) As Type
ReDim Preserve typ37(UBound(typ37) + 1)
typ37(UBound(typ37)) = GetType(Expr).MakeArrayType()
Dim ProcessParams As MethodBuilder = Helpers.DefineMethod("ProcessParams", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ37)
Dim ProcessParamsIL As ILGenerator = ProcessParams.GetILGenerator()
Dim ProcessParamsparam01 As ParameterBuilder = ProcessParams.DefineParameter(1, ParameterAttributes.None, "ps")
ProcessParamsIL.MarkSequencePoint(doc9, 372, 1, 372, 100)
Dim locbldr143 As LocalBuilder = ProcessParamsIL.DeclareLocal(GetType(System.Int32))
locbldr143.SetLocalSymInfo("len")
ProcessParamsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Expr).MakeArrayType()
ProcessParamsIL.Emit(OpCodes.Ldlen)
ProcessParamsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessParamsIL.Emit(OpCodes.Sub)
ProcessParamsIL.Emit(OpCodes.Stloc, 0)
ProcessParamsIL.MarkSequencePoint(doc9, 373, 1, 373, 100)
Dim locbldr144 As LocalBuilder = ProcessParamsIL.DeclareLocal(GetType(System.Int32))
locbldr144.SetLocalSymInfo("i")
ProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ProcessParamsIL.Emit(OpCodes.Stloc, 1)
ProcessParamsIL.MarkSequencePoint(doc9, 374, 1, 374, 100)
Dim locbldr145 As LocalBuilder = ProcessParamsIL.DeclareLocal(GetType(VarExpr))
locbldr145.SetLocalSymInfo("curp")
ProcessParamsIL.Emit(OpCodes.Ldnull)
ProcessParamsIL.Emit(OpCodes.Stloc, 2)
ProcessParamsIL.MarkSequencePoint(doc9, 375, 1, 375, 100)
Dim locbldr146 As LocalBuilder = ProcessParamsIL.DeclareLocal(GetType(TypeTok))
locbldr146.SetLocalSymInfo("typtok")
ProcessParamsIL.MarkSequencePoint(doc9, 376, 1, 376, 100)
Dim locbldr147 As LocalBuilder = ProcessParamsIL.DeclareLocal(GetType(Ident))
locbldr147.SetLocalSymInfo("nam")
ProcessParamsIL.MarkSequencePoint(doc9, 377, 1, 377, 100)
Dim locbldr148 As LocalBuilder = ProcessParamsIL.DeclareLocal(GetType(System.Type))
locbldr148.SetLocalSymInfo("typ")
ProcessParamsIL.Emit(OpCodes.Ldnull)
ProcessParamsIL.Emit(OpCodes.Stloc, 5)
ProcessParamsIL.MarkSequencePoint(doc9, 381, 1, 381, 100)
Dim label12 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
ProcessParamsIL.MarkSequencePoint(doc9, 382, 1, 382, 100)
Dim label13 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
ProcessParamsIL.MarkSequencePoint(doc9, 384, 1, 384, 100)
ProcessParamsIL.MarkLabel(label12)
ProcessParamsIL.MarkSequencePoint(doc9, 386, 1, 386, 100)
ProcessParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessParamsIL.Emit(OpCodes.Add)
ProcessParamsIL.Emit(OpCodes.Stloc, 1)
ProcessParamsIL.MarkSequencePoint(doc9, 388, 1, 388, 100)
ProcessParamsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Expr).MakeArrayType()
Typ02 = Typ
ProcessParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ProcessParamsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ProcessParamsIL.Emit(OpCodes.Ldelem, GetType(Expr).MakeArrayType().GetElementType())
Typ = GetType(Expr).MakeArrayType().GetElementType()
ProcessParamsIL.Emit(OpCodes.Stloc, 2)
ProcessParamsIL.MarkSequencePoint(doc9, 389, 1, 389, 100)
ProcessParamsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarExpr)
ProcessParamsIL.Emit(OpCodes.Ldfld, GetType(VarExpr).GetField("VarTyp"))
Typ = GetType(VarExpr).GetField("VarTyp").FieldType
ProcessParamsIL.Emit(OpCodes.Stloc, 3)
ProcessParamsIL.MarkSequencePoint(doc9, 402, 1, 402, 100)
Dim typ38(-1) As Type
ProcessParamsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(TypeTok)
ReDim Preserve typ38(UBound(typ38) + 1)
typ38(UBound(typ38)) = Typ
ProcessParamsIL.Emit(OpCodes.Call, CommitEvalTTok)
Typ = CommitEvalTTok.ReturnType
ProcessParamsIL.Emit(OpCodes.Stloc, 5)
ProcessParamsIL.MarkSequencePoint(doc9, 404, 1, 404, 100)
ProcessParamsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
ProcessParamsIL.Emit(OpCodes.Ldnull)
Dim fa79 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
Dim tru79 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
Dim cont79 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
ProcessParamsIL.Emit(OpCodes.Beq, fa79)
ProcessParamsIL.Emit(OpCodes.Br, tru79)
ProcessParamsIL.MarkLabel(tru79)
ProcessParamsIL.MarkSequencePoint(doc9, 405, 1, 405, 100)
Dim typ39(-1) As Type
ProcessParamsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
ReDim Preserve typ39(UBound(typ39) + 1)
typ39(UBound(typ39)) = Typ
ProcessParamsIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("AddTyp", typ39))
Typ = GetType(AsmFactory).GetMethod("AddTyp", typ39).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ProcessParamsIL.Emit(OpCodes.Pop)
End If
ProcessParamsIL.MarkSequencePoint(doc9, 406, 1, 406, 100)
ProcessParamsIL.Emit(OpCodes.Br, cont79)
ProcessParamsIL.MarkLabel(fa79)
ProcessParamsIL.Emit(OpCodes.Br, cont79)
ProcessParamsIL.MarkLabel(cont79)
ProcessParamsIL.MarkSequencePoint(doc9, 408, 1, 408, 100)
ProcessParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ProcessParamsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
Dim fa80 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
Dim tru80 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
Dim cont80 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
ProcessParamsIL.Emit(OpCodes.Beq, tru80)
ProcessParamsIL.Emit(OpCodes.Br, fa80)
ProcessParamsIL.MarkLabel(tru80)
ProcessParamsIL.MarkSequencePoint(doc9, 409, 1, 409, 100)
ProcessParamsIL.Emit(OpCodes.Br, label13)
ProcessParamsIL.MarkSequencePoint(doc9, 410, 1, 410, 100)
ProcessParamsIL.Emit(OpCodes.Br, cont80)
ProcessParamsIL.MarkLabel(fa80)
ProcessParamsIL.MarkSequencePoint(doc9, 411, 1, 411, 100)
ProcessParamsIL.Emit(OpCodes.Br, label12)
ProcessParamsIL.MarkSequencePoint(doc9, 412, 1, 412, 100)
ProcessParamsIL.Emit(OpCodes.Br, cont80)
ProcessParamsIL.MarkLabel(cont80)
ProcessParamsIL.MarkSequencePoint(doc9, 414, 1, 414, 100)
ProcessParamsIL.MarkLabel(label13)
ProcessParamsIL.MarkSequencePoint(doc9, 416, 1, 416, 100)
ProcessParamsIL.Emit(OpCodes.Ret)
Dim typ40(-1) As Type
ReDim Preserve typ40(UBound(typ40) + 1)
typ40(UBound(typ40)) = GetType(Expr).MakeArrayType()
Dim PostProcessParams As MethodBuilder = Helpers.DefineMethod("PostProcessParams", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ40)
Dim PostProcessParamsIL As ILGenerator = PostProcessParams.GetILGenerator()
Dim PostProcessParamsparam01 As ParameterBuilder = PostProcessParams.DefineParameter(1, ParameterAttributes.None, "ps")
PostProcessParamsIL.MarkSequencePoint(doc9, 420, 1, 420, 100)
Dim locbldr149 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(System.Int32))
locbldr149.SetLocalSymInfo("len")
PostProcessParamsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Expr).MakeArrayType()
PostProcessParamsIL.Emit(OpCodes.Ldlen)
PostProcessParamsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Sub)
PostProcessParamsIL.Emit(OpCodes.Stloc, 0)
PostProcessParamsIL.MarkSequencePoint(doc9, 421, 1, 421, 100)
Dim locbldr150 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(System.Int32))
locbldr150.SetLocalSymInfo("i")
PostProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Stloc, 1)
PostProcessParamsIL.MarkSequencePoint(doc9, 422, 1, 422, 100)
Dim locbldr151 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(VarExpr))
locbldr151.SetLocalSymInfo("curp")
PostProcessParamsIL.Emit(OpCodes.Ldnull)
PostProcessParamsIL.Emit(OpCodes.Stloc, 2)
PostProcessParamsIL.MarkSequencePoint(doc9, 423, 1, 423, 100)
Dim locbldr152 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(Ident))
locbldr152.SetLocalSymInfo("nam")
PostProcessParamsIL.MarkSequencePoint(doc9, 424, 1, 424, 100)
Dim locbldr153 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(TypeTok))
locbldr153.SetLocalSymInfo("typtok")
PostProcessParamsIL.MarkSequencePoint(doc9, 425, 1, 425, 100)
Dim locbldr154 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(System.Type))
locbldr154.SetLocalSymInfo("typ")
PostProcessParamsIL.Emit(OpCodes.Ldnull)
PostProcessParamsIL.Emit(OpCodes.Stloc, 5)
PostProcessParamsIL.MarkSequencePoint(doc9, 426, 1, 426, 100)
Dim locbldr155 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(System.Type))
locbldr155.SetLocalSymInfo("reft")
PostProcessParamsIL.MarkSequencePoint(doc9, 429, 1, 429, 100)
Dim label14 As System.Reflection.Emit.Label = PostProcessParamsIL.DefineLabel()
PostProcessParamsIL.MarkSequencePoint(doc9, 430, 1, 430, 100)
Dim label15 As System.Reflection.Emit.Label = PostProcessParamsIL.DefineLabel()
PostProcessParamsIL.MarkSequencePoint(doc9, 432, 1, 432, 100)
PostProcessParamsIL.MarkLabel(label14)
PostProcessParamsIL.MarkSequencePoint(doc9, 434, 1, 434, 100)
PostProcessParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Add)
PostProcessParamsIL.Emit(OpCodes.Stloc, 1)
PostProcessParamsIL.MarkSequencePoint(doc9, 436, 1, 436, 100)
PostProcessParamsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Expr).MakeArrayType()
Typ02 = Typ
PostProcessParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
PostProcessParamsIL.Emit(OpCodes.Ldelem, GetType(Expr).MakeArrayType().GetElementType())
Typ = GetType(Expr).MakeArrayType().GetElementType()
PostProcessParamsIL.Emit(OpCodes.Stloc, 2)
PostProcessParamsIL.MarkSequencePoint(doc9, 438, 1, 438, 100)
Dim locbldr156 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(MethodBuilder))
locbldr156.SetLocalSymInfo("mb")
PostProcessParamsIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("Met"))
Typ = GetType(ILEmitter).GetField("Met").FieldType
PostProcessParamsIL.Emit(OpCodes.Stloc, 7)
PostProcessParamsIL.MarkSequencePoint(doc9, 439, 1, 439, 100)
Dim locbldr157 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(ParameterAttributes))
locbldr157.SetLocalSymInfo("non")
PostProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Stloc, 8)
PostProcessParamsIL.MarkSequencePoint(doc9, 440, 1, 440, 100)
PostProcessParamsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarExpr)
PostProcessParamsIL.Emit(OpCodes.Ldfld, GetType(VarExpr).GetField("VarName"))
Typ = GetType(VarExpr).GetField("VarName").FieldType
PostProcessParamsIL.Emit(OpCodes.Stloc, 3)
PostProcessParamsIL.MarkSequencePoint(doc9, 441, 1, 441, 100)
Dim locbldr158 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(System.Int32))
locbldr158.SetLocalSymInfo("ind")
PostProcessParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Add)
PostProcessParamsIL.Emit(OpCodes.Stloc, 9)
PostProcessParamsIL.MarkSequencePoint(doc9, 442, 1, 442, 100)
Dim typ41(-1) As Type
PostProcessParamsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(MethodBuilder)
Typ03 = Typ
PostProcessParamsIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Int32)
ReDim Preserve typ41(UBound(typ41) + 1)
typ41(UBound(typ41)) = Typ
PostProcessParamsIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(ParameterAttributes)
ReDim Preserve typ41(UBound(typ41) + 1)
typ41(UBound(typ41)) = Typ
PostProcessParamsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Ident)
PostProcessParamsIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ41(UBound(typ41) + 1)
typ41(UBound(typ41)) = Typ
PostProcessParamsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineParameter", typ41))
Typ = Typ03.GetMethod("DefineParameter", typ41).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
PostProcessParamsIL.Emit(OpCodes.Pop)
End If
PostProcessParamsIL.MarkSequencePoint(doc9, 444, 1, 444, 100)
PostProcessParamsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarExpr)
PostProcessParamsIL.Emit(OpCodes.Ldfld, GetType(VarExpr).GetField("VarTyp"))
Typ = GetType(VarExpr).GetField("VarTyp").FieldType
PostProcessParamsIL.Emit(OpCodes.Stloc, 4)
PostProcessParamsIL.MarkSequencePoint(doc9, 457, 1, 457, 100)
Dim typ42(-1) As Type
PostProcessParamsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(TypeTok)
ReDim Preserve typ42(UBound(typ42) + 1)
typ42(UBound(typ42)) = Typ
PostProcessParamsIL.Emit(OpCodes.Call, CommitEvalTTok)
Typ = CommitEvalTTok.ReturnType
PostProcessParamsIL.Emit(OpCodes.Stloc, 5)
PostProcessParamsIL.MarkSequencePoint(doc9, 459, 1, 459, 100)
PostProcessParamsIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("ArgInd"))
Typ = GetType(ILEmitter).GetField("ArgInd").FieldType
PostProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Add)
PostProcessParamsIL.Emit(OpCodes.Stsfld, GetType(ILEmitter).GetField("ArgInd"))
PostProcessParamsIL.MarkSequencePoint(doc9, 460, 1, 460, 100)
Dim typ43(-1) As Type
PostProcessParamsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Ident)
PostProcessParamsIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ43(UBound(typ43) + 1)
typ43(UBound(typ43)) = Typ
PostProcessParamsIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReDim Preserve typ43(UBound(typ43) + 1)
typ43(UBound(typ43)) = Typ
PostProcessParamsIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("ArgInd"))
Typ = GetType(ILEmitter).GetField("ArgInd").FieldType
ReDim Preserve typ43(UBound(typ43) + 1)
typ43(UBound(typ43)) = Typ
PostProcessParamsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
ReDim Preserve typ43(UBound(typ43) + 1)
typ43(UBound(typ43)) = Typ
PostProcessParamsIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddVar", typ43))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddVar", typ43).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
PostProcessParamsIL.Emit(OpCodes.Pop)
End If
PostProcessParamsIL.MarkSequencePoint(doc9, 462, 1, 462, 100)
PostProcessParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
Dim fa81 As System.Reflection.Emit.Label = PostProcessParamsIL.DefineLabel()
Dim tru81 As System.Reflection.Emit.Label = PostProcessParamsIL.DefineLabel()
Dim cont81 As System.Reflection.Emit.Label = PostProcessParamsIL.DefineLabel()
PostProcessParamsIL.Emit(OpCodes.Beq, tru81)
PostProcessParamsIL.Emit(OpCodes.Br, fa81)
PostProcessParamsIL.MarkLabel(tru81)
PostProcessParamsIL.MarkSequencePoint(doc9, 463, 1, 463, 100)
PostProcessParamsIL.Emit(OpCodes.Br, label15)
PostProcessParamsIL.MarkSequencePoint(doc9, 464, 1, 464, 100)
PostProcessParamsIL.Emit(OpCodes.Br, cont81)
PostProcessParamsIL.MarkLabel(fa81)
PostProcessParamsIL.MarkSequencePoint(doc9, 465, 1, 465, 100)
PostProcessParamsIL.Emit(OpCodes.Br, label14)
PostProcessParamsIL.MarkSequencePoint(doc9, 466, 1, 466, 100)
PostProcessParamsIL.Emit(OpCodes.Br, cont81)
PostProcessParamsIL.MarkLabel(cont81)
PostProcessParamsIL.MarkSequencePoint(doc9, 468, 1, 468, 100)
PostProcessParamsIL.MarkLabel(label15)
PostProcessParamsIL.MarkSequencePoint(doc9, 470, 1, 470, 100)
PostProcessParamsIL.Emit(OpCodes.Ret)
Dim typ44(-1) As Type
ReDim Preserve typ44(UBound(typ44) + 1)
typ44(UBound(typ44)) = GetType(Expr).MakeArrayType()
Dim PostProcessParamsConstr As MethodBuilder = Helpers.DefineMethod("PostProcessParamsConstr", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ44)
Dim PostProcessParamsConstrIL As ILGenerator = PostProcessParamsConstr.GetILGenerator()
Dim PostProcessParamsConstrparam01 As ParameterBuilder = PostProcessParamsConstr.DefineParameter(1, ParameterAttributes.None, "ps")
PostProcessParamsConstrIL.MarkSequencePoint(doc9, 474, 1, 474, 100)
Dim locbldr159 As LocalBuilder = PostProcessParamsConstrIL.DeclareLocal(GetType(System.Int32))
locbldr159.SetLocalSymInfo("len")
PostProcessParamsConstrIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Expr).MakeArrayType()
PostProcessParamsConstrIL.Emit(OpCodes.Ldlen)
PostProcessParamsConstrIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Sub)
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 0)
PostProcessParamsConstrIL.MarkSequencePoint(doc9, 475, 1, 475, 100)
Dim locbldr160 As LocalBuilder = PostProcessParamsConstrIL.DeclareLocal(GetType(System.Int32))
locbldr160.SetLocalSymInfo("i")
PostProcessParamsConstrIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 1)
PostProcessParamsConstrIL.MarkSequencePoint(doc9, 476, 1, 476, 100)
Dim locbldr161 As LocalBuilder = PostProcessParamsConstrIL.DeclareLocal(GetType(VarExpr))
locbldr161.SetLocalSymInfo("curp")
PostProcessParamsConstrIL.Emit(OpCodes.Ldnull)
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 2)
PostProcessParamsConstrIL.MarkSequencePoint(doc9, 477, 1, 477, 100)
Dim locbldr162 As LocalBuilder = PostProcessParamsConstrIL.DeclareLocal(GetType(Ident))
locbldr162.SetLocalSymInfo("nam")
PostProcessParamsConstrIL.MarkSequencePoint(doc9, 478, 1, 478, 100)
Dim locbldr163 As LocalBuilder = PostProcessParamsConstrIL.DeclareLocal(GetType(TypeTok))
locbldr163.SetLocalSymInfo("typtok")
PostProcessParamsConstrIL.MarkSequencePoint(doc9, 479, 1, 479, 100)
Dim locbldr164 As LocalBuilder = PostProcessParamsConstrIL.DeclareLocal(GetType(System.Type))
locbldr164.SetLocalSymInfo("typ")
PostProcessParamsConstrIL.Emit(OpCodes.Ldnull)
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 5)
PostProcessParamsConstrIL.MarkSequencePoint(doc9, 482, 1, 482, 100)
Dim label16 As System.Reflection.Emit.Label = PostProcessParamsConstrIL.DefineLabel()
PostProcessParamsConstrIL.MarkSequencePoint(doc9, 483, 1, 483, 100)
Dim label17 As System.Reflection.Emit.Label = PostProcessParamsConstrIL.DefineLabel()
PostProcessParamsConstrIL.MarkSequencePoint(doc9, 485, 1, 485, 100)
PostProcessParamsConstrIL.MarkLabel(label16)
PostProcessParamsConstrIL.MarkSequencePoint(doc9, 487, 1, 487, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Add)
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 1)
PostProcessParamsConstrIL.MarkSequencePoint(doc9, 489, 1, 489, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Expr).MakeArrayType()
Typ02 = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Conv_U)
Typ = Typ02
PostProcessParamsConstrIL.Emit(OpCodes.Ldelem, GetType(Expr).MakeArrayType().GetElementType())
Typ = GetType(Expr).MakeArrayType().GetElementType()
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 2)
PostProcessParamsConstrIL.MarkSequencePoint(doc9, 491, 1, 491, 100)
Dim locbldr165 As LocalBuilder = PostProcessParamsConstrIL.DeclareLocal(GetType(ConstructorBuilder))
locbldr165.SetLocalSymInfo("cb")
PostProcessParamsConstrIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("Constr"))
Typ = GetType(ILEmitter).GetField("Constr").FieldType
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 6)
PostProcessParamsConstrIL.MarkSequencePoint(doc9, 492, 1, 492, 100)
Dim locbldr166 As LocalBuilder = PostProcessParamsConstrIL.DeclareLocal(GetType(ParameterAttributes))
locbldr166.SetLocalSymInfo("non")
PostProcessParamsConstrIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 7)
PostProcessParamsConstrIL.MarkSequencePoint(doc9, 493, 1, 493, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarExpr)
PostProcessParamsConstrIL.Emit(OpCodes.Ldfld, GetType(VarExpr).GetField("VarName"))
Typ = GetType(VarExpr).GetField("VarName").FieldType
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 3)
PostProcessParamsConstrIL.MarkSequencePoint(doc9, 494, 1, 494, 100)
Dim locbldr167 As LocalBuilder = PostProcessParamsConstrIL.DeclareLocal(GetType(System.Int32))
locbldr167.SetLocalSymInfo("ind")
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Add)
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 8)
PostProcessParamsConstrIL.MarkSequencePoint(doc9, 495, 1, 495, 100)
Dim typ45(-1) As Type
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(ConstructorBuilder)
Typ03 = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Int32)
ReDim Preserve typ45(UBound(typ45) + 1)
typ45(UBound(typ45)) = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(ParameterAttributes)
ReDim Preserve typ45(UBound(typ45) + 1)
typ45(UBound(typ45)) = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Ident)
PostProcessParamsConstrIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ45(UBound(typ45) + 1)
typ45(UBound(typ45)) = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineParameter", typ45))
Typ = Typ03.GetMethod("DefineParameter", typ45).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
PostProcessParamsConstrIL.Emit(OpCodes.Pop)
End If
PostProcessParamsConstrIL.MarkSequencePoint(doc9, 497, 1, 497, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarExpr)
PostProcessParamsConstrIL.Emit(OpCodes.Ldfld, GetType(VarExpr).GetField("VarTyp"))
Typ = GetType(VarExpr).GetField("VarTyp").FieldType
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 4)
PostProcessParamsConstrIL.MarkSequencePoint(doc9, 510, 1, 510, 100)
Dim typ46(-1) As Type
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(TypeTok)
ReDim Preserve typ46(UBound(typ46) + 1)
typ46(UBound(typ46)) = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Call, CommitEvalTTok)
Typ = CommitEvalTTok.ReturnType
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 5)
PostProcessParamsConstrIL.MarkSequencePoint(doc9, 512, 1, 512, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("ArgInd"))
Typ = GetType(ILEmitter).GetField("ArgInd").FieldType
PostProcessParamsConstrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Add)
PostProcessParamsConstrIL.Emit(OpCodes.Stsfld, GetType(ILEmitter).GetField("ArgInd"))
PostProcessParamsConstrIL.MarkSequencePoint(doc9, 513, 1, 513, 100)
Dim typ47(-1) As Type
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Ident)
PostProcessParamsConstrIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ47(UBound(typ47) + 1)
typ47(UBound(typ47)) = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReDim Preserve typ47(UBound(typ47) + 1)
typ47(UBound(typ47)) = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("ArgInd"))
Typ = GetType(ILEmitter).GetField("ArgInd").FieldType
ReDim Preserve typ47(UBound(typ47) + 1)
typ47(UBound(typ47)) = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
ReDim Preserve typ47(UBound(typ47) + 1)
typ47(UBound(typ47)) = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddVar", typ47))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddVar", typ47).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
PostProcessParamsConstrIL.Emit(OpCodes.Pop)
End If
PostProcessParamsConstrIL.MarkSequencePoint(doc9, 515, 1, 515, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
Dim fa82 As System.Reflection.Emit.Label = PostProcessParamsConstrIL.DefineLabel()
Dim tru82 As System.Reflection.Emit.Label = PostProcessParamsConstrIL.DefineLabel()
Dim cont82 As System.Reflection.Emit.Label = PostProcessParamsConstrIL.DefineLabel()
PostProcessParamsConstrIL.Emit(OpCodes.Beq, tru82)
PostProcessParamsConstrIL.Emit(OpCodes.Br, fa82)
PostProcessParamsConstrIL.MarkLabel(tru82)
PostProcessParamsConstrIL.MarkSequencePoint(doc9, 516, 1, 516, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Br, label17)
PostProcessParamsConstrIL.MarkSequencePoint(doc9, 517, 1, 517, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Br, cont82)
PostProcessParamsConstrIL.MarkLabel(fa82)
PostProcessParamsConstrIL.MarkSequencePoint(doc9, 518, 1, 518, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Br, label16)
PostProcessParamsConstrIL.MarkSequencePoint(doc9, 519, 1, 519, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Br, cont82)
PostProcessParamsConstrIL.MarkLabel(cont82)
PostProcessParamsConstrIL.MarkSequencePoint(doc9, 521, 1, 521, 100)
PostProcessParamsConstrIL.MarkLabel(label17)
PostProcessParamsConstrIL.MarkSequencePoint(doc9, 523, 1, 523, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Ret)
Dim typ48(-1) As Type
ReDim Preserve typ48(UBound(typ48) + 1)
typ48(UBound(typ48)) = GetType(System.Type)
Dim getCodeFromType As MethodBuilder = Helpers.DefineMethod("getCodeFromType", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Int32), typ48)
Dim getCodeFromTypeIL As ILGenerator = getCodeFromType.GetILGenerator()
Dim getCodeFromTypeparam01 As ParameterBuilder = getCodeFromType.DefineParameter(1, ParameterAttributes.None, "typ")
getCodeFromTypeIL.MarkSequencePoint(doc9, 526, 1, 526, 100)
Dim locbldr168 As LocalBuilder = getCodeFromTypeIL.DeclareLocal(GetType(System.Int32))
locbldr168.SetLocalSymInfo("cod")
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc9, 527, 1, 527, 100)
Dim locbldr169 As LocalBuilder = getCodeFromTypeIL.DeclareLocal(GetType(System.Boolean))
locbldr169.SetLocalSymInfo("b")
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc9, 528, 1, 528, 100)
Dim locbldr170 As LocalBuilder = getCodeFromTypeIL.DeclareLocal(GetType(System.Type))
locbldr170.SetLocalSymInfo("typ2")
getCodeFromTypeIL.MarkSequencePoint(doc9, 530, 1, 530, 100)
Dim label18 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.MarkSequencePoint(doc9, 532, 1, 532, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(System.Boolean))
Dim typ49 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ49))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ49).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc9, 533, 1, 533, 100)
Dim typ50(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ50(UBound(typ50) + 1)
typ50(UBound(typ50)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ50))
Typ = Typ03.GetMethod("Equals", typ50).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc9, 534, 1, 534, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa83 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru83 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont83 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru83)
getCodeFromTypeIL.Emit(OpCodes.Br, fa83)
getCodeFromTypeIL.MarkLabel(tru83)
getCodeFromTypeIL.MarkSequencePoint(doc9, 535, 1, 535, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(101))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc9, 536, 1, 536, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc9, 537, 1, 537, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont83)
getCodeFromTypeIL.MarkLabel(fa83)
getCodeFromTypeIL.Emit(OpCodes.Br, cont83)
getCodeFromTypeIL.MarkLabel(cont83)
getCodeFromTypeIL.MarkSequencePoint(doc9, 539, 1, 539, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(Byte))
Dim typ51 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ51))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ51).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc9, 540, 1, 540, 100)
Dim typ52(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ52(UBound(typ52) + 1)
typ52(UBound(typ52)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ52))
Typ = Typ03.GetMethod("Equals", typ52).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc9, 541, 1, 541, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa84 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru84 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont84 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru84)
getCodeFromTypeIL.Emit(OpCodes.Br, fa84)
getCodeFromTypeIL.MarkLabel(tru84)
getCodeFromTypeIL.MarkSequencePoint(doc9, 542, 1, 542, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(8))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc9, 543, 1, 543, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc9, 544, 1, 544, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont84)
getCodeFromTypeIL.MarkLabel(fa84)
getCodeFromTypeIL.Emit(OpCodes.Br, cont84)
getCodeFromTypeIL.MarkLabel(cont84)
getCodeFromTypeIL.MarkSequencePoint(doc9, 546, 1, 546, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(UInt16))
Dim typ53 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ53))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ53).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc9, 547, 1, 547, 100)
Dim typ54(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ54(UBound(typ54) + 1)
typ54(UBound(typ54)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ54))
Typ = Typ03.GetMethod("Equals", typ54).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc9, 548, 1, 548, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa85 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru85 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont85 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru85)
getCodeFromTypeIL.Emit(OpCodes.Br, fa85)
getCodeFromTypeIL.MarkLabel(tru85)
getCodeFromTypeIL.MarkSequencePoint(doc9, 549, 1, 549, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(16))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc9, 550, 1, 550, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc9, 551, 1, 551, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont85)
getCodeFromTypeIL.MarkLabel(fa85)
getCodeFromTypeIL.Emit(OpCodes.Br, cont85)
getCodeFromTypeIL.MarkLabel(cont85)
getCodeFromTypeIL.MarkSequencePoint(doc9, 553, 1, 553, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(UInt32))
Dim typ55 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ55))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ55).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc9, 554, 1, 554, 100)
Dim typ56(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ56(UBound(typ56) + 1)
typ56(UBound(typ56)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ56))
Typ = Typ03.GetMethod("Equals", typ56).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc9, 555, 1, 555, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa86 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru86 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont86 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru86)
getCodeFromTypeIL.Emit(OpCodes.Br, fa86)
getCodeFromTypeIL.MarkLabel(tru86)
getCodeFromTypeIL.MarkSequencePoint(doc9, 556, 1, 556, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(32))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc9, 557, 1, 557, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc9, 558, 1, 558, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont86)
getCodeFromTypeIL.MarkLabel(fa86)
getCodeFromTypeIL.Emit(OpCodes.Br, cont86)
getCodeFromTypeIL.MarkLabel(cont86)
getCodeFromTypeIL.MarkSequencePoint(doc9, 560, 1, 560, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(UIntPtr))
Dim typ57 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ57))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ57).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc9, 561, 1, 561, 100)
Dim typ58(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ58(UBound(typ58) + 1)
typ58(UBound(typ58)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ58))
Typ = Typ03.GetMethod("Equals", typ58).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc9, 562, 1, 562, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa87 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru87 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont87 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru87)
getCodeFromTypeIL.Emit(OpCodes.Br, fa87)
getCodeFromTypeIL.MarkLabel(tru87)
getCodeFromTypeIL.MarkSequencePoint(doc9, 563, 1, 563, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(40))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc9, 564, 1, 564, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc9, 565, 1, 565, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont87)
getCodeFromTypeIL.MarkLabel(fa87)
getCodeFromTypeIL.Emit(OpCodes.Br, cont87)
getCodeFromTypeIL.MarkLabel(cont87)
getCodeFromTypeIL.MarkSequencePoint(doc9, 567, 1, 567, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(UInt64))
Dim typ59 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ59))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ59).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc9, 568, 1, 568, 100)
Dim typ60(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ60(UBound(typ60) + 1)
typ60(UBound(typ60)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ60))
Typ = Typ03.GetMethod("Equals", typ60).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc9, 569, 1, 569, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa88 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru88 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont88 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru88)
getCodeFromTypeIL.Emit(OpCodes.Br, fa88)
getCodeFromTypeIL.MarkLabel(tru88)
getCodeFromTypeIL.MarkSequencePoint(doc9, 570, 1, 570, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(64))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc9, 571, 1, 571, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc9, 572, 1, 572, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont88)
getCodeFromTypeIL.MarkLabel(fa88)
getCodeFromTypeIL.Emit(OpCodes.Br, cont88)
getCodeFromTypeIL.MarkLabel(cont88)
getCodeFromTypeIL.MarkSequencePoint(doc9, 574, 1, 574, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(System.SByte))
Dim typ61 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ61))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ61).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc9, 575, 1, 575, 100)
Dim typ62(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ62(UBound(typ62) + 1)
typ62(UBound(typ62)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ62))
Typ = Typ03.GetMethod("Equals", typ62).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc9, 576, 1, 576, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa89 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru89 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont89 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru89)
getCodeFromTypeIL.Emit(OpCodes.Br, fa89)
getCodeFromTypeIL.MarkLabel(tru89)
getCodeFromTypeIL.MarkSequencePoint(doc9, 577, 1, 577, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(108))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc9, 578, 1, 578, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc9, 579, 1, 579, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont89)
getCodeFromTypeIL.MarkLabel(fa89)
getCodeFromTypeIL.Emit(OpCodes.Br, cont89)
getCodeFromTypeIL.MarkLabel(cont89)
getCodeFromTypeIL.MarkSequencePoint(doc9, 581, 1, 581, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(System.Int16))
Dim typ63 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ63))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ63).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc9, 582, 1, 582, 100)
Dim typ64(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ64(UBound(typ64) + 1)
typ64(UBound(typ64)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ64))
Typ = Typ03.GetMethod("Equals", typ64).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc9, 583, 1, 583, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa90 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru90 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont90 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru90)
getCodeFromTypeIL.Emit(OpCodes.Br, fa90)
getCodeFromTypeIL.MarkLabel(tru90)
getCodeFromTypeIL.MarkSequencePoint(doc9, 584, 1, 584, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(116))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc9, 585, 1, 585, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc9, 586, 1, 586, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont90)
getCodeFromTypeIL.MarkLabel(fa90)
getCodeFromTypeIL.Emit(OpCodes.Br, cont90)
getCodeFromTypeIL.MarkLabel(cont90)
getCodeFromTypeIL.MarkSequencePoint(doc9, 588, 1, 588, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(System.Int32))
Dim typ65 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ65))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ65).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc9, 589, 1, 589, 100)
Dim typ66(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ66(UBound(typ66) + 1)
typ66(UBound(typ66)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ66))
Typ = Typ03.GetMethod("Equals", typ66).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc9, 590, 1, 590, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa91 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru91 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont91 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru91)
getCodeFromTypeIL.Emit(OpCodes.Br, fa91)
getCodeFromTypeIL.MarkLabel(tru91)
getCodeFromTypeIL.MarkSequencePoint(doc9, 591, 1, 591, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(132))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc9, 592, 1, 592, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc9, 593, 1, 593, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont91)
getCodeFromTypeIL.MarkLabel(fa91)
getCodeFromTypeIL.Emit(OpCodes.Br, cont91)
getCodeFromTypeIL.MarkLabel(cont91)
getCodeFromTypeIL.MarkSequencePoint(doc9, 595, 1, 595, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(IntPtr))
Dim typ67 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ67))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ67).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc9, 596, 1, 596, 100)
Dim typ68(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ68(UBound(typ68) + 1)
typ68(UBound(typ68)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ68))
Typ = Typ03.GetMethod("Equals", typ68).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc9, 597, 1, 597, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa92 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru92 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont92 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru92)
getCodeFromTypeIL.Emit(OpCodes.Br, fa92)
getCodeFromTypeIL.MarkLabel(tru92)
getCodeFromTypeIL.MarkSequencePoint(doc9, 598, 1, 598, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(140))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc9, 599, 1, 599, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc9, 600, 1, 600, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont92)
getCodeFromTypeIL.MarkLabel(fa92)
getCodeFromTypeIL.Emit(OpCodes.Br, cont92)
getCodeFromTypeIL.MarkLabel(cont92)
getCodeFromTypeIL.MarkSequencePoint(doc9, 602, 1, 602, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(System.Char))
Dim typ69 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ69))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ69).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc9, 603, 1, 603, 100)
Dim typ70(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ70(UBound(typ70) + 1)
typ70(UBound(typ70)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ70))
Typ = Typ03.GetMethod("Equals", typ70).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc9, 604, 1, 604, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa93 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru93 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont93 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru93)
getCodeFromTypeIL.Emit(OpCodes.Br, fa93)
getCodeFromTypeIL.MarkLabel(tru93)
getCodeFromTypeIL.MarkSequencePoint(doc9, 605, 1, 605, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(150))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc9, 606, 1, 606, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc9, 607, 1, 607, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont93)
getCodeFromTypeIL.MarkLabel(fa93)
getCodeFromTypeIL.Emit(OpCodes.Br, cont93)
getCodeFromTypeIL.MarkLabel(cont93)
getCodeFromTypeIL.MarkSequencePoint(doc9, 609, 1, 609, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(System.Int64))
Dim typ71 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ71))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ71).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc9, 610, 1, 610, 100)
Dim typ72(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ72(UBound(typ72) + 1)
typ72(UBound(typ72)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ72))
Typ = Typ03.GetMethod("Equals", typ72).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc9, 611, 1, 611, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa94 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru94 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont94 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru94)
getCodeFromTypeIL.Emit(OpCodes.Br, fa94)
getCodeFromTypeIL.MarkLabel(tru94)
getCodeFromTypeIL.MarkSequencePoint(doc9, 612, 1, 612, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(164))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc9, 613, 1, 613, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc9, 614, 1, 614, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont94)
getCodeFromTypeIL.MarkLabel(fa94)
getCodeFromTypeIL.Emit(OpCodes.Br, cont94)
getCodeFromTypeIL.MarkLabel(cont94)
getCodeFromTypeIL.MarkSequencePoint(doc9, 616, 1, 616, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(System.Single))
Dim typ73 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ73))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ73).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc9, 617, 1, 617, 100)
Dim typ74(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ74(UBound(typ74) + 1)
typ74(UBound(typ74)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ74))
Typ = Typ03.GetMethod("Equals", typ74).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc9, 618, 1, 618, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa95 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru95 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont95 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru95)
getCodeFromTypeIL.Emit(OpCodes.Br, fa95)
getCodeFromTypeIL.MarkLabel(tru95)
getCodeFromTypeIL.MarkSequencePoint(doc9, 619, 1, 619, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(232))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc9, 620, 1, 620, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc9, 621, 1, 621, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont95)
getCodeFromTypeIL.MarkLabel(fa95)
getCodeFromTypeIL.Emit(OpCodes.Br, cont95)
getCodeFromTypeIL.MarkLabel(cont95)
getCodeFromTypeIL.MarkSequencePoint(doc9, 623, 1, 623, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(System.Double))
Dim typ75 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ75))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ75).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc9, 624, 1, 624, 100)
Dim typ76(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ76(UBound(typ76) + 1)
typ76(UBound(typ76)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ76))
Typ = Typ03.GetMethod("Equals", typ76).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc9, 625, 1, 625, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa96 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru96 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont96 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru96)
getCodeFromTypeIL.Emit(OpCodes.Br, fa96)
getCodeFromTypeIL.MarkLabel(tru96)
getCodeFromTypeIL.MarkSequencePoint(doc9, 626, 1, 626, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(264))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc9, 627, 1, 627, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc9, 628, 1, 628, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont96)
getCodeFromTypeIL.MarkLabel(fa96)
getCodeFromTypeIL.Emit(OpCodes.Br, cont96)
getCodeFromTypeIL.MarkLabel(cont96)
getCodeFromTypeIL.MarkSequencePoint(doc9, 630, 1, 630, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(System.String))
Dim typ77 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ77))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ77).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc9, 631, 1, 631, 100)
Dim typ78(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ78(UBound(typ78) + 1)
typ78(UBound(typ78)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ78))
Typ = Typ03.GetMethod("Equals", typ78).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc9, 632, 1, 632, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa97 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru97 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont97 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru97)
getCodeFromTypeIL.Emit(OpCodes.Br, fa97)
getCodeFromTypeIL.MarkLabel(tru97)
getCodeFromTypeIL.MarkSequencePoint(doc9, 633, 1, 633, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(270))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc9, 634, 1, 634, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc9, 635, 1, 635, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont97)
getCodeFromTypeIL.MarkLabel(fa97)
getCodeFromTypeIL.Emit(OpCodes.Br, cont97)
getCodeFromTypeIL.MarkLabel(cont97)
getCodeFromTypeIL.MarkSequencePoint(doc9, 637, 1, 637, 100)
getCodeFromTypeIL.MarkLabel(label18)
getCodeFromTypeIL.MarkSequencePoint(doc9, 638, 1, 638, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
getCodeFromTypeIL.MarkSequencePoint(doc9, 639, 1, 639, 100)
getCodeFromTypeIL.Emit(OpCodes.Ret)
Dim typ79(-1) As Type
ReDim Preserve typ79(UBound(typ79) + 1)
typ79(UBound(typ79)) = GetType(System.Int32)
Dim getTypeFromCode As MethodBuilder = Helpers.DefineMethod("getTypeFromCode", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Type), typ79)
Dim getTypeFromCodeIL As ILGenerator = getTypeFromCode.GetILGenerator()
Dim getTypeFromCodeparam01 As ParameterBuilder = getTypeFromCode.DefineParameter(1, ParameterAttributes.None, "cod")
getTypeFromCodeIL.MarkSequencePoint(doc9, 642, 1, 642, 100)
Dim locbldr171 As LocalBuilder = getTypeFromCodeIL.DeclareLocal(GetType(System.Type))
locbldr171.SetLocalSymInfo("typ2")
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(System.Object))
Dim typ80 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ80))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ80).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc9, 644, 1, 644, 100)
Dim label19 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.MarkSequencePoint(doc9, 646, 1, 646, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(101))
Typ = GetType(System.Int32)
Dim fa98 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru98 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont98 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru98)
getTypeFromCodeIL.Emit(OpCodes.Br, fa98)
getTypeFromCodeIL.MarkLabel(tru98)
getTypeFromCodeIL.MarkSequencePoint(doc9, 647, 1, 647, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(System.Boolean))
Dim typ81 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ81))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ81).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc9, 648, 1, 648, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc9, 649, 1, 649, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont98)
getTypeFromCodeIL.MarkLabel(fa98)
getTypeFromCodeIL.Emit(OpCodes.Br, cont98)
getTypeFromCodeIL.MarkLabel(cont98)
getTypeFromCodeIL.MarkSequencePoint(doc9, 651, 1, 651, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(8))
Typ = GetType(System.Int32)
Dim fa99 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru99 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont99 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru99)
getTypeFromCodeIL.Emit(OpCodes.Br, fa99)
getTypeFromCodeIL.MarkLabel(tru99)
getTypeFromCodeIL.MarkSequencePoint(doc9, 652, 1, 652, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(Byte))
Dim typ82 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ82))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ82).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc9, 653, 1, 653, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc9, 654, 1, 654, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont99)
getTypeFromCodeIL.MarkLabel(fa99)
getTypeFromCodeIL.Emit(OpCodes.Br, cont99)
getTypeFromCodeIL.MarkLabel(cont99)
getTypeFromCodeIL.MarkSequencePoint(doc9, 656, 1, 656, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(16))
Typ = GetType(System.Int32)
Dim fa100 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru100 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont100 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru100)
getTypeFromCodeIL.Emit(OpCodes.Br, fa100)
getTypeFromCodeIL.MarkLabel(tru100)
getTypeFromCodeIL.MarkSequencePoint(doc9, 657, 1, 657, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(UInt16))
Dim typ83 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ83))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ83).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc9, 658, 1, 658, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc9, 659, 1, 659, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont100)
getTypeFromCodeIL.MarkLabel(fa100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont100)
getTypeFromCodeIL.MarkLabel(cont100)
getTypeFromCodeIL.MarkSequencePoint(doc9, 661, 1, 661, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(32))
Typ = GetType(System.Int32)
Dim fa101 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru101 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont101 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru101)
getTypeFromCodeIL.Emit(OpCodes.Br, fa101)
getTypeFromCodeIL.MarkLabel(tru101)
getTypeFromCodeIL.MarkSequencePoint(doc9, 662, 1, 662, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(UInt32))
Dim typ84 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ84))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ84).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc9, 663, 1, 663, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc9, 664, 1, 664, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont101)
getTypeFromCodeIL.MarkLabel(fa101)
getTypeFromCodeIL.Emit(OpCodes.Br, cont101)
getTypeFromCodeIL.MarkLabel(cont101)
getTypeFromCodeIL.MarkSequencePoint(doc9, 666, 1, 666, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(40))
Typ = GetType(System.Int32)
Dim fa102 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru102 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont102 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru102)
getTypeFromCodeIL.Emit(OpCodes.Br, fa102)
getTypeFromCodeIL.MarkLabel(tru102)
getTypeFromCodeIL.MarkSequencePoint(doc9, 667, 1, 667, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(UIntPtr))
Dim typ85 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ85))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ85).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc9, 668, 1, 668, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc9, 669, 1, 669, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont102)
getTypeFromCodeIL.MarkLabel(fa102)
getTypeFromCodeIL.Emit(OpCodes.Br, cont102)
getTypeFromCodeIL.MarkLabel(cont102)
getTypeFromCodeIL.MarkSequencePoint(doc9, 671, 1, 671, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(64))
Typ = GetType(System.Int32)
Dim fa103 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru103 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont103 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru103)
getTypeFromCodeIL.Emit(OpCodes.Br, fa103)
getTypeFromCodeIL.MarkLabel(tru103)
getTypeFromCodeIL.MarkSequencePoint(doc9, 672, 1, 672, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(UInt64))
Dim typ86 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ86))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ86).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc9, 673, 1, 673, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc9, 674, 1, 674, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont103)
getTypeFromCodeIL.MarkLabel(fa103)
getTypeFromCodeIL.Emit(OpCodes.Br, cont103)
getTypeFromCodeIL.MarkLabel(cont103)
getTypeFromCodeIL.MarkSequencePoint(doc9, 676, 1, 676, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(108))
Typ = GetType(System.Int32)
Dim fa104 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru104 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont104 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru104)
getTypeFromCodeIL.Emit(OpCodes.Br, fa104)
getTypeFromCodeIL.MarkLabel(tru104)
getTypeFromCodeIL.MarkSequencePoint(doc9, 677, 1, 677, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(System.SByte))
Dim typ87 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ87))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ87).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc9, 678, 1, 678, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc9, 679, 1, 679, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont104)
getTypeFromCodeIL.MarkLabel(fa104)
getTypeFromCodeIL.Emit(OpCodes.Br, cont104)
getTypeFromCodeIL.MarkLabel(cont104)
getTypeFromCodeIL.MarkSequencePoint(doc9, 681, 1, 681, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(116))
Typ = GetType(System.Int32)
Dim fa105 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru105 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont105 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru105)
getTypeFromCodeIL.Emit(OpCodes.Br, fa105)
getTypeFromCodeIL.MarkLabel(tru105)
getTypeFromCodeIL.MarkSequencePoint(doc9, 682, 1, 682, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(System.Int16))
Dim typ88 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ88))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ88).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc9, 683, 1, 683, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc9, 684, 1, 684, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont105)
getTypeFromCodeIL.MarkLabel(fa105)
getTypeFromCodeIL.Emit(OpCodes.Br, cont105)
getTypeFromCodeIL.MarkLabel(cont105)
getTypeFromCodeIL.MarkSequencePoint(doc9, 686, 1, 686, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(132))
Typ = GetType(System.Int32)
Dim fa106 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru106 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont106 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru106)
getTypeFromCodeIL.Emit(OpCodes.Br, fa106)
getTypeFromCodeIL.MarkLabel(tru106)
getTypeFromCodeIL.MarkSequencePoint(doc9, 687, 1, 687, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(System.Int32))
Dim typ89 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ89))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ89).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc9, 688, 1, 688, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc9, 689, 1, 689, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont106)
getTypeFromCodeIL.MarkLabel(fa106)
getTypeFromCodeIL.Emit(OpCodes.Br, cont106)
getTypeFromCodeIL.MarkLabel(cont106)
getTypeFromCodeIL.MarkSequencePoint(doc9, 691, 1, 691, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(140))
Typ = GetType(System.Int32)
Dim fa107 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru107 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont107 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru107)
getTypeFromCodeIL.Emit(OpCodes.Br, fa107)
getTypeFromCodeIL.MarkLabel(tru107)
getTypeFromCodeIL.MarkSequencePoint(doc9, 692, 1, 692, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(IntPtr))
Dim typ90 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ90))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ90).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc9, 693, 1, 693, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc9, 694, 1, 694, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont107)
getTypeFromCodeIL.MarkLabel(fa107)
getTypeFromCodeIL.Emit(OpCodes.Br, cont107)
getTypeFromCodeIL.MarkLabel(cont107)
getTypeFromCodeIL.MarkSequencePoint(doc9, 696, 1, 696, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(150))
Typ = GetType(System.Int32)
Dim fa108 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru108 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont108 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru108)
getTypeFromCodeIL.Emit(OpCodes.Br, fa108)
getTypeFromCodeIL.MarkLabel(tru108)
getTypeFromCodeIL.MarkSequencePoint(doc9, 697, 1, 697, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(System.Char))
Dim typ91 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ91))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ91).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc9, 698, 1, 698, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc9, 699, 1, 699, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont108)
getTypeFromCodeIL.MarkLabel(fa108)
getTypeFromCodeIL.Emit(OpCodes.Br, cont108)
getTypeFromCodeIL.MarkLabel(cont108)
getTypeFromCodeIL.MarkSequencePoint(doc9, 701, 1, 701, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(164))
Typ = GetType(System.Int32)
Dim fa109 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru109 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont109 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru109)
getTypeFromCodeIL.Emit(OpCodes.Br, fa109)
getTypeFromCodeIL.MarkLabel(tru109)
getTypeFromCodeIL.MarkSequencePoint(doc9, 702, 1, 702, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(System.Int64))
Dim typ92 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ92))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ92).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc9, 703, 1, 703, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc9, 704, 1, 704, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont109)
getTypeFromCodeIL.MarkLabel(fa109)
getTypeFromCodeIL.Emit(OpCodes.Br, cont109)
getTypeFromCodeIL.MarkLabel(cont109)
getTypeFromCodeIL.MarkSequencePoint(doc9, 706, 1, 706, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(232))
Typ = GetType(System.Int32)
Dim fa110 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru110 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont110 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru110)
getTypeFromCodeIL.Emit(OpCodes.Br, fa110)
getTypeFromCodeIL.MarkLabel(tru110)
getTypeFromCodeIL.MarkSequencePoint(doc9, 707, 1, 707, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(System.Single))
Dim typ93 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ93))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ93).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc9, 708, 1, 708, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc9, 709, 1, 709, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont110)
getTypeFromCodeIL.MarkLabel(fa110)
getTypeFromCodeIL.Emit(OpCodes.Br, cont110)
getTypeFromCodeIL.MarkLabel(cont110)
getTypeFromCodeIL.MarkSequencePoint(doc9, 711, 1, 711, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(264))
Typ = GetType(System.Int32)
Dim fa111 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru111 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont111 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru111)
getTypeFromCodeIL.Emit(OpCodes.Br, fa111)
getTypeFromCodeIL.MarkLabel(tru111)
getTypeFromCodeIL.MarkSequencePoint(doc9, 712, 1, 712, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(System.Double))
Dim typ94 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ94))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ94).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc9, 713, 1, 713, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc9, 714, 1, 714, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont111)
getTypeFromCodeIL.MarkLabel(fa111)
getTypeFromCodeIL.Emit(OpCodes.Br, cont111)
getTypeFromCodeIL.MarkLabel(cont111)
getTypeFromCodeIL.MarkSequencePoint(doc9, 716, 1, 716, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(270))
Typ = GetType(System.Int32)
Dim fa112 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru112 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont112 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru112)
getTypeFromCodeIL.Emit(OpCodes.Br, fa112)
getTypeFromCodeIL.MarkLabel(tru112)
getTypeFromCodeIL.MarkSequencePoint(doc9, 717, 1, 717, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(System.String))
Dim typ95 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ95))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ95).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc9, 718, 1, 718, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc9, 719, 1, 719, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont112)
getTypeFromCodeIL.MarkLabel(fa112)
getTypeFromCodeIL.Emit(OpCodes.Br, cont112)
getTypeFromCodeIL.MarkLabel(cont112)
getTypeFromCodeIL.MarkSequencePoint(doc9, 721, 1, 721, 100)
getTypeFromCodeIL.MarkLabel(label19)
getTypeFromCodeIL.MarkSequencePoint(doc9, 722, 1, 722, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
getTypeFromCodeIL.MarkSequencePoint(doc9, 723, 1, 723, 100)
getTypeFromCodeIL.Emit(OpCodes.Ret)
Dim typ96(-1) As Type
ReDim Preserve typ96(UBound(typ96) + 1)
typ96(UBound(typ96)) = GetType(Literal)
Dim EmitLiteral As MethodBuilder = Helpers.DefineMethod("EmitLiteral", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ96)
Dim EmitLiteralIL As ILGenerator = EmitLiteral.GetILGenerator()
Dim EmitLiteralparam01 As ParameterBuilder = EmitLiteral.DefineParameter(1, ParameterAttributes.None, "lit")
EmitLiteralIL.MarkSequencePoint(doc9, 727, 1, 727, 100)
Dim label20 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
EmitLiteralIL.MarkSequencePoint(doc9, 728, 1, 728, 100)
Dim locbldr172 As LocalBuilder = EmitLiteralIL.DeclareLocal(GetType(System.Type))
locbldr172.SetLocalSymInfo("typ")
EmitLiteralIL.MarkSequencePoint(doc9, 729, 1, 729, 100)
Dim locbldr173 As LocalBuilder = EmitLiteralIL.DeclareLocal(GetType(System.Boolean))
locbldr173.SetLocalSymInfo("b")
EmitLiteralIL.MarkSequencePoint(doc9, 731, 1, 731, 100)
EmitLiteralIL.Emit(OpCodes.Ldtoken, GetType(StringLiteral))
Dim typ97 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitLiteralIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ97))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ97).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 0)
EmitLiteralIL.MarkSequencePoint(doc9, 732, 1, 732, 100)
Dim typ98(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ98(UBound(typ98) + 1)
typ98(UBound(typ98)) = Typ
EmitLiteralIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ98))
Typ = Typ03.GetMethod("IsInstanceOfType", typ98).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 1)
EmitLiteralIL.MarkSequencePoint(doc9, 734, 1, 734, 100)
EmitLiteralIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitLiteralIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa113 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim tru113 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim cont113 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
EmitLiteralIL.Emit(OpCodes.Beq, tru113)
EmitLiteralIL.Emit(OpCodes.Br, fa113)
EmitLiteralIL.MarkLabel(tru113)
EmitLiteralIL.MarkSequencePoint(doc9, 735, 1, 735, 100)
Dim locbldr174 As LocalBuilder = EmitLiteralIL.DeclareLocal(GetType(StringLiteral))
locbldr174.SetLocalSymInfo("slit")
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Stloc, 2)
EmitLiteralIL.MarkSequencePoint(doc9, 736, 1, 736, 100)
Dim typ99(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(StringLiteral)
EmitLiteralIL.Emit(OpCodes.Ldfld, GetType(StringLiteral).GetField("Value"))
Typ = GetType(StringLiteral).GetField("Value").FieldType
ReDim Preserve typ99(UBound(typ99) + 1)
typ99(UBound(typ99)) = Typ
EmitLiteralIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdstr", typ99))
Typ = GetType(ILEmitter).GetMethod("EmitLdstr", typ99).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLiteralIL.Emit(OpCodes.Pop)
End If
EmitLiteralIL.MarkSequencePoint(doc9, 737, 1, 737, 100)
EmitLiteralIL.Emit(OpCodes.Br, label20)
EmitLiteralIL.MarkSequencePoint(doc9, 738, 1, 738, 100)
EmitLiteralIL.Emit(OpCodes.Br, cont113)
EmitLiteralIL.MarkLabel(fa113)
EmitLiteralIL.Emit(OpCodes.Br, cont113)
EmitLiteralIL.MarkLabel(cont113)
EmitLiteralIL.MarkSequencePoint(doc9, 740, 1, 740, 100)
EmitLiteralIL.Emit(OpCodes.Ldtoken, GetType(SByteLiteral))
Dim typ100 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitLiteralIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ100))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ100).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 0)
EmitLiteralIL.MarkSequencePoint(doc9, 741, 1, 741, 100)
Dim typ101(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ101(UBound(typ101) + 1)
typ101(UBound(typ101)) = Typ
EmitLiteralIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ101))
Typ = Typ03.GetMethod("IsInstanceOfType", typ101).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 1)
EmitLiteralIL.MarkSequencePoint(doc9, 743, 1, 743, 100)
EmitLiteralIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitLiteralIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa114 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim tru114 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim cont114 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
EmitLiteralIL.Emit(OpCodes.Beq, tru114)
EmitLiteralIL.Emit(OpCodes.Br, fa114)
EmitLiteralIL.MarkLabel(tru114)
EmitLiteralIL.MarkSequencePoint(doc9, 744, 1, 744, 100)
Dim locbldr175 As LocalBuilder = EmitLiteralIL.DeclareLocal(GetType(SByteLiteral))
locbldr175.SetLocalSymInfo("sblit")
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Stloc, 3)
EmitLiteralIL.MarkSequencePoint(doc9, 745, 1, 745, 100)
Dim typ102(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(SByteLiteral)
EmitLiteralIL.Emit(OpCodes.Ldfld, GetType(SByteLiteral).GetField("NumVal"))
Typ = GetType(SByteLiteral).GetField("NumVal").FieldType
ReDim Preserve typ102(UBound(typ102) + 1)
typ102(UBound(typ102)) = Typ
EmitLiteralIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdcI1", typ102))
Typ = GetType(ILEmitter).GetMethod("EmitLdcI1", typ102).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLiteralIL.Emit(OpCodes.Pop)
End If
EmitLiteralIL.MarkSequencePoint(doc9, 746, 1, 746, 100)
EmitLiteralIL.Emit(OpCodes.Br, label20)
EmitLiteralIL.MarkSequencePoint(doc9, 747, 1, 747, 100)
EmitLiteralIL.Emit(OpCodes.Br, cont114)
EmitLiteralIL.MarkLabel(fa114)
EmitLiteralIL.Emit(OpCodes.Br, cont114)
EmitLiteralIL.MarkLabel(cont114)
EmitLiteralIL.MarkSequencePoint(doc9, 749, 1, 749, 100)
EmitLiteralIL.Emit(OpCodes.Ldtoken, GetType(ShortLiteral))
Dim typ103 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitLiteralIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ103))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ103).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 0)
EmitLiteralIL.MarkSequencePoint(doc9, 750, 1, 750, 100)
Dim typ104(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ104(UBound(typ104) + 1)
typ104(UBound(typ104)) = Typ
EmitLiteralIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ104))
Typ = Typ03.GetMethod("IsInstanceOfType", typ104).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 1)
EmitLiteralIL.MarkSequencePoint(doc9, 752, 1, 752, 100)
EmitLiteralIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitLiteralIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa115 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim tru115 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim cont115 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
EmitLiteralIL.Emit(OpCodes.Beq, tru115)
EmitLiteralIL.Emit(OpCodes.Br, fa115)
EmitLiteralIL.MarkLabel(tru115)
EmitLiteralIL.MarkSequencePoint(doc9, 753, 1, 753, 100)
Dim locbldr176 As LocalBuilder = EmitLiteralIL.DeclareLocal(GetType(ShortLiteral))
locbldr176.SetLocalSymInfo("shlit")
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Stloc, 4)
EmitLiteralIL.MarkSequencePoint(doc9, 754, 1, 754, 100)
Dim typ105(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(ShortLiteral)
EmitLiteralIL.Emit(OpCodes.Ldfld, GetType(ShortLiteral).GetField("NumVal"))
Typ = GetType(ShortLiteral).GetField("NumVal").FieldType
ReDim Preserve typ105(UBound(typ105) + 1)
typ105(UBound(typ105)) = Typ
EmitLiteralIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdcI2", typ105))
Typ = GetType(ILEmitter).GetMethod("EmitLdcI2", typ105).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLiteralIL.Emit(OpCodes.Pop)
End If
EmitLiteralIL.MarkSequencePoint(doc9, 755, 1, 755, 100)
EmitLiteralIL.Emit(OpCodes.Br, label20)
EmitLiteralIL.MarkSequencePoint(doc9, 756, 1, 756, 100)
EmitLiteralIL.Emit(OpCodes.Br, cont115)
EmitLiteralIL.MarkLabel(fa115)
EmitLiteralIL.Emit(OpCodes.Br, cont115)
EmitLiteralIL.MarkLabel(cont115)
EmitLiteralIL.MarkSequencePoint(doc9, 758, 1, 758, 100)
EmitLiteralIL.Emit(OpCodes.Ldtoken, GetType(IntLiteral))
Dim typ106 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitLiteralIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ106))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ106).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 0)
EmitLiteralIL.MarkSequencePoint(doc9, 759, 1, 759, 100)
Dim typ107(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ107(UBound(typ107) + 1)
typ107(UBound(typ107)) = Typ
EmitLiteralIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ107))
Typ = Typ03.GetMethod("IsInstanceOfType", typ107).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 1)
EmitLiteralIL.MarkSequencePoint(doc9, 761, 1, 761, 100)
EmitLiteralIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitLiteralIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa116 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim tru116 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim cont116 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
EmitLiteralIL.Emit(OpCodes.Beq, tru116)
EmitLiteralIL.Emit(OpCodes.Br, fa116)
EmitLiteralIL.MarkLabel(tru116)
EmitLiteralIL.MarkSequencePoint(doc9, 762, 1, 762, 100)
Dim locbldr177 As LocalBuilder = EmitLiteralIL.DeclareLocal(GetType(IntLiteral))
locbldr177.SetLocalSymInfo("ilit")
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Stloc, 5)
EmitLiteralIL.MarkSequencePoint(doc9, 763, 1, 763, 100)
Dim typ108(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(IntLiteral)
EmitLiteralIL.Emit(OpCodes.Ldfld, GetType(IntLiteral).GetField("NumVal"))
Typ = GetType(IntLiteral).GetField("NumVal").FieldType
ReDim Preserve typ108(UBound(typ108) + 1)
typ108(UBound(typ108)) = Typ
EmitLiteralIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdcI4", typ108))
Typ = GetType(ILEmitter).GetMethod("EmitLdcI4", typ108).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLiteralIL.Emit(OpCodes.Pop)
End If
EmitLiteralIL.MarkSequencePoint(doc9, 764, 1, 764, 100)
EmitLiteralIL.Emit(OpCodes.Br, label20)
EmitLiteralIL.MarkSequencePoint(doc9, 765, 1, 765, 100)
EmitLiteralIL.Emit(OpCodes.Br, cont116)
EmitLiteralIL.MarkLabel(fa116)
EmitLiteralIL.Emit(OpCodes.Br, cont116)
EmitLiteralIL.MarkLabel(cont116)
EmitLiteralIL.MarkSequencePoint(doc9, 767, 1, 767, 100)
EmitLiteralIL.Emit(OpCodes.Ldtoken, GetType(LongLiteral))
Dim typ109 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitLiteralIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ109))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ109).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 0)
EmitLiteralIL.MarkSequencePoint(doc9, 768, 1, 768, 100)
Dim typ110(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ110(UBound(typ110) + 1)
typ110(UBound(typ110)) = Typ
EmitLiteralIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ110))
Typ = Typ03.GetMethod("IsInstanceOfType", typ110).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 1)
EmitLiteralIL.MarkSequencePoint(doc9, 770, 1, 770, 100)
EmitLiteralIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitLiteralIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa117 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim tru117 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim cont117 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
EmitLiteralIL.Emit(OpCodes.Beq, tru117)
EmitLiteralIL.Emit(OpCodes.Br, fa117)
EmitLiteralIL.MarkLabel(tru117)
EmitLiteralIL.MarkSequencePoint(doc9, 771, 1, 771, 100)
Dim locbldr178 As LocalBuilder = EmitLiteralIL.DeclareLocal(GetType(LongLiteral))
locbldr178.SetLocalSymInfo("llit")
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Stloc, 6)
EmitLiteralIL.MarkSequencePoint(doc9, 772, 1, 772, 100)
Dim typ111(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(LongLiteral)
EmitLiteralIL.Emit(OpCodes.Ldfld, GetType(LongLiteral).GetField("NumVal"))
Typ = GetType(LongLiteral).GetField("NumVal").FieldType
ReDim Preserve typ111(UBound(typ111) + 1)
typ111(UBound(typ111)) = Typ
EmitLiteralIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdcI8", typ111))
Typ = GetType(ILEmitter).GetMethod("EmitLdcI8", typ111).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLiteralIL.Emit(OpCodes.Pop)
End If
EmitLiteralIL.MarkSequencePoint(doc9, 773, 1, 773, 100)
EmitLiteralIL.Emit(OpCodes.Br, label20)
EmitLiteralIL.MarkSequencePoint(doc9, 774, 1, 774, 100)
EmitLiteralIL.Emit(OpCodes.Br, cont117)
EmitLiteralIL.MarkLabel(fa117)
EmitLiteralIL.Emit(OpCodes.Br, cont117)
EmitLiteralIL.MarkLabel(cont117)
EmitLiteralIL.MarkSequencePoint(doc9, 776, 1, 776, 100)
EmitLiteralIL.Emit(OpCodes.Ldtoken, GetType(FloatLiteral))
Dim typ112 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitLiteralIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ112))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ112).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 0)
EmitLiteralIL.MarkSequencePoint(doc9, 777, 1, 777, 100)
Dim typ113(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ113(UBound(typ113) + 1)
typ113(UBound(typ113)) = Typ
EmitLiteralIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ113))
Typ = Typ03.GetMethod("IsInstanceOfType", typ113).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 1)
EmitLiteralIL.MarkSequencePoint(doc9, 779, 1, 779, 100)
EmitLiteralIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitLiteralIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa118 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim tru118 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim cont118 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
EmitLiteralIL.Emit(OpCodes.Beq, tru118)
EmitLiteralIL.Emit(OpCodes.Br, fa118)
EmitLiteralIL.MarkLabel(tru118)
EmitLiteralIL.MarkSequencePoint(doc9, 780, 1, 780, 100)
Dim locbldr179 As LocalBuilder = EmitLiteralIL.DeclareLocal(GetType(FloatLiteral))
locbldr179.SetLocalSymInfo("flit")
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Stloc, 7)
EmitLiteralIL.MarkSequencePoint(doc9, 781, 1, 781, 100)
Dim typ114(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(FloatLiteral)
EmitLiteralIL.Emit(OpCodes.Ldfld, GetType(FloatLiteral).GetField("NumVal"))
Typ = GetType(FloatLiteral).GetField("NumVal").FieldType
ReDim Preserve typ114(UBound(typ114) + 1)
typ114(UBound(typ114)) = Typ
EmitLiteralIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdcR4", typ114))
Typ = GetType(ILEmitter).GetMethod("EmitLdcR4", typ114).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLiteralIL.Emit(OpCodes.Pop)
End If
EmitLiteralIL.MarkSequencePoint(doc9, 782, 1, 782, 100)
EmitLiteralIL.Emit(OpCodes.Br, label20)
EmitLiteralIL.MarkSequencePoint(doc9, 783, 1, 783, 100)
EmitLiteralIL.Emit(OpCodes.Br, cont118)
EmitLiteralIL.MarkLabel(fa118)
EmitLiteralIL.Emit(OpCodes.Br, cont118)
EmitLiteralIL.MarkLabel(cont118)
EmitLiteralIL.MarkSequencePoint(doc9, 785, 1, 785, 100)
EmitLiteralIL.Emit(OpCodes.Ldtoken, GetType(DoubleLiteral))
Dim typ115 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitLiteralIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ115))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ115).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 0)
EmitLiteralIL.MarkSequencePoint(doc9, 786, 1, 786, 100)
Dim typ116(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ116(UBound(typ116) + 1)
typ116(UBound(typ116)) = Typ
EmitLiteralIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ116))
Typ = Typ03.GetMethod("IsInstanceOfType", typ116).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 1)
EmitLiteralIL.MarkSequencePoint(doc9, 788, 1, 788, 100)
EmitLiteralIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitLiteralIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa119 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim tru119 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim cont119 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
EmitLiteralIL.Emit(OpCodes.Beq, tru119)
EmitLiteralIL.Emit(OpCodes.Br, fa119)
EmitLiteralIL.MarkLabel(tru119)
EmitLiteralIL.MarkSequencePoint(doc9, 789, 1, 789, 100)
Dim locbldr180 As LocalBuilder = EmitLiteralIL.DeclareLocal(GetType(DoubleLiteral))
locbldr180.SetLocalSymInfo("dlit")
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Stloc, 8)
EmitLiteralIL.MarkSequencePoint(doc9, 790, 1, 790, 100)
Dim typ117(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(DoubleLiteral)
EmitLiteralIL.Emit(OpCodes.Ldfld, GetType(DoubleLiteral).GetField("NumVal"))
Typ = GetType(DoubleLiteral).GetField("NumVal").FieldType
ReDim Preserve typ117(UBound(typ117) + 1)
typ117(UBound(typ117)) = Typ
EmitLiteralIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdcR8", typ117))
Typ = GetType(ILEmitter).GetMethod("EmitLdcR8", typ117).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLiteralIL.Emit(OpCodes.Pop)
End If
EmitLiteralIL.MarkSequencePoint(doc9, 791, 1, 791, 100)
EmitLiteralIL.Emit(OpCodes.Br, label20)
EmitLiteralIL.MarkSequencePoint(doc9, 792, 1, 792, 100)
EmitLiteralIL.Emit(OpCodes.Br, cont119)
EmitLiteralIL.MarkLabel(fa119)
EmitLiteralIL.Emit(OpCodes.Br, cont119)
EmitLiteralIL.MarkLabel(cont119)
EmitLiteralIL.MarkSequencePoint(doc9, 794, 1, 794, 100)
EmitLiteralIL.Emit(OpCodes.Ldtoken, GetType(BooleanLiteral))
Dim typ118 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitLiteralIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ118))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ118).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 0)
EmitLiteralIL.MarkSequencePoint(doc9, 795, 1, 795, 100)
Dim typ119(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ119(UBound(typ119) + 1)
typ119(UBound(typ119)) = Typ
EmitLiteralIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ119))
Typ = Typ03.GetMethod("IsInstanceOfType", typ119).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 1)
EmitLiteralIL.MarkSequencePoint(doc9, 797, 1, 797, 100)
EmitLiteralIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitLiteralIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa120 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim tru120 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim cont120 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
EmitLiteralIL.Emit(OpCodes.Beq, tru120)
EmitLiteralIL.Emit(OpCodes.Br, fa120)
EmitLiteralIL.MarkLabel(tru120)
EmitLiteralIL.MarkSequencePoint(doc9, 798, 1, 798, 100)
Dim locbldr181 As LocalBuilder = EmitLiteralIL.DeclareLocal(GetType(BooleanLiteral))
locbldr181.SetLocalSymInfo("bllit")
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Stloc, 9)
EmitLiteralIL.MarkSequencePoint(doc9, 799, 1, 799, 100)
Dim typ120(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(BooleanLiteral)
EmitLiteralIL.Emit(OpCodes.Ldfld, GetType(BooleanLiteral).GetField("BoolVal"))
Typ = GetType(BooleanLiteral).GetField("BoolVal").FieldType
ReDim Preserve typ120(UBound(typ120) + 1)
typ120(UBound(typ120)) = Typ
EmitLiteralIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdcBool", typ120))
Typ = GetType(ILEmitter).GetMethod("EmitLdcBool", typ120).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLiteralIL.Emit(OpCodes.Pop)
End If
EmitLiteralIL.MarkSequencePoint(doc9, 800, 1, 800, 100)
EmitLiteralIL.Emit(OpCodes.Br, label20)
EmitLiteralIL.MarkSequencePoint(doc9, 801, 1, 801, 100)
EmitLiteralIL.Emit(OpCodes.Br, cont120)
EmitLiteralIL.MarkLabel(fa120)
EmitLiteralIL.Emit(OpCodes.Br, cont120)
EmitLiteralIL.MarkLabel(cont120)
EmitLiteralIL.MarkSequencePoint(doc9, 803, 1, 803, 100)
EmitLiteralIL.Emit(OpCodes.Ldtoken, GetType(CharLiteral))
Dim typ121 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitLiteralIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ121))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ121).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 0)
EmitLiteralIL.MarkSequencePoint(doc9, 804, 1, 804, 100)
Dim typ122(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ122(UBound(typ122) + 1)
typ122(UBound(typ122)) = Typ
EmitLiteralIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ122))
Typ = Typ03.GetMethod("IsInstanceOfType", typ122).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 1)
EmitLiteralIL.MarkSequencePoint(doc9, 806, 1, 806, 100)
EmitLiteralIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitLiteralIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa121 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim tru121 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim cont121 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
EmitLiteralIL.Emit(OpCodes.Beq, tru121)
EmitLiteralIL.Emit(OpCodes.Br, fa121)
EmitLiteralIL.MarkLabel(tru121)
EmitLiteralIL.MarkSequencePoint(doc9, 807, 1, 807, 100)
Dim locbldr182 As LocalBuilder = EmitLiteralIL.DeclareLocal(GetType(CharLiteral))
locbldr182.SetLocalSymInfo("clit")
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Stloc, 10)
EmitLiteralIL.MarkSequencePoint(doc9, 808, 1, 808, 100)
Dim typ123(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(CharLiteral)
EmitLiteralIL.Emit(OpCodes.Ldfld, GetType(CharLiteral).GetField("CharVal"))
Typ = GetType(CharLiteral).GetField("CharVal").FieldType
ReDim Preserve typ123(UBound(typ123) + 1)
typ123(UBound(typ123)) = Typ
EmitLiteralIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdcChar", typ123))
Typ = GetType(ILEmitter).GetMethod("EmitLdcChar", typ123).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLiteralIL.Emit(OpCodes.Pop)
End If
EmitLiteralIL.MarkSequencePoint(doc9, 809, 1, 809, 100)
EmitLiteralIL.Emit(OpCodes.Br, label20)
EmitLiteralIL.MarkSequencePoint(doc9, 810, 1, 810, 100)
EmitLiteralIL.Emit(OpCodes.Br, cont121)
EmitLiteralIL.MarkLabel(fa121)
EmitLiteralIL.Emit(OpCodes.Br, cont121)
EmitLiteralIL.MarkLabel(cont121)
EmitLiteralIL.MarkSequencePoint(doc9, 812, 1, 812, 100)
EmitLiteralIL.Emit(OpCodes.Ldtoken, GetType(NullLiteral))
Dim typ124 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitLiteralIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ124))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ124).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 0)
EmitLiteralIL.MarkSequencePoint(doc9, 813, 1, 813, 100)
Dim typ125(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ125(UBound(typ125) + 1)
typ125(UBound(typ125)) = Typ
EmitLiteralIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ125))
Typ = Typ03.GetMethod("IsInstanceOfType", typ125).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 1)
EmitLiteralIL.MarkSequencePoint(doc9, 815, 1, 815, 100)
EmitLiteralIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitLiteralIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa122 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim tru122 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim cont122 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
EmitLiteralIL.Emit(OpCodes.Beq, tru122)
EmitLiteralIL.Emit(OpCodes.Br, fa122)
EmitLiteralIL.MarkLabel(tru122)
EmitLiteralIL.MarkSequencePoint(doc9, 816, 1, 816, 100)
EmitLiteralIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdnull", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitLdnull", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLiteralIL.Emit(OpCodes.Pop)
End If
EmitLiteralIL.MarkSequencePoint(doc9, 817, 1, 817, 100)
EmitLiteralIL.Emit(OpCodes.Br, label20)
EmitLiteralIL.MarkSequencePoint(doc9, 818, 1, 818, 100)
EmitLiteralIL.Emit(OpCodes.Br, cont122)
EmitLiteralIL.MarkLabel(fa122)
EmitLiteralIL.Emit(OpCodes.Br, cont122)
EmitLiteralIL.MarkLabel(cont122)
EmitLiteralIL.MarkSequencePoint(doc9, 820, 1, 820, 100)
EmitLiteralIL.MarkLabel(label20)
EmitLiteralIL.MarkSequencePoint(doc9, 822, 1, 822, 100)
EmitLiteralIL.Emit(OpCodes.Ret)
Dim typ126(-1) As Type
ReDim Preserve typ126(UBound(typ126) + 1)
typ126(UBound(typ126)) = GetType(ConstLiteral)
Dim ProcessConst As MethodBuilder = Helpers.DefineMethod("ProcessConst", MethodAttributes.Public Or MethodAttributes.Static, GetType(Literal), typ126)
Dim ProcessConstIL As ILGenerator = ProcessConst.GetILGenerator()
Dim ProcessConstparam01 As ParameterBuilder = ProcessConst.DefineParameter(1, ParameterAttributes.None, "lit")
ProcessConstIL.MarkSequencePoint(doc9, 826, 1, 826, 100)
Dim label21 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
ProcessConstIL.MarkSequencePoint(doc9, 827, 1, 827, 100)
Dim locbldr183 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(System.Type))
locbldr183.SetLocalSymInfo("typ")
ProcessConstIL.MarkSequencePoint(doc9, 828, 1, 828, 100)
Dim locbldr184 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(System.Type))
locbldr184.SetLocalSymInfo("inttyp")
ProcessConstIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(ConstLiteral)
ProcessConstIL.Emit(OpCodes.Ldfld, GetType(ConstLiteral).GetField("IntTyp"))
Typ = GetType(ConstLiteral).GetField("IntTyp").FieldType
ProcessConstIL.Emit(OpCodes.Stloc, 1)
ProcessConstIL.MarkSequencePoint(doc9, 829, 1, 829, 100)
Dim locbldr185 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(System.Object))
locbldr185.SetLocalSymInfo("obj")
ProcessConstIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(ConstLiteral)
ProcessConstIL.Emit(OpCodes.Ldfld, GetType(ConstLiteral).GetField("ConstVal"))
Typ = GetType(ConstLiteral).GetField("ConstVal").FieldType
ProcessConstIL.Emit(OpCodes.Stloc, 2)
ProcessConstIL.MarkSequencePoint(doc9, 830, 1, 830, 100)
Dim locbldr186 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(System.Boolean))
locbldr186.SetLocalSymInfo("b")
ProcessConstIL.MarkSequencePoint(doc9, 832, 1, 832, 100)
ProcessConstIL.Emit(OpCodes.Ldtoken, GetType(System.String))
Dim typ127 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ127))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ127).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 0)
ProcessConstIL.MarkSequencePoint(doc9, 833, 1, 833, 100)
Dim typ128(-1) As Type
ProcessConstIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessConstIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
ReDim Preserve typ128(UBound(typ128) + 1)
typ128(UBound(typ128)) = Typ
ProcessConstIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ128))
Typ = Typ03.GetMethod("Equals", typ128).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 3)
ProcessConstIL.MarkSequencePoint(doc9, 835, 1, 835, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
ProcessConstIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa123 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim tru123 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim cont123 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
ProcessConstIL.Emit(OpCodes.Beq, tru123)
ProcessConstIL.Emit(OpCodes.Br, fa123)
ProcessConstIL.MarkLabel(tru123)
ProcessConstIL.MarkSequencePoint(doc9, 836, 1, 836, 100)
Dim locbldr187 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(StringLiteral))
locbldr187.SetLocalSymInfo("slit")
ProcessConstIL.Emit(OpCodes.Newobj, GetType(StringLiteral).GetConstructor(Type.EmptyTypes))
ProcessConstIL.Emit(OpCodes.Stloc, 4)
ProcessConstIL.MarkSequencePoint(doc9, 837, 1, 837, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(StringLiteral)
ProcessConstIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Object)
Dim typ129 As Type() = {Typ}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToString", typ129))
Typ = GetType(System.Convert).GetMethod("ToString", typ129).ReturnType
ProcessConstIL.Emit(OpCodes.Stfld, GetType(StringLiteral).GetField("Value"))
ProcessConstIL.MarkSequencePoint(doc9, 838, 1, 838, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(StringLiteral)
ProcessConstIL.MarkSequencePoint(doc9, 839, 1, 839, 100)
ProcessConstIL.Emit(OpCodes.Br, label21)
ProcessConstIL.MarkSequencePoint(doc9, 840, 1, 840, 100)
ProcessConstIL.Emit(OpCodes.Br, cont123)
ProcessConstIL.MarkLabel(fa123)
ProcessConstIL.Emit(OpCodes.Br, cont123)
ProcessConstIL.MarkLabel(cont123)
ProcessConstIL.MarkSequencePoint(doc9, 842, 1, 842, 100)
ProcessConstIL.Emit(OpCodes.Ldtoken, GetType(System.SByte))
Dim typ130 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ130))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ130).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 0)
ProcessConstIL.MarkSequencePoint(doc9, 843, 1, 843, 100)
Dim typ131(-1) As Type
ProcessConstIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessConstIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
ReDim Preserve typ131(UBound(typ131) + 1)
typ131(UBound(typ131)) = Typ
ProcessConstIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ131))
Typ = Typ03.GetMethod("Equals", typ131).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 3)
ProcessConstIL.MarkSequencePoint(doc9, 845, 1, 845, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
ProcessConstIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa124 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim tru124 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim cont124 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
ProcessConstIL.Emit(OpCodes.Beq, tru124)
ProcessConstIL.Emit(OpCodes.Br, fa124)
ProcessConstIL.MarkLabel(tru124)
ProcessConstIL.MarkSequencePoint(doc9, 846, 1, 846, 100)
Dim locbldr188 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(SByteLiteral))
locbldr188.SetLocalSymInfo("sblit")
ProcessConstIL.Emit(OpCodes.Newobj, GetType(SByteLiteral).GetConstructor(Type.EmptyTypes))
ProcessConstIL.Emit(OpCodes.Stloc, 5)
ProcessConstIL.MarkSequencePoint(doc9, 847, 1, 847, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(SByteLiteral)
ProcessConstIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Object)
Dim typ132 As Type() = {Typ}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToSByte", typ132))
Typ = GetType(System.Convert).GetMethod("ToSByte", typ132).ReturnType
ProcessConstIL.Emit(OpCodes.Stfld, GetType(SByteLiteral).GetField("NumVal"))
ProcessConstIL.MarkSequencePoint(doc9, 848, 1, 848, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(SByteLiteral)
ProcessConstIL.MarkSequencePoint(doc9, 849, 1, 849, 100)
ProcessConstIL.Emit(OpCodes.Br, label21)
ProcessConstIL.MarkSequencePoint(doc9, 850, 1, 850, 100)
ProcessConstIL.Emit(OpCodes.Br, cont124)
ProcessConstIL.MarkLabel(fa124)
ProcessConstIL.Emit(OpCodes.Br, cont124)
ProcessConstIL.MarkLabel(cont124)
ProcessConstIL.MarkSequencePoint(doc9, 852, 1, 852, 100)
ProcessConstIL.Emit(OpCodes.Ldtoken, GetType(System.Int16))
Dim typ133 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ133))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ133).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 0)
ProcessConstIL.MarkSequencePoint(doc9, 853, 1, 853, 100)
Dim typ134(-1) As Type
ProcessConstIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessConstIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
ReDim Preserve typ134(UBound(typ134) + 1)
typ134(UBound(typ134)) = Typ
ProcessConstIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ134))
Typ = Typ03.GetMethod("Equals", typ134).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 3)
ProcessConstIL.MarkSequencePoint(doc9, 855, 1, 855, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
ProcessConstIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa125 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim tru125 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim cont125 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
ProcessConstIL.Emit(OpCodes.Beq, tru125)
ProcessConstIL.Emit(OpCodes.Br, fa125)
ProcessConstIL.MarkLabel(tru125)
ProcessConstIL.MarkSequencePoint(doc9, 856, 1, 856, 100)
Dim locbldr189 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(ShortLiteral))
locbldr189.SetLocalSymInfo("shlit")
ProcessConstIL.Emit(OpCodes.Newobj, GetType(ShortLiteral).GetConstructor(Type.EmptyTypes))
ProcessConstIL.Emit(OpCodes.Stloc, 6)
ProcessConstIL.MarkSequencePoint(doc9, 857, 1, 857, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(ShortLiteral)
ProcessConstIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Object)
Dim typ135 As Type() = {Typ}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToInt16", typ135))
Typ = GetType(System.Convert).GetMethod("ToInt16", typ135).ReturnType
ProcessConstIL.Emit(OpCodes.Stfld, GetType(ShortLiteral).GetField("NumVal"))
ProcessConstIL.MarkSequencePoint(doc9, 858, 1, 858, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(ShortLiteral)
ProcessConstIL.MarkSequencePoint(doc9, 859, 1, 859, 100)
ProcessConstIL.Emit(OpCodes.Br, label21)
ProcessConstIL.MarkSequencePoint(doc9, 860, 1, 860, 100)
ProcessConstIL.Emit(OpCodes.Br, cont125)
ProcessConstIL.MarkLabel(fa125)
ProcessConstIL.Emit(OpCodes.Br, cont125)
ProcessConstIL.MarkLabel(cont125)
ProcessConstIL.MarkSequencePoint(doc9, 862, 1, 862, 100)
ProcessConstIL.Emit(OpCodes.Ldtoken, GetType(System.Int32))
Dim typ136 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ136))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ136).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 0)
ProcessConstIL.MarkSequencePoint(doc9, 863, 1, 863, 100)
Dim typ137(-1) As Type
ProcessConstIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessConstIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
ReDim Preserve typ137(UBound(typ137) + 1)
typ137(UBound(typ137)) = Typ
ProcessConstIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ137))
Typ = Typ03.GetMethod("Equals", typ137).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 3)
ProcessConstIL.MarkSequencePoint(doc9, 865, 1, 865, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
ProcessConstIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa126 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim tru126 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim cont126 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
ProcessConstIL.Emit(OpCodes.Beq, tru126)
ProcessConstIL.Emit(OpCodes.Br, fa126)
ProcessConstIL.MarkLabel(tru126)
ProcessConstIL.MarkSequencePoint(doc9, 866, 1, 866, 100)
Dim locbldr190 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(IntLiteral))
locbldr190.SetLocalSymInfo("ilit")
ProcessConstIL.Emit(OpCodes.Newobj, GetType(IntLiteral).GetConstructor(Type.EmptyTypes))
ProcessConstIL.Emit(OpCodes.Stloc, 7)
ProcessConstIL.MarkSequencePoint(doc9, 867, 1, 867, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(IntLiteral)
ProcessConstIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Object)
Dim typ138 As Type() = {Typ}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToInt32", typ138))
Typ = GetType(System.Convert).GetMethod("ToInt32", typ138).ReturnType
ProcessConstIL.Emit(OpCodes.Stfld, GetType(IntLiteral).GetField("NumVal"))
ProcessConstIL.MarkSequencePoint(doc9, 868, 1, 868, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(IntLiteral)
ProcessConstIL.MarkSequencePoint(doc9, 869, 1, 869, 100)
ProcessConstIL.Emit(OpCodes.Br, label21)
ProcessConstIL.MarkSequencePoint(doc9, 870, 1, 870, 100)
ProcessConstIL.Emit(OpCodes.Br, cont126)
ProcessConstIL.MarkLabel(fa126)
ProcessConstIL.Emit(OpCodes.Br, cont126)
ProcessConstIL.MarkLabel(cont126)
ProcessConstIL.MarkSequencePoint(doc9, 872, 1, 872, 100)
ProcessConstIL.Emit(OpCodes.Ldtoken, GetType(System.Int64))
Dim typ139 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ139))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ139).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 0)
ProcessConstIL.MarkSequencePoint(doc9, 873, 1, 873, 100)
Dim typ140(-1) As Type
ProcessConstIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessConstIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
ReDim Preserve typ140(UBound(typ140) + 1)
typ140(UBound(typ140)) = Typ
ProcessConstIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ140))
Typ = Typ03.GetMethod("Equals", typ140).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 3)
ProcessConstIL.MarkSequencePoint(doc9, 875, 1, 875, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
ProcessConstIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa127 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim tru127 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim cont127 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
ProcessConstIL.Emit(OpCodes.Beq, tru127)
ProcessConstIL.Emit(OpCodes.Br, fa127)
ProcessConstIL.MarkLabel(tru127)
ProcessConstIL.MarkSequencePoint(doc9, 876, 1, 876, 100)
Dim locbldr191 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(LongLiteral))
locbldr191.SetLocalSymInfo("llit")
ProcessConstIL.Emit(OpCodes.Newobj, GetType(LongLiteral).GetConstructor(Type.EmptyTypes))
ProcessConstIL.Emit(OpCodes.Stloc, 8)
ProcessConstIL.MarkSequencePoint(doc9, 877, 1, 877, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(LongLiteral)
ProcessConstIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Object)
Dim typ141 As Type() = {Typ}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToInt64", typ141))
Typ = GetType(System.Convert).GetMethod("ToInt64", typ141).ReturnType
ProcessConstIL.Emit(OpCodes.Stfld, GetType(LongLiteral).GetField("NumVal"))
ProcessConstIL.MarkSequencePoint(doc9, 878, 1, 878, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(LongLiteral)
ProcessConstIL.MarkSequencePoint(doc9, 879, 1, 879, 100)
ProcessConstIL.Emit(OpCodes.Br, label21)
ProcessConstIL.MarkSequencePoint(doc9, 880, 1, 880, 100)
ProcessConstIL.Emit(OpCodes.Br, cont127)
ProcessConstIL.MarkLabel(fa127)
ProcessConstIL.Emit(OpCodes.Br, cont127)
ProcessConstIL.MarkLabel(cont127)
ProcessConstIL.MarkSequencePoint(doc9, 882, 1, 882, 100)
ProcessConstIL.Emit(OpCodes.Ldtoken, GetType(System.Single))
Dim typ142 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ142))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ142).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 0)
ProcessConstIL.MarkSequencePoint(doc9, 883, 1, 883, 100)
Dim typ143(-1) As Type
ProcessConstIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessConstIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
ReDim Preserve typ143(UBound(typ143) + 1)
typ143(UBound(typ143)) = Typ
ProcessConstIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ143))
Typ = Typ03.GetMethod("Equals", typ143).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 3)
ProcessConstIL.MarkSequencePoint(doc9, 885, 1, 885, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
ProcessConstIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa128 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim tru128 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim cont128 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
ProcessConstIL.Emit(OpCodes.Beq, tru128)
ProcessConstIL.Emit(OpCodes.Br, fa128)
ProcessConstIL.MarkLabel(tru128)
ProcessConstIL.MarkSequencePoint(doc9, 886, 1, 886, 100)
Dim locbldr192 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(FloatLiteral))
locbldr192.SetLocalSymInfo("flit")
ProcessConstIL.Emit(OpCodes.Newobj, GetType(FloatLiteral).GetConstructor(Type.EmptyTypes))
ProcessConstIL.Emit(OpCodes.Stloc, 9)
ProcessConstIL.MarkSequencePoint(doc9, 887, 1, 887, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(FloatLiteral)
ProcessConstIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Object)
Dim typ144 As Type() = {Typ}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToSingle", typ144))
Typ = GetType(System.Convert).GetMethod("ToSingle", typ144).ReturnType
ProcessConstIL.Emit(OpCodes.Stfld, GetType(FloatLiteral).GetField("NumVal"))
ProcessConstIL.MarkSequencePoint(doc9, 888, 1, 888, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(FloatLiteral)
ProcessConstIL.MarkSequencePoint(doc9, 889, 1, 889, 100)
ProcessConstIL.Emit(OpCodes.Br, label21)
ProcessConstIL.MarkSequencePoint(doc9, 890, 1, 890, 100)
ProcessConstIL.Emit(OpCodes.Br, cont128)
ProcessConstIL.MarkLabel(fa128)
ProcessConstIL.Emit(OpCodes.Br, cont128)
ProcessConstIL.MarkLabel(cont128)
ProcessConstIL.MarkSequencePoint(doc9, 892, 1, 892, 100)
ProcessConstIL.Emit(OpCodes.Ldtoken, GetType(System.Double))
Dim typ145 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ145))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ145).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 0)
ProcessConstIL.MarkSequencePoint(doc9, 893, 1, 893, 100)
Dim typ146(-1) As Type
ProcessConstIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessConstIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
ReDim Preserve typ146(UBound(typ146) + 1)
typ146(UBound(typ146)) = Typ
ProcessConstIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ146))
Typ = Typ03.GetMethod("Equals", typ146).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 3)
ProcessConstIL.MarkSequencePoint(doc9, 895, 1, 895, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
ProcessConstIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa129 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim tru129 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim cont129 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
ProcessConstIL.Emit(OpCodes.Beq, tru129)
ProcessConstIL.Emit(OpCodes.Br, fa129)
ProcessConstIL.MarkLabel(tru129)
ProcessConstIL.MarkSequencePoint(doc9, 896, 1, 896, 100)
Dim locbldr193 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(DoubleLiteral))
locbldr193.SetLocalSymInfo("dlit")
ProcessConstIL.Emit(OpCodes.Newobj, GetType(DoubleLiteral).GetConstructor(Type.EmptyTypes))
ProcessConstIL.Emit(OpCodes.Stloc, 10)
ProcessConstIL.MarkSequencePoint(doc9, 897, 1, 897, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(DoubleLiteral)
ProcessConstIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Object)
Dim typ147 As Type() = {Typ}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToDouble", typ147))
Typ = GetType(System.Convert).GetMethod("ToDouble", typ147).ReturnType
ProcessConstIL.Emit(OpCodes.Stfld, GetType(DoubleLiteral).GetField("NumVal"))
ProcessConstIL.MarkSequencePoint(doc9, 898, 1, 898, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(DoubleLiteral)
ProcessConstIL.MarkSequencePoint(doc9, 899, 1, 899, 100)
ProcessConstIL.Emit(OpCodes.Br, label21)
ProcessConstIL.MarkSequencePoint(doc9, 900, 1, 900, 100)
ProcessConstIL.Emit(OpCodes.Br, cont129)
ProcessConstIL.MarkLabel(fa129)
ProcessConstIL.Emit(OpCodes.Br, cont129)
ProcessConstIL.MarkLabel(cont129)
ProcessConstIL.MarkSequencePoint(doc9, 902, 1, 902, 100)
ProcessConstIL.Emit(OpCodes.Ldtoken, GetType(System.Boolean))
Dim typ148 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ148))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ148).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 0)
ProcessConstIL.MarkSequencePoint(doc9, 903, 1, 903, 100)
Dim typ149(-1) As Type
ProcessConstIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessConstIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
ReDim Preserve typ149(UBound(typ149) + 1)
typ149(UBound(typ149)) = Typ
ProcessConstIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ149))
Typ = Typ03.GetMethod("Equals", typ149).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 3)
ProcessConstIL.MarkSequencePoint(doc9, 905, 1, 905, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
ProcessConstIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa130 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim tru130 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim cont130 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
ProcessConstIL.Emit(OpCodes.Beq, tru130)
ProcessConstIL.Emit(OpCodes.Br, fa130)
ProcessConstIL.MarkLabel(tru130)
ProcessConstIL.MarkSequencePoint(doc9, 906, 1, 906, 100)
Dim locbldr194 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(BooleanLiteral))
locbldr194.SetLocalSymInfo("bllit")
ProcessConstIL.Emit(OpCodes.Newobj, GetType(BooleanLiteral).GetConstructor(Type.EmptyTypes))
ProcessConstIL.Emit(OpCodes.Stloc, 11)
ProcessConstIL.MarkSequencePoint(doc9, 907, 1, 907, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(BooleanLiteral)
ProcessConstIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Object)
Dim typ150 As Type() = {Typ}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToBoolean", typ150))
Typ = GetType(System.Convert).GetMethod("ToBoolean", typ150).ReturnType
ProcessConstIL.Emit(OpCodes.Stfld, GetType(BooleanLiteral).GetField("BoolVal"))
ProcessConstIL.MarkSequencePoint(doc9, 908, 1, 908, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(BooleanLiteral)
ProcessConstIL.MarkSequencePoint(doc9, 909, 1, 909, 100)
ProcessConstIL.Emit(OpCodes.Br, label21)
ProcessConstIL.MarkSequencePoint(doc9, 910, 1, 910, 100)
ProcessConstIL.Emit(OpCodes.Br, cont130)
ProcessConstIL.MarkLabel(fa130)
ProcessConstIL.Emit(OpCodes.Br, cont130)
ProcessConstIL.MarkLabel(cont130)
ProcessConstIL.MarkSequencePoint(doc9, 912, 1, 912, 100)
ProcessConstIL.Emit(OpCodes.Ldtoken, GetType(System.Char))
Dim typ151 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ151))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ151).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 0)
ProcessConstIL.MarkSequencePoint(doc9, 913, 1, 913, 100)
Dim typ152(-1) As Type
ProcessConstIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessConstIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
ReDim Preserve typ152(UBound(typ152) + 1)
typ152(UBound(typ152)) = Typ
ProcessConstIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ152))
Typ = Typ03.GetMethod("Equals", typ152).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 3)
ProcessConstIL.MarkSequencePoint(doc9, 915, 1, 915, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
ProcessConstIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa131 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim tru131 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim cont131 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
ProcessConstIL.Emit(OpCodes.Beq, tru131)
ProcessConstIL.Emit(OpCodes.Br, fa131)
ProcessConstIL.MarkLabel(tru131)
ProcessConstIL.MarkSequencePoint(doc9, 916, 1, 916, 100)
Dim locbldr195 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(CharLiteral))
locbldr195.SetLocalSymInfo("clit")
ProcessConstIL.Emit(OpCodes.Newobj, GetType(CharLiteral).GetConstructor(Type.EmptyTypes))
ProcessConstIL.Emit(OpCodes.Stloc, 12)
ProcessConstIL.MarkSequencePoint(doc9, 917, 1, 917, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(CharLiteral)
ProcessConstIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Object)
Dim typ153 As Type() = {Typ}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ153))
Typ = GetType(System.Convert).GetMethod("ToChar", typ153).ReturnType
ProcessConstIL.Emit(OpCodes.Stfld, GetType(CharLiteral).GetField("CharVal"))
ProcessConstIL.MarkSequencePoint(doc9, 918, 1, 918, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(CharLiteral)
ProcessConstIL.MarkSequencePoint(doc9, 919, 1, 919, 100)
ProcessConstIL.Emit(OpCodes.Br, label21)
ProcessConstIL.MarkSequencePoint(doc9, 920, 1, 920, 100)
ProcessConstIL.Emit(OpCodes.Br, cont131)
ProcessConstIL.MarkLabel(fa131)
ProcessConstIL.Emit(OpCodes.Br, cont131)
ProcessConstIL.MarkLabel(cont131)
ProcessConstIL.MarkSequencePoint(doc9, 922, 1, 922, 100)
ProcessConstIL.Emit(OpCodes.Ldtoken, GetType(System.Object))
Dim typ154 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ154))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ154).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 0)
ProcessConstIL.MarkSequencePoint(doc9, 923, 1, 923, 100)
Dim typ155(-1) As Type
ProcessConstIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessConstIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
ReDim Preserve typ155(UBound(typ155) + 1)
typ155(UBound(typ155)) = Typ
ProcessConstIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ155))
Typ = Typ03.GetMethod("Equals", typ155).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 3)
ProcessConstIL.MarkSequencePoint(doc9, 925, 1, 925, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
ProcessConstIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa132 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim tru132 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim cont132 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
ProcessConstIL.Emit(OpCodes.Beq, tru132)
ProcessConstIL.Emit(OpCodes.Br, fa132)
ProcessConstIL.MarkLabel(tru132)
ProcessConstIL.MarkSequencePoint(doc9, 926, 1, 926, 100)
Dim locbldr196 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(NullLiteral))
locbldr196.SetLocalSymInfo("nlit")
ProcessConstIL.Emit(OpCodes.Newobj, GetType(NullLiteral).GetConstructor(Type.EmptyTypes))
ProcessConstIL.Emit(OpCodes.Stloc, 13)
ProcessConstIL.MarkSequencePoint(doc9, 927, 1, 927, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(NullLiteral)
ProcessConstIL.MarkSequencePoint(doc9, 928, 1, 928, 100)
ProcessConstIL.Emit(OpCodes.Br, label21)
ProcessConstIL.MarkSequencePoint(doc9, 929, 1, 929, 100)
ProcessConstIL.Emit(OpCodes.Br, cont132)
ProcessConstIL.MarkLabel(fa132)
ProcessConstIL.Emit(OpCodes.Br, cont132)
ProcessConstIL.MarkLabel(cont132)
ProcessConstIL.MarkSequencePoint(doc9, 932, 1, 932, 100)
ProcessConstIL.Emit(OpCodes.Ldnull)
ProcessConstIL.MarkSequencePoint(doc9, 934, 1, 934, 100)
ProcessConstIL.MarkLabel(label21)
ProcessConstIL.MarkSequencePoint(doc9, 936, 1, 936, 100)
ProcessConstIL.Emit(OpCodes.Ret)
Dim typ156(-1) As Type
ReDim Preserve typ156(UBound(typ156) + 1)
typ156(UBound(typ156)) = GetType(Op)
ReDim Preserve typ156(UBound(typ156) + 1)
typ156(UBound(typ156)) = GetType(System.Boolean)
Dim EmitOp As MethodBuilder = Helpers.DefineMethod("EmitOp", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ156)
Dim EmitOpIL As ILGenerator = EmitOp.GetILGenerator()
Dim EmitOpparam01 As ParameterBuilder = EmitOp.DefineParameter(1, ParameterAttributes.None, "op")
Dim EmitOpparam02 As ParameterBuilder = EmitOp.DefineParameter(2, ParameterAttributes.None, "s")
EmitOpIL.MarkSequencePoint(doc9, 941, 1, 941, 100)
Dim label22 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.MarkSequencePoint(doc9, 942, 1, 942, 100)
Dim locbldr197 As LocalBuilder = EmitOpIL.DeclareLocal(GetType(System.Type))
locbldr197.SetLocalSymInfo("typ")
EmitOpIL.MarkSequencePoint(doc9, 943, 1, 943, 100)
Dim locbldr198 As LocalBuilder = EmitOpIL.DeclareLocal(GetType(System.Boolean))
locbldr198.SetLocalSymInfo("b")
EmitOpIL.MarkSequencePoint(doc9, 944, 1, 944, 100)
Dim locbldr199 As LocalBuilder = EmitOpIL.DeclareLocal(GetType(MethodInfo))
locbldr199.SetLocalSymInfo("mtd")
EmitOpIL.Emit(OpCodes.Ldnull)
EmitOpIL.Emit(OpCodes.Stloc, 2)
EmitOpIL.MarkSequencePoint(doc9, 946, 1, 946, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(AddOp))
Dim typ157 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ157))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ157).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc9, 947, 1, 947, 100)
Dim typ158(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ158(UBound(typ158) + 1)
typ158(UBound(typ158)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ158))
Typ = Typ03.GetMethod("IsInstanceOfType", typ158).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc9, 949, 1, 949, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa133 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru133 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont133 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru133)
EmitOpIL.Emit(OpCodes.Br, fa133)
EmitOpIL.MarkLabel(tru133)
EmitOpIL.MarkSequencePoint(doc9, 950, 1, 950, 100)
Dim typ159(-1) As Type
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ159(UBound(typ159) + 1)
typ159(UBound(typ159)) = Typ
EmitOpIL.Emit(OpCodes.Ldstr, "op_Addition")
Typ = GetType(System.String)
ReDim Preserve typ159(UBound(typ159) + 1)
typ159(UBound(typ159)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ159(UBound(typ159) + 1)
typ159(UBound(typ159)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, RightOp)
Typ = RightOp.FieldType
ReDim Preserve typ159(UBound(typ159) + 1)
typ159(UBound(typ159)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadBinOp", typ159))
Typ = GetType(Loader).GetMethod("LoadBinOp", typ159).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 2)
EmitOpIL.MarkSequencePoint(doc9, 951, 1, 951, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
EmitOpIL.Emit(OpCodes.Ldnull)
Dim fa134 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru134 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont134 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, fa134)
EmitOpIL.Emit(OpCodes.Br, tru134)
EmitOpIL.MarkLabel(tru134)
EmitOpIL.MarkSequencePoint(doc9, 952, 1, 952, 100)
Dim typ160(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
ReDim Preserve typ160(UBound(typ160) + 1)
typ160(UBound(typ160)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ160))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ160).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc9, 953, 1, 953, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
EmitOpIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
EmitOpIL.MarkSequencePoint(doc9, 954, 1, 954, 100)
EmitOpIL.Emit(OpCodes.Br, cont134)
EmitOpIL.MarkLabel(fa134)
EmitOpIL.MarkSequencePoint(doc9, 955, 1, 955, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, StringFlg)
Typ = StringFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa135 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru135 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont135 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru135)
EmitOpIL.Emit(OpCodes.Br, fa135)
EmitOpIL.MarkLabel(tru135)
EmitOpIL.MarkSequencePoint(doc9, 956, 1, 956, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitStrAdd", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitStrAdd", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc9, 957, 1, 957, 100)
EmitOpIL.Emit(OpCodes.Br, cont135)
EmitOpIL.MarkLabel(fa135)
EmitOpIL.MarkSequencePoint(doc9, 958, 1, 958, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, OpCodeSuppFlg)
Typ = OpCodeSuppFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa136 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru136 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont136 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru136)
EmitOpIL.Emit(OpCodes.Br, fa136)
EmitOpIL.MarkLabel(tru136)
EmitOpIL.MarkSequencePoint(doc9, 959, 1, 959, 100)
Dim typ162(-1) As Type
EmitOpIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ162(UBound(typ162) + 1)
typ162(UBound(typ162)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitAdd", typ162))
Typ = GetType(ILEmitter).GetMethod("EmitAdd", typ162).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc9, 960, 1, 960, 100)
EmitOpIL.Emit(OpCodes.Br, cont136)
EmitOpIL.MarkLabel(fa136)
EmitOpIL.Emit(OpCodes.Br, cont136)
EmitOpIL.MarkLabel(cont136)
EmitOpIL.MarkSequencePoint(doc9, 961, 1, 961, 100)
EmitOpIL.Emit(OpCodes.Br, cont135)
EmitOpIL.MarkLabel(cont135)
EmitOpIL.MarkSequencePoint(doc9, 962, 1, 962, 100)
EmitOpIL.Emit(OpCodes.Br, cont134)
EmitOpIL.MarkLabel(cont134)
EmitOpIL.MarkSequencePoint(doc9, 963, 1, 963, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc9, 964, 1, 964, 100)
EmitOpIL.Emit(OpCodes.Br, cont133)
EmitOpIL.MarkLabel(fa133)
EmitOpIL.Emit(OpCodes.Br, cont133)
EmitOpIL.MarkLabel(cont133)
EmitOpIL.MarkSequencePoint(doc9, 966, 1, 966, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(MulOp))
Dim typ163 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ163))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ163).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc9, 967, 1, 967, 100)
Dim typ164(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ164(UBound(typ164) + 1)
typ164(UBound(typ164)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ164))
Typ = Typ03.GetMethod("IsInstanceOfType", typ164).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc9, 969, 1, 969, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa137 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru137 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont137 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru137)
EmitOpIL.Emit(OpCodes.Br, fa137)
EmitOpIL.MarkLabel(tru137)
EmitOpIL.MarkSequencePoint(doc9, 970, 1, 970, 100)
Dim typ165(-1) As Type
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ165(UBound(typ165) + 1)
typ165(UBound(typ165)) = Typ
EmitOpIL.Emit(OpCodes.Ldstr, "op_Multiply")
Typ = GetType(System.String)
ReDim Preserve typ165(UBound(typ165) + 1)
typ165(UBound(typ165)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ165(UBound(typ165) + 1)
typ165(UBound(typ165)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, RightOp)
Typ = RightOp.FieldType
ReDim Preserve typ165(UBound(typ165) + 1)
typ165(UBound(typ165)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadBinOp", typ165))
Typ = GetType(Loader).GetMethod("LoadBinOp", typ165).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 2)
EmitOpIL.MarkSequencePoint(doc9, 971, 1, 971, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
EmitOpIL.Emit(OpCodes.Ldnull)
Dim fa138 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru138 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont138 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, fa138)
EmitOpIL.Emit(OpCodes.Br, tru138)
EmitOpIL.MarkLabel(tru138)
EmitOpIL.MarkSequencePoint(doc9, 972, 1, 972, 100)
Dim typ166(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
ReDim Preserve typ166(UBound(typ166) + 1)
typ166(UBound(typ166)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ166))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ166).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc9, 973, 1, 973, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
EmitOpIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
EmitOpIL.MarkSequencePoint(doc9, 974, 1, 974, 100)
EmitOpIL.Emit(OpCodes.Br, cont138)
EmitOpIL.MarkLabel(fa138)
EmitOpIL.MarkSequencePoint(doc9, 975, 1, 975, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, OpCodeSuppFlg)
Typ = OpCodeSuppFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa139 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru139 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont139 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru139)
EmitOpIL.Emit(OpCodes.Br, fa139)
EmitOpIL.MarkLabel(tru139)
EmitOpIL.MarkSequencePoint(doc9, 976, 1, 976, 100)
Dim typ168(-1) As Type
EmitOpIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ168(UBound(typ168) + 1)
typ168(UBound(typ168)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitMul", typ168))
Typ = GetType(ILEmitter).GetMethod("EmitMul", typ168).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc9, 977, 1, 977, 100)
EmitOpIL.Emit(OpCodes.Br, cont139)
EmitOpIL.MarkLabel(fa139)
EmitOpIL.Emit(OpCodes.Br, cont139)
EmitOpIL.MarkLabel(cont139)
EmitOpIL.MarkSequencePoint(doc9, 978, 1, 978, 100)
EmitOpIL.Emit(OpCodes.Br, cont138)
EmitOpIL.MarkLabel(cont138)
EmitOpIL.MarkSequencePoint(doc9, 979, 1, 979, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc9, 980, 1, 980, 100)
EmitOpIL.Emit(OpCodes.Br, cont137)
EmitOpIL.MarkLabel(fa137)
EmitOpIL.Emit(OpCodes.Br, cont137)
EmitOpIL.MarkLabel(cont137)
EmitOpIL.MarkSequencePoint(doc9, 982, 1, 982, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(SubOp))
Dim typ169 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ169))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ169).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc9, 983, 1, 983, 100)
Dim typ170(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ170(UBound(typ170) + 1)
typ170(UBound(typ170)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ170))
Typ = Typ03.GetMethod("IsInstanceOfType", typ170).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc9, 985, 1, 985, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa140 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru140 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont140 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru140)
EmitOpIL.Emit(OpCodes.Br, fa140)
EmitOpIL.MarkLabel(tru140)
EmitOpIL.MarkSequencePoint(doc9, 986, 1, 986, 100)
Dim typ171(-1) As Type
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ171(UBound(typ171) + 1)
typ171(UBound(typ171)) = Typ
EmitOpIL.Emit(OpCodes.Ldstr, "op_Subtraction")
Typ = GetType(System.String)
ReDim Preserve typ171(UBound(typ171) + 1)
typ171(UBound(typ171)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ171(UBound(typ171) + 1)
typ171(UBound(typ171)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, RightOp)
Typ = RightOp.FieldType
ReDim Preserve typ171(UBound(typ171) + 1)
typ171(UBound(typ171)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadBinOp", typ171))
Typ = GetType(Loader).GetMethod("LoadBinOp", typ171).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 2)
EmitOpIL.MarkSequencePoint(doc9, 987, 1, 987, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
EmitOpIL.Emit(OpCodes.Ldnull)
Dim fa141 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru141 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont141 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, fa141)
EmitOpIL.Emit(OpCodes.Br, tru141)
EmitOpIL.MarkLabel(tru141)
EmitOpIL.MarkSequencePoint(doc9, 988, 1, 988, 100)
Dim typ172(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
ReDim Preserve typ172(UBound(typ172) + 1)
typ172(UBound(typ172)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ172))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ172).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc9, 989, 1, 989, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
EmitOpIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
EmitOpIL.MarkSequencePoint(doc9, 990, 1, 990, 100)
EmitOpIL.Emit(OpCodes.Br, cont141)
EmitOpIL.MarkLabel(fa141)
EmitOpIL.MarkSequencePoint(doc9, 991, 1, 991, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, OpCodeSuppFlg)
Typ = OpCodeSuppFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa142 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru142 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont142 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru142)
EmitOpIL.Emit(OpCodes.Br, fa142)
EmitOpIL.MarkLabel(tru142)
EmitOpIL.MarkSequencePoint(doc9, 992, 1, 992, 100)
Dim typ174(-1) As Type
EmitOpIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ174(UBound(typ174) + 1)
typ174(UBound(typ174)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitSub", typ174))
Typ = GetType(ILEmitter).GetMethod("EmitSub", typ174).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc9, 993, 1, 993, 100)
EmitOpIL.Emit(OpCodes.Br, cont142)
EmitOpIL.MarkLabel(fa142)
EmitOpIL.Emit(OpCodes.Br, cont142)
EmitOpIL.MarkLabel(cont142)
EmitOpIL.MarkSequencePoint(doc9, 994, 1, 994, 100)
EmitOpIL.Emit(OpCodes.Br, cont141)
EmitOpIL.MarkLabel(cont141)
EmitOpIL.MarkSequencePoint(doc9, 995, 1, 995, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc9, 996, 1, 996, 100)
EmitOpIL.Emit(OpCodes.Br, cont140)
EmitOpIL.MarkLabel(fa140)
EmitOpIL.Emit(OpCodes.Br, cont140)
EmitOpIL.MarkLabel(cont140)
EmitOpIL.MarkSequencePoint(doc9, 998, 1, 998, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(DivOp))
Dim typ175 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ175))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ175).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc9, 999, 1, 999, 100)
Dim typ176(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ176(UBound(typ176) + 1)
typ176(UBound(typ176)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ176))
Typ = Typ03.GetMethod("IsInstanceOfType", typ176).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc9, 1001, 1, 1001, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa143 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru143 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont143 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru143)
EmitOpIL.Emit(OpCodes.Br, fa143)
EmitOpIL.MarkLabel(tru143)
EmitOpIL.MarkSequencePoint(doc9, 1002, 1, 1002, 100)
Dim typ177(-1) As Type
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ177(UBound(typ177) + 1)
typ177(UBound(typ177)) = Typ
EmitOpIL.Emit(OpCodes.Ldstr, "op_Division")
Typ = GetType(System.String)
ReDim Preserve typ177(UBound(typ177) + 1)
typ177(UBound(typ177)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ177(UBound(typ177) + 1)
typ177(UBound(typ177)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, RightOp)
Typ = RightOp.FieldType
ReDim Preserve typ177(UBound(typ177) + 1)
typ177(UBound(typ177)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadBinOp", typ177))
Typ = GetType(Loader).GetMethod("LoadBinOp", typ177).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 2)
EmitOpIL.MarkSequencePoint(doc9, 1003, 1, 1003, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
EmitOpIL.Emit(OpCodes.Ldnull)
Dim fa144 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru144 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont144 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, fa144)
EmitOpIL.Emit(OpCodes.Br, tru144)
EmitOpIL.MarkLabel(tru144)
EmitOpIL.MarkSequencePoint(doc9, 1004, 1, 1004, 100)
Dim typ178(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
ReDim Preserve typ178(UBound(typ178) + 1)
typ178(UBound(typ178)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ178))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ178).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc9, 1005, 1, 1005, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
EmitOpIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
EmitOpIL.MarkSequencePoint(doc9, 1006, 1, 1006, 100)
EmitOpIL.Emit(OpCodes.Br, cont144)
EmitOpIL.MarkLabel(fa144)
EmitOpIL.MarkSequencePoint(doc9, 1007, 1, 1007, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, OpCodeSuppFlg)
Typ = OpCodeSuppFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa145 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru145 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont145 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru145)
EmitOpIL.Emit(OpCodes.Br, fa145)
EmitOpIL.MarkLabel(tru145)
EmitOpIL.MarkSequencePoint(doc9, 1008, 1, 1008, 100)
Dim typ180(-1) As Type
EmitOpIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ180(UBound(typ180) + 1)
typ180(UBound(typ180)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitDiv", typ180))
Typ = GetType(ILEmitter).GetMethod("EmitDiv", typ180).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc9, 1009, 1, 1009, 100)
EmitOpIL.Emit(OpCodes.Br, cont145)
EmitOpIL.MarkLabel(fa145)
EmitOpIL.Emit(OpCodes.Br, cont145)
EmitOpIL.MarkLabel(cont145)
EmitOpIL.MarkSequencePoint(doc9, 1010, 1, 1010, 100)
EmitOpIL.Emit(OpCodes.Br, cont144)
EmitOpIL.MarkLabel(cont144)
EmitOpIL.MarkSequencePoint(doc9, 1011, 1, 1011, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc9, 1012, 1, 1012, 100)
EmitOpIL.Emit(OpCodes.Br, cont143)
EmitOpIL.MarkLabel(fa143)
EmitOpIL.Emit(OpCodes.Br, cont143)
EmitOpIL.MarkLabel(cont143)
EmitOpIL.MarkSequencePoint(doc9, 1014, 1, 1014, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(ModOp))
Dim typ181 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ181))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ181).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc9, 1015, 1, 1015, 100)
Dim typ182(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ182(UBound(typ182) + 1)
typ182(UBound(typ182)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ182))
Typ = Typ03.GetMethod("IsInstanceOfType", typ182).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc9, 1017, 1, 1017, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa146 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru146 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont146 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru146)
EmitOpIL.Emit(OpCodes.Br, fa146)
EmitOpIL.MarkLabel(tru146)
EmitOpIL.MarkSequencePoint(doc9, 1018, 1, 1018, 100)
Dim typ183(-1) As Type
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ183(UBound(typ183) + 1)
typ183(UBound(typ183)) = Typ
EmitOpIL.Emit(OpCodes.Ldstr, "op_Modulus")
Typ = GetType(System.String)
ReDim Preserve typ183(UBound(typ183) + 1)
typ183(UBound(typ183)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ183(UBound(typ183) + 1)
typ183(UBound(typ183)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, RightOp)
Typ = RightOp.FieldType
ReDim Preserve typ183(UBound(typ183) + 1)
typ183(UBound(typ183)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadBinOp", typ183))
Typ = GetType(Loader).GetMethod("LoadBinOp", typ183).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 2)
EmitOpIL.MarkSequencePoint(doc9, 1019, 1, 1019, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
EmitOpIL.Emit(OpCodes.Ldnull)
Dim fa147 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru147 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont147 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, fa147)
EmitOpIL.Emit(OpCodes.Br, tru147)
EmitOpIL.MarkLabel(tru147)
EmitOpIL.MarkSequencePoint(doc9, 1020, 1, 1020, 100)
Dim typ184(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
ReDim Preserve typ184(UBound(typ184) + 1)
typ184(UBound(typ184)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ184))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ184).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc9, 1021, 1, 1021, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
EmitOpIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
EmitOpIL.MarkSequencePoint(doc9, 1022, 1, 1022, 100)
EmitOpIL.Emit(OpCodes.Br, cont147)
EmitOpIL.MarkLabel(fa147)
EmitOpIL.MarkSequencePoint(doc9, 1023, 1, 1023, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, OpCodeSuppFlg)
Typ = OpCodeSuppFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa148 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru148 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont148 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru148)
EmitOpIL.Emit(OpCodes.Br, fa148)
EmitOpIL.MarkLabel(tru148)
EmitOpIL.MarkSequencePoint(doc9, 1024, 1, 1024, 100)
Dim typ186(-1) As Type
EmitOpIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ186(UBound(typ186) + 1)
typ186(UBound(typ186)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitRem", typ186))
Typ = GetType(ILEmitter).GetMethod("EmitRem", typ186).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc9, 1025, 1, 1025, 100)
EmitOpIL.Emit(OpCodes.Br, cont148)
EmitOpIL.MarkLabel(fa148)
EmitOpIL.Emit(OpCodes.Br, cont148)
EmitOpIL.MarkLabel(cont148)
EmitOpIL.MarkSequencePoint(doc9, 1026, 1, 1026, 100)
EmitOpIL.Emit(OpCodes.Br, cont147)
EmitOpIL.MarkLabel(cont147)
EmitOpIL.MarkSequencePoint(doc9, 1027, 1, 1027, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc9, 1028, 1, 1028, 100)
EmitOpIL.Emit(OpCodes.Br, cont146)
EmitOpIL.MarkLabel(fa146)
EmitOpIL.Emit(OpCodes.Br, cont146)
EmitOpIL.MarkLabel(cont146)
EmitOpIL.MarkSequencePoint(doc9, 1030, 1, 1030, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(OrOp))
Dim typ187 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ187))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ187).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc9, 1031, 1, 1031, 100)
Dim typ188(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ188(UBound(typ188) + 1)
typ188(UBound(typ188)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ188))
Typ = Typ03.GetMethod("IsInstanceOfType", typ188).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc9, 1033, 1, 1033, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa149 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru149 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont149 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru149)
EmitOpIL.Emit(OpCodes.Br, fa149)
EmitOpIL.MarkLabel(tru149)
EmitOpIL.MarkSequencePoint(doc9, 1034, 1, 1034, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitOr", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitOr", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc9, 1035, 1, 1035, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc9, 1036, 1, 1036, 100)
EmitOpIL.Emit(OpCodes.Br, cont149)
EmitOpIL.MarkLabel(fa149)
EmitOpIL.Emit(OpCodes.Br, cont149)
EmitOpIL.MarkLabel(cont149)
EmitOpIL.MarkSequencePoint(doc9, 1038, 1, 1038, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(AndOp))
Dim typ189 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ189))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ189).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc9, 1039, 1, 1039, 100)
Dim typ190(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ190(UBound(typ190) + 1)
typ190(UBound(typ190)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ190))
Typ = Typ03.GetMethod("IsInstanceOfType", typ190).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc9, 1041, 1, 1041, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa150 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru150 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont150 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru150)
EmitOpIL.Emit(OpCodes.Br, fa150)
EmitOpIL.MarkLabel(tru150)
EmitOpIL.MarkSequencePoint(doc9, 1042, 1, 1042, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitAnd", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitAnd", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc9, 1043, 1, 1043, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc9, 1044, 1, 1044, 100)
EmitOpIL.Emit(OpCodes.Br, cont150)
EmitOpIL.MarkLabel(fa150)
EmitOpIL.Emit(OpCodes.Br, cont150)
EmitOpIL.MarkLabel(cont150)
EmitOpIL.MarkSequencePoint(doc9, 1046, 1, 1046, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(OrOp))
Dim typ191 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ191))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ191).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc9, 1047, 1, 1047, 100)
Dim typ192(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ192(UBound(typ192) + 1)
typ192(UBound(typ192)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ192))
Typ = Typ03.GetMethod("IsInstanceOfType", typ192).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc9, 1049, 1, 1049, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa151 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru151 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont151 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru151)
EmitOpIL.Emit(OpCodes.Br, fa151)
EmitOpIL.MarkLabel(tru151)
EmitOpIL.MarkSequencePoint(doc9, 1050, 1, 1050, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitOr", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitOr", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc9, 1051, 1, 1051, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc9, 1052, 1, 1052, 100)
EmitOpIL.Emit(OpCodes.Br, cont151)
EmitOpIL.MarkLabel(fa151)
EmitOpIL.Emit(OpCodes.Br, cont151)
EmitOpIL.MarkLabel(cont151)
EmitOpIL.MarkSequencePoint(doc9, 1054, 1, 1054, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(XorOp))
Dim typ193 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ193))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ193).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc9, 1055, 1, 1055, 100)
Dim typ194(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ194(UBound(typ194) + 1)
typ194(UBound(typ194)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ194))
Typ = Typ03.GetMethod("IsInstanceOfType", typ194).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc9, 1057, 1, 1057, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa152 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru152 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont152 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru152)
EmitOpIL.Emit(OpCodes.Br, fa152)
EmitOpIL.MarkLabel(tru152)
EmitOpIL.MarkSequencePoint(doc9, 1058, 1, 1058, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitXor", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitXor", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc9, 1059, 1, 1059, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc9, 1060, 1, 1060, 100)
EmitOpIL.Emit(OpCodes.Br, cont152)
EmitOpIL.MarkLabel(fa152)
EmitOpIL.Emit(OpCodes.Br, cont152)
EmitOpIL.MarkLabel(cont152)
EmitOpIL.MarkSequencePoint(doc9, 1062, 1, 1062, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(NandOp))
Dim typ195 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ195))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ195).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc9, 1063, 1, 1063, 100)
Dim typ196(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ196(UBound(typ196) + 1)
typ196(UBound(typ196)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ196))
Typ = Typ03.GetMethod("IsInstanceOfType", typ196).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc9, 1065, 1, 1065, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa153 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru153 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont153 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru153)
EmitOpIL.Emit(OpCodes.Br, fa153)
EmitOpIL.MarkLabel(tru153)
EmitOpIL.MarkSequencePoint(doc9, 1066, 1, 1066, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitNand", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitNand", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc9, 1067, 1, 1067, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc9, 1068, 1, 1068, 100)
EmitOpIL.Emit(OpCodes.Br, cont153)
EmitOpIL.MarkLabel(fa153)
EmitOpIL.Emit(OpCodes.Br, cont153)
EmitOpIL.MarkLabel(cont153)
EmitOpIL.MarkSequencePoint(doc9, 1070, 1, 1070, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(NorOp))
Dim typ197 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ197))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ197).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc9, 1071, 1, 1071, 100)
Dim typ198(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ198(UBound(typ198) + 1)
typ198(UBound(typ198)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ198))
Typ = Typ03.GetMethod("IsInstanceOfType", typ198).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc9, 1073, 1, 1073, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa154 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru154 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont154 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru154)
EmitOpIL.Emit(OpCodes.Br, fa154)
EmitOpIL.MarkLabel(tru154)
EmitOpIL.MarkSequencePoint(doc9, 1074, 1, 1074, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitNor", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitNor", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc9, 1075, 1, 1075, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc9, 1076, 1, 1076, 100)
EmitOpIL.Emit(OpCodes.Br, cont154)
EmitOpIL.MarkLabel(fa154)
EmitOpIL.Emit(OpCodes.Br, cont154)
EmitOpIL.MarkLabel(cont154)
EmitOpIL.MarkSequencePoint(doc9, 1078, 1, 1078, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(XnorOp))
Dim typ199 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ199))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ199).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc9, 1079, 1, 1079, 100)
Dim typ200(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ200(UBound(typ200) + 1)
typ200(UBound(typ200)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ200))
Typ = Typ03.GetMethod("IsInstanceOfType", typ200).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc9, 1081, 1, 1081, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa155 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru155 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont155 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru155)
EmitOpIL.Emit(OpCodes.Br, fa155)
EmitOpIL.MarkLabel(tru155)
EmitOpIL.MarkSequencePoint(doc9, 1082, 1, 1082, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitXnor", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitXnor", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc9, 1083, 1, 1083, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc9, 1084, 1, 1084, 100)
EmitOpIL.Emit(OpCodes.Br, cont155)
EmitOpIL.MarkLabel(fa155)
EmitOpIL.Emit(OpCodes.Br, cont155)
EmitOpIL.MarkLabel(cont155)
EmitOpIL.MarkSequencePoint(doc9, 1086, 1, 1086, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(GtOp))
Dim typ201 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ201))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ201).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc9, 1087, 1, 1087, 100)
Dim typ202(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ202(UBound(typ202) + 1)
typ202(UBound(typ202)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ202))
Typ = Typ03.GetMethod("IsInstanceOfType", typ202).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc9, 1089, 1, 1089, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa156 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru156 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont156 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru156)
EmitOpIL.Emit(OpCodes.Br, fa156)
EmitOpIL.MarkLabel(tru156)
EmitOpIL.MarkSequencePoint(doc9, 1090, 1, 1090, 100)
Dim typ203(-1) As Type
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ203(UBound(typ203) + 1)
typ203(UBound(typ203)) = Typ
EmitOpIL.Emit(OpCodes.Ldstr, "op_GreaterThan")
Typ = GetType(System.String)
ReDim Preserve typ203(UBound(typ203) + 1)
typ203(UBound(typ203)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ203(UBound(typ203) + 1)
typ203(UBound(typ203)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, RightOp)
Typ = RightOp.FieldType
ReDim Preserve typ203(UBound(typ203) + 1)
typ203(UBound(typ203)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadBinOp", typ203))
Typ = GetType(Loader).GetMethod("LoadBinOp", typ203).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 2)
EmitOpIL.MarkSequencePoint(doc9, 1091, 1, 1091, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
EmitOpIL.Emit(OpCodes.Ldnull)
Dim fa157 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru157 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont157 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, fa157)
EmitOpIL.Emit(OpCodes.Br, tru157)
EmitOpIL.MarkLabel(tru157)
EmitOpIL.MarkSequencePoint(doc9, 1092, 1, 1092, 100)
Dim typ204(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
ReDim Preserve typ204(UBound(typ204) + 1)
typ204(UBound(typ204)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ204))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ204).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc9, 1093, 1, 1093, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
EmitOpIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
EmitOpIL.MarkSequencePoint(doc9, 1094, 1, 1094, 100)
EmitOpIL.Emit(OpCodes.Br, cont157)
EmitOpIL.MarkLabel(fa157)
EmitOpIL.MarkSequencePoint(doc9, 1095, 1, 1095, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, OpCodeSuppFlg)
Typ = OpCodeSuppFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa158 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru158 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont158 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru158)
EmitOpIL.Emit(OpCodes.Br, fa158)
EmitOpIL.MarkLabel(tru158)
EmitOpIL.MarkSequencePoint(doc9, 1096, 1, 1096, 100)
Dim typ206(-1) As Type
EmitOpIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ206(UBound(typ206) + 1)
typ206(UBound(typ206)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCgt", typ206))
Typ = GetType(ILEmitter).GetMethod("EmitCgt", typ206).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc9, 1097, 1, 1097, 100)
EmitOpIL.Emit(OpCodes.Br, cont158)
EmitOpIL.MarkLabel(fa158)
EmitOpIL.Emit(OpCodes.Br, cont158)
EmitOpIL.MarkLabel(cont158)
EmitOpIL.MarkSequencePoint(doc9, 1098, 1, 1098, 100)
EmitOpIL.Emit(OpCodes.Br, cont157)
EmitOpIL.MarkLabel(cont157)
EmitOpIL.MarkSequencePoint(doc9, 1099, 1, 1099, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc9, 1100, 1, 1100, 100)
EmitOpIL.Emit(OpCodes.Br, cont156)
EmitOpIL.MarkLabel(fa156)
EmitOpIL.Emit(OpCodes.Br, cont156)
EmitOpIL.MarkLabel(cont156)
EmitOpIL.MarkSequencePoint(doc9, 1102, 1, 1102, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(LtOp))
Dim typ207 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ207))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ207).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc9, 1103, 1, 1103, 100)
Dim typ208(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ208(UBound(typ208) + 1)
typ208(UBound(typ208)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ208))
Typ = Typ03.GetMethod("IsInstanceOfType", typ208).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc9, 1105, 1, 1105, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa159 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru159 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont159 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru159)
EmitOpIL.Emit(OpCodes.Br, fa159)
EmitOpIL.MarkLabel(tru159)
EmitOpIL.MarkSequencePoint(doc9, 1106, 1, 1106, 100)
Dim typ209(-1) As Type
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ209(UBound(typ209) + 1)
typ209(UBound(typ209)) = Typ
EmitOpIL.Emit(OpCodes.Ldstr, "op_LessThan")
Typ = GetType(System.String)
ReDim Preserve typ209(UBound(typ209) + 1)
typ209(UBound(typ209)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ209(UBound(typ209) + 1)
typ209(UBound(typ209)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, RightOp)
Typ = RightOp.FieldType
ReDim Preserve typ209(UBound(typ209) + 1)
typ209(UBound(typ209)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadBinOp", typ209))
Typ = GetType(Loader).GetMethod("LoadBinOp", typ209).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 2)
EmitOpIL.MarkSequencePoint(doc9, 1107, 1, 1107, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
EmitOpIL.Emit(OpCodes.Ldnull)
Dim fa160 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru160 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont160 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, fa160)
EmitOpIL.Emit(OpCodes.Br, tru160)
EmitOpIL.MarkLabel(tru160)
EmitOpIL.MarkSequencePoint(doc9, 1108, 1, 1108, 100)
Dim typ210(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
ReDim Preserve typ210(UBound(typ210) + 1)
typ210(UBound(typ210)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ210))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ210).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc9, 1109, 1, 1109, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
EmitOpIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
EmitOpIL.MarkSequencePoint(doc9, 1110, 1, 1110, 100)
EmitOpIL.Emit(OpCodes.Br, cont160)
EmitOpIL.MarkLabel(fa160)
EmitOpIL.MarkSequencePoint(doc9, 1111, 1, 1111, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, OpCodeSuppFlg)
Typ = OpCodeSuppFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa161 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru161 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont161 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru161)
EmitOpIL.Emit(OpCodes.Br, fa161)
EmitOpIL.MarkLabel(tru161)
EmitOpIL.MarkSequencePoint(doc9, 1112, 1, 1112, 100)
Dim typ212(-1) As Type
EmitOpIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ212(UBound(typ212) + 1)
typ212(UBound(typ212)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitClt", typ212))
Typ = GetType(ILEmitter).GetMethod("EmitClt", typ212).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc9, 1113, 1, 1113, 100)
EmitOpIL.Emit(OpCodes.Br, cont161)
EmitOpIL.MarkLabel(fa161)
EmitOpIL.Emit(OpCodes.Br, cont161)
EmitOpIL.MarkLabel(cont161)
EmitOpIL.MarkSequencePoint(doc9, 1114, 1, 1114, 100)
EmitOpIL.Emit(OpCodes.Br, cont160)
EmitOpIL.MarkLabel(cont160)
EmitOpIL.MarkSequencePoint(doc9, 1115, 1, 1115, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc9, 1116, 1, 1116, 100)
EmitOpIL.Emit(OpCodes.Br, cont159)
EmitOpIL.MarkLabel(fa159)
EmitOpIL.Emit(OpCodes.Br, cont159)
EmitOpIL.MarkLabel(cont159)
EmitOpIL.MarkSequencePoint(doc9, 1118, 1, 1118, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(GeOp))
Dim typ213 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ213))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ213).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc9, 1119, 1, 1119, 100)
Dim typ214(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ214(UBound(typ214) + 1)
typ214(UBound(typ214)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ214))
Typ = Typ03.GetMethod("IsInstanceOfType", typ214).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc9, 1121, 1, 1121, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa162 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru162 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont162 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru162)
EmitOpIL.Emit(OpCodes.Br, fa162)
EmitOpIL.MarkLabel(tru162)
EmitOpIL.MarkSequencePoint(doc9, 1122, 1, 1122, 100)
Dim typ215(-1) As Type
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ215(UBound(typ215) + 1)
typ215(UBound(typ215)) = Typ
EmitOpIL.Emit(OpCodes.Ldstr, "op_GreaterThanOrEqual")
Typ = GetType(System.String)
ReDim Preserve typ215(UBound(typ215) + 1)
typ215(UBound(typ215)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ215(UBound(typ215) + 1)
typ215(UBound(typ215)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, RightOp)
Typ = RightOp.FieldType
ReDim Preserve typ215(UBound(typ215) + 1)
typ215(UBound(typ215)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadBinOp", typ215))
Typ = GetType(Loader).GetMethod("LoadBinOp", typ215).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 2)
EmitOpIL.MarkSequencePoint(doc9, 1123, 1, 1123, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
EmitOpIL.Emit(OpCodes.Ldnull)
Dim fa163 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru163 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont163 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, fa163)
EmitOpIL.Emit(OpCodes.Br, tru163)
EmitOpIL.MarkLabel(tru163)
EmitOpIL.MarkSequencePoint(doc9, 1124, 1, 1124, 100)
Dim typ216(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
ReDim Preserve typ216(UBound(typ216) + 1)
typ216(UBound(typ216)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ216))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ216).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc9, 1125, 1, 1125, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
EmitOpIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
EmitOpIL.MarkSequencePoint(doc9, 1126, 1, 1126, 100)
EmitOpIL.Emit(OpCodes.Br, cont163)
EmitOpIL.MarkLabel(fa163)
EmitOpIL.MarkSequencePoint(doc9, 1127, 1, 1127, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, OpCodeSuppFlg)
Typ = OpCodeSuppFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa164 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru164 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont164 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru164)
EmitOpIL.Emit(OpCodes.Br, fa164)
EmitOpIL.MarkLabel(tru164)
EmitOpIL.MarkSequencePoint(doc9, 1128, 1, 1128, 100)
Dim typ218(-1) As Type
EmitOpIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ218(UBound(typ218) + 1)
typ218(UBound(typ218)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCge", typ218))
Typ = GetType(ILEmitter).GetMethod("EmitCge", typ218).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc9, 1129, 1, 1129, 100)
EmitOpIL.Emit(OpCodes.Br, cont164)
EmitOpIL.MarkLabel(fa164)
EmitOpIL.Emit(OpCodes.Br, cont164)
EmitOpIL.MarkLabel(cont164)
EmitOpIL.MarkSequencePoint(doc9, 1130, 1, 1130, 100)
EmitOpIL.Emit(OpCodes.Br, cont163)
EmitOpIL.MarkLabel(cont163)
EmitOpIL.MarkSequencePoint(doc9, 1131, 1, 1131, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc9, 1132, 1, 1132, 100)
EmitOpIL.Emit(OpCodes.Br, cont162)
EmitOpIL.MarkLabel(fa162)
EmitOpIL.Emit(OpCodes.Br, cont162)
EmitOpIL.MarkLabel(cont162)
EmitOpIL.MarkSequencePoint(doc9, 1134, 1, 1134, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(LeOp))
Dim typ219 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ219))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ219).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc9, 1135, 1, 1135, 100)
Dim typ220(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ220(UBound(typ220) + 1)
typ220(UBound(typ220)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ220))
Typ = Typ03.GetMethod("IsInstanceOfType", typ220).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc9, 1137, 1, 1137, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa165 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru165 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont165 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru165)
EmitOpIL.Emit(OpCodes.Br, fa165)
EmitOpIL.MarkLabel(tru165)
EmitOpIL.MarkSequencePoint(doc9, 1138, 1, 1138, 100)
Dim typ221(-1) As Type
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ221(UBound(typ221) + 1)
typ221(UBound(typ221)) = Typ
EmitOpIL.Emit(OpCodes.Ldstr, "op_LessThanOrEqual")
Typ = GetType(System.String)
ReDim Preserve typ221(UBound(typ221) + 1)
typ221(UBound(typ221)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ221(UBound(typ221) + 1)
typ221(UBound(typ221)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, RightOp)
Typ = RightOp.FieldType
ReDim Preserve typ221(UBound(typ221) + 1)
typ221(UBound(typ221)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadBinOp", typ221))
Typ = GetType(Loader).GetMethod("LoadBinOp", typ221).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 2)
EmitOpIL.MarkSequencePoint(doc9, 1139, 1, 1139, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
EmitOpIL.Emit(OpCodes.Ldnull)
Dim fa166 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru166 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont166 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, fa166)
EmitOpIL.Emit(OpCodes.Br, tru166)
EmitOpIL.MarkLabel(tru166)
EmitOpIL.MarkSequencePoint(doc9, 1140, 1, 1140, 100)
Dim typ222(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
ReDim Preserve typ222(UBound(typ222) + 1)
typ222(UBound(typ222)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ222))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ222).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc9, 1141, 1, 1141, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
EmitOpIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
EmitOpIL.MarkSequencePoint(doc9, 1142, 1, 1142, 100)
EmitOpIL.Emit(OpCodes.Br, cont166)
EmitOpIL.MarkLabel(fa166)
EmitOpIL.MarkSequencePoint(doc9, 1143, 1, 1143, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, OpCodeSuppFlg)
Typ = OpCodeSuppFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa167 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru167 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont167 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru167)
EmitOpIL.Emit(OpCodes.Br, fa167)
EmitOpIL.MarkLabel(tru167)
EmitOpIL.MarkSequencePoint(doc9, 1144, 1, 1144, 100)
Dim typ224(-1) As Type
EmitOpIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ224(UBound(typ224) + 1)
typ224(UBound(typ224)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCle", typ224))
Typ = GetType(ILEmitter).GetMethod("EmitCle", typ224).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc9, 1145, 1, 1145, 100)
EmitOpIL.Emit(OpCodes.Br, cont167)
EmitOpIL.MarkLabel(fa167)
EmitOpIL.Emit(OpCodes.Br, cont167)
EmitOpIL.MarkLabel(cont167)
EmitOpIL.MarkSequencePoint(doc9, 1146, 1, 1146, 100)
EmitOpIL.Emit(OpCodes.Br, cont166)
EmitOpIL.MarkLabel(cont166)
EmitOpIL.MarkSequencePoint(doc9, 1147, 1, 1147, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc9, 1148, 1, 1148, 100)
EmitOpIL.Emit(OpCodes.Br, cont165)
EmitOpIL.MarkLabel(fa165)
EmitOpIL.Emit(OpCodes.Br, cont165)
EmitOpIL.MarkLabel(cont165)
EmitOpIL.MarkSequencePoint(doc9, 1150, 1, 1150, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(EqOp))
Dim typ225 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ225))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ225).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc9, 1151, 1, 1151, 100)
Dim typ226(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ226(UBound(typ226) + 1)
typ226(UBound(typ226)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ226))
Typ = Typ03.GetMethod("IsInstanceOfType", typ226).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc9, 1153, 1, 1153, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa168 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru168 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont168 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru168)
EmitOpIL.Emit(OpCodes.Br, fa168)
EmitOpIL.MarkLabel(tru168)
EmitOpIL.MarkSequencePoint(doc9, 1154, 1, 1154, 100)
Dim typ227(-1) As Type
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ227(UBound(typ227) + 1)
typ227(UBound(typ227)) = Typ
EmitOpIL.Emit(OpCodes.Ldstr, "op_Equality")
Typ = GetType(System.String)
ReDim Preserve typ227(UBound(typ227) + 1)
typ227(UBound(typ227)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ227(UBound(typ227) + 1)
typ227(UBound(typ227)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, RightOp)
Typ = RightOp.FieldType
ReDim Preserve typ227(UBound(typ227) + 1)
typ227(UBound(typ227)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadBinOp", typ227))
Typ = GetType(Loader).GetMethod("LoadBinOp", typ227).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 2)
EmitOpIL.MarkSequencePoint(doc9, 1155, 1, 1155, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
EmitOpIL.Emit(OpCodes.Ldnull)
Dim fa169 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru169 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont169 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, fa169)
EmitOpIL.Emit(OpCodes.Br, tru169)
EmitOpIL.MarkLabel(tru169)
EmitOpIL.MarkSequencePoint(doc9, 1156, 1, 1156, 100)
Dim typ228(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
ReDim Preserve typ228(UBound(typ228) + 1)
typ228(UBound(typ228)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ228))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ228).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc9, 1157, 1, 1157, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
EmitOpIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
EmitOpIL.MarkSequencePoint(doc9, 1158, 1, 1158, 100)
EmitOpIL.Emit(OpCodes.Br, cont169)
EmitOpIL.MarkLabel(fa169)
EmitOpIL.MarkSequencePoint(doc9, 1159, 1, 1159, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, StringFlg)
Typ = StringFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa170 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru170 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont170 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru170)
EmitOpIL.Emit(OpCodes.Br, fa170)
EmitOpIL.MarkLabel(tru170)
EmitOpIL.MarkSequencePoint(doc9, 1160, 1, 1160, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitStrCeq", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitStrCeq", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc9, 1161, 1, 1161, 100)
EmitOpIL.Emit(OpCodes.Br, cont170)
EmitOpIL.MarkLabel(fa170)
EmitOpIL.MarkSequencePoint(doc9, 1162, 1, 1162, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCeq", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitCeq", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc9, 1163, 1, 1163, 100)
EmitOpIL.Emit(OpCodes.Br, cont170)
EmitOpIL.MarkLabel(cont170)
EmitOpIL.MarkSequencePoint(doc9, 1164, 1, 1164, 100)
EmitOpIL.Emit(OpCodes.Br, cont169)
EmitOpIL.MarkLabel(cont169)
EmitOpIL.MarkSequencePoint(doc9, 1165, 1, 1165, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc9, 1166, 1, 1166, 100)
EmitOpIL.Emit(OpCodes.Br, cont168)
EmitOpIL.MarkLabel(fa168)
EmitOpIL.Emit(OpCodes.Br, cont168)
EmitOpIL.MarkLabel(cont168)
EmitOpIL.MarkSequencePoint(doc9, 1168, 1, 1168, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(NeqOp))
Dim typ230 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ230))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ230).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc9, 1169, 1, 1169, 100)
Dim typ231(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ231(UBound(typ231) + 1)
typ231(UBound(typ231)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ231))
Typ = Typ03.GetMethod("IsInstanceOfType", typ231).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc9, 1171, 1, 1171, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa171 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru171 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont171 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru171)
EmitOpIL.Emit(OpCodes.Br, fa171)
EmitOpIL.MarkLabel(tru171)
EmitOpIL.MarkSequencePoint(doc9, 1172, 1, 1172, 100)
Dim typ232(-1) As Type
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ232(UBound(typ232) + 1)
typ232(UBound(typ232)) = Typ
EmitOpIL.Emit(OpCodes.Ldstr, "op_Inequality")
Typ = GetType(System.String)
ReDim Preserve typ232(UBound(typ232) + 1)
typ232(UBound(typ232)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ232(UBound(typ232) + 1)
typ232(UBound(typ232)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, RightOp)
Typ = RightOp.FieldType
ReDim Preserve typ232(UBound(typ232) + 1)
typ232(UBound(typ232)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadBinOp", typ232))
Typ = GetType(Loader).GetMethod("LoadBinOp", typ232).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 2)
EmitOpIL.MarkSequencePoint(doc9, 1173, 1, 1173, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
EmitOpIL.Emit(OpCodes.Ldnull)
Dim fa172 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru172 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont172 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, fa172)
EmitOpIL.Emit(OpCodes.Br, tru172)
EmitOpIL.MarkLabel(tru172)
EmitOpIL.MarkSequencePoint(doc9, 1174, 1, 1174, 100)
Dim typ233(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
ReDim Preserve typ233(UBound(typ233) + 1)
typ233(UBound(typ233)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ233))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ233).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc9, 1175, 1, 1175, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
EmitOpIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
EmitOpIL.MarkSequencePoint(doc9, 1176, 1, 1176, 100)
EmitOpIL.Emit(OpCodes.Br, cont172)
EmitOpIL.MarkLabel(fa172)
EmitOpIL.MarkSequencePoint(doc9, 1177, 1, 1177, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, StringFlg)
Typ = StringFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa173 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru173 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont173 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru173)
EmitOpIL.Emit(OpCodes.Br, fa173)
EmitOpIL.MarkLabel(tru173)
EmitOpIL.MarkSequencePoint(doc9, 1178, 1, 1178, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitStrCneq", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitStrCneq", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc9, 1179, 1, 1179, 100)
EmitOpIL.Emit(OpCodes.Br, cont173)
EmitOpIL.MarkLabel(fa173)
EmitOpIL.MarkSequencePoint(doc9, 1180, 1, 1180, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCneq", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitCneq", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc9, 1181, 1, 1181, 100)
EmitOpIL.Emit(OpCodes.Br, cont173)
EmitOpIL.MarkLabel(cont173)
EmitOpIL.MarkSequencePoint(doc9, 1182, 1, 1182, 100)
EmitOpIL.Emit(OpCodes.Br, cont172)
EmitOpIL.MarkLabel(cont172)
EmitOpIL.MarkSequencePoint(doc9, 1183, 1, 1183, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc9, 1184, 1, 1184, 100)
EmitOpIL.Emit(OpCodes.Br, cont171)
EmitOpIL.MarkLabel(fa171)
EmitOpIL.Emit(OpCodes.Br, cont171)
EmitOpIL.MarkLabel(cont171)
EmitOpIL.MarkSequencePoint(doc9, 1186, 1, 1186, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(LikeOp))
Dim typ235 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ235))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ235).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc9, 1187, 1, 1187, 100)
Dim typ236(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ236(UBound(typ236) + 1)
typ236(UBound(typ236)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ236))
Typ = Typ03.GetMethod("IsInstanceOfType", typ236).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc9, 1189, 1, 1189, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa174 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru174 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont174 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru174)
EmitOpIL.Emit(OpCodes.Br, fa174)
EmitOpIL.MarkLabel(tru174)
EmitOpIL.MarkSequencePoint(doc9, 1190, 1, 1190, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, StringFlg)
Typ = StringFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa175 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru175 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont175 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru175)
EmitOpIL.Emit(OpCodes.Br, fa175)
EmitOpIL.MarkLabel(tru175)
EmitOpIL.MarkSequencePoint(doc9, 1191, 1, 1191, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLike", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitLike", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc9, 1192, 1, 1192, 100)
EmitOpIL.Emit(OpCodes.Br, cont175)
EmitOpIL.MarkLabel(fa175)
EmitOpIL.Emit(OpCodes.Br, cont175)
EmitOpIL.MarkLabel(cont175)
EmitOpIL.MarkSequencePoint(doc9, 1193, 1, 1193, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc9, 1194, 1, 1194, 100)
EmitOpIL.Emit(OpCodes.Br, cont174)
EmitOpIL.MarkLabel(fa174)
EmitOpIL.Emit(OpCodes.Br, cont174)
EmitOpIL.MarkLabel(cont174)
EmitOpIL.MarkSequencePoint(doc9, 1196, 1, 1196, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(NLikeOp))
Dim typ237 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ237))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ237).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc9, 1197, 1, 1197, 100)
Dim typ238(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ238(UBound(typ238) + 1)
typ238(UBound(typ238)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ238))
Typ = Typ03.GetMethod("IsInstanceOfType", typ238).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc9, 1199, 1, 1199, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa176 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru176 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont176 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru176)
EmitOpIL.Emit(OpCodes.Br, fa176)
EmitOpIL.MarkLabel(tru176)
EmitOpIL.MarkSequencePoint(doc9, 1201, 1, 1201, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, StringFlg)
Typ = StringFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa177 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru177 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont177 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru177)
EmitOpIL.Emit(OpCodes.Br, fa177)
EmitOpIL.MarkLabel(tru177)
EmitOpIL.MarkSequencePoint(doc9, 1202, 1, 1202, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitNLike", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitNLike", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc9, 1203, 1, 1203, 100)
EmitOpIL.Emit(OpCodes.Br, cont177)
EmitOpIL.MarkLabel(fa177)
EmitOpIL.Emit(OpCodes.Br, cont177)
EmitOpIL.MarkLabel(cont177)
EmitOpIL.MarkSequencePoint(doc9, 1204, 1, 1204, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc9, 1205, 1, 1205, 100)
EmitOpIL.Emit(OpCodes.Br, cont176)
EmitOpIL.MarkLabel(fa176)
EmitOpIL.Emit(OpCodes.Br, cont176)
EmitOpIL.MarkLabel(cont176)
EmitOpIL.MarkSequencePoint(doc9, 1207, 1, 1207, 100)
EmitOpIL.MarkLabel(label22)
EmitOpIL.MarkSequencePoint(doc9, 1208, 1, 1208, 100)
EmitOpIL.Emit(OpCodes.Ret)
Dim typ239(-1) As Type
ReDim Preserve typ239(UBound(typ239) + 1)
typ239(UBound(typ239)) = GetType(System.Int32)
ReDim Preserve typ239(UBound(typ239) + 1)
typ239(UBound(typ239)) = GetType(System.Boolean)
Dim EmitLocLd As MethodBuilder = Helpers.DefineMethod("EmitLocLd", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ239)
Dim EmitLocLdIL As ILGenerator = EmitLocLd.GetILGenerator()
Dim EmitLocLdparam01 As ParameterBuilder = EmitLocLd.DefineParameter(1, ParameterAttributes.None, "ind")
Dim EmitLocLdparam02 As ParameterBuilder = EmitLocLd.DefineParameter(2, ParameterAttributes.None, "locarg")
EmitLocLdIL.MarkSequencePoint(doc9, 1211, 1, 1211, 100)
EmitLocLdIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AddrFlg"))
Typ = GetType(AsmFactory).GetField("AddrFlg").FieldType
EmitLocLdIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa178 As System.Reflection.Emit.Label = EmitLocLdIL.DefineLabel()
Dim tru178 As System.Reflection.Emit.Label = EmitLocLdIL.DefineLabel()
Dim cont178 As System.Reflection.Emit.Label = EmitLocLdIL.DefineLabel()
EmitLocLdIL.Emit(OpCodes.Beq, tru178)
EmitLocLdIL.Emit(OpCodes.Br, fa178)
EmitLocLdIL.MarkLabel(tru178)
EmitLocLdIL.MarkSequencePoint(doc9, 1212, 1, 1212, 100)
EmitLocLdIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
EmitLocLdIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa179 As System.Reflection.Emit.Label = EmitLocLdIL.DefineLabel()
Dim tru179 As System.Reflection.Emit.Label = EmitLocLdIL.DefineLabel()
Dim cont179 As System.Reflection.Emit.Label = EmitLocLdIL.DefineLabel()
EmitLocLdIL.Emit(OpCodes.Beq, tru179)
EmitLocLdIL.Emit(OpCodes.Br, fa179)
EmitLocLdIL.MarkLabel(tru179)
EmitLocLdIL.MarkSequencePoint(doc9, 1213, 1, 1213, 100)
Dim typ240(-1) As Type
EmitLocLdIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
ReDim Preserve typ240(UBound(typ240) + 1)
typ240(UBound(typ240)) = Typ
EmitLocLdIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdloc", typ240))
Typ = GetType(ILEmitter).GetMethod("EmitLdloc", typ240).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLocLdIL.Emit(OpCodes.Pop)
End If
EmitLocLdIL.MarkSequencePoint(doc9, 1214, 1, 1214, 100)
EmitLocLdIL.Emit(OpCodes.Br, cont179)
EmitLocLdIL.MarkLabel(fa179)
EmitLocLdIL.MarkSequencePoint(doc9, 1215, 1, 1215, 100)
Dim typ241(-1) As Type
EmitLocLdIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
ReDim Preserve typ241(UBound(typ241) + 1)
typ241(UBound(typ241)) = Typ
EmitLocLdIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdarg", typ241))
Typ = GetType(ILEmitter).GetMethod("EmitLdarg", typ241).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLocLdIL.Emit(OpCodes.Pop)
End If
EmitLocLdIL.MarkSequencePoint(doc9, 1216, 1, 1216, 100)
EmitLocLdIL.Emit(OpCodes.Br, cont179)
EmitLocLdIL.MarkLabel(cont179)
EmitLocLdIL.MarkSequencePoint(doc9, 1217, 1, 1217, 100)
EmitLocLdIL.Emit(OpCodes.Br, cont178)
EmitLocLdIL.MarkLabel(fa178)
EmitLocLdIL.MarkSequencePoint(doc9, 1218, 1, 1218, 100)
Dim locbldr200 As LocalBuilder = EmitLocLdIL.DeclareLocal(GetType(System.Type))
locbldr200.SetLocalSymInfo("typ")
EmitLocLdIL.Emit(OpCodes.Ldtoken, GetType(ValueType))
Dim typ242 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitLocLdIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ242))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ242).ReturnType
EmitLocLdIL.Emit(OpCodes.Stloc, 0)
EmitLocLdIL.MarkSequencePoint(doc9, 1219, 1, 1219, 100)
Dim locbldr201 As LocalBuilder = EmitLocLdIL.DeclareLocal(GetType(System.Boolean))
locbldr201.SetLocalSymInfo("b")
Dim typ243(-1) As Type
EmitLocLdIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitLocLdIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type04"))
Typ = GetType(AsmFactory).GetField("Type04").FieldType
ReDim Preserve typ243(UBound(typ243) + 1)
typ243(UBound(typ243)) = Typ
EmitLocLdIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsAssignableFrom", typ243))
Typ = Typ03.GetMethod("IsAssignableFrom", typ243).ReturnType
EmitLocLdIL.Emit(OpCodes.Stloc, 1)
EmitLocLdIL.MarkSequencePoint(doc9, 1220, 1, 1220, 100)
EmitLocLdIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitLocLdIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa180 As System.Reflection.Emit.Label = EmitLocLdIL.DefineLabel()
Dim tru180 As System.Reflection.Emit.Label = EmitLocLdIL.DefineLabel()
Dim cont180 As System.Reflection.Emit.Label = EmitLocLdIL.DefineLabel()
EmitLocLdIL.Emit(OpCodes.Beq, tru180)
EmitLocLdIL.Emit(OpCodes.Br, fa180)
EmitLocLdIL.MarkLabel(tru180)
EmitLocLdIL.MarkSequencePoint(doc9, 1221, 1, 1221, 100)
EmitLocLdIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
EmitLocLdIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa181 As System.Reflection.Emit.Label = EmitLocLdIL.DefineLabel()
Dim tru181 As System.Reflection.Emit.Label = EmitLocLdIL.DefineLabel()
Dim cont181 As System.Reflection.Emit.Label = EmitLocLdIL.DefineLabel()
EmitLocLdIL.Emit(OpCodes.Beq, tru181)
EmitLocLdIL.Emit(OpCodes.Br, fa181)
EmitLocLdIL.MarkLabel(tru181)
EmitLocLdIL.MarkSequencePoint(doc9, 1222, 1, 1222, 100)
Dim typ244(-1) As Type
EmitLocLdIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
ReDim Preserve typ244(UBound(typ244) + 1)
typ244(UBound(typ244)) = Typ
EmitLocLdIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdloc", typ244))
Typ = GetType(ILEmitter).GetMethod("EmitLdloc", typ244).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLocLdIL.Emit(OpCodes.Pop)
End If
EmitLocLdIL.MarkSequencePoint(doc9, 1223, 1, 1223, 100)
EmitLocLdIL.Emit(OpCodes.Br, cont181)
EmitLocLdIL.MarkLabel(fa181)
EmitLocLdIL.MarkSequencePoint(doc9, 1224, 1, 1224, 100)
Dim typ245(-1) As Type
EmitLocLdIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
ReDim Preserve typ245(UBound(typ245) + 1)
typ245(UBound(typ245)) = Typ
EmitLocLdIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdarg", typ245))
Typ = GetType(ILEmitter).GetMethod("EmitLdarg", typ245).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLocLdIL.Emit(OpCodes.Pop)
End If
EmitLocLdIL.MarkSequencePoint(doc9, 1225, 1, 1225, 100)
EmitLocLdIL.Emit(OpCodes.Br, cont181)
EmitLocLdIL.MarkLabel(cont181)
EmitLocLdIL.MarkSequencePoint(doc9, 1226, 1, 1226, 100)
EmitLocLdIL.Emit(OpCodes.Br, cont180)
EmitLocLdIL.MarkLabel(fa180)
EmitLocLdIL.MarkSequencePoint(doc9, 1227, 1, 1227, 100)
EmitLocLdIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
EmitLocLdIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa182 As System.Reflection.Emit.Label = EmitLocLdIL.DefineLabel()
Dim tru182 As System.Reflection.Emit.Label = EmitLocLdIL.DefineLabel()
Dim cont182 As System.Reflection.Emit.Label = EmitLocLdIL.DefineLabel()
EmitLocLdIL.Emit(OpCodes.Beq, tru182)
EmitLocLdIL.Emit(OpCodes.Br, fa182)
EmitLocLdIL.MarkLabel(tru182)
EmitLocLdIL.MarkSequencePoint(doc9, 1228, 1, 1228, 100)
Dim typ246(-1) As Type
EmitLocLdIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
ReDim Preserve typ246(UBound(typ246) + 1)
typ246(UBound(typ246)) = Typ
EmitLocLdIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdloca", typ246))
Typ = GetType(ILEmitter).GetMethod("EmitLdloca", typ246).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLocLdIL.Emit(OpCodes.Pop)
End If
EmitLocLdIL.MarkSequencePoint(doc9, 1229, 1, 1229, 100)
EmitLocLdIL.Emit(OpCodes.Br, cont182)
EmitLocLdIL.MarkLabel(fa182)
EmitLocLdIL.MarkSequencePoint(doc9, 1230, 1, 1230, 100)
Dim typ247(-1) As Type
EmitLocLdIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
ReDim Preserve typ247(UBound(typ247) + 1)
typ247(UBound(typ247)) = Typ
EmitLocLdIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdarga", typ247))
Typ = GetType(ILEmitter).GetMethod("EmitLdarga", typ247).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLocLdIL.Emit(OpCodes.Pop)
End If
EmitLocLdIL.MarkSequencePoint(doc9, 1231, 1, 1231, 100)
EmitLocLdIL.Emit(OpCodes.Br, cont182)
EmitLocLdIL.MarkLabel(cont182)
EmitLocLdIL.MarkSequencePoint(doc9, 1232, 1, 1232, 100)
EmitLocLdIL.Emit(OpCodes.Br, cont180)
EmitLocLdIL.MarkLabel(cont180)
EmitLocLdIL.MarkSequencePoint(doc9, 1233, 1, 1233, 100)
EmitLocLdIL.Emit(OpCodes.Br, cont178)
EmitLocLdIL.MarkLabel(cont178)
EmitLocLdIL.MarkSequencePoint(doc9, 1234, 1, 1234, 100)
EmitLocLdIL.Emit(OpCodes.Ret)
Dim typ248(-1) As Type
ReDim Preserve typ248(UBound(typ248) + 1)
typ248(UBound(typ248)) = GetType(System.Int32)
ReDim Preserve typ248(UBound(typ248) + 1)
typ248(UBound(typ248)) = GetType(System.Boolean)
Dim EmitLocSt As MethodBuilder = Helpers.DefineMethod("EmitLocSt", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ248)
Dim EmitLocStIL As ILGenerator = EmitLocSt.GetILGenerator()
Dim EmitLocStparam01 As ParameterBuilder = EmitLocSt.DefineParameter(1, ParameterAttributes.None, "ind")
Dim EmitLocStparam02 As ParameterBuilder = EmitLocSt.DefineParameter(2, ParameterAttributes.None, "locarg")
EmitLocStIL.MarkSequencePoint(doc9, 1237, 1, 1237, 100)
EmitLocStIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
EmitLocStIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa183 As System.Reflection.Emit.Label = EmitLocStIL.DefineLabel()
Dim tru183 As System.Reflection.Emit.Label = EmitLocStIL.DefineLabel()
Dim cont183 As System.Reflection.Emit.Label = EmitLocStIL.DefineLabel()
EmitLocStIL.Emit(OpCodes.Beq, tru183)
EmitLocStIL.Emit(OpCodes.Br, fa183)
EmitLocStIL.MarkLabel(tru183)
EmitLocStIL.MarkSequencePoint(doc9, 1238, 1, 1238, 100)
Dim typ249(-1) As Type
EmitLocStIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
ReDim Preserve typ249(UBound(typ249) + 1)
typ249(UBound(typ249)) = Typ
EmitLocStIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitStloc", typ249))
Typ = GetType(ILEmitter).GetMethod("EmitStloc", typ249).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLocStIL.Emit(OpCodes.Pop)
End If
EmitLocStIL.MarkSequencePoint(doc9, 1239, 1, 1239, 100)
EmitLocStIL.Emit(OpCodes.Br, cont183)
EmitLocStIL.MarkLabel(fa183)
EmitLocStIL.MarkSequencePoint(doc9, 1240, 1, 1240, 100)
Dim typ250(-1) As Type
EmitLocStIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
ReDim Preserve typ250(UBound(typ250) + 1)
typ250(UBound(typ250)) = Typ
EmitLocStIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitStarg", typ250))
Typ = GetType(ILEmitter).GetMethod("EmitStarg", typ250).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLocStIL.Emit(OpCodes.Pop)
End If
EmitLocStIL.MarkSequencePoint(doc9, 1241, 1, 1241, 100)
EmitLocStIL.Emit(OpCodes.Br, cont183)
EmitLocStIL.MarkLabel(cont183)
EmitLocStIL.MarkSequencePoint(doc9, 1242, 1, 1242, 100)
EmitLocStIL.Emit(OpCodes.Ret)
Dim typ251(-1) As Type
ReDim Preserve typ251(UBound(typ251) + 1)
typ251(UBound(typ251)) = GetType(System.Type)
ReDim Preserve typ251(UBound(typ251) + 1)
typ251(UBound(typ251)) = GetType(System.Type)
Dim EmitConv As MethodBuilder = Helpers.DefineMethod("EmitConv", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ251)
Dim EmitConvIL As ILGenerator = EmitConv.GetILGenerator()
Dim EmitConvparam01 As ParameterBuilder = EmitConv.DefineParameter(1, ParameterAttributes.None, "source")
Dim EmitConvparam02 As ParameterBuilder = EmitConv.DefineParameter(2, ParameterAttributes.None, "sink")
EmitConvIL.MarkSequencePoint(doc9, 1246, 1, 1246, 100)
Dim locbldr202 As LocalBuilder = EmitConvIL.DeclareLocal(GetType(System.Type))
locbldr202.SetLocalSymInfo("typ")
EmitConvIL.MarkSequencePoint(doc9, 1247, 1, 1247, 100)
Dim locbldr203 As LocalBuilder = EmitConvIL.DeclareLocal(GetType(System.Type))
locbldr203.SetLocalSymInfo("convc")
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.Convert))
Dim typ252 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ252))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ252).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 1)
EmitConvIL.MarkSequencePoint(doc9, 1248, 1, 1248, 100)
Dim locbldr204 As LocalBuilder = EmitConvIL.DeclareLocal(GetType(System.Boolean))
locbldr204.SetLocalSymInfo("b")
EmitConvIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc9, 1249, 1, 1249, 100)
Dim locbldr205 As LocalBuilder = EmitConvIL.DeclareLocal(GetType(System.Boolean))
locbldr205.SetLocalSymInfo("b2")
EmitConvIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Stloc, 3)
EmitConvIL.MarkSequencePoint(doc9, 1250, 1, 1250, 100)
Dim locbldr206 As LocalBuilder = EmitConvIL.DeclareLocal(GetType(MethodInfo))
locbldr206.SetLocalSymInfo("m1")
EmitConvIL.MarkSequencePoint(doc9, 1251, 1, 1251, 100)
Dim locbldr207 As LocalBuilder = EmitConvIL.DeclareLocal(GetType(System.Type).MakeArrayType())
locbldr207.SetLocalSymInfo("arr")
EmitConvIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
EmitConvIL.Emit(OpCodes.Conv_U)
EmitConvIL.Emit(OpCodes.Newarr, GetType(System.Type))
EmitConvIL.Emit(OpCodes.Stloc, 5)
EmitConvIL.MarkSequencePoint(doc9, 1253, 1, 1253, 100)
Dim label23 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.MarkSequencePoint(doc9, 1256, 1, 1256, 100)
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsPrimitive", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsPrimitive", Type.EmptyTypes).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc9, 1257, 1, 1257, 100)
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsPrimitive", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsPrimitive", Type.EmptyTypes).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 3)
EmitConvIL.MarkSequencePoint(doc9, 1258, 1, 1258, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.And)
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc9, 1262, 1, 1262, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa184 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru184 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont184 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru184)
EmitConvIL.Emit(OpCodes.Br, fa184)
EmitConvIL.MarkLabel(tru184)
EmitConvIL.MarkSequencePoint(doc9, 1264, 1, 1264, 100)
Dim typ255(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ255(UBound(typ255) + 1)
typ255(UBound(typ255)) = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "op_Implicit")
Typ = GetType(System.String)
ReDim Preserve typ255(UBound(typ255) + 1)
typ255(UBound(typ255)) = Typ
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
ReDim Preserve typ255(UBound(typ255) + 1)
typ255(UBound(typ255)) = Typ
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ255(UBound(typ255) + 1)
typ255(UBound(typ255)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadConvOp", typ255))
Typ = GetType(Loader).GetMethod("LoadConvOp", typ255).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc9, 1265, 1, 1265, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
EmitConvIL.Emit(OpCodes.Ldnull)
Dim fa185 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru185 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont185 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, fa185)
EmitConvIL.Emit(OpCodes.Br, tru185)
EmitConvIL.MarkLabel(tru185)
EmitConvIL.MarkSequencePoint(doc9, 1266, 1, 1266, 100)
Dim typ256(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ256(UBound(typ256) + 1)
typ256(UBound(typ256)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ256))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ256).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc9, 1267, 1, 1267, 100)
EmitConvIL.Emit(OpCodes.Br, label23)
EmitConvIL.MarkSequencePoint(doc9, 1268, 1, 1268, 100)
EmitConvIL.Emit(OpCodes.Br, cont185)
EmitConvIL.MarkLabel(fa185)
EmitConvIL.Emit(OpCodes.Br, cont185)
EmitConvIL.MarkLabel(cont185)
EmitConvIL.MarkSequencePoint(doc9, 1270, 1, 1270, 100)
Dim typ257(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ257(UBound(typ257) + 1)
typ257(UBound(typ257)) = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "op_Explicit")
Typ = GetType(System.String)
ReDim Preserve typ257(UBound(typ257) + 1)
typ257(UBound(typ257)) = Typ
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
ReDim Preserve typ257(UBound(typ257) + 1)
typ257(UBound(typ257)) = Typ
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ257(UBound(typ257) + 1)
typ257(UBound(typ257)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadConvOp", typ257))
Typ = GetType(Loader).GetMethod("LoadConvOp", typ257).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc9, 1271, 1, 1271, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
EmitConvIL.Emit(OpCodes.Ldnull)
Dim fa186 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru186 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont186 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, fa186)
EmitConvIL.Emit(OpCodes.Br, tru186)
EmitConvIL.MarkLabel(tru186)
EmitConvIL.MarkSequencePoint(doc9, 1272, 1, 1272, 100)
Dim typ258(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ258(UBound(typ258) + 1)
typ258(UBound(typ258)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ258))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ258).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc9, 1273, 1, 1273, 100)
EmitConvIL.Emit(OpCodes.Br, label23)
EmitConvIL.MarkSequencePoint(doc9, 1274, 1, 1274, 100)
EmitConvIL.Emit(OpCodes.Br, cont186)
EmitConvIL.MarkLabel(fa186)
EmitConvIL.Emit(OpCodes.Br, cont186)
EmitConvIL.MarkLabel(cont186)
EmitConvIL.MarkSequencePoint(doc9, 1276, 1, 1276, 100)
Dim typ259(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
ReDim Preserve typ259(UBound(typ259) + 1)
typ259(UBound(typ259)) = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "op_Implicit")
Typ = GetType(System.String)
ReDim Preserve typ259(UBound(typ259) + 1)
typ259(UBound(typ259)) = Typ
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
ReDim Preserve typ259(UBound(typ259) + 1)
typ259(UBound(typ259)) = Typ
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ259(UBound(typ259) + 1)
typ259(UBound(typ259)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadConvOp", typ259))
Typ = GetType(Loader).GetMethod("LoadConvOp", typ259).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc9, 1277, 1, 1277, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
EmitConvIL.Emit(OpCodes.Ldnull)
Dim fa187 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru187 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont187 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, fa187)
EmitConvIL.Emit(OpCodes.Br, tru187)
EmitConvIL.MarkLabel(tru187)
EmitConvIL.MarkSequencePoint(doc9, 1278, 1, 1278, 100)
Dim typ260(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ260(UBound(typ260) + 1)
typ260(UBound(typ260)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ260))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ260).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc9, 1279, 1, 1279, 100)
EmitConvIL.Emit(OpCodes.Br, label23)
EmitConvIL.MarkSequencePoint(doc9, 1280, 1, 1280, 100)
EmitConvIL.Emit(OpCodes.Br, cont187)
EmitConvIL.MarkLabel(fa187)
EmitConvIL.Emit(OpCodes.Br, cont187)
EmitConvIL.MarkLabel(cont187)
EmitConvIL.MarkSequencePoint(doc9, 1282, 1, 1282, 100)
Dim typ261(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
ReDim Preserve typ261(UBound(typ261) + 1)
typ261(UBound(typ261)) = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "op_Explicit")
Typ = GetType(System.String)
ReDim Preserve typ261(UBound(typ261) + 1)
typ261(UBound(typ261)) = Typ
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
ReDim Preserve typ261(UBound(typ261) + 1)
typ261(UBound(typ261)) = Typ
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ261(UBound(typ261) + 1)
typ261(UBound(typ261)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadConvOp", typ261))
Typ = GetType(Loader).GetMethod("LoadConvOp", typ261).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc9, 1283, 1, 1283, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
EmitConvIL.Emit(OpCodes.Ldnull)
Dim fa188 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru188 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont188 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, fa188)
EmitConvIL.Emit(OpCodes.Br, tru188)
EmitConvIL.MarkLabel(tru188)
EmitConvIL.MarkSequencePoint(doc9, 1284, 1, 1284, 100)
Dim typ262(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ262(UBound(typ262) + 1)
typ262(UBound(typ262)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ262))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ262).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc9, 1285, 1, 1285, 100)
EmitConvIL.Emit(OpCodes.Br, label23)
EmitConvIL.MarkSequencePoint(doc9, 1286, 1, 1286, 100)
EmitConvIL.Emit(OpCodes.Br, cont188)
EmitConvIL.MarkLabel(fa188)
EmitConvIL.Emit(OpCodes.Br, cont188)
EmitConvIL.MarkLabel(cont188)
EmitConvIL.MarkSequencePoint(doc9, 1288, 1, 1288, 100)
EmitConvIL.Emit(OpCodes.Br, cont184)
EmitConvIL.MarkLabel(fa184)
EmitConvIL.Emit(OpCodes.Br, cont184)
EmitConvIL.MarkLabel(cont184)
EmitConvIL.MarkSequencePoint(doc9, 1292, 1, 1292, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(IntPtr))
Dim typ263 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ263))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ263).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc9, 1293, 1, 1293, 100)
Dim typ264(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
ReDim Preserve typ264(UBound(typ264) + 1)
typ264(UBound(typ264)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ264))
Typ = Typ03.GetMethod("Equals", typ264).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc9, 1295, 1, 1295, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa189 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru189 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont189 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru189)
EmitConvIL.Emit(OpCodes.Br, fa189)
EmitConvIL.MarkLabel(tru189)
EmitConvIL.MarkSequencePoint(doc9, 1296, 1, 1296, 100)
Dim typ265(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "ToInt64")
Typ = GetType(System.String)
ReDim Preserve typ265(UBound(typ265) + 1)
typ265(UBound(typ265)) = Typ
EmitConvIL.Emit(OpCodes.Ldsfld, GetType(System.Type).GetField("EmptyTypes"))
Typ = GetType(System.Type).GetField("EmptyTypes").FieldType
ReDim Preserve typ265(UBound(typ265) + 1)
typ265(UBound(typ265)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetMethod", typ265))
Typ = Typ03.GetMethod("GetMethod", typ265).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc9, 1297, 1, 1297, 100)
Dim typ266(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ266(UBound(typ266) + 1)
typ266(UBound(typ266)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCallvirt", typ266))
Typ = GetType(ILEmitter).GetMethod("EmitCallvirt", typ266).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc9, 1298, 1, 1298, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.Int64))
Dim typ267 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ267))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ267).ReturnType
EmitConvIL.Emit(OpCodes.Starg, 0)
EmitConvIL.MarkSequencePoint(doc9, 1299, 1, 1299, 100)
EmitConvIL.Emit(OpCodes.Br, cont189)
EmitConvIL.MarkLabel(fa189)
EmitConvIL.Emit(OpCodes.Br, cont189)
EmitConvIL.MarkLabel(cont189)
EmitConvIL.MarkSequencePoint(doc9, 1301, 1, 1301, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.String))
Dim typ268 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ268))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ268).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc9, 1302, 1, 1302, 100)
Dim typ269(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
ReDim Preserve typ269(UBound(typ269) + 1)
typ269(UBound(typ269)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ269))
Typ = Typ03.GetMethod("Equals", typ269).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc9, 1304, 1, 1304, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa190 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru190 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont190 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru190)
EmitConvIL.Emit(OpCodes.Br, fa190)
EmitConvIL.MarkLabel(tru190)
EmitConvIL.MarkSequencePoint(doc9, 1305, 1, 1305, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
EmitConvIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EmitConvIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
EmitConvIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
EmitConvIL.MarkSequencePoint(doc9, 1306, 1, 1306, 100)
Dim typ270(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "ToString")
Typ = GetType(System.String)
ReDim Preserve typ270(UBound(typ270) + 1)
typ270(UBound(typ270)) = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ270(UBound(typ270) + 1)
typ270(UBound(typ270)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetMethod", typ270))
Typ = Typ03.GetMethod("GetMethod", typ270).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc9, 1307, 1, 1307, 100)
Dim typ271(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ271(UBound(typ271) + 1)
typ271(UBound(typ271)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ271))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ271).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc9, 1308, 1, 1308, 100)
EmitConvIL.Emit(OpCodes.Br, label23)
EmitConvIL.MarkSequencePoint(doc9, 1309, 1, 1309, 100)
EmitConvIL.Emit(OpCodes.Br, cont190)
EmitConvIL.MarkLabel(fa190)
EmitConvIL.Emit(OpCodes.Br, cont190)
EmitConvIL.MarkLabel(cont190)
EmitConvIL.MarkSequencePoint(doc9, 1311, 1, 1311, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.Char))
Dim typ272 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ272))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ272).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc9, 1312, 1, 1312, 100)
Dim typ273(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
ReDim Preserve typ273(UBound(typ273) + 1)
typ273(UBound(typ273)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ273))
Typ = Typ03.GetMethod("Equals", typ273).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc9, 1314, 1, 1314, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa191 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru191 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont191 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru191)
EmitConvIL.Emit(OpCodes.Br, fa191)
EmitConvIL.MarkLabel(tru191)
EmitConvIL.MarkSequencePoint(doc9, 1315, 1, 1315, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
EmitConvIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EmitConvIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
EmitConvIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
EmitConvIL.MarkSequencePoint(doc9, 1316, 1, 1316, 100)
Dim typ274(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "ToChar")
Typ = GetType(System.String)
ReDim Preserve typ274(UBound(typ274) + 1)
typ274(UBound(typ274)) = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ274(UBound(typ274) + 1)
typ274(UBound(typ274)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetMethod", typ274))
Typ = Typ03.GetMethod("GetMethod", typ274).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc9, 1317, 1, 1317, 100)
Dim typ275(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ275(UBound(typ275) + 1)
typ275(UBound(typ275)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ275))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ275).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc9, 1318, 1, 1318, 100)
EmitConvIL.Emit(OpCodes.Br, label23)
EmitConvIL.MarkSequencePoint(doc9, 1319, 1, 1319, 100)
EmitConvIL.Emit(OpCodes.Br, cont191)
EmitConvIL.MarkLabel(fa191)
EmitConvIL.Emit(OpCodes.Br, cont191)
EmitConvIL.MarkLabel(cont191)
EmitConvIL.MarkSequencePoint(doc9, 1322, 1, 1322, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.Decimal))
Dim typ276 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ276))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ276).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc9, 1323, 1, 1323, 100)
Dim typ277(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
ReDim Preserve typ277(UBound(typ277) + 1)
typ277(UBound(typ277)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ277))
Typ = Typ03.GetMethod("Equals", typ277).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc9, 1325, 1, 1325, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa192 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru192 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont192 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru192)
EmitConvIL.Emit(OpCodes.Br, fa192)
EmitConvIL.MarkLabel(tru192)
EmitConvIL.MarkSequencePoint(doc9, 1326, 1, 1326, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
EmitConvIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EmitConvIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
EmitConvIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
EmitConvIL.MarkSequencePoint(doc9, 1327, 1, 1327, 100)
Dim typ278(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "ToDecimal")
Typ = GetType(System.String)
ReDim Preserve typ278(UBound(typ278) + 1)
typ278(UBound(typ278)) = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ278(UBound(typ278) + 1)
typ278(UBound(typ278)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetMethod", typ278))
Typ = Typ03.GetMethod("GetMethod", typ278).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc9, 1328, 1, 1328, 100)
Dim typ279(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ279(UBound(typ279) + 1)
typ279(UBound(typ279)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ279))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ279).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc9, 1329, 1, 1329, 100)
EmitConvIL.Emit(OpCodes.Br, label23)
EmitConvIL.MarkSequencePoint(doc9, 1330, 1, 1330, 100)
EmitConvIL.Emit(OpCodes.Br, cont192)
EmitConvIL.MarkLabel(fa192)
EmitConvIL.Emit(OpCodes.Br, cont192)
EmitConvIL.MarkLabel(cont192)
EmitConvIL.MarkSequencePoint(doc9, 1332, 1, 1332, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.Double))
Dim typ280 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ280))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ280).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc9, 1333, 1, 1333, 100)
Dim typ281(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
ReDim Preserve typ281(UBound(typ281) + 1)
typ281(UBound(typ281)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ281))
Typ = Typ03.GetMethod("Equals", typ281).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc9, 1335, 1, 1335, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa193 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru193 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont193 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru193)
EmitConvIL.Emit(OpCodes.Br, fa193)
EmitConvIL.MarkLabel(tru193)
EmitConvIL.MarkSequencePoint(doc9, 1336, 1, 1336, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
EmitConvIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EmitConvIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
EmitConvIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
EmitConvIL.MarkSequencePoint(doc9, 1337, 1, 1337, 100)
Dim typ282(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "ToDouble")
Typ = GetType(System.String)
ReDim Preserve typ282(UBound(typ282) + 1)
typ282(UBound(typ282)) = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ282(UBound(typ282) + 1)
typ282(UBound(typ282)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetMethod", typ282))
Typ = Typ03.GetMethod("GetMethod", typ282).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc9, 1338, 1, 1338, 100)
Dim typ283(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ283(UBound(typ283) + 1)
typ283(UBound(typ283)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ283))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ283).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc9, 1339, 1, 1339, 100)
EmitConvIL.Emit(OpCodes.Br, label23)
EmitConvIL.MarkSequencePoint(doc9, 1340, 1, 1340, 100)
EmitConvIL.Emit(OpCodes.Br, cont193)
EmitConvIL.MarkLabel(fa193)
EmitConvIL.Emit(OpCodes.Br, cont193)
EmitConvIL.MarkLabel(cont193)
EmitConvIL.MarkSequencePoint(doc9, 1342, 1, 1342, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.Single))
Dim typ284 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ284))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ284).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc9, 1343, 1, 1343, 100)
Dim typ285(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
ReDim Preserve typ285(UBound(typ285) + 1)
typ285(UBound(typ285)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ285))
Typ = Typ03.GetMethod("Equals", typ285).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc9, 1345, 1, 1345, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa194 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru194 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont194 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru194)
EmitConvIL.Emit(OpCodes.Br, fa194)
EmitConvIL.MarkLabel(tru194)
EmitConvIL.MarkSequencePoint(doc9, 1346, 1, 1346, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
EmitConvIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EmitConvIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
EmitConvIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
EmitConvIL.MarkSequencePoint(doc9, 1347, 1, 1347, 100)
Dim typ286(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "ToSingle")
Typ = GetType(System.String)
ReDim Preserve typ286(UBound(typ286) + 1)
typ286(UBound(typ286)) = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ286(UBound(typ286) + 1)
typ286(UBound(typ286)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetMethod", typ286))
Typ = Typ03.GetMethod("GetMethod", typ286).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc9, 1348, 1, 1348, 100)
Dim typ287(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ287(UBound(typ287) + 1)
typ287(UBound(typ287)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ287))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ287).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc9, 1349, 1, 1349, 100)
EmitConvIL.Emit(OpCodes.Br, label23)
EmitConvIL.MarkSequencePoint(doc9, 1350, 1, 1350, 100)
EmitConvIL.Emit(OpCodes.Br, cont194)
EmitConvIL.MarkLabel(fa194)
EmitConvIL.Emit(OpCodes.Br, cont194)
EmitConvIL.MarkLabel(cont194)
EmitConvIL.MarkSequencePoint(doc9, 1352, 1, 1352, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.Int64))
Dim typ288 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ288))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ288).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc9, 1353, 1, 1353, 100)
Dim typ289(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
ReDim Preserve typ289(UBound(typ289) + 1)
typ289(UBound(typ289)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ289))
Typ = Typ03.GetMethod("Equals", typ289).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc9, 1355, 1, 1355, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa195 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru195 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont195 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru195)
EmitConvIL.Emit(OpCodes.Br, fa195)
EmitConvIL.MarkLabel(tru195)
EmitConvIL.MarkSequencePoint(doc9, 1356, 1, 1356, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
EmitConvIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EmitConvIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
EmitConvIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
EmitConvIL.MarkSequencePoint(doc9, 1357, 1, 1357, 100)
Dim typ290(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "ToInt64")
Typ = GetType(System.String)
ReDim Preserve typ290(UBound(typ290) + 1)
typ290(UBound(typ290)) = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ290(UBound(typ290) + 1)
typ290(UBound(typ290)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetMethod", typ290))
Typ = Typ03.GetMethod("GetMethod", typ290).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc9, 1358, 1, 1358, 100)
Dim typ291(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ291(UBound(typ291) + 1)
typ291(UBound(typ291)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ291))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ291).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc9, 1359, 1, 1359, 100)
EmitConvIL.Emit(OpCodes.Br, label23)
EmitConvIL.MarkSequencePoint(doc9, 1360, 1, 1360, 100)
EmitConvIL.Emit(OpCodes.Br, cont195)
EmitConvIL.MarkLabel(fa195)
EmitConvIL.Emit(OpCodes.Br, cont195)
EmitConvIL.MarkLabel(cont195)
EmitConvIL.MarkSequencePoint(doc9, 1362, 1, 1362, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.Int32))
Dim typ292 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ292))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ292).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc9, 1363, 1, 1363, 100)
Dim typ293(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
ReDim Preserve typ293(UBound(typ293) + 1)
typ293(UBound(typ293)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ293))
Typ = Typ03.GetMethod("Equals", typ293).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc9, 1365, 1, 1365, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa196 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru196 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont196 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru196)
EmitConvIL.Emit(OpCodes.Br, fa196)
EmitConvIL.MarkLabel(tru196)
EmitConvIL.MarkSequencePoint(doc9, 1366, 1, 1366, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
EmitConvIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EmitConvIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
EmitConvIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
EmitConvIL.MarkSequencePoint(doc9, 1367, 1, 1367, 100)
Dim typ294(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "ToInt32")
Typ = GetType(System.String)
ReDim Preserve typ294(UBound(typ294) + 1)
typ294(UBound(typ294)) = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ294(UBound(typ294) + 1)
typ294(UBound(typ294)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetMethod", typ294))
Typ = Typ03.GetMethod("GetMethod", typ294).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc9, 1368, 1, 1368, 100)
Dim typ295(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ295(UBound(typ295) + 1)
typ295(UBound(typ295)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ295))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ295).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc9, 1369, 1, 1369, 100)
EmitConvIL.Emit(OpCodes.Br, label23)
EmitConvIL.MarkSequencePoint(doc9, 1370, 1, 1370, 100)
EmitConvIL.Emit(OpCodes.Br, cont196)
EmitConvIL.MarkLabel(fa196)
EmitConvIL.Emit(OpCodes.Br, cont196)
EmitConvIL.MarkLabel(cont196)
EmitConvIL.MarkSequencePoint(doc9, 1372, 1, 1372, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.Int16))
Dim typ296 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ296))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ296).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc9, 1373, 1, 1373, 100)
Dim typ297(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
ReDim Preserve typ297(UBound(typ297) + 1)
typ297(UBound(typ297)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ297))
Typ = Typ03.GetMethod("Equals", typ297).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc9, 1375, 1, 1375, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa197 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru197 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont197 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru197)
EmitConvIL.Emit(OpCodes.Br, fa197)
EmitConvIL.MarkLabel(tru197)
EmitConvIL.MarkSequencePoint(doc9, 1376, 1, 1376, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
EmitConvIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EmitConvIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
EmitConvIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
EmitConvIL.MarkSequencePoint(doc9, 1377, 1, 1377, 100)
Dim typ298(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "ToInt16")
Typ = GetType(System.String)
ReDim Preserve typ298(UBound(typ298) + 1)
typ298(UBound(typ298)) = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ298(UBound(typ298) + 1)
typ298(UBound(typ298)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetMethod", typ298))
Typ = Typ03.GetMethod("GetMethod", typ298).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc9, 1378, 1, 1378, 100)
Dim typ299(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ299(UBound(typ299) + 1)
typ299(UBound(typ299)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ299))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ299).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc9, 1379, 1, 1379, 100)
EmitConvIL.Emit(OpCodes.Br, label23)
EmitConvIL.MarkSequencePoint(doc9, 1380, 1, 1380, 100)
EmitConvIL.Emit(OpCodes.Br, cont197)
EmitConvIL.MarkLabel(fa197)
EmitConvIL.Emit(OpCodes.Br, cont197)
EmitConvIL.MarkLabel(cont197)
EmitConvIL.MarkSequencePoint(doc9, 1382, 1, 1382, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.SByte))
Dim typ300 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ300))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ300).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc9, 1383, 1, 1383, 100)
Dim typ301(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
ReDim Preserve typ301(UBound(typ301) + 1)
typ301(UBound(typ301)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ301))
Typ = Typ03.GetMethod("Equals", typ301).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc9, 1385, 1, 1385, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa198 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru198 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont198 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru198)
EmitConvIL.Emit(OpCodes.Br, fa198)
EmitConvIL.MarkLabel(tru198)
EmitConvIL.MarkSequencePoint(doc9, 1386, 1, 1386, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
EmitConvIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EmitConvIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
EmitConvIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
EmitConvIL.MarkSequencePoint(doc9, 1387, 1, 1387, 100)
Dim typ302(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "ToSByte")
Typ = GetType(System.String)
ReDim Preserve typ302(UBound(typ302) + 1)
typ302(UBound(typ302)) = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ302(UBound(typ302) + 1)
typ302(UBound(typ302)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetMethod", typ302))
Typ = Typ03.GetMethod("GetMethod", typ302).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc9, 1388, 1, 1388, 100)
Dim typ303(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ303(UBound(typ303) + 1)
typ303(UBound(typ303)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ303))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ303).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc9, 1389, 1, 1389, 100)
EmitConvIL.Emit(OpCodes.Br, label23)
EmitConvIL.MarkSequencePoint(doc9, 1390, 1, 1390, 100)
EmitConvIL.Emit(OpCodes.Br, cont198)
EmitConvIL.MarkLabel(fa198)
EmitConvIL.Emit(OpCodes.Br, cont198)
EmitConvIL.MarkLabel(cont198)
EmitConvIL.MarkSequencePoint(doc9, 1392, 1, 1392, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.Boolean))
Dim typ304 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ304))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ304).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc9, 1393, 1, 1393, 100)
Dim typ305(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
ReDim Preserve typ305(UBound(typ305) + 1)
typ305(UBound(typ305)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ305))
Typ = Typ03.GetMethod("Equals", typ305).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc9, 1395, 1, 1395, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa199 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru199 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont199 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru199)
EmitConvIL.Emit(OpCodes.Br, fa199)
EmitConvIL.MarkLabel(tru199)
EmitConvIL.MarkSequencePoint(doc9, 1396, 1, 1396, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
EmitConvIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EmitConvIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
EmitConvIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
EmitConvIL.MarkSequencePoint(doc9, 1397, 1, 1397, 100)
Dim typ306(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "ToBoolean")
Typ = GetType(System.String)
ReDim Preserve typ306(UBound(typ306) + 1)
typ306(UBound(typ306)) = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ306(UBound(typ306) + 1)
typ306(UBound(typ306)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetMethod", typ306))
Typ = Typ03.GetMethod("GetMethod", typ306).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc9, 1398, 1, 1398, 100)
Dim typ307(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ307(UBound(typ307) + 1)
typ307(UBound(typ307)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ307))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ307).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc9, 1399, 1, 1399, 100)
EmitConvIL.Emit(OpCodes.Br, label23)
EmitConvIL.MarkSequencePoint(doc9, 1400, 1, 1400, 100)
EmitConvIL.Emit(OpCodes.Br, cont199)
EmitConvIL.MarkLabel(fa199)
EmitConvIL.Emit(OpCodes.Br, cont199)
EmitConvIL.MarkLabel(cont199)
EmitConvIL.MarkSequencePoint(doc9, 1403, 1, 1403, 100)
EmitConvIL.MarkLabel(label23)
EmitConvIL.MarkSequencePoint(doc9, 1405, 1, 1405, 100)
EmitConvIL.Emit(OpCodes.Ret)
Dim typ308(-1) As Type
ReDim Preserve typ308(UBound(typ308) + 1)
typ308(UBound(typ308)) = GetType(MethodInfo)
ReDim Preserve typ308(UBound(typ308) + 1)
typ308(UBound(typ308)) = GetType(System.Boolean)
Dim EmitMetCall As MethodBuilder = Helpers.DefineMethod("EmitMetCall", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ308)
Dim EmitMetCallIL As ILGenerator = EmitMetCall.GetILGenerator()
Dim EmitMetCallparam01 As ParameterBuilder = EmitMetCall.DefineParameter(1, ParameterAttributes.None, "met")
Dim EmitMetCallparam02 As ParameterBuilder = EmitMetCall.DefineParameter(2, ParameterAttributes.None, "stat")
EmitMetCallIL.MarkSequencePoint(doc9, 1408, 1, 1408, 100)
EmitMetCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
EmitMetCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa200 As System.Reflection.Emit.Label = EmitMetCallIL.DefineLabel()
Dim tru200 As System.Reflection.Emit.Label = EmitMetCallIL.DefineLabel()
Dim cont200 As System.Reflection.Emit.Label = EmitMetCallIL.DefineLabel()
EmitMetCallIL.Emit(OpCodes.Beq, tru200)
EmitMetCallIL.Emit(OpCodes.Br, fa200)
EmitMetCallIL.MarkLabel(tru200)
EmitMetCallIL.MarkSequencePoint(doc9, 1409, 1, 1409, 100)
Dim typ309(-1) As Type
EmitMetCallIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(MethodInfo)
ReDim Preserve typ309(UBound(typ309) + 1)
typ309(UBound(typ309)) = Typ
EmitMetCallIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ309))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ309).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMetCallIL.Emit(OpCodes.Pop)
End If
EmitMetCallIL.MarkSequencePoint(doc9, 1410, 1, 1410, 100)
EmitMetCallIL.Emit(OpCodes.Br, cont200)
EmitMetCallIL.MarkLabel(fa200)
EmitMetCallIL.MarkSequencePoint(doc9, 1411, 1, 1411, 100)
Dim typ310(-1) As Type
EmitMetCallIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(MethodInfo)
ReDim Preserve typ310(UBound(typ310) + 1)
typ310(UBound(typ310)) = Typ
EmitMetCallIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCallvirt", typ310))
Typ = GetType(ILEmitter).GetMethod("EmitCallvirt", typ310).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMetCallIL.Emit(OpCodes.Pop)
End If
EmitMetCallIL.MarkSequencePoint(doc9, 1412, 1, 1412, 100)
EmitMetCallIL.Emit(OpCodes.Br, cont200)
EmitMetCallIL.MarkLabel(cont200)
EmitMetCallIL.MarkSequencePoint(doc9, 1413, 1, 1413, 100)
EmitMetCallIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("PopFlg"))
Typ = GetType(AsmFactory).GetField("PopFlg").FieldType
EmitMetCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa201 As System.Reflection.Emit.Label = EmitMetCallIL.DefineLabel()
Dim tru201 As System.Reflection.Emit.Label = EmitMetCallIL.DefineLabel()
Dim cont201 As System.Reflection.Emit.Label = EmitMetCallIL.DefineLabel()
EmitMetCallIL.Emit(OpCodes.Beq, tru201)
EmitMetCallIL.Emit(OpCodes.Br, fa201)
EmitMetCallIL.MarkLabel(tru201)
EmitMetCallIL.MarkSequencePoint(doc9, 1414, 1, 1414, 100)
Dim locbldr208 As LocalBuilder = EmitMetCallIL.DeclareLocal(GetType(System.Type))
locbldr208.SetLocalSymInfo("rt")
EmitMetCallIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitMetCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
EmitMetCallIL.Emit(OpCodes.Stloc, 0)
EmitMetCallIL.MarkSequencePoint(doc9, 1415, 1, 1415, 100)
Dim locbldr209 As LocalBuilder = EmitMetCallIL.DeclareLocal(GetType(System.Type))
locbldr209.SetLocalSymInfo("vt")
EmitMetCallIL.Emit(OpCodes.Ldtoken, GetType(System.Void))
Dim typ312 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitMetCallIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ312))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ312).ReturnType
EmitMetCallIL.Emit(OpCodes.Stloc, 1)
EmitMetCallIL.MarkSequencePoint(doc9, 1416, 1, 1416, 100)
Dim locbldr210 As LocalBuilder = EmitMetCallIL.DeclareLocal(GetType(System.Boolean))
locbldr210.SetLocalSymInfo("b")
Dim typ313(-1) As Type
EmitMetCallIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitMetCallIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
ReDim Preserve typ313(UBound(typ313) + 1)
typ313(UBound(typ313)) = Typ
EmitMetCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ313))
Typ = Typ03.GetMethod("Equals", typ313).ReturnType
EmitMetCallIL.Emit(OpCodes.Stloc, 2)
EmitMetCallIL.MarkSequencePoint(doc9, 1417, 1, 1417, 100)
EmitMetCallIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitMetCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa202 As System.Reflection.Emit.Label = EmitMetCallIL.DefineLabel()
Dim tru202 As System.Reflection.Emit.Label = EmitMetCallIL.DefineLabel()
Dim cont202 As System.Reflection.Emit.Label = EmitMetCallIL.DefineLabel()
EmitMetCallIL.Emit(OpCodes.Beq, tru202)
EmitMetCallIL.Emit(OpCodes.Br, fa202)
EmitMetCallIL.MarkLabel(tru202)
EmitMetCallIL.MarkSequencePoint(doc9, 1418, 1, 1418, 100)
EmitMetCallIL.Emit(OpCodes.Br, cont202)
EmitMetCallIL.MarkLabel(fa202)
EmitMetCallIL.MarkSequencePoint(doc9, 1419, 1, 1419, 100)
EmitMetCallIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitPop", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitPop", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMetCallIL.Emit(OpCodes.Pop)
End If
EmitMetCallIL.MarkSequencePoint(doc9, 1420, 1, 1420, 100)
EmitMetCallIL.Emit(OpCodes.Br, cont202)
EmitMetCallIL.MarkLabel(cont202)
EmitMetCallIL.MarkSequencePoint(doc9, 1421, 1, 1421, 100)
EmitMetCallIL.Emit(OpCodes.Br, cont201)
EmitMetCallIL.MarkLabel(fa201)
EmitMetCallIL.Emit(OpCodes.Br, cont201)
EmitMetCallIL.MarkLabel(cont201)
EmitMetCallIL.MarkSequencePoint(doc9, 1422, 1, 1422, 100)
EmitMetCallIL.Emit(OpCodes.Ret)
Dim typ314(-1) As Type
ReDim Preserve typ314(UBound(typ314) + 1)
typ314(UBound(typ314)) = GetType(FieldInfo)
ReDim Preserve typ314(UBound(typ314) + 1)
typ314(UBound(typ314)) = GetType(System.Boolean)
Dim EmitFldLd As MethodBuilder = Helpers.DefineMethod("EmitFldLd", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ314)
Dim EmitFldLdIL As ILGenerator = EmitFldLd.GetILGenerator()
Dim EmitFldLdparam01 As ParameterBuilder = EmitFldLd.DefineParameter(1, ParameterAttributes.None, "fld")
Dim EmitFldLdparam02 As ParameterBuilder = EmitFldLd.DefineParameter(2, ParameterAttributes.None, "stat")
EmitFldLdIL.MarkSequencePoint(doc9, 1425, 1, 1425, 100)
EmitFldLdIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AddrFlg"))
Typ = GetType(AsmFactory).GetField("AddrFlg").FieldType
EmitFldLdIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa203 As System.Reflection.Emit.Label = EmitFldLdIL.DefineLabel()
Dim tru203 As System.Reflection.Emit.Label = EmitFldLdIL.DefineLabel()
Dim cont203 As System.Reflection.Emit.Label = EmitFldLdIL.DefineLabel()
EmitFldLdIL.Emit(OpCodes.Beq, tru203)
EmitFldLdIL.Emit(OpCodes.Br, fa203)
EmitFldLdIL.MarkLabel(tru203)
EmitFldLdIL.MarkSequencePoint(doc9, 1426, 1, 1426, 100)
EmitFldLdIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
EmitFldLdIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa204 As System.Reflection.Emit.Label = EmitFldLdIL.DefineLabel()
Dim tru204 As System.Reflection.Emit.Label = EmitFldLdIL.DefineLabel()
Dim cont204 As System.Reflection.Emit.Label = EmitFldLdIL.DefineLabel()
EmitFldLdIL.Emit(OpCodes.Beq, tru204)
EmitFldLdIL.Emit(OpCodes.Br, fa204)
EmitFldLdIL.MarkLabel(tru204)
EmitFldLdIL.MarkSequencePoint(doc9, 1427, 1, 1427, 100)
Dim typ315(-1) As Type
EmitFldLdIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(FieldInfo)
ReDim Preserve typ315(UBound(typ315) + 1)
typ315(UBound(typ315)) = Typ
EmitFldLdIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdsfld", typ315))
Typ = GetType(ILEmitter).GetMethod("EmitLdsfld", typ315).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitFldLdIL.Emit(OpCodes.Pop)
End If
EmitFldLdIL.MarkSequencePoint(doc9, 1428, 1, 1428, 100)
EmitFldLdIL.Emit(OpCodes.Br, cont204)
EmitFldLdIL.MarkLabel(fa204)
EmitFldLdIL.MarkSequencePoint(doc9, 1429, 1, 1429, 100)
Dim typ316(-1) As Type
EmitFldLdIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(FieldInfo)
ReDim Preserve typ316(UBound(typ316) + 1)
typ316(UBound(typ316)) = Typ
EmitFldLdIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdfld", typ316))
Typ = GetType(ILEmitter).GetMethod("EmitLdfld", typ316).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitFldLdIL.Emit(OpCodes.Pop)
End If
EmitFldLdIL.MarkSequencePoint(doc9, 1430, 1, 1430, 100)
EmitFldLdIL.Emit(OpCodes.Br, cont204)
EmitFldLdIL.MarkLabel(cont204)
EmitFldLdIL.MarkSequencePoint(doc9, 1431, 1, 1431, 100)
EmitFldLdIL.Emit(OpCodes.Br, cont203)
EmitFldLdIL.MarkLabel(fa203)
EmitFldLdIL.MarkSequencePoint(doc9, 1432, 1, 1432, 100)
Dim locbldr211 As LocalBuilder = EmitFldLdIL.DeclareLocal(GetType(System.Type))
locbldr211.SetLocalSymInfo("typ")
EmitFldLdIL.Emit(OpCodes.Ldtoken, GetType(ValueType))
Dim typ317 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitFldLdIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ317))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ317).ReturnType
EmitFldLdIL.Emit(OpCodes.Stloc, 0)
EmitFldLdIL.MarkSequencePoint(doc9, 1433, 1, 1433, 100)
Dim locbldr212 As LocalBuilder = EmitFldLdIL.DeclareLocal(GetType(System.Boolean))
locbldr212.SetLocalSymInfo("b")
Dim typ318(-1) As Type
EmitFldLdIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitFldLdIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type04"))
Typ = GetType(AsmFactory).GetField("Type04").FieldType
ReDim Preserve typ318(UBound(typ318) + 1)
typ318(UBound(typ318)) = Typ
EmitFldLdIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsAssignableFrom", typ318))
Typ = Typ03.GetMethod("IsAssignableFrom", typ318).ReturnType
EmitFldLdIL.Emit(OpCodes.Stloc, 1)
EmitFldLdIL.MarkSequencePoint(doc9, 1434, 1, 1434, 100)
EmitFldLdIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitFldLdIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa205 As System.Reflection.Emit.Label = EmitFldLdIL.DefineLabel()
Dim tru205 As System.Reflection.Emit.Label = EmitFldLdIL.DefineLabel()
Dim cont205 As System.Reflection.Emit.Label = EmitFldLdIL.DefineLabel()
EmitFldLdIL.Emit(OpCodes.Beq, tru205)
EmitFldLdIL.Emit(OpCodes.Br, fa205)
EmitFldLdIL.MarkLabel(tru205)
EmitFldLdIL.MarkSequencePoint(doc9, 1435, 1, 1435, 100)
EmitFldLdIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
EmitFldLdIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa206 As System.Reflection.Emit.Label = EmitFldLdIL.DefineLabel()
Dim tru206 As System.Reflection.Emit.Label = EmitFldLdIL.DefineLabel()
Dim cont206 As System.Reflection.Emit.Label = EmitFldLdIL.DefineLabel()
EmitFldLdIL.Emit(OpCodes.Beq, tru206)
EmitFldLdIL.Emit(OpCodes.Br, fa206)
EmitFldLdIL.MarkLabel(tru206)
EmitFldLdIL.MarkSequencePoint(doc9, 1436, 1, 1436, 100)
Dim typ319(-1) As Type
EmitFldLdIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(FieldInfo)
ReDim Preserve typ319(UBound(typ319) + 1)
typ319(UBound(typ319)) = Typ
EmitFldLdIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdsfld", typ319))
Typ = GetType(ILEmitter).GetMethod("EmitLdsfld", typ319).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitFldLdIL.Emit(OpCodes.Pop)
End If
EmitFldLdIL.MarkSequencePoint(doc9, 1437, 1, 1437, 100)
EmitFldLdIL.Emit(OpCodes.Br, cont206)
EmitFldLdIL.MarkLabel(fa206)
EmitFldLdIL.MarkSequencePoint(doc9, 1438, 1, 1438, 100)
Dim typ320(-1) As Type
EmitFldLdIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(FieldInfo)
ReDim Preserve typ320(UBound(typ320) + 1)
typ320(UBound(typ320)) = Typ
EmitFldLdIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdfld", typ320))
Typ = GetType(ILEmitter).GetMethod("EmitLdfld", typ320).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitFldLdIL.Emit(OpCodes.Pop)
End If
EmitFldLdIL.MarkSequencePoint(doc9, 1439, 1, 1439, 100)
EmitFldLdIL.Emit(OpCodes.Br, cont206)
EmitFldLdIL.MarkLabel(cont206)
EmitFldLdIL.MarkSequencePoint(doc9, 1440, 1, 1440, 100)
EmitFldLdIL.Emit(OpCodes.Br, cont205)
EmitFldLdIL.MarkLabel(fa205)
EmitFldLdIL.MarkSequencePoint(doc9, 1441, 1, 1441, 100)
EmitFldLdIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
EmitFldLdIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa207 As System.Reflection.Emit.Label = EmitFldLdIL.DefineLabel()
Dim tru207 As System.Reflection.Emit.Label = EmitFldLdIL.DefineLabel()
Dim cont207 As System.Reflection.Emit.Label = EmitFldLdIL.DefineLabel()
EmitFldLdIL.Emit(OpCodes.Beq, tru207)
EmitFldLdIL.Emit(OpCodes.Br, fa207)
EmitFldLdIL.MarkLabel(tru207)
EmitFldLdIL.MarkSequencePoint(doc9, 1442, 1, 1442, 100)
Dim typ321(-1) As Type
EmitFldLdIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(FieldInfo)
ReDim Preserve typ321(UBound(typ321) + 1)
typ321(UBound(typ321)) = Typ
EmitFldLdIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdsflda", typ321))
Typ = GetType(ILEmitter).GetMethod("EmitLdsflda", typ321).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitFldLdIL.Emit(OpCodes.Pop)
End If
EmitFldLdIL.MarkSequencePoint(doc9, 1443, 1, 1443, 100)
EmitFldLdIL.Emit(OpCodes.Br, cont207)
EmitFldLdIL.MarkLabel(fa207)
EmitFldLdIL.MarkSequencePoint(doc9, 1444, 1, 1444, 100)
Dim typ322(-1) As Type
EmitFldLdIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(FieldInfo)
ReDim Preserve typ322(UBound(typ322) + 1)
typ322(UBound(typ322)) = Typ
EmitFldLdIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdflda", typ322))
Typ = GetType(ILEmitter).GetMethod("EmitLdflda", typ322).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitFldLdIL.Emit(OpCodes.Pop)
End If
EmitFldLdIL.MarkSequencePoint(doc9, 1445, 1, 1445, 100)
EmitFldLdIL.Emit(OpCodes.Br, cont207)
EmitFldLdIL.MarkLabel(cont207)
EmitFldLdIL.MarkSequencePoint(doc9, 1446, 1, 1446, 100)
EmitFldLdIL.Emit(OpCodes.Br, cont205)
EmitFldLdIL.MarkLabel(cont205)
EmitFldLdIL.MarkSequencePoint(doc9, 1447, 1, 1447, 100)
EmitFldLdIL.Emit(OpCodes.Br, cont203)
EmitFldLdIL.MarkLabel(cont203)
EmitFldLdIL.MarkSequencePoint(doc9, 1448, 1, 1448, 100)
EmitFldLdIL.Emit(OpCodes.Ret)
Dim typ323(-1) As Type
ReDim Preserve typ323(UBound(typ323) + 1)
typ323(UBound(typ323)) = GetType(FieldInfo)
ReDim Preserve typ323(UBound(typ323) + 1)
typ323(UBound(typ323)) = GetType(System.Boolean)
Dim EmitFldSt As MethodBuilder = Helpers.DefineMethod("EmitFldSt", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ323)
Dim EmitFldStIL As ILGenerator = EmitFldSt.GetILGenerator()
Dim EmitFldStparam01 As ParameterBuilder = EmitFldSt.DefineParameter(1, ParameterAttributes.None, "fld")
Dim EmitFldStparam02 As ParameterBuilder = EmitFldSt.DefineParameter(2, ParameterAttributes.None, "stat")
EmitFldStIL.MarkSequencePoint(doc9, 1451, 1, 1451, 100)
EmitFldStIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
EmitFldStIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa208 As System.Reflection.Emit.Label = EmitFldStIL.DefineLabel()
Dim tru208 As System.Reflection.Emit.Label = EmitFldStIL.DefineLabel()
Dim cont208 As System.Reflection.Emit.Label = EmitFldStIL.DefineLabel()
EmitFldStIL.Emit(OpCodes.Beq, tru208)
EmitFldStIL.Emit(OpCodes.Br, fa208)
EmitFldStIL.MarkLabel(tru208)
EmitFldStIL.MarkSequencePoint(doc9, 1452, 1, 1452, 100)
Dim typ324(-1) As Type
EmitFldStIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(FieldInfo)
ReDim Preserve typ324(UBound(typ324) + 1)
typ324(UBound(typ324)) = Typ
EmitFldStIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitStsfld", typ324))
Typ = GetType(ILEmitter).GetMethod("EmitStsfld", typ324).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitFldStIL.Emit(OpCodes.Pop)
End If
EmitFldStIL.MarkSequencePoint(doc9, 1453, 1, 1453, 100)
EmitFldStIL.Emit(OpCodes.Br, cont208)
EmitFldStIL.MarkLabel(fa208)
EmitFldStIL.MarkSequencePoint(doc9, 1454, 1, 1454, 100)
Dim typ325(-1) As Type
EmitFldStIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(FieldInfo)
ReDim Preserve typ325(UBound(typ325) + 1)
typ325(UBound(typ325)) = Typ
EmitFldStIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitStfld", typ325))
Typ = GetType(ILEmitter).GetMethod("EmitStfld", typ325).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitFldStIL.Emit(OpCodes.Pop)
End If
EmitFldStIL.MarkSequencePoint(doc9, 1455, 1, 1455, 100)
EmitFldStIL.Emit(OpCodes.Br, cont208)
EmitFldStIL.MarkLabel(cont208)
EmitFldStIL.MarkSequencePoint(doc9, 1456, 1, 1456, 100)
EmitFldStIL.Emit(OpCodes.Ret)
Dim typ326(-1) As Type
ReDim Preserve typ326(UBound(typ326) + 1)
typ326(UBound(typ326)) = GetType(System.Type)
ReDim Preserve typ326(UBound(typ326) + 1)
typ326(UBound(typ326)) = GetType(System.Type).MakeArrayType()
Dim GetLocCtor As MethodBuilder = Helpers.DefineMethod("GetLocCtor", MethodAttributes.Public Or MethodAttributes.Static, GetType(ConstructorInfo), typ326)
Dim GetLocCtorIL As ILGenerator = GetLocCtor.GetILGenerator()
Dim GetLocCtorparam01 As ParameterBuilder = GetLocCtor.DefineParameter(1, ParameterAttributes.None, "t")
Dim GetLocCtorparam02 As ParameterBuilder = GetLocCtor.DefineParameter(2, ParameterAttributes.None, "typs")
GetLocCtorIL.MarkSequencePoint(doc9, 1460, 1, 1460, 100)
Dim locbldr213 As LocalBuilder = GetLocCtorIL.DeclareLocal(GetType(ConstructorInfo))
locbldr213.SetLocalSymInfo("ctorinf")
GetLocCtorIL.MarkSequencePoint(doc9, 1461, 1, 1461, 100)
Dim locbldr214 As LocalBuilder = GetLocCtorIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
locbldr214.SetLocalSymInfo("ctori")
GetLocCtorIL.MarkSequencePoint(doc9, 1462, 1, 1462, 100)
Dim locbldr215 As LocalBuilder = GetLocCtorIL.DeclareLocal(GetType(System.Boolean))
locbldr215.SetLocalSymInfo("b")
Dim typ327(-1) As Type
GetLocCtorIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
GetLocCtorIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
ReDim Preserve typ327(UBound(typ327) + 1)
typ327(UBound(typ327)) = Typ
GetLocCtorIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ327))
Typ = Typ03.GetMethod("Equals", typ327).ReturnType
GetLocCtorIL.Emit(OpCodes.Stloc, 2)
GetLocCtorIL.MarkSequencePoint(doc9, 1463, 1, 1463, 100)
GetLocCtorIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
GetLocCtorIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa209 As System.Reflection.Emit.Label = GetLocCtorIL.DefineLabel()
Dim tru209 As System.Reflection.Emit.Label = GetLocCtorIL.DefineLabel()
Dim cont209 As System.Reflection.Emit.Label = GetLocCtorIL.DefineLabel()
GetLocCtorIL.Emit(OpCodes.Beq, tru209)
GetLocCtorIL.Emit(OpCodes.Br, fa209)
GetLocCtorIL.MarkLabel(tru209)
GetLocCtorIL.MarkSequencePoint(doc9, 1464, 1, 1464, 100)
Dim typ328(-1) As Type
GetLocCtorIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ328(UBound(typ328) + 1)
typ328(UBound(typ328)) = Typ
GetLocCtorIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindCtor", typ328))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindCtor", typ328).ReturnType
GetLocCtorIL.Emit(OpCodes.Stloc, 1)
GetLocCtorIL.MarkSequencePoint(doc9, 1465, 1, 1465, 100)
GetLocCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem")
GetLocCtorIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").GetField("CtorBldr"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").GetField("CtorBldr").FieldType
GetLocCtorIL.Emit(OpCodes.Stloc, 0)
GetLocCtorIL.MarkSequencePoint(doc9, 1469, 1, 1469, 100)
GetLocCtorIL.Emit(OpCodes.Br, cont209)
GetLocCtorIL.MarkLabel(fa209)
GetLocCtorIL.MarkSequencePoint(doc9, 1470, 1, 1470, 100)
Dim typ329(-1) As Type
GetLocCtorIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
ReDim Preserve typ329(UBound(typ329) + 1)
typ329(UBound(typ329)) = Typ
GetLocCtorIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ329(UBound(typ329) + 1)
typ329(UBound(typ329)) = Typ
GetLocCtorIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadCtor", typ329))
Typ = GetType(Loader).GetMethod("LoadCtor", typ329).ReturnType
GetLocCtorIL.Emit(OpCodes.Stloc, 0)
GetLocCtorIL.MarkSequencePoint(doc9, 1471, 1, 1471, 100)
GetLocCtorIL.Emit(OpCodes.Br, cont209)
GetLocCtorIL.MarkLabel(cont209)
GetLocCtorIL.MarkSequencePoint(doc9, 1473, 1, 1473, 100)
GetLocCtorIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(ConstructorInfo)
GetLocCtorIL.MarkSequencePoint(doc9, 1475, 1, 1475, 100)
GetLocCtorIL.Emit(OpCodes.Ret)
Dim typ330(-1) As Type
ReDim Preserve typ330(UBound(typ330) + 1)
typ330(UBound(typ330)) = GetType(System.String)
Dim GetLocFld As MethodBuilder = Helpers.DefineMethod("GetLocFld", MethodAttributes.Public Or MethodAttributes.Static, GetType(FieldInfo), typ330)
Dim GetLocFldIL As ILGenerator = GetLocFld.GetILGenerator()
Dim GetLocFldparam01 As ParameterBuilder = GetLocFld.DefineParameter(1, ParameterAttributes.None, "nam")
GetLocFldIL.MarkSequencePoint(doc9, 1479, 1, 1479, 100)
Dim locbldr216 As LocalBuilder = GetLocFldIL.DeclareLocal(GetType(FieldInfo))
locbldr216.SetLocalSymInfo("fldinf")
GetLocFldIL.Emit(OpCodes.Ldnull)
GetLocFldIL.Emit(OpCodes.Stloc, 0)
GetLocFldIL.MarkSequencePoint(doc9, 1480, 1, 1480, 100)
Dim locbldr217 As LocalBuilder = GetLocFldIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
locbldr217.SetLocalSymInfo("fldi")
GetLocFldIL.MarkSequencePoint(doc9, 1482, 1, 1482, 100)
Dim typ331(-1) As Type
GetLocFldIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ331(UBound(typ331) + 1)
typ331(UBound(typ331)) = Typ
GetLocFldIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindFld", typ331))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindFld", typ331).ReturnType
GetLocFldIL.Emit(OpCodes.Stloc, 1)
GetLocFldIL.MarkSequencePoint(doc9, 1484, 1, 1484, 100)
GetLocFldIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem")
GetLocFldIL.Emit(OpCodes.Ldnull)
Dim fa210 As System.Reflection.Emit.Label = GetLocFldIL.DefineLabel()
Dim tru210 As System.Reflection.Emit.Label = GetLocFldIL.DefineLabel()
Dim cont210 As System.Reflection.Emit.Label = GetLocFldIL.DefineLabel()
GetLocFldIL.Emit(OpCodes.Beq, fa210)
GetLocFldIL.Emit(OpCodes.Br, tru210)
GetLocFldIL.MarkLabel(tru210)
GetLocFldIL.MarkSequencePoint(doc9, 1485, 1, 1485, 100)
GetLocFldIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem")
GetLocFldIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").GetField("FieldBldr"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").GetField("FieldBldr").FieldType
GetLocFldIL.Emit(OpCodes.Stloc, 0)
GetLocFldIL.MarkSequencePoint(doc9, 1486, 1, 1486, 100)
GetLocFldIL.Emit(OpCodes.Br, cont210)
GetLocFldIL.MarkLabel(fa210)
GetLocFldIL.MarkSequencePoint(doc9, 1487, 1, 1487, 100)
Dim typ332(-1) As Type
GetLocFldIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnInhTyp"))
Typ = GetType(AsmFactory).GetField("CurnInhTyp").FieldType
ReDim Preserve typ332(UBound(typ332) + 1)
typ332(UBound(typ332)) = Typ
GetLocFldIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ332(UBound(typ332) + 1)
typ332(UBound(typ332)) = Typ
GetLocFldIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadField", typ332))
Typ = GetType(Loader).GetMethod("LoadField", typ332).ReturnType
GetLocFldIL.Emit(OpCodes.Stloc, 0)
GetLocFldIL.MarkSequencePoint(doc9, 1488, 1, 1488, 100)
GetLocFldIL.Emit(OpCodes.Br, cont210)
GetLocFldIL.MarkLabel(cont210)
GetLocFldIL.MarkSequencePoint(doc9, 1490, 1, 1490, 100)
GetLocFldIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(FieldInfo)
GetLocFldIL.MarkSequencePoint(doc9, 1492, 1, 1492, 100)
GetLocFldIL.Emit(OpCodes.Ret)
Dim typ333(-1) As Type
ReDim Preserve typ333(UBound(typ333) + 1)
typ333(UBound(typ333)) = GetType(System.String)
ReDim Preserve typ333(UBound(typ333) + 1)
typ333(UBound(typ333)) = GetType(System.Type).MakeArrayType()
Dim GetLocMet As MethodBuilder = Helpers.DefineMethod("GetLocMet", MethodAttributes.Public Or MethodAttributes.Static, GetType(FieldInfo), typ333)
Dim GetLocMetIL As ILGenerator = GetLocMet.GetILGenerator()
Dim GetLocMetparam01 As ParameterBuilder = GetLocMet.DefineParameter(1, ParameterAttributes.None, "nam")
Dim GetLocMetparam02 As ParameterBuilder = GetLocMet.DefineParameter(2, ParameterAttributes.None, "typs")
GetLocMetIL.MarkSequencePoint(doc9, 1496, 1, 1496, 100)
Dim locbldr218 As LocalBuilder = GetLocMetIL.DeclareLocal(GetType(MethodInfo))
locbldr218.SetLocalSymInfo("metinf")
GetLocMetIL.Emit(OpCodes.Ldnull)
GetLocMetIL.Emit(OpCodes.Stloc, 0)
GetLocMetIL.MarkSequencePoint(doc9, 1497, 1, 1497, 100)
Dim locbldr219 As LocalBuilder = GetLocMetIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
locbldr219.SetLocalSymInfo("meti")
GetLocMetIL.MarkSequencePoint(doc9, 1499, 1, 1499, 100)
Dim typ334(-1) As Type
GetLocMetIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ334(UBound(typ334) + 1)
typ334(UBound(typ334)) = Typ
GetLocMetIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ334(UBound(typ334) + 1)
typ334(UBound(typ334)) = Typ
GetLocMetIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindMet", typ334))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindMet", typ334).ReturnType
GetLocMetIL.Emit(OpCodes.Stloc, 1)
GetLocMetIL.MarkSequencePoint(doc9, 1501, 1, 1501, 100)
GetLocMetIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem")
GetLocMetIL.Emit(OpCodes.Ldnull)
Dim fa211 As System.Reflection.Emit.Label = GetLocMetIL.DefineLabel()
Dim tru211 As System.Reflection.Emit.Label = GetLocMetIL.DefineLabel()
Dim cont211 As System.Reflection.Emit.Label = GetLocMetIL.DefineLabel()
GetLocMetIL.Emit(OpCodes.Beq, fa211)
GetLocMetIL.Emit(OpCodes.Br, tru211)
GetLocMetIL.MarkLabel(tru211)
GetLocMetIL.MarkSequencePoint(doc9, 1502, 1, 1502, 100)
GetLocMetIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem")
GetLocMetIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").GetField("MethodBldr"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").GetField("MethodBldr").FieldType
GetLocMetIL.Emit(OpCodes.Stloc, 0)
GetLocMetIL.MarkSequencePoint(doc9, 1503, 1, 1503, 100)
GetLocMetIL.Emit(OpCodes.Br, cont211)
GetLocMetIL.MarkLabel(fa211)
GetLocMetIL.MarkSequencePoint(doc9, 1504, 1, 1504, 100)
Dim typ335(-1) As Type
GetLocMetIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnInhTyp"))
Typ = GetType(AsmFactory).GetField("CurnInhTyp").FieldType
ReDim Preserve typ335(UBound(typ335) + 1)
typ335(UBound(typ335)) = Typ
GetLocMetIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ335(UBound(typ335) + 1)
typ335(UBound(typ335)) = Typ
GetLocMetIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ335(UBound(typ335) + 1)
typ335(UBound(typ335)) = Typ
GetLocMetIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadMethod", typ335))
Typ = GetType(Loader).GetMethod("LoadMethod", typ335).ReturnType
GetLocMetIL.Emit(OpCodes.Stloc, 0)
GetLocMetIL.MarkSequencePoint(doc9, 1505, 1, 1505, 100)
GetLocMetIL.Emit(OpCodes.Br, cont211)
GetLocMetIL.MarkLabel(cont211)
GetLocMetIL.MarkSequencePoint(doc9, 1507, 1, 1507, 100)
GetLocMetIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodInfo)
GetLocMetIL.MarkSequencePoint(doc9, 1509, 1, 1509, 100)
GetLocMetIL.Emit(OpCodes.Ret)
Helpers.CreateType()
End Sub


Dim doc10 As ISymbolDocumentWriter


Dim doc11 As ISymbolDocumentWriter

Sub OpStack()
Dim OpStack As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "OpStack", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim Stack As FieldBuilder = OpStack.DefineField("Stack", GetType(Expr), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = OpStack.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc11, 14, 1, 14, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc11, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, GetType(Expr).GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, Stack)
ctor0IL.MarkSequencePoint(doc11, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(Token)
Dim PushOp As MethodBuilder = OpStack.DefineMethod("PushOp", MethodAttributes.Public, GetType(System.Void), typ0)
Dim PushOpIL As ILGenerator = PushOp.GetILGenerator()
Dim PushOpparam01 As ParameterBuilder = PushOp.DefineParameter(1, ParameterAttributes.None, "optok")
PushOpIL.MarkSequencePoint(doc11, 19, 1, 19, 100)
Dim typ1(-1) As Type
PushOpIL.Emit(OpCodes.Ldarg_0)
PushOpIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
PushOpIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = Typ
PushOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ1))
Typ = Typ03.GetMethod("AddToken", typ1).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
PushOpIL.Emit(OpCodes.Pop)
End If
PushOpIL.MarkSequencePoint(doc11, 20, 1, 20, 100)
PushOpIL.Emit(OpCodes.Ret)
Dim PopOp As MethodBuilder = OpStack.DefineMethod("PopOp", MethodAttributes.Public, GetType(System.Void), Type.EmptyTypes)
Dim PopOpIL As ILGenerator = PopOp.GetILGenerator()
PopOpIL.MarkSequencePoint(doc11, 23, 1, 23, 100)
PopOpIL.Emit(OpCodes.Ldarg_0)
PopOpIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
PopOpIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
PopOpIL.Emit(OpCodes.Ldlen)
PopOpIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
PopOpIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa212 As System.Reflection.Emit.Label = PopOpIL.DefineLabel()
Dim tru212 As System.Reflection.Emit.Label = PopOpIL.DefineLabel()
Dim cont212 As System.Reflection.Emit.Label = PopOpIL.DefineLabel()
PopOpIL.Emit(OpCodes.Beq, tru212)
PopOpIL.Emit(OpCodes.Br, fa212)
PopOpIL.MarkLabel(tru212)
PopOpIL.MarkSequencePoint(doc11, 24, 1, 24, 100)
PopOpIL.Emit(OpCodes.Br, cont212)
PopOpIL.MarkLabel(fa212)
PopOpIL.MarkSequencePoint(doc11, 25, 1, 25, 100)
Dim locbldr220 As LocalBuilder = PopOpIL.DeclareLocal(GetType(System.Int32))
locbldr220.SetLocalSymInfo("ind")
PopOpIL.Emit(OpCodes.Ldarg_0)
PopOpIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
PopOpIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
PopOpIL.Emit(OpCodes.Ldlen)
PopOpIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
PopOpIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PopOpIL.Emit(OpCodes.Sub)
PopOpIL.Emit(OpCodes.Stloc, 0)
PopOpIL.MarkSequencePoint(doc11, 26, 1, 26, 100)
Dim typ2(-1) As Type
PopOpIL.Emit(OpCodes.Ldarg_0)
PopOpIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
PopOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = Typ
PopOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ2))
Typ = Typ03.GetMethod("RemToken", typ2).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
PopOpIL.Emit(OpCodes.Pop)
End If
PopOpIL.MarkSequencePoint(doc11, 27, 1, 27, 100)
PopOpIL.Emit(OpCodes.Br, cont212)
PopOpIL.MarkLabel(cont212)
PopOpIL.MarkSequencePoint(doc11, 28, 1, 28, 100)
PopOpIL.Emit(OpCodes.Ret)
Dim TopOp As MethodBuilder = OpStack.DefineMethod("TopOp", MethodAttributes.Public, GetType(Token), Type.EmptyTypes)
Dim TopOpIL As ILGenerator = TopOp.GetILGenerator()
TopOpIL.MarkSequencePoint(doc11, 31, 1, 31, 100)
TopOpIL.Emit(OpCodes.Ldarg_0)
TopOpIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
TopOpIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
TopOpIL.Emit(OpCodes.Ldlen)
TopOpIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
TopOpIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa213 As System.Reflection.Emit.Label = TopOpIL.DefineLabel()
Dim tru213 As System.Reflection.Emit.Label = TopOpIL.DefineLabel()
Dim cont213 As System.Reflection.Emit.Label = TopOpIL.DefineLabel()
TopOpIL.Emit(OpCodes.Beq, tru213)
TopOpIL.Emit(OpCodes.Br, fa213)
TopOpIL.MarkLabel(tru213)
TopOpIL.MarkSequencePoint(doc11, 32, 1, 32, 100)
TopOpIL.Emit(OpCodes.Ldnull)
TopOpIL.MarkSequencePoint(doc11, 33, 1, 33, 100)
TopOpIL.Emit(OpCodes.Br, cont213)
TopOpIL.MarkLabel(fa213)
TopOpIL.MarkSequencePoint(doc11, 34, 1, 34, 100)
Dim locbldr221 As LocalBuilder = TopOpIL.DeclareLocal(GetType(System.Int32))
locbldr221.SetLocalSymInfo("ind")
TopOpIL.Emit(OpCodes.Ldarg_0)
TopOpIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
TopOpIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
TopOpIL.Emit(OpCodes.Ldlen)
TopOpIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
TopOpIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
TopOpIL.Emit(OpCodes.Sub)
TopOpIL.Emit(OpCodes.Stloc, 0)
TopOpIL.MarkSequencePoint(doc11, 35, 1, 35, 100)
Dim locbldr222 As LocalBuilder = TopOpIL.DeclareLocal(GetType(Token))
locbldr222.SetLocalSymInfo("optok")
TopOpIL.Emit(OpCodes.Ldarg_0)
TopOpIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
TopOpIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
TopOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
TopOpIL.Emit(OpCodes.Conv_U)
Typ = Typ02
TopOpIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
TopOpIL.Emit(OpCodes.Stloc, 1)
TopOpIL.MarkSequencePoint(doc11, 36, 1, 36, 100)
TopOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Token)
TopOpIL.MarkSequencePoint(doc11, 37, 1, 37, 100)
TopOpIL.Emit(OpCodes.Br, cont213)
TopOpIL.MarkLabel(cont213)
TopOpIL.MarkSequencePoint(doc11, 38, 1, 38, 100)
TopOpIL.Emit(OpCodes.Ret)
Dim getLength As MethodBuilder = OpStack.DefineMethod("getLength", MethodAttributes.Public, GetType(System.Int32), Type.EmptyTypes)
Dim getLengthIL As ILGenerator = getLength.GetILGenerator()
getLengthIL.MarkSequencePoint(doc11, 41, 1, 41, 100)
getLengthIL.Emit(OpCodes.Ldarg_0)
getLengthIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
getLengthIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
getLengthIL.Emit(OpCodes.Ldlen)
getLengthIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
getLengthIL.MarkSequencePoint(doc11, 42, 1, 42, 100)
getLengthIL.Emit(OpCodes.Ret)
OpStack.CreateType()
End Sub


Dim doc12 As ISymbolDocumentWriter

Sub Evaluator()
Dim Evaluator As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "Evaluator", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass Or TypeAttributes.BeforeFieldInit, GetType(System.Object))
Dim Stack As FieldBuilder = Evaluator.DefineField("Stack", asm.GetType("dylan.NET.Tokenizer.CodeGen.OpStack"), FieldAttributes.Public)
Dim InstToken As FieldBuilder = Evaluator.DefineField("InstToken", GetType(Token), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = Evaluator.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc12, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc12, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, Stack)
ctor0IL.MarkSequencePoint(doc12, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, GetType(Token).GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, InstToken)
ctor0IL.MarkSequencePoint(doc12, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(Token)
Dim RetPrec As MethodBuilder = Evaluator.DefineMethod("RetPrec", MethodAttributes.Public, GetType(System.Int32), typ0)
Dim RetPrecIL As ILGenerator = RetPrec.GetILGenerator()
Dim RetPrecparam01 As ParameterBuilder = RetPrec.DefineParameter(1, ParameterAttributes.None, "tok")
RetPrecIL.MarkSequencePoint(doc12, 21, 1, 21, 100)
Dim locbldr223 As LocalBuilder = RetPrecIL.DeclareLocal(GetType(System.Type))
locbldr223.SetLocalSymInfo("typ")
RetPrecIL.Emit(OpCodes.Ldnull)
RetPrecIL.Emit(OpCodes.Stloc, 0)
RetPrecIL.MarkSequencePoint(doc12, 22, 1, 22, 100)
Dim locbldr224 As LocalBuilder = RetPrecIL.DeclareLocal(GetType(System.Boolean))
locbldr224.SetLocalSymInfo("b")
RetPrecIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
RetPrecIL.Emit(OpCodes.Stloc, 1)
RetPrecIL.MarkSequencePoint(doc12, 23, 1, 23, 100)
Dim locbldr225 As LocalBuilder = RetPrecIL.DeclareLocal(GetType(System.Int32))
locbldr225.SetLocalSymInfo("prec")
RetPrecIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
RetPrecIL.Emit(OpCodes.Stloc, 2)
RetPrecIL.MarkSequencePoint(doc12, 25, 1, 25, 100)
Dim label0 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
RetPrecIL.MarkSequencePoint(doc12, 27, 1, 27, 100)
RetPrecIL.Emit(OpCodes.Ldtoken, GetType(Op))
Dim typ1 As Type() = {GetType(System.RuntimeTypeHandle)}
RetPrecIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ1))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ1).ReturnType
RetPrecIL.Emit(OpCodes.Stloc, 0)
RetPrecIL.MarkSequencePoint(doc12, 28, 1, 28, 100)
Dim typ2(-1) As Type
RetPrecIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
RetPrecIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
RetPrecIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = Typ
RetPrecIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ2))
Typ = Typ03.GetMethod("IsInstanceOfType", typ2).ReturnType
RetPrecIL.Emit(OpCodes.Stloc, 1)
RetPrecIL.MarkSequencePoint(doc12, 30, 1, 30, 100)
RetPrecIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
RetPrecIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa214 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim tru214 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim cont214 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
RetPrecIL.Emit(OpCodes.Beq, tru214)
RetPrecIL.Emit(OpCodes.Br, fa214)
RetPrecIL.MarkLabel(tru214)
RetPrecIL.MarkSequencePoint(doc12, 31, 1, 31, 100)
Dim locbldr226 As LocalBuilder = RetPrecIL.DeclareLocal(GetType(Op))
locbldr226.SetLocalSymInfo("optok")
RetPrecIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
RetPrecIL.Emit(OpCodes.Stloc, 3)
RetPrecIL.MarkSequencePoint(doc12, 32, 1, 32, 100)
RetPrecIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Op)
RetPrecIL.Emit(OpCodes.Ldfld, GetType(Op).GetField("PrecNo"))
Typ = GetType(Op).GetField("PrecNo").FieldType
RetPrecIL.Emit(OpCodes.Stloc, 2)
RetPrecIL.MarkSequencePoint(doc12, 33, 1, 33, 100)
RetPrecIL.Emit(OpCodes.Br, label0)
RetPrecIL.MarkSequencePoint(doc12, 34, 1, 34, 100)
RetPrecIL.Emit(OpCodes.Br, cont214)
RetPrecIL.MarkLabel(fa214)
RetPrecIL.Emit(OpCodes.Br, cont214)
RetPrecIL.MarkLabel(cont214)
RetPrecIL.MarkSequencePoint(doc12, 36, 1, 36, 100)
RetPrecIL.Emit(OpCodes.Ldtoken, GetType(LParen))
Dim typ3 As Type() = {GetType(System.RuntimeTypeHandle)}
RetPrecIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ3))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ3).ReturnType
RetPrecIL.Emit(OpCodes.Stloc, 0)
RetPrecIL.MarkSequencePoint(doc12, 37, 1, 37, 100)
Dim typ4(-1) As Type
RetPrecIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
RetPrecIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
RetPrecIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
RetPrecIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ4))
Typ = Typ03.GetMethod("IsInstanceOfType", typ4).ReturnType
RetPrecIL.Emit(OpCodes.Stloc, 1)
RetPrecIL.MarkSequencePoint(doc12, 39, 1, 39, 100)
RetPrecIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
RetPrecIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa215 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim tru215 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim cont215 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
RetPrecIL.Emit(OpCodes.Beq, tru215)
RetPrecIL.Emit(OpCodes.Br, fa215)
RetPrecIL.MarkLabel(tru215)
RetPrecIL.MarkSequencePoint(doc12, 40, 1, 40, 100)
RetPrecIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
RetPrecIL.Emit(OpCodes.Stloc, 2)
RetPrecIL.MarkSequencePoint(doc12, 41, 1, 41, 100)
RetPrecIL.Emit(OpCodes.Br, label0)
RetPrecIL.MarkSequencePoint(doc12, 42, 1, 42, 100)
RetPrecIL.Emit(OpCodes.Br, cont215)
RetPrecIL.MarkLabel(fa215)
RetPrecIL.Emit(OpCodes.Br, cont215)
RetPrecIL.MarkLabel(cont215)
RetPrecIL.MarkSequencePoint(doc12, 44, 1, 44, 100)
RetPrecIL.Emit(OpCodes.Ldtoken, GetType(RParen))
Dim typ5 As Type() = {GetType(System.RuntimeTypeHandle)}
RetPrecIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ5))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ5).ReturnType
RetPrecIL.Emit(OpCodes.Stloc, 0)
RetPrecIL.MarkSequencePoint(doc12, 45, 1, 45, 100)
Dim typ6(-1) As Type
RetPrecIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
RetPrecIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
RetPrecIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = Typ
RetPrecIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ6))
Typ = Typ03.GetMethod("IsInstanceOfType", typ6).ReturnType
RetPrecIL.Emit(OpCodes.Stloc, 1)
RetPrecIL.MarkSequencePoint(doc12, 47, 1, 47, 100)
RetPrecIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
RetPrecIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa216 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim tru216 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim cont216 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
RetPrecIL.Emit(OpCodes.Beq, tru216)
RetPrecIL.Emit(OpCodes.Br, fa216)
RetPrecIL.MarkLabel(tru216)
RetPrecIL.MarkSequencePoint(doc12, 48, 1, 48, 100)
RetPrecIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
RetPrecIL.Emit(OpCodes.Stloc, 2)
RetPrecIL.MarkSequencePoint(doc12, 49, 1, 49, 100)
RetPrecIL.Emit(OpCodes.Br, label0)
RetPrecIL.MarkSequencePoint(doc12, 50, 1, 50, 100)
RetPrecIL.Emit(OpCodes.Br, cont216)
RetPrecIL.MarkLabel(fa216)
RetPrecIL.Emit(OpCodes.Br, cont216)
RetPrecIL.MarkLabel(cont216)
RetPrecIL.MarkSequencePoint(doc12, 52, 1, 52, 100)
RetPrecIL.MarkLabel(label0)
RetPrecIL.MarkSequencePoint(doc12, 54, 1, 54, 100)
RetPrecIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
RetPrecIL.MarkSequencePoint(doc12, 56, 1, 56, 100)
RetPrecIL.Emit(OpCodes.Ret)
Dim typ7(-1) As Type
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = GetType(Token)
Dim isLParen As MethodBuilder = Evaluator.DefineMethod("isLParen", MethodAttributes.Public, GetType(System.Boolean), typ7)
Dim isLParenIL As ILGenerator = isLParen.GetILGenerator()
Dim isLParenparam01 As ParameterBuilder = isLParen.DefineParameter(1, ParameterAttributes.None, "tok")
isLParenIL.MarkSequencePoint(doc12, 59, 1, 59, 100)
Dim locbldr227 As LocalBuilder = isLParenIL.DeclareLocal(GetType(System.Type))
locbldr227.SetLocalSymInfo("typ")
isLParenIL.Emit(OpCodes.Ldtoken, GetType(LParen))
Dim typ8 As Type() = {GetType(System.RuntimeTypeHandle)}
isLParenIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ8))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ8).ReturnType
isLParenIL.Emit(OpCodes.Stloc, 0)
isLParenIL.MarkSequencePoint(doc12, 60, 1, 60, 100)
Dim typ9(-1) As Type
isLParenIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
isLParenIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
isLParenIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = Typ
isLParenIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ9))
Typ = Typ03.GetMethod("IsInstanceOfType", typ9).ReturnType
isLParenIL.MarkSequencePoint(doc12, 61, 1, 61, 100)
isLParenIL.Emit(OpCodes.Ret)
Dim typ10(-1) As Type
ReDim Preserve typ10(UBound(typ10) + 1)
typ10(UBound(typ10)) = GetType(Token)
Dim isOp As MethodBuilder = Evaluator.DefineMethod("isOp", MethodAttributes.Public, GetType(System.Boolean), typ10)
Dim isOpIL As ILGenerator = isOp.GetILGenerator()
Dim isOpparam01 As ParameterBuilder = isOp.DefineParameter(1, ParameterAttributes.None, "tok")
isOpIL.MarkSequencePoint(doc12, 64, 1, 64, 100)
Dim locbldr228 As LocalBuilder = isOpIL.DeclareLocal(GetType(System.Type))
locbldr228.SetLocalSymInfo("typ")
isOpIL.Emit(OpCodes.Ldtoken, GetType(Op))
Dim typ11 As Type() = {GetType(System.RuntimeTypeHandle)}
isOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ11))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ11).ReturnType
isOpIL.Emit(OpCodes.Stloc, 0)
isOpIL.MarkSequencePoint(doc12, 65, 1, 65, 100)
Dim typ12(-1) As Type
isOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
isOpIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
isOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ12(UBound(typ12) + 1)
typ12(UBound(typ12)) = Typ
isOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ12))
Typ = Typ03.GetMethod("IsInstanceOfType", typ12).ReturnType
isOpIL.MarkSequencePoint(doc12, 66, 1, 66, 100)
isOpIL.Emit(OpCodes.Ret)
Dim typ13(-1) As Type
ReDim Preserve typ13(UBound(typ13) + 1)
typ13(UBound(typ13)) = GetType(Expr)
Dim ConvToRPN As MethodBuilder = Evaluator.DefineMethod("ConvToRPN", MethodAttributes.Public, GetType(Expr), typ13)
Dim ConvToRPNIL As ILGenerator = ConvToRPN.GetILGenerator()
Dim ConvToRPNparam01 As ParameterBuilder = ConvToRPN.DefineParameter(1, ParameterAttributes.None, "exp")
ConvToRPNIL.MarkSequencePoint(doc12, 70, 1, 70, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.OpStack").GetConstructor(Type.EmptyTypes))
ConvToRPNIL.Emit(OpCodes.Stfld, Stack)
ConvToRPNIL.MarkSequencePoint(doc12, 71, 1, 71, 100)
Dim locbldr229 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(Expr))
locbldr229.SetLocalSymInfo("exp2")
ConvToRPNIL.Emit(OpCodes.Newobj, GetType(Expr).GetConstructor(Type.EmptyTypes))
ConvToRPNIL.Emit(OpCodes.Stloc, 0)
ConvToRPNIL.MarkSequencePoint(doc12, 72, 1, 72, 100)
Dim locbldr230 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(System.Int32))
locbldr230.SetLocalSymInfo("i")
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Stloc, 1)
ConvToRPNIL.MarkSequencePoint(doc12, 73, 1, 73, 100)
Dim locbldr231 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(System.Int32))
locbldr231.SetLocalSymInfo("len")
ConvToRPNIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToRPNIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
ConvToRPNIL.Emit(OpCodes.Ldlen)
ConvToRPNIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Sub)
ConvToRPNIL.Emit(OpCodes.Stloc, 2)
ConvToRPNIL.MarkSequencePoint(doc12, 74, 1, 74, 100)
Dim locbldr232 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(System.Int32))
locbldr232.SetLocalSymInfo("int1")
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Stloc, 3)
ConvToRPNIL.MarkSequencePoint(doc12, 75, 1, 75, 100)
Dim locbldr233 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(System.Int32))
locbldr233.SetLocalSymInfo("int2")
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Stloc, 4)
ConvToRPNIL.MarkSequencePoint(doc12, 76, 1, 76, 100)
Dim locbldr234 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(Token))
locbldr234.SetLocalSymInfo("tok")
ConvToRPNIL.Emit(OpCodes.Ldnull)
ConvToRPNIL.Emit(OpCodes.Stloc, 5)
ConvToRPNIL.MarkSequencePoint(doc12, 77, 1, 77, 100)
Dim locbldr235 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(Token))
locbldr235.SetLocalSymInfo("tok2")
ConvToRPNIL.Emit(OpCodes.Ldnull)
ConvToRPNIL.Emit(OpCodes.Stloc, 6)
ConvToRPNIL.MarkSequencePoint(doc12, 78, 1, 78, 100)
Dim locbldr236 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(System.Type))
locbldr236.SetLocalSymInfo("typ")
ConvToRPNIL.Emit(OpCodes.Ldnull)
ConvToRPNIL.Emit(OpCodes.Stloc, 7)
ConvToRPNIL.MarkSequencePoint(doc12, 79, 1, 79, 100)
Dim locbldr237 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(System.Boolean))
locbldr237.SetLocalSymInfo("b")
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc12, 80, 1, 80, 100)
Dim locbldr238 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(System.Boolean))
locbldr238.SetLocalSymInfo("orflg")
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Stloc, 9)
ConvToRPNIL.MarkSequencePoint(doc12, 82, 1, 82, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Expr)
ConvToRPNIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToRPNIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Line"))
Typ = GetType(Expr).GetField("Line").FieldType
ConvToRPNIL.Emit(OpCodes.Stfld, GetType(Expr).GetField("Line"))
ConvToRPNIL.MarkSequencePoint(doc12, 84, 1, 84, 100)
Dim label1 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.MarkSequencePoint(doc12, 85, 1, 85, 100)
Dim label2 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.MarkSequencePoint(doc12, 86, 1, 86, 100)
Dim label3 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.MarkSequencePoint(doc12, 88, 1, 88, 100)
ConvToRPNIL.MarkLabel(label2)
ConvToRPNIL.MarkSequencePoint(doc12, 90, 1, 90, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Add)
ConvToRPNIL.Emit(OpCodes.Stloc, 1)
ConvToRPNIL.MarkSequencePoint(doc12, 92, 1, 92, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToRPNIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
ConvToRPNIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ConvToRPNIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ConvToRPNIL.Emit(OpCodes.Stloc, 5)
ConvToRPNIL.MarkSequencePoint(doc12, 94, 1, 94, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ14(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, isOp)
Typ = isOp.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 9)
ConvToRPNIL.MarkSequencePoint(doc12, 95, 1, 95, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ15(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReDim Preserve typ15(UBound(typ15) + 1)
typ15(UBound(typ15)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, isLParen)
Typ = isLParen.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc12, 96, 1, 96, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Or)
ConvToRPNIL.Emit(OpCodes.Stloc, 9)
ConvToRPNIL.MarkSequencePoint(doc12, 97, 1, 97, 100)
ConvToRPNIL.Emit(OpCodes.Ldtoken, GetType(RParen))
Dim typ16 As Type() = {GetType(System.RuntimeTypeHandle)}
ConvToRPNIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ16))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ16).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 7)
ConvToRPNIL.MarkSequencePoint(doc12, 98, 1, 98, 100)
Dim typ17(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Type)
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ConvToRPNIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ17(UBound(typ17) + 1)
typ17(UBound(typ17)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ17))
Typ = Typ03.GetMethod("IsInstanceOfType", typ17).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc12, 99, 1, 99, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Or)
ConvToRPNIL.Emit(OpCodes.Stloc, 9)
ConvToRPNIL.MarkSequencePoint(doc12, 101, 1, 101, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa217 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru217 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont217 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru217)
ConvToRPNIL.Emit(OpCodes.Br, fa217)
ConvToRPNIL.MarkLabel(tru217)
ConvToRPNIL.MarkSequencePoint(doc12, 102, 1, 102, 100)
Dim typ18(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Expr)
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReDim Preserve typ18(UBound(typ18) + 1)
typ18(UBound(typ18)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ18))
Typ = Typ03.GetMethod("AddToken", typ18).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc12, 103, 1, 103, 100)
ConvToRPNIL.Emit(OpCodes.Br, label3)
ConvToRPNIL.MarkSequencePoint(doc12, 104, 1, 104, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont217)
ConvToRPNIL.MarkLabel(fa217)
ConvToRPNIL.Emit(OpCodes.Br, cont217)
ConvToRPNIL.MarkLabel(cont217)
ConvToRPNIL.MarkSequencePoint(doc12, 106, 1, 106, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ19(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReDim Preserve typ19(UBound(typ19) + 1)
typ19(UBound(typ19)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, isOp)
Typ = isOp.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc12, 108, 1, 108, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa218 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru218 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont218 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru218)
ConvToRPNIL.Emit(OpCodes.Br, fa218)
ConvToRPNIL.MarkLabel(tru218)
ConvToRPNIL.MarkSequencePoint(doc12, 109, 1, 109, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("getLength", Type.EmptyTypes))
Typ = Typ03.GetMethod("getLength", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 3)
ConvToRPNIL.MarkSequencePoint(doc12, 110, 1, 110, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa219 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru219 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont219 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, fa219)
ConvToRPNIL.Emit(OpCodes.Br, tru219)
ConvToRPNIL.MarkLabel(tru219)
ConvToRPNIL.MarkSequencePoint(doc12, 111, 1, 111, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("TopOp", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 6)
ConvToRPNIL.MarkSequencePoint(doc12, 112, 1, 112, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ22(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReDim Preserve typ22(UBound(typ22) + 1)
typ22(UBound(typ22)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, RetPrec)
Typ = RetPrec.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 3)
ConvToRPNIL.MarkSequencePoint(doc12, 113, 1, 113, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ23(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
ReDim Preserve typ23(UBound(typ23) + 1)
typ23(UBound(typ23)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, RetPrec)
Typ = RetPrec.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 4)
ConvToRPNIL.MarkSequencePoint(doc12, 114, 1, 114, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
Dim fa220 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru220 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont220 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Ble, tru220)
ConvToRPNIL.Emit(OpCodes.Br, fa220)
ConvToRPNIL.MarkLabel(tru220)
ConvToRPNIL.MarkSequencePoint(doc12, 115, 1, 115, 100)
Dim typ24(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Expr)
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
ReDim Preserve typ24(UBound(typ24) + 1)
typ24(UBound(typ24)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ24))
Typ = Typ03.GetMethod("AddToken", typ24).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc12, 116, 1, 116, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("PopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("PopOp", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc12, 117, 1, 117, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont220)
ConvToRPNIL.MarkLabel(fa220)
ConvToRPNIL.Emit(OpCodes.Br, cont220)
ConvToRPNIL.MarkLabel(cont220)
ConvToRPNIL.MarkSequencePoint(doc12, 118, 1, 118, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont219)
ConvToRPNIL.MarkLabel(fa219)
ConvToRPNIL.Emit(OpCodes.Br, cont219)
ConvToRPNIL.MarkLabel(cont219)
ConvToRPNIL.MarkSequencePoint(doc12, 119, 1, 119, 100)
Dim typ26(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReDim Preserve typ26(UBound(typ26) + 1)
typ26(UBound(typ26)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("PushOp", typ26))
Typ = Typ03.GetMethod("PushOp", typ26).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc12, 120, 1, 120, 100)
ConvToRPNIL.Emit(OpCodes.Br, label3)
ConvToRPNIL.MarkSequencePoint(doc12, 121, 1, 121, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont218)
ConvToRPNIL.MarkLabel(fa218)
ConvToRPNIL.Emit(OpCodes.Br, cont218)
ConvToRPNIL.MarkLabel(cont218)
ConvToRPNIL.MarkSequencePoint(doc12, 123, 1, 123, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ27(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReDim Preserve typ27(UBound(typ27) + 1)
typ27(UBound(typ27)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, isLParen)
Typ = isLParen.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc12, 125, 1, 125, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa221 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru221 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont221 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru221)
ConvToRPNIL.Emit(OpCodes.Br, fa221)
ConvToRPNIL.MarkLabel(tru221)
ConvToRPNIL.MarkSequencePoint(doc12, 126, 1, 126, 100)
Dim typ28(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReDim Preserve typ28(UBound(typ28) + 1)
typ28(UBound(typ28)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("PushOp", typ28))
Typ = Typ03.GetMethod("PushOp", typ28).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc12, 127, 1, 127, 100)
ConvToRPNIL.Emit(OpCodes.Br, label3)
ConvToRPNIL.MarkSequencePoint(doc12, 128, 1, 128, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont221)
ConvToRPNIL.MarkLabel(fa221)
ConvToRPNIL.Emit(OpCodes.Br, cont221)
ConvToRPNIL.MarkLabel(cont221)
ConvToRPNIL.MarkSequencePoint(doc12, 130, 1, 130, 100)
ConvToRPNIL.Emit(OpCodes.Ldtoken, GetType(RParen))
Dim typ29 As Type() = {GetType(System.RuntimeTypeHandle)}
ConvToRPNIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ29))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ29).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 7)
ConvToRPNIL.MarkSequencePoint(doc12, 131, 1, 131, 100)
Dim typ30(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Type)
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ConvToRPNIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ30(UBound(typ30) + 1)
typ30(UBound(typ30)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ30))
Typ = Typ03.GetMethod("IsInstanceOfType", typ30).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc12, 133, 1, 133, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa222 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru222 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont222 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru222)
ConvToRPNIL.Emit(OpCodes.Br, fa222)
ConvToRPNIL.MarkLabel(tru222)
ConvToRPNIL.MarkSequencePoint(doc12, 134, 1, 134, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("getLength", Type.EmptyTypes))
Typ = Typ03.GetMethod("getLength", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 3)
ConvToRPNIL.MarkSequencePoint(doc12, 135, 1, 135, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa223 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru223 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont223 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, fa223)
ConvToRPNIL.Emit(OpCodes.Br, tru223)
ConvToRPNIL.MarkLabel(tru223)
ConvToRPNIL.MarkSequencePoint(doc12, 136, 1, 136, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("TopOp", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 6)
ConvToRPNIL.MarkSequencePoint(doc12, 137, 1, 137, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ33(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
ReDim Preserve typ33(UBound(typ33) + 1)
typ33(UBound(typ33)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, isLParen)
Typ = isLParen.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc12, 138, 1, 138, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa224 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru224 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont224 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru224)
ConvToRPNIL.Emit(OpCodes.Br, fa224)
ConvToRPNIL.MarkLabel(tru224)
ConvToRPNIL.MarkSequencePoint(doc12, 139, 1, 139, 100)
Dim typ34(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Expr)
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
ReDim Preserve typ34(UBound(typ34) + 1)
typ34(UBound(typ34)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ34))
Typ = Typ03.GetMethod("AddToken", typ34).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc12, 140, 1, 140, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("PopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("PopOp", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc12, 141, 1, 141, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("getLength", Type.EmptyTypes))
Typ = Typ03.GetMethod("getLength", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 3)
ConvToRPNIL.MarkSequencePoint(doc12, 142, 1, 142, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa225 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru225 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont225 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, fa225)
ConvToRPNIL.Emit(OpCodes.Br, tru225)
ConvToRPNIL.MarkLabel(tru225)
ConvToRPNIL.MarkSequencePoint(doc12, 143, 1, 143, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("TopOp", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 6)
ConvToRPNIL.MarkSequencePoint(doc12, 144, 1, 144, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ38(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
ReDim Preserve typ38(UBound(typ38) + 1)
typ38(UBound(typ38)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, isLParen)
Typ = isLParen.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc12, 145, 1, 145, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa226 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru226 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont226 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru226)
ConvToRPNIL.Emit(OpCodes.Br, fa226)
ConvToRPNIL.MarkLabel(tru226)
ConvToRPNIL.MarkSequencePoint(doc12, 146, 1, 146, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("PopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("PopOp", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc12, 147, 1, 147, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont226)
ConvToRPNIL.MarkLabel(fa226)
ConvToRPNIL.Emit(OpCodes.Br, cont226)
ConvToRPNIL.MarkLabel(cont226)
ConvToRPNIL.MarkSequencePoint(doc12, 148, 1, 148, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont225)
ConvToRPNIL.MarkLabel(fa225)
ConvToRPNIL.Emit(OpCodes.Br, cont225)
ConvToRPNIL.MarkLabel(cont225)
ConvToRPNIL.MarkSequencePoint(doc12, 149, 1, 149, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont224)
ConvToRPNIL.MarkLabel(fa224)
ConvToRPNIL.Emit(OpCodes.Br, cont224)
ConvToRPNIL.MarkLabel(cont224)
ConvToRPNIL.MarkSequencePoint(doc12, 150, 1, 150, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont223)
ConvToRPNIL.MarkLabel(fa223)
ConvToRPNIL.MarkSequencePoint(doc12, 151, 1, 151, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("TopOp", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 6)
ConvToRPNIL.MarkSequencePoint(doc12, 152, 1, 152, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ41(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
ReDim Preserve typ41(UBound(typ41) + 1)
typ41(UBound(typ41)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, isLParen)
Typ = isLParen.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc12, 153, 1, 153, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa227 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru227 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont227 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru227)
ConvToRPNIL.Emit(OpCodes.Br, fa227)
ConvToRPNIL.MarkLabel(tru227)
ConvToRPNIL.MarkSequencePoint(doc12, 154, 1, 154, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("PopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("PopOp", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc12, 155, 1, 155, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont227)
ConvToRPNIL.MarkLabel(fa227)
ConvToRPNIL.Emit(OpCodes.Br, cont227)
ConvToRPNIL.MarkLabel(cont227)
ConvToRPNIL.MarkSequencePoint(doc12, 156, 1, 156, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont223)
ConvToRPNIL.MarkLabel(cont223)
ConvToRPNIL.MarkSequencePoint(doc12, 157, 1, 157, 100)
ConvToRPNIL.Emit(OpCodes.Br, label3)
ConvToRPNIL.MarkSequencePoint(doc12, 158, 1, 158, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont222)
ConvToRPNIL.MarkLabel(fa222)
ConvToRPNIL.Emit(OpCodes.Br, cont222)
ConvToRPNIL.MarkLabel(cont222)
ConvToRPNIL.MarkSequencePoint(doc12, 160, 1, 160, 100)
ConvToRPNIL.MarkLabel(label3)
ConvToRPNIL.MarkSequencePoint(doc12, 162, 1, 162, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa228 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru228 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont228 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru228)
ConvToRPNIL.Emit(OpCodes.Br, fa228)
ConvToRPNIL.MarkLabel(tru228)
ConvToRPNIL.MarkSequencePoint(doc12, 163, 1, 163, 100)
ConvToRPNIL.Emit(OpCodes.Br, label1)
ConvToRPNIL.MarkSequencePoint(doc12, 164, 1, 164, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont228)
ConvToRPNIL.MarkLabel(fa228)
ConvToRPNIL.MarkSequencePoint(doc12, 165, 1, 165, 100)
ConvToRPNIL.Emit(OpCodes.Br, label2)
ConvToRPNIL.MarkSequencePoint(doc12, 166, 1, 166, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont228)
ConvToRPNIL.MarkLabel(cont228)
ConvToRPNIL.MarkSequencePoint(doc12, 168, 1, 168, 100)
ConvToRPNIL.MarkLabel(label1)
ConvToRPNIL.MarkSequencePoint(doc12, 170, 1, 170, 100)
Dim label4 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.MarkSequencePoint(doc12, 171, 1, 171, 100)
Dim label5 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.MarkSequencePoint(doc12, 173, 1, 173, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("getLength", Type.EmptyTypes))
Typ = Typ03.GetMethod("getLength", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 3)
ConvToRPNIL.MarkSequencePoint(doc12, 174, 1, 174, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa229 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru229 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont229 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru229)
ConvToRPNIL.Emit(OpCodes.Br, fa229)
ConvToRPNIL.MarkLabel(tru229)
ConvToRPNIL.MarkSequencePoint(doc12, 175, 1, 175, 100)
ConvToRPNIL.Emit(OpCodes.Br, label5)
ConvToRPNIL.MarkSequencePoint(doc12, 176, 1, 176, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont229)
ConvToRPNIL.MarkLabel(fa229)
ConvToRPNIL.Emit(OpCodes.Br, cont229)
ConvToRPNIL.MarkLabel(cont229)
ConvToRPNIL.MarkSequencePoint(doc12, 178, 1, 178, 100)
ConvToRPNIL.MarkLabel(label4)
ConvToRPNIL.MarkSequencePoint(doc12, 180, 1, 180, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("TopOp", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 6)
ConvToRPNIL.MarkSequencePoint(doc12, 181, 1, 181, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ45(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
ReDim Preserve typ45(UBound(typ45) + 1)
typ45(UBound(typ45)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, isLParen)
Typ = isLParen.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc12, 183, 1, 183, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa230 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru230 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont230 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru230)
ConvToRPNIL.Emit(OpCodes.Br, fa230)
ConvToRPNIL.MarkLabel(tru230)
ConvToRPNIL.MarkSequencePoint(doc12, 184, 1, 184, 100)
Dim typ46(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Expr)
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
ReDim Preserve typ46(UBound(typ46) + 1)
typ46(UBound(typ46)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ46))
Typ = Typ03.GetMethod("AddToken", typ46).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc12, 185, 1, 185, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont230)
ConvToRPNIL.MarkLabel(fa230)
ConvToRPNIL.Emit(OpCodes.Br, cont230)
ConvToRPNIL.MarkLabel(cont230)
ConvToRPNIL.MarkSequencePoint(doc12, 187, 1, 187, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("PopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("PopOp", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc12, 189, 1, 189, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("getLength", Type.EmptyTypes))
Typ = Typ03.GetMethod("getLength", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 3)
ConvToRPNIL.MarkSequencePoint(doc12, 190, 1, 190, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa231 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru231 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont231 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru231)
ConvToRPNIL.Emit(OpCodes.Br, fa231)
ConvToRPNIL.MarkLabel(tru231)
ConvToRPNIL.MarkSequencePoint(doc12, 191, 1, 191, 100)
ConvToRPNIL.Emit(OpCodes.Br, label5)
ConvToRPNIL.MarkSequencePoint(doc12, 192, 1, 192, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont231)
ConvToRPNIL.MarkLabel(fa231)
ConvToRPNIL.MarkSequencePoint(doc12, 193, 1, 193, 100)
ConvToRPNIL.Emit(OpCodes.Br, label4)
ConvToRPNIL.MarkSequencePoint(doc12, 194, 1, 194, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont231)
ConvToRPNIL.MarkLabel(cont231)
ConvToRPNIL.MarkSequencePoint(doc12, 196, 1, 196, 100)
ConvToRPNIL.MarkLabel(label5)
ConvToRPNIL.MarkSequencePoint(doc12, 198, 1, 198, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Expr)
ConvToRPNIL.MarkSequencePoint(doc12, 200, 1, 200, 100)
ConvToRPNIL.Emit(OpCodes.Ret)
Dim typ49(-1) As Type
ReDim Preserve typ49(UBound(typ49) + 1)
typ49(UBound(typ49)) = GetType(Expr)
Dim ConvToAST As MethodBuilder = Evaluator.DefineMethod("ConvToAST", MethodAttributes.Public, GetType(Expr), typ49)
Dim ConvToASTIL As ILGenerator = ConvToAST.GetILGenerator()
Dim ConvToASTparam01 As ParameterBuilder = ConvToAST.DefineParameter(1, ParameterAttributes.None, "exp")
ConvToASTIL.MarkSequencePoint(doc12, 204, 1, 204, 100)
Dim locbldr239 As LocalBuilder = ConvToASTIL.DeclareLocal(GetType(Token))
locbldr239.SetLocalSymInfo("tokf")
ConvToASTIL.MarkSequencePoint(doc12, 205, 1, 205, 100)
Dim locbldr240 As LocalBuilder = ConvToASTIL.DeclareLocal(GetType(System.Int32))
locbldr240.SetLocalSymInfo("i")
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Stloc, 1)
ConvToASTIL.MarkSequencePoint(doc12, 206, 1, 206, 100)
Dim locbldr241 As LocalBuilder = ConvToASTIL.DeclareLocal(GetType(System.Int32))
locbldr241.SetLocalSymInfo("j")
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Stloc, 2)
ConvToASTIL.MarkSequencePoint(doc12, 207, 1, 207, 100)
Dim locbldr242 As LocalBuilder = ConvToASTIL.DeclareLocal(GetType(System.Int32))
locbldr242.SetLocalSymInfo("len")
ConvToASTIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToASTIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
ConvToASTIL.Emit(OpCodes.Ldlen)
ConvToASTIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Stloc, 3)
ConvToASTIL.MarkSequencePoint(doc12, 208, 1, 208, 100)
Dim locbldr243 As LocalBuilder = ConvToASTIL.DeclareLocal(GetType(Token))
locbldr243.SetLocalSymInfo("tok")
ConvToASTIL.Emit(OpCodes.Ldnull)
ConvToASTIL.Emit(OpCodes.Stloc, 4)
ConvToASTIL.MarkSequencePoint(doc12, 209, 1, 209, 100)
Dim locbldr244 As LocalBuilder = ConvToASTIL.DeclareLocal(GetType(Token))
locbldr244.SetLocalSymInfo("tok2")
ConvToASTIL.Emit(OpCodes.Ldnull)
ConvToASTIL.Emit(OpCodes.Stloc, 5)
ConvToASTIL.MarkSequencePoint(doc12, 210, 1, 210, 100)
Dim locbldr245 As LocalBuilder = ConvToASTIL.DeclareLocal(GetType(System.Type))
locbldr245.SetLocalSymInfo("typ")
ConvToASTIL.Emit(OpCodes.Ldnull)
ConvToASTIL.Emit(OpCodes.Stloc, 6)
ConvToASTIL.MarkSequencePoint(doc12, 211, 1, 211, 100)
Dim locbldr246 As LocalBuilder = ConvToASTIL.DeclareLocal(GetType(System.Boolean))
locbldr246.SetLocalSymInfo("b")
ConvToASTIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ConvToASTIL.Emit(OpCodes.Stloc, 7)
ConvToASTIL.MarkSequencePoint(doc12, 212, 1, 212, 100)
Dim locbldr247 As LocalBuilder = ConvToASTIL.DeclareLocal(GetType(Op))
locbldr247.SetLocalSymInfo("optok")
ConvToASTIL.MarkSequencePoint(doc12, 214, 1, 214, 100)
Dim label6 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
ConvToASTIL.MarkSequencePoint(doc12, 215, 1, 215, 100)
Dim label7 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
ConvToASTIL.MarkSequencePoint(doc12, 216, 1, 216, 100)
Dim label8 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
ConvToASTIL.MarkSequencePoint(doc12, 218, 1, 218, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
Dim fa232 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
Dim tru232 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
Dim cont232 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
ConvToASTIL.Emit(OpCodes.Beq, tru232)
ConvToASTIL.Emit(OpCodes.Br, fa232)
ConvToASTIL.MarkLabel(tru232)
ConvToASTIL.MarkSequencePoint(doc12, 219, 1, 219, 100)
ConvToASTIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToASTIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ConvToASTIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ConvToASTIL.Emit(OpCodes.Stloc, 0)
ConvToASTIL.MarkSequencePoint(doc12, 220, 1, 220, 100)
ConvToASTIL.Emit(OpCodes.Br, label6)
ConvToASTIL.MarkSequencePoint(doc12, 221, 1, 221, 100)
ConvToASTIL.Emit(OpCodes.Br, cont232)
ConvToASTIL.MarkLabel(fa232)
ConvToASTIL.Emit(OpCodes.Br, cont232)
ConvToASTIL.MarkLabel(cont232)
ConvToASTIL.MarkSequencePoint(doc12, 223, 1, 223, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Sub)
ConvToASTIL.Emit(OpCodes.Stloc, 3)
ConvToASTIL.MarkSequencePoint(doc12, 225, 1, 225, 100)
ConvToASTIL.MarkLabel(label7)
ConvToASTIL.MarkSequencePoint(doc12, 227, 1, 227, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Add)
ConvToASTIL.Emit(OpCodes.Stloc, 1)
ConvToASTIL.MarkSequencePoint(doc12, 229, 1, 229, 100)
ConvToASTIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToASTIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
ConvToASTIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ConvToASTIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ConvToASTIL.Emit(OpCodes.Stloc, 4)
ConvToASTIL.MarkSequencePoint(doc12, 231, 1, 231, 100)
ConvToASTIL.Emit(OpCodes.Ldarg_0)
Dim typ50(-1) As Type
ConvToASTIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(Token)
ReDim Preserve typ50(UBound(typ50) + 1)
typ50(UBound(typ50)) = Typ
ConvToASTIL.Emit(OpCodes.Callvirt, isOp)
Typ = isOp.ReturnType
ConvToASTIL.Emit(OpCodes.Stloc, 7)
ConvToASTIL.MarkSequencePoint(doc12, 233, 1, 233, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ConvToASTIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa233 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
Dim tru233 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
Dim cont233 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
ConvToASTIL.Emit(OpCodes.Beq, tru233)
ConvToASTIL.Emit(OpCodes.Br, fa233)
ConvToASTIL.MarkLabel(tru233)
ConvToASTIL.MarkSequencePoint(doc12, 234, 1, 234, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
Dim fa234 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
Dim tru234 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
Dim cont234 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
ConvToASTIL.Emit(OpCodes.Bge, tru234)
ConvToASTIL.Emit(OpCodes.Br, fa234)
ConvToASTIL.MarkLabel(tru234)
ConvToASTIL.MarkSequencePoint(doc12, 235, 1, 235, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(Token)
ConvToASTIL.Emit(OpCodes.Stloc, 8)
ConvToASTIL.MarkSequencePoint(doc12, 237, 1, 237, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Sub)
ConvToASTIL.Emit(OpCodes.Stloc, 2)
ConvToASTIL.MarkSequencePoint(doc12, 238, 1, 238, 100)
ConvToASTIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToASTIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
ConvToASTIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ConvToASTIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ConvToASTIL.Emit(OpCodes.Stloc, 5)
ConvToASTIL.MarkSequencePoint(doc12, 239, 1, 239, 100)
Dim typ51(-1) As Type
ConvToASTIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
ConvToASTIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
ReDim Preserve typ51(UBound(typ51) + 1)
typ51(UBound(typ51)) = Typ
ConvToASTIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ51))
Typ = Typ03.GetMethod("RemToken", typ51).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToASTIL.Emit(OpCodes.Pop)
End If
ConvToASTIL.MarkSequencePoint(doc12, 240, 1, 240, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Sub)
ConvToASTIL.Emit(OpCodes.Stloc, 3)
ConvToASTIL.MarkSequencePoint(doc12, 241, 1, 241, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Sub)
ConvToASTIL.Emit(OpCodes.Stloc, 2)
ConvToASTIL.MarkSequencePoint(doc12, 242, 1, 242, 100)
ConvToASTIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToASTIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
ConvToASTIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ConvToASTIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ConvToASTIL.Emit(OpCodes.Stloc, 4)
ConvToASTIL.MarkSequencePoint(doc12, 243, 1, 243, 100)
Dim typ52(-1) As Type
ConvToASTIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
ConvToASTIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
ReDim Preserve typ52(UBound(typ52) + 1)
typ52(UBound(typ52)) = Typ
ConvToASTIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ52))
Typ = Typ03.GetMethod("RemToken", typ52).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToASTIL.Emit(OpCodes.Pop)
End If
ConvToASTIL.MarkSequencePoint(doc12, 244, 1, 244, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Sub)
ConvToASTIL.Emit(OpCodes.Stloc, 3)
ConvToASTIL.MarkSequencePoint(doc12, 245, 1, 245, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(Op)
ConvToASTIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(Token)
ConvToASTIL.Emit(OpCodes.Stfld, GetType(Op).GetField("LChild"))
ConvToASTIL.MarkSequencePoint(doc12, 246, 1, 246, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(Op)
ConvToASTIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ConvToASTIL.Emit(OpCodes.Stfld, GetType(Op).GetField("RChild"))
ConvToASTIL.MarkSequencePoint(doc12, 247, 1, 247, 100)
ConvToASTIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToASTIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
ConvToASTIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Conv_U)
Typ = Typ02
Typ02 = Typ
ConvToASTIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(Op)
Typ = Typ02
ConvToASTIL.Emit(OpCodes.Stelem, Typ.GetElementType())
ConvToASTIL.MarkSequencePoint(doc12, 248, 1, 248, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Stloc, 1)
ConvToASTIL.MarkSequencePoint(doc12, 249, 1, 249, 100)
ConvToASTIL.Emit(OpCodes.Br, cont234)
ConvToASTIL.MarkLabel(fa234)
ConvToASTIL.Emit(OpCodes.Br, cont234)
ConvToASTIL.MarkLabel(cont234)
ConvToASTIL.MarkSequencePoint(doc12, 250, 1, 250, 100)
ConvToASTIL.Emit(OpCodes.Br, label8)
ConvToASTIL.MarkSequencePoint(doc12, 251, 1, 251, 100)
ConvToASTIL.Emit(OpCodes.Br, cont233)
ConvToASTIL.MarkLabel(fa233)
ConvToASTIL.Emit(OpCodes.Br, cont233)
ConvToASTIL.MarkLabel(cont233)
ConvToASTIL.MarkSequencePoint(doc12, 253, 1, 253, 100)
ConvToASTIL.MarkLabel(label8)
ConvToASTIL.MarkSequencePoint(doc12, 255, 1, 255, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
Dim fa235 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
Dim tru235 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
Dim cont235 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
ConvToASTIL.Emit(OpCodes.Beq, tru235)
ConvToASTIL.Emit(OpCodes.Br, fa235)
ConvToASTIL.MarkLabel(tru235)
ConvToASTIL.MarkSequencePoint(doc12, 256, 1, 256, 100)
ConvToASTIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToASTIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ConvToASTIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ConvToASTIL.Emit(OpCodes.Stloc, 0)
ConvToASTIL.MarkSequencePoint(doc12, 257, 1, 257, 100)
ConvToASTIL.Emit(OpCodes.Br, label6)
ConvToASTIL.MarkSequencePoint(doc12, 258, 1, 258, 100)
ConvToASTIL.Emit(OpCodes.Br, cont235)
ConvToASTIL.MarkLabel(fa235)
ConvToASTIL.MarkSequencePoint(doc12, 259, 1, 259, 100)
ConvToASTIL.Emit(OpCodes.Br, label7)
ConvToASTIL.MarkSequencePoint(doc12, 260, 1, 260, 100)
ConvToASTIL.Emit(OpCodes.Br, cont235)
ConvToASTIL.MarkLabel(cont235)
ConvToASTIL.MarkSequencePoint(doc12, 262, 1, 262, 100)
ConvToASTIL.MarkLabel(label6)
ConvToASTIL.MarkSequencePoint(doc12, 264, 1, 264, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
ConvToASTIL.MarkSequencePoint(doc12, 266, 1, 266, 100)
ConvToASTIL.Emit(OpCodes.Ret)
Dim typ53(-1) As Type
ReDim Preserve typ53(UBound(typ53) + 1)
typ53(UBound(typ53)) = GetType(Token)
ReDim Preserve typ53(UBound(typ53) + 1)
typ53(UBound(typ53)) = GetType(System.Boolean)
Dim ASTEmit As MethodBuilder = Evaluator.DefineMethod("ASTEmit", MethodAttributes.Public, GetType(System.Void), typ53)
Dim ASTEmitIL As ILGenerator = ASTEmit.GetILGenerator()
Dim ASTEmitparam01 As ParameterBuilder = ASTEmit.DefineParameter(1, ParameterAttributes.None, "tok")
Dim ASTEmitparam02 As ParameterBuilder = ASTEmit.DefineParameter(2, ParameterAttributes.None, "emt")
ASTEmitIL.MarkSequencePoint(doc12, 270, 1, 270, 100)
Dim locbldr248 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr248.SetLocalSymInfo("isop")
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ54(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ReDim Preserve typ54(UBound(typ54) + 1)
typ54(UBound(typ54)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, isOp)
Typ = isOp.ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 0)
ASTEmitIL.MarkSequencePoint(doc12, 271, 1, 271, 100)
Dim locbldr249 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Op))
locbldr249.SetLocalSymInfo("optok")
ASTEmitIL.Emit(OpCodes.Newobj, GetType(Op).GetConstructor(Type.EmptyTypes))
ASTEmitIL.Emit(OpCodes.Stloc, 1)
ASTEmitIL.MarkSequencePoint(doc12, 272, 1, 272, 100)
Dim locbldr250 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Token))
locbldr250.SetLocalSymInfo("rc")
ASTEmitIL.Emit(OpCodes.Newobj, GetType(Token).GetConstructor(Type.EmptyTypes))
ASTEmitIL.Emit(OpCodes.Stloc, 2)
ASTEmitIL.MarkSequencePoint(doc12, 273, 1, 273, 100)
Dim locbldr251 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Token))
locbldr251.SetLocalSymInfo("lc")
ASTEmitIL.Emit(OpCodes.Newobj, GetType(Token).GetConstructor(Type.EmptyTypes))
ASTEmitIL.Emit(OpCodes.Stloc, 3)
ASTEmitIL.MarkSequencePoint(doc12, 274, 1, 274, 100)
Dim locbldr252 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Int32))
locbldr252.SetLocalSymInfo("lcint")
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 4)
ASTEmitIL.MarkSequencePoint(doc12, 275, 1, 275, 100)
Dim locbldr253 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Int32))
locbldr253.SetLocalSymInfo("rcint")
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 5)
ASTEmitIL.MarkSequencePoint(doc12, 276, 1, 276, 100)
Dim locbldr254 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Type))
locbldr254.SetLocalSymInfo("lctyp")
ASTEmitIL.Emit(OpCodes.Ldnull)
ASTEmitIL.Emit(OpCodes.Stloc, 6)
ASTEmitIL.MarkSequencePoint(doc12, 277, 1, 277, 100)
Dim locbldr255 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Type))
locbldr255.SetLocalSymInfo("rctyp")
ASTEmitIL.Emit(OpCodes.Ldnull)
ASTEmitIL.Emit(OpCodes.Stloc, 7)
ASTEmitIL.MarkSequencePoint(doc12, 278, 1, 278, 100)
Dim locbldr256 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Type))
locbldr256.SetLocalSymInfo("typ")
ASTEmitIL.MarkSequencePoint(doc12, 279, 1, 279, 100)
Dim locbldr257 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr257.SetLocalSymInfo("b")
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc12, 280, 1, 280, 100)
Dim locbldr258 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(TypeTok))
locbldr258.SetLocalSymInfo("tt")
ASTEmitIL.Emit(OpCodes.Ldnull)
ASTEmitIL.Emit(OpCodes.Stloc, 10)
ASTEmitIL.MarkSequencePoint(doc12, 281, 1, 281, 100)
Dim locbldr259 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Int32))
locbldr259.SetLocalSymInfo("i")
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc12, 282, 1, 282, 100)
Dim locbldr260 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Int32))
locbldr260.SetLocalSymInfo("j")
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 12)
ASTEmitIL.MarkSequencePoint(doc12, 283, 1, 283, 100)
Dim locbldr261 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Int32))
locbldr261.SetLocalSymInfo("len")
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 13)
ASTEmitIL.MarkSequencePoint(doc12, 284, 1, 284, 100)
Dim locbldr262 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr262.SetLocalSymInfo("instflg")
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 14)
ASTEmitIL.MarkSequencePoint(doc12, 286, 1, 286, 100)
Dim label9 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc12, 288, 1, 288, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa236 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru236 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont236 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru236)
ASTEmitIL.Emit(OpCodes.Br, fa236)
ASTEmitIL.MarkLabel(tru236)
ASTEmitIL.MarkSequencePoint(doc12, 290, 1, 290, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Stloc, 1)
ASTEmitIL.MarkSequencePoint(doc12, 291, 1, 291, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Op)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Op).GetField("RChild"))
Typ = GetType(Op).GetField("RChild").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 2)
ASTEmitIL.MarkSequencePoint(doc12, 292, 1, 292, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Op)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Op).GetField("LChild"))
Typ = GetType(Op).GetField("LChild").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 3)
ASTEmitIL.MarkSequencePoint(doc12, 293, 1, 293, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ55(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Token)
ReDim Preserve typ55(UBound(typ55) + 1)
typ55(UBound(typ55)) = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ReDim Preserve typ55(UBound(typ55) + 1)
typ55(UBound(typ55)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 294, 1, 294, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 6)
ASTEmitIL.MarkSequencePoint(doc12, 295, 1, 295, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ56(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Token)
ReDim Preserve typ56(UBound(typ56) + 1)
typ56(UBound(typ56)) = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ReDim Preserve typ56(UBound(typ56) + 1)
typ56(UBound(typ56)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 296, 1, 296, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 7)
ASTEmitIL.MarkSequencePoint(doc12, 298, 1, 298, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa237 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru237 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont237 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru237)
ASTEmitIL.Emit(OpCodes.Br, fa237)
ASTEmitIL.MarkLabel(tru237)
ASTEmitIL.MarkSequencePoint(doc12, 299, 1, 299, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(System.String))
Dim typ57 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ57))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ57).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc12, 300, 1, 300, 100)
Dim typ58(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
ReDim Preserve typ58(UBound(typ58) + 1)
typ58(UBound(typ58)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ58))
Typ = Typ03.GetMethod("Equals", typ58).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc12, 301, 1, 301, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetField("StringFlg"))
ASTEmitIL.MarkSequencePoint(doc12, 302, 1, 302, 100)
ASTEmitIL.Emit(OpCodes.Br, cont237)
ASTEmitIL.MarkLabel(fa237)
ASTEmitIL.Emit(OpCodes.Br, cont237)
ASTEmitIL.MarkLabel(cont237)
ASTEmitIL.MarkSequencePoint(doc12, 304, 1, 304, 100)
Dim typ59(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Type)
ReDim Preserve typ59(UBound(typ59) + 1)
typ59(UBound(typ59)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ59))
Typ = Typ03.GetMethod("Equals", typ59).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc12, 305, 1, 305, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa238 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru238 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont238 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru238)
ASTEmitIL.Emit(OpCodes.Br, fa238)
ASTEmitIL.MarkLabel(tru238)
ASTEmitIL.MarkSequencePoint(doc12, 306, 1, 306, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsPrimitive", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsPrimitive", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetField("OpCodeSuppFlg"))
ASTEmitIL.MarkSequencePoint(doc12, 307, 1, 307, 100)
ASTEmitIL.Emit(OpCodes.Br, cont238)
ASTEmitIL.MarkLabel(fa238)
ASTEmitIL.MarkSequencePoint(doc12, 308, 1, 308, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetField("OpCodeSuppFlg"))
ASTEmitIL.MarkSequencePoint(doc12, 309, 1, 309, 100)
ASTEmitIL.Emit(OpCodes.Br, cont238)
ASTEmitIL.MarkLabel(cont238)
ASTEmitIL.MarkSequencePoint(doc12, 313, 1, 313, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(ConditionalOp))
Dim typ61 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ61))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ61).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc12, 314, 1, 314, 100)
Dim typ62(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Op)
ASTEmitIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ62(UBound(typ62) + 1)
typ62(UBound(typ62)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ62))
Typ = Typ03.GetMethod("IsInstanceOfType", typ62).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc12, 316, 1, 316, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa239 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru239 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont239 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru239)
ASTEmitIL.Emit(OpCodes.Br, fa239)
ASTEmitIL.MarkLabel(tru239)
ASTEmitIL.MarkSequencePoint(doc12, 317, 1, 317, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(System.Boolean))
Dim typ63 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ63))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ63).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc12, 318, 1, 318, 100)
ASTEmitIL.Emit(OpCodes.Br, cont239)
ASTEmitIL.MarkLabel(fa239)
ASTEmitIL.MarkSequencePoint(doc12, 319, 1, 319, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Type)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc12, 320, 1, 320, 100)
ASTEmitIL.Emit(OpCodes.Br, cont239)
ASTEmitIL.MarkLabel(cont239)
ASTEmitIL.MarkSequencePoint(doc12, 322, 1, 322, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa240 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru240 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont240 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru240)
ASTEmitIL.Emit(OpCodes.Br, fa240)
ASTEmitIL.MarkLabel(tru240)
ASTEmitIL.MarkSequencePoint(doc12, 323, 1, 323, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Type)
ASTEmitIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetField("LeftOp"))
ASTEmitIL.MarkSequencePoint(doc12, 324, 1, 324, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Type)
ASTEmitIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetField("RightOp"))
ASTEmitIL.MarkSequencePoint(doc12, 325, 1, 325, 100)
Dim typ64(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Op)
ReDim Preserve typ64(UBound(typ64) + 1)
typ64(UBound(typ64)) = Typ
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ64(UBound(typ64) + 1)
typ64(UBound(typ64)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitOp", typ64))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitOp", typ64).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 326, 1, 326, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetField("StringFlg"))
ASTEmitIL.MarkSequencePoint(doc12, 327, 1, 327, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetField("OpCodeSuppFlg"))
ASTEmitIL.MarkSequencePoint(doc12, 328, 1, 328, 100)
ASTEmitIL.Emit(OpCodes.Br, cont240)
ASTEmitIL.MarkLabel(fa240)
ASTEmitIL.Emit(OpCodes.Br, cont240)
ASTEmitIL.MarkLabel(cont240)
ASTEmitIL.MarkSequencePoint(doc12, 335, 1, 335, 100)
ASTEmitIL.Emit(OpCodes.Br, cont236)
ASTEmitIL.MarkLabel(fa236)
ASTEmitIL.MarkSequencePoint(doc12, 337, 1, 337, 100)
Dim locbldr263 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Type))
locbldr263.SetLocalSymInfo("src1")
ASTEmitIL.MarkSequencePoint(doc12, 338, 1, 338, 100)
Dim locbldr264 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Type))
locbldr264.SetLocalSymInfo("snk1")
ASTEmitIL.MarkSequencePoint(doc12, 340, 1, 340, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(StringLiteral))
Dim typ65 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ65))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ65).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc12, 341, 1, 341, 100)
Dim typ66(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ66(UBound(typ66) + 1)
typ66(UBound(typ66)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ66))
Typ = Typ03.GetMethod("IsInstanceOfType", typ66).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc12, 343, 1, 343, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa241 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru241 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont241 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru241)
ASTEmitIL.Emit(OpCodes.Br, fa241)
ASTEmitIL.MarkLabel(tru241)
ASTEmitIL.MarkSequencePoint(doc12, 344, 1, 344, 100)
Dim locbldr265 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(StringLiteral))
locbldr265.SetLocalSymInfo("slit")
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Stloc, 17)
ASTEmitIL.MarkSequencePoint(doc12, 346, 1, 346, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(StringLiteral)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(StringLiteral).GetField("LitTyp"))
Typ = GetType(StringLiteral).GetField("LitTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 10)
ASTEmitIL.MarkSequencePoint(doc12, 347, 1, 347, 100)
Dim typ67(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
ReDim Preserve typ67(UBound(typ67) + 1)
typ67(UBound(typ67)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ67))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ67).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc12, 349, 1, 349, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa242 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru242 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont242 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru242)
ASTEmitIL.Emit(OpCodes.Br, fa242)
ASTEmitIL.MarkLabel(tru242)
ASTEmitIL.MarkSequencePoint(doc12, 350, 1, 350, 100)
Dim typ68(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(StringLiteral)
ReDim Preserve typ68(UBound(typ68) + 1)
typ68(UBound(typ68)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLiteral", typ68))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLiteral", typ68).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 351, 1, 351, 100)
ASTEmitIL.Emit(OpCodes.Br, cont242)
ASTEmitIL.MarkLabel(fa242)
ASTEmitIL.Emit(OpCodes.Br, cont242)
ASTEmitIL.MarkLabel(cont242)
ASTEmitIL.MarkSequencePoint(doc12, 353, 1, 353, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(StringLiteral)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(StringLiteral).GetField("MemberAccessFlg"))
Typ = GetType(StringLiteral).GetField("MemberAccessFlg").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa243 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru243 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont243 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru243)
ASTEmitIL.Emit(OpCodes.Br, fa243)
ASTEmitIL.MarkLabel(tru243)
ASTEmitIL.MarkSequencePoint(doc12, 354, 1, 354, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(ASMFactory).GetField("ChainFlg"))
ASTEmitIL.MarkSequencePoint(doc12, 355, 1, 355, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ69(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(StringLiteral)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(StringLiteral).GetField("MemberToAccess"))
Typ = GetType(StringLiteral).GetField("MemberToAccess").FieldType
ReDim Preserve typ69(UBound(typ69) + 1)
typ69(UBound(typ69)) = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ReDim Preserve typ69(UBound(typ69) + 1)
typ69(UBound(typ69)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 356, 1, 356, 100)
ASTEmitIL.Emit(OpCodes.Br, cont243)
ASTEmitIL.MarkLabel(fa243)
ASTEmitIL.Emit(OpCodes.Br, cont243)
ASTEmitIL.MarkLabel(cont243)
ASTEmitIL.MarkSequencePoint(doc12, 358, 1, 358, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(StringLiteral)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(StringLiteral).GetField("Conv"))
Typ = GetType(StringLiteral).GetField("Conv").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa244 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru244 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont244 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru244)
ASTEmitIL.Emit(OpCodes.Br, fa244)
ASTEmitIL.MarkLabel(tru244)
ASTEmitIL.MarkSequencePoint(doc12, 359, 1, 359, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa245 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru245 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont245 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru245)
ASTEmitIL.Emit(OpCodes.Br, fa245)
ASTEmitIL.MarkLabel(tru245)
ASTEmitIL.MarkSequencePoint(doc12, 360, 1, 360, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 15)
ASTEmitIL.MarkSequencePoint(doc12, 361, 1, 361, 100)
ASTEmitIL.Emit(OpCodes.Br, cont245)
ASTEmitIL.MarkLabel(fa245)
ASTEmitIL.Emit(OpCodes.Br, cont245)
ASTEmitIL.MarkLabel(cont245)
ASTEmitIL.MarkSequencePoint(doc12, 363, 1, 363, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(StringLiteral)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(StringLiteral).GetField("TTok"))
Typ = GetType(StringLiteral).GetField("TTok").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 10)
ASTEmitIL.MarkSequencePoint(doc12, 364, 1, 364, 100)
Dim typ70(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
ReDim Preserve typ70(UBound(typ70) + 1)
typ70(UBound(typ70)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ70))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ70).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc12, 366, 1, 366, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa246 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru246 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont246 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru246)
ASTEmitIL.Emit(OpCodes.Br, fa246)
ASTEmitIL.MarkLabel(tru246)
ASTEmitIL.MarkSequencePoint(doc12, 367, 1, 367, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 16)
ASTEmitIL.MarkSequencePoint(doc12, 368, 1, 368, 100)
Dim typ71(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(System.Type)
ReDim Preserve typ71(UBound(typ71) + 1)
typ71(UBound(typ71)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(System.Type)
ReDim Preserve typ71(UBound(typ71) + 1)
typ71(UBound(typ71)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitConv", typ71))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitConv", typ71).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 369, 1, 369, 100)
ASTEmitIL.Emit(OpCodes.Br, cont246)
ASTEmitIL.MarkLabel(fa246)
ASTEmitIL.Emit(OpCodes.Br, cont246)
ASTEmitIL.MarkLabel(cont246)
ASTEmitIL.MarkSequencePoint(doc12, 370, 1, 370, 100)
ASTEmitIL.Emit(OpCodes.Br, cont244)
ASTEmitIL.MarkLabel(fa244)
ASTEmitIL.Emit(OpCodes.Br, cont244)
ASTEmitIL.MarkLabel(cont244)
ASTEmitIL.MarkSequencePoint(doc12, 372, 1, 372, 100)
ASTEmitIL.Emit(OpCodes.Br, label9)
ASTEmitIL.MarkSequencePoint(doc12, 373, 1, 373, 100)
ASTEmitIL.Emit(OpCodes.Br, cont241)
ASTEmitIL.MarkLabel(fa241)
ASTEmitIL.Emit(OpCodes.Br, cont241)
ASTEmitIL.MarkLabel(cont241)
ASTEmitIL.MarkSequencePoint(doc12, 375, 1, 375, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(Literal))
Dim typ72 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ72))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ72).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc12, 376, 1, 376, 100)
Dim typ73(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ73(UBound(typ73) + 1)
typ73(UBound(typ73)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ73))
Typ = Typ03.GetMethod("IsInstanceOfType", typ73).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc12, 378, 1, 378, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa247 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru247 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont247 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru247)
ASTEmitIL.Emit(OpCodes.Br, fa247)
ASTEmitIL.MarkLabel(tru247)
ASTEmitIL.MarkSequencePoint(doc12, 379, 1, 379, 100)
Dim locbldr266 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Literal))
locbldr266.SetLocalSymInfo("lit")
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Stloc, 18)
ASTEmitIL.MarkSequencePoint(doc12, 381, 1, 381, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa248 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru248 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont248 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru248)
ASTEmitIL.Emit(OpCodes.Br, fa248)
ASTEmitIL.MarkLabel(tru248)
ASTEmitIL.MarkSequencePoint(doc12, 382, 1, 382, 100)
Dim typ74(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(Literal)
ReDim Preserve typ74(UBound(typ74) + 1)
typ74(UBound(typ74)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLiteral", typ74))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLiteral", typ74).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 383, 1, 383, 100)
ASTEmitIL.Emit(OpCodes.Br, cont248)
ASTEmitIL.MarkLabel(fa248)
ASTEmitIL.Emit(OpCodes.Br, cont248)
ASTEmitIL.MarkLabel(cont248)
ASTEmitIL.MarkSequencePoint(doc12, 385, 1, 385, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(Literal)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Literal).GetField("LitTyp"))
Typ = GetType(Literal).GetField("LitTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 10)
ASTEmitIL.MarkSequencePoint(doc12, 386, 1, 386, 100)
Dim typ75(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
ReDim Preserve typ75(UBound(typ75) + 1)
typ75(UBound(typ75)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ75))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ75).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc12, 388, 1, 388, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(Literal)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Literal).GetField("Conv"))
Typ = GetType(Literal).GetField("Conv").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa249 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru249 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont249 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru249)
ASTEmitIL.Emit(OpCodes.Br, fa249)
ASTEmitIL.MarkLabel(tru249)
ASTEmitIL.MarkSequencePoint(doc12, 389, 1, 389, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa250 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru250 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont250 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru250)
ASTEmitIL.Emit(OpCodes.Br, fa250)
ASTEmitIL.MarkLabel(tru250)
ASTEmitIL.MarkSequencePoint(doc12, 390, 1, 390, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 15)
ASTEmitIL.MarkSequencePoint(doc12, 391, 1, 391, 100)
ASTEmitIL.Emit(OpCodes.Br, cont250)
ASTEmitIL.MarkLabel(fa250)
ASTEmitIL.Emit(OpCodes.Br, cont250)
ASTEmitIL.MarkLabel(cont250)
ASTEmitIL.MarkSequencePoint(doc12, 393, 1, 393, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(Literal)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Literal).GetField("TTok"))
Typ = GetType(Literal).GetField("TTok").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 10)
ASTEmitIL.MarkSequencePoint(doc12, 394, 1, 394, 100)
Dim typ76(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
ReDim Preserve typ76(UBound(typ76) + 1)
typ76(UBound(typ76)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ76))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ76).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc12, 396, 1, 396, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa251 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru251 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont251 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru251)
ASTEmitIL.Emit(OpCodes.Br, fa251)
ASTEmitIL.MarkLabel(tru251)
ASTEmitIL.MarkSequencePoint(doc12, 397, 1, 397, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 16)
ASTEmitIL.MarkSequencePoint(doc12, 398, 1, 398, 100)
Dim typ77(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(System.Type)
ReDim Preserve typ77(UBound(typ77) + 1)
typ77(UBound(typ77)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(System.Type)
ReDim Preserve typ77(UBound(typ77) + 1)
typ77(UBound(typ77)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitConv", typ77))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitConv", typ77).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 399, 1, 399, 100)
ASTEmitIL.Emit(OpCodes.Br, cont251)
ASTEmitIL.MarkLabel(fa251)
ASTEmitIL.Emit(OpCodes.Br, cont251)
ASTEmitIL.MarkLabel(cont251)
ASTEmitIL.MarkSequencePoint(doc12, 400, 1, 400, 100)
ASTEmitIL.Emit(OpCodes.Br, cont249)
ASTEmitIL.MarkLabel(fa249)
ASTEmitIL.Emit(OpCodes.Br, cont249)
ASTEmitIL.MarkLabel(cont249)
ASTEmitIL.MarkSequencePoint(doc12, 402, 1, 402, 100)
ASTEmitIL.Emit(OpCodes.Br, label9)
ASTEmitIL.MarkSequencePoint(doc12, 403, 1, 403, 100)
ASTEmitIL.Emit(OpCodes.Br, cont247)
ASTEmitIL.MarkLabel(fa247)
ASTEmitIL.Emit(OpCodes.Br, cont247)
ASTEmitIL.MarkLabel(cont247)
ASTEmitIL.MarkSequencePoint(doc12, 405, 1, 405, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(Ident))
Dim typ78 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ78))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ78).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc12, 406, 1, 406, 100)
Dim typ79(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ79(UBound(typ79) + 1)
typ79(UBound(typ79)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ79))
Typ = Typ03.GetMethod("IsInstanceOfType", typ79).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc12, 408, 1, 408, 100)
Dim locbldr267 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.String))
locbldr267.SetLocalSymInfo("idtnam")
ASTEmitIL.MarkSequencePoint(doc12, 409, 1, 409, 100)
Dim locbldr268 As LocalBuilder = ASTEmitIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"))
locbldr268.SetLocalSymInfo("vr")
ASTEmitIL.MarkSequencePoint(doc12, 410, 1, 410, 100)
Dim locbldr269 As LocalBuilder = ASTEmitIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
locbldr269.SetLocalSymInfo("fldr")
ASTEmitIL.MarkSequencePoint(doc12, 411, 1, 411, 100)
Dim locbldr270 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(FieldInfo))
locbldr270.SetLocalSymInfo("idtfldinf")
ASTEmitIL.MarkSequencePoint(doc12, 412, 1, 412, 100)
Dim locbldr271 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr271.SetLocalSymInfo("idtb1")
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 23)
ASTEmitIL.MarkSequencePoint(doc12, 413, 1, 413, 100)
Dim locbldr272 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr272.SetLocalSymInfo("idtb2")
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 24)
ASTEmitIL.MarkSequencePoint(doc12, 414, 1, 414, 100)
Dim locbldr273 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Ident))
locbldr273.SetLocalSymInfo("idt")
ASTEmitIL.MarkSequencePoint(doc12, 415, 1, 415, 100)
Dim locbldr274 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Int32))
locbldr274.SetLocalSymInfo("idtcomp")
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 26)
ASTEmitIL.MarkSequencePoint(doc12, 416, 1, 416, 100)
Dim locbldr275 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Type))
locbldr275.SetLocalSymInfo("idttyp")
ASTEmitIL.MarkSequencePoint(doc12, 417, 1, 417, 100)
Dim locbldr276 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr276.SetLocalSymInfo("idtisstatic")
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 28)
ASTEmitIL.MarkSequencePoint(doc12, 418, 1, 418, 100)
Dim locbldr277 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Expr))
locbldr277.SetLocalSymInfo("arrlocexpr")
ASTEmitIL.MarkSequencePoint(doc12, 419, 1, 419, 100)
Dim locbldr278 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Ident))
locbldr278.SetLocalSymInfo("idtarrloc")
ASTEmitIL.MarkSequencePoint(doc12, 420, 1, 420, 100)
Dim locbldr279 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.String).MakeArrayType())
locbldr279.SetLocalSymInfo("idtnamarr")
ASTEmitIL.MarkSequencePoint(doc12, 423, 1, 423, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa252 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru252 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont252 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru252)
ASTEmitIL.Emit(OpCodes.Br, fa252)
ASTEmitIL.MarkLabel(tru252)
ASTEmitIL.MarkSequencePoint(doc12, 424, 1, 424, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Stloc, 25)
ASTEmitIL.MarkSequencePoint(doc12, 425, 1, 425, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(Ident)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 19)
ASTEmitIL.MarkSequencePoint(doc12, 426, 1, 426, 100)
Dim typ80(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(System.String)
ReDim Preserve typ80(UBound(typ80) + 1)
typ80(UBound(typ80)) = Typ
ASTEmitIL.Emit(OpCodes.Ldstr, ":")
Typ = GetType(System.String)
ReDim Preserve typ80(UBound(typ80) + 1)
typ80(UBound(typ80)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ParseUtils).GetMethod("StringParser", typ80))
Typ = GetType(ParseUtils).GetMethod("StringParser", typ80).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 31)
ASTEmitIL.MarkSequencePoint(doc12, 427, 1, 427, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc12, 428, 1, 428, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.String).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Sub)
ASTEmitIL.Emit(OpCodes.Stloc, 13)
ASTEmitIL.MarkSequencePoint(doc12, 430, 1, 430, 100)
Dim typ81(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ81(UBound(typ81) + 1)
typ81(UBound(typ81)) = Typ
ASTEmitIL.Emit(OpCodes.Ldstr, "me")
Typ = GetType(System.String)
ReDim Preserve typ81(UBound(typ81) + 1)
typ81(UBound(typ81)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ81))
Typ = GetType(String).GetMethod("Compare", typ81).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 26)
ASTEmitIL.MarkSequencePoint(doc12, 431, 1, 431, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 26)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa253 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru253 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont253 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru253)
ASTEmitIL.Emit(OpCodes.Br, fa253)
ASTEmitIL.MarkLabel(tru253)
ASTEmitIL.MarkSequencePoint(doc12, 432, 1, 432, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Add)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc12, 433, 1, 433, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 23)
ASTEmitIL.MarkSequencePoint(doc12, 434, 1, 434, 100)
ASTEmitIL.Emit(OpCodes.Br, cont253)
ASTEmitIL.MarkLabel(fa253)
ASTEmitIL.Emit(OpCodes.Br, cont253)
ASTEmitIL.MarkLabel(cont253)
ASTEmitIL.MarkSequencePoint(doc12, 436, 1, 436, 100)
Dim label10 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc12, 437, 1, 437, 100)
Dim label11 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc12, 438, 1, 438, 100)
Dim label12 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc12, 442, 1, 442, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("ChainFlg"))
Typ = GetType(AsmFactory).GetField("ChainFlg").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa254 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru254 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont254 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru254)
ASTEmitIL.Emit(OpCodes.Br, fa254)
ASTEmitIL.MarkLabel(tru254)
ASTEmitIL.MarkSequencePoint(doc12, 443, 1, 443, 100)
ASTEmitIL.Emit(OpCodes.Br, cont254)
ASTEmitIL.MarkLabel(fa254)
ASTEmitIL.MarkSequencePoint(doc12, 444, 1, 444, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("ChainFlg"))
ASTEmitIL.MarkSequencePoint(doc12, 445, 1, 445, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc12, 446, 1, 446, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 24)
ASTEmitIL.MarkSequencePoint(doc12, 447, 1, 447, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 28)
ASTEmitIL.MarkSequencePoint(doc12, 448, 1, 448, 100)
ASTEmitIL.Emit(OpCodes.Br, cont254)
ASTEmitIL.MarkLabel(cont254)
ASTEmitIL.MarkSequencePoint(doc12, 450, 1, 450, 100)
ASTEmitIL.MarkLabel(label10)
ASTEmitIL.MarkSequencePoint(doc12, 451, 1, 451, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Add)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc12, 453, 1, 453, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(System.Int32)
Dim fa255 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru255 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont255 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, fa255)
ASTEmitIL.Emit(OpCodes.Br, tru255)
ASTEmitIL.MarkLabel(tru255)
ASTEmitIL.MarkSequencePoint(doc12, 454, 1, 454, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AddrFlg"))
ASTEmitIL.MarkSequencePoint(doc12, 455, 1, 455, 100)
ASTEmitIL.Emit(OpCodes.Br, cont255)
ASTEmitIL.MarkLabel(fa255)
ASTEmitIL.MarkSequencePoint(doc12, 456, 1, 456, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AddrFlg"))
ASTEmitIL.MarkSequencePoint(doc12, 457, 1, 457, 100)
ASTEmitIL.Emit(OpCodes.Br, cont255)
ASTEmitIL.MarkLabel(cont255)
ASTEmitIL.MarkSequencePoint(doc12, 459, 1, 459, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa256 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru256 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont256 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru256)
ASTEmitIL.Emit(OpCodes.Br, fa256)
ASTEmitIL.MarkLabel(tru256)
ASTEmitIL.MarkSequencePoint(doc12, 461, 1, 461, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 23)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa257 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru257 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont257 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru257)
ASTEmitIL.Emit(OpCodes.Br, fa257)
ASTEmitIL.MarkLabel(tru257)
ASTEmitIL.MarkSequencePoint(doc12, 462, 1, 462, 100)
Dim typ82(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ82(UBound(typ82) + 1)
typ82(UBound(typ82)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindVar", typ82))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindVar", typ82).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 20)
ASTEmitIL.MarkSequencePoint(doc12, 463, 1, 463, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 20)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldnull)
Dim fa258 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru258 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont258 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, fa258)
ASTEmitIL.Emit(OpCodes.Br, tru258)
ASTEmitIL.MarkLabel(tru258)
ASTEmitIL.MarkSequencePoint(doc12, 464, 1, 464, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa259 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru259 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont259 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru259)
ASTEmitIL.Emit(OpCodes.Br, fa259)
ASTEmitIL.MarkLabel(tru259)
ASTEmitIL.MarkSequencePoint(doc12, 465, 1, 465, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 20)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
ASTEmitIL.MarkSequencePoint(doc12, 466, 1, 466, 100)
Dim typ83(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 20)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("Index"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("Index").FieldType
ReDim Preserve typ83(UBound(typ83) + 1)
typ83(UBound(typ83)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 20)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("LocArg"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("LocArg").FieldType
ReDim Preserve typ83(UBound(typ83) + 1)
typ83(UBound(typ83)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLocLd", typ83))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLocLd", typ83).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 467, 1, 467, 100)
ASTEmitIL.Emit(OpCodes.Br, cont259)
ASTEmitIL.MarkLabel(fa259)
ASTEmitIL.Emit(OpCodes.Br, cont259)
ASTEmitIL.MarkLabel(cont259)
ASTEmitIL.MarkSequencePoint(doc12, 468, 1, 468, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 20)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc12, 469, 1, 469, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 20)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc12, 470, 1, 470, 100)
ASTEmitIL.Emit(OpCodes.Br, label12)
ASTEmitIL.MarkSequencePoint(doc12, 471, 1, 471, 100)
ASTEmitIL.Emit(OpCodes.Br, cont258)
ASTEmitIL.MarkLabel(fa258)
ASTEmitIL.MarkSequencePoint(doc12, 473, 1, 473, 100)
Dim typ84(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ84(UBound(typ84) + 1)
typ84(UBound(typ84)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ84))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ84).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 22)
ASTEmitIL.MarkSequencePoint(doc12, 475, 1, 475, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(FieldInfo)
ASTEmitIL.Emit(OpCodes.Ldnull)
Dim fa260 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru260 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont260 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, fa260)
ASTEmitIL.Emit(OpCodes.Br, tru260)
ASTEmitIL.MarkLabel(tru260)
ASTEmitIL.MarkSequencePoint(doc12, 476, 1, 476, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsStatic", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsStatic", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 28)
ASTEmitIL.MarkSequencePoint(doc12, 477, 1, 477, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa261 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru261 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont261 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru261)
ASTEmitIL.Emit(OpCodes.Br, fa261)
ASTEmitIL.MarkLabel(tru261)
ASTEmitIL.MarkSequencePoint(doc12, 478, 1, 478, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa262 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru262 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont262 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru262)
ASTEmitIL.Emit(OpCodes.Br, fa262)
ASTEmitIL.MarkLabel(tru262)
ASTEmitIL.MarkSequencePoint(doc12, 479, 1, 479, 100)
Dim typ86(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReDim Preserve typ86(UBound(typ86) + 1)
typ86(UBound(typ86)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdarg", typ86))
Typ = GetType(ILEmitter).GetMethod("EmitLdarg", typ86).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 480, 1, 480, 100)
ASTEmitIL.Emit(OpCodes.Br, cont262)
ASTEmitIL.MarkLabel(fa262)
ASTEmitIL.Emit(OpCodes.Br, cont262)
ASTEmitIL.MarkLabel(cont262)
ASTEmitIL.MarkSequencePoint(doc12, 481, 1, 481, 100)
ASTEmitIL.Emit(OpCodes.Br, cont261)
ASTEmitIL.MarkLabel(fa261)
ASTEmitIL.Emit(OpCodes.Br, cont261)
ASTEmitIL.MarkLabel(cont261)
ASTEmitIL.MarkSequencePoint(doc12, 482, 1, 482, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa263 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru263 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont263 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru263)
ASTEmitIL.Emit(OpCodes.Br, fa263)
ASTEmitIL.MarkLabel(tru263)
ASTEmitIL.MarkSequencePoint(doc12, 483, 1, 483, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
ASTEmitIL.MarkSequencePoint(doc12, 484, 1, 484, 100)
Dim typ88(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(FieldInfo)
ReDim Preserve typ88(UBound(typ88) + 1)
typ88(UBound(typ88)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(System.Boolean)
ReDim Preserve typ88(UBound(typ88) + 1)
typ88(UBound(typ88)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ88))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ88).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 485, 1, 485, 100)
ASTEmitIL.Emit(OpCodes.Br, cont263)
ASTEmitIL.MarkLabel(fa263)
ASTEmitIL.Emit(OpCodes.Br, cont263)
ASTEmitIL.MarkLabel(cont263)
ASTEmitIL.MarkSequencePoint(doc12, 486, 1, 486, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc12, 487, 1, 487, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc12, 488, 1, 488, 100)
ASTEmitIL.Emit(OpCodes.Br, label12)
ASTEmitIL.MarkSequencePoint(doc12, 489, 1, 489, 100)
ASTEmitIL.Emit(OpCodes.Br, cont260)
ASTEmitIL.MarkLabel(fa260)
ASTEmitIL.Emit(OpCodes.Br, cont260)
ASTEmitIL.MarkLabel(cont260)
ASTEmitIL.MarkSequencePoint(doc12, 490, 1, 490, 100)
ASTEmitIL.Emit(OpCodes.Br, cont258)
ASTEmitIL.MarkLabel(cont258)
ASTEmitIL.MarkSequencePoint(doc12, 492, 1, 492, 100)
ASTEmitIL.Emit(OpCodes.Br, cont257)
ASTEmitIL.MarkLabel(fa257)
ASTEmitIL.MarkSequencePoint(doc12, 494, 1, 494, 100)
Dim typ91(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ91(UBound(typ91) + 1)
typ91(UBound(typ91)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ91))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ91).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 22)
ASTEmitIL.MarkSequencePoint(doc12, 496, 1, 496, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(FieldInfo)
ASTEmitIL.Emit(OpCodes.Ldnull)
Dim fa264 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru264 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont264 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, fa264)
ASTEmitIL.Emit(OpCodes.Br, tru264)
ASTEmitIL.MarkLabel(tru264)
ASTEmitIL.MarkSequencePoint(doc12, 497, 1, 497, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsStatic", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsStatic", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 28)
ASTEmitIL.MarkSequencePoint(doc12, 498, 1, 498, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa265 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru265 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont265 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru265)
ASTEmitIL.Emit(OpCodes.Br, fa265)
ASTEmitIL.MarkLabel(tru265)
ASTEmitIL.MarkSequencePoint(doc12, 499, 1, 499, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa266 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru266 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont266 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru266)
ASTEmitIL.Emit(OpCodes.Br, fa266)
ASTEmitIL.MarkLabel(tru266)
ASTEmitIL.MarkSequencePoint(doc12, 500, 1, 500, 100)
Dim typ93(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReDim Preserve typ93(UBound(typ93) + 1)
typ93(UBound(typ93)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdarg", typ93))
Typ = GetType(ILEmitter).GetMethod("EmitLdarg", typ93).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 501, 1, 501, 100)
ASTEmitIL.Emit(OpCodes.Br, cont266)
ASTEmitIL.MarkLabel(fa266)
ASTEmitIL.Emit(OpCodes.Br, cont266)
ASTEmitIL.MarkLabel(cont266)
ASTEmitIL.MarkSequencePoint(doc12, 502, 1, 502, 100)
ASTEmitIL.Emit(OpCodes.Br, cont265)
ASTEmitIL.MarkLabel(fa265)
ASTEmitIL.Emit(OpCodes.Br, cont265)
ASTEmitIL.MarkLabel(cont265)
ASTEmitIL.MarkSequencePoint(doc12, 503, 1, 503, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa267 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru267 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont267 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru267)
ASTEmitIL.Emit(OpCodes.Br, fa267)
ASTEmitIL.MarkLabel(tru267)
ASTEmitIL.MarkSequencePoint(doc12, 504, 1, 504, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
ASTEmitIL.MarkSequencePoint(doc12, 505, 1, 505, 100)
Dim typ95(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(FieldInfo)
ReDim Preserve typ95(UBound(typ95) + 1)
typ95(UBound(typ95)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(System.Boolean)
ReDim Preserve typ95(UBound(typ95) + 1)
typ95(UBound(typ95)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ95))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ95).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 506, 1, 506, 100)
ASTEmitIL.Emit(OpCodes.Br, cont267)
ASTEmitIL.MarkLabel(fa267)
ASTEmitIL.Emit(OpCodes.Br, cont267)
ASTEmitIL.MarkLabel(cont267)
ASTEmitIL.MarkSequencePoint(doc12, 507, 1, 507, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc12, 508, 1, 508, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc12, 509, 1, 509, 100)
ASTEmitIL.Emit(OpCodes.Br, label12)
ASTEmitIL.MarkSequencePoint(doc12, 510, 1, 510, 100)
ASTEmitIL.Emit(OpCodes.Br, cont264)
ASTEmitIL.MarkLabel(fa264)
ASTEmitIL.Emit(OpCodes.Br, cont264)
ASTEmitIL.MarkLabel(cont264)
ASTEmitIL.MarkSequencePoint(doc12, 511, 1, 511, 100)
ASTEmitIL.Emit(OpCodes.Br, cont257)
ASTEmitIL.MarkLabel(cont257)
ASTEmitIL.MarkSequencePoint(doc12, 513, 1, 513, 100)
Dim typ98(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ98(UBound(typ98) + 1)
typ98(UBound(typ98)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadClass", typ98))
Typ = GetType(Loader).GetMethod("LoadClass", typ98).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc12, 514, 1, 514, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 28)
ASTEmitIL.MarkSequencePoint(doc12, 516, 1, 516, 100)
ASTEmitIL.Emit(OpCodes.Br, cont256)
ASTEmitIL.MarkLabel(fa256)
ASTEmitIL.MarkSequencePoint(doc12, 518, 1, 518, 100)
Dim typ99(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
ReDim Preserve typ99(UBound(typ99) + 1)
typ99(UBound(typ99)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ99))
Typ = Typ03.GetMethod("Equals", typ99).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc12, 521, 1, 521, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa268 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru268 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont268 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru268)
ASTEmitIL.Emit(OpCodes.Br, fa268)
ASTEmitIL.MarkLabel(tru268)
ASTEmitIL.MarkSequencePoint(doc12, 522, 1, 522, 100)
Dim typ100(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
ReDim Preserve typ100(UBound(typ100) + 1)
typ100(UBound(typ100)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ100(UBound(typ100) + 1)
typ100(UBound(typ100)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadField", typ100))
Typ = GetType(Loader).GetMethod("LoadField", typ100).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 22)
ASTEmitIL.MarkSequencePoint(doc12, 523, 1, 523, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("MemberTyp"))
Typ = GetType(Loader).GetField("MemberTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc12, 524, 1, 524, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("MemberTyp"))
Typ = GetType(Loader).GetField("MemberTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc12, 525, 1, 525, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa269 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru269 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont269 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru269)
ASTEmitIL.Emit(OpCodes.Br, fa269)
ASTEmitIL.MarkLabel(tru269)
ASTEmitIL.MarkSequencePoint(doc12, 527, 1, 527, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("FldLitFlag"))
Typ = GetType(Loader).GetField("FldLitFlag").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa270 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru270 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont270 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru270)
ASTEmitIL.Emit(OpCodes.Br, fa270)
ASTEmitIL.MarkLabel(tru270)
ASTEmitIL.MarkSequencePoint(doc12, 528, 1, 528, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("MemberTyp"))
Typ = GetType(Loader).GetField("MemberTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
ASTEmitIL.MarkSequencePoint(doc12, 529, 1, 529, 100)
Dim typ101(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(FieldInfo)
ReDim Preserve typ101(UBound(typ101) + 1)
typ101(UBound(typ101)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(System.Boolean)
ReDim Preserve typ101(UBound(typ101) + 1)
typ101(UBound(typ101)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ101))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ101).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 530, 1, 530, 100)
ASTEmitIL.Emit(OpCodes.Br, cont270)
ASTEmitIL.MarkLabel(fa270)
ASTEmitIL.MarkSequencePoint(doc12, 532, 1, 532, 100)
Dim locbldr280 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(ConstLiteral))
locbldr280.SetLocalSymInfo("constlit")
ASTEmitIL.Emit(OpCodes.Newobj, GetType(ConstLiteral).GetConstructor(Type.EmptyTypes))
ASTEmitIL.Emit(OpCodes.Stloc, 32)
ASTEmitIL.MarkSequencePoint(doc12, 533, 1, 533, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 32)
Typ = GetType(ConstLiteral)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("FldLitVal"))
Typ = GetType(Loader).GetField("FldLitVal").FieldType
ASTEmitIL.Emit(OpCodes.Stfld, GetType(ConstLiteral).GetField("ConstVal"))
ASTEmitIL.MarkSequencePoint(doc12, 534, 1, 534, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 32)
Typ = GetType(ConstLiteral)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("FldLitTyp"))
Typ = GetType(Loader).GetField("FldLitTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stfld, GetType(ConstLiteral).GetField("ExtTyp"))
ASTEmitIL.MarkSequencePoint(doc12, 535, 1, 535, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("EnumLitFlag"))
Typ = GetType(Loader).GetField("EnumLitFlag").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa271 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru271 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont271 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru271)
ASTEmitIL.Emit(OpCodes.Br, fa271)
ASTEmitIL.MarkLabel(tru271)
ASTEmitIL.MarkSequencePoint(doc12, 536, 1, 536, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 32)
Typ = GetType(ConstLiteral)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("EnumLitTyp"))
Typ = GetType(Loader).GetField("EnumLitTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stfld, GetType(ConstLiteral).GetField("IntTyp"))
ASTEmitIL.MarkSequencePoint(doc12, 537, 1, 537, 100)
ASTEmitIL.Emit(OpCodes.Br, cont271)
ASTEmitIL.MarkLabel(fa271)
ASTEmitIL.MarkSequencePoint(doc12, 538, 1, 538, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 32)
Typ = GetType(ConstLiteral)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("FldLitTyp"))
Typ = GetType(Loader).GetField("FldLitTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stfld, GetType(ConstLiteral).GetField("IntTyp"))
ASTEmitIL.MarkSequencePoint(doc12, 539, 1, 539, 100)
ASTEmitIL.Emit(OpCodes.Br, cont271)
ASTEmitIL.MarkLabel(cont271)
ASTEmitIL.MarkSequencePoint(doc12, 541, 1, 541, 100)
Dim locbldr281 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Literal))
locbldr281.SetLocalSymInfo("constl")
Dim typ102(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 32)
Typ = GetType(ConstLiteral)
ReDim Preserve typ102(UBound(typ102) + 1)
typ102(UBound(typ102)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessConst", typ102))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessConst", typ102).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 33)
ASTEmitIL.MarkSequencePoint(doc12, 542, 1, 542, 100)
Dim typ103(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 33)
Typ = GetType(Literal)
ReDim Preserve typ103(UBound(typ103) + 1)
typ103(UBound(typ103)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLiteral", typ103))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLiteral", typ103).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 543, 1, 543, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("FldLitTyp"))
Typ = GetType(Loader).GetField("FldLitTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc12, 544, 1, 544, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("FldLitTyp"))
Typ = GetType(Loader).GetField("FldLitTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc12, 545, 1, 545, 100)
ASTEmitIL.Emit(OpCodes.Br, cont270)
ASTEmitIL.MarkLabel(cont270)
ASTEmitIL.MarkSequencePoint(doc12, 546, 1, 546, 100)
ASTEmitIL.Emit(OpCodes.Br, cont269)
ASTEmitIL.MarkLabel(fa269)
ASTEmitIL.Emit(OpCodes.Br, cont269)
ASTEmitIL.MarkLabel(cont269)
ASTEmitIL.MarkSequencePoint(doc12, 548, 1, 548, 100)
ASTEmitIL.Emit(OpCodes.Br, cont268)
ASTEmitIL.MarkLabel(fa268)
ASTEmitIL.MarkSequencePoint(doc12, 550, 1, 550, 100)
Dim typ104(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ104(UBound(typ104) + 1)
typ104(UBound(typ104)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ104))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ104).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 22)
ASTEmitIL.MarkSequencePoint(doc12, 551, 1, 551, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa272 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru272 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont272 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru272)
ASTEmitIL.Emit(OpCodes.Br, fa272)
ASTEmitIL.MarkLabel(tru272)
ASTEmitIL.MarkSequencePoint(doc12, 552, 1, 552, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
ASTEmitIL.MarkSequencePoint(doc12, 553, 1, 553, 100)
Dim typ106(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(FieldInfo)
ReDim Preserve typ106(UBound(typ106) + 1)
typ106(UBound(typ106)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(System.Boolean)
ReDim Preserve typ106(UBound(typ106) + 1)
typ106(UBound(typ106)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ106))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ106).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 554, 1, 554, 100)
ASTEmitIL.Emit(OpCodes.Br, cont272)
ASTEmitIL.MarkLabel(fa272)
ASTEmitIL.Emit(OpCodes.Br, cont272)
ASTEmitIL.MarkLabel(cont272)
ASTEmitIL.MarkSequencePoint(doc12, 555, 1, 555, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc12, 556, 1, 556, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc12, 557, 1, 557, 100)
ASTEmitIL.Emit(OpCodes.Br, cont268)
ASTEmitIL.MarkLabel(cont268)
ASTEmitIL.MarkSequencePoint(doc12, 559, 1, 559, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa273 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru273 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont273 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru273)
ASTEmitIL.Emit(OpCodes.Br, fa273)
ASTEmitIL.MarkLabel(tru273)
ASTEmitIL.MarkSequencePoint(doc12, 560, 1, 560, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 28)
ASTEmitIL.MarkSequencePoint(doc12, 561, 1, 561, 100)
ASTEmitIL.Emit(OpCodes.Br, cont273)
ASTEmitIL.MarkLabel(fa273)
ASTEmitIL.Emit(OpCodes.Br, cont273)
ASTEmitIL.MarkLabel(cont273)
ASTEmitIL.MarkSequencePoint(doc12, 563, 1, 563, 100)
ASTEmitIL.Emit(OpCodes.Br, cont256)
ASTEmitIL.MarkLabel(cont256)
ASTEmitIL.MarkSequencePoint(doc12, 565, 1, 565, 100)
ASTEmitIL.MarkLabel(label12)
ASTEmitIL.MarkSequencePoint(doc12, 567, 1, 567, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 24)
ASTEmitIL.MarkSequencePoint(doc12, 569, 1, 569, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(System.Int32)
Dim fa274 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru274 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont274 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru274)
ASTEmitIL.Emit(OpCodes.Br, fa274)
ASTEmitIL.MarkLabel(tru274)
ASTEmitIL.MarkSequencePoint(doc12, 570, 1, 570, 100)
ASTEmitIL.Emit(OpCodes.Br, label11)
ASTEmitIL.MarkSequencePoint(doc12, 571, 1, 571, 100)
ASTEmitIL.Emit(OpCodes.Br, cont274)
ASTEmitIL.MarkLabel(fa274)
ASTEmitIL.MarkSequencePoint(doc12, 572, 1, 572, 100)
ASTEmitIL.Emit(OpCodes.Br, label10)
ASTEmitIL.MarkSequencePoint(doc12, 573, 1, 573, 100)
ASTEmitIL.Emit(OpCodes.Br, cont274)
ASTEmitIL.MarkLabel(cont274)
ASTEmitIL.MarkSequencePoint(doc12, 575, 1, 575, 100)
ASTEmitIL.MarkLabel(label11)
ASTEmitIL.MarkSequencePoint(doc12, 577, 1, 577, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(Ident)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("MemberAccessFlg"))
Typ = GetType(Ident).GetField("MemberAccessFlg").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa275 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru275 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont275 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru275)
ASTEmitIL.Emit(OpCodes.Br, fa275)
ASTEmitIL.MarkLabel(tru275)
ASTEmitIL.MarkSequencePoint(doc12, 578, 1, 578, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("ChainFlg"))
ASTEmitIL.MarkSequencePoint(doc12, 579, 1, 579, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ109(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(Ident)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("MemberToAccess"))
Typ = GetType(Ident).GetField("MemberToAccess").FieldType
ReDim Preserve typ109(UBound(typ109) + 1)
typ109(UBound(typ109)) = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ReDim Preserve typ109(UBound(typ109) + 1)
typ109(UBound(typ109)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 580, 1, 580, 100)
ASTEmitIL.Emit(OpCodes.Br, cont275)
ASTEmitIL.MarkLabel(fa275)
ASTEmitIL.Emit(OpCodes.Br, cont275)
ASTEmitIL.MarkLabel(cont275)
ASTEmitIL.MarkSequencePoint(doc12, 582, 1, 582, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(Ident)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Conv"))
Typ = GetType(Ident).GetField("Conv").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa276 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru276 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont276 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru276)
ASTEmitIL.Emit(OpCodes.Br, fa276)
ASTEmitIL.MarkLabel(tru276)
ASTEmitIL.MarkSequencePoint(doc12, 584, 1, 584, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa277 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru277 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont277 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru277)
ASTEmitIL.Emit(OpCodes.Br, fa277)
ASTEmitIL.MarkLabel(tru277)
ASTEmitIL.MarkSequencePoint(doc12, 585, 1, 585, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 15)
ASTEmitIL.MarkSequencePoint(doc12, 586, 1, 586, 100)
ASTEmitIL.Emit(OpCodes.Br, cont277)
ASTEmitIL.MarkLabel(fa277)
ASTEmitIL.Emit(OpCodes.Br, cont277)
ASTEmitIL.MarkLabel(cont277)
ASTEmitIL.MarkSequencePoint(doc12, 588, 1, 588, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(Ident)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("TTok"))
Typ = GetType(Ident).GetField("TTok").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 10)
ASTEmitIL.MarkSequencePoint(doc12, 589, 1, 589, 100)
Dim typ110(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
ReDim Preserve typ110(UBound(typ110) + 1)
typ110(UBound(typ110)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ110))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ110).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc12, 591, 1, 591, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa278 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru278 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont278 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru278)
ASTEmitIL.Emit(OpCodes.Br, fa278)
ASTEmitIL.MarkLabel(tru278)
ASTEmitIL.MarkSequencePoint(doc12, 592, 1, 592, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 16)
ASTEmitIL.MarkSequencePoint(doc12, 593, 1, 593, 100)
Dim typ111(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(System.Type)
ReDim Preserve typ111(UBound(typ111) + 1)
typ111(UBound(typ111)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(System.Type)
ReDim Preserve typ111(UBound(typ111) + 1)
typ111(UBound(typ111)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitConv", typ111))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitConv", typ111).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 594, 1, 594, 100)
ASTEmitIL.Emit(OpCodes.Br, cont278)
ASTEmitIL.MarkLabel(fa278)
ASTEmitIL.Emit(OpCodes.Br, cont278)
ASTEmitIL.MarkLabel(cont278)
ASTEmitIL.MarkSequencePoint(doc12, 596, 1, 596, 100)
ASTEmitIL.Emit(OpCodes.Br, cont276)
ASTEmitIL.MarkLabel(fa276)
ASTEmitIL.Emit(OpCodes.Br, cont276)
ASTEmitIL.MarkLabel(cont276)
ASTEmitIL.MarkSequencePoint(doc12, 598, 1, 598, 100)
ASTEmitIL.Emit(OpCodes.Br, label9)
ASTEmitIL.MarkSequencePoint(doc12, 599, 1, 599, 100)
ASTEmitIL.Emit(OpCodes.Br, cont252)
ASTEmitIL.MarkLabel(fa252)
ASTEmitIL.Emit(OpCodes.Br, cont252)
ASTEmitIL.MarkLabel(cont252)
ASTEmitIL.MarkSequencePoint(doc12, 601, 1, 601, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(MethodCallTok))
Dim typ112 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ112))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ112).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc12, 602, 1, 602, 100)
Dim typ113(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ113(UBound(typ113) + 1)
typ113(UBound(typ113)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ113))
Typ = Typ03.GetMethod("IsInstanceOfType", typ113).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc12, 604, 1, 604, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa279 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru279 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont279 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru279)
ASTEmitIL.Emit(OpCodes.Br, fa279)
ASTEmitIL.MarkLabel(tru279)
ASTEmitIL.MarkSequencePoint(doc12, 605, 1, 605, 100)
Dim locbldr282 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Type))
locbldr282.SetLocalSymInfo("mcparenttyp")
ASTEmitIL.MarkSequencePoint(doc12, 606, 1, 606, 100)
Dim locbldr283 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.String).MakeArrayType())
locbldr283.SetLocalSymInfo("mnstrarr")
ASTEmitIL.MarkSequencePoint(doc12, 607, 1, 607, 100)
Dim locbldr284 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(MethodInfo))
locbldr284.SetLocalSymInfo("mcmetinf")
ASTEmitIL.MarkSequencePoint(doc12, 608, 1, 608, 100)
Dim locbldr285 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Type))
locbldr285.SetLocalSymInfo("nctyp")
ASTEmitIL.MarkSequencePoint(doc12, 609, 1, 609, 100)
Dim locbldr286 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(MethodCallTok))
locbldr286.SetLocalSymInfo("mctok")
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Stloc, 38)
ASTEmitIL.MarkSequencePoint(doc12, 610, 1, 610, 100)
Dim locbldr287 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(MethodNameTok))
locbldr287.SetLocalSymInfo("mntok")
ASTEmitIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(MethodCallTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodCallTok).GetField("Name"))
Typ = GetType(MethodCallTok).GetField("Name").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 39)
ASTEmitIL.MarkSequencePoint(doc12, 611, 1, 611, 100)
Dim locbldr288 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.String))
locbldr288.SetLocalSymInfo("mnstr")
ASTEmitIL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ASTEmitIL.Emit(OpCodes.Stloc, 40)
ASTEmitIL.MarkSequencePoint(doc12, 612, 1, 612, 100)
Dim locbldr289 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Expr).MakeArrayType())
locbldr289.SetLocalSymInfo("mcparams")
ASTEmitIL.MarkSequencePoint(doc12, 613, 1, 613, 100)
Dim locbldr290 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Type).MakeArrayType())
locbldr290.SetLocalSymInfo("typarr1")
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
ASTEmitIL.Emit(OpCodes.Newarr, GetType(System.Type))
ASTEmitIL.Emit(OpCodes.Stloc, 42)
ASTEmitIL.MarkSequencePoint(doc12, 614, 1, 614, 100)
Dim locbldr291 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Type).MakeArrayType())
locbldr291.SetLocalSymInfo("typarr2")
ASTEmitIL.MarkSequencePoint(doc12, 615, 1, 615, 100)
Dim locbldr292 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Int32))
locbldr292.SetLocalSymInfo("paramlen")
ASTEmitIL.MarkSequencePoint(doc12, 616, 1, 616, 100)
Dim locbldr293 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Expr))
locbldr293.SetLocalSymInfo("curexpr")
ASTEmitIL.MarkSequencePoint(doc12, 617, 1, 617, 100)
Dim locbldr294 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Expr))
locbldr294.SetLocalSymInfo("rpnparam")
ASTEmitIL.MarkSequencePoint(doc12, 618, 1, 618, 100)
Dim locbldr295 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Token))
locbldr295.SetLocalSymInfo("astparam")
ASTEmitIL.MarkSequencePoint(doc12, 619, 1, 619, 100)
Dim locbldr296 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(ConstructorInfo))
locbldr296.SetLocalSymInfo("ncctorinf")
ASTEmitIL.MarkSequencePoint(doc12, 620, 1, 620, 100)
Dim locbldr297 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(FieldInfo))
locbldr297.SetLocalSymInfo("mcfldinf")
ASTEmitIL.MarkSequencePoint(doc12, 621, 1, 621, 100)
Dim locbldr298 As LocalBuilder = ASTEmitIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"))
locbldr298.SetLocalSymInfo("mcvr")
ASTEmitIL.MarkSequencePoint(doc12, 622, 1, 622, 100)
Dim locbldr299 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr299.SetLocalSymInfo("mcisstatic")
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 51)
ASTEmitIL.MarkSequencePoint(doc12, 623, 1, 623, 100)
Dim locbldr300 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr300.SetLocalSymInfo("mectorflg")
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 52)
ASTEmitIL.MarkSequencePoint(doc12, 625, 1, 625, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(MethodNameTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodNameTok).GetField("Value"))
Typ = GetType(MethodNameTok).GetField("Value").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 40)
ASTEmitIL.MarkSequencePoint(doc12, 626, 1, 626, 100)
Dim typ114(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(System.String)
ReDim Preserve typ114(UBound(typ114) + 1)
typ114(UBound(typ114)) = Typ
ASTEmitIL.Emit(OpCodes.Ldstr, ":")
Typ = GetType(System.String)
ReDim Preserve typ114(UBound(typ114) + 1)
typ114(UBound(typ114)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ParseUtils).GetMethod("StringParser", typ114))
Typ = GetType(ParseUtils).GetMethod("StringParser", typ114).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 35)
ASTEmitIL.MarkSequencePoint(doc12, 627, 1, 627, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(MethodCallTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodCallTok).GetField("Params"))
Typ = GetType(MethodCallTok).GetField("Params").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 41)
ASTEmitIL.MarkSequencePoint(doc12, 628, 1, 628, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(Expr).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Sub)
ASTEmitIL.Emit(OpCodes.Stloc, 44)
ASTEmitIL.MarkSequencePoint(doc12, 629, 1, 629, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 23)
ASTEmitIL.MarkSequencePoint(doc12, 630, 1, 630, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 24)
ASTEmitIL.MarkSequencePoint(doc12, 632, 1, 632, 100)
ASTEmitIL.Emit(OpCodes.Ldnull)
ASTEmitIL.Emit(OpCodes.Stloc, 34)
ASTEmitIL.MarkSequencePoint(doc12, 633, 1, 633, 100)
ASTEmitIL.Emit(OpCodes.Ldnull)
ASTEmitIL.Emit(OpCodes.Stloc, 36)
ASTEmitIL.MarkSequencePoint(doc12, 634, 1, 634, 100)
ASTEmitIL.Emit(OpCodes.Ldnull)
ASTEmitIL.Emit(OpCodes.Stloc, 49)
ASTEmitIL.MarkSequencePoint(doc12, 636, 1, 636, 100)
Dim typ115(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(System.String)
ReDim Preserve typ115(UBound(typ115) + 1)
typ115(UBound(typ115)) = Typ
ASTEmitIL.Emit(OpCodes.Ldstr, "me::ctor")
Typ = GetType(System.String)
ReDim Preserve typ115(UBound(typ115) + 1)
typ115(UBound(typ115)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ115))
Typ = GetType(String).GetMethod("Compare", typ115).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 26)
ASTEmitIL.MarkSequencePoint(doc12, 637, 1, 637, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 26)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa280 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru280 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont280 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru280)
ASTEmitIL.Emit(OpCodes.Br, fa280)
ASTEmitIL.MarkLabel(tru280)
ASTEmitIL.MarkSequencePoint(doc12, 638, 1, 638, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 52)
ASTEmitIL.MarkSequencePoint(doc12, 639, 1, 639, 100)
ASTEmitIL.Emit(OpCodes.Br, cont280)
ASTEmitIL.MarkLabel(fa280)
ASTEmitIL.Emit(OpCodes.Br, cont280)
ASTEmitIL.MarkLabel(cont280)
ASTEmitIL.MarkSequencePoint(doc12, 641, 1, 641, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc12, 642, 1, 642, 100)
Dim locbldr301 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.String))
locbldr301.SetLocalSymInfo("tstr")
ASTEmitIL.MarkSequencePoint(doc12, 643, 1, 643, 100)
Dim typ116(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(System.String)
ReDim Preserve typ116(UBound(typ116) + 1)
typ116(UBound(typ116)) = Typ
ASTEmitIL.Emit(OpCodes.Ldstr, ":")
Typ = GetType(System.String)
ReDim Preserve typ116(UBound(typ116) + 1)
typ116(UBound(typ116)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ParseUtils).GetMethod("StringParser", typ116))
Typ = GetType(ParseUtils).GetMethod("StringParser", typ116).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 35)
ASTEmitIL.MarkSequencePoint(doc12, 644, 1, 644, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(System.String).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Sub)
ASTEmitIL.Emit(OpCodes.Stloc, 13)
ASTEmitIL.MarkSequencePoint(doc12, 646, 1, 646, 100)
Dim typ117(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ117(UBound(typ117) + 1)
typ117(UBound(typ117)) = Typ
ASTEmitIL.Emit(OpCodes.Ldstr, "me")
Typ = GetType(System.String)
ReDim Preserve typ117(UBound(typ117) + 1)
typ117(UBound(typ117)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ117))
Typ = GetType(String).GetMethod("Compare", typ117).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 26)
ASTEmitIL.MarkSequencePoint(doc12, 647, 1, 647, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 26)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa281 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru281 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont281 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru281)
ASTEmitIL.Emit(OpCodes.Br, fa281)
ASTEmitIL.MarkLabel(tru281)
ASTEmitIL.MarkSequencePoint(doc12, 648, 1, 648, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Add)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc12, 649, 1, 649, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 23)
ASTEmitIL.MarkSequencePoint(doc12, 650, 1, 650, 100)
ASTEmitIL.Emit(OpCodes.Br, cont281)
ASTEmitIL.MarkLabel(fa281)
ASTEmitIL.Emit(OpCodes.Br, cont281)
ASTEmitIL.MarkLabel(cont281)
ASTEmitIL.MarkSequencePoint(doc12, 652, 1, 652, 100)
Dim label13 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc12, 653, 1, 653, 100)
Dim label14 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc12, 654, 1, 654, 100)
Dim label15 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc12, 656, 1, 656, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa282 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru282 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont282 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru282)
ASTEmitIL.Emit(OpCodes.Br, fa282)
ASTEmitIL.MarkLabel(tru282)
ASTEmitIL.MarkSequencePoint(doc12, 658, 1, 658, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("ChainFlg"))
Typ = GetType(AsmFactory).GetField("ChainFlg").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa283 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru283 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont283 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru283)
ASTEmitIL.Emit(OpCodes.Br, fa283)
ASTEmitIL.MarkLabel(tru283)
ASTEmitIL.MarkSequencePoint(doc12, 659, 1, 659, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("ChainFlg"))
ASTEmitIL.MarkSequencePoint(doc12, 660, 1, 660, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 34)
ASTEmitIL.MarkSequencePoint(doc12, 661, 1, 661, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 24)
ASTEmitIL.MarkSequencePoint(doc12, 662, 1, 662, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 51)
ASTEmitIL.MarkSequencePoint(doc12, 663, 1, 663, 100)
ASTEmitIL.Emit(OpCodes.Br, cont283)
ASTEmitIL.MarkLabel(fa283)
ASTEmitIL.Emit(OpCodes.Br, cont283)
ASTEmitIL.MarkLabel(cont283)
ASTEmitIL.MarkSequencePoint(doc12, 665, 1, 665, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(System.String).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 26)
ASTEmitIL.MarkSequencePoint(doc12, 666, 1, 666, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 26)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
Dim fa284 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru284 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont284 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Bge, tru284)
ASTEmitIL.Emit(OpCodes.Br, fa284)
ASTEmitIL.MarkLabel(tru284)
ASTEmitIL.MarkSequencePoint(doc12, 668, 1, 668, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AddrFlg"))
ASTEmitIL.MarkSequencePoint(doc12, 670, 1, 670, 100)
ASTEmitIL.MarkLabel(label13)
ASTEmitIL.MarkSequencePoint(doc12, 671, 1, 671, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Add)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc12, 673, 1, 673, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa285 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru285 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont285 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru285)
ASTEmitIL.Emit(OpCodes.Br, fa285)
ASTEmitIL.MarkLabel(tru285)
ASTEmitIL.MarkSequencePoint(doc12, 675, 1, 675, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 23)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa286 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru286 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont286 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru286)
ASTEmitIL.Emit(OpCodes.Br, fa286)
ASTEmitIL.MarkLabel(tru286)
ASTEmitIL.MarkSequencePoint(doc12, 676, 1, 676, 100)
Dim typ118(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ118(UBound(typ118) + 1)
typ118(UBound(typ118)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindVar", typ118))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindVar", typ118).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 50)
ASTEmitIL.MarkSequencePoint(doc12, 677, 1, 677, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 50)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldnull)
Dim fa287 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru287 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont287 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, fa287)
ASTEmitIL.Emit(OpCodes.Br, tru287)
ASTEmitIL.MarkLabel(tru287)
ASTEmitIL.MarkSequencePoint(doc12, 678, 1, 678, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa288 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru288 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont288 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru288)
ASTEmitIL.Emit(OpCodes.Br, fa288)
ASTEmitIL.MarkLabel(tru288)
ASTEmitIL.MarkSequencePoint(doc12, 679, 1, 679, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 50)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
ASTEmitIL.MarkSequencePoint(doc12, 680, 1, 680, 100)
Dim typ119(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 50)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("Index"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("Index").FieldType
ReDim Preserve typ119(UBound(typ119) + 1)
typ119(UBound(typ119)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 50)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("LocArg"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("LocArg").FieldType
ReDim Preserve typ119(UBound(typ119) + 1)
typ119(UBound(typ119)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLocLd", typ119))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLocLd", typ119).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 681, 1, 681, 100)
ASTEmitIL.Emit(OpCodes.Br, cont288)
ASTEmitIL.MarkLabel(fa288)
ASTEmitIL.Emit(OpCodes.Br, cont288)
ASTEmitIL.MarkLabel(cont288)
ASTEmitIL.MarkSequencePoint(doc12, 682, 1, 682, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 50)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc12, 683, 1, 683, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 50)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 34)
ASTEmitIL.MarkSequencePoint(doc12, 684, 1, 684, 100)
ASTEmitIL.Emit(OpCodes.Br, label15)
ASTEmitIL.MarkSequencePoint(doc12, 685, 1, 685, 100)
ASTEmitIL.Emit(OpCodes.Br, cont287)
ASTEmitIL.MarkLabel(fa287)
ASTEmitIL.MarkSequencePoint(doc12, 687, 1, 687, 100)
Dim typ120(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ120(UBound(typ120) + 1)
typ120(UBound(typ120)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ120))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ120).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 49)
ASTEmitIL.MarkSequencePoint(doc12, 689, 1, 689, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 49)
Typ = GetType(FieldInfo)
ASTEmitIL.Emit(OpCodes.Ldnull)
Dim fa289 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru289 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont289 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, fa289)
ASTEmitIL.Emit(OpCodes.Br, tru289)
ASTEmitIL.MarkLabel(tru289)
ASTEmitIL.MarkSequencePoint(doc12, 690, 1, 690, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 49)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsStatic", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsStatic", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 28)
ASTEmitIL.MarkSequencePoint(doc12, 691, 1, 691, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa290 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru290 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont290 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru290)
ASTEmitIL.Emit(OpCodes.Br, fa290)
ASTEmitIL.MarkLabel(tru290)
ASTEmitIL.MarkSequencePoint(doc12, 692, 1, 692, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa291 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru291 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont291 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru291)
ASTEmitIL.Emit(OpCodes.Br, fa291)
ASTEmitIL.MarkLabel(tru291)
ASTEmitIL.MarkSequencePoint(doc12, 693, 1, 693, 100)
Dim typ122(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReDim Preserve typ122(UBound(typ122) + 1)
typ122(UBound(typ122)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdarg", typ122))
Typ = GetType(ILEmitter).GetMethod("EmitLdarg", typ122).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 694, 1, 694, 100)
ASTEmitIL.Emit(OpCodes.Br, cont291)
ASTEmitIL.MarkLabel(fa291)
ASTEmitIL.Emit(OpCodes.Br, cont291)
ASTEmitIL.MarkLabel(cont291)
ASTEmitIL.MarkSequencePoint(doc12, 695, 1, 695, 100)
ASTEmitIL.Emit(OpCodes.Br, cont290)
ASTEmitIL.MarkLabel(fa290)
ASTEmitIL.Emit(OpCodes.Br, cont290)
ASTEmitIL.MarkLabel(cont290)
ASTEmitIL.MarkSequencePoint(doc12, 696, 1, 696, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa292 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru292 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont292 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru292)
ASTEmitIL.Emit(OpCodes.Br, fa292)
ASTEmitIL.MarkLabel(tru292)
ASTEmitIL.MarkSequencePoint(doc12, 697, 1, 697, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 49)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
ASTEmitIL.MarkSequencePoint(doc12, 698, 1, 698, 100)
Dim typ124(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 49)
Typ = GetType(FieldInfo)
ReDim Preserve typ124(UBound(typ124) + 1)
typ124(UBound(typ124)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(System.Boolean)
ReDim Preserve typ124(UBound(typ124) + 1)
typ124(UBound(typ124)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ124))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ124).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 699, 1, 699, 100)
ASTEmitIL.Emit(OpCodes.Br, cont292)
ASTEmitIL.MarkLabel(fa292)
ASTEmitIL.Emit(OpCodes.Br, cont292)
ASTEmitIL.MarkLabel(cont292)
ASTEmitIL.MarkSequencePoint(doc12, 700, 1, 700, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 49)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc12, 701, 1, 701, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 49)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 34)
ASTEmitIL.MarkSequencePoint(doc12, 702, 1, 702, 100)
ASTEmitIL.Emit(OpCodes.Br, label15)
ASTEmitIL.MarkSequencePoint(doc12, 703, 1, 703, 100)
ASTEmitIL.Emit(OpCodes.Br, cont289)
ASTEmitIL.MarkLabel(fa289)
ASTEmitIL.Emit(OpCodes.Br, cont289)
ASTEmitIL.MarkLabel(cont289)
ASTEmitIL.MarkSequencePoint(doc12, 705, 1, 705, 100)
ASTEmitIL.Emit(OpCodes.Br, cont287)
ASTEmitIL.MarkLabel(cont287)
ASTEmitIL.MarkSequencePoint(doc12, 707, 1, 707, 100)
ASTEmitIL.Emit(OpCodes.Br, cont286)
ASTEmitIL.MarkLabel(fa286)
ASTEmitIL.MarkSequencePoint(doc12, 709, 1, 709, 100)
Dim typ127(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ127(UBound(typ127) + 1)
typ127(UBound(typ127)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ127))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ127).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 49)
ASTEmitIL.MarkSequencePoint(doc12, 711, 1, 711, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 49)
Typ = GetType(FieldInfo)
ASTEmitIL.Emit(OpCodes.Ldnull)
Dim fa293 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru293 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont293 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, fa293)
ASTEmitIL.Emit(OpCodes.Br, tru293)
ASTEmitIL.MarkLabel(tru293)
ASTEmitIL.MarkSequencePoint(doc12, 712, 1, 712, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 49)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsStatic", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsStatic", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 28)
ASTEmitIL.MarkSequencePoint(doc12, 713, 1, 713, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa294 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru294 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont294 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru294)
ASTEmitIL.Emit(OpCodes.Br, fa294)
ASTEmitIL.MarkLabel(tru294)
ASTEmitIL.MarkSequencePoint(doc12, 714, 1, 714, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa295 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru295 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont295 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru295)
ASTEmitIL.Emit(OpCodes.Br, fa295)
ASTEmitIL.MarkLabel(tru295)
ASTEmitIL.MarkSequencePoint(doc12, 715, 1, 715, 100)
Dim typ129(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReDim Preserve typ129(UBound(typ129) + 1)
typ129(UBound(typ129)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdarg", typ129))
Typ = GetType(ILEmitter).GetMethod("EmitLdarg", typ129).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 716, 1, 716, 100)
ASTEmitIL.Emit(OpCodes.Br, cont295)
ASTEmitIL.MarkLabel(fa295)
ASTEmitIL.Emit(OpCodes.Br, cont295)
ASTEmitIL.MarkLabel(cont295)
ASTEmitIL.MarkSequencePoint(doc12, 717, 1, 717, 100)
ASTEmitIL.Emit(OpCodes.Br, cont294)
ASTEmitIL.MarkLabel(fa294)
ASTEmitIL.Emit(OpCodes.Br, cont294)
ASTEmitIL.MarkLabel(cont294)
ASTEmitIL.MarkSequencePoint(doc12, 718, 1, 718, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa296 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru296 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont296 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru296)
ASTEmitIL.Emit(OpCodes.Br, fa296)
ASTEmitIL.MarkLabel(tru296)
ASTEmitIL.MarkSequencePoint(doc12, 719, 1, 719, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 49)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
ASTEmitIL.MarkSequencePoint(doc12, 720, 1, 720, 100)
Dim typ131(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 49)
Typ = GetType(FieldInfo)
ReDim Preserve typ131(UBound(typ131) + 1)
typ131(UBound(typ131)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(System.Boolean)
ReDim Preserve typ131(UBound(typ131) + 1)
typ131(UBound(typ131)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ131))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ131).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 721, 1, 721, 100)
ASTEmitIL.Emit(OpCodes.Br, cont296)
ASTEmitIL.MarkLabel(fa296)
ASTEmitIL.Emit(OpCodes.Br, cont296)
ASTEmitIL.MarkLabel(cont296)
ASTEmitIL.MarkSequencePoint(doc12, 722, 1, 722, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 49)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc12, 723, 1, 723, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 49)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 34)
ASTEmitIL.MarkSequencePoint(doc12, 724, 1, 724, 100)
ASTEmitIL.Emit(OpCodes.Br, label15)
ASTEmitIL.MarkSequencePoint(doc12, 725, 1, 725, 100)
ASTEmitIL.Emit(OpCodes.Br, cont293)
ASTEmitIL.MarkLabel(fa293)
ASTEmitIL.Emit(OpCodes.Br, cont293)
ASTEmitIL.MarkLabel(cont293)
ASTEmitIL.MarkSequencePoint(doc12, 727, 1, 727, 100)
ASTEmitIL.Emit(OpCodes.Br, cont286)
ASTEmitIL.MarkLabel(cont286)
ASTEmitIL.MarkSequencePoint(doc12, 732, 1, 732, 100)
Dim typ134(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ134(UBound(typ134) + 1)
typ134(UBound(typ134)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadClass", typ134))
Typ = GetType(Loader).GetMethod("LoadClass", typ134).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 34)
ASTEmitIL.MarkSequencePoint(doc12, 733, 1, 733, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 51)
ASTEmitIL.MarkSequencePoint(doc12, 735, 1, 735, 100)
ASTEmitIL.Emit(OpCodes.Br, cont285)
ASTEmitIL.MarkLabel(fa285)
ASTEmitIL.MarkSequencePoint(doc12, 737, 1, 737, 100)
Dim typ135(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 34)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
ReDim Preserve typ135(UBound(typ135) + 1)
typ135(UBound(typ135)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ135))
Typ = Typ03.GetMethod("Equals", typ135).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc12, 739, 1, 739, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa297 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru297 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont297 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru297)
ASTEmitIL.Emit(OpCodes.Br, fa297)
ASTEmitIL.MarkLabel(tru297)
ASTEmitIL.MarkSequencePoint(doc12, 740, 1, 740, 100)
Dim typ136(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 34)
Typ = GetType(System.Type)
ReDim Preserve typ136(UBound(typ136) + 1)
typ136(UBound(typ136)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ136(UBound(typ136) + 1)
typ136(UBound(typ136)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadField", typ136))
Typ = GetType(Loader).GetMethod("LoadField", typ136).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 49)
ASTEmitIL.MarkSequencePoint(doc12, 741, 1, 741, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("MemberTyp"))
Typ = GetType(Loader).GetField("MemberTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc12, 742, 1, 742, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("MemberTyp"))
Typ = GetType(Loader).GetField("MemberTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
ASTEmitIL.MarkSequencePoint(doc12, 743, 1, 743, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("MemberTyp"))
Typ = GetType(Loader).GetField("MemberTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 34)
ASTEmitIL.MarkSequencePoint(doc12, 744, 1, 744, 100)
ASTEmitIL.Emit(OpCodes.Br, cont297)
ASTEmitIL.MarkLabel(fa297)
ASTEmitIL.MarkSequencePoint(doc12, 745, 1, 745, 100)
Dim typ137(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ137(UBound(typ137) + 1)
typ137(UBound(typ137)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ137))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ137).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 49)
ASTEmitIL.MarkSequencePoint(doc12, 746, 1, 746, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 49)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc12, 747, 1, 747, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 49)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
ASTEmitIL.MarkSequencePoint(doc12, 748, 1, 748, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 49)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 34)
ASTEmitIL.MarkSequencePoint(doc12, 749, 1, 749, 100)
ASTEmitIL.Emit(OpCodes.Br, cont297)
ASTEmitIL.MarkLabel(cont297)
ASTEmitIL.MarkSequencePoint(doc12, 751, 1, 751, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa298 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru298 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont298 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru298)
ASTEmitIL.Emit(OpCodes.Br, fa298)
ASTEmitIL.MarkLabel(tru298)
ASTEmitIL.MarkSequencePoint(doc12, 752, 1, 752, 100)
Dim typ141(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 49)
Typ = GetType(FieldInfo)
ReDim Preserve typ141(UBound(typ141) + 1)
typ141(UBound(typ141)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 51)
Typ = GetType(System.Boolean)
ReDim Preserve typ141(UBound(typ141) + 1)
typ141(UBound(typ141)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ141))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ141).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 753, 1, 753, 100)
ASTEmitIL.Emit(OpCodes.Br, cont298)
ASTEmitIL.MarkLabel(fa298)
ASTEmitIL.Emit(OpCodes.Br, cont298)
ASTEmitIL.MarkLabel(cont298)
ASTEmitIL.MarkSequencePoint(doc12, 755, 1, 755, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 51)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa299 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru299 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont299 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru299)
ASTEmitIL.Emit(OpCodes.Br, fa299)
ASTEmitIL.MarkLabel(tru299)
ASTEmitIL.MarkSequencePoint(doc12, 756, 1, 756, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 51)
ASTEmitIL.MarkSequencePoint(doc12, 757, 1, 757, 100)
ASTEmitIL.Emit(OpCodes.Br, cont299)
ASTEmitIL.MarkLabel(fa299)
ASTEmitIL.Emit(OpCodes.Br, cont299)
ASTEmitIL.MarkLabel(cont299)
ASTEmitIL.MarkSequencePoint(doc12, 759, 1, 759, 100)
ASTEmitIL.Emit(OpCodes.Br, cont285)
ASTEmitIL.MarkLabel(cont285)
ASTEmitIL.MarkSequencePoint(doc12, 761, 1, 761, 100)
ASTEmitIL.MarkLabel(label15)
ASTEmitIL.MarkSequencePoint(doc12, 763, 1, 763, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 24)
ASTEmitIL.MarkSequencePoint(doc12, 765, 1, 765, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(System.Int32)
Dim fa300 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru300 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont300 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru300)
ASTEmitIL.Emit(OpCodes.Br, fa300)
ASTEmitIL.MarkLabel(tru300)
ASTEmitIL.MarkSequencePoint(doc12, 766, 1, 766, 100)
ASTEmitIL.Emit(OpCodes.Br, label14)
ASTEmitIL.MarkSequencePoint(doc12, 767, 1, 767, 100)
ASTEmitIL.Emit(OpCodes.Br, cont300)
ASTEmitIL.MarkLabel(fa300)
ASTEmitIL.MarkSequencePoint(doc12, 768, 1, 768, 100)
ASTEmitIL.Emit(OpCodes.Br, label13)
ASTEmitIL.MarkSequencePoint(doc12, 769, 1, 769, 100)
ASTEmitIL.Emit(OpCodes.Br, cont300)
ASTEmitIL.MarkLabel(cont300)
ASTEmitIL.MarkSequencePoint(doc12, 771, 1, 771, 100)
ASTEmitIL.MarkLabel(label14)
ASTEmitIL.MarkSequencePoint(doc12, 773, 1, 773, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AddrFlg"))
ASTEmitIL.MarkSequencePoint(doc12, 775, 1, 775, 100)
ASTEmitIL.Emit(OpCodes.Br, cont284)
ASTEmitIL.MarkLabel(fa284)
ASTEmitIL.Emit(OpCodes.Br, cont284)
ASTEmitIL.MarkLabel(cont284)
ASTEmitIL.MarkSequencePoint(doc12, 777, 1, 777, 100)
ASTEmitIL.Emit(OpCodes.Br, cont282)
ASTEmitIL.MarkLabel(fa282)
ASTEmitIL.MarkSequencePoint(doc12, 779, 1, 779, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa301 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru301 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont301 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru301)
ASTEmitIL.Emit(OpCodes.Br, fa301)
ASTEmitIL.MarkLabel(tru301)
ASTEmitIL.MarkSequencePoint(doc12, 780, 1, 780, 100)
Dim typ142(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReDim Preserve typ142(UBound(typ142) + 1)
typ142(UBound(typ142)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdarg", typ142))
Typ = GetType(ILEmitter).GetMethod("EmitLdarg", typ142).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 781, 1, 781, 100)
ASTEmitIL.Emit(OpCodes.Br, cont301)
ASTEmitIL.MarkLabel(fa301)
ASTEmitIL.Emit(OpCodes.Br, cont301)
ASTEmitIL.MarkLabel(cont301)
ASTEmitIL.MarkSequencePoint(doc12, 783, 1, 783, 100)
ASTEmitIL.Emit(OpCodes.Br, cont282)
ASTEmitIL.MarkLabel(cont282)
ASTEmitIL.MarkSequencePoint(doc12, 785, 1, 785, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Add)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc12, 788, 1, 788, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa302 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru302 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont302 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru302)
ASTEmitIL.Emit(OpCodes.Br, fa302)
ASTEmitIL.MarkLabel(tru302)
ASTEmitIL.MarkSequencePoint(doc12, 790, 1, 790, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa303 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru303 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont303 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru303)
ASTEmitIL.Emit(OpCodes.Br, fa303)
ASTEmitIL.MarkLabel(tru303)
ASTEmitIL.MarkSequencePoint(doc12, 791, 1, 791, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa304 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru304 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont304 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru304)
ASTEmitIL.Emit(OpCodes.Br, fa304)
ASTEmitIL.MarkLabel(tru304)
ASTEmitIL.MarkSequencePoint(doc12, 792, 1, 792, 100)
Dim locbldr302 As LocalBuilder = ASTEmitIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr"))
locbldr302.SetLocalSymInfo("typarrstruct")
ASTEmitIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetField("TypLst"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetField("TypLst").FieldType
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ASTEmitIL.Emit(OpCodes.Stloc, 54)
ASTEmitIL.MarkSequencePoint(doc12, 793, 1, 793, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 54)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr")
ASTEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr").GetField("Arr"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.TypeArr").GetField("Arr").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 42)
ASTEmitIL.MarkSequencePoint(doc12, 794, 1, 794, 100)
Dim typ143(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ143(UBound(typ143) + 1)
typ143(UBound(typ143)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ143(UBound(typ143) + 1)
typ143(UBound(typ143)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocMet", typ143))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocMet", typ143).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 36)
ASTEmitIL.MarkSequencePoint(doc12, 795, 1, 795, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 36)
Typ = GetType(MethodInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsStatic", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsStatic", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 51)
ASTEmitIL.MarkSequencePoint(doc12, 796, 1, 796, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 51)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa305 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru305 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont305 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru305)
ASTEmitIL.Emit(OpCodes.Br, fa305)
ASTEmitIL.MarkLabel(tru305)
ASTEmitIL.MarkSequencePoint(doc12, 797, 1, 797, 100)
Dim typ145(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReDim Preserve typ145(UBound(typ145) + 1)
typ145(UBound(typ145)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdarg", typ145))
Typ = GetType(ILEmitter).GetMethod("EmitLdarg", typ145).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 798, 1, 798, 100)
ASTEmitIL.Emit(OpCodes.Br, cont305)
ASTEmitIL.MarkLabel(fa305)
ASTEmitIL.Emit(OpCodes.Br, cont305)
ASTEmitIL.MarkLabel(cont305)
ASTEmitIL.MarkSequencePoint(doc12, 799, 1, 799, 100)
ASTEmitIL.Emit(OpCodes.Br, cont304)
ASTEmitIL.MarkLabel(fa304)
ASTEmitIL.Emit(OpCodes.Br, cont304)
ASTEmitIL.MarkLabel(cont304)
ASTEmitIL.MarkSequencePoint(doc12, 800, 1, 800, 100)
ASTEmitIL.Emit(OpCodes.Br, cont303)
ASTEmitIL.MarkLabel(fa303)
ASTEmitIL.Emit(OpCodes.Br, cont303)
ASTEmitIL.MarkLabel(cont303)
ASTEmitIL.MarkSequencePoint(doc12, 802, 1, 802, 100)
ASTEmitIL.Emit(OpCodes.Br, cont302)
ASTEmitIL.MarkLabel(fa302)
ASTEmitIL.Emit(OpCodes.Br, cont302)
ASTEmitIL.MarkLabel(cont302)
ASTEmitIL.MarkSequencePoint(doc12, 804, 1, 804, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 12)
ASTEmitIL.MarkSequencePoint(doc12, 805, 1, 805, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type03"))
ASTEmitIL.MarkSequencePoint(doc12, 808, 1, 808, 100)
Dim label16 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc12, 809, 1, 809, 100)
Dim label17 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc12, 811, 1, 811, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc12, 812, 1, 812, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
ASTEmitIL.Emit(OpCodes.Newarr, GetType(System.Type))
ASTEmitIL.Emit(OpCodes.Stloc, 42)
ASTEmitIL.MarkSequencePoint(doc12, 814, 1, 814, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(Expr).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa306 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru306 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont306 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru306)
ASTEmitIL.Emit(OpCodes.Br, fa306)
ASTEmitIL.MarkLabel(tru306)
ASTEmitIL.MarkSequencePoint(doc12, 815, 1, 815, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(System.Type).GetField("EmptyTypes"))
Typ = GetType(System.Type).GetField("EmptyTypes").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 42)
ASTEmitIL.MarkSequencePoint(doc12, 816, 1, 816, 100)
ASTEmitIL.Emit(OpCodes.Br, label17)
ASTEmitIL.MarkSequencePoint(doc12, 817, 1, 817, 100)
ASTEmitIL.Emit(OpCodes.Br, cont306)
ASTEmitIL.MarkLabel(fa306)
ASTEmitIL.Emit(OpCodes.Br, cont306)
ASTEmitIL.MarkLabel(cont306)
ASTEmitIL.MarkSequencePoint(doc12, 819, 1, 819, 100)
ASTEmitIL.MarkLabel(label16)
ASTEmitIL.MarkSequencePoint(doc12, 821, 1, 821, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Add)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc12, 822, 1, 822, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(Expr).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(Expr).MakeArrayType().GetElementType())
Typ = GetType(Expr).MakeArrayType().GetElementType()
ASTEmitIL.Emit(OpCodes.Stloc, 45)
ASTEmitIL.MarkSequencePoint(doc12, 824, 1, 824, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(Expr)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
Dim fa307 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru307 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont307 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru307)
ASTEmitIL.Emit(OpCodes.Br, fa307)
ASTEmitIL.MarkLabel(tru307)
ASTEmitIL.MarkSequencePoint(doc12, 825, 1, 825, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(Expr)
ASTEmitIL.Emit(OpCodes.Stloc, 46)
ASTEmitIL.MarkSequencePoint(doc12, 826, 1, 826, 100)
ASTEmitIL.Emit(OpCodes.Br, cont307)
ASTEmitIL.MarkLabel(fa307)
ASTEmitIL.MarkSequencePoint(doc12, 827, 1, 827, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(Expr)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
Dim fa308 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru308 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont308 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Bge, tru308)
ASTEmitIL.Emit(OpCodes.Br, fa308)
ASTEmitIL.MarkLabel(tru308)
ASTEmitIL.MarkSequencePoint(doc12, 828, 1, 828, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ146(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(Expr)
ReDim Preserve typ146(UBound(typ146) + 1)
typ146(UBound(typ146)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ConvToRPN)
Typ = ConvToRPN.ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 46)
ASTEmitIL.MarkSequencePoint(doc12, 829, 1, 829, 100)
ASTEmitIL.Emit(OpCodes.Br, cont308)
ASTEmitIL.MarkLabel(fa308)
ASTEmitIL.Emit(OpCodes.Br, cont308)
ASTEmitIL.MarkLabel(cont308)
ASTEmitIL.MarkSequencePoint(doc12, 830, 1, 830, 100)
ASTEmitIL.Emit(OpCodes.Br, cont307)
ASTEmitIL.MarkLabel(cont307)
ASTEmitIL.MarkSequencePoint(doc12, 832, 1, 832, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ147(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 46)
Typ = GetType(Expr)
ReDim Preserve typ147(UBound(typ147) + 1)
typ147(UBound(typ147)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ConvToAST)
Typ = ConvToAST.ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 47)
ASTEmitIL.MarkSequencePoint(doc12, 833, 1, 833, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ148(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 47)
Typ = GetType(Token)
ReDim Preserve typ148(UBound(typ148) + 1)
typ148(UBound(typ148)) = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ReDim Preserve typ148(UBound(typ148) + 1)
typ148(UBound(typ148)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 835, 1, 835, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 43)
ASTEmitIL.MarkSequencePoint(doc12, 836, 1, 836, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(System.Type).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("TypArr"))
ASTEmitIL.MarkSequencePoint(doc12, 837, 1, 837, 100)
Dim typ149(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ReDim Preserve typ149(UBound(typ149) + 1)
typ149(UBound(typ149)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("AddTyp", typ149))
Typ = GetType(AsmFactory).GetMethod("AddTyp", typ149).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 838, 1, 838, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 42)
ASTEmitIL.MarkSequencePoint(doc12, 839, 1, 839, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 43)
Typ = GetType(System.Type).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("TypArr"))
ASTEmitIL.MarkSequencePoint(doc12, 841, 1, 841, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldloc, 44)
Typ = GetType(System.Int32)
Dim fa309 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru309 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont309 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru309)
ASTEmitIL.Emit(OpCodes.Br, fa309)
ASTEmitIL.MarkLabel(tru309)
ASTEmitIL.MarkSequencePoint(doc12, 842, 1, 842, 100)
ASTEmitIL.Emit(OpCodes.Br, label17)
ASTEmitIL.MarkSequencePoint(doc12, 843, 1, 843, 100)
ASTEmitIL.Emit(OpCodes.Br, cont309)
ASTEmitIL.MarkLabel(fa309)
ASTEmitIL.MarkSequencePoint(doc12, 844, 1, 844, 100)
ASTEmitIL.Emit(OpCodes.Br, label16)
ASTEmitIL.MarkSequencePoint(doc12, 845, 1, 845, 100)
ASTEmitIL.Emit(OpCodes.Br, cont309)
ASTEmitIL.MarkLabel(cont309)
ASTEmitIL.MarkSequencePoint(doc12, 847, 1, 847, 100)
ASTEmitIL.MarkLabel(label17)
ASTEmitIL.MarkSequencePoint(doc12, 849, 1, 849, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa310 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru310 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont310 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru310)
ASTEmitIL.Emit(OpCodes.Br, fa310)
ASTEmitIL.MarkLabel(tru310)
ASTEmitIL.MarkSequencePoint(doc12, 850, 1, 850, 100)
Dim typ150(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ150(UBound(typ150) + 1)
typ150(UBound(typ150)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddTypArr", typ150))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddTypArr", typ150).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 851, 1, 851, 100)
ASTEmitIL.Emit(OpCodes.Br, cont310)
ASTEmitIL.MarkLabel(fa310)
ASTEmitIL.MarkSequencePoint(doc12, 852, 1, 852, 100)
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("PopTypArr", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("PopTypArr", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 853, 1, 853, 100)
ASTEmitIL.Emit(OpCodes.Br, cont310)
ASTEmitIL.MarkLabel(cont310)
ASTEmitIL.MarkSequencePoint(doc12, 855, 1, 855, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type03"))
Typ = GetType(AsmFactory).GetField("Type03").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc12, 856, 1, 856, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc12, 858, 1, 858, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa311 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru311 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont311 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru311)
ASTEmitIL.Emit(OpCodes.Br, fa311)
ASTEmitIL.MarkLabel(tru311)
ASTEmitIL.MarkSequencePoint(doc12, 860, 1, 860, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa312 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru312 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont312 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru312)
ASTEmitIL.Emit(OpCodes.Br, fa312)
ASTEmitIL.MarkLabel(tru312)
ASTEmitIL.MarkSequencePoint(doc12, 862, 1, 862, 100)
Dim typ151(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 34)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
ReDim Preserve typ151(UBound(typ151) + 1)
typ151(UBound(typ151)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ151))
Typ = Typ03.GetMethod("Equals", typ151).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc12, 864, 1, 864, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa313 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru313 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont313 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru313)
ASTEmitIL.Emit(OpCodes.Br, fa313)
ASTEmitIL.MarkLabel(tru313)
ASTEmitIL.MarkSequencePoint(doc12, 865, 1, 865, 100)
Dim typ152(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 34)
Typ = GetType(System.Type)
ReDim Preserve typ152(UBound(typ152) + 1)
typ152(UBound(typ152)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ152(UBound(typ152) + 1)
typ152(UBound(typ152)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ152(UBound(typ152) + 1)
typ152(UBound(typ152)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadMethod", typ152))
Typ = GetType(Loader).GetMethod("LoadMethod", typ152).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 36)
ASTEmitIL.MarkSequencePoint(doc12, 866, 1, 866, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("MemberTyp"))
Typ = GetType(Loader).GetField("MemberTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc12, 867, 1, 867, 100)
ASTEmitIL.Emit(OpCodes.Br, cont313)
ASTEmitIL.MarkLabel(fa313)
ASTEmitIL.MarkSequencePoint(doc12, 868, 1, 868, 100)
Dim typ153(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ153(UBound(typ153) + 1)
typ153(UBound(typ153)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ153(UBound(typ153) + 1)
typ153(UBound(typ153)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocMet", typ153))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocMet", typ153).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 36)
ASTEmitIL.MarkSequencePoint(doc12, 869, 1, 869, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 36)
Typ = GetType(MethodInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc12, 870, 1, 870, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 36)
Typ = GetType(MethodInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsStatic", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsStatic", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 51)
ASTEmitIL.MarkSequencePoint(doc12, 871, 1, 871, 100)
ASTEmitIL.Emit(OpCodes.Br, cont313)
ASTEmitIL.MarkLabel(cont313)
ASTEmitIL.MarkSequencePoint(doc12, 873, 1, 873, 100)
ASTEmitIL.Emit(OpCodes.Br, cont312)
ASTEmitIL.MarkLabel(fa312)
ASTEmitIL.MarkSequencePoint(doc12, 875, 1, 875, 100)
Dim typ156(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ156(UBound(typ156) + 1)
typ156(UBound(typ156)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ156(UBound(typ156) + 1)
typ156(UBound(typ156)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocMet", typ156))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocMet", typ156).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 36)
ASTEmitIL.MarkSequencePoint(doc12, 876, 1, 876, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 36)
Typ = GetType(MethodInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc12, 877, 1, 877, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 36)
Typ = GetType(MethodInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsStatic", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsStatic", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 51)
ASTEmitIL.MarkSequencePoint(doc12, 879, 1, 879, 100)
ASTEmitIL.Emit(OpCodes.Br, cont312)
ASTEmitIL.MarkLabel(cont312)
ASTEmitIL.MarkSequencePoint(doc12, 881, 1, 881, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa314 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru314 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont314 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru314)
ASTEmitIL.Emit(OpCodes.Br, fa314)
ASTEmitIL.MarkLabel(tru314)
ASTEmitIL.MarkSequencePoint(doc12, 882, 1, 882, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(MethodCallTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodCallTok).GetField("PopFlg"))
Typ = GetType(MethodCallTok).GetField("PopFlg").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("PopFlg"))
ASTEmitIL.MarkSequencePoint(doc12, 883, 1, 883, 100)
Dim typ159(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 36)
Typ = GetType(MethodInfo)
ReDim Preserve typ159(UBound(typ159) + 1)
typ159(UBound(typ159)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 51)
Typ = GetType(System.Boolean)
ReDim Preserve typ159(UBound(typ159) + 1)
typ159(UBound(typ159)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitMetCall", typ159))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitMetCall", typ159).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 884, 1, 884, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("PopFlg"))
ASTEmitIL.MarkSequencePoint(doc12, 885, 1, 885, 100)
ASTEmitIL.Emit(OpCodes.Br, cont314)
ASTEmitIL.MarkLabel(fa314)
ASTEmitIL.Emit(OpCodes.Br, cont314)
ASTEmitIL.MarkLabel(cont314)
ASTEmitIL.MarkSequencePoint(doc12, 888, 1, 888, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(MethodNameTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodNameTok).GetField("MemberAccessFlg"))
Typ = GetType(MethodNameTok).GetField("MemberAccessFlg").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa315 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru315 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont315 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru315)
ASTEmitIL.Emit(OpCodes.Br, fa315)
ASTEmitIL.MarkLabel(tru315)
ASTEmitIL.MarkSequencePoint(doc12, 889, 1, 889, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("ChainFlg"))
ASTEmitIL.MarkSequencePoint(doc12, 890, 1, 890, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ160(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(MethodNameTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodNameTok).GetField("MemberToAccess"))
Typ = GetType(MethodNameTok).GetField("MemberToAccess").FieldType
ReDim Preserve typ160(UBound(typ160) + 1)
typ160(UBound(typ160)) = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ReDim Preserve typ160(UBound(typ160) + 1)
typ160(UBound(typ160)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 891, 1, 891, 100)
ASTEmitIL.Emit(OpCodes.Br, cont315)
ASTEmitIL.MarkLabel(fa315)
ASTEmitIL.Emit(OpCodes.Br, cont315)
ASTEmitIL.MarkLabel(cont315)
ASTEmitIL.MarkSequencePoint(doc12, 893, 1, 893, 100)
ASTEmitIL.Emit(OpCodes.Br, cont311)
ASTEmitIL.MarkLabel(fa311)
ASTEmitIL.MarkSequencePoint(doc12, 895, 1, 895, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnInhTyp"))
Typ = GetType(AsmFactory).GetField("CurnInhTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 34)
ASTEmitIL.MarkSequencePoint(doc12, 896, 1, 896, 100)
Dim typ161(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 34)
Typ = GetType(System.Type)
ReDim Preserve typ161(UBound(typ161) + 1)
typ161(UBound(typ161)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ161(UBound(typ161) + 1)
typ161(UBound(typ161)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadCtor", typ161))
Typ = GetType(Loader).GetMethod("LoadCtor", typ161).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 48)
ASTEmitIL.MarkSequencePoint(doc12, 898, 1, 898, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa316 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru316 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont316 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru316)
ASTEmitIL.Emit(OpCodes.Br, fa316)
ASTEmitIL.MarkLabel(tru316)
ASTEmitIL.MarkSequencePoint(doc12, 899, 1, 899, 100)
Dim typ162(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 48)
Typ = GetType(ConstructorInfo)
ReDim Preserve typ162(UBound(typ162) + 1)
typ162(UBound(typ162)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCallCtor", typ162))
Typ = GetType(ILEmitter).GetMethod("EmitCallCtor", typ162).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 900, 1, 900, 100)
ASTEmitIL.Emit(OpCodes.Br, cont316)
ASTEmitIL.MarkLabel(fa316)
ASTEmitIL.Emit(OpCodes.Br, cont316)
ASTEmitIL.MarkLabel(cont316)
ASTEmitIL.MarkSequencePoint(doc12, 902, 1, 902, 100)
ASTEmitIL.Emit(OpCodes.Br, cont311)
ASTEmitIL.MarkLabel(cont311)
ASTEmitIL.MarkSequencePoint(doc12, 904, 1, 904, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(MethodNameTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodNameTok).GetField("Conv"))
Typ = GetType(MethodNameTok).GetField("Conv").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa317 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru317 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont317 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru317)
ASTEmitIL.Emit(OpCodes.Br, fa317)
ASTEmitIL.MarkLabel(tru317)
ASTEmitIL.MarkSequencePoint(doc12, 906, 1, 906, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa318 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru318 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont318 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru318)
ASTEmitIL.Emit(OpCodes.Br, fa318)
ASTEmitIL.MarkLabel(tru318)
ASTEmitIL.MarkSequencePoint(doc12, 907, 1, 907, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 15)
ASTEmitIL.MarkSequencePoint(doc12, 908, 1, 908, 100)
ASTEmitIL.Emit(OpCodes.Br, cont318)
ASTEmitIL.MarkLabel(fa318)
ASTEmitIL.Emit(OpCodes.Br, cont318)
ASTEmitIL.MarkLabel(cont318)
ASTEmitIL.MarkSequencePoint(doc12, 910, 1, 910, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(MethodNameTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodNameTok).GetField("TTok"))
Typ = GetType(MethodNameTok).GetField("TTok").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 10)
ASTEmitIL.MarkSequencePoint(doc12, 911, 1, 911, 100)
Dim typ163(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
ReDim Preserve typ163(UBound(typ163) + 1)
typ163(UBound(typ163)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ163))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ163).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc12, 913, 1, 913, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa319 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru319 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont319 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru319)
ASTEmitIL.Emit(OpCodes.Br, fa319)
ASTEmitIL.MarkLabel(tru319)
ASTEmitIL.MarkSequencePoint(doc12, 914, 1, 914, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 16)
ASTEmitIL.MarkSequencePoint(doc12, 915, 1, 915, 100)
Dim typ164(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(System.Type)
ReDim Preserve typ164(UBound(typ164) + 1)
typ164(UBound(typ164)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(System.Type)
ReDim Preserve typ164(UBound(typ164) + 1)
typ164(UBound(typ164)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitConv", typ164))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitConv", typ164).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 916, 1, 916, 100)
ASTEmitIL.Emit(OpCodes.Br, cont319)
ASTEmitIL.MarkLabel(fa319)
ASTEmitIL.Emit(OpCodes.Br, cont319)
ASTEmitIL.MarkLabel(cont319)
ASTEmitIL.MarkSequencePoint(doc12, 918, 1, 918, 100)
ASTEmitIL.Emit(OpCodes.Br, cont317)
ASTEmitIL.MarkLabel(fa317)
ASTEmitIL.Emit(OpCodes.Br, cont317)
ASTEmitIL.MarkLabel(cont317)
ASTEmitIL.MarkSequencePoint(doc12, 920, 1, 920, 100)
ASTEmitIL.Emit(OpCodes.Br, label9)
ASTEmitIL.MarkSequencePoint(doc12, 922, 1, 922, 100)
ASTEmitIL.Emit(OpCodes.Br, cont279)
ASTEmitIL.MarkLabel(fa279)
ASTEmitIL.Emit(OpCodes.Br, cont279)
ASTEmitIL.MarkLabel(cont279)
ASTEmitIL.MarkSequencePoint(doc12, 924, 1, 924, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(NewCallTok))
Dim typ165 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ165))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ165).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc12, 925, 1, 925, 100)
Dim typ166(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ166(UBound(typ166) + 1)
typ166(UBound(typ166)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ166))
Typ = Typ03.GetMethod("IsInstanceOfType", typ166).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc12, 927, 1, 927, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa320 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru320 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont320 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru320)
ASTEmitIL.Emit(OpCodes.Br, fa320)
ASTEmitIL.MarkLabel(tru320)
ASTEmitIL.MarkSequencePoint(doc12, 929, 1, 929, 100)
Dim locbldr303 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(NewCallTok))
locbldr303.SetLocalSymInfo("nctok")
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Stloc, 55)
ASTEmitIL.MarkSequencePoint(doc12, 930, 1, 930, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 55)
Typ = GetType(NewCallTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(NewCallTok).GetField("Name"))
Typ = GetType(NewCallTok).GetField("Name").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 10)
ASTEmitIL.MarkSequencePoint(doc12, 931, 1, 931, 100)
Dim typ167(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
ReDim Preserve typ167(UBound(typ167) + 1)
typ167(UBound(typ167)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ167))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ167).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 37)
ASTEmitIL.MarkSequencePoint(doc12, 932, 1, 932, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 55)
Typ = GetType(NewCallTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(NewCallTok).GetField("Params"))
Typ = GetType(NewCallTok).GetField("Params").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 41)
ASTEmitIL.MarkSequencePoint(doc12, 933, 1, 933, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(Expr).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Sub)
ASTEmitIL.Emit(OpCodes.Stloc, 44)
ASTEmitIL.MarkSequencePoint(doc12, 935, 1, 935, 100)
Dim label18 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc12, 936, 1, 936, 100)
Dim label19 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc12, 938, 1, 938, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(Expr).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa321 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru321 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont321 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru321)
ASTEmitIL.Emit(OpCodes.Br, fa321)
ASTEmitIL.MarkLabel(tru321)
ASTEmitIL.MarkSequencePoint(doc12, 939, 1, 939, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(System.Type).GetField("EmptyTypes"))
Typ = GetType(System.Type).GetField("EmptyTypes").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 42)
ASTEmitIL.MarkSequencePoint(doc12, 940, 1, 940, 100)
ASTEmitIL.Emit(OpCodes.Br, label19)
ASTEmitIL.MarkSequencePoint(doc12, 941, 1, 941, 100)
ASTEmitIL.Emit(OpCodes.Br, cont321)
ASTEmitIL.MarkLabel(fa321)
ASTEmitIL.MarkSequencePoint(doc12, 942, 1, 942, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
ASTEmitIL.Emit(OpCodes.Newarr, GetType(System.Type))
ASTEmitIL.Emit(OpCodes.Stloc, 42)
ASTEmitIL.MarkSequencePoint(doc12, 943, 1, 943, 100)
ASTEmitIL.Emit(OpCodes.Br, cont321)
ASTEmitIL.MarkLabel(cont321)
ASTEmitIL.MarkSequencePoint(doc12, 945, 1, 945, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc12, 947, 1, 947, 100)
ASTEmitIL.MarkLabel(label18)
ASTEmitIL.MarkSequencePoint(doc12, 949, 1, 949, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Add)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc12, 950, 1, 950, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(Expr).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(Expr).MakeArrayType().GetElementType())
Typ = GetType(Expr).MakeArrayType().GetElementType()
ASTEmitIL.Emit(OpCodes.Stloc, 45)
ASTEmitIL.MarkSequencePoint(doc12, 952, 1, 952, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(Expr)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
Dim fa322 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru322 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont322 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru322)
ASTEmitIL.Emit(OpCodes.Br, fa322)
ASTEmitIL.MarkLabel(tru322)
ASTEmitIL.MarkSequencePoint(doc12, 953, 1, 953, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(Expr)
ASTEmitIL.Emit(OpCodes.Stloc, 46)
ASTEmitIL.MarkSequencePoint(doc12, 954, 1, 954, 100)
ASTEmitIL.Emit(OpCodes.Br, cont322)
ASTEmitIL.MarkLabel(fa322)
ASTEmitIL.MarkSequencePoint(doc12, 955, 1, 955, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(Expr)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
Dim fa323 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru323 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont323 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Bge, tru323)
ASTEmitIL.Emit(OpCodes.Br, fa323)
ASTEmitIL.MarkLabel(tru323)
ASTEmitIL.MarkSequencePoint(doc12, 956, 1, 956, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ168(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(Expr)
ReDim Preserve typ168(UBound(typ168) + 1)
typ168(UBound(typ168)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ConvToRPN)
Typ = ConvToRPN.ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 46)
ASTEmitIL.MarkSequencePoint(doc12, 957, 1, 957, 100)
ASTEmitIL.Emit(OpCodes.Br, cont323)
ASTEmitIL.MarkLabel(fa323)
ASTEmitIL.Emit(OpCodes.Br, cont323)
ASTEmitIL.MarkLabel(cont323)
ASTEmitIL.MarkSequencePoint(doc12, 958, 1, 958, 100)
ASTEmitIL.Emit(OpCodes.Br, cont322)
ASTEmitIL.MarkLabel(cont322)
ASTEmitIL.MarkSequencePoint(doc12, 960, 1, 960, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ169(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 46)
Typ = GetType(Expr)
ReDim Preserve typ169(UBound(typ169) + 1)
typ169(UBound(typ169)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ConvToAST)
Typ = ConvToAST.ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 47)
ASTEmitIL.MarkSequencePoint(doc12, 961, 1, 961, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ170(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 47)
Typ = GetType(Token)
ReDim Preserve typ170(UBound(typ170) + 1)
typ170(UBound(typ170)) = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ReDim Preserve typ170(UBound(typ170) + 1)
typ170(UBound(typ170)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 963, 1, 963, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 43)
ASTEmitIL.MarkSequencePoint(doc12, 964, 1, 964, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(System.Type).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("TypArr"))
ASTEmitIL.MarkSequencePoint(doc12, 965, 1, 965, 100)
Dim typ171(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ReDim Preserve typ171(UBound(typ171) + 1)
typ171(UBound(typ171)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("AddTyp", typ171))
Typ = GetType(AsmFactory).GetMethod("AddTyp", typ171).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 966, 1, 966, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 42)
ASTEmitIL.MarkSequencePoint(doc12, 967, 1, 967, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 43)
Typ = GetType(System.Type).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("TypArr"))
ASTEmitIL.MarkSequencePoint(doc12, 969, 1, 969, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldloc, 44)
Typ = GetType(System.Int32)
Dim fa324 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru324 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont324 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru324)
ASTEmitIL.Emit(OpCodes.Br, fa324)
ASTEmitIL.MarkLabel(tru324)
ASTEmitIL.MarkSequencePoint(doc12, 970, 1, 970, 100)
ASTEmitIL.Emit(OpCodes.Br, label19)
ASTEmitIL.MarkSequencePoint(doc12, 971, 1, 971, 100)
ASTEmitIL.Emit(OpCodes.Br, cont324)
ASTEmitIL.MarkLabel(fa324)
ASTEmitIL.MarkSequencePoint(doc12, 972, 1, 972, 100)
ASTEmitIL.Emit(OpCodes.Br, label18)
ASTEmitIL.MarkSequencePoint(doc12, 973, 1, 973, 100)
ASTEmitIL.Emit(OpCodes.Br, cont324)
ASTEmitIL.MarkLabel(cont324)
ASTEmitIL.MarkSequencePoint(doc12, 975, 1, 975, 100)
ASTEmitIL.MarkLabel(label19)
ASTEmitIL.MarkSequencePoint(doc12, 977, 1, 977, 100)
Dim typ172(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 37)
Typ = GetType(System.Type)
ReDim Preserve typ172(UBound(typ172) + 1)
typ172(UBound(typ172)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ172(UBound(typ172) + 1)
typ172(UBound(typ172)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocCtor", typ172))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocCtor", typ172).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 48)
ASTEmitIL.MarkSequencePoint(doc12, 979, 1, 979, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa325 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru325 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont325 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru325)
ASTEmitIL.Emit(OpCodes.Br, fa325)
ASTEmitIL.MarkLabel(tru325)
ASTEmitIL.MarkSequencePoint(doc12, 980, 1, 980, 100)
Dim typ173(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 48)
Typ = GetType(ConstructorInfo)
ReDim Preserve typ173(UBound(typ173) + 1)
typ173(UBound(typ173)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitNewobj", typ173))
Typ = GetType(ILEmitter).GetMethod("EmitNewobj", typ173).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 981, 1, 981, 100)
ASTEmitIL.Emit(OpCodes.Br, cont325)
ASTEmitIL.MarkLabel(fa325)
ASTEmitIL.Emit(OpCodes.Br, cont325)
ASTEmitIL.MarkLabel(cont325)
ASTEmitIL.MarkSequencePoint(doc12, 983, 1, 983, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 37)
Typ = GetType(System.Type)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc12, 984, 1, 984, 100)
ASTEmitIL.Emit(OpCodes.Br, label9)
ASTEmitIL.MarkSequencePoint(doc12, 985, 1, 985, 100)
ASTEmitIL.Emit(OpCodes.Br, cont320)
ASTEmitIL.MarkLabel(fa320)
ASTEmitIL.Emit(OpCodes.Br, cont320)
ASTEmitIL.MarkLabel(cont320)
ASTEmitIL.MarkSequencePoint(doc12, 987, 1, 987, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(GettypeCallTok))
Dim typ174 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ174))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ174).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc12, 988, 1, 988, 100)
Dim typ175(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ175(UBound(typ175) + 1)
typ175(UBound(typ175)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ175))
Typ = Typ03.GetMethod("IsInstanceOfType", typ175).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc12, 990, 1, 990, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa326 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru326 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont326 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru326)
ASTEmitIL.Emit(OpCodes.Br, fa326)
ASTEmitIL.MarkLabel(tru326)
ASTEmitIL.MarkSequencePoint(doc12, 992, 1, 992, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa327 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru327 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont327 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru327)
ASTEmitIL.Emit(OpCodes.Br, fa327)
ASTEmitIL.MarkLabel(tru327)
ASTEmitIL.MarkSequencePoint(doc12, 994, 1, 994, 100)
Dim locbldr304 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(GettypeCallTok))
locbldr304.SetLocalSymInfo("gtctok")
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Stloc, 56)
ASTEmitIL.MarkSequencePoint(doc12, 995, 1, 995, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 56)
Typ = GetType(GettypeCallTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(GettypeCallTok).GetField("Name"))
Typ = GetType(GettypeCallTok).GetField("Name").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 10)
ASTEmitIL.MarkSequencePoint(doc12, 996, 1, 996, 100)
Dim typ176(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
ReDim Preserve typ176(UBound(typ176) + 1)
typ176(UBound(typ176)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ176))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ176).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc12, 997, 1, 997, 100)
Dim typ177(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
ReDim Preserve typ177(UBound(typ177) + 1)
typ177(UBound(typ177)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdtoken", typ177))
Typ = GetType(ILEmitter).GetMethod("EmitLdtoken", typ177).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 999, 1, 999, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
ASTEmitIL.Emit(OpCodes.Newarr, GetType(System.Type))
ASTEmitIL.Emit(OpCodes.Stloc, 42)
ASTEmitIL.MarkSequencePoint(doc12, 1001, 1, 1001, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 43)
ASTEmitIL.MarkSequencePoint(doc12, 1002, 1, 1002, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(System.Type).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("TypArr"))
ASTEmitIL.MarkSequencePoint(doc12, 1003, 1, 1003, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(System.RuntimeTypeHandle))
Dim typ178 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ178))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ178).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc12, 1004, 1, 1004, 100)
Dim typ179(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
ReDim Preserve typ179(UBound(typ179) + 1)
typ179(UBound(typ179)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("AddTyp", typ179))
Typ = GetType(AsmFactory).GetMethod("AddTyp", typ179).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 1005, 1, 1005, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 42)
ASTEmitIL.MarkSequencePoint(doc12, 1006, 1, 1006, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 43)
Typ = GetType(System.Type).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("TypArr"))
ASTEmitIL.MarkSequencePoint(doc12, 1008, 1, 1008, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(System.Type))
Dim typ180 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ180))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ180).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc12, 1009, 1, 1009, 100)
Dim typ181(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldstr, "GetTypeFromHandle")
Typ = GetType(System.String)
ReDim Preserve typ181(UBound(typ181) + 1)
typ181(UBound(typ181)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ181(UBound(typ181) + 1)
typ181(UBound(typ181)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetMethod", typ181))
Typ = Typ03.GetMethod("GetMethod", typ181).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 36)
ASTEmitIL.MarkSequencePoint(doc12, 1010, 1, 1010, 100)
Dim typ182(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 36)
Typ = GetType(MethodInfo)
ReDim Preserve typ182(UBound(typ182) + 1)
typ182(UBound(typ182)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ182))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ182).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc12, 1012, 1, 1012, 100)
ASTEmitIL.Emit(OpCodes.Br, cont327)
ASTEmitIL.MarkLabel(fa327)
ASTEmitIL.Emit(OpCodes.Br, cont327)
ASTEmitIL.MarkLabel(cont327)
ASTEmitIL.MarkSequencePoint(doc12, 1014, 1, 1014, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(System.Type))
Dim typ183 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ183))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ183).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc12, 1016, 1, 1016, 100)
ASTEmitIL.Emit(OpCodes.Br, label9)
ASTEmitIL.MarkSequencePoint(doc12, 1017, 1, 1017, 100)
ASTEmitIL.Emit(OpCodes.Br, cont326)
ASTEmitIL.MarkLabel(fa326)
ASTEmitIL.Emit(OpCodes.Br, cont326)
ASTEmitIL.MarkLabel(cont326)
ASTEmitIL.MarkSequencePoint(doc12, 1019, 1, 1019, 100)
ASTEmitIL.MarkLabel(label9)
ASTEmitIL.MarkSequencePoint(doc12, 1021, 1, 1021, 100)
ASTEmitIL.Emit(OpCodes.Br, cont236)
ASTEmitIL.MarkLabel(cont236)
ASTEmitIL.MarkSequencePoint(doc12, 1023, 1, 1023, 100)
ASTEmitIL.Emit(OpCodes.Ret)
Dim typ184(-1) As Type
ReDim Preserve typ184(UBound(typ184) + 1)
typ184(UBound(typ184)) = GetType(Expr)
Dim Evaluate As MethodBuilder = Evaluator.DefineMethod("Evaluate", MethodAttributes.Public, GetType(System.Void), typ184)
Dim EvaluateIL As ILGenerator = Evaluate.GetILGenerator()
Dim Evaluateparam01 As ParameterBuilder = Evaluate.DefineParameter(1, ParameterAttributes.None, "exp")
EvaluateIL.MarkSequencePoint(doc12, 1027, 1, 1027, 100)
Dim locbldr305 As LocalBuilder = EvaluateIL.DeclareLocal(GetType(System.Int32))
locbldr305.SetLocalSymInfo("len")
EvaluateIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
EvaluateIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
EvaluateIL.Emit(OpCodes.Ldlen)
EvaluateIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
EvaluateIL.Emit(OpCodes.Stloc, 0)
EvaluateIL.MarkSequencePoint(doc12, 1029, 1, 1029, 100)
Dim locbldr306 As LocalBuilder = EvaluateIL.DeclareLocal(GetType(Expr))
locbldr306.SetLocalSymInfo("rpnexp")
EvaluateIL.MarkSequencePoint(doc12, 1031, 1, 1031, 100)
EvaluateIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
EvaluateIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
Dim fa328 As System.Reflection.Emit.Label = EvaluateIL.DefineLabel()
Dim tru328 As System.Reflection.Emit.Label = EvaluateIL.DefineLabel()
Dim cont328 As System.Reflection.Emit.Label = EvaluateIL.DefineLabel()
EvaluateIL.Emit(OpCodes.Beq, tru328)
EvaluateIL.Emit(OpCodes.Br, fa328)
EvaluateIL.MarkLabel(tru328)
EvaluateIL.MarkSequencePoint(doc12, 1032, 1, 1032, 100)
EvaluateIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
EvaluateIL.Emit(OpCodes.Stloc, 1)
EvaluateIL.MarkSequencePoint(doc12, 1033, 1, 1033, 100)
EvaluateIL.Emit(OpCodes.Br, cont328)
EvaluateIL.MarkLabel(fa328)
EvaluateIL.MarkSequencePoint(doc12, 1034, 1, 1034, 100)
EvaluateIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
EvaluateIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
Dim fa329 As System.Reflection.Emit.Label = EvaluateIL.DefineLabel()
Dim tru329 As System.Reflection.Emit.Label = EvaluateIL.DefineLabel()
Dim cont329 As System.Reflection.Emit.Label = EvaluateIL.DefineLabel()
EvaluateIL.Emit(OpCodes.Bge, tru329)
EvaluateIL.Emit(OpCodes.Br, fa329)
EvaluateIL.MarkLabel(tru329)
EvaluateIL.MarkSequencePoint(doc12, 1035, 1, 1035, 100)
EvaluateIL.Emit(OpCodes.Ldarg_0)
Dim typ185(-1) As Type
EvaluateIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ReDim Preserve typ185(UBound(typ185) + 1)
typ185(UBound(typ185)) = Typ
EvaluateIL.Emit(OpCodes.Callvirt, ConvToRPN)
Typ = ConvToRPN.ReturnType
EvaluateIL.Emit(OpCodes.Stloc, 1)
EvaluateIL.MarkSequencePoint(doc12, 1036, 1, 1036, 100)
EvaluateIL.Emit(OpCodes.Br, cont329)
EvaluateIL.MarkLabel(fa329)
EvaluateIL.Emit(OpCodes.Br, cont329)
EvaluateIL.MarkLabel(cont329)
EvaluateIL.MarkSequencePoint(doc12, 1037, 1, 1037, 100)
EvaluateIL.Emit(OpCodes.Br, cont328)
EvaluateIL.MarkLabel(cont328)
EvaluateIL.MarkSequencePoint(doc12, 1039, 1, 1039, 100)
Dim locbldr307 As LocalBuilder = EvaluateIL.DeclareLocal(GetType(Token))
locbldr307.SetLocalSymInfo("asttok")
EvaluateIL.Emit(OpCodes.Ldarg_0)
Dim typ186(-1) As Type
EvaluateIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Expr)
ReDim Preserve typ186(UBound(typ186) + 1)
typ186(UBound(typ186)) = Typ
EvaluateIL.Emit(OpCodes.Callvirt, ConvToAST)
Typ = ConvToAST.ReturnType
EvaluateIL.Emit(OpCodes.Stloc, 2)
EvaluateIL.MarkSequencePoint(doc12, 1040, 1, 1040, 100)
EvaluateIL.Emit(OpCodes.Ldarg_0)
Dim typ187(-1) As Type
EvaluateIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Token)
ReDim Preserve typ187(UBound(typ187) + 1)
typ187(UBound(typ187)) = Typ
EvaluateIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReDim Preserve typ187(UBound(typ187) + 1)
typ187(UBound(typ187)) = Typ
EvaluateIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EvaluateIL.Emit(OpCodes.Pop)
End If
EvaluateIL.MarkSequencePoint(doc12, 1041, 1, 1041, 100)
EvaluateIL.Emit(OpCodes.Ldarg_0)
Dim typ188(-1) As Type
EvaluateIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Token)
ReDim Preserve typ188(UBound(typ188) + 1)
typ188(UBound(typ188)) = Typ
EvaluateIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ188(UBound(typ188) + 1)
typ188(UBound(typ188)) = Typ
EvaluateIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EvaluateIL.Emit(OpCodes.Pop)
End If
EvaluateIL.MarkSequencePoint(doc12, 1043, 1, 1043, 100)
EvaluateIL.Emit(OpCodes.Ret)
Dim typ189(-1) As Type
ReDim Preserve typ189(UBound(typ189) + 1)
typ189(UBound(typ189)) = GetType(Token)
ReDim Preserve typ189(UBound(typ189) + 1)
typ189(UBound(typ189)) = GetType(Expr)
Dim StoreEmit As MethodBuilder = Evaluator.DefineMethod("StoreEmit", MethodAttributes.Public, GetType(System.Void), typ189)
Dim StoreEmitIL As ILGenerator = StoreEmit.GetILGenerator()
Dim StoreEmitparam01 As ParameterBuilder = StoreEmit.DefineParameter(1, ParameterAttributes.None, "tok")
Dim StoreEmitparam02 As ParameterBuilder = StoreEmit.DefineParameter(2, ParameterAttributes.None, "exp")
StoreEmitIL.MarkSequencePoint(doc12, 1047, 1, 1047, 100)
Dim locbldr308 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(System.Int32))
locbldr308.SetLocalSymInfo("i")
StoreEmitIL.MarkSequencePoint(doc12, 1048, 1, 1048, 100)
Dim locbldr309 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(System.Int32))
locbldr309.SetLocalSymInfo("len")
StoreEmitIL.MarkSequencePoint(doc12, 1049, 1, 1049, 100)
Dim locbldr310 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(Ident))
locbldr310.SetLocalSymInfo("idt")
StoreEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
StoreEmitIL.Emit(OpCodes.Stloc, 2)
StoreEmitIL.MarkSequencePoint(doc12, 1050, 1, 1050, 100)
Dim locbldr311 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(System.String))
locbldr311.SetLocalSymInfo("idtnam")
StoreEmitIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Ident)
StoreEmitIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
StoreEmitIL.Emit(OpCodes.Stloc, 3)
StoreEmitIL.MarkSequencePoint(doc12, 1051, 1, 1051, 100)
Dim locbldr312 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(System.String).MakeArrayType())
locbldr312.SetLocalSymInfo("idtnamarr")
StoreEmitIL.MarkSequencePoint(doc12, 1052, 1, 1052, 100)
Dim locbldr313 As LocalBuilder = StoreEmitIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"))
locbldr313.SetLocalSymInfo("vr")
StoreEmitIL.MarkSequencePoint(doc12, 1053, 1, 1053, 100)
Dim locbldr314 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr314.SetLocalSymInfo("idtb1")
StoreEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Stloc, 6)
StoreEmitIL.MarkSequencePoint(doc12, 1054, 1, 1054, 100)
Dim locbldr315 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr315.SetLocalSymInfo("idtb2")
StoreEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Stloc, 7)
StoreEmitIL.MarkSequencePoint(doc12, 1055, 1, 1055, 100)
Dim locbldr316 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr316.SetLocalSymInfo("idtisstatic")
StoreEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Stloc, 8)
StoreEmitIL.MarkSequencePoint(doc12, 1056, 1, 1056, 100)
Dim locbldr317 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(System.Int32))
locbldr317.SetLocalSymInfo("idtcomp")
StoreEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Stloc, 9)
StoreEmitIL.MarkSequencePoint(doc12, 1057, 1, 1057, 100)
Dim locbldr318 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(System.Type))
locbldr318.SetLocalSymInfo("idttyp")
StoreEmitIL.MarkSequencePoint(doc12, 1058, 1, 1058, 100)
Dim locbldr319 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(FieldInfo))
locbldr319.SetLocalSymInfo("fldinf")
StoreEmitIL.MarkSequencePoint(doc12, 1059, 1, 1059, 100)
Dim locbldr320 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(Expr))
locbldr320.SetLocalSymInfo("arrlocexpr")
StoreEmitIL.MarkSequencePoint(doc12, 1060, 1, 1060, 100)
Dim locbldr321 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(Ident))
locbldr321.SetLocalSymInfo("idtarrloc")
StoreEmitIL.MarkSequencePoint(doc12, 1061, 1, 1061, 100)
Dim locbldr322 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(Token))
locbldr322.SetLocalSymInfo("tok")
StoreEmitIL.MarkSequencePoint(doc12, 1062, 1, 1062, 100)
Dim locbldr323 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(System.Type))
locbldr323.SetLocalSymInfo("typ")
StoreEmitIL.MarkSequencePoint(doc12, 1063, 1, 1063, 100)
Dim locbldr324 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr324.SetLocalSymInfo("b")
StoreEmitIL.MarkSequencePoint(doc12, 1065, 1, 1065, 100)
StoreEmitIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Stloc, 0)
StoreEmitIL.MarkSequencePoint(doc12, 1066, 1, 1066, 100)
Dim typ190(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.String)
ReDim Preserve typ190(UBound(typ190) + 1)
typ190(UBound(typ190)) = Typ
StoreEmitIL.Emit(OpCodes.Ldstr, ":")
Typ = GetType(System.String)
ReDim Preserve typ190(UBound(typ190) + 1)
typ190(UBound(typ190)) = Typ
StoreEmitIL.Emit(OpCodes.Call, GetType(ParseUtils).GetMethod("StringParser", typ190))
Typ = GetType(ParseUtils).GetMethod("StringParser", typ190).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 4)
StoreEmitIL.MarkSequencePoint(doc12, 1067, 1, 1067, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
StoreEmitIL.Emit(OpCodes.Ldlen)
StoreEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Sub)
StoreEmitIL.Emit(OpCodes.Stloc, 1)
StoreEmitIL.MarkSequencePoint(doc12, 1069, 1, 1069, 100)
Dim typ191(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
StoreEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
StoreEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ191(UBound(typ191) + 1)
typ191(UBound(typ191)) = Typ
StoreEmitIL.Emit(OpCodes.Ldstr, "me")
Typ = GetType(System.String)
ReDim Preserve typ191(UBound(typ191) + 1)
typ191(UBound(typ191)) = Typ
StoreEmitIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ191))
Typ = GetType(String).GetMethod("Compare", typ191).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 9)
StoreEmitIL.MarkSequencePoint(doc12, 1070, 1, 1070, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa330 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru330 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont330 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, tru330)
StoreEmitIL.Emit(OpCodes.Br, fa330)
StoreEmitIL.MarkLabel(tru330)
StoreEmitIL.MarkSequencePoint(doc12, 1071, 1, 1071, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Add)
StoreEmitIL.Emit(OpCodes.Stloc, 0)
StoreEmitIL.MarkSequencePoint(doc12, 1072, 1, 1072, 100)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Stloc, 6)
StoreEmitIL.MarkSequencePoint(doc12, 1073, 1, 1073, 100)
StoreEmitIL.Emit(OpCodes.Br, cont330)
StoreEmitIL.MarkLabel(fa330)
StoreEmitIL.Emit(OpCodes.Br, cont330)
StoreEmitIL.MarkLabel(cont330)
StoreEmitIL.MarkSequencePoint(doc12, 1075, 1, 1075, 100)
Dim label20 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.MarkSequencePoint(doc12, 1076, 1, 1076, 100)
Dim label21 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.MarkSequencePoint(doc12, 1077, 1, 1077, 100)
Dim label22 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.MarkSequencePoint(doc12, 1087, 1, 1087, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
StoreEmitIL.Emit(OpCodes.Ldlen)
StoreEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Stloc, 9)
StoreEmitIL.MarkSequencePoint(doc12, 1088, 1, 1088, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
Dim fa331 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru331 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont331 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Bge, tru331)
StoreEmitIL.Emit(OpCodes.Br, fa331)
StoreEmitIL.MarkLabel(tru331)
StoreEmitIL.MarkSequencePoint(doc12, 1091, 1, 1091, 100)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AddrFlg"))
StoreEmitIL.MarkSequencePoint(doc12, 1093, 1, 1093, 100)
StoreEmitIL.MarkLabel(label20)
StoreEmitIL.MarkSequencePoint(doc12, 1094, 1, 1094, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Add)
StoreEmitIL.Emit(OpCodes.Stloc, 0)
StoreEmitIL.MarkSequencePoint(doc12, 1096, 1, 1096, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa332 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru332 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont332 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, tru332)
StoreEmitIL.Emit(OpCodes.Br, fa332)
StoreEmitIL.MarkLabel(tru332)
StoreEmitIL.MarkSequencePoint(doc12, 1098, 1, 1098, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa333 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru333 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont333 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, tru333)
StoreEmitIL.Emit(OpCodes.Br, fa333)
StoreEmitIL.MarkLabel(tru333)
StoreEmitIL.MarkSequencePoint(doc12, 1099, 1, 1099, 100)
Dim typ192(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
StoreEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ192(UBound(typ192) + 1)
typ192(UBound(typ192)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindVar", typ192))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindVar", typ192).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 5)
StoreEmitIL.MarkSequencePoint(doc12, 1100, 1, 1100, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
StoreEmitIL.Emit(OpCodes.Ldnull)
Dim fa334 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru334 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont334 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, fa334)
StoreEmitIL.Emit(OpCodes.Br, tru334)
StoreEmitIL.MarkLabel(tru334)
StoreEmitIL.MarkSequencePoint(doc12, 1101, 1, 1101, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
StoreEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp").FieldType
StoreEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
StoreEmitIL.MarkSequencePoint(doc12, 1102, 1, 1102, 100)
Dim typ193(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
StoreEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("Index"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("Index").FieldType
ReDim Preserve typ193(UBound(typ193) + 1)
typ193(UBound(typ193)) = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
StoreEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("LocArg"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("LocArg").FieldType
ReDim Preserve typ193(UBound(typ193) + 1)
typ193(UBound(typ193)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLocLd", typ193))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLocLd", typ193).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
StoreEmitIL.Emit(OpCodes.Pop)
End If
StoreEmitIL.MarkSequencePoint(doc12, 1103, 1, 1103, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
StoreEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp").FieldType
StoreEmitIL.Emit(OpCodes.Stloc, 10)
StoreEmitIL.MarkSequencePoint(doc12, 1104, 1, 1104, 100)
StoreEmitIL.Emit(OpCodes.Br, label22)
StoreEmitIL.MarkSequencePoint(doc12, 1105, 1, 1105, 100)
StoreEmitIL.Emit(OpCodes.Br, cont334)
StoreEmitIL.MarkLabel(fa334)
StoreEmitIL.MarkSequencePoint(doc12, 1107, 1, 1107, 100)
Dim typ194(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
StoreEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ194(UBound(typ194) + 1)
typ194(UBound(typ194)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ194))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ194).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 11)
StoreEmitIL.MarkSequencePoint(doc12, 1109, 1, 1109, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
StoreEmitIL.Emit(OpCodes.Ldnull)
Dim fa335 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru335 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont335 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, fa335)
StoreEmitIL.Emit(OpCodes.Br, tru335)
StoreEmitIL.MarkLabel(tru335)
StoreEmitIL.MarkSequencePoint(doc12, 1110, 1, 1110, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
Typ03 = Typ
StoreEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsStatic", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsStatic", Type.EmptyTypes).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 8)
StoreEmitIL.MarkSequencePoint(doc12, 1111, 1, 1111, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa336 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru336 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont336 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, tru336)
StoreEmitIL.Emit(OpCodes.Br, fa336)
StoreEmitIL.MarkLabel(tru336)
StoreEmitIL.MarkSequencePoint(doc12, 1112, 1, 1112, 100)
Dim typ196(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReDim Preserve typ196(UBound(typ196) + 1)
typ196(UBound(typ196)) = Typ
StoreEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdarg", typ196))
Typ = GetType(ILEmitter).GetMethod("EmitLdarg", typ196).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
StoreEmitIL.Emit(OpCodes.Pop)
End If
StoreEmitIL.MarkSequencePoint(doc12, 1113, 1, 1113, 100)
StoreEmitIL.Emit(OpCodes.Br, cont336)
StoreEmitIL.MarkLabel(fa336)
StoreEmitIL.Emit(OpCodes.Br, cont336)
StoreEmitIL.MarkLabel(cont336)
StoreEmitIL.MarkSequencePoint(doc12, 1114, 1, 1114, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
Typ03 = Typ
StoreEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
StoreEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
StoreEmitIL.MarkSequencePoint(doc12, 1115, 1, 1115, 100)
Dim typ198(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
ReDim Preserve typ198(UBound(typ198) + 1)
typ198(UBound(typ198)) = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ReDim Preserve typ198(UBound(typ198) + 1)
typ198(UBound(typ198)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ198))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ198).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
StoreEmitIL.Emit(OpCodes.Pop)
End If
StoreEmitIL.MarkSequencePoint(doc12, 1116, 1, 1116, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
Typ03 = Typ
StoreEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 10)
StoreEmitIL.MarkSequencePoint(doc12, 1117, 1, 1117, 100)
StoreEmitIL.Emit(OpCodes.Br, label22)
StoreEmitIL.MarkSequencePoint(doc12, 1118, 1, 1118, 100)
StoreEmitIL.Emit(OpCodes.Br, cont335)
StoreEmitIL.MarkLabel(fa335)
StoreEmitIL.Emit(OpCodes.Br, cont335)
StoreEmitIL.MarkLabel(cont335)
StoreEmitIL.MarkSequencePoint(doc12, 1120, 1, 1120, 100)
StoreEmitIL.Emit(OpCodes.Br, cont334)
StoreEmitIL.MarkLabel(cont334)
StoreEmitIL.MarkSequencePoint(doc12, 1122, 1, 1122, 100)
StoreEmitIL.Emit(OpCodes.Br, cont333)
StoreEmitIL.MarkLabel(fa333)
StoreEmitIL.MarkSequencePoint(doc12, 1124, 1, 1124, 100)
Dim typ200(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
StoreEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ200(UBound(typ200) + 1)
typ200(UBound(typ200)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ200))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ200).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 11)
StoreEmitIL.MarkSequencePoint(doc12, 1126, 1, 1126, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
StoreEmitIL.Emit(OpCodes.Ldnull)
Dim fa337 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru337 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont337 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, fa337)
StoreEmitIL.Emit(OpCodes.Br, tru337)
StoreEmitIL.MarkLabel(tru337)
StoreEmitIL.MarkSequencePoint(doc12, 1127, 1, 1127, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
Typ03 = Typ
StoreEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsStatic", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsStatic", Type.EmptyTypes).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 8)
StoreEmitIL.MarkSequencePoint(doc12, 1128, 1, 1128, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa338 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru338 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont338 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, tru338)
StoreEmitIL.Emit(OpCodes.Br, fa338)
StoreEmitIL.MarkLabel(tru338)
StoreEmitIL.MarkSequencePoint(doc12, 1129, 1, 1129, 100)
Dim typ202(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReDim Preserve typ202(UBound(typ202) + 1)
typ202(UBound(typ202)) = Typ
StoreEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdarg", typ202))
Typ = GetType(ILEmitter).GetMethod("EmitLdarg", typ202).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
StoreEmitIL.Emit(OpCodes.Pop)
End If
StoreEmitIL.MarkSequencePoint(doc12, 1130, 1, 1130, 100)
StoreEmitIL.Emit(OpCodes.Br, cont338)
StoreEmitIL.MarkLabel(fa338)
StoreEmitIL.Emit(OpCodes.Br, cont338)
StoreEmitIL.MarkLabel(cont338)
StoreEmitIL.MarkSequencePoint(doc12, 1131, 1, 1131, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
Typ03 = Typ
StoreEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
StoreEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
StoreEmitIL.MarkSequencePoint(doc12, 1132, 1, 1132, 100)
Dim typ204(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
ReDim Preserve typ204(UBound(typ204) + 1)
typ204(UBound(typ204)) = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ReDim Preserve typ204(UBound(typ204) + 1)
typ204(UBound(typ204)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ204))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ204).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
StoreEmitIL.Emit(OpCodes.Pop)
End If
StoreEmitIL.MarkSequencePoint(doc12, 1133, 1, 1133, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
Typ03 = Typ
StoreEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 10)
StoreEmitIL.MarkSequencePoint(doc12, 1134, 1, 1134, 100)
StoreEmitIL.Emit(OpCodes.Br, label22)
StoreEmitIL.MarkSequencePoint(doc12, 1135, 1, 1135, 100)
StoreEmitIL.Emit(OpCodes.Br, cont337)
StoreEmitIL.MarkLabel(fa337)
StoreEmitIL.Emit(OpCodes.Br, cont337)
StoreEmitIL.MarkLabel(cont337)
StoreEmitIL.MarkSequencePoint(doc12, 1138, 1, 1138, 100)
StoreEmitIL.Emit(OpCodes.Br, cont333)
StoreEmitIL.MarkLabel(cont333)
StoreEmitIL.MarkSequencePoint(doc12, 1140, 1, 1140, 100)
Dim typ206(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
StoreEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ206(UBound(typ206) + 1)
typ206(UBound(typ206)) = Typ
StoreEmitIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadClass", typ206))
Typ = GetType(Loader).GetMethod("LoadClass", typ206).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 10)
StoreEmitIL.MarkSequencePoint(doc12, 1141, 1, 1141, 100)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Stloc, 8)
StoreEmitIL.MarkSequencePoint(doc12, 1143, 1, 1143, 100)
StoreEmitIL.Emit(OpCodes.Br, cont332)
StoreEmitIL.MarkLabel(fa332)
StoreEmitIL.MarkSequencePoint(doc12, 1145, 1, 1145, 100)
Dim typ207(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(System.Type)
Typ03 = Typ
StoreEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
ReDim Preserve typ207(UBound(typ207) + 1)
typ207(UBound(typ207)) = Typ
StoreEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ207))
Typ = Typ03.GetMethod("Equals", typ207).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 16)
StoreEmitIL.MarkSequencePoint(doc12, 1147, 1, 1147, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa339 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru339 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont339 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, tru339)
StoreEmitIL.Emit(OpCodes.Br, fa339)
StoreEmitIL.MarkLabel(tru339)
StoreEmitIL.MarkSequencePoint(doc12, 1148, 1, 1148, 100)
Dim typ208(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(System.Type)
ReDim Preserve typ208(UBound(typ208) + 1)
typ208(UBound(typ208)) = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
StoreEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ208(UBound(typ208) + 1)
typ208(UBound(typ208)) = Typ
StoreEmitIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadField", typ208))
Typ = GetType(Loader).GetMethod("LoadField", typ208).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 11)
StoreEmitIL.MarkSequencePoint(doc12, 1149, 1, 1149, 100)
StoreEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("MemberTyp"))
Typ = GetType(Loader).GetField("MemberTyp").FieldType
StoreEmitIL.Emit(OpCodes.Stloc, 10)
StoreEmitIL.MarkSequencePoint(doc12, 1150, 1, 1150, 100)
StoreEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("MemberTyp"))
Typ = GetType(Loader).GetField("MemberTyp").FieldType
StoreEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
StoreEmitIL.MarkSequencePoint(doc12, 1151, 1, 1151, 100)
StoreEmitIL.Emit(OpCodes.Br, cont339)
StoreEmitIL.MarkLabel(fa339)
StoreEmitIL.MarkSequencePoint(doc12, 1152, 1, 1152, 100)
Dim typ209(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
StoreEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ209(UBound(typ209) + 1)
typ209(UBound(typ209)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ209))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ209).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 11)
StoreEmitIL.MarkSequencePoint(doc12, 1153, 1, 1153, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
Typ03 = Typ
StoreEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 10)
StoreEmitIL.MarkSequencePoint(doc12, 1154, 1, 1154, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
Typ03 = Typ
StoreEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
StoreEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type04"))
StoreEmitIL.MarkSequencePoint(doc12, 1155, 1, 1155, 100)
StoreEmitIL.Emit(OpCodes.Br, cont339)
StoreEmitIL.MarkLabel(cont339)
StoreEmitIL.MarkSequencePoint(doc12, 1157, 1, 1157, 100)
Dim typ212(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
ReDim Preserve typ212(UBound(typ212) + 1)
typ212(UBound(typ212)) = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ReDim Preserve typ212(UBound(typ212) + 1)
typ212(UBound(typ212)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ212))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ212).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
StoreEmitIL.Emit(OpCodes.Pop)
End If
StoreEmitIL.MarkSequencePoint(doc12, 1159, 1, 1159, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa340 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru340 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont340 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, tru340)
StoreEmitIL.Emit(OpCodes.Br, fa340)
StoreEmitIL.MarkLabel(tru340)
StoreEmitIL.MarkSequencePoint(doc12, 1160, 1, 1160, 100)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Stloc, 8)
StoreEmitIL.MarkSequencePoint(doc12, 1161, 1, 1161, 100)
StoreEmitIL.Emit(OpCodes.Br, cont340)
StoreEmitIL.MarkLabel(fa340)
StoreEmitIL.Emit(OpCodes.Br, cont340)
StoreEmitIL.MarkLabel(cont340)
StoreEmitIL.MarkSequencePoint(doc12, 1163, 1, 1163, 100)
StoreEmitIL.Emit(OpCodes.Br, cont332)
StoreEmitIL.MarkLabel(cont332)
StoreEmitIL.MarkSequencePoint(doc12, 1165, 1, 1165, 100)
StoreEmitIL.MarkLabel(label22)
StoreEmitIL.MarkSequencePoint(doc12, 1167, 1, 1167, 100)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Stloc, 7)
StoreEmitIL.MarkSequencePoint(doc12, 1169, 1, 1169, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
Dim fa341 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru341 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont341 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, tru341)
StoreEmitIL.Emit(OpCodes.Br, fa341)
StoreEmitIL.MarkLabel(tru341)
StoreEmitIL.MarkSequencePoint(doc12, 1170, 1, 1170, 100)
StoreEmitIL.Emit(OpCodes.Br, label21)
StoreEmitIL.MarkSequencePoint(doc12, 1171, 1, 1171, 100)
StoreEmitIL.Emit(OpCodes.Br, cont341)
StoreEmitIL.MarkLabel(fa341)
StoreEmitIL.MarkSequencePoint(doc12, 1172, 1, 1172, 100)
StoreEmitIL.Emit(OpCodes.Br, label20)
StoreEmitIL.MarkSequencePoint(doc12, 1173, 1, 1173, 100)
StoreEmitIL.Emit(OpCodes.Br, cont341)
StoreEmitIL.MarkLabel(cont341)
StoreEmitIL.MarkSequencePoint(doc12, 1175, 1, 1175, 100)
StoreEmitIL.MarkLabel(label21)
StoreEmitIL.MarkSequencePoint(doc12, 1177, 1, 1177, 100)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AddrFlg"))
StoreEmitIL.MarkSequencePoint(doc12, 1180, 1, 1180, 100)
StoreEmitIL.Emit(OpCodes.Br, cont331)
StoreEmitIL.MarkLabel(fa331)
StoreEmitIL.Emit(OpCodes.Br, cont331)
StoreEmitIL.MarkLabel(cont331)
StoreEmitIL.MarkSequencePoint(doc12, 1184, 1, 1184, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Add)
StoreEmitIL.Emit(OpCodes.Stloc, 0)
StoreEmitIL.MarkSequencePoint(doc12, 1186, 1, 1186, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa342 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru342 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont342 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, tru342)
StoreEmitIL.Emit(OpCodes.Br, fa342)
StoreEmitIL.MarkLabel(tru342)
StoreEmitIL.MarkSequencePoint(doc12, 1188, 1, 1188, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa343 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru343 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont343 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, tru343)
StoreEmitIL.Emit(OpCodes.Br, fa343)
StoreEmitIL.MarkLabel(tru343)
StoreEmitIL.MarkSequencePoint(doc12, 1189, 1, 1189, 100)
Dim typ213(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
StoreEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ213(UBound(typ213) + 1)
typ213(UBound(typ213)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindVar", typ213))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindVar", typ213).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 5)
StoreEmitIL.MarkSequencePoint(doc12, 1190, 1, 1190, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
StoreEmitIL.Emit(OpCodes.Ldnull)
Dim fa344 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru344 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont344 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, fa344)
StoreEmitIL.Emit(OpCodes.Br, tru344)
StoreEmitIL.MarkLabel(tru344)
StoreEmitIL.MarkSequencePoint(doc12, 1191, 1, 1191, 100)
StoreEmitIL.Emit(OpCodes.Br, cont344)
StoreEmitIL.MarkLabel(fa344)
StoreEmitIL.MarkSequencePoint(doc12, 1194, 1, 1194, 100)
Dim typ214(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
StoreEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ214(UBound(typ214) + 1)
typ214(UBound(typ214)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ214))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ214).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 11)
StoreEmitIL.MarkSequencePoint(doc12, 1195, 1, 1195, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
StoreEmitIL.Emit(OpCodes.Ldnull)
Dim fa345 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru345 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont345 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, fa345)
StoreEmitIL.Emit(OpCodes.Br, tru345)
StoreEmitIL.MarkLabel(tru345)
StoreEmitIL.MarkSequencePoint(doc12, 1196, 1, 1196, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
Typ03 = Typ
StoreEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsStatic", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsStatic", Type.EmptyTypes).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 8)
StoreEmitIL.MarkSequencePoint(doc12, 1197, 1, 1197, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa346 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru346 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont346 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, tru346)
StoreEmitIL.Emit(OpCodes.Br, fa346)
StoreEmitIL.MarkLabel(tru346)
StoreEmitIL.MarkSequencePoint(doc12, 1198, 1, 1198, 100)
Dim typ216(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReDim Preserve typ216(UBound(typ216) + 1)
typ216(UBound(typ216)) = Typ
StoreEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdarg", typ216))
Typ = GetType(ILEmitter).GetMethod("EmitLdarg", typ216).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
StoreEmitIL.Emit(OpCodes.Pop)
End If
StoreEmitIL.MarkSequencePoint(doc12, 1199, 1, 1199, 100)
StoreEmitIL.Emit(OpCodes.Br, cont346)
StoreEmitIL.MarkLabel(fa346)
StoreEmitIL.Emit(OpCodes.Br, cont346)
StoreEmitIL.MarkLabel(cont346)
StoreEmitIL.MarkSequencePoint(doc12, 1200, 1, 1200, 100)
StoreEmitIL.Emit(OpCodes.Br, cont345)
StoreEmitIL.MarkLabel(fa345)
StoreEmitIL.Emit(OpCodes.Br, cont345)
StoreEmitIL.MarkLabel(cont345)
StoreEmitIL.MarkSequencePoint(doc12, 1203, 1, 1203, 100)
StoreEmitIL.Emit(OpCodes.Br, cont344)
StoreEmitIL.MarkLabel(cont344)
StoreEmitIL.MarkSequencePoint(doc12, 1205, 1, 1205, 100)
StoreEmitIL.Emit(OpCodes.Br, cont343)
StoreEmitIL.MarkLabel(fa343)
StoreEmitIL.MarkSequencePoint(doc12, 1208, 1, 1208, 100)
Dim typ217(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
StoreEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ217(UBound(typ217) + 1)
typ217(UBound(typ217)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ217))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ217).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 11)
StoreEmitIL.MarkSequencePoint(doc12, 1209, 1, 1209, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
StoreEmitIL.Emit(OpCodes.Ldnull)
Dim fa347 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru347 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont347 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, fa347)
StoreEmitIL.Emit(OpCodes.Br, tru347)
StoreEmitIL.MarkLabel(tru347)
StoreEmitIL.MarkSequencePoint(doc12, 1210, 1, 1210, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
Typ03 = Typ
StoreEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsStatic", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsStatic", Type.EmptyTypes).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 8)
StoreEmitIL.MarkSequencePoint(doc12, 1211, 1, 1211, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa348 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru348 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont348 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, tru348)
StoreEmitIL.Emit(OpCodes.Br, fa348)
StoreEmitIL.MarkLabel(tru348)
StoreEmitIL.MarkSequencePoint(doc12, 1212, 1, 1212, 100)
Dim typ219(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReDim Preserve typ219(UBound(typ219) + 1)
typ219(UBound(typ219)) = Typ
StoreEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdarg", typ219))
Typ = GetType(ILEmitter).GetMethod("EmitLdarg", typ219).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
StoreEmitIL.Emit(OpCodes.Pop)
End If
StoreEmitIL.MarkSequencePoint(doc12, 1213, 1, 1213, 100)
StoreEmitIL.Emit(OpCodes.Br, cont348)
StoreEmitIL.MarkLabel(fa348)
StoreEmitIL.Emit(OpCodes.Br, cont348)
StoreEmitIL.MarkLabel(cont348)
StoreEmitIL.MarkSequencePoint(doc12, 1214, 1, 1214, 100)
StoreEmitIL.Emit(OpCodes.Br, cont347)
StoreEmitIL.MarkLabel(fa347)
StoreEmitIL.Emit(OpCodes.Br, cont347)
StoreEmitIL.MarkLabel(cont347)
StoreEmitIL.MarkSequencePoint(doc12, 1217, 1, 1217, 100)
StoreEmitIL.Emit(OpCodes.Br, cont343)
StoreEmitIL.MarkLabel(cont343)
StoreEmitIL.MarkSequencePoint(doc12, 1218, 1, 1218, 100)
StoreEmitIL.Emit(OpCodes.Br, cont342)
StoreEmitIL.MarkLabel(fa342)
StoreEmitIL.Emit(OpCodes.Br, cont342)
StoreEmitIL.MarkLabel(cont342)
StoreEmitIL.MarkSequencePoint(doc12, 1223, 1, 1223, 100)
StoreEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ220(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(Expr)
ReDim Preserve typ220(UBound(typ220) + 1)
typ220(UBound(typ220)) = Typ
StoreEmitIL.Emit(OpCodes.Callvirt, Evaluate)
Typ = Evaluate.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
StoreEmitIL.Emit(OpCodes.Pop)
End If
StoreEmitIL.MarkSequencePoint(doc12, 1224, 1, 1224, 100)
StoreEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
StoreEmitIL.Emit(OpCodes.Stloc, 15)
StoreEmitIL.MarkSequencePoint(doc12, 1228, 1, 1228, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa349 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru349 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont349 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, tru349)
StoreEmitIL.Emit(OpCodes.Br, fa349)
StoreEmitIL.MarkLabel(tru349)
StoreEmitIL.MarkSequencePoint(doc12, 1230, 1, 1230, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa350 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru350 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont350 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, tru350)
StoreEmitIL.Emit(OpCodes.Br, fa350)
StoreEmitIL.MarkLabel(tru350)
StoreEmitIL.MarkSequencePoint(doc12, 1231, 1, 1231, 100)
Dim typ221(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
StoreEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ221(UBound(typ221) + 1)
typ221(UBound(typ221)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindVar", typ221))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindVar", typ221).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 5)
StoreEmitIL.MarkSequencePoint(doc12, 1232, 1, 1232, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
StoreEmitIL.Emit(OpCodes.Ldnull)
Dim fa351 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru351 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont351 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, fa351)
StoreEmitIL.Emit(OpCodes.Br, tru351)
StoreEmitIL.MarkLabel(tru351)
StoreEmitIL.MarkSequencePoint(doc12, 1233, 1, 1233, 100)
Dim typ222(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
StoreEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("Index"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("Index").FieldType
ReDim Preserve typ222(UBound(typ222) + 1)
typ222(UBound(typ222)) = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
StoreEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("LocArg"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("LocArg").FieldType
ReDim Preserve typ222(UBound(typ222) + 1)
typ222(UBound(typ222)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLocSt", typ222))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLocSt", typ222).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
StoreEmitIL.Emit(OpCodes.Pop)
End If
StoreEmitIL.MarkSequencePoint(doc12, 1234, 1, 1234, 100)
StoreEmitIL.Emit(OpCodes.Br, cont351)
StoreEmitIL.MarkLabel(fa351)
StoreEmitIL.MarkSequencePoint(doc12, 1236, 1, 1236, 100)
Dim typ223(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
StoreEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ223(UBound(typ223) + 1)
typ223(UBound(typ223)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ223))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ223).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 11)
StoreEmitIL.MarkSequencePoint(doc12, 1237, 1, 1237, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
StoreEmitIL.Emit(OpCodes.Ldnull)
Dim fa352 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru352 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont352 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, fa352)
StoreEmitIL.Emit(OpCodes.Br, tru352)
StoreEmitIL.MarkLabel(tru352)
StoreEmitIL.MarkSequencePoint(doc12, 1238, 1, 1238, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
Typ03 = Typ
StoreEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsStatic", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsStatic", Type.EmptyTypes).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 8)
StoreEmitIL.MarkSequencePoint(doc12, 1239, 1, 1239, 100)
Dim typ225(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
ReDim Preserve typ225(UBound(typ225) + 1)
typ225(UBound(typ225)) = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ReDim Preserve typ225(UBound(typ225) + 1)
typ225(UBound(typ225)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldSt", typ225))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldSt", typ225).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
StoreEmitIL.Emit(OpCodes.Pop)
End If
StoreEmitIL.MarkSequencePoint(doc12, 1240, 1, 1240, 100)
StoreEmitIL.Emit(OpCodes.Br, cont352)
StoreEmitIL.MarkLabel(fa352)
StoreEmitIL.Emit(OpCodes.Br, cont352)
StoreEmitIL.MarkLabel(cont352)
StoreEmitIL.MarkSequencePoint(doc12, 1242, 1, 1242, 100)
StoreEmitIL.Emit(OpCodes.Br, cont351)
StoreEmitIL.MarkLabel(cont351)
StoreEmitIL.MarkSequencePoint(doc12, 1244, 1, 1244, 100)
StoreEmitIL.Emit(OpCodes.Br, cont350)
StoreEmitIL.MarkLabel(fa350)
StoreEmitIL.MarkSequencePoint(doc12, 1246, 1, 1246, 100)
Dim typ226(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
StoreEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ226(UBound(typ226) + 1)
typ226(UBound(typ226)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ226))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ226).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 11)
StoreEmitIL.MarkSequencePoint(doc12, 1247, 1, 1247, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
StoreEmitIL.Emit(OpCodes.Ldnull)
Dim fa353 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru353 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont353 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, fa353)
StoreEmitIL.Emit(OpCodes.Br, tru353)
StoreEmitIL.MarkLabel(tru353)
StoreEmitIL.MarkSequencePoint(doc12, 1248, 1, 1248, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
Typ03 = Typ
StoreEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsStatic", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsStatic", Type.EmptyTypes).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 8)
StoreEmitIL.MarkSequencePoint(doc12, 1249, 1, 1249, 100)
Dim typ228(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
ReDim Preserve typ228(UBound(typ228) + 1)
typ228(UBound(typ228)) = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ReDim Preserve typ228(UBound(typ228) + 1)
typ228(UBound(typ228)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldSt", typ228))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldSt", typ228).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
StoreEmitIL.Emit(OpCodes.Pop)
End If
StoreEmitIL.MarkSequencePoint(doc12, 1250, 1, 1250, 100)
StoreEmitIL.Emit(OpCodes.Br, cont353)
StoreEmitIL.MarkLabel(fa353)
StoreEmitIL.Emit(OpCodes.Br, cont353)
StoreEmitIL.MarkLabel(cont353)
StoreEmitIL.MarkSequencePoint(doc12, 1252, 1, 1252, 100)
StoreEmitIL.Emit(OpCodes.Br, cont350)
StoreEmitIL.MarkLabel(cont350)
StoreEmitIL.MarkSequencePoint(doc12, 1255, 1, 1255, 100)
StoreEmitIL.Emit(OpCodes.Br, cont349)
StoreEmitIL.MarkLabel(fa349)
StoreEmitIL.MarkSequencePoint(doc12, 1257, 1, 1257, 100)
Dim typ229(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(System.Type)
Typ03 = Typ
StoreEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
ReDim Preserve typ229(UBound(typ229) + 1)
typ229(UBound(typ229)) = Typ
StoreEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ229))
Typ = Typ03.GetMethod("Equals", typ229).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 16)
StoreEmitIL.MarkSequencePoint(doc12, 1259, 1, 1259, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa354 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru354 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont354 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, tru354)
StoreEmitIL.Emit(OpCodes.Br, fa354)
StoreEmitIL.MarkLabel(tru354)
StoreEmitIL.MarkSequencePoint(doc12, 1260, 1, 1260, 100)
Dim typ230(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(System.Type)
ReDim Preserve typ230(UBound(typ230) + 1)
typ230(UBound(typ230)) = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
StoreEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ230(UBound(typ230) + 1)
typ230(UBound(typ230)) = Typ
StoreEmitIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadField", typ230))
Typ = GetType(Loader).GetMethod("LoadField", typ230).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 11)
StoreEmitIL.MarkSequencePoint(doc12, 1261, 1, 1261, 100)
Dim typ231(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
ReDim Preserve typ231(UBound(typ231) + 1)
typ231(UBound(typ231)) = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ReDim Preserve typ231(UBound(typ231) + 1)
typ231(UBound(typ231)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldSt", typ231))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldSt", typ231).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
StoreEmitIL.Emit(OpCodes.Pop)
End If
StoreEmitIL.MarkSequencePoint(doc12, 1262, 1, 1262, 100)
StoreEmitIL.Emit(OpCodes.Br, cont354)
StoreEmitIL.MarkLabel(fa354)
StoreEmitIL.MarkSequencePoint(doc12, 1263, 1, 1263, 100)
Dim typ232(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
StoreEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ232(UBound(typ232) + 1)
typ232(UBound(typ232)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ232))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("GetLocFld", typ232).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 11)
StoreEmitIL.MarkSequencePoint(doc12, 1264, 1, 1264, 100)
Dim typ233(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(FieldInfo)
ReDim Preserve typ233(UBound(typ233) + 1)
typ233(UBound(typ233)) = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ReDim Preserve typ233(UBound(typ233) + 1)
typ233(UBound(typ233)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldSt", typ233))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldSt", typ233).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
StoreEmitIL.Emit(OpCodes.Pop)
End If
StoreEmitIL.MarkSequencePoint(doc12, 1265, 1, 1265, 100)
StoreEmitIL.Emit(OpCodes.Br, cont354)
StoreEmitIL.MarkLabel(cont354)
StoreEmitIL.MarkSequencePoint(doc12, 1267, 1, 1267, 100)
StoreEmitIL.Emit(OpCodes.Br, cont349)
StoreEmitIL.MarkLabel(cont349)
StoreEmitIL.MarkSequencePoint(doc12, 1269, 1, 1269, 100)
StoreEmitIL.Emit(OpCodes.Ret)
Evaluator.CreateType()
End Sub


Dim doc13 As ISymbolDocumentWriter

Sub StmtReader()
Dim StmtReader As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "StmtReader", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(Stmt)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
Dim Read As MethodBuilder = StmtReader.DefineMethod("Read", MethodAttributes.Public, GetType(System.Void), typ0)
Dim ReadIL As ILGenerator = Read.GetILGenerator()
Dim Readparam01 As ParameterBuilder = Read.DefineParameter(1, ParameterAttributes.None, "stm")
Dim Readparam02 As ParameterBuilder = Read.DefineParameter(2, ParameterAttributes.None, "fpath")
ReadIL.MarkSequencePoint(doc13, 13, 1, 13, 100)
Dim locbldr325 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr325.SetLocalSymInfo("typ")
ReadIL.MarkSequencePoint(doc13, 14, 1, 14, 100)
Dim locbldr326 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Boolean))
locbldr326.SetLocalSymInfo("b")
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc13, 15, 1, 15, 100)
Dim locbldr327 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.String))
locbldr327.SetLocalSymInfo("tmpstr")
ReadIL.MarkSequencePoint(doc13, 17, 1, 17, 100)
Dim label0 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.MarkSequencePoint(doc13, 19, 1, 19, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("ChainFlg"))
ReadIL.MarkSequencePoint(doc13, 21, 1, 21, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("DebugFlg"))
Typ = GetType(AsmFactory).GetField("DebugFlg").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa355 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru355 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont355 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru355)
ReadIL.Emit(OpCodes.Br, fa355)
ReadIL.MarkLabel(tru355)
ReadIL.MarkSequencePoint(doc13, 22, 1, 22, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("InMethodFlg"))
Typ = GetType(AsmFactory).GetField("InMethodFlg").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa356 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru356 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont356 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru356)
ReadIL.Emit(OpCodes.Br, fa356)
ReadIL.MarkLabel(tru356)
ReadIL.MarkSequencePoint(doc13, 23, 1, 23, 100)
Dim typ1(-1) As Type
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("MarkDbgPt", typ1))
Typ = GetType(ILEmitter).GetMethod("MarkDbgPt", typ1).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 24, 1, 24, 100)
ReadIL.Emit(OpCodes.Br, cont356)
ReadIL.MarkLabel(fa356)
ReadIL.Emit(OpCodes.Br, cont356)
ReadIL.MarkLabel(cont356)
ReadIL.MarkSequencePoint(doc13, 25, 1, 25, 100)
ReadIL.Emit(OpCodes.Br, cont355)
ReadIL.MarkLabel(fa355)
ReadIL.Emit(OpCodes.Br, cont355)
ReadIL.MarkLabel(cont355)
ReadIL.MarkSequencePoint(doc13, 27, 1, 27, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(RefasmStmt))
Dim typ2 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ2))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ2).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc13, 28, 1, 28, 100)
Dim typ3(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ3))
Typ = Typ03.GetMethod("IsInstanceOfType", typ3).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc13, 30, 1, 30, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa357 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru357 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont357 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru357)
ReadIL.Emit(OpCodes.Br, fa357)
ReadIL.MarkLabel(tru357)
ReadIL.MarkSequencePoint(doc13, 31, 1, 31, 100)
Dim locbldr328 As LocalBuilder = ReadIL.DeclareLocal(GetType(RefasmStmt))
locbldr328.SetLocalSymInfo("rastm")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 3)
ReadIL.MarkSequencePoint(doc13, 32, 1, 32, 100)
Dim locbldr329 As LocalBuilder = ReadIL.DeclareLocal(GetType(Token))
locbldr329.SetLocalSymInfo("ap")
ReadIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(RefasmStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(RefasmStmt).GetField("AsmPath"))
Typ = GetType(RefasmStmt).GetField("AsmPath").FieldType
ReadIL.Emit(OpCodes.Stloc, 4)
ReadIL.MarkSequencePoint(doc13, 34, 1, 34, 100)
Dim typ4(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "^")
Typ = GetType(System.String)
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "(.)*")
Typ = GetType(System.String)
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ4))
Typ = GetType(String).GetMethod("Concat", typ4).ReturnType
ReadIL.Emit(OpCodes.Stloc, 2)
ReadIL.MarkSequencePoint(doc13, 35, 1, 35, 100)
Dim typ5(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReDim Preserve typ5(UBound(typ5) + 1)
typ5(UBound(typ5)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "$")
Typ = GetType(System.String)
ReDim Preserve typ5(UBound(typ5) + 1)
typ5(UBound(typ5)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ5))
Typ = GetType(String).GetMethod("Concat", typ5).ReturnType
ReadIL.Emit(OpCodes.Stloc, 2)
ReadIL.MarkSequencePoint(doc13, 36, 1, 36, 100)
Dim locbldr330 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Boolean))
locbldr330.SetLocalSymInfo("compb")
Dim typ6(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ6))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ6).ReturnType
ReadIL.Emit(OpCodes.Stloc, 5)
ReadIL.MarkSequencePoint(doc13, 38, 1, 38, 100)
ReadIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa358 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru358 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont358 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru358)
ReadIL.Emit(OpCodes.Br, fa358)
ReadIL.MarkLabel(tru358)
ReadIL.MarkSequencePoint(doc13, 39, 1, 39, 100)
ReadIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stloc, 2)
ReadIL.MarkSequencePoint(doc13, 40, 1, 40, 100)
Dim locbldr331 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Char).MakeArrayType())
locbldr331.SetLocalSymInfo("tmpchrarr")
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Char))
ReadIL.Emit(OpCodes.Stloc, 6)
ReadIL.MarkSequencePoint(doc13, 41, 1, 41, 100)
ReadIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
Dim typ7 As Type() = {Typ}
ReadIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ7))
Typ = GetType(System.Convert).GetMethod("ToChar", typ7).ReturnType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc13, 42, 1, 42, 100)
Dim typ8(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Trim", typ8))
Typ = Typ03.GetMethod("Trim", typ8).ReturnType
ReadIL.Emit(OpCodes.Stloc, 2)
ReadIL.MarkSequencePoint(doc13, 43, 1, 43, 100)
ReadIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReadIL.Emit(OpCodes.Stfld, GetType(Token).GetField("Value"))
ReadIL.MarkSequencePoint(doc13, 44, 1, 44, 100)
ReadIL.Emit(OpCodes.Br, cont358)
ReadIL.MarkLabel(fa358)
ReadIL.Emit(OpCodes.Br, cont358)
ReadIL.MarkLabel(cont358)
ReadIL.MarkSequencePoint(doc13, 46, 1, 46, 100)
Dim locbldr332 As LocalBuilder = ReadIL.DeclareLocal(GetType(Assembly))
locbldr332.SetLocalSymInfo("asm")
Dim typ9(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Assembly).GetMethod("LoadFrom", typ9))
Typ = GetType(Assembly).GetMethod("LoadFrom", typ9).ReturnType
ReadIL.Emit(OpCodes.Stloc, 7)
ReadIL.MarkSequencePoint(doc13, 47, 1, 47, 100)
Dim typ10(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Referencing Assembly: ")
Typ = GetType(System.String)
ReDim Preserve typ10(UBound(typ10) + 1)
typ10(UBound(typ10)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ10))
Typ = GetType(Console).GetMethod("Write", typ10).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 48, 1, 48, 100)
Dim typ11(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ11(UBound(typ11) + 1)
typ11(UBound(typ11)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ11))
Typ = GetType(Console).GetMethod("WriteLine", typ11).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 49, 1, 49, 100)
Dim typ12(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(Assembly)
ReDim Preserve typ12(UBound(typ12) + 1)
typ12(UBound(typ12)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Importer).GetMethod("AddAsm", typ12))
Typ = GetType(Importer).GetMethod("AddAsm", typ12).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 50, 1, 50, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc13, 51, 1, 51, 100)
ReadIL.Emit(OpCodes.Br, cont357)
ReadIL.MarkLabel(fa357)
ReadIL.Emit(OpCodes.Br, cont357)
ReadIL.MarkLabel(cont357)
ReadIL.MarkSequencePoint(doc13, 53, 1, 53, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(ImportStmt))
Dim typ13 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ13))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ13).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc13, 54, 1, 54, 100)
Dim typ14(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ14))
Typ = Typ03.GetMethod("IsInstanceOfType", typ14).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc13, 56, 1, 56, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa359 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru359 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont359 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru359)
ReadIL.Emit(OpCodes.Br, fa359)
ReadIL.MarkLabel(tru359)
ReadIL.MarkSequencePoint(doc13, 57, 1, 57, 100)
Dim locbldr333 As LocalBuilder = ReadIL.DeclareLocal(GetType(ImportStmt))
locbldr333.SetLocalSymInfo("istm")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 8)
ReadIL.MarkSequencePoint(doc13, 58, 1, 58, 100)
Dim locbldr334 As LocalBuilder = ReadIL.DeclareLocal(GetType(Token))
locbldr334.SetLocalSymInfo("ina")
ReadIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(ImportStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(ImportStmt).GetField("NS"))
Typ = GetType(ImportStmt).GetField("NS").FieldType
ReadIL.Emit(OpCodes.Stloc, 9)
ReadIL.MarkSequencePoint(doc13, 60, 1, 60, 100)
Dim typ15(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "^")
Typ = GetType(System.String)
ReDim Preserve typ15(UBound(typ15) + 1)
typ15(UBound(typ15)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ15(UBound(typ15) + 1)
typ15(UBound(typ15)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "(.)*")
Typ = GetType(System.String)
ReDim Preserve typ15(UBound(typ15) + 1)
typ15(UBound(typ15)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ15(UBound(typ15) + 1)
typ15(UBound(typ15)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ15))
Typ = GetType(String).GetMethod("Concat", typ15).ReturnType
ReadIL.Emit(OpCodes.Stloc, 2)
ReadIL.MarkSequencePoint(doc13, 61, 1, 61, 100)
Dim typ16(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReDim Preserve typ16(UBound(typ16) + 1)
typ16(UBound(typ16)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "$")
Typ = GetType(System.String)
ReDim Preserve typ16(UBound(typ16) + 1)
typ16(UBound(typ16)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ16))
Typ = GetType(String).GetMethod("Concat", typ16).ReturnType
ReadIL.Emit(OpCodes.Stloc, 2)
ReadIL.MarkSequencePoint(doc13, 62, 1, 62, 100)
Dim typ17(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ17(UBound(typ17) + 1)
typ17(UBound(typ17)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReDim Preserve typ17(UBound(typ17) + 1)
typ17(UBound(typ17)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ17))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ17).ReturnType
ReadIL.Emit(OpCodes.Stloc, 5)
ReadIL.MarkSequencePoint(doc13, 64, 1, 64, 100)
ReadIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa360 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru360 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont360 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru360)
ReadIL.Emit(OpCodes.Br, fa360)
ReadIL.MarkLabel(tru360)
ReadIL.MarkSequencePoint(doc13, 65, 1, 65, 100)
ReadIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stloc, 2)
ReadIL.MarkSequencePoint(doc13, 66, 1, 66, 100)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Char))
ReadIL.Emit(OpCodes.Stloc, 6)
ReadIL.MarkSequencePoint(doc13, 67, 1, 67, 100)
ReadIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
Dim typ18 As Type() = {Typ}
ReadIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ18))
Typ = GetType(System.Convert).GetMethod("ToChar", typ18).ReturnType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc13, 68, 1, 68, 100)
Dim typ19(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ19(UBound(typ19) + 1)
typ19(UBound(typ19)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Trim", typ19))
Typ = Typ03.GetMethod("Trim", typ19).ReturnType
ReadIL.Emit(OpCodes.Stloc, 2)
ReadIL.MarkSequencePoint(doc13, 69, 1, 69, 100)
ReadIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReadIL.Emit(OpCodes.Stfld, GetType(Token).GetField("Value"))
ReadIL.MarkSequencePoint(doc13, 70, 1, 70, 100)
ReadIL.Emit(OpCodes.Br, cont360)
ReadIL.MarkLabel(fa360)
ReadIL.Emit(OpCodes.Br, cont360)
ReadIL.MarkLabel(cont360)
ReadIL.MarkSequencePoint(doc13, 72, 1, 72, 100)
Dim typ20(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Importing Namespace: ")
Typ = GetType(System.String)
ReDim Preserve typ20(UBound(typ20) + 1)
typ20(UBound(typ20)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ20))
Typ = GetType(Console).GetMethod("Write", typ20).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 73, 1, 73, 100)
Dim typ21(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ21(UBound(typ21) + 1)
typ21(UBound(typ21)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ21))
Typ = GetType(Console).GetMethod("WriteLine", typ21).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 75, 1, 75, 100)
Dim typ22(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ22(UBound(typ22) + 1)
typ22(UBound(typ22)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Importer).GetMethod("AddImp", typ22))
Typ = GetType(Importer).GetMethod("AddImp", typ22).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 76, 1, 76, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc13, 77, 1, 77, 100)
ReadIL.Emit(OpCodes.Br, cont359)
ReadIL.MarkLabel(fa359)
ReadIL.Emit(OpCodes.Br, cont359)
ReadIL.MarkLabel(cont359)
ReadIL.MarkSequencePoint(doc13, 79, 1, 79, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(LocimportStmt))
Dim typ23 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ23))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ23).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc13, 80, 1, 80, 100)
Dim typ24(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ24(UBound(typ24) + 1)
typ24(UBound(typ24)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ24))
Typ = Typ03.GetMethod("IsInstanceOfType", typ24).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc13, 82, 1, 82, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa361 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru361 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont361 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru361)
ReadIL.Emit(OpCodes.Br, fa361)
ReadIL.MarkLabel(tru361)
ReadIL.MarkSequencePoint(doc13, 83, 1, 83, 100)
Dim locbldr335 As LocalBuilder = ReadIL.DeclareLocal(GetType(LocimportStmt))
locbldr335.SetLocalSymInfo("listm")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 10)
ReadIL.MarkSequencePoint(doc13, 84, 1, 84, 100)
Dim locbldr336 As LocalBuilder = ReadIL.DeclareLocal(GetType(Token))
locbldr336.SetLocalSymInfo("lina")
ReadIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(LocimportStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(LocimportStmt).GetField("NS"))
Typ = GetType(LocimportStmt).GetField("NS").FieldType
ReadIL.Emit(OpCodes.Stloc, 11)
ReadIL.MarkSequencePoint(doc13, 85, 1, 85, 100)
Dim typ25(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "^")
Typ = GetType(System.String)
ReDim Preserve typ25(UBound(typ25) + 1)
typ25(UBound(typ25)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ25(UBound(typ25) + 1)
typ25(UBound(typ25)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "(.)*")
Typ = GetType(System.String)
ReDim Preserve typ25(UBound(typ25) + 1)
typ25(UBound(typ25)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ25(UBound(typ25) + 1)
typ25(UBound(typ25)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ25))
Typ = GetType(String).GetMethod("Concat", typ25).ReturnType
ReadIL.Emit(OpCodes.Stloc, 2)
ReadIL.MarkSequencePoint(doc13, 86, 1, 86, 100)
Dim typ26(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReDim Preserve typ26(UBound(typ26) + 1)
typ26(UBound(typ26)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "$")
Typ = GetType(System.String)
ReDim Preserve typ26(UBound(typ26) + 1)
typ26(UBound(typ26)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ26))
Typ = GetType(String).GetMethod("Concat", typ26).ReturnType
ReadIL.Emit(OpCodes.Stloc, 2)
ReadIL.MarkSequencePoint(doc13, 87, 1, 87, 100)
Dim typ27(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ27(UBound(typ27) + 1)
typ27(UBound(typ27)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReDim Preserve typ27(UBound(typ27) + 1)
typ27(UBound(typ27)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ27))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ27).ReturnType
ReadIL.Emit(OpCodes.Stloc, 5)
ReadIL.MarkSequencePoint(doc13, 89, 1, 89, 100)
ReadIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa362 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru362 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont362 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru362)
ReadIL.Emit(OpCodes.Br, fa362)
ReadIL.MarkLabel(tru362)
ReadIL.MarkSequencePoint(doc13, 90, 1, 90, 100)
ReadIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stloc, 2)
ReadIL.MarkSequencePoint(doc13, 91, 1, 91, 100)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Char))
ReadIL.Emit(OpCodes.Stloc, 6)
ReadIL.MarkSequencePoint(doc13, 92, 1, 92, 100)
ReadIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
Dim typ28 As Type() = {Typ}
ReadIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ28))
Typ = GetType(System.Convert).GetMethod("ToChar", typ28).ReturnType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc13, 93, 1, 93, 100)
Dim typ29(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ29(UBound(typ29) + 1)
typ29(UBound(typ29)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Trim", typ29))
Typ = Typ03.GetMethod("Trim", typ29).ReturnType
ReadIL.Emit(OpCodes.Stloc, 2)
ReadIL.MarkSequencePoint(doc13, 94, 1, 94, 100)
ReadIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReadIL.Emit(OpCodes.Stfld, GetType(Token).GetField("Value"))
ReadIL.MarkSequencePoint(doc13, 95, 1, 95, 100)
ReadIL.Emit(OpCodes.Br, cont362)
ReadIL.MarkLabel(fa362)
ReadIL.Emit(OpCodes.Br, cont362)
ReadIL.MarkLabel(cont362)
ReadIL.MarkSequencePoint(doc13, 97, 1, 97, 100)
Dim typ30(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Importing Namespace: ")
Typ = GetType(System.String)
ReDim Preserve typ30(UBound(typ30) + 1)
typ30(UBound(typ30)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ30))
Typ = GetType(Console).GetMethod("Write", typ30).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 98, 1, 98, 100)
Dim typ31(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ31(UBound(typ31) + 1)
typ31(UBound(typ31)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ31))
Typ = GetType(Console).GetMethod("WriteLine", typ31).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 100, 1, 100, 100)
Dim typ32(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ32(UBound(typ32) + 1)
typ32(UBound(typ32)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Importer).GetMethod("AddLocImp", typ32))
Typ = GetType(Importer).GetMethod("AddLocImp", typ32).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 101, 1, 101, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc13, 102, 1, 102, 100)
ReadIL.Emit(OpCodes.Br, cont361)
ReadIL.MarkLabel(fa361)
ReadIL.Emit(OpCodes.Br, cont361)
ReadIL.MarkLabel(cont361)
ReadIL.MarkSequencePoint(doc13, 104, 1, 104, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(AssemblyStmt))
Dim typ33 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ33))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ33).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc13, 105, 1, 105, 100)
Dim typ34(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ34(UBound(typ34) + 1)
typ34(UBound(typ34)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ34))
Typ = Typ03.GetMethod("IsInstanceOfType", typ34).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc13, 107, 1, 107, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa363 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru363 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont363 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru363)
ReadIL.Emit(OpCodes.Br, fa363)
ReadIL.MarkLabel(tru363)
ReadIL.MarkSequencePoint(doc13, 109, 1, 109, 100)
Dim locbldr337 As LocalBuilder = ReadIL.DeclareLocal(GetType(AssemblyStmt))
locbldr337.SetLocalSymInfo("asms")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 12)
ReadIL.MarkSequencePoint(doc13, 110, 1, 110, 100)
Dim locbldr338 As LocalBuilder = ReadIL.DeclareLocal(GetType(Ident))
locbldr338.SetLocalSymInfo("asmn")
ReadIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(AssemblyStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(AssemblyStmt).GetField("AsmName"))
Typ = GetType(AssemblyStmt).GetField("AsmName").FieldType
ReadIL.Emit(OpCodes.Stloc, 13)
ReadIL.MarkSequencePoint(doc13, 111, 1, 111, 100)
Dim typ35(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ35(UBound(typ35) + 1)
typ35(UBound(typ35)) = Typ
ReadIL.Emit(OpCodes.Newobj, GetType(AssemblyName).GetConstructor(typ35))
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AsmNameStr"))
ReadIL.MarkSequencePoint(doc13, 112, 1, 112, 100)
Dim locbldr339 As LocalBuilder = ReadIL.DeclareLocal(GetType(Token))
locbldr339.SetLocalSymInfo("asmm")
ReadIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(AssemblyStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(AssemblyStmt).GetField("Mode"))
Typ = GetType(AssemblyStmt).GetField("Mode").FieldType
ReadIL.Emit(OpCodes.Stloc, 14)
ReadIL.MarkSequencePoint(doc13, 113, 1, 113, 100)
ReadIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AsmMode"))
ReadIL.MarkSequencePoint(doc13, 114, 1, 114, 100)
ReadIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("DfltNS"))
ReadIL.MarkSequencePoint(doc13, 115, 1, 115, 100)
ReadIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnNS"))
ReadIL.MarkSequencePoint(doc13, 117, 1, 117, 100)
Dim typ36(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Beginning Assembly: ")
Typ = GetType(System.String)
ReDim Preserve typ36(UBound(typ36) + 1)
typ36(UBound(typ36)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ36))
Typ = GetType(Console).GetMethod("Write", typ36).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 118, 1, 118, 100)
Dim typ37(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ37(UBound(typ37) + 1)
typ37(UBound(typ37)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ37))
Typ = GetType(Console).GetMethod("WriteLine", typ37).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 120, 1, 120, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc13, 122, 1, 122, 100)
ReadIL.Emit(OpCodes.Br, cont363)
ReadIL.MarkLabel(fa363)
ReadIL.Emit(OpCodes.Br, cont363)
ReadIL.MarkLabel(cont363)
ReadIL.MarkSequencePoint(doc13, 124, 1, 124, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(VerStmt))
Dim typ38 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ38))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ38).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc13, 125, 1, 125, 100)
Dim typ39(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ39(UBound(typ39) + 1)
typ39(UBound(typ39)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ39))
Typ = Typ03.GetMethod("IsInstanceOfType", typ39).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc13, 127, 1, 127, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa364 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru364 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont364 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru364)
ReadIL.Emit(OpCodes.Br, fa364)
ReadIL.MarkLabel(tru364)
ReadIL.MarkSequencePoint(doc13, 128, 1, 128, 100)
Dim locbldr340 As LocalBuilder = ReadIL.DeclareLocal(GetType(VerStmt))
locbldr340.SetLocalSymInfo("asmv")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 15)
ReadIL.MarkSequencePoint(doc13, 129, 1, 129, 100)
Dim locbldr341 As LocalBuilder = ReadIL.DeclareLocal(GetType(IntLiteral).MakeArrayType())
locbldr341.SetLocalSymInfo("vns")
ReadIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(VerStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(VerStmt).GetField("VersionNos"))
Typ = GetType(VerStmt).GetField("VersionNos").FieldType
ReadIL.Emit(OpCodes.Stloc, 16)
ReadIL.MarkSequencePoint(doc13, 130, 1, 130, 100)
Dim locbldr342 As LocalBuilder = ReadIL.DeclareLocal(GetType(IntLiteral))
locbldr342.SetLocalSymInfo("vne")
ReadIL.MarkSequencePoint(doc13, 131, 1, 131, 100)
Dim locbldr343 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Int32).MakeArrayType())
locbldr343.SetLocalSymInfo("vernos")
ReadIL.Emit(OpCodes.Ldc_I4, CInt(4))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Int32))
ReadIL.Emit(OpCodes.Stloc, 18)
ReadIL.MarkSequencePoint(doc13, 132, 1, 132, 100)
ReadIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(IntLiteral).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(IntLiteral).MakeArrayType().GetElementType())
Typ = GetType(IntLiteral).MakeArrayType().GetElementType()
ReadIL.Emit(OpCodes.Stloc, 17)
ReadIL.MarkSequencePoint(doc13, 133, 1, 133, 100)
ReadIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(IntLiteral)
ReadIL.Emit(OpCodes.Ldfld, GetType(IntLiteral).GetField("NumVal"))
Typ = GetType(IntLiteral).GetField("NumVal").FieldType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Int32).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc13, 134, 1, 134, 100)
ReadIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(IntLiteral).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(IntLiteral).MakeArrayType().GetElementType())
Typ = GetType(IntLiteral).MakeArrayType().GetElementType()
ReadIL.Emit(OpCodes.Stloc, 17)
ReadIL.MarkSequencePoint(doc13, 135, 1, 135, 100)
ReadIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(IntLiteral)
ReadIL.Emit(OpCodes.Ldfld, GetType(IntLiteral).GetField("NumVal"))
Typ = GetType(IntLiteral).GetField("NumVal").FieldType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Int32).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc13, 136, 1, 136, 100)
ReadIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(IntLiteral).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(IntLiteral).MakeArrayType().GetElementType())
Typ = GetType(IntLiteral).MakeArrayType().GetElementType()
ReadIL.Emit(OpCodes.Stloc, 17)
ReadIL.MarkSequencePoint(doc13, 137, 1, 137, 100)
ReadIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(IntLiteral)
ReadIL.Emit(OpCodes.Ldfld, GetType(IntLiteral).GetField("NumVal"))
Typ = GetType(IntLiteral).GetField("NumVal").FieldType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Int32).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc13, 138, 1, 138, 100)
ReadIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(IntLiteral).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(IntLiteral).MakeArrayType().GetElementType())
Typ = GetType(IntLiteral).MakeArrayType().GetElementType()
ReadIL.Emit(OpCodes.Stloc, 17)
ReadIL.MarkSequencePoint(doc13, 139, 1, 139, 100)
ReadIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(IntLiteral)
ReadIL.Emit(OpCodes.Ldfld, GetType(IntLiteral).GetField("NumVal"))
Typ = GetType(IntLiteral).GetField("NumVal").FieldType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Int32).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc13, 140, 1, 140, 100)
Dim locbldr344 As LocalBuilder = ReadIL.DeclareLocal(GetType(Version))
locbldr344.SetLocalSymInfo("asmver")
Dim typ40(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(System.Int32).MakeArrayType().GetElementType())
Typ = GetType(System.Int32).MakeArrayType().GetElementType()
ReDim Preserve typ40(UBound(typ40) + 1)
typ40(UBound(typ40)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(System.Int32).MakeArrayType().GetElementType())
Typ = GetType(System.Int32).MakeArrayType().GetElementType()
ReDim Preserve typ40(UBound(typ40) + 1)
typ40(UBound(typ40)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(System.Int32).MakeArrayType().GetElementType())
Typ = GetType(System.Int32).MakeArrayType().GetElementType()
ReDim Preserve typ40(UBound(typ40) + 1)
typ40(UBound(typ40)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(System.Int32).MakeArrayType().GetElementType())
Typ = GetType(System.Int32).MakeArrayType().GetElementType()
ReDim Preserve typ40(UBound(typ40) + 1)
typ40(UBound(typ40)) = Typ
ReadIL.Emit(OpCodes.Newobj, GetType(Version).GetConstructor(typ40))
ReadIL.Emit(OpCodes.Stloc, 19)
ReadIL.MarkSequencePoint(doc13, 141, 1, 141, 100)
Dim locbldr345 As LocalBuilder = ReadIL.DeclareLocal(GetType(AssemblyName))
locbldr345.SetLocalSymInfo("asmnm")
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmNameStr"))
Typ = GetType(AsmFactory).GetField("AsmNameStr").FieldType
ReadIL.Emit(OpCodes.Stloc, 20)
ReadIL.MarkSequencePoint(doc13, 142, 1, 142, 100)
Dim typ41(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(AssemblyName)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(Version)
ReDim Preserve typ41(UBound(typ41) + 1)
typ41(UBound(typ41)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("set_Version", typ41))
Typ = Typ03.GetMethod("set_Version", typ41).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 143, 1, 143, 100)
ReadIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(AssemblyName)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AsmNameStr"))
ReadIL.MarkSequencePoint(doc13, 144, 1, 144, 100)
Dim locbldr346 As LocalBuilder = ReadIL.DeclareLocal(GetType(AppDomain))
locbldr346.SetLocalSymInfo("cad")
ReadIL.Emit(OpCodes.Call, GetType(AppDomain).GetMethod("get_CurrentDomain", Type.EmptyTypes))
Typ = GetType(AppDomain).GetMethod("get_CurrentDomain", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 21)
ReadIL.MarkSequencePoint(doc13, 145, 1, 145, 100)
Dim locbldr347 As LocalBuilder = ReadIL.DeclareLocal(GetType(AssemblyBuilderAccess))
locbldr347.SetLocalSymInfo("aasv")
ReadIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Stloc, 22)
ReadIL.MarkSequencePoint(doc13, 146, 1, 146, 100)
Dim locbldr348 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.String))
locbldr348.SetLocalSymInfo("curd")
ReadIL.Emit(OpCodes.Call, GetType(Directory).GetMethod("GetCurrentDirectory", Type.EmptyTypes))
Typ = GetType(Directory).GetMethod("GetCurrentDirectory", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 23)
ReadIL.MarkSequencePoint(doc13, 147, 1, 147, 100)
Dim typ42(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(AppDomain)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(AssemblyName)
ReDim Preserve typ42(UBound(typ42) + 1)
typ42(UBound(typ42)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(AssemblyBuilderAccess)
ReDim Preserve typ42(UBound(typ42) + 1)
typ42(UBound(typ42)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 23)
Typ = GetType(System.String)
ReDim Preserve typ42(UBound(typ42) + 1)
typ42(UBound(typ42)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineDynamicAssembly", typ42))
Typ = Typ03.GetMethod("DefineDynamicAssembly", typ42).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AsmB"))
ReadIL.MarkSequencePoint(doc13, 148, 1, 148, 100)
Dim locbldr349 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.String))
locbldr349.SetLocalSymInfo("asmnme")
ReadIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(AssemblyName)
Typ03 = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_Name", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_Name", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 24)
ReadIL.MarkSequencePoint(doc13, 149, 1, 149, 100)
Dim typ44(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(System.String)
ReDim Preserve typ44(UBound(typ44) + 1)
typ44(UBound(typ44)) = Typ
ReadIL.Emit(OpCodes.Ldstr, ".")
Typ = GetType(System.String)
ReDim Preserve typ44(UBound(typ44) + 1)
typ44(UBound(typ44)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmMode"))
Typ = GetType(AsmFactory).GetField("AsmMode").FieldType
ReDim Preserve typ44(UBound(typ44) + 1)
typ44(UBound(typ44)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ44))
Typ = GetType(String).GetMethod("Concat", typ44).ReturnType
ReadIL.Emit(OpCodes.Stloc, 24)
ReadIL.MarkSequencePoint(doc13, 150, 1, 150, 100)
Dim locbldr350 As LocalBuilder = ReadIL.DeclareLocal(GetType(AssemblyBuilder))
locbldr350.SetLocalSymInfo("ab")
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmB"))
Typ = GetType(AsmFactory).GetField("AsmB").FieldType
ReadIL.Emit(OpCodes.Stloc, 25)
ReadIL.MarkSequencePoint(doc13, 152, 1, 152, 100)
Dim typ45(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(AssemblyBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(System.String)
ReDim Preserve typ45(UBound(typ45) + 1)
typ45(UBound(typ45)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(System.String)
ReDim Preserve typ45(UBound(typ45) + 1)
typ45(UBound(typ45)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("DebugFlg"))
Typ = GetType(AsmFactory).GetField("DebugFlg").FieldType
ReDim Preserve typ45(UBound(typ45) + 1)
typ45(UBound(typ45)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineDynamicModule", typ45))
Typ = Typ03.GetMethod("DefineDynamicModule", typ45).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("MdlB"))
ReadIL.MarkSequencePoint(doc13, 154, 1, 154, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("DebugFlg"))
Typ = GetType(AsmFactory).GetField("DebugFlg").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa365 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru365 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont365 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru365)
ReadIL.Emit(OpCodes.Br, fa365)
ReadIL.MarkLabel(tru365)
ReadIL.MarkSequencePoint(doc13, 155, 1, 155, 100)
Dim locbldr351 As LocalBuilder = ReadIL.DeclareLocal(GetType(ModuleBuilder))
locbldr351.SetLocalSymInfo("mdlbldbg")
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("MdlB"))
Typ = GetType(AsmFactory).GetField("MdlB").FieldType
ReadIL.Emit(OpCodes.Stloc, 26)
ReadIL.MarkSequencePoint(doc13, 156, 1, 156, 100)
Dim typ46(-1) As Type
ReadIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.String)
ReDim Preserve typ46(UBound(typ46) + 1)
typ46(UBound(typ46)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Path).GetMethod("GetFullPath", typ46))
Typ = GetType(Path).GetMethod("GetFullPath", typ46).ReturnType
ReadIL.Emit(OpCodes.Starg, 2)
ReadIL.MarkSequencePoint(doc13, 157, 1, 157, 100)
Dim typ47(-1) As Type
ReadIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.String)
ReDim Preserve typ47(UBound(typ47) + 1)
typ47(UBound(typ47)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ47))
Typ = GetType(Console).GetMethod("WriteLine", typ47).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 158, 1, 158, 100)
Dim typ48(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 26)
Typ = GetType(ModuleBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.String)
ReDim Preserve typ48(UBound(typ48) + 1)
typ48(UBound(typ48)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Guid).GetField("Empty"))
Typ = GetType(Guid).GetField("Empty").FieldType
ReDim Preserve typ48(UBound(typ48) + 1)
typ48(UBound(typ48)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Guid).GetField("Empty"))
Typ = GetType(Guid).GetField("Empty").FieldType
ReDim Preserve typ48(UBound(typ48) + 1)
typ48(UBound(typ48)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Guid).GetField("Empty"))
Typ = GetType(Guid).GetField("Empty").FieldType
ReDim Preserve typ48(UBound(typ48) + 1)
typ48(UBound(typ48)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineDocument", typ48))
Typ = Typ03.GetMethod("DefineDocument", typ48).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("DocWriter"))
ReadIL.MarkSequencePoint(doc13, 159, 1, 159, 100)
ReadIL.Emit(OpCodes.Br, cont365)
ReadIL.MarkLabel(fa365)
ReadIL.Emit(OpCodes.Br, cont365)
ReadIL.MarkLabel(cont365)
ReadIL.MarkSequencePoint(doc13, 162, 1, 162, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("DebugFlg"))
Typ = GetType(AsmFactory).GetField("DebugFlg").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa366 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru366 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont366 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru366)
ReadIL.Emit(OpCodes.Br, fa366)
ReadIL.MarkLabel(tru366)
ReadIL.MarkSequencePoint(doc13, 163, 1, 163, 100)
Dim locbldr352 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr352.SetLocalSymInfo("dtyp")
ReadIL.Emit(OpCodes.Ldtoken, GetType(DebuggableAttribute))
Dim typ49 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ49))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ49).ReturnType
ReadIL.Emit(OpCodes.Stloc, 27)
ReadIL.MarkSequencePoint(doc13, 164, 1, 164, 100)
Dim locbldr353 As LocalBuilder = ReadIL.DeclareLocal(GetType(DebuggableAttribute.DebuggingModes))
locbldr353.SetLocalSymInfo("debugattr")
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(256))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Or)
ReadIL.Emit(OpCodes.Stloc, 28)
ReadIL.MarkSequencePoint(doc13, 165, 1, 165, 100)
Dim locbldr354 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Object))
locbldr354.SetLocalSymInfo("oattr")
ReadIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(DebuggableAttribute.DebuggingModes)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReadIL.Emit(OpCodes.Stloc, 29)
ReadIL.MarkSequencePoint(doc13, 166, 1, 166, 100)
Dim locbldr355 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr355.SetLocalSymInfo("dattyp")
ReadIL.Emit(OpCodes.Ldtoken, GetType(DebuggableAttribute.DebuggingModes))
Dim typ50 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ50))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ50).ReturnType
ReadIL.Emit(OpCodes.Stloc, 30)
ReadIL.MarkSequencePoint(doc13, 167, 1, 167, 100)
Dim locbldr356 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type).MakeArrayType())
locbldr356.SetLocalSymInfo("tarr")
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Type))
ReadIL.Emit(OpCodes.Stloc, 31)
ReadIL.MarkSequencePoint(doc13, 168, 1, 168, 100)
ReadIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldloc, 30)
Typ = GetType(System.Type)
ReadIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc13, 169, 1, 169, 100)
Dim locbldr357 As LocalBuilder = ReadIL.DeclareLocal(GetType(ConstructorInfo))
locbldr357.SetLocalSymInfo("dctor")
Dim typ51(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 27)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ51(UBound(typ51) + 1)
typ51(UBound(typ51)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetConstructor", typ51))
Typ = Typ03.GetMethod("GetConstructor", typ51).ReturnType
ReadIL.Emit(OpCodes.Stloc, 32)
ReadIL.MarkSequencePoint(doc13, 170, 1, 170, 100)
Dim locbldr358 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Object).MakeArrayType())
locbldr358.SetLocalSymInfo("oarr")
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Object))
ReadIL.Emit(OpCodes.Stloc, 33)
ReadIL.MarkSequencePoint(doc13, 171, 1, 171, 100)
ReadIL.Emit(OpCodes.Ldloc, 33)
Typ = GetType(System.Object).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldloc, 29)
Typ = GetType(System.Object)
ReadIL.Emit(OpCodes.Stelem, GetType(System.Object).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc13, 172, 1, 172, 100)
Dim locbldr359 As LocalBuilder = ReadIL.DeclareLocal(GetType(CustomAttributeBuilder))
locbldr359.SetLocalSymInfo("dbuilder")
Dim typ52(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 32)
Typ = GetType(ConstructorInfo)
ReDim Preserve typ52(UBound(typ52) + 1)
typ52(UBound(typ52)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 33)
Typ = GetType(System.Object).MakeArrayType()
ReDim Preserve typ52(UBound(typ52) + 1)
typ52(UBound(typ52)) = Typ
ReadIL.Emit(OpCodes.Newobj, GetType(CustomAttributeBuilder).GetConstructor(typ52))
ReadIL.Emit(OpCodes.Stloc, 34)
ReadIL.MarkSequencePoint(doc13, 173, 1, 173, 100)
Dim typ53(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(AssemblyBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 34)
Typ = GetType(CustomAttributeBuilder)
ReDim Preserve typ53(UBound(typ53) + 1)
typ53(UBound(typ53)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("SetCustomAttribute", typ53))
Typ = Typ03.GetMethod("SetCustomAttribute", typ53).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 174, 1, 174, 100)
ReadIL.Emit(OpCodes.Br, cont366)
ReadIL.MarkLabel(fa366)
ReadIL.Emit(OpCodes.Br, cont366)
ReadIL.MarkLabel(cont366)
ReadIL.MarkSequencePoint(doc13, 177, 1, 177, 100)
ReadIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(System.String)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AsmFile"))
ReadIL.MarkSequencePoint(doc13, 178, 1, 178, 100)
Dim typ54(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmB"))
Typ = GetType(AsmFactory).GetField("AsmB").FieldType
ReDim Preserve typ54(UBound(typ54) + 1)
typ54(UBound(typ54)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Importer).GetMethod("AddAsm", typ54))
Typ = GetType(Importer).GetMethod("AddAsm", typ54).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 179, 1, 179, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc13, 180, 1, 180, 100)
ReadIL.Emit(OpCodes.Br, cont364)
ReadIL.MarkLabel(fa364)
ReadIL.Emit(OpCodes.Br, cont364)
ReadIL.MarkLabel(cont364)
ReadIL.MarkSequencePoint(doc13, 182, 1, 182, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(DebugStmt))
Dim typ55 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ55))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ55).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc13, 183, 1, 183, 100)
Dim typ56(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ56(UBound(typ56) + 1)
typ56(UBound(typ56)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ56))
Typ = Typ03.GetMethod("IsInstanceOfType", typ56).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc13, 185, 1, 185, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa367 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru367 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont367 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru367)
ReadIL.Emit(OpCodes.Br, fa367)
ReadIL.MarkLabel(tru367)
ReadIL.MarkSequencePoint(doc13, 186, 1, 186, 100)
Dim locbldr360 As LocalBuilder = ReadIL.DeclareLocal(GetType(DebugStmt))
locbldr360.SetLocalSymInfo("dbgs")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 35)
ReadIL.MarkSequencePoint(doc13, 187, 1, 187, 100)
ReadIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(DebugStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(DebugStmt).GetField("Flg"))
Typ = GetType(DebugStmt).GetField("Flg").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("DebugFlg"))
ReadIL.MarkSequencePoint(doc13, 188, 1, 188, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc13, 189, 1, 189, 100)
ReadIL.Emit(OpCodes.Br, cont367)
ReadIL.MarkLabel(fa367)
ReadIL.Emit(OpCodes.Br, cont367)
ReadIL.MarkLabel(cont367)
ReadIL.MarkSequencePoint(doc13, 191, 1, 191, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(ClassStmt))
Dim typ57 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ57))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ57).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc13, 192, 1, 192, 100)
Dim typ58(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ58(UBound(typ58) + 1)
typ58(UBound(typ58)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ58))
Typ = Typ03.GetMethod("IsInstanceOfType", typ58).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc13, 194, 1, 194, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa368 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru368 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont368 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru368)
ReadIL.Emit(OpCodes.Br, fa368)
ReadIL.MarkLabel(tru368)
ReadIL.MarkSequencePoint(doc13, 195, 1, 195, 100)
Dim locbldr361 As LocalBuilder = ReadIL.DeclareLocal(GetType(ClassStmt))
locbldr361.SetLocalSymInfo("clss")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 36)
ReadIL.MarkSequencePoint(doc13, 197, 1, 197, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("inClass"))
Typ = GetType(AsmFactory).GetField("inClass").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa369 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru369 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont369 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru369)
ReadIL.Emit(OpCodes.Br, fa369)
ReadIL.MarkLabel(tru369)
ReadIL.MarkSequencePoint(doc13, 198, 1, 198, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("isNested"))
ReadIL.MarkSequencePoint(doc13, 199, 1, 199, 100)
ReadIL.Emit(OpCodes.Br, cont369)
ReadIL.MarkLabel(fa369)
ReadIL.Emit(OpCodes.Br, cont369)
ReadIL.MarkLabel(cont369)
ReadIL.MarkSequencePoint(doc13, 201, 1, 201, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa370 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru370 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont370 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru370)
ReadIL.Emit(OpCodes.Br, fa370)
ReadIL.MarkLabel(tru370)
ReadIL.MarkSequencePoint(doc13, 202, 1, 202, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("inClass"))
ReadIL.MarkSequencePoint(doc13, 203, 1, 203, 100)
ReadIL.Emit(OpCodes.Br, cont370)
ReadIL.MarkLabel(fa370)
ReadIL.Emit(OpCodes.Br, cont370)
ReadIL.MarkLabel(cont370)
ReadIL.MarkSequencePoint(doc13, 205, 1, 205, 100)
Dim locbldr362 As LocalBuilder = ReadIL.DeclareLocal(GetType(Attributes.Attribute).MakeArrayType())
locbldr362.SetLocalSymInfo("attrs")
ReadIL.Emit(OpCodes.Ldloc, 36)
Typ = GetType(ClassStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(ClassStmt).GetField("Attrs"))
Typ = GetType(ClassStmt).GetField("Attrs").FieldType
ReadIL.Emit(OpCodes.Stloc, 37)
ReadIL.MarkSequencePoint(doc13, 206, 1, 206, 100)
Dim locbldr363 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeAttributes))
locbldr363.SetLocalSymInfo("ta")
Dim typ59(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 37)
Typ = GetType(Attributes.Attribute).MakeArrayType()
ReDim Preserve typ59(UBound(typ59) + 1)
typ59(UBound(typ59)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessClassAttrs", typ59))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessClassAttrs", typ59).ReturnType
ReadIL.Emit(OpCodes.Stloc, 38)
ReadIL.MarkSequencePoint(doc13, 207, 1, 207, 100)
Dim locbldr364 As LocalBuilder = ReadIL.DeclareLocal(GetType(Ident))
locbldr364.SetLocalSymInfo("clssnam")
ReadIL.Emit(OpCodes.Ldloc, 36)
Typ = GetType(ClassStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(ClassStmt).GetField("ClassName"))
Typ = GetType(ClassStmt).GetField("ClassName").FieldType
ReadIL.Emit(OpCodes.Stloc, 39)
ReadIL.MarkSequencePoint(doc13, 208, 1, 208, 100)
Dim locbldr365 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.String))
locbldr365.SetLocalSymInfo("clsnamstr")
ReadIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stloc, 40)
ReadIL.MarkSequencePoint(doc13, 209, 1, 209, 100)
Dim locbldr366 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeTok))
locbldr366.SetLocalSymInfo("inhclstok")
ReadIL.Emit(OpCodes.Ldloc, 36)
Typ = GetType(ClassStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(ClassStmt).GetField("InhClass"))
Typ = GetType(ClassStmt).GetField("InhClass").FieldType
ReadIL.Emit(OpCodes.Stloc, 41)
ReadIL.MarkSequencePoint(doc13, 210, 1, 210, 100)
Dim locbldr367 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr367.SetLocalSymInfo("inhtyp")
ReadIL.Emit(OpCodes.Ldnull)
ReadIL.Emit(OpCodes.Stloc, 42)
ReadIL.MarkSequencePoint(doc13, 211, 1, 211, 100)
Dim locbldr368 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr368.SetLocalSymInfo("reft")
ReadIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(TypeTok)
ReadIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("RefTyp"))
Typ = GetType(TypeTok).GetField("RefTyp").FieldType
ReadIL.Emit(OpCodes.Stloc, 43)
ReadIL.MarkSequencePoint(doc13, 212, 1, 212, 100)
Dim locbldr369 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Int32))
locbldr369.SetLocalSymInfo("cmp")
Dim typ60(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(TypeTok)
ReadIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("Value"))
Typ = GetType(TypeTok).GetField("Value").FieldType
ReDim Preserve typ60(UBound(typ60) + 1)
typ60(UBound(typ60)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ReDim Preserve typ60(UBound(typ60) + 1)
typ60(UBound(typ60)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ60))
Typ = GetType(String).GetMethod("Compare", typ60).ReturnType
ReadIL.Emit(OpCodes.Stloc, 44)
ReadIL.MarkSequencePoint(doc13, 214, 1, 214, 100)
ReadIL.Emit(OpCodes.Ldloc, 43)
Typ = GetType(System.Type)
ReadIL.Emit(OpCodes.Ldnull)
Dim fa371 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru371 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont371 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru371)
ReadIL.Emit(OpCodes.Br, fa371)
ReadIL.MarkLabel(tru371)
ReadIL.MarkSequencePoint(doc13, 215, 1, 215, 100)
ReadIL.Emit(OpCodes.Ldloc, 44)
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa372 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru372 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont372 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru372)
ReadIL.Emit(OpCodes.Br, fa372)
ReadIL.MarkLabel(tru372)
ReadIL.MarkSequencePoint(doc13, 216, 1, 216, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(System.Object))
Dim typ61 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ61))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ61).ReturnType
ReadIL.Emit(OpCodes.Stloc, 42)
ReadIL.MarkSequencePoint(doc13, 217, 1, 217, 100)
ReadIL.Emit(OpCodes.Br, cont372)
ReadIL.MarkLabel(fa372)
ReadIL.MarkSequencePoint(doc13, 218, 1, 218, 100)
Dim typ62(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(TypeTok)
ReDim Preserve typ62(UBound(typ62) + 1)
typ62(UBound(typ62)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ62))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ62).ReturnType
ReadIL.Emit(OpCodes.Stloc, 42)
ReadIL.MarkSequencePoint(doc13, 219, 1, 219, 100)
ReadIL.Emit(OpCodes.Br, cont372)
ReadIL.MarkLabel(cont372)
ReadIL.MarkSequencePoint(doc13, 220, 1, 220, 100)
ReadIL.Emit(OpCodes.Br, cont371)
ReadIL.MarkLabel(fa371)
ReadIL.MarkSequencePoint(doc13, 221, 1, 221, 100)
ReadIL.Emit(OpCodes.Ldloc, 43)
Typ = GetType(System.Type)
ReadIL.Emit(OpCodes.Stloc, 42)
ReadIL.MarkSequencePoint(doc13, 222, 1, 222, 100)
ReadIL.Emit(OpCodes.Br, cont371)
ReadIL.MarkLabel(cont371)
ReadIL.MarkSequencePoint(doc13, 224, 1, 224, 100)
ReadIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(System.Type)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnInhTyp"))
ReadIL.MarkSequencePoint(doc13, 227, 1, 227, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa373 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru373 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont373 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru373)
ReadIL.Emit(OpCodes.Br, fa373)
ReadIL.MarkLabel(tru373)
ReadIL.MarkSequencePoint(doc13, 228, 1, 228, 100)
Dim locbldr370 As LocalBuilder = ReadIL.DeclareLocal(GetType(ModuleBuilder))
locbldr370.SetLocalSymInfo("mdlbld")
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("MdlB"))
Typ = GetType(AsmFactory).GetField("MdlB").FieldType
ReadIL.Emit(OpCodes.Stloc, 45)
ReadIL.MarkSequencePoint(doc13, 229, 1, 229, 100)
ReadIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(System.String)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnTypName"))
ReadIL.MarkSequencePoint(doc13, 230, 1, 230, 100)
Dim typ63(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnNS"))
Typ = GetType(AsmFactory).GetField("CurnNS").FieldType
ReDim Preserve typ63(UBound(typ63) + 1)
typ63(UBound(typ63)) = Typ
ReadIL.Emit(OpCodes.Ldstr, ".")
Typ = GetType(System.String)
ReDim Preserve typ63(UBound(typ63) + 1)
typ63(UBound(typ63)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(System.String)
ReDim Preserve typ63(UBound(typ63) + 1)
typ63(UBound(typ63)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ63))
Typ = GetType(String).GetMethod("Concat", typ63).ReturnType
ReadIL.Emit(OpCodes.Stloc, 40)
ReadIL.MarkSequencePoint(doc13, 231, 1, 231, 100)
Dim typ64(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(ModuleBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(System.String)
ReDim Preserve typ64(UBound(typ64) + 1)
typ64(UBound(typ64)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(TypeAttributes)
ReDim Preserve typ64(UBound(typ64) + 1)
typ64(UBound(typ64)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(System.Type)
ReDim Preserve typ64(UBound(typ64) + 1)
typ64(UBound(typ64)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineType", typ64))
Typ = Typ03.GetMethod("DefineType", typ64).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnTypB"))
ReadIL.MarkSequencePoint(doc13, 233, 1, 233, 100)
Dim typ65(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Adding Class: ")
Typ = GetType(System.String)
ReDim Preserve typ65(UBound(typ65) + 1)
typ65(UBound(typ65)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ65))
Typ = GetType(Console).GetMethod("Write", typ65).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 234, 1, 234, 100)
Dim typ66(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(System.String)
ReDim Preserve typ66(UBound(typ66) + 1)
typ66(UBound(typ66)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ66))
Typ = GetType(Console).GetMethod("WriteLine", typ66).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 235, 1, 235, 100)
ReadIL.Emit(OpCodes.Br, cont373)
ReadIL.MarkLabel(fa373)
ReadIL.MarkSequencePoint(doc13, 236, 1, 236, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnTypB2"))
ReadIL.MarkSequencePoint(doc13, 237, 1, 237, 100)
Dim locbldr371 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeBuilder))
locbldr371.SetLocalSymInfo("ctb2")
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB2"))
Typ = GetType(AsmFactory).GetField("CurnTypB2").FieldType
ReadIL.Emit(OpCodes.Stloc, 46)
ReadIL.MarkSequencePoint(doc13, 238, 1, 238, 100)
Dim typ67(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Adding Nested Class: ")
Typ = GetType(System.String)
ReDim Preserve typ67(UBound(typ67) + 1)
typ67(UBound(typ67)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ67))
Typ = GetType(Console).GetMethod("Write", typ67).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 239, 1, 239, 100)
Dim typ68(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(System.String)
ReDim Preserve typ68(UBound(typ68) + 1)
typ68(UBound(typ68)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ68))
Typ = GetType(Console).GetMethod("WriteLine", typ68).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 240, 1, 240, 100)
ReadIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(System.String)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnTypName"))
ReadIL.MarkSequencePoint(doc13, 241, 1, 241, 100)
Dim typ69(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 46)
Typ = GetType(TypeBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(System.String)
ReDim Preserve typ69(UBound(typ69) + 1)
typ69(UBound(typ69)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(TypeAttributes)
ReDim Preserve typ69(UBound(typ69) + 1)
typ69(UBound(typ69)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(System.Type)
ReDim Preserve typ69(UBound(typ69) + 1)
typ69(UBound(typ69)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineNestedType", typ69))
Typ = Typ03.GetMethod("DefineNestedType", typ69).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnTypB"))
ReadIL.MarkSequencePoint(doc13, 242, 1, 242, 100)
ReadIL.Emit(OpCodes.Br, cont373)
ReadIL.MarkLabel(cont373)
ReadIL.MarkSequencePoint(doc13, 244, 1, 244, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc13, 245, 1, 245, 100)
ReadIL.Emit(OpCodes.Br, cont368)
ReadIL.MarkLabel(fa368)
ReadIL.Emit(OpCodes.Br, cont368)
ReadIL.MarkLabel(cont368)
ReadIL.MarkSequencePoint(doc13, 247, 1, 247, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(FieldStmt))
Dim typ70 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ70))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ70).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc13, 248, 1, 248, 100)
Dim typ71(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ71(UBound(typ71) + 1)
typ71(UBound(typ71)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ71))
Typ = Typ03.GetMethod("IsInstanceOfType", typ71).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc13, 250, 1, 250, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa374 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru374 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont374 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru374)
ReadIL.Emit(OpCodes.Br, fa374)
ReadIL.MarkLabel(tru374)
ReadIL.MarkSequencePoint(doc13, 251, 1, 251, 100)
Dim locbldr372 As LocalBuilder = ReadIL.DeclareLocal(GetType(FieldStmt))
locbldr372.SetLocalSymInfo("flss")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 47)
ReadIL.MarkSequencePoint(doc13, 253, 1, 253, 100)
Dim locbldr373 As LocalBuilder = ReadIL.DeclareLocal(GetType(Attributes.Attribute).MakeArrayType())
locbldr373.SetLocalSymInfo("fattrs")
ReadIL.Emit(OpCodes.Ldloc, 47)
Typ = GetType(FieldStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(FieldStmt).GetField("Attrs"))
Typ = GetType(FieldStmt).GetField("Attrs").FieldType
ReadIL.Emit(OpCodes.Stloc, 48)
ReadIL.MarkSequencePoint(doc13, 254, 1, 254, 100)
Dim locbldr374 As LocalBuilder = ReadIL.DeclareLocal(GetType(FieldAttributes))
locbldr374.SetLocalSymInfo("fa")
Dim typ72(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 48)
Typ = GetType(Attributes.Attribute).MakeArrayType()
ReDim Preserve typ72(UBound(typ72) + 1)
typ72(UBound(typ72)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessFieldAttrs", typ72))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessFieldAttrs", typ72).ReturnType
ReadIL.Emit(OpCodes.Stloc, 49)
ReadIL.MarkSequencePoint(doc13, 255, 1, 255, 100)
Dim locbldr375 As LocalBuilder = ReadIL.DeclareLocal(GetType(Ident))
locbldr375.SetLocalSymInfo("flssnam")
ReadIL.Emit(OpCodes.Ldloc, 47)
Typ = GetType(FieldStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(FieldStmt).GetField("FieldName"))
Typ = GetType(FieldStmt).GetField("FieldName").FieldType
ReadIL.Emit(OpCodes.Stloc, 50)
ReadIL.MarkSequencePoint(doc13, 256, 1, 256, 100)
Dim locbldr376 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.String))
locbldr376.SetLocalSymInfo("flsnamstr")
ReadIL.Emit(OpCodes.Ldloc, 50)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stloc, 51)
ReadIL.MarkSequencePoint(doc13, 257, 1, 257, 100)
Dim locbldr377 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeTok))
locbldr377.SetLocalSymInfo("ftyptok")
ReadIL.Emit(OpCodes.Ldloc, 47)
Typ = GetType(FieldStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(FieldStmt).GetField("FieldTyp"))
Typ = GetType(FieldStmt).GetField("FieldTyp").FieldType
ReadIL.Emit(OpCodes.Stloc, 52)
ReadIL.MarkSequencePoint(doc13, 258, 1, 258, 100)
Dim locbldr378 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr378.SetLocalSymInfo("ftyp")
ReadIL.Emit(OpCodes.Ldnull)
ReadIL.Emit(OpCodes.Stloc, 53)
ReadIL.MarkSequencePoint(doc13, 271, 1, 271, 100)
Dim typ73(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(TypeTok)
ReDim Preserve typ73(UBound(typ73) + 1)
typ73(UBound(typ73)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ73))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ73).ReturnType
ReadIL.Emit(OpCodes.Stloc, 53)
ReadIL.MarkSequencePoint(doc13, 273, 1, 273, 100)
Dim locbldr379 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeBuilder))
locbldr379.SetLocalSymInfo("typb2")
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
ReadIL.Emit(OpCodes.Stloc, 54)
ReadIL.MarkSequencePoint(doc13, 274, 1, 274, 100)
Dim typ74(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 54)
Typ = GetType(TypeBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 51)
Typ = GetType(System.String)
ReDim Preserve typ74(UBound(typ74) + 1)
typ74(UBound(typ74)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 53)
Typ = GetType(System.Type)
ReDim Preserve typ74(UBound(typ74) + 1)
typ74(UBound(typ74)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 49)
Typ = GetType(FieldAttributes)
ReDim Preserve typ74(UBound(typ74) + 1)
typ74(UBound(typ74)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineField", typ74))
Typ = Typ03.GetMethod("DefineField", typ74).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnFldB"))
ReadIL.MarkSequencePoint(doc13, 276, 1, 276, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa375 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru375 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont375 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru375)
ReadIL.Emit(OpCodes.Br, fa375)
ReadIL.MarkLabel(tru375)
ReadIL.MarkSequencePoint(doc13, 277, 1, 277, 100)
Dim typ75(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 51)
Typ = GetType(System.String)
ReDim Preserve typ75(UBound(typ75) + 1)
typ75(UBound(typ75)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 53)
Typ = GetType(System.Type)
ReDim Preserve typ75(UBound(typ75) + 1)
typ75(UBound(typ75)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnFldB"))
Typ = GetType(AsmFactory).GetField("CurnFldB").FieldType
ReDim Preserve typ75(UBound(typ75) + 1)
typ75(UBound(typ75)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddFld", typ75))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddFld", typ75).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 278, 1, 278, 100)
ReadIL.Emit(OpCodes.Br, cont375)
ReadIL.MarkLabel(fa375)
ReadIL.MarkSequencePoint(doc13, 279, 1, 279, 100)
Dim typ76(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 51)
Typ = GetType(System.String)
ReDim Preserve typ76(UBound(typ76) + 1)
typ76(UBound(typ76)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 53)
Typ = GetType(System.Type)
ReDim Preserve typ76(UBound(typ76) + 1)
typ76(UBound(typ76)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnFldB"))
Typ = GetType(AsmFactory).GetField("CurnFldB").FieldType
ReDim Preserve typ76(UBound(typ76) + 1)
typ76(UBound(typ76)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddNestedFld", typ76))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddNestedFld", typ76).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 280, 1, 280, 100)
ReadIL.Emit(OpCodes.Br, cont375)
ReadIL.MarkLabel(cont375)
ReadIL.MarkSequencePoint(doc13, 282, 1, 282, 100)
Dim typ77(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Adding Field: ")
Typ = GetType(System.String)
ReDim Preserve typ77(UBound(typ77) + 1)
typ77(UBound(typ77)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ77))
Typ = GetType(Console).GetMethod("Write", typ77).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 283, 1, 283, 100)
Dim typ78(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 51)
Typ = GetType(System.String)
ReDim Preserve typ78(UBound(typ78) + 1)
typ78(UBound(typ78)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ78))
Typ = GetType(Console).GetMethod("WriteLine", typ78).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 285, 1, 285, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc13, 286, 1, 286, 100)
ReadIL.Emit(OpCodes.Br, cont374)
ReadIL.MarkLabel(fa374)
ReadIL.Emit(OpCodes.Br, cont374)
ReadIL.MarkLabel(cont374)
ReadIL.MarkSequencePoint(doc13, 289, 1, 289, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(EndClassStmt))
Dim typ79 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ79))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ79).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc13, 290, 1, 290, 100)
Dim typ80(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ80(UBound(typ80) + 1)
typ80(UBound(typ80)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ80))
Typ = Typ03.GetMethod("IsInstanceOfType", typ80).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc13, 292, 1, 292, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa376 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru376 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont376 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru376)
ReadIL.Emit(OpCodes.Br, fa376)
ReadIL.MarkLabel(tru376)
ReadIL.MarkSequencePoint(doc13, 293, 1, 293, 100)
ReadIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("CreateTyp", Type.EmptyTypes))
Typ = GetType(AsmFactory).GetMethod("CreateTyp", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 294, 1, 294, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa377 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru377 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont377 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru377)
ReadIL.Emit(OpCodes.Br, fa377)
ReadIL.MarkLabel(tru377)
ReadIL.MarkSequencePoint(doc13, 295, 1, 295, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("inClass"))
ReadIL.MarkSequencePoint(doc13, 296, 1, 296, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetMet", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetMet", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 297, 1, 297, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetCtor", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetCtor", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 298, 1, 298, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetFld", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetFld", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 299, 1, 299, 100)
ReadIL.Emit(OpCodes.Br, cont377)
ReadIL.MarkLabel(fa377)
ReadIL.Emit(OpCodes.Br, cont377)
ReadIL.MarkLabel(cont377)
ReadIL.MarkSequencePoint(doc13, 300, 1, 300, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa378 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru378 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont378 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru378)
ReadIL.Emit(OpCodes.Br, fa378)
ReadIL.MarkLabel(tru378)
ReadIL.MarkSequencePoint(doc13, 301, 1, 301, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB2"))
Typ = GetType(AsmFactory).GetField("CurnTypB2").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnTypB"))
ReadIL.MarkSequencePoint(doc13, 302, 1, 302, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("isNested"))
ReadIL.MarkSequencePoint(doc13, 303, 1, 303, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetNestedMet", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetNestedMet", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 304, 1, 304, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetNestedCtor", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetNestedCtor", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 305, 1, 305, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetNestedFld", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetNestedFld", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 306, 1, 306, 100)
ReadIL.Emit(OpCodes.Br, cont378)
ReadIL.MarkLabel(fa378)
ReadIL.Emit(OpCodes.Br, cont378)
ReadIL.MarkLabel(cont378)
ReadIL.MarkSequencePoint(doc13, 307, 1, 307, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc13, 308, 1, 308, 100)
ReadIL.Emit(OpCodes.Br, cont376)
ReadIL.MarkLabel(fa376)
ReadIL.Emit(OpCodes.Br, cont376)
ReadIL.MarkLabel(cont376)
ReadIL.MarkSequencePoint(doc13, 310, 1, 310, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(MethodStmt))
Dim typ81 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ81))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ81).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc13, 311, 1, 311, 100)
Dim typ82(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ82(UBound(typ82) + 1)
typ82(UBound(typ82)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ82))
Typ = Typ03.GetMethod("IsInstanceOfType", typ82).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc13, 313, 1, 313, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa379 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru379 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont379 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru379)
ReadIL.Emit(OpCodes.Br, fa379)
ReadIL.MarkLabel(tru379)
ReadIL.MarkSequencePoint(doc13, 314, 1, 314, 100)
Dim locbldr380 As LocalBuilder = ReadIL.DeclareLocal(GetType(MethodStmt))
locbldr380.SetLocalSymInfo("mtss")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 55)
ReadIL.MarkSequencePoint(doc13, 316, 1, 316, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(ILEmitter).GetField("StaticFlg"))
ReadIL.MarkSequencePoint(doc13, 318, 1, 318, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetVar", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetVar", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 319, 1, 319, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetIf", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetIf", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 321, 1, 321, 100)
Dim locbldr381 As LocalBuilder = ReadIL.DeclareLocal(GetType(Attributes.Attribute).MakeArrayType())
locbldr381.SetLocalSymInfo("mattrs")
ReadIL.Emit(OpCodes.Ldloc, 55)
Typ = GetType(MethodStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(MethodStmt).GetField("Attrs"))
Typ = GetType(MethodStmt).GetField("Attrs").FieldType
ReadIL.Emit(OpCodes.Stloc, 56)
ReadIL.MarkSequencePoint(doc13, 322, 1, 322, 100)
Dim locbldr382 As LocalBuilder = ReadIL.DeclareLocal(GetType(MethodAttributes))
locbldr382.SetLocalSymInfo("ma")
Dim typ83(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 56)
Typ = GetType(Attributes.Attribute).MakeArrayType()
ReDim Preserve typ83(UBound(typ83) + 1)
typ83(UBound(typ83)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessMethodAttrs", typ83))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessMethodAttrs", typ83).ReturnType
ReadIL.Emit(OpCodes.Stloc, 57)
ReadIL.MarkSequencePoint(doc13, 323, 1, 323, 100)
Dim locbldr383 As LocalBuilder = ReadIL.DeclareLocal(GetType(Ident))
locbldr383.SetLocalSymInfo("mtssnam")
ReadIL.Emit(OpCodes.Ldloc, 55)
Typ = GetType(MethodStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(MethodStmt).GetField("MethodName"))
Typ = GetType(MethodStmt).GetField("MethodName").FieldType
ReadIL.Emit(OpCodes.Stloc, 58)
ReadIL.MarkSequencePoint(doc13, 324, 1, 324, 100)
Dim locbldr384 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.String))
locbldr384.SetLocalSymInfo("mtssnamstr")
ReadIL.Emit(OpCodes.Ldloc, 58)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stloc, 59)
ReadIL.MarkSequencePoint(doc13, 325, 1, 325, 100)
Dim locbldr385 As LocalBuilder = ReadIL.DeclareLocal(GetType(Expr).MakeArrayType())
locbldr385.SetLocalSymInfo("paramarr")
ReadIL.Emit(OpCodes.Ldloc, 55)
Typ = GetType(MethodStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(MethodStmt).GetField("Params"))
Typ = GetType(MethodStmt).GetField("Params").FieldType
ReadIL.Emit(OpCodes.Stloc, 60)
ReadIL.MarkSequencePoint(doc13, 326, 1, 326, 100)
Dim locbldr386 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Int32))
locbldr386.SetLocalSymInfo("paramlen")
ReadIL.Emit(OpCodes.Ldloc, 60)
Typ = GetType(Expr).MakeArrayType()
ReadIL.Emit(OpCodes.Ldlen)
ReadIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Stloc, 61)
ReadIL.MarkSequencePoint(doc13, 327, 1, 327, 100)
Dim locbldr387 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeTok))
locbldr387.SetLocalSymInfo("rettyptok")
ReadIL.Emit(OpCodes.Ldloc, 55)
Typ = GetType(MethodStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(MethodStmt).GetField("RetTyp"))
Typ = GetType(MethodStmt).GetField("RetTyp").FieldType
ReadIL.Emit(OpCodes.Stloc, 62)
ReadIL.MarkSequencePoint(doc13, 328, 1, 328, 100)
Dim locbldr388 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr388.SetLocalSymInfo("rettyp")
ReadIL.Emit(OpCodes.Ldnull)
ReadIL.Emit(OpCodes.Stloc, 63)
ReadIL.MarkSequencePoint(doc13, 345, 1, 345, 100)
Dim typ84(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 62)
Typ = GetType(TypeTok)
ReDim Preserve typ84(UBound(typ84) + 1)
typ84(UBound(typ84)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ84))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ84).ReturnType
ReadIL.Emit(OpCodes.Stloc, 63)
ReadIL.MarkSequencePoint(doc13, 347, 1, 347, 100)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Type))
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("TypArr"))
ReadIL.MarkSequencePoint(doc13, 349, 1, 349, 100)
ReadIL.Emit(OpCodes.Ldloc, 61)
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa380 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru380 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont380 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru380)
ReadIL.Emit(OpCodes.Br, fa380)
ReadIL.MarkLabel(tru380)
ReadIL.MarkSequencePoint(doc13, 350, 1, 350, 100)
ReadIL.Emit(OpCodes.Br, cont380)
ReadIL.MarkLabel(fa380)
ReadIL.MarkSequencePoint(doc13, 351, 1, 351, 100)
Dim typ85(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 60)
Typ = GetType(Expr).MakeArrayType()
ReDim Preserve typ85(UBound(typ85) + 1)
typ85(UBound(typ85)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessParams", typ85))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessParams", typ85).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 352, 1, 352, 100)
ReadIL.Emit(OpCodes.Br, cont380)
ReadIL.MarkLabel(cont380)
ReadIL.MarkSequencePoint(doc13, 355, 1, 355, 100)
Dim locbldr389 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeBuilder))
locbldr389.SetLocalSymInfo("typb")
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
ReadIL.Emit(OpCodes.Stloc, 64)
ReadIL.MarkSequencePoint(doc13, 356, 1, 356, 100)
Dim locbldr390 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Boolean))
locbldr390.SetLocalSymInfo("isconstr")
Dim typ86(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 59)
Typ = GetType(System.String)
ReDim Preserve typ86(UBound(typ86) + 1)
typ86(UBound(typ86)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "^ctor\d*$")
Typ = GetType(System.String)
ReDim Preserve typ86(UBound(typ86) + 1)
typ86(UBound(typ86)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ParseUtils).GetMethod("LikeOP", typ86))
Typ = GetType(ParseUtils).GetMethod("LikeOP", typ86).ReturnType
ReadIL.Emit(OpCodes.Stloc, 65)
ReadIL.MarkSequencePoint(doc13, 357, 1, 357, 100)
ReadIL.Emit(OpCodes.Ldloc, 65)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc13, 358, 1, 358, 100)
Dim typ87(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 59)
Typ = GetType(System.String)
ReDim Preserve typ87(UBound(typ87) + 1)
typ87(UBound(typ87)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypName"))
Typ = GetType(AsmFactory).GetField("CurnTypName").FieldType
ReDim Preserve typ87(UBound(typ87) + 1)
typ87(UBound(typ87)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ87))
Typ = GetType(String).GetMethod("Compare", typ87).ReturnType
ReadIL.Emit(OpCodes.Stloc, 44)
ReadIL.MarkSequencePoint(doc13, 359, 1, 359, 100)
ReadIL.Emit(OpCodes.Ldloc, 44)
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa381 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru381 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont381 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru381)
ReadIL.Emit(OpCodes.Br, fa381)
ReadIL.MarkLabel(tru381)
ReadIL.MarkSequencePoint(doc13, 360, 1, 360, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stloc, 65)
ReadIL.MarkSequencePoint(doc13, 361, 1, 361, 100)
ReadIL.Emit(OpCodes.Br, cont381)
ReadIL.MarkLabel(fa381)
ReadIL.Emit(OpCodes.Br, cont381)
ReadIL.MarkLabel(cont381)
ReadIL.MarkSequencePoint(doc13, 362, 1, 362, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldloc, 65)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Or)
ReadIL.Emit(OpCodes.Stloc, 65)
ReadIL.MarkSequencePoint(doc13, 363, 1, 363, 100)
ReadIL.Emit(OpCodes.Ldloc, 65)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa382 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru382 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont382 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru382)
ReadIL.Emit(OpCodes.Br, fa382)
ReadIL.MarkLabel(tru382)
ReadIL.MarkSequencePoint(doc13, 364, 1, 364, 100)
Dim typ88(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 64)
Typ = GetType(TypeBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 59)
Typ = GetType(System.String)
ReDim Preserve typ88(UBound(typ88) + 1)
typ88(UBound(typ88)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 57)
Typ = GetType(MethodAttributes)
ReDim Preserve typ88(UBound(typ88) + 1)
typ88(UBound(typ88)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 63)
Typ = GetType(System.Type)
ReDim Preserve typ88(UBound(typ88) + 1)
typ88(UBound(typ88)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ReDim Preserve typ88(UBound(typ88) + 1)
typ88(UBound(typ88)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineMethod", typ88))
Typ = Typ03.GetMethod("DefineMethod", typ88).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnMetB"))
ReadIL.MarkSequencePoint(doc13, 365, 1, 365, 100)
ReadIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("InitMtd", Type.EmptyTypes))
Typ = GetType(AsmFactory).GetMethod("InitMtd", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 366, 1, 366, 100)
Dim typ89(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Adding Method: ")
Typ = GetType(System.String)
ReDim Preserve typ89(UBound(typ89) + 1)
typ89(UBound(typ89)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ89))
Typ = GetType(Console).GetMethod("Write", typ89).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 367, 1, 367, 100)
Dim typ90(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 59)
Typ = GetType(System.String)
ReDim Preserve typ90(UBound(typ90) + 1)
typ90(UBound(typ90)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ90))
Typ = GetType(Console).GetMethod("WriteLine", typ90).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 369, 1, 369, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa383 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru383 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont383 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru383)
ReadIL.Emit(OpCodes.Br, fa383)
ReadIL.MarkLabel(tru383)
ReadIL.MarkSequencePoint(doc13, 370, 1, 370, 100)
Dim typ91(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 59)
Typ = GetType(System.String)
ReDim Preserve typ91(UBound(typ91) + 1)
typ91(UBound(typ91)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 63)
Typ = GetType(System.Type)
ReDim Preserve typ91(UBound(typ91) + 1)
typ91(UBound(typ91)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ReDim Preserve typ91(UBound(typ91) + 1)
typ91(UBound(typ91)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnMetB"))
Typ = GetType(AsmFactory).GetField("CurnMetB").FieldType
ReDim Preserve typ91(UBound(typ91) + 1)
typ91(UBound(typ91)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddMet", typ91))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddMet", typ91).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 371, 1, 371, 100)
ReadIL.Emit(OpCodes.Br, cont383)
ReadIL.MarkLabel(fa383)
ReadIL.MarkSequencePoint(doc13, 372, 1, 372, 100)
Dim typ92(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 59)
Typ = GetType(System.String)
ReDim Preserve typ92(UBound(typ92) + 1)
typ92(UBound(typ92)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 63)
Typ = GetType(System.Type)
ReDim Preserve typ92(UBound(typ92) + 1)
typ92(UBound(typ92)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ReDim Preserve typ92(UBound(typ92) + 1)
typ92(UBound(typ92)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnMetB"))
Typ = GetType(AsmFactory).GetField("CurnMetB").FieldType
ReDim Preserve typ92(UBound(typ92) + 1)
typ92(UBound(typ92)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddNestedMet", typ92))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddNestedMet", typ92).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 373, 1, 373, 100)
ReadIL.Emit(OpCodes.Br, cont383)
ReadIL.MarkLabel(cont383)
ReadIL.MarkSequencePoint(doc13, 375, 1, 375, 100)
ReadIL.Emit(OpCodes.Br, cont382)
ReadIL.MarkLabel(fa382)
ReadIL.MarkSequencePoint(doc13, 376, 1, 376, 100)
Dim locbldr391 As LocalBuilder = ReadIL.DeclareLocal(GetType(CallingConventions))
locbldr391.SetLocalSymInfo("stdcallconv")
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Stloc, 66)
ReadIL.MarkSequencePoint(doc13, 377, 1, 377, 100)
Dim typ93(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 64)
Typ = GetType(TypeBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 57)
Typ = GetType(MethodAttributes)
ReDim Preserve typ93(UBound(typ93) + 1)
typ93(UBound(typ93)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 66)
Typ = GetType(CallingConventions)
ReDim Preserve typ93(UBound(typ93) + 1)
typ93(UBound(typ93)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ReDim Preserve typ93(UBound(typ93) + 1)
typ93(UBound(typ93)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineConstructor", typ93))
Typ = Typ03.GetMethod("DefineConstructor", typ93).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnConB"))
ReadIL.MarkSequencePoint(doc13, 378, 1, 378, 100)
ReadIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("InitConstr", Type.EmptyTypes))
Typ = GetType(AsmFactory).GetMethod("InitConstr", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 380, 1, 380, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa384 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru384 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont384 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru384)
ReadIL.Emit(OpCodes.Br, fa384)
ReadIL.MarkLabel(tru384)
ReadIL.MarkSequencePoint(doc13, 381, 1, 381, 100)
Dim typ94(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ReDim Preserve typ94(UBound(typ94) + 1)
typ94(UBound(typ94)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnConB"))
Typ = GetType(AsmFactory).GetField("CurnConB").FieldType
ReDim Preserve typ94(UBound(typ94) + 1)
typ94(UBound(typ94)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddCtor", typ94))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddCtor", typ94).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 382, 1, 382, 100)
ReadIL.Emit(OpCodes.Br, cont384)
ReadIL.MarkLabel(fa384)
ReadIL.MarkSequencePoint(doc13, 383, 1, 383, 100)
Dim typ95(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ReDim Preserve typ95(UBound(typ95) + 1)
typ95(UBound(typ95)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnConB"))
Typ = GetType(AsmFactory).GetField("CurnConB").FieldType
ReDim Preserve typ95(UBound(typ95) + 1)
typ95(UBound(typ95)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddNestedCtor", typ95))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddNestedCtor", typ95).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 384, 1, 384, 100)
ReadIL.Emit(OpCodes.Br, cont384)
ReadIL.MarkLabel(cont384)
ReadIL.MarkSequencePoint(doc13, 387, 1, 387, 100)
Dim typ96(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Adding Constructor: ")
Typ = GetType(System.String)
ReDim Preserve typ96(UBound(typ96) + 1)
typ96(UBound(typ96)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ96))
Typ = GetType(Console).GetMethod("Write", typ96).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 388, 1, 388, 100)
Dim typ97(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 59)
Typ = GetType(System.String)
ReDim Preserve typ97(UBound(typ97) + 1)
typ97(UBound(typ97)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ97))
Typ = GetType(Console).GetMethod("WriteLine", typ97).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 389, 1, 389, 100)
ReadIL.Emit(OpCodes.Br, cont382)
ReadIL.MarkLabel(cont382)
ReadIL.MarkSequencePoint(doc13, 392, 1, 392, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("InMethodFlg"))
ReadIL.MarkSequencePoint(doc13, 393, 1, 393, 100)
ReadIL.Emit(OpCodes.Ldloc, 59)
Typ = GetType(System.String)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnMetName"))
ReadIL.MarkSequencePoint(doc13, 395, 1, 395, 100)
ReadIL.Emit(OpCodes.Ldloc, 61)
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa385 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru385 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont385 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru385)
ReadIL.Emit(OpCodes.Br, fa385)
ReadIL.MarkLabel(tru385)
ReadIL.MarkSequencePoint(doc13, 396, 1, 396, 100)
ReadIL.Emit(OpCodes.Br, cont385)
ReadIL.MarkLabel(fa385)
ReadIL.MarkSequencePoint(doc13, 397, 1, 397, 100)
ReadIL.Emit(OpCodes.Ldloc, 65)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa386 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru386 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont386 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru386)
ReadIL.Emit(OpCodes.Br, fa386)
ReadIL.MarkLabel(tru386)
ReadIL.MarkSequencePoint(doc13, 398, 1, 398, 100)
Dim typ98(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 60)
Typ = GetType(Expr).MakeArrayType()
ReDim Preserve typ98(UBound(typ98) + 1)
typ98(UBound(typ98)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("PostProcessParams", typ98))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("PostProcessParams", typ98).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 399, 1, 399, 100)
ReadIL.Emit(OpCodes.Br, cont386)
ReadIL.MarkLabel(fa386)
ReadIL.MarkSequencePoint(doc13, 400, 1, 400, 100)
Dim typ99(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 60)
Typ = GetType(Expr).MakeArrayType()
ReDim Preserve typ99(UBound(typ99) + 1)
typ99(UBound(typ99)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("PostProcessParamsConstr", typ99))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("PostProcessParamsConstr", typ99).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 401, 1, 401, 100)
ReadIL.Emit(OpCodes.Br, cont386)
ReadIL.MarkLabel(cont386)
ReadIL.MarkSequencePoint(doc13, 402, 1, 402, 100)
ReadIL.Emit(OpCodes.Br, cont385)
ReadIL.MarkLabel(cont385)
ReadIL.MarkSequencePoint(doc13, 404, 1, 404, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc13, 405, 1, 405, 100)
ReadIL.Emit(OpCodes.Br, cont379)
ReadIL.MarkLabel(fa379)
ReadIL.Emit(OpCodes.Br, cont379)
ReadIL.MarkLabel(cont379)
ReadIL.MarkSequencePoint(doc13, 407, 1, 407, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(EndMethodStmt))
Dim typ100 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ100))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ100).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc13, 408, 1, 408, 100)
Dim typ101(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ101(UBound(typ101) + 1)
typ101(UBound(typ101)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ101))
Typ = Typ03.GetMethod("IsInstanceOfType", typ101).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc13, 410, 1, 410, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa387 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru387 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont387 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru387)
ReadIL.Emit(OpCodes.Br, fa387)
ReadIL.MarkLabel(tru387)
ReadIL.MarkSequencePoint(doc13, 411, 1, 411, 100)
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitRet", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitRet", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 412, 1, 412, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("InMethodFlg"))
ReadIL.MarkSequencePoint(doc13, 413, 1, 413, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmB"))
Typ = GetType(AsmFactory).GetField("AsmB").FieldType
ReadIL.Emit(OpCodes.Stloc, 25)
ReadIL.MarkSequencePoint(doc13, 414, 1, 414, 100)
Dim locbldr392 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Int32))
locbldr392.SetLocalSymInfo("mnamcomp")
Dim typ102(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnMetName"))
Typ = GetType(AsmFactory).GetField("CurnMetName").FieldType
ReDim Preserve typ102(UBound(typ102) + 1)
typ102(UBound(typ102)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "main")
Typ = GetType(System.String)
ReDim Preserve typ102(UBound(typ102) + 1)
typ102(UBound(typ102)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ102))
Typ = GetType(String).GetMethod("Compare", typ102).ReturnType
ReadIL.Emit(OpCodes.Stloc, 67)
ReadIL.MarkSequencePoint(doc13, 415, 1, 415, 100)
Dim locbldr393 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Int32))
locbldr393.SetLocalSymInfo("amodecomp")
Dim typ103(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmMode"))
Typ = GetType(AsmFactory).GetField("AsmMode").FieldType
ReDim Preserve typ103(UBound(typ103) + 1)
typ103(UBound(typ103)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "exe")
Typ = GetType(System.String)
ReDim Preserve typ103(UBound(typ103) + 1)
typ103(UBound(typ103)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ103))
Typ = GetType(String).GetMethod("Compare", typ103).ReturnType
ReadIL.Emit(OpCodes.Stloc, 68)
ReadIL.MarkSequencePoint(doc13, 416, 1, 416, 100)
ReadIL.Emit(OpCodes.Ldloc, 67)
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa388 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru388 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont388 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru388)
ReadIL.Emit(OpCodes.Br, fa388)
ReadIL.MarkLabel(tru388)
ReadIL.MarkSequencePoint(doc13, 417, 1, 417, 100)
ReadIL.Emit(OpCodes.Ldloc, 68)
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa389 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru389 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont389 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru389)
ReadIL.Emit(OpCodes.Br, fa389)
ReadIL.MarkLabel(tru389)
ReadIL.MarkSequencePoint(doc13, 418, 1, 418, 100)
Dim typ104(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(AssemblyBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("Met"))
Typ = GetType(ILEmitter).GetField("Met").FieldType
ReDim Preserve typ104(UBound(typ104) + 1)
typ104(UBound(typ104)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("SetEntryPoint", typ104))
Typ = Typ03.GetMethod("SetEntryPoint", typ104).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 419, 1, 419, 100)
ReadIL.Emit(OpCodes.Br, cont389)
ReadIL.MarkLabel(fa389)
ReadIL.Emit(OpCodes.Br, cont389)
ReadIL.MarkLabel(cont389)
ReadIL.MarkSequencePoint(doc13, 420, 1, 420, 100)
ReadIL.Emit(OpCodes.Br, cont388)
ReadIL.MarkLabel(fa388)
ReadIL.Emit(OpCodes.Br, cont388)
ReadIL.MarkLabel(cont388)
ReadIL.MarkSequencePoint(doc13, 421, 1, 421, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc13, 422, 1, 422, 100)
ReadIL.Emit(OpCodes.Br, cont387)
ReadIL.MarkLabel(fa387)
ReadIL.Emit(OpCodes.Br, cont387)
ReadIL.MarkLabel(cont387)
ReadIL.MarkSequencePoint(doc13, 424, 1, 424, 100)
Dim locbldr394 As LocalBuilder = ReadIL.DeclareLocal(GetType(Ident))
locbldr394.SetLocalSymInfo("vnam")
ReadIL.MarkSequencePoint(doc13, 425, 1, 425, 100)
Dim locbldr395 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeTok))
locbldr395.SetLocalSymInfo("vtyptok")
ReadIL.MarkSequencePoint(doc13, 426, 1, 426, 100)
Dim locbldr396 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr396.SetLocalSymInfo("vtyp")
ReadIL.Emit(OpCodes.Ldnull)
ReadIL.Emit(OpCodes.Stloc, 71)
ReadIL.MarkSequencePoint(doc13, 427, 1, 427, 100)
Dim locbldr397 As LocalBuilder = ReadIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator"))
locbldr397.SetLocalSymInfo("eval")
ReadIL.Emit(OpCodes.Ldnull)
ReadIL.Emit(OpCodes.Stloc, 72)
ReadIL.MarkSequencePoint(doc13, 430, 1, 430, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(ReturnStmt))
Dim typ105 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ105))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ105).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc13, 431, 1, 431, 100)
Dim typ106(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ106(UBound(typ106) + 1)
typ106(UBound(typ106)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ106))
Typ = Typ03.GetMethod("IsInstanceOfType", typ106).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc13, 433, 1, 433, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa390 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru390 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont390 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru390)
ReadIL.Emit(OpCodes.Br, fa390)
ReadIL.MarkLabel(tru390)
ReadIL.MarkSequencePoint(doc13, 435, 1, 435, 100)
Dim locbldr398 As LocalBuilder = ReadIL.DeclareLocal(GetType(ReturnStmt))
locbldr398.SetLocalSymInfo("retstmt")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 73)
ReadIL.MarkSequencePoint(doc13, 437, 1, 437, 100)
ReadIL.Emit(OpCodes.Ldloc, 73)
Typ = GetType(ReturnStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(ReturnStmt).GetField("RExp"))
Typ = GetType(ReturnStmt).GetField("RExp").FieldType
ReadIL.Emit(OpCodes.Ldnull)
Dim fa391 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru391 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont391 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, fa391)
ReadIL.Emit(OpCodes.Br, tru391)
ReadIL.MarkLabel(tru391)
ReadIL.MarkSequencePoint(doc13, 438, 1, 438, 100)
ReadIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator").GetConstructor(Type.EmptyTypes))
ReadIL.Emit(OpCodes.Stloc, 72)
ReadIL.MarkSequencePoint(doc13, 439, 1, 439, 100)
Dim typ107(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 72)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator")
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 73)
Typ = GetType(ReturnStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(ReturnStmt).GetField("RExp"))
Typ = GetType(ReturnStmt).GetField("RExp").FieldType
ReDim Preserve typ107(UBound(typ107) + 1)
typ107(UBound(typ107)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Evaluate", typ107))
Typ = Typ03.GetMethod("Evaluate", typ107).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 440, 1, 440, 100)
ReadIL.Emit(OpCodes.Br, cont391)
ReadIL.MarkLabel(fa391)
ReadIL.Emit(OpCodes.Br, cont391)
ReadIL.MarkLabel(cont391)
ReadIL.MarkSequencePoint(doc13, 442, 1, 442, 100)
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitRet", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitRet", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 444, 1, 444, 100)
ReadIL.Emit(OpCodes.Br, cont390)
ReadIL.MarkLabel(fa390)
ReadIL.Emit(OpCodes.Br, cont390)
ReadIL.MarkLabel(cont390)
ReadIL.MarkSequencePoint(doc13, 446, 1, 446, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(VarStmt))
Dim typ108 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ108))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ108).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc13, 447, 1, 447, 100)
Dim typ109(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ109(UBound(typ109) + 1)
typ109(UBound(typ109)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ109))
Typ = Typ03.GetMethod("IsInstanceOfType", typ109).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc13, 449, 1, 449, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa392 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru392 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont392 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru392)
ReadIL.Emit(OpCodes.Br, fa392)
ReadIL.MarkLabel(tru392)
ReadIL.MarkSequencePoint(doc13, 450, 1, 450, 100)
Dim locbldr399 As LocalBuilder = ReadIL.DeclareLocal(GetType(VarStmt))
locbldr399.SetLocalSymInfo("curv")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 74)
ReadIL.MarkSequencePoint(doc13, 451, 1, 451, 100)
ReadIL.Emit(OpCodes.Ldloc, 74)
Typ = GetType(VarStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(VarStmt).GetField("VarName"))
Typ = GetType(VarStmt).GetField("VarName").FieldType
ReadIL.Emit(OpCodes.Stloc, 69)
ReadIL.MarkSequencePoint(doc13, 453, 1, 453, 100)
ReadIL.Emit(OpCodes.Ldloc, 74)
Typ = GetType(VarStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(VarStmt).GetField("VarTyp"))
Typ = GetType(VarStmt).GetField("VarTyp").FieldType
ReadIL.Emit(OpCodes.Stloc, 70)
ReadIL.MarkSequencePoint(doc13, 466, 1, 466, 100)
Dim typ110(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 70)
Typ = GetType(TypeTok)
ReDim Preserve typ110(UBound(typ110) + 1)
typ110(UBound(typ110)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ110))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ110).ReturnType
ReadIL.Emit(OpCodes.Stloc, 71)
ReadIL.MarkSequencePoint(doc13, 468, 1, 468, 100)
Dim typ111(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 69)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ111(UBound(typ111) + 1)
typ111(UBound(typ111)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 71)
Typ = GetType(System.Type)
ReDim Preserve typ111(UBound(typ111) + 1)
typ111(UBound(typ111)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("DeclVar", typ111))
Typ = GetType(ILEmitter).GetMethod("DeclVar", typ111).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 469, 1, 469, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("LocInd"))
Typ = GetType(ILEmitter).GetField("LocInd").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Add)
ReadIL.Emit(OpCodes.Stsfld, GetType(ILEmitter).GetField("LocInd"))
ReadIL.MarkSequencePoint(doc13, 470, 1, 470, 100)
Dim typ112(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 69)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ112(UBound(typ112) + 1)
typ112(UBound(typ112)) = Typ
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ112(UBound(typ112) + 1)
typ112(UBound(typ112)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("LocInd"))
Typ = GetType(ILEmitter).GetField("LocInd").FieldType
ReDim Preserve typ112(UBound(typ112) + 1)
typ112(UBound(typ112)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 71)
Typ = GetType(System.Type)
ReDim Preserve typ112(UBound(typ112) + 1)
typ112(UBound(typ112)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddVar", typ112))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddVar", typ112).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 472, 1, 472, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc13, 473, 1, 473, 100)
ReadIL.Emit(OpCodes.Br, cont392)
ReadIL.MarkLabel(fa392)
ReadIL.Emit(OpCodes.Br, cont392)
ReadIL.MarkLabel(cont392)
ReadIL.MarkSequencePoint(doc13, 475, 1, 475, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(VarAsgnStmt))
Dim typ113 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ113))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ113).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc13, 476, 1, 476, 100)
Dim typ114(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ114(UBound(typ114) + 1)
typ114(UBound(typ114)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ114))
Typ = Typ03.GetMethod("IsInstanceOfType", typ114).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc13, 478, 1, 478, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa393 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru393 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont393 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru393)
ReadIL.Emit(OpCodes.Br, fa393)
ReadIL.MarkLabel(tru393)
ReadIL.MarkSequencePoint(doc13, 479, 1, 479, 100)
Dim locbldr400 As LocalBuilder = ReadIL.DeclareLocal(GetType(VarAsgnStmt))
locbldr400.SetLocalSymInfo("curva")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 75)
ReadIL.MarkSequencePoint(doc13, 480, 1, 480, 100)
ReadIL.Emit(OpCodes.Ldloc, 75)
Typ = GetType(VarAsgnStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(VarAsgnStmt).GetField("VarName"))
Typ = GetType(VarAsgnStmt).GetField("VarName").FieldType
ReadIL.Emit(OpCodes.Stloc, 69)
ReadIL.MarkSequencePoint(doc13, 482, 1, 482, 100)
ReadIL.Emit(OpCodes.Ldloc, 75)
Typ = GetType(VarAsgnStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(VarAsgnStmt).GetField("VarTyp"))
Typ = GetType(VarAsgnStmt).GetField("VarTyp").FieldType
ReadIL.Emit(OpCodes.Stloc, 70)
ReadIL.MarkSequencePoint(doc13, 495, 1, 495, 100)
Dim typ115(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 70)
Typ = GetType(TypeTok)
ReDim Preserve typ115(UBound(typ115) + 1)
typ115(UBound(typ115)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ115))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ115).ReturnType
ReadIL.Emit(OpCodes.Stloc, 71)
ReadIL.MarkSequencePoint(doc13, 497, 1, 497, 100)
Dim typ116(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 69)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ116(UBound(typ116) + 1)
typ116(UBound(typ116)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 71)
Typ = GetType(System.Type)
ReDim Preserve typ116(UBound(typ116) + 1)
typ116(UBound(typ116)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("DeclVar", typ116))
Typ = GetType(ILEmitter).GetMethod("DeclVar", typ116).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 498, 1, 498, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("LocInd"))
Typ = GetType(ILEmitter).GetField("LocInd").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Add)
ReadIL.Emit(OpCodes.Stsfld, GetType(ILEmitter).GetField("LocInd"))
ReadIL.MarkSequencePoint(doc13, 499, 1, 499, 100)
Dim typ117(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 69)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ117(UBound(typ117) + 1)
typ117(UBound(typ117)) = Typ
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ117(UBound(typ117) + 1)
typ117(UBound(typ117)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("LocInd"))
Typ = GetType(ILEmitter).GetField("LocInd").FieldType
ReDim Preserve typ117(UBound(typ117) + 1)
typ117(UBound(typ117)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 71)
Typ = GetType(System.Type)
ReDim Preserve typ117(UBound(typ117) + 1)
typ117(UBound(typ117)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddVar", typ117))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddVar", typ117).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 500, 1, 500, 100)
ReadIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator").GetConstructor(Type.EmptyTypes))
ReadIL.Emit(OpCodes.Stloc, 72)
ReadIL.MarkSequencePoint(doc13, 501, 1, 501, 100)
Dim typ118(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 72)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator")
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 69)
Typ = GetType(Ident)
ReDim Preserve typ118(UBound(typ118) + 1)
typ118(UBound(typ118)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 75)
Typ = GetType(VarAsgnStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(VarAsgnStmt).GetField("RExpr"))
Typ = GetType(VarAsgnStmt).GetField("RExpr").FieldType
ReDim Preserve typ118(UBound(typ118) + 1)
typ118(UBound(typ118)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("StoreEmit", typ118))
Typ = Typ03.GetMethod("StoreEmit", typ118).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 503, 1, 503, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc13, 504, 1, 504, 100)
ReadIL.Emit(OpCodes.Br, cont393)
ReadIL.MarkLabel(fa393)
ReadIL.Emit(OpCodes.Br, cont393)
ReadIL.MarkLabel(cont393)
ReadIL.MarkSequencePoint(doc13, 506, 1, 506, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(AssignStmt))
Dim typ119 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ119))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ119).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc13, 507, 1, 507, 100)
Dim typ120(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ120(UBound(typ120) + 1)
typ120(UBound(typ120)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ120))
Typ = Typ03.GetMethod("IsInstanceOfType", typ120).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc13, 509, 1, 509, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa394 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru394 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont394 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru394)
ReadIL.Emit(OpCodes.Br, fa394)
ReadIL.MarkLabel(tru394)
ReadIL.MarkSequencePoint(doc13, 510, 1, 510, 100)
Dim locbldr401 As LocalBuilder = ReadIL.DeclareLocal(GetType(AssignStmt))
locbldr401.SetLocalSymInfo("asgnstm")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 76)
ReadIL.MarkSequencePoint(doc13, 511, 1, 511, 100)
ReadIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator").GetConstructor(Type.EmptyTypes))
ReadIL.Emit(OpCodes.Stloc, 72)
ReadIL.MarkSequencePoint(doc13, 512, 1, 512, 100)
Dim locbldr402 As LocalBuilder = ReadIL.DeclareLocal(GetType(Expr))
locbldr402.SetLocalSymInfo("asgnstmle")
ReadIL.Emit(OpCodes.Ldloc, 76)
Typ = GetType(AssignStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(AssignStmt).GetField("LExp"))
Typ = GetType(AssignStmt).GetField("LExp").FieldType
ReadIL.Emit(OpCodes.Stloc, 77)
ReadIL.MarkSequencePoint(doc13, 513, 1, 513, 100)
Dim locbldr403 As LocalBuilder = ReadIL.DeclareLocal(GetType(Token))
locbldr403.SetLocalSymInfo("asgnstmletok")
ReadIL.Emit(OpCodes.Ldloc, 77)
Typ = GetType(Expr)
ReadIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ReadIL.Emit(OpCodes.Stloc, 78)
ReadIL.MarkSequencePoint(doc13, 517, 1, 517, 100)
Dim typ121(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 72)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator")
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 78)
Typ = GetType(Token)
ReDim Preserve typ121(UBound(typ121) + 1)
typ121(UBound(typ121)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 76)
Typ = GetType(AssignStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(AssignStmt).GetField("RExp"))
Typ = GetType(AssignStmt).GetField("RExp").FieldType
ReDim Preserve typ121(UBound(typ121) + 1)
typ121(UBound(typ121)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("StoreEmit", typ121))
Typ = Typ03.GetMethod("StoreEmit", typ121).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 518, 1, 518, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc13, 519, 1, 519, 100)
ReadIL.Emit(OpCodes.Br, cont394)
ReadIL.MarkLabel(fa394)
ReadIL.Emit(OpCodes.Br, cont394)
ReadIL.MarkLabel(cont394)
ReadIL.MarkSequencePoint(doc13, 521, 1, 521, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(MethodCallStmt))
Dim typ122 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ122))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ122).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc13, 522, 1, 522, 100)
Dim typ123(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ123(UBound(typ123) + 1)
typ123(UBound(typ123)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ123))
Typ = Typ03.GetMethod("IsInstanceOfType", typ123).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc13, 524, 1, 524, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa395 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru395 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont395 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru395)
ReadIL.Emit(OpCodes.Br, fa395)
ReadIL.MarkLabel(tru395)
ReadIL.MarkSequencePoint(doc13, 525, 1, 525, 100)
Dim locbldr404 As LocalBuilder = ReadIL.DeclareLocal(GetType(MethodCallStmt))
locbldr404.SetLocalSymInfo("mcstmt")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 79)
ReadIL.MarkSequencePoint(doc13, 526, 1, 526, 100)
Dim locbldr405 As LocalBuilder = ReadIL.DeclareLocal(GetType(Expr))
locbldr405.SetLocalSymInfo("mcstmtexp")
ReadIL.Emit(OpCodes.Newobj, GetType(Expr).GetConstructor(Type.EmptyTypes))
ReadIL.Emit(OpCodes.Stloc, 80)
ReadIL.MarkSequencePoint(doc13, 527, 1, 527, 100)
Dim locbldr406 As LocalBuilder = ReadIL.DeclareLocal(GetType(MethodCallTok))
locbldr406.SetLocalSymInfo("mcstmttok")
ReadIL.Emit(OpCodes.Ldloc, 79)
Typ = GetType(MethodCallStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(MethodCallStmt).GetField("MethodToken"))
Typ = GetType(MethodCallStmt).GetField("MethodToken").FieldType
ReadIL.Emit(OpCodes.Stloc, 81)
ReadIL.MarkSequencePoint(doc13, 528, 1, 528, 100)
ReadIL.Emit(OpCodes.Ldloc, 81)
Typ = GetType(MethodCallTok)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stfld, GetType(MethodCallTok).GetField("PopFlg"))
ReadIL.MarkSequencePoint(doc13, 529, 1, 529, 100)
Dim typ124(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 80)
Typ = GetType(Expr)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 81)
Typ = GetType(MethodCallTok)
ReDim Preserve typ124(UBound(typ124) + 1)
typ124(UBound(typ124)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ124))
Typ = Typ03.GetMethod("AddToken", typ124).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 530, 1, 530, 100)
ReadIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator").GetConstructor(Type.EmptyTypes))
ReadIL.Emit(OpCodes.Stloc, 72)
ReadIL.MarkSequencePoint(doc13, 531, 1, 531, 100)
Dim typ125(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 72)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator")
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 80)
Typ = GetType(Expr)
ReDim Preserve typ125(UBound(typ125) + 1)
typ125(UBound(typ125)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Evaluate", typ125))
Typ = Typ03.GetMethod("Evaluate", typ125).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 532, 1, 532, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc13, 533, 1, 533, 100)
ReadIL.Emit(OpCodes.Br, cont395)
ReadIL.MarkLabel(fa395)
ReadIL.Emit(OpCodes.Br, cont395)
ReadIL.MarkLabel(cont395)
ReadIL.MarkSequencePoint(doc13, 535, 1, 535, 100)
Dim locbldr407 As LocalBuilder = ReadIL.DeclareLocal(GetType(Emit.Label))
locbldr407.SetLocalSymInfo("ifendl")
ReadIL.MarkSequencePoint(doc13, 536, 1, 536, 100)
Dim locbldr408 As LocalBuilder = ReadIL.DeclareLocal(GetType(Emit.Label))
locbldr408.SetLocalSymInfo("ifnbl")
ReadIL.MarkSequencePoint(doc13, 538, 1, 538, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(IfStmt))
Dim typ126 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ126))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ126).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc13, 539, 1, 539, 100)
Dim typ127(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ127(UBound(typ127) + 1)
typ127(UBound(typ127)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ127))
Typ = Typ03.GetMethod("IsInstanceOfType", typ127).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc13, 541, 1, 541, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa396 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru396 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont396 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru396)
ReadIL.Emit(OpCodes.Br, fa396)
ReadIL.MarkLabel(tru396)
ReadIL.MarkSequencePoint(doc13, 542, 1, 542, 100)
Dim locbldr409 As LocalBuilder = ReadIL.DeclareLocal(GetType(IfStmt))
locbldr409.SetLocalSymInfo("ifstm")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 84)
ReadIL.MarkSequencePoint(doc13, 543, 1, 543, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddIf", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddIf", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 544, 1, 544, 100)
Dim locbldr410 As LocalBuilder = ReadIL.DeclareLocal(GetType(Expr))
locbldr410.SetLocalSymInfo("ifexp")
ReadIL.Emit(OpCodes.Ldloc, 84)
Typ = GetType(IfStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(IfStmt).GetField("Exp"))
Typ = GetType(IfStmt).GetField("Exp").FieldType
ReadIL.Emit(OpCodes.Stloc, 85)
ReadIL.MarkSequencePoint(doc13, 545, 1, 545, 100)
ReadIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator").GetConstructor(Type.EmptyTypes))
ReadIL.Emit(OpCodes.Stloc, 72)
ReadIL.MarkSequencePoint(doc13, 546, 1, 546, 100)
Dim typ128(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 72)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator")
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 85)
Typ = GetType(Expr)
ReDim Preserve typ128(UBound(typ128) + 1)
typ128(UBound(typ128)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Evaluate", typ128))
Typ = Typ03.GetMethod("Evaluate", typ128).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 548, 1, 548, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfNxtBlkLbl", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfNxtBlkLbl", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 83)
ReadIL.MarkSequencePoint(doc13, 549, 1, 549, 100)
Dim typ129(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 83)
Typ = GetType(Emit.Label)
ReDim Preserve typ129(UBound(typ129) + 1)
typ129(UBound(typ129)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitBrfalse", typ129))
Typ = GetType(ILEmitter).GetMethod("EmitBrfalse", typ129).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 551, 1, 551, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc13, 552, 1, 552, 100)
ReadIL.Emit(OpCodes.Br, cont396)
ReadIL.MarkLabel(fa396)
ReadIL.Emit(OpCodes.Br, cont396)
ReadIL.MarkLabel(cont396)
ReadIL.MarkSequencePoint(doc13, 554, 1, 554, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(ElseIfStmt))
Dim typ130 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ130))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ130).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc13, 555, 1, 555, 100)
Dim typ131(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ131(UBound(typ131) + 1)
typ131(UBound(typ131)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ131))
Typ = Typ03.GetMethod("IsInstanceOfType", typ131).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc13, 557, 1, 557, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa397 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru397 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont397 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru397)
ReadIL.Emit(OpCodes.Br, fa397)
ReadIL.MarkLabel(tru397)
ReadIL.MarkSequencePoint(doc13, 559, 1, 559, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfEndLbl", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfEndLbl", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 82)
ReadIL.MarkSequencePoint(doc13, 560, 1, 560, 100)
Dim typ132(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 82)
Typ = GetType(Emit.Label)
ReDim Preserve typ132(UBound(typ132) + 1)
typ132(UBound(typ132)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitBr", typ132))
Typ = GetType(ILEmitter).GetMethod("EmitBr", typ132).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 561, 1, 561, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfNxtBlkLbl", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfNxtBlkLbl", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 83)
ReadIL.MarkSequencePoint(doc13, 562, 1, 562, 100)
Dim typ133(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 83)
Typ = GetType(Emit.Label)
ReDim Preserve typ133(UBound(typ133) + 1)
typ133(UBound(typ133)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("MarkLbl", typ133))
Typ = GetType(ILEmitter).GetMethod("MarkLbl", typ133).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 563, 1, 563, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("SetIfNxtBlkLbl", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("SetIfNxtBlkLbl", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 565, 1, 565, 100)
Dim locbldr411 As LocalBuilder = ReadIL.DeclareLocal(GetType(ElseIfStmt))
locbldr411.SetLocalSymInfo("elifstm")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 86)
ReadIL.MarkSequencePoint(doc13, 566, 1, 566, 100)
Dim locbldr412 As LocalBuilder = ReadIL.DeclareLocal(GetType(Expr))
locbldr412.SetLocalSymInfo("elifexp")
ReadIL.Emit(OpCodes.Ldloc, 86)
Typ = GetType(ElseIfStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(ElseIfStmt).GetField("Exp"))
Typ = GetType(ElseIfStmt).GetField("Exp").FieldType
ReadIL.Emit(OpCodes.Stloc, 87)
ReadIL.MarkSequencePoint(doc13, 567, 1, 567, 100)
ReadIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator").GetConstructor(Type.EmptyTypes))
ReadIL.Emit(OpCodes.Stloc, 72)
ReadIL.MarkSequencePoint(doc13, 568, 1, 568, 100)
Dim typ134(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 72)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator")
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 87)
Typ = GetType(Expr)
ReDim Preserve typ134(UBound(typ134) + 1)
typ134(UBound(typ134)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Evaluate", typ134))
Typ = Typ03.GetMethod("Evaluate", typ134).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 570, 1, 570, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfNxtBlkLbl", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfNxtBlkLbl", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 83)
ReadIL.MarkSequencePoint(doc13, 571, 1, 571, 100)
Dim typ135(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 83)
Typ = GetType(Emit.Label)
ReDim Preserve typ135(UBound(typ135) + 1)
typ135(UBound(typ135)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitBrfalse", typ135))
Typ = GetType(ILEmitter).GetMethod("EmitBrfalse", typ135).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 573, 1, 573, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc13, 574, 1, 574, 100)
ReadIL.Emit(OpCodes.Br, cont397)
ReadIL.MarkLabel(fa397)
ReadIL.Emit(OpCodes.Br, cont397)
ReadIL.MarkLabel(cont397)
ReadIL.MarkSequencePoint(doc13, 576, 1, 576, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(ElseStmt))
Dim typ136 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ136))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ136).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc13, 577, 1, 577, 100)
Dim typ137(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ137(UBound(typ137) + 1)
typ137(UBound(typ137)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ137))
Typ = Typ03.GetMethod("IsInstanceOfType", typ137).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc13, 579, 1, 579, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa398 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru398 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont398 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru398)
ReadIL.Emit(OpCodes.Br, fa398)
ReadIL.MarkLabel(tru398)
ReadIL.MarkSequencePoint(doc13, 580, 1, 580, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfEndLbl", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfEndLbl", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 82)
ReadIL.MarkSequencePoint(doc13, 581, 1, 581, 100)
Dim typ138(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 82)
Typ = GetType(Emit.Label)
ReDim Preserve typ138(UBound(typ138) + 1)
typ138(UBound(typ138)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitBr", typ138))
Typ = GetType(ILEmitter).GetMethod("EmitBr", typ138).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 582, 1, 582, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfNxtBlkLbl", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfNxtBlkLbl", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 83)
ReadIL.MarkSequencePoint(doc13, 583, 1, 583, 100)
Dim typ139(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 83)
Typ = GetType(Emit.Label)
ReDim Preserve typ139(UBound(typ139) + 1)
typ139(UBound(typ139)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("MarkLbl", typ139))
Typ = GetType(ILEmitter).GetMethod("MarkLbl", typ139).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 584, 1, 584, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("SetIfElsePass", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("SetIfElsePass", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 585, 1, 585, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc13, 586, 1, 586, 100)
ReadIL.Emit(OpCodes.Br, cont398)
ReadIL.MarkLabel(fa398)
ReadIL.Emit(OpCodes.Br, cont398)
ReadIL.MarkLabel(cont398)
ReadIL.MarkSequencePoint(doc13, 588, 1, 588, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(EndIfStmt))
Dim typ140 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ140))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ140).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc13, 589, 1, 589, 100)
Dim typ141(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ141(UBound(typ141) + 1)
typ141(UBound(typ141)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ141))
Typ = Typ03.GetMethod("IsInstanceOfType", typ141).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc13, 591, 1, 591, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa399 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru399 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont399 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru399)
ReadIL.Emit(OpCodes.Br, fa399)
ReadIL.MarkLabel(tru399)
ReadIL.MarkSequencePoint(doc13, 593, 1, 593, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfElsePass", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfElsePass", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc13, 595, 1, 595, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa400 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru400 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont400 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru400)
ReadIL.Emit(OpCodes.Br, fa400)
ReadIL.MarkLabel(tru400)
ReadIL.MarkSequencePoint(doc13, 596, 1, 596, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfNxtBlkLbl", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfNxtBlkLbl", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 83)
ReadIL.MarkSequencePoint(doc13, 597, 1, 597, 100)
Dim typ142(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 83)
Typ = GetType(Emit.Label)
ReDim Preserve typ142(UBound(typ142) + 1)
typ142(UBound(typ142)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("MarkLbl", typ142))
Typ = GetType(ILEmitter).GetMethod("MarkLbl", typ142).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 598, 1, 598, 100)
ReadIL.Emit(OpCodes.Br, cont400)
ReadIL.MarkLabel(fa400)
ReadIL.Emit(OpCodes.Br, cont400)
ReadIL.MarkLabel(cont400)
ReadIL.MarkSequencePoint(doc13, 600, 1, 600, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfEndLbl", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfEndLbl", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 82)
ReadIL.MarkSequencePoint(doc13, 601, 1, 601, 100)
Dim typ143(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 82)
Typ = GetType(Emit.Label)
ReDim Preserve typ143(UBound(typ143) + 1)
typ143(UBound(typ143)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("MarkLbl", typ143))
Typ = GetType(ILEmitter).GetMethod("MarkLbl", typ143).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 602, 1, 602, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("PopIf", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("PopIf", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc13, 603, 1, 603, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc13, 604, 1, 604, 100)
ReadIL.Emit(OpCodes.Br, cont399)
ReadIL.MarkLabel(fa399)
ReadIL.Emit(OpCodes.Br, cont399)
ReadIL.MarkLabel(cont399)
ReadIL.MarkSequencePoint(doc13, 607, 1, 607, 100)
ReadIL.MarkLabel(label0)
ReadIL.MarkSequencePoint(doc13, 609, 1, 609, 100)
ReadIL.Emit(OpCodes.Ret)
StmtReader.CreateType()
End Sub


Dim doc14 As ISymbolDocumentWriter

Sub CodeGenerator()
Dim CodeGenerator As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "CodeGenerator", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(StmtSet)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
Dim EmitMSIL As MethodBuilder = CodeGenerator.DefineMethod("EmitMSIL", MethodAttributes.Public, GetType(System.Void), typ0)
Dim EmitMSILIL As ILGenerator = EmitMSIL.GetILGenerator()
Dim EmitMSILparam01 As ParameterBuilder = EmitMSIL.DefineParameter(1, ParameterAttributes.None, "stmts")
Dim EmitMSILparam02 As ParameterBuilder = EmitMSIL.DefineParameter(2, ParameterAttributes.None, "fpath")
EmitMSILIL.MarkSequencePoint(doc14, 13, 1, 13, 100)
Dim locbldr413 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(System.Int32))
locbldr413.SetLocalSymInfo("i")
EmitMSILIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Stloc, 0)
EmitMSILIL.MarkSequencePoint(doc14, 14, 1, 14, 100)
Dim locbldr414 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(System.Int32))
locbldr414.SetLocalSymInfo("len")
EmitMSILIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(StmtSet)
EmitMSILIL.Emit(OpCodes.Ldfld, GetType(StmtSet).GetField("Stmts"))
Typ = GetType(StmtSet).GetField("Stmts").FieldType
EmitMSILIL.Emit(OpCodes.Ldlen)
EmitMSILIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Sub)
EmitMSILIL.Emit(OpCodes.Stloc, 1)
EmitMSILIL.MarkSequencePoint(doc14, 15, 1, 15, 100)
Dim locbldr415 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(Stmt))
locbldr415.SetLocalSymInfo("stm")
EmitMSILIL.Emit(OpCodes.Ldnull)
EmitMSILIL.Emit(OpCodes.Stloc, 2)
EmitMSILIL.MarkSequencePoint(doc14, 16, 1, 16, 100)
Dim locbldr416 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(System.Type))
locbldr416.SetLocalSymInfo("typ")
EmitMSILIL.MarkSequencePoint(doc14, 17, 1, 17, 100)
Dim locbldr417 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(System.Boolean))
locbldr417.SetLocalSymInfo("b")
EmitMSILIL.MarkSequencePoint(doc14, 19, 1, 19, 100)
Dim label0 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
EmitMSILIL.MarkSequencePoint(doc14, 20, 1, 20, 100)
Dim label1 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
EmitMSILIL.MarkSequencePoint(doc14, 22, 1, 22, 100)
EmitMSILIL.MarkLabel(label0)
EmitMSILIL.MarkSequencePoint(doc14, 24, 1, 24, 100)
EmitMSILIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Add)
EmitMSILIL.Emit(OpCodes.Stloc, 0)
EmitMSILIL.MarkSequencePoint(doc14, 26, 1, 26, 100)
EmitMSILIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(StmtSet)
EmitMSILIL.Emit(OpCodes.Ldfld, GetType(StmtSet).GetField("Stmts"))
Typ = GetType(StmtSet).GetField("Stmts").FieldType
Typ02 = Typ
EmitMSILIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitMSILIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
EmitMSILIL.Emit(OpCodes.Stloc, 2)
EmitMSILIL.MarkSequencePoint(doc14, 27, 1, 27, 100)
EmitMSILIL.Emit(OpCodes.Ldtoken, GetType(IncludeStmt))
Dim typ1 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitMSILIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ1))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ1).ReturnType
EmitMSILIL.Emit(OpCodes.Stloc, 3)
EmitMSILIL.MarkSequencePoint(doc14, 28, 1, 28, 100)
Dim typ2(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Type)
Typ03 = Typ
EmitMSILIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Stmt)
EmitMSILIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = Typ
EmitMSILIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ2))
Typ = Typ03.GetMethod("IsInstanceOfType", typ2).ReturnType
EmitMSILIL.Emit(OpCodes.Stloc, 4)
EmitMSILIL.MarkSequencePoint(doc14, 30, 1, 30, 100)
EmitMSILIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
EmitMSILIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa401 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
Dim tru401 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
Dim cont401 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
EmitMSILIL.Emit(OpCodes.Beq, tru401)
EmitMSILIL.Emit(OpCodes.Br, fa401)
EmitMSILIL.MarkLabel(tru401)
EmitMSILIL.MarkSequencePoint(doc14, 31, 1, 31, 100)
EmitMSILIL.Emit(OpCodes.Br, cont401)
EmitMSILIL.MarkLabel(fa401)
EmitMSILIL.MarkSequencePoint(doc14, 33, 1, 33, 100)
Dim locbldr418 As LocalBuilder = EmitMSILIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.StmtReader"))
locbldr418.SetLocalSymInfo("sr")
EmitMSILIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.StmtReader").GetConstructor(Type.EmptyTypes))
EmitMSILIL.Emit(OpCodes.Stloc, 5)
EmitMSILIL.MarkSequencePoint(doc14, 34, 1, 34, 100)
Dim typ3(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.StmtReader")
Typ03 = Typ
EmitMSILIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Stmt)
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = Typ
EmitMSILIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.String)
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = Typ
EmitMSILIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Read", typ3))
Typ = Typ03.GetMethod("Read", typ3).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMSILIL.Emit(OpCodes.Pop)
End If
EmitMSILIL.MarkSequencePoint(doc14, 36, 1, 36, 100)
EmitMSILIL.Emit(OpCodes.Br, cont401)
EmitMSILIL.MarkLabel(cont401)
EmitMSILIL.MarkSequencePoint(doc14, 38, 1, 38, 100)
EmitMSILIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
Dim fa402 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
Dim tru402 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
Dim cont402 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
EmitMSILIL.Emit(OpCodes.Beq, tru402)
EmitMSILIL.Emit(OpCodes.Br, fa402)
EmitMSILIL.MarkLabel(tru402)
EmitMSILIL.MarkSequencePoint(doc14, 40, 1, 40, 100)
Dim typ4(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldstr, "Writing Assembly to Disk")
Typ = GetType(System.String)
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
EmitMSILIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ4))
Typ = GetType(Console).GetMethod("Write", typ4).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMSILIL.Emit(OpCodes.Pop)
End If
EmitMSILIL.MarkSequencePoint(doc14, 41, 1, 41, 100)
Dim locbldr419 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(AssemblyBuilder))
locbldr419.SetLocalSymInfo("ab")
EmitMSILIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmB"))
Typ = GetType(AsmFactory).GetField("AsmB").FieldType
EmitMSILIL.Emit(OpCodes.Stloc, 6)
EmitMSILIL.MarkSequencePoint(doc14, 42, 1, 42, 100)
EmitMSILIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(AssemblyBuilder)
Typ03 = Typ
EmitMSILIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineVersionInfoResource", Type.EmptyTypes))
Typ = Typ03.GetMethod("DefineVersionInfoResource", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMSILIL.Emit(OpCodes.Pop)
End If
EmitMSILIL.MarkSequencePoint(doc14, 43, 1, 43, 100)
Dim typ6(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(AssemblyBuilder)
Typ03 = Typ
EmitMSILIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmFile"))
Typ = GetType(AsmFactory).GetField("AsmFile").FieldType
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = Typ
EmitMSILIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Save", typ6))
Typ = Typ03.GetMethod("Save", typ6).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMSILIL.Emit(OpCodes.Pop)
End If
EmitMSILIL.MarkSequencePoint(doc14, 44, 1, 44, 100)
Dim typ7(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldstr, "...Done.")
Typ = GetType(System.String)
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = Typ
EmitMSILIL.Emit(OpCodes.Call, GetType(COnsole).GetMethod("WriteLine", typ7))
Typ = GetType(COnsole).GetMethod("WriteLine", typ7).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMSILIL.Emit(OpCodes.Pop)
End If
EmitMSILIL.MarkSequencePoint(doc14, 46, 1, 46, 100)
EmitMSILIL.Emit(OpCodes.Br, label1)
EmitMSILIL.MarkSequencePoint(doc14, 47, 1, 47, 100)
EmitMSILIL.Emit(OpCodes.Br, cont402)
EmitMSILIL.MarkLabel(fa402)
EmitMSILIL.MarkSequencePoint(doc14, 48, 1, 48, 100)
EmitMSILIL.Emit(OpCodes.Br, label0)
EmitMSILIL.MarkSequencePoint(doc14, 49, 1, 49, 100)
EmitMSILIL.Emit(OpCodes.Br, cont402)
EmitMSILIL.MarkLabel(cont402)
EmitMSILIL.MarkSequencePoint(doc14, 51, 1, 51, 100)
EmitMSILIL.MarkLabel(label1)
EmitMSILIL.MarkSequencePoint(doc14, 53, 1, 53, 100)
EmitMSILIL.Emit(OpCodes.Ret)
CodeGenerator.CreateType()
End Sub

Sub Main()

asmName = New AssemblyName("tokenizer.CodeGen")
asmName.Version = New System.Version(11, 2, 7, 7)
asm  = AppDomain.CurrentDomain.DefineDynamicAssembly(asmName, AssemblyBuilderAccess.Save, CStr("E:\Code\dylannet\compiler\"))
mdl = asm.DefineDynamicModule(asmName.Name & ".dll" , asmName.Name & ".dll", True)
resw = mdl.DefineResource("tokenizer.CodeGen.resources" ,  "Description")
doc = mdl.DefineDocument("E:\Code\dylannet\compiler\tokenizer.CodeGen.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc2 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\varitem.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc3 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\fielditem.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc4 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\methoditem.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc5 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\ctoritem.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc6 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\ifitem.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc7 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\typearr.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc8 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\symtable.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc9 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\helpers.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc10 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\constldr.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc11 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\opstack.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc12 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\eval.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc13 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\stmtreader.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc14 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\codegenerator.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
addstr("tokenizer.CodeGen")
addasm(asm)
Dim daType As Type = GetType(DebuggableAttribute)
Dim daCtor As ConstructorInfo = daType.GetConstructor(New Type() { GetType(DebuggableAttribute.DebuggingModes) })
Dim daBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(daCtor, New Object() {DebuggableAttribute.DebuggingModes.DisableOptimizations Or _
DebuggableAttribute.DebuggingModes.Default })
asm.SetCustomAttribute(daBuilder)

VarItem()
FieldItem()
MethodItem()
CtorItem()
IfItem()
TypeArr()
SymTable()
Helpers()
OpStack()
Evaluator()
StmtReader()
CodeGenerator()
Dim vaType As Type = GetType(AssemblyFileVersionAttribute)
Dim vaCtor As ConstructorInfo = vaType.GetConstructor(New Type() { GetType(String) })
Dim vaBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(vaCtor, New Object() {"11.2.7.7"})
asm.SetCustomAttribute(vaBuilder)

Dim paType As Type = GetType(AssemblyProductAttribute)
Dim paCtor As ConstructorInfo = paType.GetConstructor(New Type() { GetType(String) })
Dim paBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(paCtor, New Object() {"tokenizer.CodeGen"})
asm.SetCustomAttribute(paBuilder)

Dim ataType As Type = GetType(AssemblyTitleAttribute)
Dim ataCtor As ConstructorInfo = ataType.GetConstructor(New Type() { GetType(String) })
Dim ataBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(ataCtor, New Object() {"tokenizer.CodeGen"})
asm.SetCustomAttribute(ataBuilder)

Dim deaType As Type = GetType(AssemblyDescriptionAttribute)
Dim deaCtor As ConstructorInfo = deaType.GetConstructor(New Type() { GetType(String) })
Dim deaBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(deaCtor, New Object() {"tokenizer.CodeGen"})
asm.SetCustomAttribute(deaBuilder)


asm.DefineVersionInfoResource()
asm.Save(asmName.Name & ".dll")
End Sub


End Module