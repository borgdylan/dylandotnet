Imports dylan.NET.Tokenizer.Parser
Imports dylan.NET.Tokenizer.AST.Tokens.Chars
Imports dylan.NET.Tokenizer.AST.Tokens.Attributes
Imports dylan.NET.Tokenizer.AST.Tokens.Literals
Imports dylan.NET.Tokenizer.AST.Tokens.TypeToks
Imports dylan.NET.Tokenizer.AST.Tokens.Ops
Imports dylan.NET.Tokenizer.AST.Stmts
Imports dylan.NET.Tokenizer.AST.Exprs
Imports dylan.NET.Tokenizer.AST.Tokens
Imports dylan.NET.Tokenizer.AST
Imports dylan.NET.Tokenizer.Lexer
Imports dylan.NET.Reflection
Imports dylan.NET.Utils
Imports dylan.NET
Imports System.Linq
Imports System.Collections.Generic
Imports System.Collections
Imports System.IO
Imports Microsoft.VisualBasic
Imports System.Xml
Imports System.Xml.Linq
Imports System.Data

Imports System
Imports System.Diagnostics
Imports System.Diagnostics.SymbolStore
Imports System.Reflection
Imports System.Resources
Imports System.Reflection.Emit
Module Module1

Public asmName As AssemblyName
Public asm As AssemblyBuilder
Public Typ As Type
Public Typ02 As Type
Public Typ03 As Type
Public Typ04 As Type
Public impstr(-1) As String
Public impasm(-1) As Assembly
Public interfacebool As Boolean
Public mdl As ModuleBuilder
Public resw As IResourceWriter
Public resobj As Object

Dim doc As ISymbolDocumentWriter

Sub addstr(ByVal str As String)
ReDim Preserve impstr(UBound(impstr) + 1)
impstr(UBound(impstr)) = str
End Sub

Sub addasm(ByVal asm As Assembly)
ReDim Preserve impasm(UBound(impasm) + 1)
impasm(UBound(impasm)) = asm
End Sub

Function MakeGetType(ByVal TypeName As String) As Type
Dim attachbrackets As Boolean = False
If TypeName Like "*[[]*]" Then
Dim split As String() = TypeName.Split(New [Char] () {"[","]"})
TypeName = split(0)
attachbrackets = True
End If
Dim ind As Integer = -1
Dim i As Integer = -1
Dim len As Integer = impstr.Length - 1
Do Until i = len
i = i + 1
If TypeName Like impstr(i) & "*" Then
ind = i
End If
Loop
If ind <> -1 Then
Dim assem As Assembly = impasm(ind)
If attachbrackets = True Then
TypeName = TypeName & "[]"
End If
MakeGetType = assem.GetType(TypeName)
Else
If attachbrackets = True Then
TypeName = TypeName & "[]"
End If
MakeGetType = Type.GetType(TypeName)
End If
Return MakeGetType
End Function

Dim doc2 As ISymbolDocumentWriter

Sub VarItem()
Dim VarItem As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "VarItem", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim Name As FieldBuilder = VarItem.DefineField("Name", GetType(System.String), FieldAttributes.Public)
Dim LocArg As FieldBuilder = VarItem.DefineField("LocArg", GetType(System.Boolean), FieldAttributes.Public)
Dim Index As FieldBuilder = VarItem.DefineField("Index", GetType(System.Int32), FieldAttributes.Public)
Dim VarTyp As FieldBuilder = VarItem.DefineField("VarTyp", GetType(System.Type), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = VarItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc2, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc2, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, Name)
ctor0IL.MarkSequencePoint(doc2, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, LocArg)
ctor0IL.MarkSequencePoint(doc2, 21, 1, 21, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, Index)
ctor0IL.MarkSequencePoint(doc2, 22, 1, 22, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, VarTyp)
ctor0IL.MarkSequencePoint(doc2, 23, 1, 23, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Boolean)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Int32)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Type)
Dim ctor1 As ConstructorBuilder = VarItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "nme")
Dim ctor1param02 As ParameterBuilder = ctor1.DefineParameter(2, ParameterAttributes.None, "la")
Dim ctor1param03 As ParameterBuilder = ctor1.DefineParameter(3, ParameterAttributes.None, "ind")
Dim ctor1param04 As ParameterBuilder = ctor1.DefineParameter(4, ParameterAttributes.None, "typ")
ctor1IL.MarkSequencePoint(doc2, 26, 1, 26, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc2, 27, 1, 27, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, Name)
ctor1IL.MarkSequencePoint(doc2, 28, 1, 28, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, LocArg)
ctor1IL.MarkSequencePoint(doc2, 29, 1, 29, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 3)
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, Index)
ctor1IL.MarkSequencePoint(doc2, 30, 1, 30, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 4)
Typ = GetType(System.Type)
ctor1IL.Emit(OpCodes.Stfld, VarTyp)
ctor1IL.MarkSequencePoint(doc2, 31, 1, 31, 100)
ctor1IL.Emit(OpCodes.Ret)
VarItem.CreateType()
End Sub


Dim doc3 As ISymbolDocumentWriter

Sub FieldItem()
Dim FieldItem As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "FieldItem", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim Name As FieldBuilder = FieldItem.DefineField("Name", GetType(System.String), FieldAttributes.Public)
Dim FieldTyp As FieldBuilder = FieldItem.DefineField("FieldTyp", GetType(System.Type), FieldAttributes.Public)
Dim FieldBldr As FieldBuilder = FieldItem.DefineField("FieldBldr", GetType(FieldBuilder), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = FieldItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc3, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc3, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, Name)
ctor0IL.MarkSequencePoint(doc3, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, FieldTyp)
ctor0IL.MarkSequencePoint(doc3, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, FieldBldr)
ctor0IL.MarkSequencePoint(doc3, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Type)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(FieldBuilder)
Dim ctor1 As ConstructorBuilder = FieldItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "nme")
Dim ctor1param02 As ParameterBuilder = ctor1.DefineParameter(2, ParameterAttributes.None, "typ")
Dim ctor1param03 As ParameterBuilder = ctor1.DefineParameter(3, ParameterAttributes.None, "bld")
ctor1IL.MarkSequencePoint(doc3, 23, 1, 23, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc3, 24, 1, 24, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, Name)
ctor1IL.MarkSequencePoint(doc3, 25, 1, 25, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Type)
ctor1IL.Emit(OpCodes.Stfld, FieldTyp)
ctor1IL.MarkSequencePoint(doc3, 26, 1, 26, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 3)
Typ = GetType(FieldBuilder)
ctor1IL.Emit(OpCodes.Stfld, FieldBldr)
ctor1IL.MarkSequencePoint(doc3, 27, 1, 27, 100)
ctor1IL.Emit(OpCodes.Ret)
FieldItem.CreateType()
End Sub


Dim doc4 As ISymbolDocumentWriter

Sub MethodItem()
Dim MethodItem As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "MethodItem", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim Name As FieldBuilder = MethodItem.DefineField("Name", GetType(System.String), FieldAttributes.Public)
Dim MethodTyp As FieldBuilder = MethodItem.DefineField("MethodTyp", GetType(System.Type), FieldAttributes.Public)
Dim ParamTyps As FieldBuilder = MethodItem.DefineField("ParamTyps", GetType(System.Type).MakeArrayType(), FieldAttributes.Public)
Dim MethodBldr As FieldBuilder = MethodItem.DefineField("MethodBldr", GetType(MethodBuilder), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = MethodItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc4, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc4, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, Name)
ctor0IL.MarkSequencePoint(doc4, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, MethodTyp)
ctor0IL.MarkSequencePoint(doc4, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, MethodBldr)
ctor0IL.MarkSequencePoint(doc4, 21, 1, 21, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, GetType(System.Type))
ctor0IL.Emit(OpCodes.Stfld, ParamTyps)
ctor0IL.MarkSequencePoint(doc4, 22, 1, 22, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Type)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Type).MakeArrayType()
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(MethodBuilder)
Dim ctor1 As ConstructorBuilder = MethodItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "nme")
Dim ctor1param02 As ParameterBuilder = ctor1.DefineParameter(2, ParameterAttributes.None, "typ")
Dim ctor1param03 As ParameterBuilder = ctor1.DefineParameter(3, ParameterAttributes.None, "ptyps")
Dim ctor1param04 As ParameterBuilder = ctor1.DefineParameter(4, ParameterAttributes.None, "bld")
ctor1IL.MarkSequencePoint(doc4, 25, 1, 25, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc4, 26, 1, 26, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, Name)
ctor1IL.MarkSequencePoint(doc4, 27, 1, 27, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Type)
ctor1IL.Emit(OpCodes.Stfld, MethodTyp)
ctor1IL.MarkSequencePoint(doc4, 28, 1, 28, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 4)
Typ = GetType(MethodBuilder)
ctor1IL.Emit(OpCodes.Stfld, MethodBldr)
ctor1IL.MarkSequencePoint(doc4, 29, 1, 29, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 3)
Typ = GetType(System.Type).MakeArrayType()
ctor1IL.Emit(OpCodes.Stfld, ParamTyps)
ctor1IL.MarkSequencePoint(doc4, 30, 1, 30, 100)
ctor1IL.Emit(OpCodes.Ret)
MethodItem.CreateType()
End Sub


Dim doc5 As ISymbolDocumentWriter

Sub CtorItem()
Dim CtorItem As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "CtorItem", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim ParamTyps As FieldBuilder = CtorItem.DefineField("ParamTyps", GetType(System.Type).MakeArrayType(), FieldAttributes.Public)
Dim CtorBldr As FieldBuilder = CtorItem.DefineField("CtorBldr", GetType(ConstructorBuilder), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = CtorItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc5, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc5, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, CtorBldr)
ctor0IL.MarkSequencePoint(doc5, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, GetType(System.Type))
ctor0IL.Emit(OpCodes.Stfld, ParamTyps)
ctor0IL.MarkSequencePoint(doc5, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Type).MakeArrayType()
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(ConstructorBuilder)
Dim ctor1 As ConstructorBuilder = CtorItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "ptyps")
Dim ctor1param02 As ParameterBuilder = ctor1.DefineParameter(2, ParameterAttributes.None, "bld")
ctor1IL.MarkSequencePoint(doc5, 21, 1, 21, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc5, 22, 1, 22, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(ConstructorBuilder)
ctor1IL.Emit(OpCodes.Stfld, CtorBldr)
ctor1IL.MarkSequencePoint(doc5, 23, 1, 23, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type).MakeArrayType()
ctor1IL.Emit(OpCodes.Stfld, ParamTyps)
ctor1IL.MarkSequencePoint(doc5, 24, 1, 24, 100)
ctor1IL.Emit(OpCodes.Ret)
CtorItem.CreateType()
End Sub


Dim doc6 As ISymbolDocumentWriter

Sub SymTable()
Dim SymTable As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "SymTable", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass Or TypeAttributes.BeforeFieldInit, GetType(System.Object))
Dim VarLst As FieldBuilder = SymTable.DefineField("VarLst", asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").MakeArrayType(), FieldAttributes.Public Or FieldAttributes.Static)
Dim FldLst As FieldBuilder = SymTable.DefineField("FldLst", asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType(), FieldAttributes.Public Or FieldAttributes.Static)
Dim NestedFldLst As FieldBuilder = SymTable.DefineField("NestedFldLst", asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType(), FieldAttributes.Public Or FieldAttributes.Static)
Dim MetLst As FieldBuilder = SymTable.DefineField("MetLst", asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType(), FieldAttributes.Public Or FieldAttributes.Static)
Dim NestedMetLst As FieldBuilder = SymTable.DefineField("NestedMetLst", asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType(), FieldAttributes.Public Or FieldAttributes.Static)
Dim CtorLst As FieldBuilder = SymTable.DefineField("CtorLst", asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType(), FieldAttributes.Public Or FieldAttributes.Static)
Dim NestedCtorLst As FieldBuilder = SymTable.DefineField("NestedCtorLst", asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType(), FieldAttributes.Public Or FieldAttributes.Static)
Dim ctor0 As ConstructorBuilder = SymTable.DefineConstructor(MethodAttributes.Public Or MethodAttributes.Static,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc6, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"))
ctor0IL.Emit(OpCodes.Stsfld, VarLst)
ctor0IL.MarkSequencePoint(doc6, 21, 1, 21, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
ctor0IL.Emit(OpCodes.Stsfld, FldLst)
ctor0IL.MarkSequencePoint(doc6, 22, 1, 22, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
ctor0IL.Emit(OpCodes.Stsfld, NestedFldLst)
ctor0IL.MarkSequencePoint(doc6, 23, 1, 23, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
ctor0IL.Emit(OpCodes.Stsfld, MetLst)
ctor0IL.MarkSequencePoint(doc6, 24, 1, 24, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
ctor0IL.Emit(OpCodes.Stsfld, NestedMetLst)
ctor0IL.MarkSequencePoint(doc6, 25, 1, 25, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
ctor0IL.Emit(OpCodes.Stsfld, CtorLst)
ctor0IL.MarkSequencePoint(doc6, 26, 1, 26, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
ctor0IL.Emit(OpCodes.Stsfld, NestedCtorLst)
ctor0IL.MarkSequencePoint(doc6, 27, 1, 27, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim ResetVar As MethodBuilder = SymTable.DefineMethod("ResetVar", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim ResetVarIL As ILGenerator = ResetVar.GetILGenerator()
ResetVarIL.MarkSequencePoint(doc6, 30, 1, 30, 100)
ResetVarIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ResetVarIL.Emit(OpCodes.Conv_U)
ResetVarIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"))
ResetVarIL.Emit(OpCodes.Stsfld, VarLst)
ResetVarIL.MarkSequencePoint(doc6, 31, 1, 31, 100)
ResetVarIL.Emit(OpCodes.Ret)
Dim ResetFld As MethodBuilder = SymTable.DefineMethod("ResetFld", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim ResetFldIL As ILGenerator = ResetFld.GetILGenerator()
ResetFldIL.MarkSequencePoint(doc6, 34, 1, 34, 100)
ResetFldIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ResetFldIL.Emit(OpCodes.Conv_U)
ResetFldIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
ResetFldIL.Emit(OpCodes.Stsfld, FldLst)
ResetFldIL.MarkSequencePoint(doc6, 35, 1, 35, 100)
ResetFldIL.Emit(OpCodes.Ret)
Dim ResetNestedFld As MethodBuilder = SymTable.DefineMethod("ResetNestedFld", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim ResetNestedFldIL As ILGenerator = ResetNestedFld.GetILGenerator()
ResetNestedFldIL.MarkSequencePoint(doc6, 38, 1, 38, 100)
ResetNestedFldIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ResetNestedFldIL.Emit(OpCodes.Conv_U)
ResetNestedFldIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
ResetNestedFldIL.Emit(OpCodes.Stsfld, NestedFldLst)
ResetNestedFldIL.MarkSequencePoint(doc6, 39, 1, 39, 100)
ResetNestedFldIL.Emit(OpCodes.Ret)
Dim ResetMet As MethodBuilder = SymTable.DefineMethod("ResetMet", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim ResetMetIL As ILGenerator = ResetMet.GetILGenerator()
ResetMetIL.MarkSequencePoint(doc6, 42, 1, 42, 100)
ResetMetIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ResetMetIL.Emit(OpCodes.Conv_U)
ResetMetIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
ResetMetIL.Emit(OpCodes.Stsfld, MetLst)
ResetMetIL.MarkSequencePoint(doc6, 43, 1, 43, 100)
ResetMetIL.Emit(OpCodes.Ret)
Dim ResetNestedMet As MethodBuilder = SymTable.DefineMethod("ResetNestedMet", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim ResetNestedMetIL As ILGenerator = ResetNestedMet.GetILGenerator()
ResetNestedMetIL.MarkSequencePoint(doc6, 46, 1, 46, 100)
ResetNestedMetIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ResetNestedMetIL.Emit(OpCodes.Conv_U)
ResetNestedMetIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
ResetNestedMetIL.Emit(OpCodes.Stsfld, NestedMetLst)
ResetNestedMetIL.MarkSequencePoint(doc6, 47, 1, 47, 100)
ResetNestedMetIL.Emit(OpCodes.Ret)
Dim ResetCtor As MethodBuilder = SymTable.DefineMethod("ResetCtor", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim ResetCtorIL As ILGenerator = ResetCtor.GetILGenerator()
ResetCtorIL.MarkSequencePoint(doc6, 50, 1, 50, 100)
ResetCtorIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ResetCtorIL.Emit(OpCodes.Conv_U)
ResetCtorIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
ResetCtorIL.Emit(OpCodes.Stsfld, CtorLst)
ResetCtorIL.MarkSequencePoint(doc6, 51, 1, 51, 100)
ResetCtorIL.Emit(OpCodes.Ret)
Dim ResetNestedCtor As MethodBuilder = SymTable.DefineMethod("ResetNestedCtor", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim ResetNestedCtorIL As ILGenerator = ResetNestedCtor.GetILGenerator()
ResetNestedCtorIL.MarkSequencePoint(doc6, 54, 1, 54, 100)
ResetNestedCtorIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ResetNestedCtorIL.Emit(OpCodes.Conv_U)
ResetNestedCtorIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
ResetNestedCtorIL.Emit(OpCodes.Stsfld, NestedCtorLst)
ResetNestedCtorIL.MarkSequencePoint(doc6, 55, 1, 55, 100)
ResetNestedCtorIL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Boolean)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Int32)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Type)
Dim AddVar As MethodBuilder = SymTable.DefineMethod("AddVar", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ0)
Dim AddVarIL As ILGenerator = AddVar.GetILGenerator()
Dim AddVarparam01 As ParameterBuilder = AddVar.DefineParameter(1, ParameterAttributes.None, "nme")
Dim AddVarparam02 As ParameterBuilder = AddVar.DefineParameter(2, ParameterAttributes.None, "la")
Dim AddVarparam03 As ParameterBuilder = AddVar.DefineParameter(3, ParameterAttributes.None, "ind")
Dim AddVarparam04 As ParameterBuilder = AddVar.DefineParameter(4, ParameterAttributes.None, "typ")
AddVarIL.MarkSequencePoint(doc6, 59, 1, 59, 100)
Dim locbldr0 As LocalBuilder = AddVarIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"))
locbldr0.SetLocalSymInfo("vr")
Dim typ1(-1) As Type
AddVarIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = Typ
AddVarIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = Typ
AddVarIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = Typ
AddVarIL.Emit(OpCodes.Ldarg, 3)
Typ = GetType(System.Type)
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = Typ
AddVarIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetConstructor(typ1))
AddVarIL.Emit(OpCodes.Stloc, 0)
AddVarIL.MarkSequencePoint(doc6, 61, 1, 61, 100)
Dim locbldr1 As LocalBuilder = AddVarIL.DeclareLocal(GetType(System.Int32))
locbldr1.SetLocalSymInfo("len")
AddVarIL.Emit(OpCodes.Ldsfld, VarLst)
Typ = VarLst.FieldType
AddVarIL.Emit(OpCodes.Ldlen)
AddVarIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Stloc, 1)
AddVarIL.MarkSequencePoint(doc6, 62, 1, 62, 100)
Dim locbldr2 As LocalBuilder = AddVarIL.DeclareLocal(GetType(System.Int32))
locbldr2.SetLocalSymInfo("destl")
AddVarIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Add)
AddVarIL.Emit(OpCodes.Stloc, 2)
AddVarIL.MarkSequencePoint(doc6, 63, 1, 63, 100)
Dim locbldr3 As LocalBuilder = AddVarIL.DeclareLocal(GetType(System.Int32))
locbldr3.SetLocalSymInfo("stopel")
AddVarIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Sub)
AddVarIL.Emit(OpCodes.Stloc, 3)
AddVarIL.MarkSequencePoint(doc6, 64, 1, 64, 100)
Dim locbldr4 As LocalBuilder = AddVarIL.DeclareLocal(GetType(System.Int32))
locbldr4.SetLocalSymInfo("i")
AddVarIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Stloc, 4)
AddVarIL.MarkSequencePoint(doc6, 66, 1, 66, 100)
Dim locbldr5 As LocalBuilder = AddVarIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").MakeArrayType())
locbldr5.SetLocalSymInfo("destarr")
AddVarIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Conv_U)
AddVarIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"))
AddVarIL.Emit(OpCodes.Stloc, 5)
AddVarIL.MarkSequencePoint(doc6, 68, 1, 68, 100)
Dim label0 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
AddVarIL.MarkSequencePoint(doc6, 69, 1, 69, 100)
Dim label1 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
AddVarIL.MarkSequencePoint(doc6, 71, 1, 71, 100)
AddVarIL.MarkLabel(label0)
AddVarIL.MarkSequencePoint(doc6, 73, 1, 73, 100)
AddVarIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Add)
AddVarIL.Emit(OpCodes.Stloc, 4)
AddVarIL.MarkSequencePoint(doc6, 75, 1, 75, 100)
AddVarIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa0 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
Dim tru0 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
Dim cont0 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
AddVarIL.Emit(OpCodes.Bgt, tru0)
AddVarIL.Emit(OpCodes.Br, fa0)
AddVarIL.MarkLabel(tru0)
AddVarIL.MarkSequencePoint(doc6, 77, 1, 77, 100)
AddVarIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").MakeArrayType()
Typ02 = Typ
AddVarIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddVarIL.Emit(OpCodes.Ldsfld, VarLst)
Typ = VarLst.FieldType
Typ02 = Typ
AddVarIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddVarIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddVarIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").MakeArrayType().GetElementType())
AddVarIL.MarkSequencePoint(doc6, 79, 1, 79, 100)
AddVarIL.Emit(OpCodes.Br, cont0)
AddVarIL.MarkLabel(fa0)
AddVarIL.Emit(OpCodes.Br, cont0)
AddVarIL.MarkLabel(cont0)
AddVarIL.MarkSequencePoint(doc6, 81, 1, 81, 100)
AddVarIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
Dim fa1 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
Dim tru1 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
Dim cont1 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
AddVarIL.Emit(OpCodes.Beq, tru1)
AddVarIL.Emit(OpCodes.Br, fa1)
AddVarIL.MarkLabel(tru1)
AddVarIL.MarkSequencePoint(doc6, 82, 1, 82, 100)
AddVarIL.Emit(OpCodes.Br, label1)
AddVarIL.MarkSequencePoint(doc6, 83, 1, 83, 100)
AddVarIL.Emit(OpCodes.Br, cont1)
AddVarIL.MarkLabel(fa1)
AddVarIL.MarkSequencePoint(doc6, 84, 1, 84, 100)
AddVarIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa2 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
Dim tru2 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
Dim cont2 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
AddVarIL.Emit(OpCodes.Beq, fa2)
AddVarIL.Emit(OpCodes.Br, tru2)
AddVarIL.MarkLabel(tru2)
AddVarIL.MarkSequencePoint(doc6, 85, 1, 85, 100)
AddVarIL.Emit(OpCodes.Br, label0)
AddVarIL.MarkSequencePoint(doc6, 86, 1, 86, 100)
AddVarIL.Emit(OpCodes.Br, cont2)
AddVarIL.MarkLabel(fa2)
AddVarIL.MarkSequencePoint(doc6, 87, 1, 87, 100)
AddVarIL.Emit(OpCodes.Br, label1)
AddVarIL.MarkSequencePoint(doc6, 88, 1, 88, 100)
AddVarIL.Emit(OpCodes.Br, cont2)
AddVarIL.MarkLabel(cont2)
AddVarIL.MarkSequencePoint(doc6, 89, 1, 89, 100)
AddVarIL.Emit(OpCodes.Br, cont1)
AddVarIL.MarkLabel(cont1)
AddVarIL.MarkSequencePoint(doc6, 91, 1, 91, 100)
AddVarIL.MarkLabel(label1)
AddVarIL.MarkSequencePoint(doc6, 93, 1, 93, 100)
AddVarIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").MakeArrayType()
Typ02 = Typ
AddVarIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddVarIL.Emit(OpCodes.Ldloc, 0)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
AddVarIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").MakeArrayType().GetElementType())
AddVarIL.MarkSequencePoint(doc6, 95, 1, 95, 100)
AddVarIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").MakeArrayType()
AddVarIL.Emit(OpCodes.Stsfld, VarLst)
AddVarIL.MarkSequencePoint(doc6, 97, 1, 97, 100)
AddVarIL.Emit(OpCodes.Ret)
Dim typ2(-1) As Type
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = GetType(System.String)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = GetType(System.Type)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = GetType(FieldBuilder)
Dim AddFld As MethodBuilder = SymTable.DefineMethod("AddFld", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ2)
Dim AddFldIL As ILGenerator = AddFld.GetILGenerator()
Dim AddFldparam01 As ParameterBuilder = AddFld.DefineParameter(1, ParameterAttributes.None, "nme")
Dim AddFldparam02 As ParameterBuilder = AddFld.DefineParameter(2, ParameterAttributes.None, "typ")
Dim AddFldparam03 As ParameterBuilder = AddFld.DefineParameter(3, ParameterAttributes.None, "fld")
AddFldIL.MarkSequencePoint(doc6, 101, 1, 101, 100)
Dim locbldr6 As LocalBuilder = AddFldIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
locbldr6.SetLocalSymInfo("vr")
Dim typ3(-1) As Type
AddFldIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = Typ
AddFldIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = Typ
AddFldIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(FieldBuilder)
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = Typ
AddFldIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").GetConstructor(typ3))
AddFldIL.Emit(OpCodes.Stloc, 0)
AddFldIL.MarkSequencePoint(doc6, 103, 1, 103, 100)
Dim locbldr7 As LocalBuilder = AddFldIL.DeclareLocal(GetType(System.Int32))
locbldr7.SetLocalSymInfo("len")
AddFldIL.Emit(OpCodes.Ldsfld, FldLst)
Typ = FldLst.FieldType
AddFldIL.Emit(OpCodes.Ldlen)
AddFldIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Stloc, 1)
AddFldIL.MarkSequencePoint(doc6, 104, 1, 104, 100)
Dim locbldr8 As LocalBuilder = AddFldIL.DeclareLocal(GetType(System.Int32))
locbldr8.SetLocalSymInfo("destl")
AddFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Add)
AddFldIL.Emit(OpCodes.Stloc, 2)
AddFldIL.MarkSequencePoint(doc6, 105, 1, 105, 100)
Dim locbldr9 As LocalBuilder = AddFldIL.DeclareLocal(GetType(System.Int32))
locbldr9.SetLocalSymInfo("stopel")
AddFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Sub)
AddFldIL.Emit(OpCodes.Stloc, 3)
AddFldIL.MarkSequencePoint(doc6, 106, 1, 106, 100)
Dim locbldr10 As LocalBuilder = AddFldIL.DeclareLocal(GetType(System.Int32))
locbldr10.SetLocalSymInfo("i")
AddFldIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Stloc, 4)
AddFldIL.MarkSequencePoint(doc6, 108, 1, 108, 100)
Dim locbldr11 As LocalBuilder = AddFldIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType())
locbldr11.SetLocalSymInfo("destarr")
AddFldIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Conv_U)
AddFldIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
AddFldIL.Emit(OpCodes.Stloc, 5)
AddFldIL.MarkSequencePoint(doc6, 110, 1, 110, 100)
Dim label2 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
AddFldIL.MarkSequencePoint(doc6, 111, 1, 111, 100)
Dim label3 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
AddFldIL.MarkSequencePoint(doc6, 113, 1, 113, 100)
AddFldIL.MarkLabel(label2)
AddFldIL.MarkSequencePoint(doc6, 115, 1, 115, 100)
AddFldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Add)
AddFldIL.Emit(OpCodes.Stloc, 4)
AddFldIL.MarkSequencePoint(doc6, 117, 1, 117, 100)
AddFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa3 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
Dim tru3 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
Dim cont3 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
AddFldIL.Emit(OpCodes.Bgt, tru3)
AddFldIL.Emit(OpCodes.Br, fa3)
AddFldIL.MarkLabel(tru3)
AddFldIL.MarkSequencePoint(doc6, 119, 1, 119, 100)
AddFldIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType()
Typ02 = Typ
AddFldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddFldIL.Emit(OpCodes.Ldsfld, FldLst)
Typ = FldLst.FieldType
Typ02 = Typ
AddFldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddFldIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddFldIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType().GetElementType())
AddFldIL.MarkSequencePoint(doc6, 121, 1, 121, 100)
AddFldIL.Emit(OpCodes.Br, cont3)
AddFldIL.MarkLabel(fa3)
AddFldIL.Emit(OpCodes.Br, cont3)
AddFldIL.MarkLabel(cont3)
AddFldIL.MarkSequencePoint(doc6, 123, 1, 123, 100)
AddFldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
Dim fa4 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
Dim tru4 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
Dim cont4 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
AddFldIL.Emit(OpCodes.Beq, tru4)
AddFldIL.Emit(OpCodes.Br, fa4)
AddFldIL.MarkLabel(tru4)
AddFldIL.MarkSequencePoint(doc6, 124, 1, 124, 100)
AddFldIL.Emit(OpCodes.Br, label3)
AddFldIL.MarkSequencePoint(doc6, 125, 1, 125, 100)
AddFldIL.Emit(OpCodes.Br, cont4)
AddFldIL.MarkLabel(fa4)
AddFldIL.MarkSequencePoint(doc6, 126, 1, 126, 100)
AddFldIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa5 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
Dim tru5 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
Dim cont5 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
AddFldIL.Emit(OpCodes.Beq, fa5)
AddFldIL.Emit(OpCodes.Br, tru5)
AddFldIL.MarkLabel(tru5)
AddFldIL.MarkSequencePoint(doc6, 127, 1, 127, 100)
AddFldIL.Emit(OpCodes.Br, label2)
AddFldIL.MarkSequencePoint(doc6, 128, 1, 128, 100)
AddFldIL.Emit(OpCodes.Br, cont5)
AddFldIL.MarkLabel(fa5)
AddFldIL.MarkSequencePoint(doc6, 129, 1, 129, 100)
AddFldIL.Emit(OpCodes.Br, label3)
AddFldIL.MarkSequencePoint(doc6, 130, 1, 130, 100)
AddFldIL.Emit(OpCodes.Br, cont5)
AddFldIL.MarkLabel(cont5)
AddFldIL.MarkSequencePoint(doc6, 131, 1, 131, 100)
AddFldIL.Emit(OpCodes.Br, cont4)
AddFldIL.MarkLabel(cont4)
AddFldIL.MarkSequencePoint(doc6, 133, 1, 133, 100)
AddFldIL.MarkLabel(label3)
AddFldIL.MarkSequencePoint(doc6, 135, 1, 135, 100)
AddFldIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType()
Typ02 = Typ
AddFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddFldIL.Emit(OpCodes.Ldloc, 0)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem")
AddFldIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType().GetElementType())
AddFldIL.MarkSequencePoint(doc6, 137, 1, 137, 100)
AddFldIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType()
AddFldIL.Emit(OpCodes.Stsfld, FldLst)
AddFldIL.MarkSequencePoint(doc6, 139, 1, 139, 100)
AddFldIL.Emit(OpCodes.Ret)
Dim typ4(-1) As Type
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = GetType(System.String)
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = GetType(System.Type)
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = GetType(FieldBuilder)
Dim AddNestedFld As MethodBuilder = SymTable.DefineMethod("AddNestedFld", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ4)
Dim AddNestedFldIL As ILGenerator = AddNestedFld.GetILGenerator()
Dim AddNestedFldparam01 As ParameterBuilder = AddNestedFld.DefineParameter(1, ParameterAttributes.None, "nme")
Dim AddNestedFldparam02 As ParameterBuilder = AddNestedFld.DefineParameter(2, ParameterAttributes.None, "typ")
Dim AddNestedFldparam03 As ParameterBuilder = AddNestedFld.DefineParameter(3, ParameterAttributes.None, "fld")
AddNestedFldIL.MarkSequencePoint(doc6, 143, 1, 143, 100)
Dim locbldr12 As LocalBuilder = AddNestedFldIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
locbldr12.SetLocalSymInfo("vr")
Dim typ5(-1) As Type
AddNestedFldIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ5(UBound(typ5) + 1)
typ5(UBound(typ5)) = Typ
AddNestedFldIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ5(UBound(typ5) + 1)
typ5(UBound(typ5)) = Typ
AddNestedFldIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(FieldBuilder)
ReDim Preserve typ5(UBound(typ5) + 1)
typ5(UBound(typ5)) = Typ
AddNestedFldIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").GetConstructor(typ5))
AddNestedFldIL.Emit(OpCodes.Stloc, 0)
AddNestedFldIL.MarkSequencePoint(doc6, 145, 1, 145, 100)
Dim locbldr13 As LocalBuilder = AddNestedFldIL.DeclareLocal(GetType(System.Int32))
locbldr13.SetLocalSymInfo("len")
AddNestedFldIL.Emit(OpCodes.Ldsfld, NestedFldLst)
Typ = NestedFldLst.FieldType
AddNestedFldIL.Emit(OpCodes.Ldlen)
AddNestedFldIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Stloc, 1)
AddNestedFldIL.MarkSequencePoint(doc6, 146, 1, 146, 100)
Dim locbldr14 As LocalBuilder = AddNestedFldIL.DeclareLocal(GetType(System.Int32))
locbldr14.SetLocalSymInfo("destl")
AddNestedFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Add)
AddNestedFldIL.Emit(OpCodes.Stloc, 2)
AddNestedFldIL.MarkSequencePoint(doc6, 147, 1, 147, 100)
Dim locbldr15 As LocalBuilder = AddNestedFldIL.DeclareLocal(GetType(System.Int32))
locbldr15.SetLocalSymInfo("stopel")
AddNestedFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Sub)
AddNestedFldIL.Emit(OpCodes.Stloc, 3)
AddNestedFldIL.MarkSequencePoint(doc6, 148, 1, 148, 100)
Dim locbldr16 As LocalBuilder = AddNestedFldIL.DeclareLocal(GetType(System.Int32))
locbldr16.SetLocalSymInfo("i")
AddNestedFldIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Stloc, 4)
AddNestedFldIL.MarkSequencePoint(doc6, 150, 1, 150, 100)
Dim locbldr17 As LocalBuilder = AddNestedFldIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType())
locbldr17.SetLocalSymInfo("destarr")
AddNestedFldIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Conv_U)
AddNestedFldIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
AddNestedFldIL.Emit(OpCodes.Stloc, 5)
AddNestedFldIL.MarkSequencePoint(doc6, 152, 1, 152, 100)
Dim label4 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
AddNestedFldIL.MarkSequencePoint(doc6, 153, 1, 153, 100)
Dim label5 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
AddNestedFldIL.MarkSequencePoint(doc6, 155, 1, 155, 100)
AddNestedFldIL.MarkLabel(label4)
AddNestedFldIL.MarkSequencePoint(doc6, 157, 1, 157, 100)
AddNestedFldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Add)
AddNestedFldIL.Emit(OpCodes.Stloc, 4)
AddNestedFldIL.MarkSequencePoint(doc6, 159, 1, 159, 100)
AddNestedFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa6 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
Dim tru6 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
Dim cont6 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
AddNestedFldIL.Emit(OpCodes.Bgt, tru6)
AddNestedFldIL.Emit(OpCodes.Br, fa6)
AddNestedFldIL.MarkLabel(tru6)
AddNestedFldIL.MarkSequencePoint(doc6, 161, 1, 161, 100)
AddNestedFldIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType()
Typ02 = Typ
AddNestedFldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNestedFldIL.Emit(OpCodes.Ldsfld, NestedFldLst)
Typ = NestedFldLst.FieldType
Typ02 = Typ
AddNestedFldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNestedFldIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddNestedFldIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType().GetElementType())
AddNestedFldIL.MarkSequencePoint(doc6, 163, 1, 163, 100)
AddNestedFldIL.Emit(OpCodes.Br, cont6)
AddNestedFldIL.MarkLabel(fa6)
AddNestedFldIL.Emit(OpCodes.Br, cont6)
AddNestedFldIL.MarkLabel(cont6)
AddNestedFldIL.MarkSequencePoint(doc6, 165, 1, 165, 100)
AddNestedFldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
Dim fa7 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
Dim tru7 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
Dim cont7 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
AddNestedFldIL.Emit(OpCodes.Beq, tru7)
AddNestedFldIL.Emit(OpCodes.Br, fa7)
AddNestedFldIL.MarkLabel(tru7)
AddNestedFldIL.MarkSequencePoint(doc6, 166, 1, 166, 100)
AddNestedFldIL.Emit(OpCodes.Br, label5)
AddNestedFldIL.MarkSequencePoint(doc6, 167, 1, 167, 100)
AddNestedFldIL.Emit(OpCodes.Br, cont7)
AddNestedFldIL.MarkLabel(fa7)
AddNestedFldIL.MarkSequencePoint(doc6, 168, 1, 168, 100)
AddNestedFldIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa8 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
Dim tru8 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
Dim cont8 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
AddNestedFldIL.Emit(OpCodes.Beq, fa8)
AddNestedFldIL.Emit(OpCodes.Br, tru8)
AddNestedFldIL.MarkLabel(tru8)
AddNestedFldIL.MarkSequencePoint(doc6, 169, 1, 169, 100)
AddNestedFldIL.Emit(OpCodes.Br, label4)
AddNestedFldIL.MarkSequencePoint(doc6, 170, 1, 170, 100)
AddNestedFldIL.Emit(OpCodes.Br, cont8)
AddNestedFldIL.MarkLabel(fa8)
AddNestedFldIL.MarkSequencePoint(doc6, 171, 1, 171, 100)
AddNestedFldIL.Emit(OpCodes.Br, label5)
AddNestedFldIL.MarkSequencePoint(doc6, 172, 1, 172, 100)
AddNestedFldIL.Emit(OpCodes.Br, cont8)
AddNestedFldIL.MarkLabel(cont8)
AddNestedFldIL.MarkSequencePoint(doc6, 173, 1, 173, 100)
AddNestedFldIL.Emit(OpCodes.Br, cont7)
AddNestedFldIL.MarkLabel(cont7)
AddNestedFldIL.MarkSequencePoint(doc6, 175, 1, 175, 100)
AddNestedFldIL.MarkLabel(label5)
AddNestedFldIL.MarkSequencePoint(doc6, 177, 1, 177, 100)
AddNestedFldIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType()
Typ02 = Typ
AddNestedFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNestedFldIL.Emit(OpCodes.Ldloc, 0)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem")
AddNestedFldIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType().GetElementType())
AddNestedFldIL.MarkSequencePoint(doc6, 179, 1, 179, 100)
AddNestedFldIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType()
AddNestedFldIL.Emit(OpCodes.Stsfld, NestedFldLst)
AddNestedFldIL.MarkSequencePoint(doc6, 181, 1, 181, 100)
AddNestedFldIL.Emit(OpCodes.Ret)
Dim typ6(-1) As Type
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = GetType(System.String)
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = GetType(System.Type)
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = GetType(System.Type).MakeArrayType()
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = GetType(MethodBuilder)
Dim AddMet As MethodBuilder = SymTable.DefineMethod("AddMet", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ6)
Dim AddMetIL As ILGenerator = AddMet.GetILGenerator()
Dim AddMetparam01 As ParameterBuilder = AddMet.DefineParameter(1, ParameterAttributes.None, "nme")
Dim AddMetparam02 As ParameterBuilder = AddMet.DefineParameter(2, ParameterAttributes.None, "typ")
Dim AddMetparam03 As ParameterBuilder = AddMet.DefineParameter(3, ParameterAttributes.None, "ptyps")
Dim AddMetparam04 As ParameterBuilder = AddMet.DefineParameter(4, ParameterAttributes.None, "met")
AddMetIL.MarkSequencePoint(doc6, 186, 1, 186, 100)
Dim locbldr18 As LocalBuilder = AddMetIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
locbldr18.SetLocalSymInfo("vr")
Dim typ7(-1) As Type
AddMetIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = Typ
AddMetIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = Typ
AddMetIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = Typ
AddMetIL.Emit(OpCodes.Ldarg, 3)
Typ = GetType(MethodBuilder)
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = Typ
AddMetIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").GetConstructor(typ7))
AddMetIL.Emit(OpCodes.Stloc, 0)
AddMetIL.MarkSequencePoint(doc6, 188, 1, 188, 100)
Dim locbldr19 As LocalBuilder = AddMetIL.DeclareLocal(GetType(System.Int32))
locbldr19.SetLocalSymInfo("len")
AddMetIL.Emit(OpCodes.Ldsfld, MetLst)
Typ = MetLst.FieldType
AddMetIL.Emit(OpCodes.Ldlen)
AddMetIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Stloc, 1)
AddMetIL.MarkSequencePoint(doc6, 189, 1, 189, 100)
Dim locbldr20 As LocalBuilder = AddMetIL.DeclareLocal(GetType(System.Int32))
locbldr20.SetLocalSymInfo("destl")
AddMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Add)
AddMetIL.Emit(OpCodes.Stloc, 2)
AddMetIL.MarkSequencePoint(doc6, 190, 1, 190, 100)
Dim locbldr21 As LocalBuilder = AddMetIL.DeclareLocal(GetType(System.Int32))
locbldr21.SetLocalSymInfo("stopel")
AddMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Sub)
AddMetIL.Emit(OpCodes.Stloc, 3)
AddMetIL.MarkSequencePoint(doc6, 191, 1, 191, 100)
Dim locbldr22 As LocalBuilder = AddMetIL.DeclareLocal(GetType(System.Int32))
locbldr22.SetLocalSymInfo("i")
AddMetIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Stloc, 4)
AddMetIL.MarkSequencePoint(doc6, 193, 1, 193, 100)
Dim locbldr23 As LocalBuilder = AddMetIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType())
locbldr23.SetLocalSymInfo("destarr")
AddMetIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Conv_U)
AddMetIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
AddMetIL.Emit(OpCodes.Stloc, 5)
AddMetIL.MarkSequencePoint(doc6, 195, 1, 195, 100)
Dim label6 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
AddMetIL.MarkSequencePoint(doc6, 196, 1, 196, 100)
Dim label7 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
AddMetIL.MarkSequencePoint(doc6, 198, 1, 198, 100)
AddMetIL.MarkLabel(label6)
AddMetIL.MarkSequencePoint(doc6, 200, 1, 200, 100)
AddMetIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Add)
AddMetIL.Emit(OpCodes.Stloc, 4)
AddMetIL.MarkSequencePoint(doc6, 202, 1, 202, 100)
AddMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa9 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
Dim tru9 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
Dim cont9 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
AddMetIL.Emit(OpCodes.Bgt, tru9)
AddMetIL.Emit(OpCodes.Br, fa9)
AddMetIL.MarkLabel(tru9)
AddMetIL.MarkSequencePoint(doc6, 204, 1, 204, 100)
AddMetIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType()
Typ02 = Typ
AddMetIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddMetIL.Emit(OpCodes.Ldsfld, MetLst)
Typ = MetLst.FieldType
Typ02 = Typ
AddMetIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddMetIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddMetIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType().GetElementType())
AddMetIL.MarkSequencePoint(doc6, 206, 1, 206, 100)
AddMetIL.Emit(OpCodes.Br, cont9)
AddMetIL.MarkLabel(fa9)
AddMetIL.Emit(OpCodes.Br, cont9)
AddMetIL.MarkLabel(cont9)
AddMetIL.MarkSequencePoint(doc6, 208, 1, 208, 100)
AddMetIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
Dim fa10 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
Dim tru10 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
Dim cont10 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
AddMetIL.Emit(OpCodes.Beq, tru10)
AddMetIL.Emit(OpCodes.Br, fa10)
AddMetIL.MarkLabel(tru10)
AddMetIL.MarkSequencePoint(doc6, 209, 1, 209, 100)
AddMetIL.Emit(OpCodes.Br, label7)
AddMetIL.MarkSequencePoint(doc6, 210, 1, 210, 100)
AddMetIL.Emit(OpCodes.Br, cont10)
AddMetIL.MarkLabel(fa10)
AddMetIL.MarkSequencePoint(doc6, 211, 1, 211, 100)
AddMetIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa11 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
Dim tru11 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
Dim cont11 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
AddMetIL.Emit(OpCodes.Beq, fa11)
AddMetIL.Emit(OpCodes.Br, tru11)
AddMetIL.MarkLabel(tru11)
AddMetIL.MarkSequencePoint(doc6, 212, 1, 212, 100)
AddMetIL.Emit(OpCodes.Br, label6)
AddMetIL.MarkSequencePoint(doc6, 213, 1, 213, 100)
AddMetIL.Emit(OpCodes.Br, cont11)
AddMetIL.MarkLabel(fa11)
AddMetIL.MarkSequencePoint(doc6, 214, 1, 214, 100)
AddMetIL.Emit(OpCodes.Br, label7)
AddMetIL.MarkSequencePoint(doc6, 215, 1, 215, 100)
AddMetIL.Emit(OpCodes.Br, cont11)
AddMetIL.MarkLabel(cont11)
AddMetIL.MarkSequencePoint(doc6, 216, 1, 216, 100)
AddMetIL.Emit(OpCodes.Br, cont10)
AddMetIL.MarkLabel(cont10)
AddMetIL.MarkSequencePoint(doc6, 218, 1, 218, 100)
AddMetIL.MarkLabel(label7)
AddMetIL.MarkSequencePoint(doc6, 220, 1, 220, 100)
AddMetIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType()
Typ02 = Typ
AddMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddMetIL.Emit(OpCodes.Ldloc, 0)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem")
AddMetIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType().GetElementType())
AddMetIL.MarkSequencePoint(doc6, 222, 1, 222, 100)
AddMetIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType()
AddMetIL.Emit(OpCodes.Stsfld, MetLst)
AddMetIL.MarkSequencePoint(doc6, 224, 1, 224, 100)
AddMetIL.Emit(OpCodes.Ret)
Dim typ8(-1) As Type
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = GetType(System.String)
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = GetType(System.Type)
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = GetType(System.Type).MakeArrayType()
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = GetType(MethodBuilder)
Dim AddNestedMet As MethodBuilder = SymTable.DefineMethod("AddNestedMet", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ8)
Dim AddNestedMetIL As ILGenerator = AddNestedMet.GetILGenerator()
Dim AddNestedMetparam01 As ParameterBuilder = AddNestedMet.DefineParameter(1, ParameterAttributes.None, "nme")
Dim AddNestedMetparam02 As ParameterBuilder = AddNestedMet.DefineParameter(2, ParameterAttributes.None, "typ")
Dim AddNestedMetparam03 As ParameterBuilder = AddNestedMet.DefineParameter(3, ParameterAttributes.None, "ptyps")
Dim AddNestedMetparam04 As ParameterBuilder = AddNestedMet.DefineParameter(4, ParameterAttributes.None, "met")
AddNestedMetIL.MarkSequencePoint(doc6, 229, 1, 229, 100)
Dim locbldr24 As LocalBuilder = AddNestedMetIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
locbldr24.SetLocalSymInfo("vr")
Dim typ9(-1) As Type
AddNestedMetIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = Typ
AddNestedMetIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = Typ
AddNestedMetIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = Typ
AddNestedMetIL.Emit(OpCodes.Ldarg, 3)
Typ = GetType(MethodBuilder)
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = Typ
AddNestedMetIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").GetConstructor(typ9))
AddNestedMetIL.Emit(OpCodes.Stloc, 0)
AddNestedMetIL.MarkSequencePoint(doc6, 231, 1, 231, 100)
Dim locbldr25 As LocalBuilder = AddNestedMetIL.DeclareLocal(GetType(System.Int32))
locbldr25.SetLocalSymInfo("len")
AddNestedMetIL.Emit(OpCodes.Ldsfld, NestedMetLst)
Typ = NestedMetLst.FieldType
AddNestedMetIL.Emit(OpCodes.Ldlen)
AddNestedMetIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Stloc, 1)
AddNestedMetIL.MarkSequencePoint(doc6, 232, 1, 232, 100)
Dim locbldr26 As LocalBuilder = AddNestedMetIL.DeclareLocal(GetType(System.Int32))
locbldr26.SetLocalSymInfo("destl")
AddNestedMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Add)
AddNestedMetIL.Emit(OpCodes.Stloc, 2)
AddNestedMetIL.MarkSequencePoint(doc6, 233, 1, 233, 100)
Dim locbldr27 As LocalBuilder = AddNestedMetIL.DeclareLocal(GetType(System.Int32))
locbldr27.SetLocalSymInfo("stopel")
AddNestedMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Sub)
AddNestedMetIL.Emit(OpCodes.Stloc, 3)
AddNestedMetIL.MarkSequencePoint(doc6, 234, 1, 234, 100)
Dim locbldr28 As LocalBuilder = AddNestedMetIL.DeclareLocal(GetType(System.Int32))
locbldr28.SetLocalSymInfo("i")
AddNestedMetIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Stloc, 4)
AddNestedMetIL.MarkSequencePoint(doc6, 236, 1, 236, 100)
Dim locbldr29 As LocalBuilder = AddNestedMetIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType())
locbldr29.SetLocalSymInfo("destarr")
AddNestedMetIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Conv_U)
AddNestedMetIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
AddNestedMetIL.Emit(OpCodes.Stloc, 5)
AddNestedMetIL.MarkSequencePoint(doc6, 238, 1, 238, 100)
Dim label8 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
AddNestedMetIL.MarkSequencePoint(doc6, 239, 1, 239, 100)
Dim label9 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
AddNestedMetIL.MarkSequencePoint(doc6, 241, 1, 241, 100)
AddNestedMetIL.MarkLabel(label8)
AddNestedMetIL.MarkSequencePoint(doc6, 243, 1, 243, 100)
AddNestedMetIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Add)
AddNestedMetIL.Emit(OpCodes.Stloc, 4)
AddNestedMetIL.MarkSequencePoint(doc6, 245, 1, 245, 100)
AddNestedMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa12 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
Dim tru12 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
Dim cont12 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
AddNestedMetIL.Emit(OpCodes.Bgt, tru12)
AddNestedMetIL.Emit(OpCodes.Br, fa12)
AddNestedMetIL.MarkLabel(tru12)
AddNestedMetIL.MarkSequencePoint(doc6, 247, 1, 247, 100)
AddNestedMetIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType()
Typ02 = Typ
AddNestedMetIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNestedMetIL.Emit(OpCodes.Ldsfld, NestedMetLst)
Typ = NestedMetLst.FieldType
Typ02 = Typ
AddNestedMetIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNestedMetIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddNestedMetIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType().GetElementType())
AddNestedMetIL.MarkSequencePoint(doc6, 249, 1, 249, 100)
AddNestedMetIL.Emit(OpCodes.Br, cont12)
AddNestedMetIL.MarkLabel(fa12)
AddNestedMetIL.Emit(OpCodes.Br, cont12)
AddNestedMetIL.MarkLabel(cont12)
AddNestedMetIL.MarkSequencePoint(doc6, 251, 1, 251, 100)
AddNestedMetIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
Dim fa13 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
Dim tru13 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
Dim cont13 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
AddNestedMetIL.Emit(OpCodes.Beq, tru13)
AddNestedMetIL.Emit(OpCodes.Br, fa13)
AddNestedMetIL.MarkLabel(tru13)
AddNestedMetIL.MarkSequencePoint(doc6, 252, 1, 252, 100)
AddNestedMetIL.Emit(OpCodes.Br, label9)
AddNestedMetIL.MarkSequencePoint(doc6, 253, 1, 253, 100)
AddNestedMetIL.Emit(OpCodes.Br, cont13)
AddNestedMetIL.MarkLabel(fa13)
AddNestedMetIL.MarkSequencePoint(doc6, 254, 1, 254, 100)
AddNestedMetIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa14 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
Dim tru14 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
Dim cont14 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
AddNestedMetIL.Emit(OpCodes.Beq, fa14)
AddNestedMetIL.Emit(OpCodes.Br, tru14)
AddNestedMetIL.MarkLabel(tru14)
AddNestedMetIL.MarkSequencePoint(doc6, 255, 1, 255, 100)
AddNestedMetIL.Emit(OpCodes.Br, label8)
AddNestedMetIL.MarkSequencePoint(doc6, 256, 1, 256, 100)
AddNestedMetIL.Emit(OpCodes.Br, cont14)
AddNestedMetIL.MarkLabel(fa14)
AddNestedMetIL.MarkSequencePoint(doc6, 257, 1, 257, 100)
AddNestedMetIL.Emit(OpCodes.Br, label9)
AddNestedMetIL.MarkSequencePoint(doc6, 258, 1, 258, 100)
AddNestedMetIL.Emit(OpCodes.Br, cont14)
AddNestedMetIL.MarkLabel(cont14)
AddNestedMetIL.MarkSequencePoint(doc6, 259, 1, 259, 100)
AddNestedMetIL.Emit(OpCodes.Br, cont13)
AddNestedMetIL.MarkLabel(cont13)
AddNestedMetIL.MarkSequencePoint(doc6, 261, 1, 261, 100)
AddNestedMetIL.MarkLabel(label9)
AddNestedMetIL.MarkSequencePoint(doc6, 263, 1, 263, 100)
AddNestedMetIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType()
Typ02 = Typ
AddNestedMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNestedMetIL.Emit(OpCodes.Ldloc, 0)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem")
AddNestedMetIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType().GetElementType())
AddNestedMetIL.MarkSequencePoint(doc6, 265, 1, 265, 100)
AddNestedMetIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType()
AddNestedMetIL.Emit(OpCodes.Stsfld, NestedMetLst)
AddNestedMetIL.MarkSequencePoint(doc6, 267, 1, 267, 100)
AddNestedMetIL.Emit(OpCodes.Ret)
Dim typ10(-1) As Type
ReDim Preserve typ10(UBound(typ10) + 1)
typ10(UBound(typ10)) = GetType(System.Type).MakeArrayType()
ReDim Preserve typ10(UBound(typ10) + 1)
typ10(UBound(typ10)) = GetType(ConstructorBuilder)
Dim AddCtor As MethodBuilder = SymTable.DefineMethod("AddCtor", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ10)
Dim AddCtorIL As ILGenerator = AddCtor.GetILGenerator()
Dim AddCtorparam01 As ParameterBuilder = AddCtor.DefineParameter(1, ParameterAttributes.None, "ptyps")
Dim AddCtorparam02 As ParameterBuilder = AddCtor.DefineParameter(2, ParameterAttributes.None, "met")
AddCtorIL.MarkSequencePoint(doc6, 272, 1, 272, 100)
Dim locbldr30 As LocalBuilder = AddCtorIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
locbldr30.SetLocalSymInfo("vr")
Dim typ11(-1) As Type
AddCtorIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ11(UBound(typ11) + 1)
typ11(UBound(typ11)) = Typ
AddCtorIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(ConstructorBuilder)
ReDim Preserve typ11(UBound(typ11) + 1)
typ11(UBound(typ11)) = Typ
AddCtorIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").GetConstructor(typ11))
AddCtorIL.Emit(OpCodes.Stloc, 0)
AddCtorIL.MarkSequencePoint(doc6, 274, 1, 274, 100)
Dim locbldr31 As LocalBuilder = AddCtorIL.DeclareLocal(GetType(System.Int32))
locbldr31.SetLocalSymInfo("len")
AddCtorIL.Emit(OpCodes.Ldsfld, CtorLst)
Typ = CtorLst.FieldType
AddCtorIL.Emit(OpCodes.Ldlen)
AddCtorIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Stloc, 1)
AddCtorIL.MarkSequencePoint(doc6, 275, 1, 275, 100)
Dim locbldr32 As LocalBuilder = AddCtorIL.DeclareLocal(GetType(System.Int32))
locbldr32.SetLocalSymInfo("destl")
AddCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Add)
AddCtorIL.Emit(OpCodes.Stloc, 2)
AddCtorIL.MarkSequencePoint(doc6, 276, 1, 276, 100)
Dim locbldr33 As LocalBuilder = AddCtorIL.DeclareLocal(GetType(System.Int32))
locbldr33.SetLocalSymInfo("stopel")
AddCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Sub)
AddCtorIL.Emit(OpCodes.Stloc, 3)
AddCtorIL.MarkSequencePoint(doc6, 277, 1, 277, 100)
Dim locbldr34 As LocalBuilder = AddCtorIL.DeclareLocal(GetType(System.Int32))
locbldr34.SetLocalSymInfo("i")
AddCtorIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Stloc, 4)
AddCtorIL.MarkSequencePoint(doc6, 279, 1, 279, 100)
Dim locbldr35 As LocalBuilder = AddCtorIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType())
locbldr35.SetLocalSymInfo("destarr")
AddCtorIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Conv_U)
AddCtorIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
AddCtorIL.Emit(OpCodes.Stloc, 5)
AddCtorIL.MarkSequencePoint(doc6, 281, 1, 281, 100)
Dim label10 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
AddCtorIL.MarkSequencePoint(doc6, 282, 1, 282, 100)
Dim label11 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
AddCtorIL.MarkSequencePoint(doc6, 284, 1, 284, 100)
AddCtorIL.MarkLabel(label10)
AddCtorIL.MarkSequencePoint(doc6, 286, 1, 286, 100)
AddCtorIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Add)
AddCtorIL.Emit(OpCodes.Stloc, 4)
AddCtorIL.MarkSequencePoint(doc6, 288, 1, 288, 100)
AddCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa15 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
Dim tru15 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
Dim cont15 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
AddCtorIL.Emit(OpCodes.Bgt, tru15)
AddCtorIL.Emit(OpCodes.Br, fa15)
AddCtorIL.MarkLabel(tru15)
AddCtorIL.MarkSequencePoint(doc6, 290, 1, 290, 100)
AddCtorIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType()
Typ02 = Typ
AddCtorIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddCtorIL.Emit(OpCodes.Ldsfld, CtorLst)
Typ = CtorLst.FieldType
Typ02 = Typ
AddCtorIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddCtorIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddCtorIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType().GetElementType())
AddCtorIL.MarkSequencePoint(doc6, 292, 1, 292, 100)
AddCtorIL.Emit(OpCodes.Br, cont15)
AddCtorIL.MarkLabel(fa15)
AddCtorIL.Emit(OpCodes.Br, cont15)
AddCtorIL.MarkLabel(cont15)
AddCtorIL.MarkSequencePoint(doc6, 294, 1, 294, 100)
AddCtorIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
Dim fa16 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
Dim tru16 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
Dim cont16 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
AddCtorIL.Emit(OpCodes.Beq, tru16)
AddCtorIL.Emit(OpCodes.Br, fa16)
AddCtorIL.MarkLabel(tru16)
AddCtorIL.MarkSequencePoint(doc6, 295, 1, 295, 100)
AddCtorIL.Emit(OpCodes.Br, label11)
AddCtorIL.MarkSequencePoint(doc6, 296, 1, 296, 100)
AddCtorIL.Emit(OpCodes.Br, cont16)
AddCtorIL.MarkLabel(fa16)
AddCtorIL.MarkSequencePoint(doc6, 297, 1, 297, 100)
AddCtorIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa17 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
Dim tru17 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
Dim cont17 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
AddCtorIL.Emit(OpCodes.Beq, fa17)
AddCtorIL.Emit(OpCodes.Br, tru17)
AddCtorIL.MarkLabel(tru17)
AddCtorIL.MarkSequencePoint(doc6, 298, 1, 298, 100)
AddCtorIL.Emit(OpCodes.Br, label10)
AddCtorIL.MarkSequencePoint(doc6, 299, 1, 299, 100)
AddCtorIL.Emit(OpCodes.Br, cont17)
AddCtorIL.MarkLabel(fa17)
AddCtorIL.MarkSequencePoint(doc6, 300, 1, 300, 100)
AddCtorIL.Emit(OpCodes.Br, label11)
AddCtorIL.MarkSequencePoint(doc6, 301, 1, 301, 100)
AddCtorIL.Emit(OpCodes.Br, cont17)
AddCtorIL.MarkLabel(cont17)
AddCtorIL.MarkSequencePoint(doc6, 302, 1, 302, 100)
AddCtorIL.Emit(OpCodes.Br, cont16)
AddCtorIL.MarkLabel(cont16)
AddCtorIL.MarkSequencePoint(doc6, 304, 1, 304, 100)
AddCtorIL.MarkLabel(label11)
AddCtorIL.MarkSequencePoint(doc6, 306, 1, 306, 100)
AddCtorIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType()
Typ02 = Typ
AddCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddCtorIL.Emit(OpCodes.Ldloc, 0)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem")
AddCtorIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType().GetElementType())
AddCtorIL.MarkSequencePoint(doc6, 308, 1, 308, 100)
AddCtorIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType()
AddCtorIL.Emit(OpCodes.Stsfld, CtorLst)
AddCtorIL.MarkSequencePoint(doc6, 310, 1, 310, 100)
AddCtorIL.Emit(OpCodes.Ret)
Dim typ12(-1) As Type
ReDim Preserve typ12(UBound(typ12) + 1)
typ12(UBound(typ12)) = GetType(System.Type).MakeArrayType()
ReDim Preserve typ12(UBound(typ12) + 1)
typ12(UBound(typ12)) = GetType(ConstructorBuilder)
Dim AddNestedCtor As MethodBuilder = SymTable.DefineMethod("AddNestedCtor", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ12)
Dim AddNestedCtorIL As ILGenerator = AddNestedCtor.GetILGenerator()
Dim AddNestedCtorparam01 As ParameterBuilder = AddNestedCtor.DefineParameter(1, ParameterAttributes.None, "ptyps")
Dim AddNestedCtorparam02 As ParameterBuilder = AddNestedCtor.DefineParameter(2, ParameterAttributes.None, "met")
AddNestedCtorIL.MarkSequencePoint(doc6, 315, 1, 315, 100)
Dim locbldr36 As LocalBuilder = AddNestedCtorIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
locbldr36.SetLocalSymInfo("vr")
Dim typ13(-1) As Type
AddNestedCtorIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ13(UBound(typ13) + 1)
typ13(UBound(typ13)) = Typ
AddNestedCtorIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(ConstructorBuilder)
ReDim Preserve typ13(UBound(typ13) + 1)
typ13(UBound(typ13)) = Typ
AddNestedCtorIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").GetConstructor(typ13))
AddNestedCtorIL.Emit(OpCodes.Stloc, 0)
AddNestedCtorIL.MarkSequencePoint(doc6, 317, 1, 317, 100)
Dim locbldr37 As LocalBuilder = AddNestedCtorIL.DeclareLocal(GetType(System.Int32))
locbldr37.SetLocalSymInfo("len")
AddNestedCtorIL.Emit(OpCodes.Ldsfld, NestedCtorLst)
Typ = NestedCtorLst.FieldType
AddNestedCtorIL.Emit(OpCodes.Ldlen)
AddNestedCtorIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Stloc, 1)
AddNestedCtorIL.MarkSequencePoint(doc6, 318, 1, 318, 100)
Dim locbldr38 As LocalBuilder = AddNestedCtorIL.DeclareLocal(GetType(System.Int32))
locbldr38.SetLocalSymInfo("destl")
AddNestedCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Add)
AddNestedCtorIL.Emit(OpCodes.Stloc, 2)
AddNestedCtorIL.MarkSequencePoint(doc6, 319, 1, 319, 100)
Dim locbldr39 As LocalBuilder = AddNestedCtorIL.DeclareLocal(GetType(System.Int32))
locbldr39.SetLocalSymInfo("stopel")
AddNestedCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Sub)
AddNestedCtorIL.Emit(OpCodes.Stloc, 3)
AddNestedCtorIL.MarkSequencePoint(doc6, 320, 1, 320, 100)
Dim locbldr40 As LocalBuilder = AddNestedCtorIL.DeclareLocal(GetType(System.Int32))
locbldr40.SetLocalSymInfo("i")
AddNestedCtorIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Stloc, 4)
AddNestedCtorIL.MarkSequencePoint(doc6, 322, 1, 322, 100)
Dim locbldr41 As LocalBuilder = AddNestedCtorIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType())
locbldr41.SetLocalSymInfo("destarr")
AddNestedCtorIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Conv_U)
AddNestedCtorIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
AddNestedCtorIL.Emit(OpCodes.Stloc, 5)
AddNestedCtorIL.MarkSequencePoint(doc6, 324, 1, 324, 100)
Dim label12 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
AddNestedCtorIL.MarkSequencePoint(doc6, 325, 1, 325, 100)
Dim label13 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
AddNestedCtorIL.MarkSequencePoint(doc6, 327, 1, 327, 100)
AddNestedCtorIL.MarkLabel(label12)
AddNestedCtorIL.MarkSequencePoint(doc6, 329, 1, 329, 100)
AddNestedCtorIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Add)
AddNestedCtorIL.Emit(OpCodes.Stloc, 4)
AddNestedCtorIL.MarkSequencePoint(doc6, 331, 1, 331, 100)
AddNestedCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa18 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
Dim tru18 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
Dim cont18 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
AddNestedCtorIL.Emit(OpCodes.Bgt, tru18)
AddNestedCtorIL.Emit(OpCodes.Br, fa18)
AddNestedCtorIL.MarkLabel(tru18)
AddNestedCtorIL.MarkSequencePoint(doc6, 333, 1, 333, 100)
AddNestedCtorIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType()
Typ02 = Typ
AddNestedCtorIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNestedCtorIL.Emit(OpCodes.Ldsfld, NestedCtorLst)
Typ = NestedCtorLst.FieldType
Typ02 = Typ
AddNestedCtorIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNestedCtorIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddNestedCtorIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType().GetElementType())
AddNestedCtorIL.MarkSequencePoint(doc6, 335, 1, 335, 100)
AddNestedCtorIL.Emit(OpCodes.Br, cont18)
AddNestedCtorIL.MarkLabel(fa18)
AddNestedCtorIL.Emit(OpCodes.Br, cont18)
AddNestedCtorIL.MarkLabel(cont18)
AddNestedCtorIL.MarkSequencePoint(doc6, 337, 1, 337, 100)
AddNestedCtorIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
Dim fa19 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
Dim tru19 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
Dim cont19 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
AddNestedCtorIL.Emit(OpCodes.Beq, tru19)
AddNestedCtorIL.Emit(OpCodes.Br, fa19)
AddNestedCtorIL.MarkLabel(tru19)
AddNestedCtorIL.MarkSequencePoint(doc6, 338, 1, 338, 100)
AddNestedCtorIL.Emit(OpCodes.Br, label13)
AddNestedCtorIL.MarkSequencePoint(doc6, 339, 1, 339, 100)
AddNestedCtorIL.Emit(OpCodes.Br, cont19)
AddNestedCtorIL.MarkLabel(fa19)
AddNestedCtorIL.MarkSequencePoint(doc6, 340, 1, 340, 100)
AddNestedCtorIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa20 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
Dim tru20 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
Dim cont20 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
AddNestedCtorIL.Emit(OpCodes.Beq, fa20)
AddNestedCtorIL.Emit(OpCodes.Br, tru20)
AddNestedCtorIL.MarkLabel(tru20)
AddNestedCtorIL.MarkSequencePoint(doc6, 341, 1, 341, 100)
AddNestedCtorIL.Emit(OpCodes.Br, label12)
AddNestedCtorIL.MarkSequencePoint(doc6, 342, 1, 342, 100)
AddNestedCtorIL.Emit(OpCodes.Br, cont20)
AddNestedCtorIL.MarkLabel(fa20)
AddNestedCtorIL.MarkSequencePoint(doc6, 343, 1, 343, 100)
AddNestedCtorIL.Emit(OpCodes.Br, label13)
AddNestedCtorIL.MarkSequencePoint(doc6, 344, 1, 344, 100)
AddNestedCtorIL.Emit(OpCodes.Br, cont20)
AddNestedCtorIL.MarkLabel(cont20)
AddNestedCtorIL.MarkSequencePoint(doc6, 345, 1, 345, 100)
AddNestedCtorIL.Emit(OpCodes.Br, cont19)
AddNestedCtorIL.MarkLabel(cont19)
AddNestedCtorIL.MarkSequencePoint(doc6, 347, 1, 347, 100)
AddNestedCtorIL.MarkLabel(label13)
AddNestedCtorIL.MarkSequencePoint(doc6, 349, 1, 349, 100)
AddNestedCtorIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType()
Typ02 = Typ
AddNestedCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNestedCtorIL.Emit(OpCodes.Ldloc, 0)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem")
AddNestedCtorIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType().GetElementType())
AddNestedCtorIL.MarkSequencePoint(doc6, 351, 1, 351, 100)
AddNestedCtorIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType()
AddNestedCtorIL.Emit(OpCodes.Stsfld, NestedCtorLst)
AddNestedCtorIL.MarkSequencePoint(doc6, 353, 1, 353, 100)
AddNestedCtorIL.Emit(OpCodes.Ret)
Dim typ14(-1) As Type
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = GetType(System.String)
Dim FindVar As MethodBuilder = SymTable.DefineMethod("FindVar", MethodAttributes.Public Or MethodAttributes.Static, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"), typ14)
Dim FindVarIL As ILGenerator = FindVar.GetILGenerator()
Dim FindVarparam01 As ParameterBuilder = FindVar.DefineParameter(1, ParameterAttributes.None, "nam")
FindVarIL.MarkSequencePoint(doc6, 357, 1, 357, 100)
Dim locbldr42 As LocalBuilder = FindVarIL.DeclareLocal(GetType(System.Int32))
locbldr42.SetLocalSymInfo("len")
FindVarIL.Emit(OpCodes.Ldsfld, VarLst)
Typ = VarLst.FieldType
FindVarIL.Emit(OpCodes.Ldlen)
FindVarIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Sub)
FindVarIL.Emit(OpCodes.Stloc, 0)
FindVarIL.MarkSequencePoint(doc6, 358, 1, 358, 100)
Dim locbldr43 As LocalBuilder = FindVarIL.DeclareLocal(GetType(System.Int32))
locbldr43.SetLocalSymInfo("i")
FindVarIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Stloc, 1)
FindVarIL.MarkSequencePoint(doc6, 359, 1, 359, 100)
Dim locbldr44 As LocalBuilder = FindVarIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"))
locbldr44.SetLocalSymInfo("vr")
FindVarIL.Emit(OpCodes.Ldnull)
FindVarIL.Emit(OpCodes.Stloc, 2)
FindVarIL.MarkSequencePoint(doc6, 360, 1, 360, 100)
Dim locbldr45 As LocalBuilder = FindVarIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"))
locbldr45.SetLocalSymInfo("rvr")
FindVarIL.Emit(OpCodes.Ldnull)
FindVarIL.Emit(OpCodes.Stloc, 3)
FindVarIL.MarkSequencePoint(doc6, 361, 1, 361, 100)
Dim locbldr46 As LocalBuilder = FindVarIL.DeclareLocal(GetType(System.Int32))
locbldr46.SetLocalSymInfo("comp")
FindVarIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Stloc, 4)
FindVarIL.MarkSequencePoint(doc6, 363, 1, 363, 100)
Dim label14 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
FindVarIL.MarkSequencePoint(doc6, 364, 1, 364, 100)
Dim label15 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
FindVarIL.MarkSequencePoint(doc6, 366, 1, 366, 100)
FindVarIL.MarkLabel(label15)
FindVarIL.MarkSequencePoint(doc6, 368, 1, 368, 100)
FindVarIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Add)
FindVarIL.Emit(OpCodes.Stloc, 1)
FindVarIL.MarkSequencePoint(doc6, 370, 1, 370, 100)
FindVarIL.Emit(OpCodes.Ldsfld, VarLst)
Typ = VarLst.FieldType
Typ02 = Typ
FindVarIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Conv_U)
Typ = Typ02
FindVarIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
FindVarIL.Emit(OpCodes.Stloc, 2)
FindVarIL.MarkSequencePoint(doc6, 371, 1, 371, 100)
Dim typ15(-1) As Type
FindVarIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ15(UBound(typ15) + 1)
typ15(UBound(typ15)) = Typ
FindVarIL.Emit(OpCodes.Ldloc, 2)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
FindVarIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("Name"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("Name").FieldType
ReDim Preserve typ15(UBound(typ15) + 1)
typ15(UBound(typ15)) = Typ
FindVarIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ15))
Typ = GetType(String).GetMethod("Compare", typ15).ReturnType
FindVarIL.Emit(OpCodes.Stloc, 4)
FindVarIL.MarkSequencePoint(doc6, 372, 1, 372, 100)
FindVarIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa21 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
Dim tru21 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
Dim cont21 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
FindVarIL.Emit(OpCodes.Beq, tru21)
FindVarIL.Emit(OpCodes.Br, fa21)
FindVarIL.MarkLabel(tru21)
FindVarIL.MarkSequencePoint(doc6, 373, 1, 373, 100)
FindVarIL.Emit(OpCodes.Ldloc, 2)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
FindVarIL.Emit(OpCodes.Stloc, 3)
FindVarIL.MarkSequencePoint(doc6, 374, 1, 374, 100)
FindVarIL.Emit(OpCodes.Br, label14)
FindVarIL.MarkSequencePoint(doc6, 375, 1, 375, 100)
FindVarIL.Emit(OpCodes.Br, cont21)
FindVarIL.MarkLabel(fa21)
FindVarIL.Emit(OpCodes.Br, cont21)
FindVarIL.MarkLabel(cont21)
FindVarIL.MarkSequencePoint(doc6, 377, 1, 377, 100)
FindVarIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
Dim fa22 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
Dim tru22 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
Dim cont22 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
FindVarIL.Emit(OpCodes.Beq, tru22)
FindVarIL.Emit(OpCodes.Br, fa22)
FindVarIL.MarkLabel(tru22)
FindVarIL.MarkSequencePoint(doc6, 378, 1, 378, 100)
FindVarIL.Emit(OpCodes.Br, label14)
FindVarIL.MarkSequencePoint(doc6, 379, 1, 379, 100)
FindVarIL.Emit(OpCodes.Br, cont22)
FindVarIL.MarkLabel(fa22)
FindVarIL.MarkSequencePoint(doc6, 380, 1, 380, 100)
FindVarIL.Emit(OpCodes.Br, label15)
FindVarIL.MarkSequencePoint(doc6, 381, 1, 381, 100)
FindVarIL.Emit(OpCodes.Br, cont22)
FindVarIL.MarkLabel(cont22)
FindVarIL.MarkSequencePoint(doc6, 383, 1, 383, 100)
FindVarIL.MarkLabel(label14)
FindVarIL.MarkSequencePoint(doc6, 385, 1, 385, 100)
FindVarIL.Emit(OpCodes.Ldloc, 3)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
FindVarIL.MarkSequencePoint(doc6, 386, 1, 386, 100)
FindVarIL.Emit(OpCodes.Ret)
SymTable.CreateType()
End Sub


Dim doc7 As ISymbolDocumentWriter

Sub Helpers()
Dim Helpers As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "Helpers", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(Attributes.Attribute).MakeArrayType()
Dim ProcessClassAttrs As MethodBuilder = Helpers.DefineMethod("ProcessClassAttrs", MethodAttributes.Public Or MethodAttributes.Static, GetType(TypeAttributes), typ0)
Dim ProcessClassAttrsIL As ILGenerator = ProcessClassAttrs.GetILGenerator()
Dim ProcessClassAttrsparam01 As ParameterBuilder = ProcessClassAttrs.DefineParameter(1, ParameterAttributes.None, "attrs")
ProcessClassAttrsIL.MarkSequencePoint(doc7, 12, 1, 12, 100)
Dim locbldr47 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(TypeAttributes))
locbldr47.SetLocalSymInfo("ta")
ProcessClassAttrsIL.MarkSequencePoint(doc7, 13, 1, 13, 100)
Dim locbldr48 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(TypeAttributes))
locbldr48.SetLocalSymInfo("temp")
ProcessClassAttrsIL.MarkSequencePoint(doc7, 15, 1, 15, 100)
Dim label0 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.MarkSequencePoint(doc7, 16, 1, 16, 100)
Dim label1 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.MarkSequencePoint(doc7, 17, 1, 17, 100)
Dim label2 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.MarkSequencePoint(doc7, 19, 1, 19, 100)
Dim locbldr49 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(System.Int32))
locbldr49.SetLocalSymInfo("len")
ProcessClassAttrsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Attributes.Attribute).MakeArrayType()
ProcessClassAttrsIL.Emit(OpCodes.Ldlen)
ProcessClassAttrsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Sub)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 2)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 20, 1, 20, 100)
Dim locbldr50 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(System.Int32))
locbldr50.SetLocalSymInfo("i")
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 3)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 21, 1, 21, 100)
Dim locbldr51 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(System.Boolean))
locbldr51.SetLocalSymInfo("b")
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 22, 1, 22, 100)
Dim locbldr52 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(System.Type))
locbldr52.SetLocalSymInfo("typ")
ProcessClassAttrsIL.MarkSequencePoint(doc7, 23, 1, 23, 100)
Dim locbldr53 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(Attributes.Attribute))
locbldr53.SetLocalSymInfo("curattr")
ProcessClassAttrsIL.Emit(OpCodes.Ldnull)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 6)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 24, 1, 24, 100)
Dim locbldr54 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(System.Boolean))
locbldr54.SetLocalSymInfo("fir")
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 26, 1, 26, 100)
ProcessClassAttrsIL.MarkLabel(label0)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 28, 1, 28, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Add)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 3)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 30, 1, 30, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Attributes.Attribute).MakeArrayType()
Typ02 = Typ
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ProcessClassAttrsIL.Emit(OpCodes.Ldelem, GetType(Attributes.Attribute).MakeArrayType().GetElementType())
Typ = GetType(Attributes.Attribute).MakeArrayType().GetElementType()
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 6)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 32, 1, 32, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.PublicAttr))
Dim typ1 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessClassAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ1))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ1).ReturnType
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 33, 1, 33, 100)
Dim typ2(-1) As Type
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessClassAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = Typ
ProcessClassAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ2))
Typ = Typ03.GetMethod("IsInstanceOfType", typ2).ReturnType
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 35, 1, 35, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa23 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru23 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont23 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru23)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa23)
ProcessClassAttrsIL.MarkLabel(tru23)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 36, 1, 36, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa24 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru24 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont24 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru24)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa24)
ProcessClassAttrsIL.MarkLabel(tru24)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 37, 1, 37, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 38, 1, 38, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont24)
ProcessClassAttrsIL.MarkLabel(fa24)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 39, 1, 39, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 40, 1, 40, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont24)
ProcessClassAttrsIL.MarkLabel(cont24)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 41, 1, 41, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa25 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru25 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont25 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru25)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa25)
ProcessClassAttrsIL.MarkLabel(tru25)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 42, 1, 42, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.And)
ProcessClassAttrsIL.Emit(OpCodes.Not)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 43, 1, 43, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 44, 1, 44, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont25)
ProcessClassAttrsIL.MarkLabel(fa25)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 45, 1, 45, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Or)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 46, 1, 46, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont25)
ProcessClassAttrsIL.MarkLabel(cont25)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 47, 1, 47, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, label2)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 48, 1, 48, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont23)
ProcessClassAttrsIL.MarkLabel(fa23)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont23)
ProcessClassAttrsIL.MarkLabel(cont23)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 50, 1, 50, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.AutoLayoutAttr))
Dim typ3 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessClassAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ3))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ3).ReturnType
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 51, 1, 51, 100)
Dim typ4(-1) As Type
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessClassAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
ProcessClassAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ4))
Typ = Typ03.GetMethod("IsInstanceOfType", typ4).ReturnType
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 53, 1, 53, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa26 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru26 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont26 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru26)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa26)
ProcessClassAttrsIL.MarkLabel(tru26)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 54, 1, 54, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 55, 1, 55, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa27 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru27 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont27 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru27)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa27)
ProcessClassAttrsIL.MarkLabel(tru27)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 56, 1, 56, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.And)
ProcessClassAttrsIL.Emit(OpCodes.Not)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 57, 1, 57, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 58, 1, 58, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont27)
ProcessClassAttrsIL.MarkLabel(fa27)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 59, 1, 59, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Or)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 60, 1, 60, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont27)
ProcessClassAttrsIL.MarkLabel(cont27)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 61, 1, 61, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, label2)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 62, 1, 62, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont26)
ProcessClassAttrsIL.MarkLabel(fa26)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont26)
ProcessClassAttrsIL.MarkLabel(cont26)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 64, 1, 64, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.AnsiClassAttr))
Dim typ5 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessClassAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ5))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ5).ReturnType
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 65, 1, 65, 100)
Dim typ6(-1) As Type
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessClassAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = Typ
ProcessClassAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ6))
Typ = Typ03.GetMethod("IsInstanceOfType", typ6).ReturnType
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 67, 1, 67, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa28 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru28 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont28 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru28)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa28)
ProcessClassAttrsIL.MarkLabel(tru28)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 68, 1, 68, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 69, 1, 69, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa29 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru29 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont29 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru29)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa29)
ProcessClassAttrsIL.MarkLabel(tru29)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 70, 1, 70, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.And)
ProcessClassAttrsIL.Emit(OpCodes.Not)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 71, 1, 71, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 72, 1, 72, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont29)
ProcessClassAttrsIL.MarkLabel(fa29)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 73, 1, 73, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Or)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 74, 1, 74, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont29)
ProcessClassAttrsIL.MarkLabel(cont29)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 75, 1, 75, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, label2)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 76, 1, 76, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont28)
ProcessClassAttrsIL.MarkLabel(fa28)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont28)
ProcessClassAttrsIL.MarkLabel(cont28)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 78, 1, 78, 100)
ProcessClassAttrsIL.MarkLabel(label2)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 80, 1, 80, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa30 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru30 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont30 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru30)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa30)
ProcessClassAttrsIL.MarkLabel(tru30)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 81, 1, 81, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, label1)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 82, 1, 82, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont30)
ProcessClassAttrsIL.MarkLabel(fa30)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 83, 1, 83, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, label0)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 84, 1, 84, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont30)
ProcessClassAttrsIL.MarkLabel(cont30)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 87, 1, 87, 100)
ProcessClassAttrsIL.MarkLabel(label1)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 90, 1, 90, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.MarkSequencePoint(doc7, 91, 1, 91, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ret)
Dim typ7(-1) As Type
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = GetType(Attributes.Attribute).MakeArrayType()
Dim ProcessMethodAttrs As MethodBuilder = Helpers.DefineMethod("ProcessMethodAttrs", MethodAttributes.Public Or MethodAttributes.Static, GetType(MethodAttributes), typ7)
Dim ProcessMethodAttrsIL As ILGenerator = ProcessMethodAttrs.GetILGenerator()
Dim ProcessMethodAttrsparam01 As ParameterBuilder = ProcessMethodAttrs.DefineParameter(1, ParameterAttributes.None, "attrs")
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 94, 1, 94, 100)
Dim locbldr55 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(MethodAttributes))
locbldr55.SetLocalSymInfo("ta")
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 95, 1, 95, 100)
Dim locbldr56 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(MethodAttributes))
locbldr56.SetLocalSymInfo("temp")
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 97, 1, 97, 100)
Dim label3 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 98, 1, 98, 100)
Dim label4 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 99, 1, 99, 100)
Dim label5 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 101, 1, 101, 100)
Dim locbldr57 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(System.Int32))
locbldr57.SetLocalSymInfo("len")
ProcessMethodAttrsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Attributes.Attribute).MakeArrayType()
ProcessMethodAttrsIL.Emit(OpCodes.Ldlen)
ProcessMethodAttrsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Sub)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 2)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 102, 1, 102, 100)
Dim locbldr58 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(System.Int32))
locbldr58.SetLocalSymInfo("i")
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 3)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 103, 1, 103, 100)
Dim locbldr59 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(System.Boolean))
locbldr59.SetLocalSymInfo("b")
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 104, 1, 104, 100)
Dim locbldr60 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(System.Type))
locbldr60.SetLocalSymInfo("typ")
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 105, 1, 105, 100)
Dim locbldr61 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(Attributes.Attribute))
locbldr61.SetLocalSymInfo("curattr")
ProcessMethodAttrsIL.Emit(OpCodes.Ldnull)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 6)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 106, 1, 106, 100)
Dim locbldr62 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(System.Boolean))
locbldr62.SetLocalSymInfo("fir")
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 108, 1, 108, 100)
ProcessMethodAttrsIL.MarkLabel(label3)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 110, 1, 110, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Add)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 3)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 112, 1, 112, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Attributes.Attribute).MakeArrayType()
Typ02 = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ProcessMethodAttrsIL.Emit(OpCodes.Ldelem, GetType(Attributes.Attribute).MakeArrayType().GetElementType())
Typ = GetType(Attributes.Attribute).MakeArrayType().GetElementType()
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 6)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 114, 1, 114, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.PublicAttr))
Dim typ8 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessMethodAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ8))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ8).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 115, 1, 115, 100)
Dim typ9(-1) As Type
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessMethodAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ9))
Typ = Typ03.GetMethod("IsInstanceOfType", typ9).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 117, 1, 117, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa31 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru31 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont31 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru31)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa31)
ProcessMethodAttrsIL.MarkLabel(tru31)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 118, 1, 118, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, CInt(6))
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 119, 1, 119, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa32 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru32 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont32 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru32)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa32)
ProcessMethodAttrsIL.MarkLabel(tru32)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 120, 1, 120, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.And)
ProcessMethodAttrsIL.Emit(OpCodes.Not)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 121, 1, 121, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 122, 1, 122, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont32)
ProcessMethodAttrsIL.MarkLabel(fa32)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 123, 1, 123, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Or)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 124, 1, 124, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont32)
ProcessMethodAttrsIL.MarkLabel(cont32)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 125, 1, 125, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, label5)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 126, 1, 126, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont31)
ProcessMethodAttrsIL.MarkLabel(fa31)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont31)
ProcessMethodAttrsIL.MarkLabel(cont31)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 128, 1, 128, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.StaticAttr))
Dim typ10 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessMethodAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ10))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ10).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 129, 1, 129, 100)
Dim typ11(-1) As Type
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessMethodAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ11(UBound(typ11) + 1)
typ11(UBound(typ11)) = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ11))
Typ = Typ03.GetMethod("IsInstanceOfType", typ11).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 131, 1, 131, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa33 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru33 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont33 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru33)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa33)
ProcessMethodAttrsIL.MarkLabel(tru33)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 132, 1, 132, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, CInt(16))
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 133, 1, 133, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Stsfld, GetType(ILEmitter).GetField("StaticFlg"))
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 134, 1, 134, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa34 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru34 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont34 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru34)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa34)
ProcessMethodAttrsIL.MarkLabel(tru34)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 135, 1, 135, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.And)
ProcessMethodAttrsIL.Emit(OpCodes.Not)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 136, 1, 136, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 137, 1, 137, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont34)
ProcessMethodAttrsIL.MarkLabel(fa34)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 138, 1, 138, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Or)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 139, 1, 139, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont34)
ProcessMethodAttrsIL.MarkLabel(cont34)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 140, 1, 140, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, label5)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 141, 1, 141, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont33)
ProcessMethodAttrsIL.MarkLabel(fa33)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont33)
ProcessMethodAttrsIL.MarkLabel(cont33)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 143, 1, 143, 100)
ProcessMethodAttrsIL.MarkLabel(label5)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 145, 1, 145, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa35 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru35 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont35 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru35)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa35)
ProcessMethodAttrsIL.MarkLabel(tru35)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 146, 1, 146, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, label4)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 147, 1, 147, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont35)
ProcessMethodAttrsIL.MarkLabel(fa35)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 148, 1, 148, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, label3)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 149, 1, 149, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont35)
ProcessMethodAttrsIL.MarkLabel(cont35)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 152, 1, 152, 100)
ProcessMethodAttrsIL.MarkLabel(label4)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 155, 1, 155, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.MarkSequencePoint(doc7, 156, 1, 156, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ret)
Dim typ12(-1) As Type
ReDim Preserve typ12(UBound(typ12) + 1)
typ12(UBound(typ12)) = GetType(Attributes.Attribute).MakeArrayType()
Dim ProcessFieldAttrs As MethodBuilder = Helpers.DefineMethod("ProcessFieldAttrs", MethodAttributes.Public Or MethodAttributes.Static, GetType(FieldAttributes), typ12)
Dim ProcessFieldAttrsIL As ILGenerator = ProcessFieldAttrs.GetILGenerator()
Dim ProcessFieldAttrsparam01 As ParameterBuilder = ProcessFieldAttrs.DefineParameter(1, ParameterAttributes.None, "attrs")
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 160, 1, 160, 100)
Dim locbldr63 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(FieldAttributes))
locbldr63.SetLocalSymInfo("ta")
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 161, 1, 161, 100)
Dim locbldr64 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(FieldAttributes))
locbldr64.SetLocalSymInfo("temp")
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 163, 1, 163, 100)
Dim label6 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 164, 1, 164, 100)
Dim label7 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 165, 1, 165, 100)
Dim label8 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 167, 1, 167, 100)
Dim locbldr65 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(System.Int32))
locbldr65.SetLocalSymInfo("len")
ProcessFieldAttrsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Attributes.Attribute).MakeArrayType()
ProcessFieldAttrsIL.Emit(OpCodes.Ldlen)
ProcessFieldAttrsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Sub)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 2)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 168, 1, 168, 100)
Dim locbldr66 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(System.Int32))
locbldr66.SetLocalSymInfo("i")
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 3)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 169, 1, 169, 100)
Dim locbldr67 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(System.Boolean))
locbldr67.SetLocalSymInfo("b")
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 170, 1, 170, 100)
Dim locbldr68 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(System.Type))
locbldr68.SetLocalSymInfo("typ")
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 171, 1, 171, 100)
Dim locbldr69 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(Attributes.Attribute))
locbldr69.SetLocalSymInfo("curattr")
ProcessFieldAttrsIL.Emit(OpCodes.Ldnull)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 6)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 172, 1, 172, 100)
Dim locbldr70 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(System.Boolean))
locbldr70.SetLocalSymInfo("fir")
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 174, 1, 174, 100)
ProcessFieldAttrsIL.MarkLabel(label6)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 176, 1, 176, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Add)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 3)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 178, 1, 178, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Attributes.Attribute).MakeArrayType()
Typ02 = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ProcessFieldAttrsIL.Emit(OpCodes.Ldelem, GetType(Attributes.Attribute).MakeArrayType().GetElementType())
Typ = GetType(Attributes.Attribute).MakeArrayType().GetElementType()
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 6)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 180, 1, 180, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.PublicAttr))
Dim typ13 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessFieldAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ13))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ13).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 181, 1, 181, 100)
Dim typ14(-1) As Type
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessFieldAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ14))
Typ = Typ03.GetMethod("IsInstanceOfType", typ14).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 183, 1, 183, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa36 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru36 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont36 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru36)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa36)
ProcessFieldAttrsIL.MarkLabel(tru36)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 184, 1, 184, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(6))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 185, 1, 185, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa37 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru37 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont37 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru37)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa37)
ProcessFieldAttrsIL.MarkLabel(tru37)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 186, 1, 186, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.And)
ProcessFieldAttrsIL.Emit(OpCodes.Not)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 187, 1, 187, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 188, 1, 188, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont37)
ProcessFieldAttrsIL.MarkLabel(fa37)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 189, 1, 189, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Or)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 190, 1, 190, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont37)
ProcessFieldAttrsIL.MarkLabel(cont37)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 191, 1, 191, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, label8)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 192, 1, 192, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont36)
ProcessFieldAttrsIL.MarkLabel(fa36)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont36)
ProcessFieldAttrsIL.MarkLabel(cont36)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 194, 1, 194, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.StaticAttr))
Dim typ15 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessFieldAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ15))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ15).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 195, 1, 195, 100)
Dim typ16(-1) As Type
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessFieldAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ16(UBound(typ16) + 1)
typ16(UBound(typ16)) = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ16))
Typ = Typ03.GetMethod("IsInstanceOfType", typ16).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 197, 1, 197, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa38 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru38 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont38 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru38)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa38)
ProcessFieldAttrsIL.MarkLabel(tru38)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 198, 1, 198, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(16))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 199, 1, 199, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa39 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru39 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont39 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru39)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa39)
ProcessFieldAttrsIL.MarkLabel(tru39)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 200, 1, 200, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.And)
ProcessFieldAttrsIL.Emit(OpCodes.Not)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 201, 1, 201, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 202, 1, 202, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont39)
ProcessFieldAttrsIL.MarkLabel(fa39)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 203, 1, 203, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Or)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 204, 1, 204, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont39)
ProcessFieldAttrsIL.MarkLabel(cont39)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 205, 1, 205, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, label8)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 206, 1, 206, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont38)
ProcessFieldAttrsIL.MarkLabel(fa38)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont38)
ProcessFieldAttrsIL.MarkLabel(cont38)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 208, 1, 208, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.InitOnlyAttr))
Dim typ17 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessFieldAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ17))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ17).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 209, 1, 209, 100)
Dim typ18(-1) As Type
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessFieldAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ18(UBound(typ18) + 1)
typ18(UBound(typ18)) = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ18))
Typ = Typ03.GetMethod("IsInstanceOfType", typ18).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 211, 1, 211, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa40 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru40 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont40 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru40)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa40)
ProcessFieldAttrsIL.MarkLabel(tru40)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 212, 1, 212, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(32))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 213, 1, 213, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa41 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru41 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont41 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru41)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa41)
ProcessFieldAttrsIL.MarkLabel(tru41)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 214, 1, 214, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.And)
ProcessFieldAttrsIL.Emit(OpCodes.Not)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 215, 1, 215, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 216, 1, 216, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont41)
ProcessFieldAttrsIL.MarkLabel(fa41)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 217, 1, 217, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Or)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 218, 1, 218, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont41)
ProcessFieldAttrsIL.MarkLabel(cont41)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 219, 1, 219, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, label8)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 220, 1, 220, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont40)
ProcessFieldAttrsIL.MarkLabel(fa40)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont40)
ProcessFieldAttrsIL.MarkLabel(cont40)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 222, 1, 222, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.PrivateAttr))
Dim typ19 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessFieldAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ19))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ19).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 223, 1, 223, 100)
Dim typ20(-1) As Type
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessFieldAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ20(UBound(typ20) + 1)
typ20(UBound(typ20)) = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ20))
Typ = Typ03.GetMethod("IsInstanceOfType", typ20).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 225, 1, 225, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa42 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru42 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont42 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru42)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa42)
ProcessFieldAttrsIL.MarkLabel(tru42)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 226, 1, 226, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 227, 1, 227, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa43 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru43 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont43 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru43)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa43)
ProcessFieldAttrsIL.MarkLabel(tru43)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 228, 1, 228, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.And)
ProcessFieldAttrsIL.Emit(OpCodes.Not)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 229, 1, 229, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 230, 1, 230, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont43)
ProcessFieldAttrsIL.MarkLabel(fa43)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 231, 1, 231, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Or)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 232, 1, 232, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont43)
ProcessFieldAttrsIL.MarkLabel(cont43)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 233, 1, 233, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, label8)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 234, 1, 234, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont42)
ProcessFieldAttrsIL.MarkLabel(fa42)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont42)
ProcessFieldAttrsIL.MarkLabel(cont42)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 237, 1, 237, 100)
ProcessFieldAttrsIL.MarkLabel(label8)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 239, 1, 239, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa44 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru44 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont44 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru44)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa44)
ProcessFieldAttrsIL.MarkLabel(tru44)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 240, 1, 240, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, label7)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 241, 1, 241, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont44)
ProcessFieldAttrsIL.MarkLabel(fa44)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 242, 1, 242, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, label6)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 243, 1, 243, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont44)
ProcessFieldAttrsIL.MarkLabel(cont44)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 246, 1, 246, 100)
ProcessFieldAttrsIL.MarkLabel(label7)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 249, 1, 249, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.MarkSequencePoint(doc7, 250, 1, 250, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ret)
Dim typ21(-1) As Type
ReDim Preserve typ21(UBound(typ21) + 1)
typ21(UBound(typ21)) = GetType(TypeTok)
Dim EvalTTok As MethodBuilder = Helpers.DefineMethod("EvalTTok", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ21)
Dim EvalTTokIL As ILGenerator = EvalTTok.GetILGenerator()
Dim EvalTTokparam01 As ParameterBuilder = EvalTTok.DefineParameter(1, ParameterAttributes.None, "tt")
EvalTTokIL.MarkSequencePoint(doc7, 257, 1, 257, 100)
Dim locbldr71 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.Type).MakeArrayType())
locbldr71.SetLocalSymInfo("tarr")
EvalTTokIL.MarkSequencePoint(doc7, 258, 1, 258, 100)
Dim locbldr72 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.Type))
locbldr72.SetLocalSymInfo("typ")
EvalTTokIL.MarkSequencePoint(doc7, 259, 1, 259, 100)
Dim locbldr73 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.Type))
locbldr73.SetLocalSymInfo("temptyp")
EvalTTokIL.MarkSequencePoint(doc7, 260, 1, 260, 100)
Dim locbldr74 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(GenericTypeTok))
locbldr74.SetLocalSymInfo("gtt")
EvalTTokIL.MarkSequencePoint(doc7, 261, 1, 261, 100)
Dim locbldr75 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(TypeTok).MakeArrayType())
locbldr75.SetLocalSymInfo("pttoks")
EvalTTokIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Conv_U)
EvalTTokIL.Emit(OpCodes.Newarr, GetType(TypeTok))
EvalTTokIL.Emit(OpCodes.Stloc, 4)
EvalTTokIL.MarkSequencePoint(doc7, 262, 1, 262, 100)
Dim locbldr76 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(TypeTok))
locbldr76.SetLocalSymInfo("curpttok")
EvalTTokIL.Emit(OpCodes.Newobj, GetType(TypeToK).GetConstructor(Type.EmptyTypes))
EvalTTokIL.Emit(OpCodes.Stloc, 5)
EvalTTokIL.MarkSequencePoint(doc7, 263, 1, 263, 100)
Dim locbldr77 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.Int32))
locbldr77.SetLocalSymInfo("i")
EvalTTokIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Stloc, 6)
EvalTTokIL.MarkSequencePoint(doc7, 264, 1, 264, 100)
Dim locbldr78 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.Int32))
locbldr78.SetLocalSymInfo("len")
EvalTTokIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Stloc, 7)
EvalTTokIL.MarkSequencePoint(doc7, 265, 1, 265, 100)
Dim locbldr79 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.Int32))
locbldr79.SetLocalSymInfo("n")
EvalTTokIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Stloc, 8)
EvalTTokIL.MarkSequencePoint(doc7, 266, 1, 266, 100)
Dim locbldr80 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.String))
locbldr80.SetLocalSymInfo("tstr")
EvalTTokIL.Emit(OpCodes.Ldstr, " ")
Typ = GetType(System.String)
EvalTTokIL.Emit(OpCodes.Stloc, 9)
EvalTTokIL.MarkSequencePoint(doc7, 268, 1, 268, 100)
Dim locbldr81 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.Type))
locbldr81.SetLocalSymInfo("ttyp")
EvalTTokIL.Emit(OpCodes.Ldtoken, GetType(GenericTypeTok))
Dim typ22 As Type() = {GetType(System.RuntimeTypeHandle)}
EvalTTokIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ22))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ22).ReturnType
EvalTTokIL.Emit(OpCodes.Stloc, 10)
EvalTTokIL.MarkSequencePoint(doc7, 269, 1, 269, 100)
Dim locbldr82 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.Boolean))
locbldr82.SetLocalSymInfo("b")
Dim typ23(-1) As Type
EvalTTokIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(System.Type)
Typ03 = Typ
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ23(UBound(typ23) + 1)
typ23(UBound(typ23)) = Typ
EvalTTokIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ23))
Typ = Typ03.GetMethod("IsInstanceOfType", typ23).ReturnType
EvalTTokIL.Emit(OpCodes.Stloc, 11)
EvalTTokIL.MarkSequencePoint(doc7, 271, 1, 271, 100)
Dim label9 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
EvalTTokIL.MarkSequencePoint(doc7, 272, 1, 272, 100)
Dim label10 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
EvalTTokIL.MarkSequencePoint(doc7, 274, 1, 274, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Boolean)
EvalTTokIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa45 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
Dim tru45 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
Dim cont45 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
EvalTTokIL.Emit(OpCodes.Beq, fa45)
EvalTTokIL.Emit(OpCodes.Br, tru45)
EvalTTokIL.MarkLabel(tru45)
EvalTTokIL.MarkSequencePoint(doc7, 276, 1, 276, 100)
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Stloc, 3)
EvalTTokIL.MarkSequencePoint(doc7, 277, 1, 277, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(GenericTypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(GenericTypeTok).GetField("Params"))
Typ = GetType(GenericTypeTok).GetField("Params").FieldType
EvalTTokIL.Emit(OpCodes.Stloc, 4)
EvalTTokIL.MarkSequencePoint(doc7, 278, 1, 278, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(TypeTok).MakeArrayType()
EvalTTokIL.Emit(OpCodes.Ldlen)
EvalTTokIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Stloc, 8)
EvalTTokIL.MarkSequencePoint(doc7, 279, 1, 279, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Sub)
EvalTTokIL.Emit(OpCodes.Stloc, 7)
EvalTTokIL.MarkSequencePoint(doc7, 281, 1, 281, 100)
EvalTTokIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
EvalTTokIL.Emit(OpCodes.Stloc, 0)
EvalTTokIL.MarkSequencePoint(doc7, 282, 1, 282, 100)
EvalTTokIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Conv_U)
EvalTTokIL.Emit(OpCodes.Newarr, GetType(System.Type))
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("TypArr"))
EvalTTokIL.MarkSequencePoint(doc7, 284, 1, 284, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(GenericTypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(GenericTypeTok).GetField("IsArray"))
Typ = GetType(GenericTypeTok).GetField("IsArray").FieldType
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeArr"))
EvalTTokIL.MarkSequencePoint(doc7, 285, 1, 285, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(GenericTypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(GenericTypeTok).GetField("IsByRef"))
Typ = GetType(GenericTypeTok).GetField("IsByRef").FieldType
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeRef"))
EvalTTokIL.MarkSequencePoint(doc7, 286, 1, 286, 100)
Dim typ24(-1) As Type
EvalTTokIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(GenericTypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(GenericTypeTok).GetField("Value"))
Typ = GetType(GenericTypeTok).GetField("Value").FieldType
ReDim Preserve typ24(UBound(typ24) + 1)
typ24(UBound(typ24)) = Typ
EvalTTokIL.Emit(OpCodes.Ldstr, "`")
Typ = GetType(System.String)
ReDim Preserve typ24(UBound(typ24) + 1)
typ24(UBound(typ24)) = Typ
EvalTTokIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Int32)
Dim typ25 As Type() = {Typ}
EvalTTokIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToString", typ25))
Typ = GetType(System.Convert).GetMethod("ToString", typ25).ReturnType
ReDim Preserve typ24(UBound(typ24) + 1)
typ24(UBound(typ24)) = Typ
EvalTTokIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ24))
Typ = GetType(String).GetMethod("Concat", typ24).ReturnType
EvalTTokIL.Emit(OpCodes.Stloc, 9)
EvalTTokIL.MarkSequencePoint(doc7, 287, 1, 287, 100)
Dim typ26(-1) As Type
EvalTTokIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.String)
ReDim Preserve typ26(UBound(typ26) + 1)
typ26(UBound(typ26)) = Typ
EvalTTokIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadClass", typ26))
Typ = GetType(Loader).GetMethod("LoadClass", typ26).ReturnType
EvalTTokIL.Emit(OpCodes.Stloc, 1)
EvalTTokIL.MarkSequencePoint(doc7, 289, 1, 289, 100)
EvalTTokIL.MarkLabel(label10)
EvalTTokIL.MarkSequencePoint(doc7, 291, 1, 291, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Add)
EvalTTokIL.Emit(OpCodes.Stloc, 6)
EvalTTokIL.MarkSequencePoint(doc7, 293, 1, 293, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(TypeTok).MakeArrayType()
Typ02 = Typ
EvalTTokIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EvalTTokIL.Emit(OpCodes.Ldelem, GetType(TypeTok).MakeArrayType().GetElementType())
Typ = GetType(TypeTok).MakeArrayType().GetElementType()
EvalTTokIL.Emit(OpCodes.Stloc, 5)
EvalTTokIL.MarkSequencePoint(doc7, 294, 1, 294, 100)
Dim typ27(-1) As Type
EvalTTokIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(TypeTok)
ReDim Preserve typ27(UBound(typ27) + 1)
typ27(UBound(typ27)) = Typ
EvalTTokIL.Emit(OpCodes.Call, EvalTTok)
Typ = EvalTTok.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EvalTTokIL.Emit(OpCodes.Pop)
End If
EvalTTokIL.MarkSequencePoint(doc7, 295, 1, 295, 100)
EvalTTokIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type01"))
Typ = GetType(AsmFactory).GetField("Type01").FieldType
EvalTTokIL.Emit(OpCodes.Stloc, 2)
EvalTTokIL.MarkSequencePoint(doc7, 296, 1, 296, 100)
Dim typ28(-1) As Type
EvalTTokIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ28(UBound(typ28) + 1)
typ28(UBound(typ28)) = Typ
EvalTTokIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("AddTyp", typ28))
Typ = GetType(AsmFactory).GetMethod("AddTyp", typ28).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EvalTTokIL.Emit(OpCodes.Pop)
End If
EvalTTokIL.MarkSequencePoint(doc7, 298, 1, 298, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
Dim fa46 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
Dim tru46 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
Dim cont46 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
EvalTTokIL.Emit(OpCodes.Beq, tru46)
EvalTTokIL.Emit(OpCodes.Br, fa46)
EvalTTokIL.MarkLabel(tru46)
EvalTTokIL.MarkSequencePoint(doc7, 299, 1, 299, 100)
EvalTTokIL.Emit(OpCodes.Br, label9)
EvalTTokIL.MarkSequencePoint(doc7, 300, 1, 300, 100)
EvalTTokIL.Emit(OpCodes.Br, cont46)
EvalTTokIL.MarkLabel(fa46)
EvalTTokIL.MarkSequencePoint(doc7, 301, 1, 301, 100)
EvalTTokIL.Emit(OpCodes.Br, label10)
EvalTTokIL.MarkSequencePoint(doc7, 302, 1, 302, 100)
EvalTTokIL.Emit(OpCodes.Br, cont46)
EvalTTokIL.MarkLabel(cont46)
EvalTTokIL.MarkSequencePoint(doc7, 304, 1, 304, 100)
EvalTTokIL.MarkLabel(label9)
EvalTTokIL.MarkSequencePoint(doc7, 307, 1, 307, 100)
Dim typ29(-1) As Type
EvalTTokIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EvalTTokIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ReDim Preserve typ29(UBound(typ29) + 1)
typ29(UBound(typ29)) = Typ
EvalTTokIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("MakeGenericType", typ29))
Typ = Typ03.GetMethod("MakeGenericType", typ29).ReturnType
EvalTTokIL.Emit(OpCodes.Stloc, 1)
EvalTTokIL.MarkSequencePoint(doc7, 308, 1, 308, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type).MakeArrayType()
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("TypArr"))
EvalTTokIL.MarkSequencePoint(doc7, 310, 1, 310, 100)
EvalTTokIL.Emit(OpCodes.Br, cont45)
EvalTTokIL.MarkLabel(fa45)
EvalTTokIL.MarkSequencePoint(doc7, 312, 1, 312, 100)
Dim label11 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
EvalTTokIL.MarkSequencePoint(doc7, 314, 1, 314, 100)
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("RefTyp"))
Typ = GetType(TypeTok).GetField("RefTyp").FieldType
EvalTTokIL.Emit(OpCodes.Ldnull)
Dim fa47 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
Dim tru47 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
Dim cont47 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
EvalTTokIL.Emit(OpCodes.Beq, tru47)
EvalTTokIL.Emit(OpCodes.Br, fa47)
EvalTTokIL.MarkLabel(tru47)
EvalTTokIL.MarkSequencePoint(doc7, 315, 1, 315, 100)
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("IsArray"))
Typ = GetType(TypeTok).GetField("IsArray").FieldType
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeArr"))
EvalTTokIL.MarkSequencePoint(doc7, 316, 1, 316, 100)
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("IsByRef"))
Typ = GetType(TypeTok).GetField("IsByRef").FieldType
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeRef"))
EvalTTokIL.MarkSequencePoint(doc7, 317, 1, 317, 100)
Dim typ30(-1) As Type
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("Value"))
Typ = GetType(TypeTok).GetField("Value").FieldType
ReDim Preserve typ30(UBound(typ30) + 1)
typ30(UBound(typ30)) = Typ
EvalTTokIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadClass", typ30))
Typ = GetType(Loader).GetMethod("LoadClass", typ30).ReturnType
EvalTTokIL.Emit(OpCodes.Stloc, 1)
EvalTTokIL.MarkSequencePoint(doc7, 318, 1, 318, 100)
EvalTTokIL.Emit(OpCodes.Br, label11)
EvalTTokIL.MarkSequencePoint(doc7, 319, 1, 319, 100)
EvalTTokIL.Emit(OpCodes.Br, cont47)
EvalTTokIL.MarkLabel(fa47)
EvalTTokIL.Emit(OpCodes.Br, cont47)
EvalTTokIL.MarkLabel(cont47)
EvalTTokIL.MarkSequencePoint(doc7, 321, 1, 321, 100)
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("IsArray"))
Typ = GetType(TypeTok).GetField("IsArray").FieldType
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeArr"))
EvalTTokIL.MarkSequencePoint(doc7, 322, 1, 322, 100)
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("IsByRef"))
Typ = GetType(TypeTok).GetField("IsByRef").FieldType
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeRef"))
EvalTTokIL.MarkSequencePoint(doc7, 323, 1, 323, 100)
Dim typ31(-1) As Type
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("RefTyp"))
Typ = GetType(TypeTok).GetField("RefTyp").FieldType
ReDim Preserve typ31(UBound(typ31) + 1)
typ31(UBound(typ31)) = Typ
EvalTTokIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("ProcessType", typ31))
Typ = GetType(Loader).GetMethod("ProcessType", typ31).ReturnType
EvalTTokIL.Emit(OpCodes.Stloc, 1)
EvalTTokIL.MarkSequencePoint(doc7, 325, 1, 325, 100)
EvalTTokIL.MarkLabel(label11)
EvalTTokIL.MarkSequencePoint(doc7, 327, 1, 327, 100)
EvalTTokIL.Emit(OpCodes.Br, cont45)
EvalTTokIL.MarkLabel(cont45)
EvalTTokIL.MarkSequencePoint(doc7, 329, 1, 329, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type01"))
EvalTTokIL.MarkSequencePoint(doc7, 331, 1, 331, 100)
EvalTTokIL.Emit(OpCodes.Ret)
Dim typ32(-1) As Type
ReDim Preserve typ32(UBound(typ32) + 1)
typ32(UBound(typ32)) = GetType(TypeTok)
Dim CommitEvalTTok As MethodBuilder = Helpers.DefineMethod("CommitEvalTTok", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Type), typ32)
Dim CommitEvalTTokIL As ILGenerator = CommitEvalTTok.GetILGenerator()
Dim CommitEvalTTokparam01 As ParameterBuilder = CommitEvalTTok.DefineParameter(1, ParameterAttributes.None, "tt")
CommitEvalTTokIL.MarkSequencePoint(doc7, 334, 1, 334, 100)
Dim typ33(-1) As Type
CommitEvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
ReDim Preserve typ33(UBound(typ33) + 1)
typ33(UBound(typ33)) = Typ
CommitEvalTTokIL.Emit(OpCodes.Call, EvalTTok)
Typ = EvalTTok.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
CommitEvalTTokIL.Emit(OpCodes.Pop)
End If
CommitEvalTTokIL.MarkSequencePoint(doc7, 335, 1, 335, 100)
CommitEvalTTokIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type01"))
Typ = GetType(AsmFactory).GetField("Type01").FieldType
CommitEvalTTokIL.MarkSequencePoint(doc7, 336, 1, 336, 100)
CommitEvalTTokIL.Emit(OpCodes.Ret)
Dim typ34(-1) As Type
ReDim Preserve typ34(UBound(typ34) + 1)
typ34(UBound(typ34)) = GetType(Expr).MakeArrayType()
Dim ProcessParams As MethodBuilder = Helpers.DefineMethod("ProcessParams", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ34)
Dim ProcessParamsIL As ILGenerator = ProcessParams.GetILGenerator()
Dim ProcessParamsparam01 As ParameterBuilder = ProcessParams.DefineParameter(1, ParameterAttributes.None, "ps")
ProcessParamsIL.MarkSequencePoint(doc7, 340, 1, 340, 100)
Dim locbldr83 As LocalBuilder = ProcessParamsIL.DeclareLocal(GetType(System.Int32))
locbldr83.SetLocalSymInfo("len")
ProcessParamsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Expr).MakeArrayType()
ProcessParamsIL.Emit(OpCodes.Ldlen)
ProcessParamsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessParamsIL.Emit(OpCodes.Sub)
ProcessParamsIL.Emit(OpCodes.Stloc, 0)
ProcessParamsIL.MarkSequencePoint(doc7, 341, 1, 341, 100)
Dim locbldr84 As LocalBuilder = ProcessParamsIL.DeclareLocal(GetType(System.Int32))
locbldr84.SetLocalSymInfo("i")
ProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ProcessParamsIL.Emit(OpCodes.Stloc, 1)
ProcessParamsIL.MarkSequencePoint(doc7, 342, 1, 342, 100)
Dim locbldr85 As LocalBuilder = ProcessParamsIL.DeclareLocal(GetType(VarExpr))
locbldr85.SetLocalSymInfo("curp")
ProcessParamsIL.Emit(OpCodes.Ldnull)
ProcessParamsIL.Emit(OpCodes.Stloc, 2)
ProcessParamsIL.MarkSequencePoint(doc7, 343, 1, 343, 100)
Dim locbldr86 As LocalBuilder = ProcessParamsIL.DeclareLocal(GetType(TypeTok))
locbldr86.SetLocalSymInfo("typtok")
ProcessParamsIL.MarkSequencePoint(doc7, 344, 1, 344, 100)
Dim locbldr87 As LocalBuilder = ProcessParamsIL.DeclareLocal(GetType(Ident))
locbldr87.SetLocalSymInfo("nam")
ProcessParamsIL.MarkSequencePoint(doc7, 345, 1, 345, 100)
Dim locbldr88 As LocalBuilder = ProcessParamsIL.DeclareLocal(GetType(System.Type))
locbldr88.SetLocalSymInfo("typ")
ProcessParamsIL.Emit(OpCodes.Ldnull)
ProcessParamsIL.Emit(OpCodes.Stloc, 5)
ProcessParamsIL.MarkSequencePoint(doc7, 349, 1, 349, 100)
Dim label12 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
ProcessParamsIL.MarkSequencePoint(doc7, 350, 1, 350, 100)
Dim label13 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
ProcessParamsIL.MarkSequencePoint(doc7, 352, 1, 352, 100)
ProcessParamsIL.MarkLabel(label12)
ProcessParamsIL.MarkSequencePoint(doc7, 354, 1, 354, 100)
ProcessParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessParamsIL.Emit(OpCodes.Add)
ProcessParamsIL.Emit(OpCodes.Stloc, 1)
ProcessParamsIL.MarkSequencePoint(doc7, 356, 1, 356, 100)
ProcessParamsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Expr).MakeArrayType()
Typ02 = Typ
ProcessParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ProcessParamsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ProcessParamsIL.Emit(OpCodes.Ldelem, GetType(Expr).MakeArrayType().GetElementType())
Typ = GetType(Expr).MakeArrayType().GetElementType()
ProcessParamsIL.Emit(OpCodes.Stloc, 2)
ProcessParamsIL.MarkSequencePoint(doc7, 357, 1, 357, 100)
ProcessParamsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarExpr)
ProcessParamsIL.Emit(OpCodes.Ldfld, GetType(VarExpr).GetField("VarTyp"))
Typ = GetType(VarExpr).GetField("VarTyp").FieldType
ProcessParamsIL.Emit(OpCodes.Stloc, 3)
ProcessParamsIL.MarkSequencePoint(doc7, 370, 1, 370, 100)
Dim typ35(-1) As Type
ProcessParamsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(TypeTok)
ReDim Preserve typ35(UBound(typ35) + 1)
typ35(UBound(typ35)) = Typ
ProcessParamsIL.Emit(OpCodes.Call, CommitEvalTTok)
Typ = CommitEvalTTok.ReturnType
ProcessParamsIL.Emit(OpCodes.Stloc, 5)
ProcessParamsIL.MarkSequencePoint(doc7, 372, 1, 372, 100)
ProcessParamsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
ProcessParamsIL.Emit(OpCodes.Ldnull)
Dim fa48 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
Dim tru48 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
Dim cont48 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
ProcessParamsIL.Emit(OpCodes.Beq, fa48)
ProcessParamsIL.Emit(OpCodes.Br, tru48)
ProcessParamsIL.MarkLabel(tru48)
ProcessParamsIL.MarkSequencePoint(doc7, 373, 1, 373, 100)
Dim typ36(-1) As Type
ProcessParamsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
ReDim Preserve typ36(UBound(typ36) + 1)
typ36(UBound(typ36)) = Typ
ProcessParamsIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("AddTyp", typ36))
Typ = GetType(AsmFactory).GetMethod("AddTyp", typ36).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ProcessParamsIL.Emit(OpCodes.Pop)
End If
ProcessParamsIL.MarkSequencePoint(doc7, 374, 1, 374, 100)
ProcessParamsIL.Emit(OpCodes.Br, cont48)
ProcessParamsIL.MarkLabel(fa48)
ProcessParamsIL.Emit(OpCodes.Br, cont48)
ProcessParamsIL.MarkLabel(cont48)
ProcessParamsIL.MarkSequencePoint(doc7, 376, 1, 376, 100)
ProcessParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ProcessParamsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
Dim fa49 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
Dim tru49 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
Dim cont49 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
ProcessParamsIL.Emit(OpCodes.Beq, tru49)
ProcessParamsIL.Emit(OpCodes.Br, fa49)
ProcessParamsIL.MarkLabel(tru49)
ProcessParamsIL.MarkSequencePoint(doc7, 377, 1, 377, 100)
ProcessParamsIL.Emit(OpCodes.Br, label13)
ProcessParamsIL.MarkSequencePoint(doc7, 378, 1, 378, 100)
ProcessParamsIL.Emit(OpCodes.Br, cont49)
ProcessParamsIL.MarkLabel(fa49)
ProcessParamsIL.MarkSequencePoint(doc7, 379, 1, 379, 100)
ProcessParamsIL.Emit(OpCodes.Br, label12)
ProcessParamsIL.MarkSequencePoint(doc7, 380, 1, 380, 100)
ProcessParamsIL.Emit(OpCodes.Br, cont49)
ProcessParamsIL.MarkLabel(cont49)
ProcessParamsIL.MarkSequencePoint(doc7, 382, 1, 382, 100)
ProcessParamsIL.MarkLabel(label13)
ProcessParamsIL.MarkSequencePoint(doc7, 384, 1, 384, 100)
ProcessParamsIL.Emit(OpCodes.Ret)
Dim typ37(-1) As Type
ReDim Preserve typ37(UBound(typ37) + 1)
typ37(UBound(typ37)) = GetType(Expr).MakeArrayType()
Dim PostProcessParams As MethodBuilder = Helpers.DefineMethod("PostProcessParams", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ37)
Dim PostProcessParamsIL As ILGenerator = PostProcessParams.GetILGenerator()
Dim PostProcessParamsparam01 As ParameterBuilder = PostProcessParams.DefineParameter(1, ParameterAttributes.None, "ps")
PostProcessParamsIL.MarkSequencePoint(doc7, 388, 1, 388, 100)
Dim locbldr89 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(System.Int32))
locbldr89.SetLocalSymInfo("len")
PostProcessParamsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Expr).MakeArrayType()
PostProcessParamsIL.Emit(OpCodes.Ldlen)
PostProcessParamsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Sub)
PostProcessParamsIL.Emit(OpCodes.Stloc, 0)
PostProcessParamsIL.MarkSequencePoint(doc7, 389, 1, 389, 100)
Dim locbldr90 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(System.Int32))
locbldr90.SetLocalSymInfo("i")
PostProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Stloc, 1)
PostProcessParamsIL.MarkSequencePoint(doc7, 390, 1, 390, 100)
Dim locbldr91 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(VarExpr))
locbldr91.SetLocalSymInfo("curp")
PostProcessParamsIL.Emit(OpCodes.Ldnull)
PostProcessParamsIL.Emit(OpCodes.Stloc, 2)
PostProcessParamsIL.MarkSequencePoint(doc7, 391, 1, 391, 100)
Dim locbldr92 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(Ident))
locbldr92.SetLocalSymInfo("nam")
PostProcessParamsIL.MarkSequencePoint(doc7, 392, 1, 392, 100)
Dim locbldr93 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(TypeTok))
locbldr93.SetLocalSymInfo("typtok")
PostProcessParamsIL.MarkSequencePoint(doc7, 393, 1, 393, 100)
Dim locbldr94 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(System.Type))
locbldr94.SetLocalSymInfo("typ")
PostProcessParamsIL.Emit(OpCodes.Ldnull)
PostProcessParamsIL.Emit(OpCodes.Stloc, 5)
PostProcessParamsIL.MarkSequencePoint(doc7, 394, 1, 394, 100)
Dim locbldr95 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(System.Type))
locbldr95.SetLocalSymInfo("reft")
PostProcessParamsIL.MarkSequencePoint(doc7, 397, 1, 397, 100)
Dim label14 As System.Reflection.Emit.Label = PostProcessParamsIL.DefineLabel()
PostProcessParamsIL.MarkSequencePoint(doc7, 398, 1, 398, 100)
Dim label15 As System.Reflection.Emit.Label = PostProcessParamsIL.DefineLabel()
PostProcessParamsIL.MarkSequencePoint(doc7, 400, 1, 400, 100)
PostProcessParamsIL.MarkLabel(label14)
PostProcessParamsIL.MarkSequencePoint(doc7, 402, 1, 402, 100)
PostProcessParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Add)
PostProcessParamsIL.Emit(OpCodes.Stloc, 1)
PostProcessParamsIL.MarkSequencePoint(doc7, 404, 1, 404, 100)
PostProcessParamsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Expr).MakeArrayType()
Typ02 = Typ
PostProcessParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
PostProcessParamsIL.Emit(OpCodes.Ldelem, GetType(Expr).MakeArrayType().GetElementType())
Typ = GetType(Expr).MakeArrayType().GetElementType()
PostProcessParamsIL.Emit(OpCodes.Stloc, 2)
PostProcessParamsIL.MarkSequencePoint(doc7, 406, 1, 406, 100)
Dim locbldr96 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(MethodBuilder))
locbldr96.SetLocalSymInfo("mb")
PostProcessParamsIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("Met"))
Typ = GetType(ILEmitter).GetField("Met").FieldType
PostProcessParamsIL.Emit(OpCodes.Stloc, 7)
PostProcessParamsIL.MarkSequencePoint(doc7, 407, 1, 407, 100)
Dim locbldr97 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(ParameterAttributes))
locbldr97.SetLocalSymInfo("non")
PostProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Stloc, 8)
PostProcessParamsIL.MarkSequencePoint(doc7, 408, 1, 408, 100)
PostProcessParamsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarExpr)
PostProcessParamsIL.Emit(OpCodes.Ldfld, GetType(VarExpr).GetField("VarName"))
Typ = GetType(VarExpr).GetField("VarName").FieldType
PostProcessParamsIL.Emit(OpCodes.Stloc, 3)
PostProcessParamsIL.MarkSequencePoint(doc7, 409, 1, 409, 100)
Dim locbldr98 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(System.Int32))
locbldr98.SetLocalSymInfo("ind")
PostProcessParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Add)
PostProcessParamsIL.Emit(OpCodes.Stloc, 9)
PostProcessParamsIL.MarkSequencePoint(doc7, 410, 1, 410, 100)
Dim typ38(-1) As Type
PostProcessParamsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(MethodBuilder)
Typ03 = Typ
PostProcessParamsIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Int32)
ReDim Preserve typ38(UBound(typ38) + 1)
typ38(UBound(typ38)) = Typ
PostProcessParamsIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(ParameterAttributes)
ReDim Preserve typ38(UBound(typ38) + 1)
typ38(UBound(typ38)) = Typ
PostProcessParamsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Ident)
PostProcessParamsIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ38(UBound(typ38) + 1)
typ38(UBound(typ38)) = Typ
PostProcessParamsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineParameter", typ38))
Typ = Typ03.GetMethod("DefineParameter", typ38).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
PostProcessParamsIL.Emit(OpCodes.Pop)
End If
PostProcessParamsIL.MarkSequencePoint(doc7, 412, 1, 412, 100)
PostProcessParamsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarExpr)
PostProcessParamsIL.Emit(OpCodes.Ldfld, GetType(VarExpr).GetField("VarTyp"))
Typ = GetType(VarExpr).GetField("VarTyp").FieldType
PostProcessParamsIL.Emit(OpCodes.Stloc, 4)
PostProcessParamsIL.MarkSequencePoint(doc7, 425, 1, 425, 100)
Dim typ39(-1) As Type
PostProcessParamsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(TypeTok)
ReDim Preserve typ39(UBound(typ39) + 1)
typ39(UBound(typ39)) = Typ
PostProcessParamsIL.Emit(OpCodes.Call, CommitEvalTTok)
Typ = CommitEvalTTok.ReturnType
PostProcessParamsIL.Emit(OpCodes.Stloc, 5)
PostProcessParamsIL.MarkSequencePoint(doc7, 427, 1, 427, 100)
PostProcessParamsIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("ArgInd"))
Typ = GetType(ILEmitter).GetField("ArgInd").FieldType
PostProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Add)
PostProcessParamsIL.Emit(OpCodes.Stsfld, GetType(ILEmitter).GetField("ArgInd"))
PostProcessParamsIL.MarkSequencePoint(doc7, 428, 1, 428, 100)
Dim typ40(-1) As Type
PostProcessParamsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Ident)
PostProcessParamsIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ40(UBound(typ40) + 1)
typ40(UBound(typ40)) = Typ
PostProcessParamsIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReDim Preserve typ40(UBound(typ40) + 1)
typ40(UBound(typ40)) = Typ
PostProcessParamsIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("ArgInd"))
Typ = GetType(ILEmitter).GetField("ArgInd").FieldType
ReDim Preserve typ40(UBound(typ40) + 1)
typ40(UBound(typ40)) = Typ
PostProcessParamsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
ReDim Preserve typ40(UBound(typ40) + 1)
typ40(UBound(typ40)) = Typ
PostProcessParamsIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddVar", typ40))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddVar", typ40).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
PostProcessParamsIL.Emit(OpCodes.Pop)
End If
PostProcessParamsIL.MarkSequencePoint(doc7, 430, 1, 430, 100)
PostProcessParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
Dim fa50 As System.Reflection.Emit.Label = PostProcessParamsIL.DefineLabel()
Dim tru50 As System.Reflection.Emit.Label = PostProcessParamsIL.DefineLabel()
Dim cont50 As System.Reflection.Emit.Label = PostProcessParamsIL.DefineLabel()
PostProcessParamsIL.Emit(OpCodes.Beq, tru50)
PostProcessParamsIL.Emit(OpCodes.Br, fa50)
PostProcessParamsIL.MarkLabel(tru50)
PostProcessParamsIL.MarkSequencePoint(doc7, 431, 1, 431, 100)
PostProcessParamsIL.Emit(OpCodes.Br, label15)
PostProcessParamsIL.MarkSequencePoint(doc7, 432, 1, 432, 100)
PostProcessParamsIL.Emit(OpCodes.Br, cont50)
PostProcessParamsIL.MarkLabel(fa50)
PostProcessParamsIL.MarkSequencePoint(doc7, 433, 1, 433, 100)
PostProcessParamsIL.Emit(OpCodes.Br, label14)
PostProcessParamsIL.MarkSequencePoint(doc7, 434, 1, 434, 100)
PostProcessParamsIL.Emit(OpCodes.Br, cont50)
PostProcessParamsIL.MarkLabel(cont50)
PostProcessParamsIL.MarkSequencePoint(doc7, 436, 1, 436, 100)
PostProcessParamsIL.MarkLabel(label15)
PostProcessParamsIL.MarkSequencePoint(doc7, 438, 1, 438, 100)
PostProcessParamsIL.Emit(OpCodes.Ret)
Dim typ41(-1) As Type
ReDim Preserve typ41(UBound(typ41) + 1)
typ41(UBound(typ41)) = GetType(Expr).MakeArrayType()
Dim PostProcessParamsConstr As MethodBuilder = Helpers.DefineMethod("PostProcessParamsConstr", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ41)
Dim PostProcessParamsConstrIL As ILGenerator = PostProcessParamsConstr.GetILGenerator()
Dim PostProcessParamsConstrparam01 As ParameterBuilder = PostProcessParamsConstr.DefineParameter(1, ParameterAttributes.None, "ps")
PostProcessParamsConstrIL.MarkSequencePoint(doc7, 442, 1, 442, 100)
Dim locbldr99 As LocalBuilder = PostProcessParamsConstrIL.DeclareLocal(GetType(System.Int32))
locbldr99.SetLocalSymInfo("len")
PostProcessParamsConstrIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Expr).MakeArrayType()
PostProcessParamsConstrIL.Emit(OpCodes.Ldlen)
PostProcessParamsConstrIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Sub)
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 0)
PostProcessParamsConstrIL.MarkSequencePoint(doc7, 443, 1, 443, 100)
Dim locbldr100 As LocalBuilder = PostProcessParamsConstrIL.DeclareLocal(GetType(System.Int32))
locbldr100.SetLocalSymInfo("i")
PostProcessParamsConstrIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 1)
PostProcessParamsConstrIL.MarkSequencePoint(doc7, 444, 1, 444, 100)
Dim locbldr101 As LocalBuilder = PostProcessParamsConstrIL.DeclareLocal(GetType(VarExpr))
locbldr101.SetLocalSymInfo("curp")
PostProcessParamsConstrIL.Emit(OpCodes.Ldnull)
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 2)
PostProcessParamsConstrIL.MarkSequencePoint(doc7, 445, 1, 445, 100)
Dim locbldr102 As LocalBuilder = PostProcessParamsConstrIL.DeclareLocal(GetType(Ident))
locbldr102.SetLocalSymInfo("nam")
PostProcessParamsConstrIL.MarkSequencePoint(doc7, 446, 1, 446, 100)
Dim locbldr103 As LocalBuilder = PostProcessParamsConstrIL.DeclareLocal(GetType(TypeTok))
locbldr103.SetLocalSymInfo("typtok")
PostProcessParamsConstrIL.MarkSequencePoint(doc7, 447, 1, 447, 100)
Dim locbldr104 As LocalBuilder = PostProcessParamsConstrIL.DeclareLocal(GetType(System.Type))
locbldr104.SetLocalSymInfo("typ")
PostProcessParamsConstrIL.Emit(OpCodes.Ldnull)
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 5)
PostProcessParamsConstrIL.MarkSequencePoint(doc7, 450, 1, 450, 100)
Dim label16 As System.Reflection.Emit.Label = PostProcessParamsConstrIL.DefineLabel()
PostProcessParamsConstrIL.MarkSequencePoint(doc7, 451, 1, 451, 100)
Dim label17 As System.Reflection.Emit.Label = PostProcessParamsConstrIL.DefineLabel()
PostProcessParamsConstrIL.MarkSequencePoint(doc7, 453, 1, 453, 100)
PostProcessParamsConstrIL.MarkLabel(label16)
PostProcessParamsConstrIL.MarkSequencePoint(doc7, 455, 1, 455, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Add)
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 1)
PostProcessParamsConstrIL.MarkSequencePoint(doc7, 457, 1, 457, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Expr).MakeArrayType()
Typ02 = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Conv_U)
Typ = Typ02
PostProcessParamsConstrIL.Emit(OpCodes.Ldelem, GetType(Expr).MakeArrayType().GetElementType())
Typ = GetType(Expr).MakeArrayType().GetElementType()
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 2)
PostProcessParamsConstrIL.MarkSequencePoint(doc7, 459, 1, 459, 100)
Dim locbldr105 As LocalBuilder = PostProcessParamsConstrIL.DeclareLocal(GetType(ConstructorBuilder))
locbldr105.SetLocalSymInfo("cb")
PostProcessParamsConstrIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("Constr"))
Typ = GetType(ILEmitter).GetField("Constr").FieldType
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 6)
PostProcessParamsConstrIL.MarkSequencePoint(doc7, 460, 1, 460, 100)
Dim locbldr106 As LocalBuilder = PostProcessParamsConstrIL.DeclareLocal(GetType(ParameterAttributes))
locbldr106.SetLocalSymInfo("non")
PostProcessParamsConstrIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 7)
PostProcessParamsConstrIL.MarkSequencePoint(doc7, 461, 1, 461, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarExpr)
PostProcessParamsConstrIL.Emit(OpCodes.Ldfld, GetType(VarExpr).GetField("VarName"))
Typ = GetType(VarExpr).GetField("VarName").FieldType
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 3)
PostProcessParamsConstrIL.MarkSequencePoint(doc7, 462, 1, 462, 100)
Dim locbldr107 As LocalBuilder = PostProcessParamsConstrIL.DeclareLocal(GetType(System.Int32))
locbldr107.SetLocalSymInfo("ind")
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Add)
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 8)
PostProcessParamsConstrIL.MarkSequencePoint(doc7, 463, 1, 463, 100)
Dim typ42(-1) As Type
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(ConstructorBuilder)
Typ03 = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Int32)
ReDim Preserve typ42(UBound(typ42) + 1)
typ42(UBound(typ42)) = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(ParameterAttributes)
ReDim Preserve typ42(UBound(typ42) + 1)
typ42(UBound(typ42)) = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Ident)
PostProcessParamsConstrIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ42(UBound(typ42) + 1)
typ42(UBound(typ42)) = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineParameter", typ42))
Typ = Typ03.GetMethod("DefineParameter", typ42).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
PostProcessParamsConstrIL.Emit(OpCodes.Pop)
End If
PostProcessParamsConstrIL.MarkSequencePoint(doc7, 465, 1, 465, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarExpr)
PostProcessParamsConstrIL.Emit(OpCodes.Ldfld, GetType(VarExpr).GetField("VarTyp"))
Typ = GetType(VarExpr).GetField("VarTyp").FieldType
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 4)
PostProcessParamsConstrIL.MarkSequencePoint(doc7, 478, 1, 478, 100)
Dim typ43(-1) As Type
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(TypeTok)
ReDim Preserve typ43(UBound(typ43) + 1)
typ43(UBound(typ43)) = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Call, CommitEvalTTok)
Typ = CommitEvalTTok.ReturnType
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 5)
PostProcessParamsConstrIL.MarkSequencePoint(doc7, 480, 1, 480, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("ArgInd"))
Typ = GetType(ILEmitter).GetField("ArgInd").FieldType
PostProcessParamsConstrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Add)
PostProcessParamsConstrIL.Emit(OpCodes.Stsfld, GetType(ILEmitter).GetField("ArgInd"))
PostProcessParamsConstrIL.MarkSequencePoint(doc7, 481, 1, 481, 100)
Dim typ44(-1) As Type
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Ident)
PostProcessParamsConstrIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ44(UBound(typ44) + 1)
typ44(UBound(typ44)) = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReDim Preserve typ44(UBound(typ44) + 1)
typ44(UBound(typ44)) = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("ArgInd"))
Typ = GetType(ILEmitter).GetField("ArgInd").FieldType
ReDim Preserve typ44(UBound(typ44) + 1)
typ44(UBound(typ44)) = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
ReDim Preserve typ44(UBound(typ44) + 1)
typ44(UBound(typ44)) = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddVar", typ44))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddVar", typ44).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
PostProcessParamsConstrIL.Emit(OpCodes.Pop)
End If
PostProcessParamsConstrIL.MarkSequencePoint(doc7, 483, 1, 483, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
Dim fa51 As System.Reflection.Emit.Label = PostProcessParamsConstrIL.DefineLabel()
Dim tru51 As System.Reflection.Emit.Label = PostProcessParamsConstrIL.DefineLabel()
Dim cont51 As System.Reflection.Emit.Label = PostProcessParamsConstrIL.DefineLabel()
PostProcessParamsConstrIL.Emit(OpCodes.Beq, tru51)
PostProcessParamsConstrIL.Emit(OpCodes.Br, fa51)
PostProcessParamsConstrIL.MarkLabel(tru51)
PostProcessParamsConstrIL.MarkSequencePoint(doc7, 484, 1, 484, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Br, label17)
PostProcessParamsConstrIL.MarkSequencePoint(doc7, 485, 1, 485, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Br, cont51)
PostProcessParamsConstrIL.MarkLabel(fa51)
PostProcessParamsConstrIL.MarkSequencePoint(doc7, 486, 1, 486, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Br, label16)
PostProcessParamsConstrIL.MarkSequencePoint(doc7, 487, 1, 487, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Br, cont51)
PostProcessParamsConstrIL.MarkLabel(cont51)
PostProcessParamsConstrIL.MarkSequencePoint(doc7, 489, 1, 489, 100)
PostProcessParamsConstrIL.MarkLabel(label17)
PostProcessParamsConstrIL.MarkSequencePoint(doc7, 491, 1, 491, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Ret)
Dim typ45(-1) As Type
ReDim Preserve typ45(UBound(typ45) + 1)
typ45(UBound(typ45)) = GetType(System.Type)
Dim getCodeFromType As MethodBuilder = Helpers.DefineMethod("getCodeFromType", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Int32), typ45)
Dim getCodeFromTypeIL As ILGenerator = getCodeFromType.GetILGenerator()
Dim getCodeFromTypeparam01 As ParameterBuilder = getCodeFromType.DefineParameter(1, ParameterAttributes.None, "typ")
getCodeFromTypeIL.MarkSequencePoint(doc7, 494, 1, 494, 100)
Dim locbldr108 As LocalBuilder = getCodeFromTypeIL.DeclareLocal(GetType(System.Int32))
locbldr108.SetLocalSymInfo("cod")
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc7, 495, 1, 495, 100)
Dim locbldr109 As LocalBuilder = getCodeFromTypeIL.DeclareLocal(GetType(System.Boolean))
locbldr109.SetLocalSymInfo("b")
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc7, 496, 1, 496, 100)
Dim locbldr110 As LocalBuilder = getCodeFromTypeIL.DeclareLocal(GetType(System.Type))
locbldr110.SetLocalSymInfo("typ2")
getCodeFromTypeIL.MarkSequencePoint(doc7, 498, 1, 498, 100)
Dim label18 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.MarkSequencePoint(doc7, 500, 1, 500, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(System.Boolean))
Dim typ46 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ46))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ46).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc7, 501, 1, 501, 100)
Dim typ47(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ47(UBound(typ47) + 1)
typ47(UBound(typ47)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ47))
Typ = Typ03.GetMethod("Equals", typ47).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc7, 502, 1, 502, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa52 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru52 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont52 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru52)
getCodeFromTypeIL.Emit(OpCodes.Br, fa52)
getCodeFromTypeIL.MarkLabel(tru52)
getCodeFromTypeIL.MarkSequencePoint(doc7, 503, 1, 503, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(101))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc7, 504, 1, 504, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc7, 505, 1, 505, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont52)
getCodeFromTypeIL.MarkLabel(fa52)
getCodeFromTypeIL.Emit(OpCodes.Br, cont52)
getCodeFromTypeIL.MarkLabel(cont52)
getCodeFromTypeIL.MarkSequencePoint(doc7, 507, 1, 507, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(Byte))
Dim typ48 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ48))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ48).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc7, 508, 1, 508, 100)
Dim typ49(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ49(UBound(typ49) + 1)
typ49(UBound(typ49)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ49))
Typ = Typ03.GetMethod("Equals", typ49).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc7, 509, 1, 509, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa53 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru53 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont53 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru53)
getCodeFromTypeIL.Emit(OpCodes.Br, fa53)
getCodeFromTypeIL.MarkLabel(tru53)
getCodeFromTypeIL.MarkSequencePoint(doc7, 510, 1, 510, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(8))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc7, 511, 1, 511, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc7, 512, 1, 512, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont53)
getCodeFromTypeIL.MarkLabel(fa53)
getCodeFromTypeIL.Emit(OpCodes.Br, cont53)
getCodeFromTypeIL.MarkLabel(cont53)
getCodeFromTypeIL.MarkSequencePoint(doc7, 514, 1, 514, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(UInt16))
Dim typ50 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ50))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ50).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc7, 515, 1, 515, 100)
Dim typ51(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ51(UBound(typ51) + 1)
typ51(UBound(typ51)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ51))
Typ = Typ03.GetMethod("Equals", typ51).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc7, 516, 1, 516, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa54 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru54 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont54 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru54)
getCodeFromTypeIL.Emit(OpCodes.Br, fa54)
getCodeFromTypeIL.MarkLabel(tru54)
getCodeFromTypeIL.MarkSequencePoint(doc7, 517, 1, 517, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(16))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc7, 518, 1, 518, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc7, 519, 1, 519, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont54)
getCodeFromTypeIL.MarkLabel(fa54)
getCodeFromTypeIL.Emit(OpCodes.Br, cont54)
getCodeFromTypeIL.MarkLabel(cont54)
getCodeFromTypeIL.MarkSequencePoint(doc7, 521, 1, 521, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(UInt32))
Dim typ52 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ52))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ52).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc7, 522, 1, 522, 100)
Dim typ53(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ53(UBound(typ53) + 1)
typ53(UBound(typ53)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ53))
Typ = Typ03.GetMethod("Equals", typ53).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc7, 523, 1, 523, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa55 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru55 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont55 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru55)
getCodeFromTypeIL.Emit(OpCodes.Br, fa55)
getCodeFromTypeIL.MarkLabel(tru55)
getCodeFromTypeIL.MarkSequencePoint(doc7, 524, 1, 524, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(32))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc7, 525, 1, 525, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc7, 526, 1, 526, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont55)
getCodeFromTypeIL.MarkLabel(fa55)
getCodeFromTypeIL.Emit(OpCodes.Br, cont55)
getCodeFromTypeIL.MarkLabel(cont55)
getCodeFromTypeIL.MarkSequencePoint(doc7, 528, 1, 528, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(UIntPtr))
Dim typ54 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ54))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ54).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc7, 529, 1, 529, 100)
Dim typ55(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ55(UBound(typ55) + 1)
typ55(UBound(typ55)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ55))
Typ = Typ03.GetMethod("Equals", typ55).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc7, 530, 1, 530, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa56 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru56 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont56 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru56)
getCodeFromTypeIL.Emit(OpCodes.Br, fa56)
getCodeFromTypeIL.MarkLabel(tru56)
getCodeFromTypeIL.MarkSequencePoint(doc7, 531, 1, 531, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(40))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc7, 532, 1, 532, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc7, 533, 1, 533, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont56)
getCodeFromTypeIL.MarkLabel(fa56)
getCodeFromTypeIL.Emit(OpCodes.Br, cont56)
getCodeFromTypeIL.MarkLabel(cont56)
getCodeFromTypeIL.MarkSequencePoint(doc7, 535, 1, 535, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(UInt64))
Dim typ56 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ56))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ56).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc7, 536, 1, 536, 100)
Dim typ57(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ57(UBound(typ57) + 1)
typ57(UBound(typ57)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ57))
Typ = Typ03.GetMethod("Equals", typ57).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc7, 537, 1, 537, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa57 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru57 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont57 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru57)
getCodeFromTypeIL.Emit(OpCodes.Br, fa57)
getCodeFromTypeIL.MarkLabel(tru57)
getCodeFromTypeIL.MarkSequencePoint(doc7, 538, 1, 538, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(64))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc7, 539, 1, 539, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc7, 540, 1, 540, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont57)
getCodeFromTypeIL.MarkLabel(fa57)
getCodeFromTypeIL.Emit(OpCodes.Br, cont57)
getCodeFromTypeIL.MarkLabel(cont57)
getCodeFromTypeIL.MarkSequencePoint(doc7, 542, 1, 542, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(System.SByte))
Dim typ58 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ58))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ58).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc7, 543, 1, 543, 100)
Dim typ59(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ59(UBound(typ59) + 1)
typ59(UBound(typ59)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ59))
Typ = Typ03.GetMethod("Equals", typ59).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc7, 544, 1, 544, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa58 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru58 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont58 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru58)
getCodeFromTypeIL.Emit(OpCodes.Br, fa58)
getCodeFromTypeIL.MarkLabel(tru58)
getCodeFromTypeIL.MarkSequencePoint(doc7, 545, 1, 545, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(108))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc7, 546, 1, 546, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc7, 547, 1, 547, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont58)
getCodeFromTypeIL.MarkLabel(fa58)
getCodeFromTypeIL.Emit(OpCodes.Br, cont58)
getCodeFromTypeIL.MarkLabel(cont58)
getCodeFromTypeIL.MarkSequencePoint(doc7, 549, 1, 549, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(System.Int16))
Dim typ60 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ60))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ60).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc7, 550, 1, 550, 100)
Dim typ61(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ61(UBound(typ61) + 1)
typ61(UBound(typ61)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ61))
Typ = Typ03.GetMethod("Equals", typ61).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc7, 551, 1, 551, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa59 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru59 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont59 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru59)
getCodeFromTypeIL.Emit(OpCodes.Br, fa59)
getCodeFromTypeIL.MarkLabel(tru59)
getCodeFromTypeIL.MarkSequencePoint(doc7, 552, 1, 552, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(116))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc7, 553, 1, 553, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc7, 554, 1, 554, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont59)
getCodeFromTypeIL.MarkLabel(fa59)
getCodeFromTypeIL.Emit(OpCodes.Br, cont59)
getCodeFromTypeIL.MarkLabel(cont59)
getCodeFromTypeIL.MarkSequencePoint(doc7, 556, 1, 556, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(System.Int32))
Dim typ62 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ62))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ62).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc7, 557, 1, 557, 100)
Dim typ63(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ63(UBound(typ63) + 1)
typ63(UBound(typ63)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ63))
Typ = Typ03.GetMethod("Equals", typ63).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc7, 558, 1, 558, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa60 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru60 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont60 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru60)
getCodeFromTypeIL.Emit(OpCodes.Br, fa60)
getCodeFromTypeIL.MarkLabel(tru60)
getCodeFromTypeIL.MarkSequencePoint(doc7, 559, 1, 559, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(132))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc7, 560, 1, 560, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc7, 561, 1, 561, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont60)
getCodeFromTypeIL.MarkLabel(fa60)
getCodeFromTypeIL.Emit(OpCodes.Br, cont60)
getCodeFromTypeIL.MarkLabel(cont60)
getCodeFromTypeIL.MarkSequencePoint(doc7, 563, 1, 563, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(IntPtr))
Dim typ64 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ64))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ64).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc7, 564, 1, 564, 100)
Dim typ65(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ65(UBound(typ65) + 1)
typ65(UBound(typ65)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ65))
Typ = Typ03.GetMethod("Equals", typ65).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc7, 565, 1, 565, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa61 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru61 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont61 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru61)
getCodeFromTypeIL.Emit(OpCodes.Br, fa61)
getCodeFromTypeIL.MarkLabel(tru61)
getCodeFromTypeIL.MarkSequencePoint(doc7, 566, 1, 566, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(140))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc7, 567, 1, 567, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc7, 568, 1, 568, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont61)
getCodeFromTypeIL.MarkLabel(fa61)
getCodeFromTypeIL.Emit(OpCodes.Br, cont61)
getCodeFromTypeIL.MarkLabel(cont61)
getCodeFromTypeIL.MarkSequencePoint(doc7, 570, 1, 570, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(System.Char))
Dim typ66 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ66))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ66).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc7, 571, 1, 571, 100)
Dim typ67(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ67(UBound(typ67) + 1)
typ67(UBound(typ67)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ67))
Typ = Typ03.GetMethod("Equals", typ67).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc7, 572, 1, 572, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa62 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru62 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont62 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru62)
getCodeFromTypeIL.Emit(OpCodes.Br, fa62)
getCodeFromTypeIL.MarkLabel(tru62)
getCodeFromTypeIL.MarkSequencePoint(doc7, 573, 1, 573, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(150))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc7, 574, 1, 574, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc7, 575, 1, 575, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont62)
getCodeFromTypeIL.MarkLabel(fa62)
getCodeFromTypeIL.Emit(OpCodes.Br, cont62)
getCodeFromTypeIL.MarkLabel(cont62)
getCodeFromTypeIL.MarkSequencePoint(doc7, 577, 1, 577, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(System.Int64))
Dim typ68 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ68))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ68).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc7, 578, 1, 578, 100)
Dim typ69(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ69(UBound(typ69) + 1)
typ69(UBound(typ69)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ69))
Typ = Typ03.GetMethod("Equals", typ69).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc7, 579, 1, 579, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa63 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru63 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont63 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru63)
getCodeFromTypeIL.Emit(OpCodes.Br, fa63)
getCodeFromTypeIL.MarkLabel(tru63)
getCodeFromTypeIL.MarkSequencePoint(doc7, 580, 1, 580, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(164))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc7, 581, 1, 581, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc7, 582, 1, 582, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont63)
getCodeFromTypeIL.MarkLabel(fa63)
getCodeFromTypeIL.Emit(OpCodes.Br, cont63)
getCodeFromTypeIL.MarkLabel(cont63)
getCodeFromTypeIL.MarkSequencePoint(doc7, 584, 1, 584, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(System.String))
Dim typ70 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ70))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ70).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc7, 585, 1, 585, 100)
Dim typ71(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ71(UBound(typ71) + 1)
typ71(UBound(typ71)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ71))
Typ = Typ03.GetMethod("Equals", typ71).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc7, 586, 1, 586, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa64 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru64 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont64 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru64)
getCodeFromTypeIL.Emit(OpCodes.Br, fa64)
getCodeFromTypeIL.MarkLabel(tru64)
getCodeFromTypeIL.MarkSequencePoint(doc7, 587, 1, 587, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(170))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc7, 588, 1, 588, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc7, 589, 1, 589, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont64)
getCodeFromTypeIL.MarkLabel(fa64)
getCodeFromTypeIL.Emit(OpCodes.Br, cont64)
getCodeFromTypeIL.MarkLabel(cont64)
getCodeFromTypeIL.MarkSequencePoint(doc7, 591, 1, 591, 100)
getCodeFromTypeIL.MarkLabel(label18)
getCodeFromTypeIL.MarkSequencePoint(doc7, 592, 1, 592, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
getCodeFromTypeIL.MarkSequencePoint(doc7, 593, 1, 593, 100)
getCodeFromTypeIL.Emit(OpCodes.Ret)
Dim typ72(-1) As Type
ReDim Preserve typ72(UBound(typ72) + 1)
typ72(UBound(typ72)) = GetType(System.Int32)
Dim getTypeFromCode As MethodBuilder = Helpers.DefineMethod("getTypeFromCode", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Type), typ72)
Dim getTypeFromCodeIL As ILGenerator = getTypeFromCode.GetILGenerator()
Dim getTypeFromCodeparam01 As ParameterBuilder = getTypeFromCode.DefineParameter(1, ParameterAttributes.None, "cod")
getTypeFromCodeIL.MarkSequencePoint(doc7, 596, 1, 596, 100)
Dim locbldr111 As LocalBuilder = getTypeFromCodeIL.DeclareLocal(GetType(System.Type))
locbldr111.SetLocalSymInfo("typ2")
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(System.Object))
Dim typ73 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ73))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ73).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc7, 598, 1, 598, 100)
Dim label19 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.MarkSequencePoint(doc7, 600, 1, 600, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(101))
Typ = GetType(System.Int32)
Dim fa65 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru65 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont65 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru65)
getTypeFromCodeIL.Emit(OpCodes.Br, fa65)
getTypeFromCodeIL.MarkLabel(tru65)
getTypeFromCodeIL.MarkSequencePoint(doc7, 601, 1, 601, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(System.Boolean))
Dim typ74 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ74))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ74).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc7, 602, 1, 602, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc7, 603, 1, 603, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont65)
getTypeFromCodeIL.MarkLabel(fa65)
getTypeFromCodeIL.Emit(OpCodes.Br, cont65)
getTypeFromCodeIL.MarkLabel(cont65)
getTypeFromCodeIL.MarkSequencePoint(doc7, 605, 1, 605, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(8))
Typ = GetType(System.Int32)
Dim fa66 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru66 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont66 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru66)
getTypeFromCodeIL.Emit(OpCodes.Br, fa66)
getTypeFromCodeIL.MarkLabel(tru66)
getTypeFromCodeIL.MarkSequencePoint(doc7, 606, 1, 606, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(Byte))
Dim typ75 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ75))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ75).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc7, 607, 1, 607, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc7, 608, 1, 608, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont66)
getTypeFromCodeIL.MarkLabel(fa66)
getTypeFromCodeIL.Emit(OpCodes.Br, cont66)
getTypeFromCodeIL.MarkLabel(cont66)
getTypeFromCodeIL.MarkSequencePoint(doc7, 610, 1, 610, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(16))
Typ = GetType(System.Int32)
Dim fa67 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru67 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont67 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru67)
getTypeFromCodeIL.Emit(OpCodes.Br, fa67)
getTypeFromCodeIL.MarkLabel(tru67)
getTypeFromCodeIL.MarkSequencePoint(doc7, 611, 1, 611, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(UInt16))
Dim typ76 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ76))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ76).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc7, 612, 1, 612, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc7, 613, 1, 613, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont67)
getTypeFromCodeIL.MarkLabel(fa67)
getTypeFromCodeIL.Emit(OpCodes.Br, cont67)
getTypeFromCodeIL.MarkLabel(cont67)
getTypeFromCodeIL.MarkSequencePoint(doc7, 615, 1, 615, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(32))
Typ = GetType(System.Int32)
Dim fa68 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru68 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont68 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru68)
getTypeFromCodeIL.Emit(OpCodes.Br, fa68)
getTypeFromCodeIL.MarkLabel(tru68)
getTypeFromCodeIL.MarkSequencePoint(doc7, 616, 1, 616, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(UInt32))
Dim typ77 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ77))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ77).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc7, 617, 1, 617, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc7, 618, 1, 618, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont68)
getTypeFromCodeIL.MarkLabel(fa68)
getTypeFromCodeIL.Emit(OpCodes.Br, cont68)
getTypeFromCodeIL.MarkLabel(cont68)
getTypeFromCodeIL.MarkSequencePoint(doc7, 620, 1, 620, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(40))
Typ = GetType(System.Int32)
Dim fa69 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru69 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont69 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru69)
getTypeFromCodeIL.Emit(OpCodes.Br, fa69)
getTypeFromCodeIL.MarkLabel(tru69)
getTypeFromCodeIL.MarkSequencePoint(doc7, 621, 1, 621, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(UIntPtr))
Dim typ78 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ78))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ78).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc7, 622, 1, 622, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc7, 623, 1, 623, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont69)
getTypeFromCodeIL.MarkLabel(fa69)
getTypeFromCodeIL.Emit(OpCodes.Br, cont69)
getTypeFromCodeIL.MarkLabel(cont69)
getTypeFromCodeIL.MarkSequencePoint(doc7, 625, 1, 625, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(64))
Typ = GetType(System.Int32)
Dim fa70 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru70 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont70 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru70)
getTypeFromCodeIL.Emit(OpCodes.Br, fa70)
getTypeFromCodeIL.MarkLabel(tru70)
getTypeFromCodeIL.MarkSequencePoint(doc7, 626, 1, 626, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(UInt64))
Dim typ79 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ79))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ79).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc7, 627, 1, 627, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc7, 628, 1, 628, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont70)
getTypeFromCodeIL.MarkLabel(fa70)
getTypeFromCodeIL.Emit(OpCodes.Br, cont70)
getTypeFromCodeIL.MarkLabel(cont70)
getTypeFromCodeIL.MarkSequencePoint(doc7, 630, 1, 630, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(108))
Typ = GetType(System.Int32)
Dim fa71 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru71 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont71 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru71)
getTypeFromCodeIL.Emit(OpCodes.Br, fa71)
getTypeFromCodeIL.MarkLabel(tru71)
getTypeFromCodeIL.MarkSequencePoint(doc7, 631, 1, 631, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(System.SByte))
Dim typ80 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ80))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ80).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc7, 632, 1, 632, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc7, 633, 1, 633, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont71)
getTypeFromCodeIL.MarkLabel(fa71)
getTypeFromCodeIL.Emit(OpCodes.Br, cont71)
getTypeFromCodeIL.MarkLabel(cont71)
getTypeFromCodeIL.MarkSequencePoint(doc7, 635, 1, 635, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(116))
Typ = GetType(System.Int32)
Dim fa72 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru72 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont72 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru72)
getTypeFromCodeIL.Emit(OpCodes.Br, fa72)
getTypeFromCodeIL.MarkLabel(tru72)
getTypeFromCodeIL.MarkSequencePoint(doc7, 636, 1, 636, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(System.Int16))
Dim typ81 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ81))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ81).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc7, 637, 1, 637, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc7, 638, 1, 638, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont72)
getTypeFromCodeIL.MarkLabel(fa72)
getTypeFromCodeIL.Emit(OpCodes.Br, cont72)
getTypeFromCodeIL.MarkLabel(cont72)
getTypeFromCodeIL.MarkSequencePoint(doc7, 640, 1, 640, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(132))
Typ = GetType(System.Int32)
Dim fa73 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru73 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont73 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru73)
getTypeFromCodeIL.Emit(OpCodes.Br, fa73)
getTypeFromCodeIL.MarkLabel(tru73)
getTypeFromCodeIL.MarkSequencePoint(doc7, 641, 1, 641, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(System.Int32))
Dim typ82 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ82))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ82).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc7, 642, 1, 642, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc7, 643, 1, 643, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont73)
getTypeFromCodeIL.MarkLabel(fa73)
getTypeFromCodeIL.Emit(OpCodes.Br, cont73)
getTypeFromCodeIL.MarkLabel(cont73)
getTypeFromCodeIL.MarkSequencePoint(doc7, 645, 1, 645, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(140))
Typ = GetType(System.Int32)
Dim fa74 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru74 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont74 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru74)
getTypeFromCodeIL.Emit(OpCodes.Br, fa74)
getTypeFromCodeIL.MarkLabel(tru74)
getTypeFromCodeIL.MarkSequencePoint(doc7, 646, 1, 646, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(IntPtr))
Dim typ83 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ83))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ83).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc7, 647, 1, 647, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc7, 648, 1, 648, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont74)
getTypeFromCodeIL.MarkLabel(fa74)
getTypeFromCodeIL.Emit(OpCodes.Br, cont74)
getTypeFromCodeIL.MarkLabel(cont74)
getTypeFromCodeIL.MarkSequencePoint(doc7, 650, 1, 650, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(150))
Typ = GetType(System.Int32)
Dim fa75 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru75 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont75 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru75)
getTypeFromCodeIL.Emit(OpCodes.Br, fa75)
getTypeFromCodeIL.MarkLabel(tru75)
getTypeFromCodeIL.MarkSequencePoint(doc7, 651, 1, 651, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(System.Char))
Dim typ84 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ84))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ84).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc7, 652, 1, 652, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc7, 653, 1, 653, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont75)
getTypeFromCodeIL.MarkLabel(fa75)
getTypeFromCodeIL.Emit(OpCodes.Br, cont75)
getTypeFromCodeIL.MarkLabel(cont75)
getTypeFromCodeIL.MarkSequencePoint(doc7, 655, 1, 655, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(164))
Typ = GetType(System.Int32)
Dim fa76 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru76 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont76 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru76)
getTypeFromCodeIL.Emit(OpCodes.Br, fa76)
getTypeFromCodeIL.MarkLabel(tru76)
getTypeFromCodeIL.MarkSequencePoint(doc7, 656, 1, 656, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(System.Int64))
Dim typ85 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ85))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ85).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc7, 657, 1, 657, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc7, 658, 1, 658, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont76)
getTypeFromCodeIL.MarkLabel(fa76)
getTypeFromCodeIL.Emit(OpCodes.Br, cont76)
getTypeFromCodeIL.MarkLabel(cont76)
getTypeFromCodeIL.MarkSequencePoint(doc7, 660, 1, 660, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(170))
Typ = GetType(System.Int32)
Dim fa77 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru77 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont77 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru77)
getTypeFromCodeIL.Emit(OpCodes.Br, fa77)
getTypeFromCodeIL.MarkLabel(tru77)
getTypeFromCodeIL.MarkSequencePoint(doc7, 661, 1, 661, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(System.String))
Dim typ86 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ86))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ86).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc7, 662, 1, 662, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc7, 663, 1, 663, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont77)
getTypeFromCodeIL.MarkLabel(fa77)
getTypeFromCodeIL.Emit(OpCodes.Br, cont77)
getTypeFromCodeIL.MarkLabel(cont77)
getTypeFromCodeIL.MarkSequencePoint(doc7, 665, 1, 665, 100)
getTypeFromCodeIL.MarkLabel(label19)
getTypeFromCodeIL.MarkSequencePoint(doc7, 666, 1, 666, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
getTypeFromCodeIL.MarkSequencePoint(doc7, 667, 1, 667, 100)
getTypeFromCodeIL.Emit(OpCodes.Ret)
Helpers.CreateType()
End Sub


Dim doc8 As ISymbolDocumentWriter


Dim doc9 As ISymbolDocumentWriter

Sub OpStack()
Dim OpStack As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "OpStack", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim Stack As FieldBuilder = OpStack.DefineField("Stack", GetType(Expr), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = OpStack.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc9, 14, 1, 14, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc9, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, GetType(Expr).GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, Stack)
ctor0IL.MarkSequencePoint(doc9, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(Token)
Dim PushOp As MethodBuilder = OpStack.DefineMethod("PushOp", MethodAttributes.Public, GetType(System.Void), typ0)
Dim PushOpIL As ILGenerator = PushOp.GetILGenerator()
Dim PushOpparam01 As ParameterBuilder = PushOp.DefineParameter(1, ParameterAttributes.None, "optok")
PushOpIL.MarkSequencePoint(doc9, 19, 1, 19, 100)
Dim typ1(-1) As Type
PushOpIL.Emit(OpCodes.Ldarg_0)
PushOpIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
PushOpIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = Typ
PushOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ1))
Typ = Typ03.GetMethod("AddToken", typ1).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
PushOpIL.Emit(OpCodes.Pop)
End If
PushOpIL.MarkSequencePoint(doc9, 20, 1, 20, 100)
PushOpIL.Emit(OpCodes.Ret)
Dim PopOp As MethodBuilder = OpStack.DefineMethod("PopOp", MethodAttributes.Public, GetType(System.Void), Type.EmptyTypes)
Dim PopOpIL As ILGenerator = PopOp.GetILGenerator()
PopOpIL.MarkSequencePoint(doc9, 23, 1, 23, 100)
PopOpIL.Emit(OpCodes.Ldarg_0)
PopOpIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
PopOpIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
PopOpIL.Emit(OpCodes.Ldlen)
PopOpIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
PopOpIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa78 As System.Reflection.Emit.Label = PopOpIL.DefineLabel()
Dim tru78 As System.Reflection.Emit.Label = PopOpIL.DefineLabel()
Dim cont78 As System.Reflection.Emit.Label = PopOpIL.DefineLabel()
PopOpIL.Emit(OpCodes.Beq, tru78)
PopOpIL.Emit(OpCodes.Br, fa78)
PopOpIL.MarkLabel(tru78)
PopOpIL.MarkSequencePoint(doc9, 24, 1, 24, 100)
PopOpIL.Emit(OpCodes.Br, cont78)
PopOpIL.MarkLabel(fa78)
PopOpIL.MarkSequencePoint(doc9, 25, 1, 25, 100)
Dim locbldr112 As LocalBuilder = PopOpIL.DeclareLocal(GetType(System.Int32))
locbldr112.SetLocalSymInfo("ind")
PopOpIL.Emit(OpCodes.Ldarg_0)
PopOpIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
PopOpIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
PopOpIL.Emit(OpCodes.Ldlen)
PopOpIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
PopOpIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PopOpIL.Emit(OpCodes.Sub)
PopOpIL.Emit(OpCodes.Stloc, 0)
PopOpIL.MarkSequencePoint(doc9, 26, 1, 26, 100)
Dim typ2(-1) As Type
PopOpIL.Emit(OpCodes.Ldarg_0)
PopOpIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
PopOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = Typ
PopOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ2))
Typ = Typ03.GetMethod("RemToken", typ2).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
PopOpIL.Emit(OpCodes.Pop)
End If
PopOpIL.MarkSequencePoint(doc9, 27, 1, 27, 100)
PopOpIL.Emit(OpCodes.Br, cont78)
PopOpIL.MarkLabel(cont78)
PopOpIL.MarkSequencePoint(doc9, 28, 1, 28, 100)
PopOpIL.Emit(OpCodes.Ret)
Dim TopOp As MethodBuilder = OpStack.DefineMethod("TopOp", MethodAttributes.Public, GetType(Token), Type.EmptyTypes)
Dim TopOpIL As ILGenerator = TopOp.GetILGenerator()
TopOpIL.MarkSequencePoint(doc9, 31, 1, 31, 100)
TopOpIL.Emit(OpCodes.Ldarg_0)
TopOpIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
TopOpIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
TopOpIL.Emit(OpCodes.Ldlen)
TopOpIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
TopOpIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa79 As System.Reflection.Emit.Label = TopOpIL.DefineLabel()
Dim tru79 As System.Reflection.Emit.Label = TopOpIL.DefineLabel()
Dim cont79 As System.Reflection.Emit.Label = TopOpIL.DefineLabel()
TopOpIL.Emit(OpCodes.Beq, tru79)
TopOpIL.Emit(OpCodes.Br, fa79)
TopOpIL.MarkLabel(tru79)
TopOpIL.MarkSequencePoint(doc9, 32, 1, 32, 100)
TopOpIL.Emit(OpCodes.Ldnull)
TopOpIL.MarkSequencePoint(doc9, 33, 1, 33, 100)
TopOpIL.Emit(OpCodes.Br, cont79)
TopOpIL.MarkLabel(fa79)
TopOpIL.MarkSequencePoint(doc9, 34, 1, 34, 100)
Dim locbldr113 As LocalBuilder = TopOpIL.DeclareLocal(GetType(System.Int32))
locbldr113.SetLocalSymInfo("ind")
TopOpIL.Emit(OpCodes.Ldarg_0)
TopOpIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
TopOpIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
TopOpIL.Emit(OpCodes.Ldlen)
TopOpIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
TopOpIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
TopOpIL.Emit(OpCodes.Sub)
TopOpIL.Emit(OpCodes.Stloc, 0)
TopOpIL.MarkSequencePoint(doc9, 35, 1, 35, 100)
Dim locbldr114 As LocalBuilder = TopOpIL.DeclareLocal(GetType(Token))
locbldr114.SetLocalSymInfo("optok")
TopOpIL.Emit(OpCodes.Ldarg_0)
TopOpIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
TopOpIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
TopOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
TopOpIL.Emit(OpCodes.Conv_U)
Typ = Typ02
TopOpIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
TopOpIL.Emit(OpCodes.Stloc, 1)
TopOpIL.MarkSequencePoint(doc9, 36, 1, 36, 100)
TopOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Token)
TopOpIL.MarkSequencePoint(doc9, 37, 1, 37, 100)
TopOpIL.Emit(OpCodes.Br, cont79)
TopOpIL.MarkLabel(cont79)
TopOpIL.MarkSequencePoint(doc9, 38, 1, 38, 100)
TopOpIL.Emit(OpCodes.Ret)
Dim getLength As MethodBuilder = OpStack.DefineMethod("getLength", MethodAttributes.Public, GetType(System.Int32), Type.EmptyTypes)
Dim getLengthIL As ILGenerator = getLength.GetILGenerator()
getLengthIL.MarkSequencePoint(doc9, 41, 1, 41, 100)
getLengthIL.Emit(OpCodes.Ldarg_0)
getLengthIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
getLengthIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
getLengthIL.Emit(OpCodes.Ldlen)
getLengthIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
getLengthIL.MarkSequencePoint(doc9, 42, 1, 42, 100)
getLengthIL.Emit(OpCodes.Ret)
OpStack.CreateType()
End Sub


Dim doc10 As ISymbolDocumentWriter

Sub Evaluator()
Dim Evaluator As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "Evaluator", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass Or TypeAttributes.BeforeFieldInit, GetType(System.Object))
Dim Stack As FieldBuilder = Evaluator.DefineField("Stack", asm.GetType("dylan.NET.Tokenizer.CodeGen.OpStack"), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = Evaluator.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc10, 14, 1, 14, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc10, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, Stack)
ctor0IL.MarkSequencePoint(doc10, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(Token)
Dim RetPrec As MethodBuilder = Evaluator.DefineMethod("RetPrec", MethodAttributes.Public, GetType(System.Int32), typ0)
Dim RetPrecIL As ILGenerator = RetPrec.GetILGenerator()
Dim RetPrecparam01 As ParameterBuilder = RetPrec.DefineParameter(1, ParameterAttributes.None, "tok")
RetPrecIL.MarkSequencePoint(doc10, 19, 1, 19, 100)
Dim locbldr115 As LocalBuilder = RetPrecIL.DeclareLocal(GetType(System.Type))
locbldr115.SetLocalSymInfo("typ")
RetPrecIL.Emit(OpCodes.Ldnull)
RetPrecIL.Emit(OpCodes.Stloc, 0)
RetPrecIL.MarkSequencePoint(doc10, 20, 1, 20, 100)
Dim locbldr116 As LocalBuilder = RetPrecIL.DeclareLocal(GetType(System.Boolean))
locbldr116.SetLocalSymInfo("b")
RetPrecIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
RetPrecIL.Emit(OpCodes.Stloc, 1)
RetPrecIL.MarkSequencePoint(doc10, 21, 1, 21, 100)
Dim locbldr117 As LocalBuilder = RetPrecIL.DeclareLocal(GetType(System.Int32))
locbldr117.SetLocalSymInfo("prec")
RetPrecIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
RetPrecIL.Emit(OpCodes.Stloc, 2)
RetPrecIL.MarkSequencePoint(doc10, 23, 1, 23, 100)
Dim label0 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
RetPrecIL.MarkSequencePoint(doc10, 25, 1, 25, 100)
RetPrecIL.Emit(OpCodes.Ldtoken, GetType(Op))
Dim typ1 As Type() = {GetType(System.RuntimeTypeHandle)}
RetPrecIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ1))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ1).ReturnType
RetPrecIL.Emit(OpCodes.Stloc, 0)
RetPrecIL.MarkSequencePoint(doc10, 26, 1, 26, 100)
Dim typ2(-1) As Type
RetPrecIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
RetPrecIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
RetPrecIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = Typ
RetPrecIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ2))
Typ = Typ03.GetMethod("IsInstanceOfType", typ2).ReturnType
RetPrecIL.Emit(OpCodes.Stloc, 1)
RetPrecIL.MarkSequencePoint(doc10, 28, 1, 28, 100)
RetPrecIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
RetPrecIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa80 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim tru80 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim cont80 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
RetPrecIL.Emit(OpCodes.Beq, tru80)
RetPrecIL.Emit(OpCodes.Br, fa80)
RetPrecIL.MarkLabel(tru80)
RetPrecIL.MarkSequencePoint(doc10, 29, 1, 29, 100)
Dim locbldr118 As LocalBuilder = RetPrecIL.DeclareLocal(GetType(Op))
locbldr118.SetLocalSymInfo("optok")
RetPrecIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
RetPrecIL.Emit(OpCodes.Stloc, 3)
RetPrecIL.MarkSequencePoint(doc10, 30, 1, 30, 100)
RetPrecIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Op)
RetPrecIL.Emit(OpCodes.Ldfld, GetType(Op).GetField("PrecNo"))
Typ = GetType(Op).GetField("PrecNo").FieldType
RetPrecIL.Emit(OpCodes.Stloc, 2)
RetPrecIL.MarkSequencePoint(doc10, 31, 1, 31, 100)
RetPrecIL.Emit(OpCodes.Br, label0)
RetPrecIL.MarkSequencePoint(doc10, 32, 1, 32, 100)
RetPrecIL.Emit(OpCodes.Br, cont80)
RetPrecIL.MarkLabel(fa80)
RetPrecIL.Emit(OpCodes.Br, cont80)
RetPrecIL.MarkLabel(cont80)
RetPrecIL.MarkSequencePoint(doc10, 34, 1, 34, 100)
RetPrecIL.Emit(OpCodes.Ldtoken, GetType(LParen))
Dim typ3 As Type() = {GetType(System.RuntimeTypeHandle)}
RetPrecIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ3))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ3).ReturnType
RetPrecIL.Emit(OpCodes.Stloc, 0)
RetPrecIL.MarkSequencePoint(doc10, 35, 1, 35, 100)
Dim typ4(-1) As Type
RetPrecIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
RetPrecIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
RetPrecIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
RetPrecIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ4))
Typ = Typ03.GetMethod("IsInstanceOfType", typ4).ReturnType
RetPrecIL.Emit(OpCodes.Stloc, 1)
RetPrecIL.MarkSequencePoint(doc10, 37, 1, 37, 100)
RetPrecIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
RetPrecIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa81 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim tru81 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim cont81 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
RetPrecIL.Emit(OpCodes.Beq, tru81)
RetPrecIL.Emit(OpCodes.Br, fa81)
RetPrecIL.MarkLabel(tru81)
RetPrecIL.MarkSequencePoint(doc10, 38, 1, 38, 100)
RetPrecIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
RetPrecIL.Emit(OpCodes.Stloc, 2)
RetPrecIL.MarkSequencePoint(doc10, 39, 1, 39, 100)
RetPrecIL.Emit(OpCodes.Br, label0)
RetPrecIL.MarkSequencePoint(doc10, 40, 1, 40, 100)
RetPrecIL.Emit(OpCodes.Br, cont81)
RetPrecIL.MarkLabel(fa81)
RetPrecIL.Emit(OpCodes.Br, cont81)
RetPrecIL.MarkLabel(cont81)
RetPrecIL.MarkSequencePoint(doc10, 42, 1, 42, 100)
RetPrecIL.Emit(OpCodes.Ldtoken, GetType(RParen))
Dim typ5 As Type() = {GetType(System.RuntimeTypeHandle)}
RetPrecIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ5))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ5).ReturnType
RetPrecIL.Emit(OpCodes.Stloc, 0)
RetPrecIL.MarkSequencePoint(doc10, 43, 1, 43, 100)
Dim typ6(-1) As Type
RetPrecIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
RetPrecIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
RetPrecIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = Typ
RetPrecIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ6))
Typ = Typ03.GetMethod("IsInstanceOfType", typ6).ReturnType
RetPrecIL.Emit(OpCodes.Stloc, 1)
RetPrecIL.MarkSequencePoint(doc10, 45, 1, 45, 100)
RetPrecIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
RetPrecIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa82 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim tru82 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim cont82 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
RetPrecIL.Emit(OpCodes.Beq, tru82)
RetPrecIL.Emit(OpCodes.Br, fa82)
RetPrecIL.MarkLabel(tru82)
RetPrecIL.MarkSequencePoint(doc10, 46, 1, 46, 100)
RetPrecIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
RetPrecIL.Emit(OpCodes.Stloc, 2)
RetPrecIL.MarkSequencePoint(doc10, 47, 1, 47, 100)
RetPrecIL.Emit(OpCodes.Br, label0)
RetPrecIL.MarkSequencePoint(doc10, 48, 1, 48, 100)
RetPrecIL.Emit(OpCodes.Br, cont82)
RetPrecIL.MarkLabel(fa82)
RetPrecIL.Emit(OpCodes.Br, cont82)
RetPrecIL.MarkLabel(cont82)
RetPrecIL.MarkSequencePoint(doc10, 50, 1, 50, 100)
RetPrecIL.MarkLabel(label0)
RetPrecIL.MarkSequencePoint(doc10, 52, 1, 52, 100)
RetPrecIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
RetPrecIL.MarkSequencePoint(doc10, 54, 1, 54, 100)
RetPrecIL.Emit(OpCodes.Ret)
Dim typ7(-1) As Type
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = GetType(Token)
Dim isLParen As MethodBuilder = Evaluator.DefineMethod("isLParen", MethodAttributes.Public, GetType(System.Boolean), typ7)
Dim isLParenIL As ILGenerator = isLParen.GetILGenerator()
Dim isLParenparam01 As ParameterBuilder = isLParen.DefineParameter(1, ParameterAttributes.None, "tok")
isLParenIL.MarkSequencePoint(doc10, 57, 1, 57, 100)
Dim locbldr119 As LocalBuilder = isLParenIL.DeclareLocal(GetType(System.Type))
locbldr119.SetLocalSymInfo("typ")
isLParenIL.Emit(OpCodes.Ldtoken, GetType(LParen))
Dim typ8 As Type() = {GetType(System.RuntimeTypeHandle)}
isLParenIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ8))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ8).ReturnType
isLParenIL.Emit(OpCodes.Stloc, 0)
isLParenIL.MarkSequencePoint(doc10, 58, 1, 58, 100)
Dim typ9(-1) As Type
isLParenIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
isLParenIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
isLParenIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = Typ
isLParenIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ9))
Typ = Typ03.GetMethod("IsInstanceOfType", typ9).ReturnType
isLParenIL.MarkSequencePoint(doc10, 59, 1, 59, 100)
isLParenIL.Emit(OpCodes.Ret)
Dim typ10(-1) As Type
ReDim Preserve typ10(UBound(typ10) + 1)
typ10(UBound(typ10)) = GetType(Token)
Dim isOp As MethodBuilder = Evaluator.DefineMethod("isOp", MethodAttributes.Public, GetType(System.Boolean), typ10)
Dim isOpIL As ILGenerator = isOp.GetILGenerator()
Dim isOpparam01 As ParameterBuilder = isOp.DefineParameter(1, ParameterAttributes.None, "tok")
isOpIL.MarkSequencePoint(doc10, 62, 1, 62, 100)
Dim locbldr120 As LocalBuilder = isOpIL.DeclareLocal(GetType(System.Type))
locbldr120.SetLocalSymInfo("typ")
isOpIL.Emit(OpCodes.Ldtoken, GetType(Op))
Dim typ11 As Type() = {GetType(System.RuntimeTypeHandle)}
isOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ11))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ11).ReturnType
isOpIL.Emit(OpCodes.Stloc, 0)
isOpIL.MarkSequencePoint(doc10, 63, 1, 63, 100)
Dim typ12(-1) As Type
isOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
isOpIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
isOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ12(UBound(typ12) + 1)
typ12(UBound(typ12)) = Typ
isOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ12))
Typ = Typ03.GetMethod("IsInstanceOfType", typ12).ReturnType
isOpIL.MarkSequencePoint(doc10, 64, 1, 64, 100)
isOpIL.Emit(OpCodes.Ret)
Dim typ13(-1) As Type
ReDim Preserve typ13(UBound(typ13) + 1)
typ13(UBound(typ13)) = GetType(Expr)
Dim ConvToRPN As MethodBuilder = Evaluator.DefineMethod("ConvToRPN", MethodAttributes.Public, GetType(Expr), typ13)
Dim ConvToRPNIL As ILGenerator = ConvToRPN.GetILGenerator()
Dim ConvToRPNparam01 As ParameterBuilder = ConvToRPN.DefineParameter(1, ParameterAttributes.None, "exp")
ConvToRPNIL.MarkSequencePoint(doc10, 68, 1, 68, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.OpStack").GetConstructor(Type.EmptyTypes))
ConvToRPNIL.Emit(OpCodes.Stfld, Stack)
ConvToRPNIL.MarkSequencePoint(doc10, 69, 1, 69, 100)
Dim locbldr121 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(Expr))
locbldr121.SetLocalSymInfo("exp2")
ConvToRPNIL.Emit(OpCodes.Newobj, GetType(Expr).GetConstructor(Type.EmptyTypes))
ConvToRPNIL.Emit(OpCodes.Stloc, 0)
ConvToRPNIL.MarkSequencePoint(doc10, 70, 1, 70, 100)
Dim locbldr122 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(System.Int32))
locbldr122.SetLocalSymInfo("i")
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Stloc, 1)
ConvToRPNIL.MarkSequencePoint(doc10, 71, 1, 71, 100)
Dim locbldr123 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(System.Int32))
locbldr123.SetLocalSymInfo("len")
ConvToRPNIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToRPNIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
ConvToRPNIL.Emit(OpCodes.Ldlen)
ConvToRPNIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Sub)
ConvToRPNIL.Emit(OpCodes.Stloc, 2)
ConvToRPNIL.MarkSequencePoint(doc10, 72, 1, 72, 100)
Dim locbldr124 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(System.Int32))
locbldr124.SetLocalSymInfo("int1")
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Stloc, 3)
ConvToRPNIL.MarkSequencePoint(doc10, 73, 1, 73, 100)
Dim locbldr125 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(System.Int32))
locbldr125.SetLocalSymInfo("int2")
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Stloc, 4)
ConvToRPNIL.MarkSequencePoint(doc10, 74, 1, 74, 100)
Dim locbldr126 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(Token))
locbldr126.SetLocalSymInfo("tok")
ConvToRPNIL.Emit(OpCodes.Ldnull)
ConvToRPNIL.Emit(OpCodes.Stloc, 5)
ConvToRPNIL.MarkSequencePoint(doc10, 75, 1, 75, 100)
Dim locbldr127 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(Token))
locbldr127.SetLocalSymInfo("tok2")
ConvToRPNIL.Emit(OpCodes.Ldnull)
ConvToRPNIL.Emit(OpCodes.Stloc, 6)
ConvToRPNIL.MarkSequencePoint(doc10, 76, 1, 76, 100)
Dim locbldr128 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(System.Type))
locbldr128.SetLocalSymInfo("typ")
ConvToRPNIL.Emit(OpCodes.Ldnull)
ConvToRPNIL.Emit(OpCodes.Stloc, 7)
ConvToRPNIL.MarkSequencePoint(doc10, 77, 1, 77, 100)
Dim locbldr129 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(System.Boolean))
locbldr129.SetLocalSymInfo("b")
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc10, 78, 1, 78, 100)
Dim locbldr130 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(System.Boolean))
locbldr130.SetLocalSymInfo("orflg")
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Stloc, 9)
ConvToRPNIL.MarkSequencePoint(doc10, 80, 1, 80, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Expr)
ConvToRPNIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToRPNIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Line"))
Typ = GetType(Expr).GetField("Line").FieldType
ConvToRPNIL.Emit(OpCodes.Stfld, GetType(Expr).GetField("Line"))
ConvToRPNIL.MarkSequencePoint(doc10, 82, 1, 82, 100)
Dim label1 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.MarkSequencePoint(doc10, 83, 1, 83, 100)
Dim label2 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.MarkSequencePoint(doc10, 84, 1, 84, 100)
Dim label3 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.MarkSequencePoint(doc10, 86, 1, 86, 100)
ConvToRPNIL.MarkLabel(label2)
ConvToRPNIL.MarkSequencePoint(doc10, 88, 1, 88, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Add)
ConvToRPNIL.Emit(OpCodes.Stloc, 1)
ConvToRPNIL.MarkSequencePoint(doc10, 90, 1, 90, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToRPNIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
ConvToRPNIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ConvToRPNIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ConvToRPNIL.Emit(OpCodes.Stloc, 5)
ConvToRPNIL.MarkSequencePoint(doc10, 92, 1, 92, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ14(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, isOp)
Typ = isOp.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 9)
ConvToRPNIL.MarkSequencePoint(doc10, 93, 1, 93, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ15(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReDim Preserve typ15(UBound(typ15) + 1)
typ15(UBound(typ15)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, isLParen)
Typ = isLParen.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc10, 94, 1, 94, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Or)
ConvToRPNIL.Emit(OpCodes.Stloc, 9)
ConvToRPNIL.MarkSequencePoint(doc10, 95, 1, 95, 100)
ConvToRPNIL.Emit(OpCodes.Ldtoken, GetType(RParen))
Dim typ16 As Type() = {GetType(System.RuntimeTypeHandle)}
ConvToRPNIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ16))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ16).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 7)
ConvToRPNIL.MarkSequencePoint(doc10, 96, 1, 96, 100)
Dim typ17(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Type)
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ConvToRPNIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ17(UBound(typ17) + 1)
typ17(UBound(typ17)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ17))
Typ = Typ03.GetMethod("IsInstanceOfType", typ17).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc10, 97, 1, 97, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Or)
ConvToRPNIL.Emit(OpCodes.Stloc, 9)
ConvToRPNIL.MarkSequencePoint(doc10, 99, 1, 99, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa83 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru83 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont83 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru83)
ConvToRPNIL.Emit(OpCodes.Br, fa83)
ConvToRPNIL.MarkLabel(tru83)
ConvToRPNIL.MarkSequencePoint(doc10, 100, 1, 100, 100)
Dim typ18(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Expr)
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReDim Preserve typ18(UBound(typ18) + 1)
typ18(UBound(typ18)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ18))
Typ = Typ03.GetMethod("AddToken", typ18).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc10, 101, 1, 101, 100)
ConvToRPNIL.Emit(OpCodes.Br, label3)
ConvToRPNIL.MarkSequencePoint(doc10, 102, 1, 102, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont83)
ConvToRPNIL.MarkLabel(fa83)
ConvToRPNIL.Emit(OpCodes.Br, cont83)
ConvToRPNIL.MarkLabel(cont83)
ConvToRPNIL.MarkSequencePoint(doc10, 104, 1, 104, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ19(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReDim Preserve typ19(UBound(typ19) + 1)
typ19(UBound(typ19)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, isOp)
Typ = isOp.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc10, 106, 1, 106, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa84 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru84 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont84 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru84)
ConvToRPNIL.Emit(OpCodes.Br, fa84)
ConvToRPNIL.MarkLabel(tru84)
ConvToRPNIL.MarkSequencePoint(doc10, 107, 1, 107, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("getLength", Type.EmptyTypes))
Typ = Typ03.GetMethod("getLength", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 3)
ConvToRPNIL.MarkSequencePoint(doc10, 108, 1, 108, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa85 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru85 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont85 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, fa85)
ConvToRPNIL.Emit(OpCodes.Br, tru85)
ConvToRPNIL.MarkLabel(tru85)
ConvToRPNIL.MarkSequencePoint(doc10, 109, 1, 109, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("TopOp", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 6)
ConvToRPNIL.MarkSequencePoint(doc10, 110, 1, 110, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ22(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReDim Preserve typ22(UBound(typ22) + 1)
typ22(UBound(typ22)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, RetPrec)
Typ = RetPrec.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 3)
ConvToRPNIL.MarkSequencePoint(doc10, 111, 1, 111, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ23(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
ReDim Preserve typ23(UBound(typ23) + 1)
typ23(UBound(typ23)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, RetPrec)
Typ = RetPrec.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 4)
ConvToRPNIL.MarkSequencePoint(doc10, 112, 1, 112, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
Dim fa86 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru86 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont86 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Ble, tru86)
ConvToRPNIL.Emit(OpCodes.Br, fa86)
ConvToRPNIL.MarkLabel(tru86)
ConvToRPNIL.MarkSequencePoint(doc10, 113, 1, 113, 100)
Dim typ24(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Expr)
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
ReDim Preserve typ24(UBound(typ24) + 1)
typ24(UBound(typ24)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ24))
Typ = Typ03.GetMethod("AddToken", typ24).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc10, 114, 1, 114, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("PopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("PopOp", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc10, 115, 1, 115, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont86)
ConvToRPNIL.MarkLabel(fa86)
ConvToRPNIL.Emit(OpCodes.Br, cont86)
ConvToRPNIL.MarkLabel(cont86)
ConvToRPNIL.MarkSequencePoint(doc10, 116, 1, 116, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont85)
ConvToRPNIL.MarkLabel(fa85)
ConvToRPNIL.Emit(OpCodes.Br, cont85)
ConvToRPNIL.MarkLabel(cont85)
ConvToRPNIL.MarkSequencePoint(doc10, 117, 1, 117, 100)
Dim typ26(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReDim Preserve typ26(UBound(typ26) + 1)
typ26(UBound(typ26)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("PushOp", typ26))
Typ = Typ03.GetMethod("PushOp", typ26).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc10, 118, 1, 118, 100)
ConvToRPNIL.Emit(OpCodes.Br, label3)
ConvToRPNIL.MarkSequencePoint(doc10, 119, 1, 119, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont84)
ConvToRPNIL.MarkLabel(fa84)
ConvToRPNIL.Emit(OpCodes.Br, cont84)
ConvToRPNIL.MarkLabel(cont84)
ConvToRPNIL.MarkSequencePoint(doc10, 121, 1, 121, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ27(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReDim Preserve typ27(UBound(typ27) + 1)
typ27(UBound(typ27)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, isLParen)
Typ = isLParen.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc10, 123, 1, 123, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa87 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru87 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont87 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru87)
ConvToRPNIL.Emit(OpCodes.Br, fa87)
ConvToRPNIL.MarkLabel(tru87)
ConvToRPNIL.MarkSequencePoint(doc10, 124, 1, 124, 100)
Dim typ28(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReDim Preserve typ28(UBound(typ28) + 1)
typ28(UBound(typ28)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("PushOp", typ28))
Typ = Typ03.GetMethod("PushOp", typ28).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc10, 125, 1, 125, 100)
ConvToRPNIL.Emit(OpCodes.Br, label3)
ConvToRPNIL.MarkSequencePoint(doc10, 126, 1, 126, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont87)
ConvToRPNIL.MarkLabel(fa87)
ConvToRPNIL.Emit(OpCodes.Br, cont87)
ConvToRPNIL.MarkLabel(cont87)
ConvToRPNIL.MarkSequencePoint(doc10, 128, 1, 128, 100)
ConvToRPNIL.Emit(OpCodes.Ldtoken, GetType(RParen))
Dim typ29 As Type() = {GetType(System.RuntimeTypeHandle)}
ConvToRPNIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ29))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ29).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 7)
ConvToRPNIL.MarkSequencePoint(doc10, 129, 1, 129, 100)
Dim typ30(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Type)
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ConvToRPNIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ30(UBound(typ30) + 1)
typ30(UBound(typ30)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ30))
Typ = Typ03.GetMethod("IsInstanceOfType", typ30).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc10, 131, 1, 131, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa88 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru88 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont88 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru88)
ConvToRPNIL.Emit(OpCodes.Br, fa88)
ConvToRPNIL.MarkLabel(tru88)
ConvToRPNIL.MarkSequencePoint(doc10, 132, 1, 132, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("getLength", Type.EmptyTypes))
Typ = Typ03.GetMethod("getLength", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 3)
ConvToRPNIL.MarkSequencePoint(doc10, 133, 1, 133, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa89 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru89 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont89 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, fa89)
ConvToRPNIL.Emit(OpCodes.Br, tru89)
ConvToRPNIL.MarkLabel(tru89)
ConvToRPNIL.MarkSequencePoint(doc10, 134, 1, 134, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("TopOp", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 6)
ConvToRPNIL.MarkSequencePoint(doc10, 135, 1, 135, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ33(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
ReDim Preserve typ33(UBound(typ33) + 1)
typ33(UBound(typ33)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, isLParen)
Typ = isLParen.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc10, 136, 1, 136, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa90 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru90 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont90 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru90)
ConvToRPNIL.Emit(OpCodes.Br, fa90)
ConvToRPNIL.MarkLabel(tru90)
ConvToRPNIL.MarkSequencePoint(doc10, 137, 1, 137, 100)
Dim typ34(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Expr)
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
ReDim Preserve typ34(UBound(typ34) + 1)
typ34(UBound(typ34)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ34))
Typ = Typ03.GetMethod("AddToken", typ34).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc10, 138, 1, 138, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("PopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("PopOp", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc10, 139, 1, 139, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("getLength", Type.EmptyTypes))
Typ = Typ03.GetMethod("getLength", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 3)
ConvToRPNIL.MarkSequencePoint(doc10, 140, 1, 140, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa91 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru91 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont91 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, fa91)
ConvToRPNIL.Emit(OpCodes.Br, tru91)
ConvToRPNIL.MarkLabel(tru91)
ConvToRPNIL.MarkSequencePoint(doc10, 141, 1, 141, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("TopOp", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 6)
ConvToRPNIL.MarkSequencePoint(doc10, 142, 1, 142, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ38(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
ReDim Preserve typ38(UBound(typ38) + 1)
typ38(UBound(typ38)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, isLParen)
Typ = isLParen.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc10, 143, 1, 143, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa92 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru92 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont92 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru92)
ConvToRPNIL.Emit(OpCodes.Br, fa92)
ConvToRPNIL.MarkLabel(tru92)
ConvToRPNIL.MarkSequencePoint(doc10, 144, 1, 144, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("PopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("PopOp", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc10, 145, 1, 145, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont92)
ConvToRPNIL.MarkLabel(fa92)
ConvToRPNIL.Emit(OpCodes.Br, cont92)
ConvToRPNIL.MarkLabel(cont92)
ConvToRPNIL.MarkSequencePoint(doc10, 146, 1, 146, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont91)
ConvToRPNIL.MarkLabel(fa91)
ConvToRPNIL.Emit(OpCodes.Br, cont91)
ConvToRPNIL.MarkLabel(cont91)
ConvToRPNIL.MarkSequencePoint(doc10, 147, 1, 147, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont90)
ConvToRPNIL.MarkLabel(fa90)
ConvToRPNIL.Emit(OpCodes.Br, cont90)
ConvToRPNIL.MarkLabel(cont90)
ConvToRPNIL.MarkSequencePoint(doc10, 148, 1, 148, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont89)
ConvToRPNIL.MarkLabel(fa89)
ConvToRPNIL.MarkSequencePoint(doc10, 149, 1, 149, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("TopOp", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 6)
ConvToRPNIL.MarkSequencePoint(doc10, 150, 1, 150, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ41(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
ReDim Preserve typ41(UBound(typ41) + 1)
typ41(UBound(typ41)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, isLParen)
Typ = isLParen.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc10, 151, 1, 151, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa93 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru93 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont93 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru93)
ConvToRPNIL.Emit(OpCodes.Br, fa93)
ConvToRPNIL.MarkLabel(tru93)
ConvToRPNIL.MarkSequencePoint(doc10, 152, 1, 152, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("PopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("PopOp", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc10, 153, 1, 153, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont93)
ConvToRPNIL.MarkLabel(fa93)
ConvToRPNIL.Emit(OpCodes.Br, cont93)
ConvToRPNIL.MarkLabel(cont93)
ConvToRPNIL.MarkSequencePoint(doc10, 154, 1, 154, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont89)
ConvToRPNIL.MarkLabel(cont89)
ConvToRPNIL.MarkSequencePoint(doc10, 155, 1, 155, 100)
ConvToRPNIL.Emit(OpCodes.Br, label3)
ConvToRPNIL.MarkSequencePoint(doc10, 156, 1, 156, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont88)
ConvToRPNIL.MarkLabel(fa88)
ConvToRPNIL.Emit(OpCodes.Br, cont88)
ConvToRPNIL.MarkLabel(cont88)
ConvToRPNIL.MarkSequencePoint(doc10, 158, 1, 158, 100)
ConvToRPNIL.MarkLabel(label3)
ConvToRPNIL.MarkSequencePoint(doc10, 160, 1, 160, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa94 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru94 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont94 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru94)
ConvToRPNIL.Emit(OpCodes.Br, fa94)
ConvToRPNIL.MarkLabel(tru94)
ConvToRPNIL.MarkSequencePoint(doc10, 161, 1, 161, 100)
ConvToRPNIL.Emit(OpCodes.Br, label1)
ConvToRPNIL.MarkSequencePoint(doc10, 162, 1, 162, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont94)
ConvToRPNIL.MarkLabel(fa94)
ConvToRPNIL.MarkSequencePoint(doc10, 163, 1, 163, 100)
ConvToRPNIL.Emit(OpCodes.Br, label2)
ConvToRPNIL.MarkSequencePoint(doc10, 164, 1, 164, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont94)
ConvToRPNIL.MarkLabel(cont94)
ConvToRPNIL.MarkSequencePoint(doc10, 166, 1, 166, 100)
ConvToRPNIL.MarkLabel(label1)
ConvToRPNIL.MarkSequencePoint(doc10, 168, 1, 168, 100)
Dim label4 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.MarkSequencePoint(doc10, 169, 1, 169, 100)
Dim label5 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.MarkSequencePoint(doc10, 171, 1, 171, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("getLength", Type.EmptyTypes))
Typ = Typ03.GetMethod("getLength", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 3)
ConvToRPNIL.MarkSequencePoint(doc10, 172, 1, 172, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa95 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru95 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont95 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru95)
ConvToRPNIL.Emit(OpCodes.Br, fa95)
ConvToRPNIL.MarkLabel(tru95)
ConvToRPNIL.MarkSequencePoint(doc10, 173, 1, 173, 100)
ConvToRPNIL.Emit(OpCodes.Br, label5)
ConvToRPNIL.MarkSequencePoint(doc10, 174, 1, 174, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont95)
ConvToRPNIL.MarkLabel(fa95)
ConvToRPNIL.Emit(OpCodes.Br, cont95)
ConvToRPNIL.MarkLabel(cont95)
ConvToRPNIL.MarkSequencePoint(doc10, 176, 1, 176, 100)
ConvToRPNIL.MarkLabel(label4)
ConvToRPNIL.MarkSequencePoint(doc10, 178, 1, 178, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("TopOp", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 6)
ConvToRPNIL.MarkSequencePoint(doc10, 179, 1, 179, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ45(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
ReDim Preserve typ45(UBound(typ45) + 1)
typ45(UBound(typ45)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, isLParen)
Typ = isLParen.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc10, 181, 1, 181, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa96 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru96 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont96 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru96)
ConvToRPNIL.Emit(OpCodes.Br, fa96)
ConvToRPNIL.MarkLabel(tru96)
ConvToRPNIL.MarkSequencePoint(doc10, 182, 1, 182, 100)
Dim typ46(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Expr)
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
ReDim Preserve typ46(UBound(typ46) + 1)
typ46(UBound(typ46)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ46))
Typ = Typ03.GetMethod("AddToken", typ46).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc10, 183, 1, 183, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont96)
ConvToRPNIL.MarkLabel(fa96)
ConvToRPNIL.Emit(OpCodes.Br, cont96)
ConvToRPNIL.MarkLabel(cont96)
ConvToRPNIL.MarkSequencePoint(doc10, 185, 1, 185, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("PopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("PopOp", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc10, 187, 1, 187, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("getLength", Type.EmptyTypes))
Typ = Typ03.GetMethod("getLength", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 3)
ConvToRPNIL.MarkSequencePoint(doc10, 188, 1, 188, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa97 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru97 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont97 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru97)
ConvToRPNIL.Emit(OpCodes.Br, fa97)
ConvToRPNIL.MarkLabel(tru97)
ConvToRPNIL.MarkSequencePoint(doc10, 189, 1, 189, 100)
ConvToRPNIL.Emit(OpCodes.Br, label5)
ConvToRPNIL.MarkSequencePoint(doc10, 190, 1, 190, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont97)
ConvToRPNIL.MarkLabel(fa97)
ConvToRPNIL.MarkSequencePoint(doc10, 191, 1, 191, 100)
ConvToRPNIL.Emit(OpCodes.Br, label4)
ConvToRPNIL.MarkSequencePoint(doc10, 192, 1, 192, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont97)
ConvToRPNIL.MarkLabel(cont97)
ConvToRPNIL.MarkSequencePoint(doc10, 194, 1, 194, 100)
ConvToRPNIL.MarkLabel(label5)
ConvToRPNIL.MarkSequencePoint(doc10, 196, 1, 196, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Expr)
ConvToRPNIL.MarkSequencePoint(doc10, 198, 1, 198, 100)
ConvToRPNIL.Emit(OpCodes.Ret)
Dim typ49(-1) As Type
ReDim Preserve typ49(UBound(typ49) + 1)
typ49(UBound(typ49)) = GetType(Expr)
Dim ConvToAST As MethodBuilder = Evaluator.DefineMethod("ConvToAST", MethodAttributes.Public, GetType(Expr), typ49)
Dim ConvToASTIL As ILGenerator = ConvToAST.GetILGenerator()
Dim ConvToASTparam01 As ParameterBuilder = ConvToAST.DefineParameter(1, ParameterAttributes.None, "exp")
ConvToASTIL.MarkSequencePoint(doc10, 202, 1, 202, 100)
Dim locbldr131 As LocalBuilder = ConvToASTIL.DeclareLocal(GetType(Token))
locbldr131.SetLocalSymInfo("tokf")
ConvToASTIL.MarkSequencePoint(doc10, 203, 1, 203, 100)
Dim locbldr132 As LocalBuilder = ConvToASTIL.DeclareLocal(GetType(System.Int32))
locbldr132.SetLocalSymInfo("i")
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Stloc, 1)
ConvToASTIL.MarkSequencePoint(doc10, 204, 1, 204, 100)
Dim locbldr133 As LocalBuilder = ConvToASTIL.DeclareLocal(GetType(System.Int32))
locbldr133.SetLocalSymInfo("j")
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Stloc, 2)
ConvToASTIL.MarkSequencePoint(doc10, 205, 1, 205, 100)
Dim locbldr134 As LocalBuilder = ConvToASTIL.DeclareLocal(GetType(System.Int32))
locbldr134.SetLocalSymInfo("len")
ConvToASTIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToASTIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
ConvToASTIL.Emit(OpCodes.Ldlen)
ConvToASTIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Stloc, 3)
ConvToASTIL.MarkSequencePoint(doc10, 206, 1, 206, 100)
Dim locbldr135 As LocalBuilder = ConvToASTIL.DeclareLocal(GetType(Token))
locbldr135.SetLocalSymInfo("tok")
ConvToASTIL.Emit(OpCodes.Ldnull)
ConvToASTIL.Emit(OpCodes.Stloc, 4)
ConvToASTIL.MarkSequencePoint(doc10, 207, 1, 207, 100)
Dim locbldr136 As LocalBuilder = ConvToASTIL.DeclareLocal(GetType(Token))
locbldr136.SetLocalSymInfo("tok2")
ConvToASTIL.Emit(OpCodes.Ldnull)
ConvToASTIL.Emit(OpCodes.Stloc, 5)
ConvToASTIL.MarkSequencePoint(doc10, 208, 1, 208, 100)
Dim locbldr137 As LocalBuilder = ConvToASTIL.DeclareLocal(GetType(System.Type))
locbldr137.SetLocalSymInfo("typ")
ConvToASTIL.Emit(OpCodes.Ldnull)
ConvToASTIL.Emit(OpCodes.Stloc, 6)
ConvToASTIL.MarkSequencePoint(doc10, 209, 1, 209, 100)
Dim locbldr138 As LocalBuilder = ConvToASTIL.DeclareLocal(GetType(System.Boolean))
locbldr138.SetLocalSymInfo("b")
ConvToASTIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ConvToASTIL.Emit(OpCodes.Stloc, 7)
ConvToASTIL.MarkSequencePoint(doc10, 210, 1, 210, 100)
Dim locbldr139 As LocalBuilder = ConvToASTIL.DeclareLocal(GetType(Op))
locbldr139.SetLocalSymInfo("optok")
ConvToASTIL.MarkSequencePoint(doc10, 212, 1, 212, 100)
Dim label6 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
ConvToASTIL.MarkSequencePoint(doc10, 213, 1, 213, 100)
Dim label7 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
ConvToASTIL.MarkSequencePoint(doc10, 214, 1, 214, 100)
Dim label8 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
ConvToASTIL.MarkSequencePoint(doc10, 216, 1, 216, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
Dim fa98 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
Dim tru98 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
Dim cont98 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
ConvToASTIL.Emit(OpCodes.Beq, tru98)
ConvToASTIL.Emit(OpCodes.Br, fa98)
ConvToASTIL.MarkLabel(tru98)
ConvToASTIL.MarkSequencePoint(doc10, 217, 1, 217, 100)
ConvToASTIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToASTIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ConvToASTIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ConvToASTIL.Emit(OpCodes.Stloc, 0)
ConvToASTIL.MarkSequencePoint(doc10, 218, 1, 218, 100)
ConvToASTIL.Emit(OpCodes.Br, label6)
ConvToASTIL.MarkSequencePoint(doc10, 219, 1, 219, 100)
ConvToASTIL.Emit(OpCodes.Br, cont98)
ConvToASTIL.MarkLabel(fa98)
ConvToASTIL.Emit(OpCodes.Br, cont98)
ConvToASTIL.MarkLabel(cont98)
ConvToASTIL.MarkSequencePoint(doc10, 221, 1, 221, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Sub)
ConvToASTIL.Emit(OpCodes.Stloc, 3)
ConvToASTIL.MarkSequencePoint(doc10, 223, 1, 223, 100)
ConvToASTIL.MarkLabel(label7)
ConvToASTIL.MarkSequencePoint(doc10, 225, 1, 225, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Add)
ConvToASTIL.Emit(OpCodes.Stloc, 1)
ConvToASTIL.MarkSequencePoint(doc10, 227, 1, 227, 100)
ConvToASTIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToASTIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
ConvToASTIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ConvToASTIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ConvToASTIL.Emit(OpCodes.Stloc, 4)
ConvToASTIL.MarkSequencePoint(doc10, 229, 1, 229, 100)
ConvToASTIL.Emit(OpCodes.Ldarg_0)
Dim typ50(-1) As Type
ConvToASTIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(Token)
ReDim Preserve typ50(UBound(typ50) + 1)
typ50(UBound(typ50)) = Typ
ConvToASTIL.Emit(OpCodes.Callvirt, isOp)
Typ = isOp.ReturnType
ConvToASTIL.Emit(OpCodes.Stloc, 7)
ConvToASTIL.MarkSequencePoint(doc10, 231, 1, 231, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ConvToASTIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa99 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
Dim tru99 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
Dim cont99 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
ConvToASTIL.Emit(OpCodes.Beq, tru99)
ConvToASTIL.Emit(OpCodes.Br, fa99)
ConvToASTIL.MarkLabel(tru99)
ConvToASTIL.MarkSequencePoint(doc10, 232, 1, 232, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
Dim fa100 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
Dim tru100 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
Dim cont100 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
ConvToASTIL.Emit(OpCodes.Bge, tru100)
ConvToASTIL.Emit(OpCodes.Br, fa100)
ConvToASTIL.MarkLabel(tru100)
ConvToASTIL.MarkSequencePoint(doc10, 233, 1, 233, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(Token)
ConvToASTIL.Emit(OpCodes.Stloc, 8)
ConvToASTIL.MarkSequencePoint(doc10, 235, 1, 235, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Sub)
ConvToASTIL.Emit(OpCodes.Stloc, 2)
ConvToASTIL.MarkSequencePoint(doc10, 236, 1, 236, 100)
ConvToASTIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToASTIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
ConvToASTIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ConvToASTIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ConvToASTIL.Emit(OpCodes.Stloc, 5)
ConvToASTIL.MarkSequencePoint(doc10, 237, 1, 237, 100)
Dim typ51(-1) As Type
ConvToASTIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
ConvToASTIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
ReDim Preserve typ51(UBound(typ51) + 1)
typ51(UBound(typ51)) = Typ
ConvToASTIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ51))
Typ = Typ03.GetMethod("RemToken", typ51).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToASTIL.Emit(OpCodes.Pop)
End If
ConvToASTIL.MarkSequencePoint(doc10, 238, 1, 238, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Sub)
ConvToASTIL.Emit(OpCodes.Stloc, 3)
ConvToASTIL.MarkSequencePoint(doc10, 239, 1, 239, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Sub)
ConvToASTIL.Emit(OpCodes.Stloc, 2)
ConvToASTIL.MarkSequencePoint(doc10, 240, 1, 240, 100)
ConvToASTIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToASTIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
ConvToASTIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ConvToASTIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ConvToASTIL.Emit(OpCodes.Stloc, 4)
ConvToASTIL.MarkSequencePoint(doc10, 241, 1, 241, 100)
Dim typ52(-1) As Type
ConvToASTIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
ConvToASTIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
ReDim Preserve typ52(UBound(typ52) + 1)
typ52(UBound(typ52)) = Typ
ConvToASTIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ52))
Typ = Typ03.GetMethod("RemToken", typ52).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToASTIL.Emit(OpCodes.Pop)
End If
ConvToASTIL.MarkSequencePoint(doc10, 242, 1, 242, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Sub)
ConvToASTIL.Emit(OpCodes.Stloc, 3)
ConvToASTIL.MarkSequencePoint(doc10, 243, 1, 243, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(Op)
ConvToASTIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(Token)
ConvToASTIL.Emit(OpCodes.Stfld, GetType(Op).GetField("LChild"))
ConvToASTIL.MarkSequencePoint(doc10, 244, 1, 244, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(Op)
ConvToASTIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ConvToASTIL.Emit(OpCodes.Stfld, GetType(Op).GetField("RChild"))
ConvToASTIL.MarkSequencePoint(doc10, 245, 1, 245, 100)
ConvToASTIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToASTIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
ConvToASTIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Conv_U)
Typ = Typ02
Typ02 = Typ
ConvToASTIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(Op)
Typ = Typ02
ConvToASTIL.Emit(OpCodes.Stelem, Typ.GetElementType())
ConvToASTIL.MarkSequencePoint(doc10, 246, 1, 246, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Stloc, 1)
ConvToASTIL.MarkSequencePoint(doc10, 247, 1, 247, 100)
ConvToASTIL.Emit(OpCodes.Br, cont100)
ConvToASTIL.MarkLabel(fa100)
ConvToASTIL.Emit(OpCodes.Br, cont100)
ConvToASTIL.MarkLabel(cont100)
ConvToASTIL.MarkSequencePoint(doc10, 248, 1, 248, 100)
ConvToASTIL.Emit(OpCodes.Br, label8)
ConvToASTIL.MarkSequencePoint(doc10, 249, 1, 249, 100)
ConvToASTIL.Emit(OpCodes.Br, cont99)
ConvToASTIL.MarkLabel(fa99)
ConvToASTIL.Emit(OpCodes.Br, cont99)
ConvToASTIL.MarkLabel(cont99)
ConvToASTIL.MarkSequencePoint(doc10, 251, 1, 251, 100)
ConvToASTIL.MarkLabel(label8)
ConvToASTIL.MarkSequencePoint(doc10, 253, 1, 253, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
Dim fa101 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
Dim tru101 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
Dim cont101 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
ConvToASTIL.Emit(OpCodes.Beq, tru101)
ConvToASTIL.Emit(OpCodes.Br, fa101)
ConvToASTIL.MarkLabel(tru101)
ConvToASTIL.MarkSequencePoint(doc10, 254, 1, 254, 100)
ConvToASTIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToASTIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ConvToASTIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ConvToASTIL.Emit(OpCodes.Stloc, 0)
ConvToASTIL.MarkSequencePoint(doc10, 255, 1, 255, 100)
ConvToASTIL.Emit(OpCodes.Br, label6)
ConvToASTIL.MarkSequencePoint(doc10, 256, 1, 256, 100)
ConvToASTIL.Emit(OpCodes.Br, cont101)
ConvToASTIL.MarkLabel(fa101)
ConvToASTIL.MarkSequencePoint(doc10, 257, 1, 257, 100)
ConvToASTIL.Emit(OpCodes.Br, label7)
ConvToASTIL.MarkSequencePoint(doc10, 258, 1, 258, 100)
ConvToASTIL.Emit(OpCodes.Br, cont101)
ConvToASTIL.MarkLabel(cont101)
ConvToASTIL.MarkSequencePoint(doc10, 260, 1, 260, 100)
ConvToASTIL.MarkLabel(label6)
ConvToASTIL.MarkSequencePoint(doc10, 262, 1, 262, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
ConvToASTIL.MarkSequencePoint(doc10, 264, 1, 264, 100)
ConvToASTIL.Emit(OpCodes.Ret)
Dim typ53(-1) As Type
ReDim Preserve typ53(UBound(typ53) + 1)
typ53(UBound(typ53)) = GetType(Token)
ReDim Preserve typ53(UBound(typ53) + 1)
typ53(UBound(typ53)) = GetType(System.Boolean)
Dim ASTEmit As MethodBuilder = Evaluator.DefineMethod("ASTEmit", MethodAttributes.Public, GetType(System.Void), typ53)
Dim ASTEmitIL As ILGenerator = ASTEmit.GetILGenerator()
Dim ASTEmitparam01 As ParameterBuilder = ASTEmit.DefineParameter(1, ParameterAttributes.None, "tok")
Dim ASTEmitparam02 As ParameterBuilder = ASTEmit.DefineParameter(2, ParameterAttributes.None, "emt")
ASTEmitIL.MarkSequencePoint(doc10, 268, 1, 268, 100)
Dim locbldr140 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr140.SetLocalSymInfo("isop")
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ54(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ReDim Preserve typ54(UBound(typ54) + 1)
typ54(UBound(typ54)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, isOp)
Typ = isOp.ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 0)
ASTEmitIL.MarkSequencePoint(doc10, 269, 1, 269, 100)
Dim locbldr141 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Op))
locbldr141.SetLocalSymInfo("optok")
ASTEmitIL.MarkSequencePoint(doc10, 270, 1, 270, 100)
Dim locbldr142 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Token))
locbldr142.SetLocalSymInfo("rc")
ASTEmitIL.MarkSequencePoint(doc10, 271, 1, 271, 100)
Dim locbldr143 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Token))
locbldr143.SetLocalSymInfo("lc")
ASTEmitIL.MarkSequencePoint(doc10, 272, 1, 272, 100)
Dim locbldr144 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Type))
locbldr144.SetLocalSymInfo("typ")
ASTEmitIL.MarkSequencePoint(doc10, 273, 1, 273, 100)
Dim locbldr145 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr145.SetLocalSymInfo("b")
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 5)
ASTEmitIL.MarkSequencePoint(doc10, 274, 1, 274, 100)
Dim locbldr146 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(TypeTok))
locbldr146.SetLocalSymInfo("tt")
ASTEmitIL.MarkSequencePoint(doc10, 275, 1, 275, 100)
Dim locbldr147 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Int32))
locbldr147.SetLocalSymInfo("i")
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 7)
ASTEmitIL.MarkSequencePoint(doc10, 276, 1, 276, 100)
Dim locbldr148 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Int32))
locbldr148.SetLocalSymInfo("len")
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc10, 278, 1, 278, 100)
Dim label9 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc10, 280, 1, 280, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa102 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru102 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont102 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru102)
ASTEmitIL.Emit(OpCodes.Br, fa102)
ASTEmitIL.MarkLabel(tru102)
ASTEmitIL.MarkSequencePoint(doc10, 282, 1, 282, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Stloc, 1)
ASTEmitIL.MarkSequencePoint(doc10, 283, 1, 283, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Op)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Op).GetField("RChild"))
Typ = GetType(Op).GetField("RChild").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 2)
ASTEmitIL.MarkSequencePoint(doc10, 284, 1, 284, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Op)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Op).GetField("LChild"))
Typ = GetType(Op).GetField("LChild").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 3)
ASTEmitIL.MarkSequencePoint(doc10, 285, 1, 285, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ55(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Token)
ReDim Preserve typ55(UBound(typ55) + 1)
typ55(UBound(typ55)) = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ReDim Preserve typ55(UBound(typ55) + 1)
typ55(UBound(typ55)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc10, 286, 1, 286, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ56(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Token)
ReDim Preserve typ56(UBound(typ56) + 1)
typ56(UBound(typ56)) = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ReDim Preserve typ56(UBound(typ56) + 1)
typ56(UBound(typ56)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc10, 288, 1, 288, 100)
ASTEmitIL.Emit(OpCodes.Br, cont102)
ASTEmitIL.MarkLabel(fa102)
ASTEmitIL.MarkSequencePoint(doc10, 290, 1, 290, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(StringLiteral))
Dim typ57 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ57))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ57).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 4)
ASTEmitIL.MarkSequencePoint(doc10, 291, 1, 291, 100)
Dim typ58(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ58(UBound(typ58) + 1)
typ58(UBound(typ58)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ58))
Typ = Typ03.GetMethod("IsInstanceOfType", typ58).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 5)
ASTEmitIL.MarkSequencePoint(doc10, 293, 1, 293, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa103 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru103 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont103 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru103)
ASTEmitIL.Emit(OpCodes.Br, fa103)
ASTEmitIL.MarkLabel(tru103)
ASTEmitIL.MarkSequencePoint(doc10, 294, 1, 294, 100)
Dim locbldr149 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(StringLiteral))
locbldr149.SetLocalSymInfo("slit")
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc10, 295, 1, 295, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(StringLiteral)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(StringLiteral).GetField("Conv"))
Typ = GetType(StringLiteral).GetField("Conv").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa104 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru104 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont104 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru104)
ASTEmitIL.Emit(OpCodes.Br, fa104)
ASTEmitIL.MarkLabel(tru104)
ASTEmitIL.MarkSequencePoint(doc10, 296, 1, 296, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(StringLiteral)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(StringLiteral).GetField("LitTyp"))
Typ = GetType(StringLiteral).GetField("LitTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 6)
ASTEmitIL.MarkSequencePoint(doc10, 297, 1, 297, 100)
Dim typ59(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(TypeTok)
ReDim Preserve typ59(UBound(typ59) + 1)
typ59(UBound(typ59)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ59))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ59).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc10, 298, 1, 298, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(StringLiteral)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(StringLiteral).GetField("MemberAccessFlg"))
Typ = GetType(StringLiteral).GetField("MemberAccessFlg").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa105 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru105 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont105 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru105)
ASTEmitIL.Emit(OpCodes.Br, fa105)
ASTEmitIL.MarkLabel(tru105)
ASTEmitIL.MarkSequencePoint(doc10, 299, 1, 299, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(ASMFactory).GetField("ChainFlg"))
ASTEmitIL.MarkSequencePoint(doc10, 300, 1, 300, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ60(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(StringLiteral)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(StringLiteral).GetField("MemberToAccess"))
Typ = GetType(StringLiteral).GetField("MemberToAccess").FieldType
ReDim Preserve typ60(UBound(typ60) + 1)
typ60(UBound(typ60)) = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ReDim Preserve typ60(UBound(typ60) + 1)
typ60(UBound(typ60)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc10, 301, 1, 301, 100)
ASTEmitIL.Emit(OpCodes.Br, cont105)
ASTEmitIL.MarkLabel(fa105)
ASTEmitIL.Emit(OpCodes.Br, cont105)
ASTEmitIL.MarkLabel(cont105)
ASTEmitIL.MarkSequencePoint(doc10, 302, 1, 302, 100)
ASTEmitIL.Emit(OpCodes.Br, label9)
ASTEmitIL.MarkSequencePoint(doc10, 303, 1, 303, 100)
ASTEmitIL.Emit(OpCodes.Br, cont104)
ASTEmitIL.MarkLabel(fa104)
ASTEmitIL.MarkSequencePoint(doc10, 304, 1, 304, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(StringLiteral)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(StringLiteral).GetField("TTok"))
Typ = GetType(StringLiteral).GetField("TTok").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 6)
ASTEmitIL.MarkSequencePoint(doc10, 305, 1, 305, 100)
Dim typ61(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(TypeTok)
ReDim Preserve typ61(UBound(typ61) + 1)
typ61(UBound(typ61)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ61))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ61).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc10, 306, 1, 306, 100)
ASTEmitIL.Emit(OpCodes.Br, label9)
ASTEmitIL.MarkSequencePoint(doc10, 307, 1, 307, 100)
ASTEmitIL.Emit(OpCodes.Br, cont104)
ASTEmitIL.MarkLabel(cont104)
ASTEmitIL.MarkSequencePoint(doc10, 308, 1, 308, 100)
ASTEmitIL.Emit(OpCodes.Br, cont103)
ASTEmitIL.MarkLabel(fa103)
ASTEmitIL.Emit(OpCodes.Br, cont103)
ASTEmitIL.MarkLabel(cont103)
ASTEmitIL.MarkSequencePoint(doc10, 310, 1, 310, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(Literal))
Dim typ62 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ62))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ62).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 4)
ASTEmitIL.MarkSequencePoint(doc10, 311, 1, 311, 100)
Dim typ63(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ63(UBound(typ63) + 1)
typ63(UBound(typ63)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ63))
Typ = Typ03.GetMethod("IsInstanceOfType", typ63).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 5)
ASTEmitIL.MarkSequencePoint(doc10, 313, 1, 313, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa106 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru106 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont106 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru106)
ASTEmitIL.Emit(OpCodes.Br, fa106)
ASTEmitIL.MarkLabel(tru106)
ASTEmitIL.MarkSequencePoint(doc10, 314, 1, 314, 100)
Dim locbldr150 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Literal))
locbldr150.SetLocalSymInfo("lit")
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Stloc, 10)
ASTEmitIL.MarkSequencePoint(doc10, 315, 1, 315, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(Literal)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Literal).GetField("Conv"))
Typ = GetType(Literal).GetField("Conv").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa107 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru107 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont107 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru107)
ASTEmitIL.Emit(OpCodes.Br, fa107)
ASTEmitIL.MarkLabel(tru107)
ASTEmitIL.MarkSequencePoint(doc10, 316, 1, 316, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(Literal)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Literal).GetField("LitTyp"))
Typ = GetType(Literal).GetField("LitTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 6)
ASTEmitIL.MarkSequencePoint(doc10, 317, 1, 317, 100)
Dim typ64(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(TypeTok)
ReDim Preserve typ64(UBound(typ64) + 1)
typ64(UBound(typ64)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ64))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ64).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc10, 318, 1, 318, 100)
ASTEmitIL.Emit(OpCodes.Br, label9)
ASTEmitIL.MarkSequencePoint(doc10, 319, 1, 319, 100)
ASTEmitIL.Emit(OpCodes.Br, cont107)
ASTEmitIL.MarkLabel(fa107)
ASTEmitIL.MarkSequencePoint(doc10, 320, 1, 320, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(Literal)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Literal).GetField("TTok"))
Typ = GetType(Literal).GetField("TTok").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 6)
ASTEmitIL.MarkSequencePoint(doc10, 321, 1, 321, 100)
Dim typ65(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(TypeTok)
ReDim Preserve typ65(UBound(typ65) + 1)
typ65(UBound(typ65)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ65))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ65).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc10, 322, 1, 322, 100)
ASTEmitIL.Emit(OpCodes.Br, label9)
ASTEmitIL.MarkSequencePoint(doc10, 323, 1, 323, 100)
ASTEmitIL.Emit(OpCodes.Br, cont107)
ASTEmitIL.MarkLabel(cont107)
ASTEmitIL.MarkSequencePoint(doc10, 324, 1, 324, 100)
ASTEmitIL.Emit(OpCodes.Br, cont106)
ASTEmitIL.MarkLabel(fa106)
ASTEmitIL.Emit(OpCodes.Br, cont106)
ASTEmitIL.MarkLabel(cont106)
ASTEmitIL.MarkSequencePoint(doc10, 326, 1, 326, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(Ident))
Dim typ66 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ66))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ66).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 4)
ASTEmitIL.MarkSequencePoint(doc10, 327, 1, 327, 100)
Dim typ67(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ67(UBound(typ67) + 1)
typ67(UBound(typ67)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ67))
Typ = Typ03.GetMethod("IsInstanceOfType", typ67).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 5)
ASTEmitIL.MarkSequencePoint(doc10, 329, 1, 329, 100)
Dim locbldr151 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.String))
locbldr151.SetLocalSymInfo("idtnam")
ASTEmitIL.MarkSequencePoint(doc10, 330, 1, 330, 100)
Dim locbldr152 As LocalBuilder = ASTEmitIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"))
locbldr152.SetLocalSymInfo("vr")
ASTEmitIL.MarkSequencePoint(doc10, 331, 1, 331, 100)
Dim locbldr153 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr153.SetLocalSymInfo("idtb1")
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 13)
ASTEmitIL.MarkSequencePoint(doc10, 332, 1, 332, 100)
Dim locbldr154 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Ident))
locbldr154.SetLocalSymInfo("idt")
ASTEmitIL.MarkSequencePoint(doc10, 333, 1, 333, 100)
Dim locbldr155 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Int32))
locbldr155.SetLocalSymInfo("idtcomp")
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 15)
ASTEmitIL.MarkSequencePoint(doc10, 334, 1, 334, 100)
Dim locbldr156 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Type))
locbldr156.SetLocalSymInfo("idttyp")
ASTEmitIL.MarkSequencePoint(doc10, 335, 1, 335, 100)
Dim locbldr157 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Expr))
locbldr157.SetLocalSymInfo("arrlocexpr")
ASTEmitIL.MarkSequencePoint(doc10, 336, 1, 336, 100)
Dim locbldr158 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Ident))
locbldr158.SetLocalSymInfo("idtarrloc")
ASTEmitIL.MarkSequencePoint(doc10, 339, 1, 339, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa108 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru108 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont108 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru108)
ASTEmitIL.Emit(OpCodes.Br, fa108)
ASTEmitIL.MarkLabel(tru108)
ASTEmitIL.MarkSequencePoint(doc10, 340, 1, 340, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Stloc, 14)
ASTEmitIL.MarkSequencePoint(doc10, 341, 1, 341, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(Ident)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Conv"))
Typ = GetType(Ident).GetField("Conv").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa109 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru109 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont109 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru109)
ASTEmitIL.Emit(OpCodes.Br, fa109)
ASTEmitIL.MarkLabel(tru109)
ASTEmitIL.MarkSequencePoint(doc10, 342, 1, 342, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(Ident)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc10, 343, 1, 343, 100)
Dim typ68(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.String)
ReDim Preserve typ68(UBound(typ68) + 1)
typ68(UBound(typ68)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindVar", typ68))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindVar", typ68).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 12)
ASTEmitIL.MarkSequencePoint(doc10, 344, 1, 344, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 12)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldnull)
Dim fa110 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru110 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont110 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, fa110)
ASTEmitIL.Emit(OpCodes.Br, tru110)
ASTEmitIL.MarkLabel(tru110)
ASTEmitIL.MarkSequencePoint(doc10, 345, 1, 345, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 12)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc10, 349, 1, 349, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(Ident)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("IsArr"))
Typ = GetType(Ident).GetField("IsArr").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa111 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru111 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont111 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru111)
ASTEmitIL.Emit(OpCodes.Br, fa111)
ASTEmitIL.MarkLabel(tru111)
ASTEmitIL.MarkSequencePoint(doc10, 350, 1, 350, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 16)
ASTEmitIL.MarkSequencePoint(doc10, 352, 1, 352, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(Ident)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("ArrLoc"))
Typ = GetType(Ident).GetField("ArrLoc").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 17)
ASTEmitIL.MarkSequencePoint(doc10, 353, 1, 353, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(Expr)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
Dim fa112 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru112 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont112 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru112)
ASTEmitIL.Emit(OpCodes.Br, fa112)
ASTEmitIL.MarkLabel(tru112)
ASTEmitIL.MarkSequencePoint(doc10, 354, 1, 354, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 13)
ASTEmitIL.MarkSequencePoint(doc10, 355, 1, 355, 100)
ASTEmitIL.Emit(OpCodes.Br, cont112)
ASTEmitIL.MarkLabel(fa112)
ASTEmitIL.MarkSequencePoint(doc10, 356, 1, 356, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 13)
ASTEmitIL.MarkSequencePoint(doc10, 357, 1, 357, 100)
ASTEmitIL.Emit(OpCodes.Br, cont112)
ASTEmitIL.MarkLabel(cont112)
ASTEmitIL.MarkSequencePoint(doc10, 359, 1, 359, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa113 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru113 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont113 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru113)
ASTEmitIL.Emit(OpCodes.Br, fa113)
ASTEmitIL.MarkLabel(tru113)
ASTEmitIL.MarkSequencePoint(doc10, 360, 1, 360, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(Expr)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ASTEmitIL.Emit(OpCodes.Starg, 1)
ASTEmitIL.MarkSequencePoint(doc10, 361, 1, 361, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(Ident))
Dim typ69 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ69))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ69).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 4)
ASTEmitIL.MarkSequencePoint(doc10, 362, 1, 362, 100)
Dim typ70(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ70(UBound(typ70) + 1)
typ70(UBound(typ70)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ70))
Typ = Typ03.GetMethod("IsInstanceOfType", typ70).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 13)
ASTEmitIL.MarkSequencePoint(doc10, 363, 1, 363, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa114 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru114 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont114 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru114)
ASTEmitIL.Emit(OpCodes.Br, fa114)
ASTEmitIL.MarkLabel(tru114)
ASTEmitIL.MarkSequencePoint(doc10, 364, 1, 364, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Stloc, 18)
ASTEmitIL.MarkSequencePoint(doc10, 365, 1, 365, 100)
Dim typ71(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(Ident)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ71(UBound(typ71) + 1)
typ71(UBound(typ71)) = Typ
ASTEmitIL.Emit(OpCodes.Ldstr, "l")
Typ = GetType(System.String)
ReDim Preserve typ71(UBound(typ71) + 1)
typ71(UBound(typ71)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ71))
Typ = GetType(String).GetMethod("Compare", typ71).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 15)
ASTEmitIL.MarkSequencePoint(doc10, 366, 1, 366, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa115 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru115 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont115 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, fa115)
ASTEmitIL.Emit(OpCodes.Br, tru115)
ASTEmitIL.MarkLabel(tru115)
ASTEmitIL.MarkSequencePoint(doc10, 367, 1, 367, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 13)
ASTEmitIL.MarkSequencePoint(doc10, 368, 1, 368, 100)
ASTEmitIL.Emit(OpCodes.Br, cont115)
ASTEmitIL.MarkLabel(fa115)
ASTEmitIL.MarkSequencePoint(doc10, 369, 1, 369, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 13)
ASTEmitIL.MarkSequencePoint(doc10, 370, 1, 370, 100)
ASTEmitIL.Emit(OpCodes.Br, cont115)
ASTEmitIL.MarkLabel(cont115)
ASTEmitIL.MarkSequencePoint(doc10, 371, 1, 371, 100)
ASTEmitIL.Emit(OpCodes.Br, cont114)
ASTEmitIL.MarkLabel(fa114)
ASTEmitIL.Emit(OpCodes.Br, cont114)
ASTEmitIL.MarkLabel(cont114)
ASTEmitIL.MarkSequencePoint(doc10, 372, 1, 372, 100)
ASTEmitIL.Emit(OpCodes.Br, cont113)
ASTEmitIL.MarkLabel(fa113)
ASTEmitIL.Emit(OpCodes.Br, cont113)
ASTEmitIL.MarkLabel(cont113)
ASTEmitIL.MarkSequencePoint(doc10, 374, 1, 374, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa116 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru116 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont116 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru116)
ASTEmitIL.Emit(OpCodes.Br, fa116)
ASTEmitIL.MarkLabel(tru116)
ASTEmitIL.MarkSequencePoint(doc10, 375, 1, 375, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetElementType", Type.EmptyTypes))
Typ = Typ03.GetMethod("GetElementType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 16)
ASTEmitIL.MarkSequencePoint(doc10, 376, 1, 376, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(System.Type)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc10, 377, 1, 377, 100)
ASTEmitIL.Emit(OpCodes.Br, cont116)
ASTEmitIL.MarkLabel(fa116)
ASTEmitIL.MarkSequencePoint(doc10, 378, 1, 378, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(System.Int32))
Dim typ73 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ73))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ73).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc10, 379, 1, 379, 100)
ASTEmitIL.Emit(OpCodes.Br, cont116)
ASTEmitIL.MarkLabel(cont116)
ASTEmitIL.MarkSequencePoint(doc10, 381, 1, 381, 100)
ASTEmitIL.Emit(OpCodes.Br, cont111)
ASTEmitIL.MarkLabel(fa111)
ASTEmitIL.Emit(OpCodes.Br, cont111)
ASTEmitIL.MarkLabel(cont111)
ASTEmitIL.MarkSequencePoint(doc10, 385, 1, 385, 100)
ASTEmitIL.Emit(OpCodes.Br, cont110)
ASTEmitIL.MarkLabel(fa110)
ASTEmitIL.Emit(OpCodes.Br, cont110)
ASTEmitIL.MarkLabel(cont110)
ASTEmitIL.MarkSequencePoint(doc10, 386, 1, 386, 100)
ASTEmitIL.Emit(OpCodes.Br, label9)
ASTEmitIL.MarkSequencePoint(doc10, 387, 1, 387, 100)
ASTEmitIL.Emit(OpCodes.Br, cont109)
ASTEmitIL.MarkLabel(fa109)
ASTEmitIL.MarkSequencePoint(doc10, 388, 1, 388, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(Ident)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("TTok"))
Typ = GetType(Ident).GetField("TTok").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 6)
ASTEmitIL.MarkSequencePoint(doc10, 389, 1, 389, 100)
Dim typ74(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(TypeTok)
ReDim Preserve typ74(UBound(typ74) + 1)
typ74(UBound(typ74)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ74))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ74).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc10, 390, 1, 390, 100)
ASTEmitIL.Emit(OpCodes.Br, label9)
ASTEmitIL.MarkSequencePoint(doc10, 391, 1, 391, 100)
ASTEmitIL.Emit(OpCodes.Br, cont109)
ASTEmitIL.MarkLabel(cont109)
ASTEmitIL.MarkSequencePoint(doc10, 392, 1, 392, 100)
ASTEmitIL.Emit(OpCodes.Br, cont108)
ASTEmitIL.MarkLabel(fa108)
ASTEmitIL.Emit(OpCodes.Br, cont108)
ASTEmitIL.MarkLabel(cont108)
ASTEmitIL.MarkSequencePoint(doc10, 394, 1, 394, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(MethodCallTok))
Dim typ75 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ75))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ75).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 4)
ASTEmitIL.MarkSequencePoint(doc10, 395, 1, 395, 100)
Dim typ76(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ76(UBound(typ76) + 1)
typ76(UBound(typ76)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ76))
Typ = Typ03.GetMethod("IsInstanceOfType", typ76).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 5)
ASTEmitIL.MarkSequencePoint(doc10, 397, 1, 397, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa117 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru117 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont117 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru117)
ASTEmitIL.Emit(OpCodes.Br, fa117)
ASTEmitIL.MarkLabel(tru117)
ASTEmitIL.MarkSequencePoint(doc10, 398, 1, 398, 100)
Dim locbldr159 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Type))
locbldr159.SetLocalSymInfo("mcparenttyp")
ASTEmitIL.MarkSequencePoint(doc10, 399, 1, 399, 100)
Dim locbldr160 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(MethodCallTok))
locbldr160.SetLocalSymInfo("mctok")
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Stloc, 20)
ASTEmitIL.MarkSequencePoint(doc10, 400, 1, 400, 100)
Dim locbldr161 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(MethodNameTok))
locbldr161.SetLocalSymInfo("mntok")
ASTEmitIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(MethodCallTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodCallTok).GetField("Name"))
Typ = GetType(MethodCallTok).GetField("Name").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 21)
ASTEmitIL.MarkSequencePoint(doc10, 401, 1, 401, 100)
Dim locbldr162 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.String))
locbldr162.SetLocalSymInfo("mnstr")
ASTEmitIL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ASTEmitIL.Emit(OpCodes.Stloc, 22)
ASTEmitIL.MarkSequencePoint(doc10, 402, 1, 402, 100)
Dim locbldr163 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.String).MakeArrayType())
locbldr163.SetLocalSymInfo("mnstrarr")
ASTEmitIL.MarkSequencePoint(doc10, 403, 1, 403, 100)
Dim locbldr164 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Expr).MakeArrayType())
locbldr164.SetLocalSymInfo("mcparams")
ASTEmitIL.MarkSequencePoint(doc10, 404, 1, 404, 100)
Dim locbldr165 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Type).MakeArrayType())
locbldr165.SetLocalSymInfo("typarr1")
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
ASTEmitIL.Emit(OpCodes.Newarr, GetType(System.Type))
ASTEmitIL.Emit(OpCodes.Stloc, 25)
ASTEmitIL.MarkSequencePoint(doc10, 405, 1, 405, 100)
Dim locbldr166 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Type).MakeArrayType())
locbldr166.SetLocalSymInfo("typarr2")
ASTEmitIL.MarkSequencePoint(doc10, 406, 1, 406, 100)
Dim locbldr167 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Int32))
locbldr167.SetLocalSymInfo("paramlen")
ASTEmitIL.MarkSequencePoint(doc10, 407, 1, 407, 100)
Dim locbldr168 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Expr))
locbldr168.SetLocalSymInfo("curexpr")
ASTEmitIL.MarkSequencePoint(doc10, 408, 1, 408, 100)
Dim locbldr169 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Expr))
locbldr169.SetLocalSymInfo("rpnparam")
ASTEmitIL.MarkSequencePoint(doc10, 409, 1, 409, 100)
Dim locbldr170 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Token))
locbldr170.SetLocalSymInfo("astparam")
ASTEmitIL.MarkSequencePoint(doc10, 410, 1, 410, 100)
Dim locbldr171 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(MethodInfo))
locbldr171.SetLocalSymInfo("mcmetinf")
ASTEmitIL.MarkSequencePoint(doc10, 411, 1, 411, 100)
Dim locbldr172 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(FieldInfo))
locbldr172.SetLocalSymInfo("mcfldinf")
ASTEmitIL.MarkSequencePoint(doc10, 412, 1, 412, 100)
Dim locbldr173 As LocalBuilder = ASTEmitIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"))
locbldr173.SetLocalSymInfo("mcvr")
ASTEmitIL.MarkSequencePoint(doc10, 414, 1, 414, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(MethodNameTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodNameTok).GetField("Value"))
Typ = GetType(MethodNameTok).GetField("Value").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 22)
ASTEmitIL.MarkSequencePoint(doc10, 415, 1, 415, 100)
Dim typ77(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(System.String)
ReDim Preserve typ77(UBound(typ77) + 1)
typ77(UBound(typ77)) = Typ
ASTEmitIL.Emit(OpCodes.Ldstr, ":")
Typ = GetType(System.String)
ReDim Preserve typ77(UBound(typ77) + 1)
typ77(UBound(typ77)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ParseUtils).GetMethod("StringParser", typ77))
Typ = GetType(ParseUtils).GetMethod("StringParser", typ77).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 23)
ASTEmitIL.MarkSequencePoint(doc10, 416, 1, 416, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(MethodCallTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodCallTok).GetField("Params"))
Typ = GetType(MethodCallTok).GetField("Params").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 24)
ASTEmitIL.MarkSequencePoint(doc10, 417, 1, 417, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(Expr).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Sub)
ASTEmitIL.Emit(OpCodes.Stloc, 27)
ASTEmitIL.MarkSequencePoint(doc10, 420, 1, 420, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(MethodNameTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodNameTok).GetField("Conv"))
Typ = GetType(MethodNameTok).GetField("Conv").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa118 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru118 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont118 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru118)
ASTEmitIL.Emit(OpCodes.Br, fa118)
ASTEmitIL.MarkLabel(tru118)
ASTEmitIL.MarkSequencePoint(doc10, 422, 1, 422, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("ChainFlg"))
Typ = GetType(AsmFactory).GetField("ChainFlg").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa119 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru119 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont119 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru119)
ASTEmitIL.Emit(OpCodes.Br, fa119)
ASTEmitIL.MarkLabel(tru119)
ASTEmitIL.MarkSequencePoint(doc10, 425, 1, 425, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("ChainFlg"))
ASTEmitIL.MarkSequencePoint(doc10, 426, 1, 426, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 19)
ASTEmitIL.MarkSequencePoint(doc10, 428, 1, 428, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 7)
ASTEmitIL.MarkSequencePoint(doc10, 430, 1, 430, 100)
Dim label10 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc10, 431, 1, 431, 100)
Dim label11 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc10, 433, 1, 433, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(Expr).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa120 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru120 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont120 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru120)
ASTEmitIL.Emit(OpCodes.Br, fa120)
ASTEmitIL.MarkLabel(tru120)
ASTEmitIL.MarkSequencePoint(doc10, 434, 1, 434, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(System.Type).GetField("EmptyTypes"))
Typ = GetType(System.Type).GetField("EmptyTypes").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 25)
ASTEmitIL.MarkSequencePoint(doc10, 435, 1, 435, 100)
ASTEmitIL.Emit(OpCodes.Br, label11)
ASTEmitIL.MarkSequencePoint(doc10, 436, 1, 436, 100)
ASTEmitIL.Emit(OpCodes.Br, cont120)
ASTEmitIL.MarkLabel(fa120)
ASTEmitIL.Emit(OpCodes.Br, cont120)
ASTEmitIL.MarkLabel(cont120)
ASTEmitIL.MarkSequencePoint(doc10, 438, 1, 438, 100)
ASTEmitIL.MarkLabel(label10)
ASTEmitIL.MarkSequencePoint(doc10, 440, 1, 440, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Add)
ASTEmitIL.Emit(OpCodes.Stloc, 7)
ASTEmitIL.MarkSequencePoint(doc10, 441, 1, 441, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(Expr).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(Expr).MakeArrayType().GetElementType())
Typ = GetType(Expr).MakeArrayType().GetElementType()
ASTEmitIL.Emit(OpCodes.Stloc, 28)
ASTEmitIL.MarkSequencePoint(doc10, 443, 1, 443, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(Expr)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
Dim fa121 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru121 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont121 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru121)
ASTEmitIL.Emit(OpCodes.Br, fa121)
ASTEmitIL.MarkLabel(tru121)
ASTEmitIL.MarkSequencePoint(doc10, 444, 1, 444, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(Expr)
ASTEmitIL.Emit(OpCodes.Stloc, 29)
ASTEmitIL.MarkSequencePoint(doc10, 445, 1, 445, 100)
ASTEmitIL.Emit(OpCodes.Br, cont121)
ASTEmitIL.MarkLabel(fa121)
ASTEmitIL.MarkSequencePoint(doc10, 446, 1, 446, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(Expr)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
Dim fa122 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru122 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont122 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Bge, tru122)
ASTEmitIL.Emit(OpCodes.Br, fa122)
ASTEmitIL.MarkLabel(tru122)
ASTEmitIL.MarkSequencePoint(doc10, 447, 1, 447, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ78(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(Expr)
ReDim Preserve typ78(UBound(typ78) + 1)
typ78(UBound(typ78)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ConvToRPN)
Typ = ConvToRPN.ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 29)
ASTEmitIL.MarkSequencePoint(doc10, 448, 1, 448, 100)
ASTEmitIL.Emit(OpCodes.Br, cont122)
ASTEmitIL.MarkLabel(fa122)
ASTEmitIL.Emit(OpCodes.Br, cont122)
ASTEmitIL.MarkLabel(cont122)
ASTEmitIL.MarkSequencePoint(doc10, 449, 1, 449, 100)
ASTEmitIL.Emit(OpCodes.Br, cont121)
ASTEmitIL.MarkLabel(cont121)
ASTEmitIL.MarkSequencePoint(doc10, 451, 1, 451, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ79(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 29)
Typ = GetType(Expr)
ReDim Preserve typ79(UBound(typ79) + 1)
typ79(UBound(typ79)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ConvToAST)
Typ = ConvToAST.ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 30)
ASTEmitIL.MarkSequencePoint(doc10, 452, 1, 452, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ80(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 30)
Typ = GetType(Token)
ReDim Preserve typ80(UBound(typ80) + 1)
typ80(UBound(typ80)) = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ReDim Preserve typ80(UBound(typ80) + 1)
typ80(UBound(typ80)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc10, 454, 1, 454, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 26)
ASTEmitIL.MarkSequencePoint(doc10, 455, 1, 455, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(System.Type).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("TypArr"))
ASTEmitIL.MarkSequencePoint(doc10, 456, 1, 456, 100)
Dim typ81(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ReDim Preserve typ81(UBound(typ81) + 1)
typ81(UBound(typ81)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("AddTyp", typ81))
Typ = GetType(AsmFactory).GetMethod("AddTyp", typ81).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc10, 457, 1, 457, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 25)
ASTEmitIL.MarkSequencePoint(doc10, 458, 1, 458, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 26)
Typ = GetType(System.Type).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("TypArr"))
ASTEmitIL.MarkSequencePoint(doc10, 460, 1, 460, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldloc, 27)
Typ = GetType(System.Int32)
Dim fa123 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru123 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont123 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru123)
ASTEmitIL.Emit(OpCodes.Br, fa123)
ASTEmitIL.MarkLabel(tru123)
ASTEmitIL.MarkSequencePoint(doc10, 461, 1, 461, 100)
ASTEmitIL.Emit(OpCodes.Br, label11)
ASTEmitIL.MarkSequencePoint(doc10, 462, 1, 462, 100)
ASTEmitIL.Emit(OpCodes.Br, cont123)
ASTEmitIL.MarkLabel(fa123)
ASTEmitIL.MarkSequencePoint(doc10, 463, 1, 463, 100)
ASTEmitIL.Emit(OpCodes.Br, label10)
ASTEmitIL.MarkSequencePoint(doc10, 464, 1, 464, 100)
ASTEmitIL.Emit(OpCodes.Br, cont123)
ASTEmitIL.MarkLabel(cont123)
ASTEmitIL.MarkSequencePoint(doc10, 466, 1, 466, 100)
ASTEmitIL.MarkLabel(label11)
ASTEmitIL.MarkSequencePoint(doc10, 468, 1, 468, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 23)
Typ = GetType(System.String).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
Dim fa124 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru124 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont124 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Bge, tru124)
ASTEmitIL.Emit(OpCodes.Br, fa124)
ASTEmitIL.MarkLabel(tru124)
ASTEmitIL.MarkSequencePoint(doc10, 470, 1, 470, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 7)
ASTEmitIL.MarkSequencePoint(doc10, 471, 1, 471, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 23)
Typ = GetType(System.String).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Sub)
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc10, 473, 1, 473, 100)
Dim label12 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc10, 474, 1, 474, 100)
Dim label13 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc10, 476, 1, 476, 100)
ASTEmitIL.MarkLabel(label12)
ASTEmitIL.MarkSequencePoint(doc10, 477, 1, 477, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Add)
ASTEmitIL.Emit(OpCodes.Stloc, 7)
ASTEmitIL.MarkSequencePoint(doc10, 479, 1, 479, 100)
Dim typ82(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(System.Type)
ReDim Preserve typ82(UBound(typ82) + 1)
typ82(UBound(typ82)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 23)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ82(UBound(typ82) + 1)
typ82(UBound(typ82)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadField", typ82))
Typ = GetType(Loader).GetMethod("LoadField", typ82).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 32)
ASTEmitIL.MarkSequencePoint(doc10, 480, 1, 480, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 32)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 19)
ASTEmitIL.MarkSequencePoint(doc10, 482, 1, 482, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Int32)
Dim fa125 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru125 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont125 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru125)
ASTEmitIL.Emit(OpCodes.Br, fa125)
ASTEmitIL.MarkLabel(tru125)
ASTEmitIL.MarkSequencePoint(doc10, 483, 1, 483, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Add)
ASTEmitIL.Emit(OpCodes.Stloc, 7)
ASTEmitIL.MarkSequencePoint(doc10, 484, 1, 484, 100)
ASTEmitIL.Emit(OpCodes.Br, label13)
ASTEmitIL.MarkSequencePoint(doc10, 485, 1, 485, 100)
ASTEmitIL.Emit(OpCodes.Br, cont125)
ASTEmitIL.MarkLabel(fa125)
ASTEmitIL.MarkSequencePoint(doc10, 486, 1, 486, 100)
ASTEmitIL.Emit(OpCodes.Br, label12)
ASTEmitIL.MarkSequencePoint(doc10, 487, 1, 487, 100)
ASTEmitIL.Emit(OpCodes.Br, cont125)
ASTEmitIL.MarkLabel(cont125)
ASTEmitIL.MarkSequencePoint(doc10, 489, 1, 489, 100)
ASTEmitIL.MarkLabel(label13)
ASTEmitIL.MarkSequencePoint(doc10, 491, 1, 491, 100)
ASTEmitIL.Emit(OpCodes.Br, cont124)
ASTEmitIL.MarkLabel(fa124)
ASTEmitIL.MarkSequencePoint(doc10, 492, 1, 492, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 7)
ASTEmitIL.MarkSequencePoint(doc10, 493, 1, 493, 100)
ASTEmitIL.Emit(OpCodes.Br, cont124)
ASTEmitIL.MarkLabel(cont124)
ASTEmitIL.MarkSequencePoint(doc10, 495, 1, 495, 100)
Dim typ84(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(System.Type)
ReDim Preserve typ84(UBound(typ84) + 1)
typ84(UBound(typ84)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 23)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ84(UBound(typ84) + 1)
typ84(UBound(typ84)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ84(UBound(typ84) + 1)
typ84(UBound(typ84)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadMethod", typ84))
Typ = GetType(Loader).GetMethod("LoadMethod", typ84).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 31)
ASTEmitIL.MarkSequencePoint(doc10, 496, 1, 496, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(MethodInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc10, 498, 1, 498, 100)
ASTEmitIL.Emit(OpCodes.Br, cont119)
ASTEmitIL.MarkLabel(fa119)
ASTEmitIL.MarkSequencePoint(doc10, 501, 1, 501, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 7)
ASTEmitIL.MarkSequencePoint(doc10, 503, 1, 503, 100)
Dim label14 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc10, 504, 1, 504, 100)
Dim label15 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc10, 506, 1, 506, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(Expr).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa126 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru126 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont126 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru126)
ASTEmitIL.Emit(OpCodes.Br, fa126)
ASTEmitIL.MarkLabel(tru126)
ASTEmitIL.MarkSequencePoint(doc10, 507, 1, 507, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(System.Type).GetField("EmptyTypes"))
Typ = GetType(System.Type).GetField("EmptyTypes").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 25)
ASTEmitIL.MarkSequencePoint(doc10, 508, 1, 508, 100)
ASTEmitIL.Emit(OpCodes.Br, label15)
ASTEmitIL.MarkSequencePoint(doc10, 509, 1, 509, 100)
ASTEmitIL.Emit(OpCodes.Br, cont126)
ASTEmitIL.MarkLabel(fa126)
ASTEmitIL.Emit(OpCodes.Br, cont126)
ASTEmitIL.MarkLabel(cont126)
ASTEmitIL.MarkSequencePoint(doc10, 511, 1, 511, 100)
ASTEmitIL.MarkLabel(label14)
ASTEmitIL.MarkSequencePoint(doc10, 513, 1, 513, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Add)
ASTEmitIL.Emit(OpCodes.Stloc, 7)
ASTEmitIL.MarkSequencePoint(doc10, 514, 1, 514, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(Expr).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(Expr).MakeArrayType().GetElementType())
Typ = GetType(Expr).MakeArrayType().GetElementType()
ASTEmitIL.Emit(OpCodes.Stloc, 28)
ASTEmitIL.MarkSequencePoint(doc10, 516, 1, 516, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(Expr)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
Dim fa127 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru127 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont127 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru127)
ASTEmitIL.Emit(OpCodes.Br, fa127)
ASTEmitIL.MarkLabel(tru127)
ASTEmitIL.MarkSequencePoint(doc10, 517, 1, 517, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(Expr)
ASTEmitIL.Emit(OpCodes.Stloc, 29)
ASTEmitIL.MarkSequencePoint(doc10, 518, 1, 518, 100)
ASTEmitIL.Emit(OpCodes.Br, cont127)
ASTEmitIL.MarkLabel(fa127)
ASTEmitIL.MarkSequencePoint(doc10, 519, 1, 519, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(Expr)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
Dim fa128 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru128 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont128 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Bge, tru128)
ASTEmitIL.Emit(OpCodes.Br, fa128)
ASTEmitIL.MarkLabel(tru128)
ASTEmitIL.MarkSequencePoint(doc10, 520, 1, 520, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ86(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(Expr)
ReDim Preserve typ86(UBound(typ86) + 1)
typ86(UBound(typ86)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ConvToRPN)
Typ = ConvToRPN.ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 29)
ASTEmitIL.MarkSequencePoint(doc10, 521, 1, 521, 100)
ASTEmitIL.Emit(OpCodes.Br, cont128)
ASTEmitIL.MarkLabel(fa128)
ASTEmitIL.Emit(OpCodes.Br, cont128)
ASTEmitIL.MarkLabel(cont128)
ASTEmitIL.MarkSequencePoint(doc10, 522, 1, 522, 100)
ASTEmitIL.Emit(OpCodes.Br, cont127)
ASTEmitIL.MarkLabel(cont127)
ASTEmitIL.MarkSequencePoint(doc10, 524, 1, 524, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ87(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 29)
Typ = GetType(Expr)
ReDim Preserve typ87(UBound(typ87) + 1)
typ87(UBound(typ87)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ConvToAST)
Typ = ConvToAST.ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 30)
ASTEmitIL.MarkSequencePoint(doc10, 525, 1, 525, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ88(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 30)
Typ = GetType(Token)
ReDim Preserve typ88(UBound(typ88) + 1)
typ88(UBound(typ88)) = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ReDim Preserve typ88(UBound(typ88) + 1)
typ88(UBound(typ88)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc10, 527, 1, 527, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 26)
ASTEmitIL.MarkSequencePoint(doc10, 528, 1, 528, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(System.Type).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("TypArr"))
ASTEmitIL.MarkSequencePoint(doc10, 529, 1, 529, 100)
Dim typ89(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ReDim Preserve typ89(UBound(typ89) + 1)
typ89(UBound(typ89)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("AddTyp", typ89))
Typ = GetType(AsmFactory).GetMethod("AddTyp", typ89).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc10, 530, 1, 530, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 25)
ASTEmitIL.MarkSequencePoint(doc10, 531, 1, 531, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 26)
Typ = GetType(System.Type).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("TypArr"))
ASTEmitIL.MarkSequencePoint(doc10, 533, 1, 533, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldloc, 27)
Typ = GetType(System.Int32)
Dim fa129 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru129 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont129 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru129)
ASTEmitIL.Emit(OpCodes.Br, fa129)
ASTEmitIL.MarkLabel(tru129)
ASTEmitIL.MarkSequencePoint(doc10, 534, 1, 534, 100)
ASTEmitIL.Emit(OpCodes.Br, label15)
ASTEmitIL.MarkSequencePoint(doc10, 535, 1, 535, 100)
ASTEmitIL.Emit(OpCodes.Br, cont129)
ASTEmitIL.MarkLabel(fa129)
ASTEmitIL.MarkSequencePoint(doc10, 536, 1, 536, 100)
ASTEmitIL.Emit(OpCodes.Br, label14)
ASTEmitIL.MarkSequencePoint(doc10, 537, 1, 537, 100)
ASTEmitIL.Emit(OpCodes.Br, cont129)
ASTEmitIL.MarkLabel(cont129)
ASTEmitIL.MarkSequencePoint(doc10, 539, 1, 539, 100)
ASTEmitIL.MarkLabel(label15)
ASTEmitIL.MarkSequencePoint(doc10, 541, 1, 541, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 23)
Typ = GetType(System.String).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
Dim fa130 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru130 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont130 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Bge, tru130)
ASTEmitIL.Emit(OpCodes.Br, fa130)
ASTEmitIL.MarkLabel(tru130)
ASTEmitIL.MarkSequencePoint(doc10, 543, 1, 543, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 7)
ASTEmitIL.MarkSequencePoint(doc10, 544, 1, 544, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 23)
Typ = GetType(System.String).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Sub)
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc10, 546, 1, 546, 100)
Dim label16 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc10, 547, 1, 547, 100)
Dim label17 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc10, 549, 1, 549, 100)
ASTEmitIL.MarkLabel(label16)
ASTEmitIL.MarkSequencePoint(doc10, 550, 1, 550, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Add)
ASTEmitIL.Emit(OpCodes.Stloc, 7)
ASTEmitIL.MarkSequencePoint(doc10, 552, 1, 552, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa131 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru131 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont131 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru131)
ASTEmitIL.Emit(OpCodes.Br, fa131)
ASTEmitIL.MarkLabel(tru131)
ASTEmitIL.MarkSequencePoint(doc10, 553, 1, 553, 100)
Dim typ90(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 23)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ90(UBound(typ90) + 1)
typ90(UBound(typ90)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindVar", typ90))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindVar", typ90).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 33)
ASTEmitIL.MarkSequencePoint(doc10, 555, 1, 555, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 12)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldnull)
Dim fa132 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru132 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont132 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, fa132)
ASTEmitIL.Emit(OpCodes.Br, tru132)
ASTEmitIL.MarkLabel(tru132)
ASTEmitIL.MarkSequencePoint(doc10, 556, 1, 556, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 33)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 19)
ASTEmitIL.MarkSequencePoint(doc10, 557, 1, 557, 100)
ASTEmitIL.Emit(OpCodes.Br, cont132)
ASTEmitIL.MarkLabel(fa132)
ASTEmitIL.MarkSequencePoint(doc10, 558, 1, 558, 100)
Dim typ91(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 23)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ91(UBound(typ91) + 1)
typ91(UBound(typ91)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadClass", typ91))
Typ = GetType(Loader).GetMethod("LoadClass", typ91).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 19)
ASTEmitIL.MarkSequencePoint(doc10, 559, 1, 559, 100)
ASTEmitIL.Emit(OpCodes.Br, cont132)
ASTEmitIL.MarkLabel(cont132)
ASTEmitIL.MarkSequencePoint(doc10, 561, 1, 561, 100)
ASTEmitIL.Emit(OpCodes.Br, cont131)
ASTEmitIL.MarkLabel(fa131)
ASTEmitIL.MarkSequencePoint(doc10, 562, 1, 562, 100)
Dim typ92(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(System.Type)
ReDim Preserve typ92(UBound(typ92) + 1)
typ92(UBound(typ92)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 23)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ92(UBound(typ92) + 1)
typ92(UBound(typ92)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadField", typ92))
Typ = GetType(Loader).GetMethod("LoadField", typ92).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 32)
ASTEmitIL.MarkSequencePoint(doc10, 563, 1, 563, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 32)
Typ = GetType(FieldInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_FieldType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_FieldType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 19)
ASTEmitIL.MarkSequencePoint(doc10, 564, 1, 564, 100)
ASTEmitIL.Emit(OpCodes.Br, cont131)
ASTEmitIL.MarkLabel(cont131)
ASTEmitIL.MarkSequencePoint(doc10, 566, 1, 566, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Int32)
Dim fa133 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru133 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont133 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru133)
ASTEmitIL.Emit(OpCodes.Br, fa133)
ASTEmitIL.MarkLabel(tru133)
ASTEmitIL.MarkSequencePoint(doc10, 567, 1, 567, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Add)
ASTEmitIL.Emit(OpCodes.Stloc, 7)
ASTEmitIL.MarkSequencePoint(doc10, 568, 1, 568, 100)
ASTEmitIL.Emit(OpCodes.Br, label17)
ASTEmitIL.MarkSequencePoint(doc10, 569, 1, 569, 100)
ASTEmitIL.Emit(OpCodes.Br, cont133)
ASTEmitIL.MarkLabel(fa133)
ASTEmitIL.MarkSequencePoint(doc10, 570, 1, 570, 100)
ASTEmitIL.Emit(OpCodes.Br, label16)
ASTEmitIL.MarkSequencePoint(doc10, 571, 1, 571, 100)
ASTEmitIL.Emit(OpCodes.Br, cont133)
ASTEmitIL.MarkLabel(cont133)
ASTEmitIL.MarkSequencePoint(doc10, 573, 1, 573, 100)
ASTEmitIL.MarkLabel(label17)
ASTEmitIL.MarkSequencePoint(doc10, 575, 1, 575, 100)
Dim typ94(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(System.Type)
ReDim Preserve typ94(UBound(typ94) + 1)
typ94(UBound(typ94)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 23)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ94(UBound(typ94) + 1)
typ94(UBound(typ94)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ94(UBound(typ94) + 1)
typ94(UBound(typ94)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadMethod", typ94))
Typ = GetType(Loader).GetMethod("LoadMethod", typ94).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 31)
ASTEmitIL.MarkSequencePoint(doc10, 576, 1, 576, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(MethodInfo)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc10, 578, 1, 578, 100)
ASTEmitIL.Emit(OpCodes.Br, cont130)
ASTEmitIL.MarkLabel(fa130)
ASTEmitIL.MarkSequencePoint(doc10, 579, 1, 579, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 7)
ASTEmitIL.MarkSequencePoint(doc10, 580, 1, 580, 100)
ASTEmitIL.Emit(OpCodes.Br, cont130)
ASTEmitIL.MarkLabel(cont130)
ASTEmitIL.MarkSequencePoint(doc10, 583, 1, 583, 100)
ASTEmitIL.Emit(OpCodes.Br, cont119)
ASTEmitIL.MarkLabel(cont119)
ASTEmitIL.MarkSequencePoint(doc10, 584, 1, 584, 100)
ASTEmitIL.Emit(OpCodes.Br, label9)
ASTEmitIL.MarkSequencePoint(doc10, 585, 1, 585, 100)
ASTEmitIL.Emit(OpCodes.Br, cont118)
ASTEmitIL.MarkLabel(fa118)
ASTEmitIL.MarkSequencePoint(doc10, 586, 1, 586, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(MethodNameTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodNameTok).GetField("TTok"))
Typ = GetType(MethodNameTok).GetField("TTok").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 6)
ASTEmitIL.MarkSequencePoint(doc10, 587, 1, 587, 100)
Dim typ96(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(TypeTok)
ReDim Preserve typ96(UBound(typ96) + 1)
typ96(UBound(typ96)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ96))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ96).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc10, 588, 1, 588, 100)
ASTEmitIL.Emit(OpCodes.Br, label9)
ASTEmitIL.MarkSequencePoint(doc10, 589, 1, 589, 100)
ASTEmitIL.Emit(OpCodes.Br, cont118)
ASTEmitIL.MarkLabel(cont118)
ASTEmitIL.MarkSequencePoint(doc10, 590, 1, 590, 100)
ASTEmitIL.Emit(OpCodes.Br, cont117)
ASTEmitIL.MarkLabel(fa117)
ASTEmitIL.Emit(OpCodes.Br, cont117)
ASTEmitIL.MarkLabel(cont117)
ASTEmitIL.MarkSequencePoint(doc10, 592, 1, 592, 100)
ASTEmitIL.MarkLabel(label9)
ASTEmitIL.MarkSequencePoint(doc10, 594, 1, 594, 100)
ASTEmitIL.Emit(OpCodes.Br, cont102)
ASTEmitIL.MarkLabel(cont102)
ASTEmitIL.MarkSequencePoint(doc10, 596, 1, 596, 100)
ASTEmitIL.Emit(OpCodes.Ret)
Dim typ97(-1) As Type
ReDim Preserve typ97(UBound(typ97) + 1)
typ97(UBound(typ97)) = GetType(Expr)
Dim Evaluate As MethodBuilder = Evaluator.DefineMethod("Evaluate", MethodAttributes.Public, GetType(System.Void), typ97)
Dim EvaluateIL As ILGenerator = Evaluate.GetILGenerator()
Dim Evaluateparam01 As ParameterBuilder = Evaluate.DefineParameter(1, ParameterAttributes.None, "exp")
EvaluateIL.MarkSequencePoint(doc10, 600, 1, 600, 100)
Dim locbldr174 As LocalBuilder = EvaluateIL.DeclareLocal(GetType(System.Int32))
locbldr174.SetLocalSymInfo("len")
EvaluateIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
EvaluateIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
EvaluateIL.Emit(OpCodes.Ldlen)
EvaluateIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
EvaluateIL.Emit(OpCodes.Stloc, 0)
EvaluateIL.MarkSequencePoint(doc10, 602, 1, 602, 100)
Dim locbldr175 As LocalBuilder = EvaluateIL.DeclareLocal(GetType(Expr))
locbldr175.SetLocalSymInfo("rpnexp")
EvaluateIL.MarkSequencePoint(doc10, 604, 1, 604, 100)
EvaluateIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
EvaluateIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
Dim fa134 As System.Reflection.Emit.Label = EvaluateIL.DefineLabel()
Dim tru134 As System.Reflection.Emit.Label = EvaluateIL.DefineLabel()
Dim cont134 As System.Reflection.Emit.Label = EvaluateIL.DefineLabel()
EvaluateIL.Emit(OpCodes.Beq, tru134)
EvaluateIL.Emit(OpCodes.Br, fa134)
EvaluateIL.MarkLabel(tru134)
EvaluateIL.MarkSequencePoint(doc10, 605, 1, 605, 100)
EvaluateIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
EvaluateIL.Emit(OpCodes.Stloc, 1)
EvaluateIL.MarkSequencePoint(doc10, 606, 1, 606, 100)
EvaluateIL.Emit(OpCodes.Br, cont134)
EvaluateIL.MarkLabel(fa134)
EvaluateIL.MarkSequencePoint(doc10, 607, 1, 607, 100)
EvaluateIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
EvaluateIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
Dim fa135 As System.Reflection.Emit.Label = EvaluateIL.DefineLabel()
Dim tru135 As System.Reflection.Emit.Label = EvaluateIL.DefineLabel()
Dim cont135 As System.Reflection.Emit.Label = EvaluateIL.DefineLabel()
EvaluateIL.Emit(OpCodes.Bge, tru135)
EvaluateIL.Emit(OpCodes.Br, fa135)
EvaluateIL.MarkLabel(tru135)
EvaluateIL.MarkSequencePoint(doc10, 608, 1, 608, 100)
EvaluateIL.Emit(OpCodes.Ldarg_0)
Dim typ98(-1) As Type
EvaluateIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ReDim Preserve typ98(UBound(typ98) + 1)
typ98(UBound(typ98)) = Typ
EvaluateIL.Emit(OpCodes.Callvirt, ConvToRPN)
Typ = ConvToRPN.ReturnType
EvaluateIL.Emit(OpCodes.Stloc, 1)
EvaluateIL.MarkSequencePoint(doc10, 609, 1, 609, 100)
EvaluateIL.Emit(OpCodes.Br, cont135)
EvaluateIL.MarkLabel(fa135)
EvaluateIL.Emit(OpCodes.Br, cont135)
EvaluateIL.MarkLabel(cont135)
EvaluateIL.MarkSequencePoint(doc10, 610, 1, 610, 100)
EvaluateIL.Emit(OpCodes.Br, cont134)
EvaluateIL.MarkLabel(cont134)
EvaluateIL.MarkSequencePoint(doc10, 612, 1, 612, 100)
Dim locbldr176 As LocalBuilder = EvaluateIL.DeclareLocal(GetType(Token))
locbldr176.SetLocalSymInfo("asttok")
EvaluateIL.Emit(OpCodes.Ldarg_0)
Dim typ99(-1) As Type
EvaluateIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Expr)
ReDim Preserve typ99(UBound(typ99) + 1)
typ99(UBound(typ99)) = Typ
EvaluateIL.Emit(OpCodes.Callvirt, ConvToAST)
Typ = ConvToAST.ReturnType
EvaluateIL.Emit(OpCodes.Stloc, 2)
EvaluateIL.MarkSequencePoint(doc10, 613, 1, 613, 100)
EvaluateIL.Emit(OpCodes.Ldarg_0)
Dim typ100(-1) As Type
EvaluateIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Token)
ReDim Preserve typ100(UBound(typ100) + 1)
typ100(UBound(typ100)) = Typ
EvaluateIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReDim Preserve typ100(UBound(typ100) + 1)
typ100(UBound(typ100)) = Typ
EvaluateIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EvaluateIL.Emit(OpCodes.Pop)
End If
EvaluateIL.MarkSequencePoint(doc10, 614, 1, 614, 100)
EvaluateIL.Emit(OpCodes.Ldarg_0)
Dim typ101(-1) As Type
EvaluateIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Token)
ReDim Preserve typ101(UBound(typ101) + 1)
typ101(UBound(typ101)) = Typ
EvaluateIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ101(UBound(typ101) + 1)
typ101(UBound(typ101)) = Typ
EvaluateIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EvaluateIL.Emit(OpCodes.Pop)
End If
EvaluateIL.MarkSequencePoint(doc10, 616, 1, 616, 100)
EvaluateIL.Emit(OpCodes.Ret)
Evaluator.CreateType()
End Sub


Dim doc11 As ISymbolDocumentWriter

Sub StmtReader()
Dim StmtReader As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "StmtReader", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(Stmt)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
Dim Read As MethodBuilder = StmtReader.DefineMethod("Read", MethodAttributes.Public, GetType(System.Void), typ0)
Dim ReadIL As ILGenerator = Read.GetILGenerator()
Dim Readparam01 As ParameterBuilder = Read.DefineParameter(1, ParameterAttributes.None, "stm")
Dim Readparam02 As ParameterBuilder = Read.DefineParameter(2, ParameterAttributes.None, "fpath")
ReadIL.MarkSequencePoint(doc11, 13, 1, 13, 100)
Dim locbldr177 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr177.SetLocalSymInfo("typ")
ReadIL.MarkSequencePoint(doc11, 14, 1, 14, 100)
Dim locbldr178 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Boolean))
locbldr178.SetLocalSymInfo("b")
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc11, 16, 1, 16, 100)
Dim label0 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.MarkSequencePoint(doc11, 18, 1, 18, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(RefasmStmt))
Dim typ1 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ1))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ1).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc11, 19, 1, 19, 100)
Dim typ2(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ2))
Typ = Typ03.GetMethod("IsInstanceOfType", typ2).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc11, 21, 1, 21, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa136 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru136 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont136 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru136)
ReadIL.Emit(OpCodes.Br, fa136)
ReadIL.MarkLabel(tru136)
ReadIL.MarkSequencePoint(doc11, 22, 1, 22, 100)
Dim locbldr179 As LocalBuilder = ReadIL.DeclareLocal(GetType(RefasmStmt))
locbldr179.SetLocalSymInfo("rastm")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 2)
ReadIL.MarkSequencePoint(doc11, 23, 1, 23, 100)
Dim locbldr180 As LocalBuilder = ReadIL.DeclareLocal(GetType(Token))
locbldr180.SetLocalSymInfo("ap")
ReadIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(RefasmStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(RefasmStmt).GetField("AsmPath"))
Typ = GetType(RefasmStmt).GetField("AsmPath").FieldType
ReadIL.Emit(OpCodes.Stloc, 3)
ReadIL.MarkSequencePoint(doc11, 25, 1, 25, 100)
Dim locbldr181 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.String))
locbldr181.SetLocalSymInfo("tmpstr")
Dim typ3(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "*")
Typ = GetType(System.String)
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ3))
Typ = GetType(String).GetMethod("Concat", typ3).ReturnType
ReadIL.Emit(OpCodes.Stloc, 4)
ReadIL.MarkSequencePoint(doc11, 26, 1, 26, 100)
Dim locbldr182 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Boolean))
locbldr182.SetLocalSymInfo("compb")
Dim typ4(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String)
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ4))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ4).ReturnType
ReadIL.Emit(OpCodes.Stloc, 5)
ReadIL.MarkSequencePoint(doc11, 28, 1, 28, 100)
ReadIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa137 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru137 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont137 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru137)
ReadIL.Emit(OpCodes.Br, fa137)
ReadIL.MarkLabel(tru137)
ReadIL.MarkSequencePoint(doc11, 29, 1, 29, 100)
ReadIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stloc, 4)
ReadIL.MarkSequencePoint(doc11, 30, 1, 30, 100)
Dim locbldr183 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Char).MakeArrayType())
locbldr183.SetLocalSymInfo("tmpchrarr")
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Char))
ReadIL.Emit(OpCodes.Stloc, 6)
ReadIL.MarkSequencePoint(doc11, 31, 1, 31, 100)
ReadIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
Dim typ5 As Type() = {Typ}
ReadIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ5))
Typ = GetType(System.Convert).GetMethod("ToChar", typ5).ReturnType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc11, 32, 1, 32, 100)
Dim typ6(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Trim", typ6))
Typ = Typ03.GetMethod("Trim", typ6).ReturnType
ReadIL.Emit(OpCodes.Stloc, 4)
ReadIL.MarkSequencePoint(doc11, 33, 1, 33, 100)
ReadIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String)
ReadIL.Emit(OpCodes.Stfld, GetType(Token).GetField("Value"))
ReadIL.MarkSequencePoint(doc11, 34, 1, 34, 100)
ReadIL.Emit(OpCodes.Br, cont137)
ReadIL.MarkLabel(fa137)
ReadIL.Emit(OpCodes.Br, cont137)
ReadIL.MarkLabel(cont137)
ReadIL.MarkSequencePoint(doc11, 36, 1, 36, 100)
Dim locbldr184 As LocalBuilder = ReadIL.DeclareLocal(GetType(Assembly))
locbldr184.SetLocalSymInfo("asm")
Dim typ7(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Assembly).GetMethod("LoadFrom", typ7))
Typ = GetType(Assembly).GetMethod("LoadFrom", typ7).ReturnType
ReadIL.Emit(OpCodes.Stloc, 7)
ReadIL.MarkSequencePoint(doc11, 37, 1, 37, 100)
Dim typ8(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Referencing Assembly: ")
Typ = GetType(System.String)
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ8))
Typ = GetType(Console).GetMethod("Write", typ8).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 38, 1, 38, 100)
Dim typ9(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ9))
Typ = GetType(Console).GetMethod("WriteLine", typ9).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 39, 1, 39, 100)
Dim typ10(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(Assembly)
ReDim Preserve typ10(UBound(typ10) + 1)
typ10(UBound(typ10)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Importer).GetMethod("AddAsm", typ10))
Typ = GetType(Importer).GetMethod("AddAsm", typ10).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 40, 1, 40, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc11, 41, 1, 41, 100)
ReadIL.Emit(OpCodes.Br, cont136)
ReadIL.MarkLabel(fa136)
ReadIL.Emit(OpCodes.Br, cont136)
ReadIL.MarkLabel(cont136)
ReadIL.MarkSequencePoint(doc11, 43, 1, 43, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(ImportStmt))
Dim typ11 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ11))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ11).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc11, 44, 1, 44, 100)
Dim typ12(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ12(UBound(typ12) + 1)
typ12(UBound(typ12)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ12))
Typ = Typ03.GetMethod("IsInstanceOfType", typ12).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc11, 46, 1, 46, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa138 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru138 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont138 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru138)
ReadIL.Emit(OpCodes.Br, fa138)
ReadIL.MarkLabel(tru138)
ReadIL.MarkSequencePoint(doc11, 47, 1, 47, 100)
Dim locbldr185 As LocalBuilder = ReadIL.DeclareLocal(GetType(ImportStmt))
locbldr185.SetLocalSymInfo("istm")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 8)
ReadIL.MarkSequencePoint(doc11, 48, 1, 48, 100)
Dim locbldr186 As LocalBuilder = ReadIL.DeclareLocal(GetType(Token))
locbldr186.SetLocalSymInfo("ina")
ReadIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(ImportStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(ImportStmt).GetField("NS"))
Typ = GetType(ImportStmt).GetField("NS").FieldType
ReadIL.Emit(OpCodes.Stloc, 9)
ReadIL.MarkSequencePoint(doc11, 50, 1, 50, 100)
Dim typ13(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ13(UBound(typ13) + 1)
typ13(UBound(typ13)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "*")
Typ = GetType(System.String)
ReDim Preserve typ13(UBound(typ13) + 1)
typ13(UBound(typ13)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ13(UBound(typ13) + 1)
typ13(UBound(typ13)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ13))
Typ = GetType(String).GetMethod("Concat", typ13).ReturnType
ReadIL.Emit(OpCodes.Stloc, 4)
ReadIL.MarkSequencePoint(doc11, 51, 1, 51, 100)
Dim typ14(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String)
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ14))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ14).ReturnType
ReadIL.Emit(OpCodes.Stloc, 5)
ReadIL.MarkSequencePoint(doc11, 53, 1, 53, 100)
ReadIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa139 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru139 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont139 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru139)
ReadIL.Emit(OpCodes.Br, fa139)
ReadIL.MarkLabel(tru139)
ReadIL.MarkSequencePoint(doc11, 54, 1, 54, 100)
ReadIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stloc, 4)
ReadIL.MarkSequencePoint(doc11, 55, 1, 55, 100)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Char))
ReadIL.Emit(OpCodes.Stloc, 6)
ReadIL.MarkSequencePoint(doc11, 56, 1, 56, 100)
ReadIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
Dim typ15 As Type() = {Typ}
ReadIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ15))
Typ = GetType(System.Convert).GetMethod("ToChar", typ15).ReturnType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc11, 57, 1, 57, 100)
Dim typ16(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ16(UBound(typ16) + 1)
typ16(UBound(typ16)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Trim", typ16))
Typ = Typ03.GetMethod("Trim", typ16).ReturnType
ReadIL.Emit(OpCodes.Stloc, 4)
ReadIL.MarkSequencePoint(doc11, 58, 1, 58, 100)
ReadIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String)
ReadIL.Emit(OpCodes.Stfld, GetType(Token).GetField("Value"))
ReadIL.MarkSequencePoint(doc11, 59, 1, 59, 100)
ReadIL.Emit(OpCodes.Br, cont139)
ReadIL.MarkLabel(fa139)
ReadIL.Emit(OpCodes.Br, cont139)
ReadIL.MarkLabel(cont139)
ReadIL.MarkSequencePoint(doc11, 61, 1, 61, 100)
Dim typ17(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Importing Namespace: ")
Typ = GetType(System.String)
ReDim Preserve typ17(UBound(typ17) + 1)
typ17(UBound(typ17)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ17))
Typ = GetType(Console).GetMethod("Write", typ17).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 62, 1, 62, 100)
Dim typ18(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ18(UBound(typ18) + 1)
typ18(UBound(typ18)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ18))
Typ = GetType(Console).GetMethod("WriteLine", typ18).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 64, 1, 64, 100)
Dim typ19(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ19(UBound(typ19) + 1)
typ19(UBound(typ19)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Importer).GetMethod("AddImp", typ19))
Typ = GetType(Importer).GetMethod("AddImp", typ19).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 65, 1, 65, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc11, 66, 1, 66, 100)
ReadIL.Emit(OpCodes.Br, cont138)
ReadIL.MarkLabel(fa138)
ReadIL.Emit(OpCodes.Br, cont138)
ReadIL.MarkLabel(cont138)
ReadIL.MarkSequencePoint(doc11, 68, 1, 68, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(LocimportStmt))
Dim typ20 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ20))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ20).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc11, 69, 1, 69, 100)
Dim typ21(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ21(UBound(typ21) + 1)
typ21(UBound(typ21)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ21))
Typ = Typ03.GetMethod("IsInstanceOfType", typ21).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc11, 71, 1, 71, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa140 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru140 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont140 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru140)
ReadIL.Emit(OpCodes.Br, fa140)
ReadIL.MarkLabel(tru140)
ReadIL.MarkSequencePoint(doc11, 72, 1, 72, 100)
Dim locbldr187 As LocalBuilder = ReadIL.DeclareLocal(GetType(LocimportStmt))
locbldr187.SetLocalSymInfo("listm")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 10)
ReadIL.MarkSequencePoint(doc11, 73, 1, 73, 100)
Dim locbldr188 As LocalBuilder = ReadIL.DeclareLocal(GetType(Token))
locbldr188.SetLocalSymInfo("lina")
ReadIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(LocimportStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(LocimportStmt).GetField("NS"))
Typ = GetType(LocimportStmt).GetField("NS").FieldType
ReadIL.Emit(OpCodes.Stloc, 11)
ReadIL.MarkSequencePoint(doc11, 75, 1, 75, 100)
Dim typ22(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ22(UBound(typ22) + 1)
typ22(UBound(typ22)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "*")
Typ = GetType(System.String)
ReDim Preserve typ22(UBound(typ22) + 1)
typ22(UBound(typ22)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ22(UBound(typ22) + 1)
typ22(UBound(typ22)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ22))
Typ = GetType(String).GetMethod("Concat", typ22).ReturnType
ReadIL.Emit(OpCodes.Stloc, 4)
ReadIL.MarkSequencePoint(doc11, 76, 1, 76, 100)
Dim typ23(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ23(UBound(typ23) + 1)
typ23(UBound(typ23)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String)
ReDim Preserve typ23(UBound(typ23) + 1)
typ23(UBound(typ23)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ23))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ23).ReturnType
ReadIL.Emit(OpCodes.Stloc, 5)
ReadIL.MarkSequencePoint(doc11, 78, 1, 78, 100)
ReadIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa141 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru141 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont141 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru141)
ReadIL.Emit(OpCodes.Br, fa141)
ReadIL.MarkLabel(tru141)
ReadIL.MarkSequencePoint(doc11, 79, 1, 79, 100)
ReadIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stloc, 4)
ReadIL.MarkSequencePoint(doc11, 80, 1, 80, 100)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Char))
ReadIL.Emit(OpCodes.Stloc, 6)
ReadIL.MarkSequencePoint(doc11, 81, 1, 81, 100)
ReadIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
Dim typ24 As Type() = {Typ}
ReadIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ24))
Typ = GetType(System.Convert).GetMethod("ToChar", typ24).ReturnType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc11, 82, 1, 82, 100)
Dim typ25(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ25(UBound(typ25) + 1)
typ25(UBound(typ25)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Trim", typ25))
Typ = Typ03.GetMethod("Trim", typ25).ReturnType
ReadIL.Emit(OpCodes.Stloc, 4)
ReadIL.MarkSequencePoint(doc11, 83, 1, 83, 100)
ReadIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String)
ReadIL.Emit(OpCodes.Stfld, GetType(Token).GetField("Value"))
ReadIL.MarkSequencePoint(doc11, 84, 1, 84, 100)
ReadIL.Emit(OpCodes.Br, cont141)
ReadIL.MarkLabel(fa141)
ReadIL.Emit(OpCodes.Br, cont141)
ReadIL.MarkLabel(cont141)
ReadIL.MarkSequencePoint(doc11, 86, 1, 86, 100)
Dim typ26(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Importing Namespace: ")
Typ = GetType(System.String)
ReDim Preserve typ26(UBound(typ26) + 1)
typ26(UBound(typ26)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ26))
Typ = GetType(Console).GetMethod("Write", typ26).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 87, 1, 87, 100)
Dim typ27(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ27(UBound(typ27) + 1)
typ27(UBound(typ27)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ27))
Typ = GetType(Console).GetMethod("WriteLine", typ27).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 89, 1, 89, 100)
Dim typ28(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ28(UBound(typ28) + 1)
typ28(UBound(typ28)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Importer).GetMethod("AddLocImp", typ28))
Typ = GetType(Importer).GetMethod("AddLocImp", typ28).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 90, 1, 90, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc11, 91, 1, 91, 100)
ReadIL.Emit(OpCodes.Br, cont140)
ReadIL.MarkLabel(fa140)
ReadIL.Emit(OpCodes.Br, cont140)
ReadIL.MarkLabel(cont140)
ReadIL.MarkSequencePoint(doc11, 93, 1, 93, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(AssemblyStmt))
Dim typ29 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ29))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ29).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc11, 94, 1, 94, 100)
Dim typ30(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ30(UBound(typ30) + 1)
typ30(UBound(typ30)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ30))
Typ = Typ03.GetMethod("IsInstanceOfType", typ30).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc11, 96, 1, 96, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa142 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru142 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont142 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru142)
ReadIL.Emit(OpCodes.Br, fa142)
ReadIL.MarkLabel(tru142)
ReadIL.MarkSequencePoint(doc11, 98, 1, 98, 100)
Dim locbldr189 As LocalBuilder = ReadIL.DeclareLocal(GetType(AssemblyStmt))
locbldr189.SetLocalSymInfo("asms")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 12)
ReadIL.MarkSequencePoint(doc11, 99, 1, 99, 100)
Dim locbldr190 As LocalBuilder = ReadIL.DeclareLocal(GetType(Ident))
locbldr190.SetLocalSymInfo("asmn")
ReadIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(AssemblyStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(AssemblyStmt).GetField("AsmName"))
Typ = GetType(AssemblyStmt).GetField("AsmName").FieldType
ReadIL.Emit(OpCodes.Stloc, 13)
ReadIL.MarkSequencePoint(doc11, 100, 1, 100, 100)
Dim typ31(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ31(UBound(typ31) + 1)
typ31(UBound(typ31)) = Typ
ReadIL.Emit(OpCodes.Newobj, GetType(AssemblyName).GetConstructor(typ31))
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AsmNameStr"))
ReadIL.MarkSequencePoint(doc11, 101, 1, 101, 100)
Dim locbldr191 As LocalBuilder = ReadIL.DeclareLocal(GetType(Token))
locbldr191.SetLocalSymInfo("asmm")
ReadIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(AssemblyStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(AssemblyStmt).GetField("Mode"))
Typ = GetType(AssemblyStmt).GetField("Mode").FieldType
ReadIL.Emit(OpCodes.Stloc, 14)
ReadIL.MarkSequencePoint(doc11, 102, 1, 102, 100)
ReadIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AsmMode"))
ReadIL.MarkSequencePoint(doc11, 103, 1, 103, 100)
ReadIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("DfltNS"))
ReadIL.MarkSequencePoint(doc11, 104, 1, 104, 100)
ReadIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnNS"))
ReadIL.MarkSequencePoint(doc11, 106, 1, 106, 100)
Dim typ32(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Beginning Assembly: ")
Typ = GetType(System.String)
ReDim Preserve typ32(UBound(typ32) + 1)
typ32(UBound(typ32)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ32))
Typ = GetType(Console).GetMethod("Write", typ32).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 107, 1, 107, 100)
Dim typ33(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ33(UBound(typ33) + 1)
typ33(UBound(typ33)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ33))
Typ = GetType(Console).GetMethod("WriteLine", typ33).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 109, 1, 109, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc11, 111, 1, 111, 100)
ReadIL.Emit(OpCodes.Br, cont142)
ReadIL.MarkLabel(fa142)
ReadIL.Emit(OpCodes.Br, cont142)
ReadIL.MarkLabel(cont142)
ReadIL.MarkSequencePoint(doc11, 113, 1, 113, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(VerStmt))
Dim typ34 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ34))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ34).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc11, 114, 1, 114, 100)
Dim typ35(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ35(UBound(typ35) + 1)
typ35(UBound(typ35)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ35))
Typ = Typ03.GetMethod("IsInstanceOfType", typ35).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc11, 116, 1, 116, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa143 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru143 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont143 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru143)
ReadIL.Emit(OpCodes.Br, fa143)
ReadIL.MarkLabel(tru143)
ReadIL.MarkSequencePoint(doc11, 117, 1, 117, 100)
Dim locbldr192 As LocalBuilder = ReadIL.DeclareLocal(GetType(VerStmt))
locbldr192.SetLocalSymInfo("asmv")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 15)
ReadIL.MarkSequencePoint(doc11, 118, 1, 118, 100)
Dim locbldr193 As LocalBuilder = ReadIL.DeclareLocal(GetType(IntLiteral).MakeArrayType())
locbldr193.SetLocalSymInfo("vns")
ReadIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(VerStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(VerStmt).GetField("VersionNos"))
Typ = GetType(VerStmt).GetField("VersionNos").FieldType
ReadIL.Emit(OpCodes.Stloc, 16)
ReadIL.MarkSequencePoint(doc11, 119, 1, 119, 100)
Dim locbldr194 As LocalBuilder = ReadIL.DeclareLocal(GetType(IntLiteral))
locbldr194.SetLocalSymInfo("vne")
ReadIL.MarkSequencePoint(doc11, 120, 1, 120, 100)
Dim locbldr195 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Int32).MakeArrayType())
locbldr195.SetLocalSymInfo("vernos")
ReadIL.Emit(OpCodes.Ldc_I4, CInt(4))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Int32))
ReadIL.Emit(OpCodes.Stloc, 18)
ReadIL.MarkSequencePoint(doc11, 121, 1, 121, 100)
ReadIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(IntLiteral).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(IntLiteral).MakeArrayType().GetElementType())
Typ = GetType(IntLiteral).MakeArrayType().GetElementType()
ReadIL.Emit(OpCodes.Stloc, 17)
ReadIL.MarkSequencePoint(doc11, 122, 1, 122, 100)
ReadIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(IntLiteral)
ReadIL.Emit(OpCodes.Ldfld, GetType(IntLiteral).GetField("NumVal"))
Typ = GetType(IntLiteral).GetField("NumVal").FieldType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Int32).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc11, 123, 1, 123, 100)
ReadIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(IntLiteral).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(IntLiteral).MakeArrayType().GetElementType())
Typ = GetType(IntLiteral).MakeArrayType().GetElementType()
ReadIL.Emit(OpCodes.Stloc, 17)
ReadIL.MarkSequencePoint(doc11, 124, 1, 124, 100)
ReadIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(IntLiteral)
ReadIL.Emit(OpCodes.Ldfld, GetType(IntLiteral).GetField("NumVal"))
Typ = GetType(IntLiteral).GetField("NumVal").FieldType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Int32).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc11, 125, 1, 125, 100)
ReadIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(IntLiteral).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(IntLiteral).MakeArrayType().GetElementType())
Typ = GetType(IntLiteral).MakeArrayType().GetElementType()
ReadIL.Emit(OpCodes.Stloc, 17)
ReadIL.MarkSequencePoint(doc11, 126, 1, 126, 100)
ReadIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(IntLiteral)
ReadIL.Emit(OpCodes.Ldfld, GetType(IntLiteral).GetField("NumVal"))
Typ = GetType(IntLiteral).GetField("NumVal").FieldType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Int32).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc11, 127, 1, 127, 100)
ReadIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(IntLiteral).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(IntLiteral).MakeArrayType().GetElementType())
Typ = GetType(IntLiteral).MakeArrayType().GetElementType()
ReadIL.Emit(OpCodes.Stloc, 17)
ReadIL.MarkSequencePoint(doc11, 128, 1, 128, 100)
ReadIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(IntLiteral)
ReadIL.Emit(OpCodes.Ldfld, GetType(IntLiteral).GetField("NumVal"))
Typ = GetType(IntLiteral).GetField("NumVal").FieldType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Int32).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc11, 129, 1, 129, 100)
Dim locbldr196 As LocalBuilder = ReadIL.DeclareLocal(GetType(Version))
locbldr196.SetLocalSymInfo("asmver")
Dim typ36(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(System.Int32).MakeArrayType().GetElementType())
Typ = GetType(System.Int32).MakeArrayType().GetElementType()
ReDim Preserve typ36(UBound(typ36) + 1)
typ36(UBound(typ36)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(System.Int32).MakeArrayType().GetElementType())
Typ = GetType(System.Int32).MakeArrayType().GetElementType()
ReDim Preserve typ36(UBound(typ36) + 1)
typ36(UBound(typ36)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(System.Int32).MakeArrayType().GetElementType())
Typ = GetType(System.Int32).MakeArrayType().GetElementType()
ReDim Preserve typ36(UBound(typ36) + 1)
typ36(UBound(typ36)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(System.Int32).MakeArrayType().GetElementType())
Typ = GetType(System.Int32).MakeArrayType().GetElementType()
ReDim Preserve typ36(UBound(typ36) + 1)
typ36(UBound(typ36)) = Typ
ReadIL.Emit(OpCodes.Newobj, GetType(Version).GetConstructor(typ36))
ReadIL.Emit(OpCodes.Stloc, 19)
ReadIL.MarkSequencePoint(doc11, 130, 1, 130, 100)
Dim locbldr197 As LocalBuilder = ReadIL.DeclareLocal(GetType(AssemblyName))
locbldr197.SetLocalSymInfo("asmnm")
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmNameStr"))
Typ = GetType(AsmFactory).GetField("AsmNameStr").FieldType
ReadIL.Emit(OpCodes.Stloc, 20)
ReadIL.MarkSequencePoint(doc11, 131, 1, 131, 100)
Dim typ37(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(AssemblyName)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(Version)
ReDim Preserve typ37(UBound(typ37) + 1)
typ37(UBound(typ37)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("set_Version", typ37))
Typ = Typ03.GetMethod("set_Version", typ37).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 132, 1, 132, 100)
ReadIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(AssemblyName)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AsmNameStr"))
ReadIL.MarkSequencePoint(doc11, 133, 1, 133, 100)
Dim locbldr198 As LocalBuilder = ReadIL.DeclareLocal(GetType(AppDomain))
locbldr198.SetLocalSymInfo("cad")
ReadIL.Emit(OpCodes.Call, GetType(AppDomain).GetMethod("get_CurrentDomain", Type.EmptyTypes))
Typ = GetType(AppDomain).GetMethod("get_CurrentDomain", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 21)
ReadIL.MarkSequencePoint(doc11, 134, 1, 134, 100)
Dim locbldr199 As LocalBuilder = ReadIL.DeclareLocal(GetType(AssemblyBuilderAccess))
locbldr199.SetLocalSymInfo("aasv")
ReadIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Stloc, 22)
ReadIL.MarkSequencePoint(doc11, 135, 1, 135, 100)
Dim locbldr200 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.String))
locbldr200.SetLocalSymInfo("curd")
ReadIL.Emit(OpCodes.Call, GetType(Directory).GetMethod("GetCurrentDirectory", Type.EmptyTypes))
Typ = GetType(Directory).GetMethod("GetCurrentDirectory", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 23)
ReadIL.MarkSequencePoint(doc11, 136, 1, 136, 100)
Dim typ38(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(AppDomain)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(AssemblyName)
ReDim Preserve typ38(UBound(typ38) + 1)
typ38(UBound(typ38)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(AssemblyBuilderAccess)
ReDim Preserve typ38(UBound(typ38) + 1)
typ38(UBound(typ38)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 23)
Typ = GetType(System.String)
ReDim Preserve typ38(UBound(typ38) + 1)
typ38(UBound(typ38)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineDynamicAssembly", typ38))
Typ = Typ03.GetMethod("DefineDynamicAssembly", typ38).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AsmB"))
ReadIL.MarkSequencePoint(doc11, 137, 1, 137, 100)
Dim locbldr201 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.String))
locbldr201.SetLocalSymInfo("asmnme")
ReadIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(AssemblyName)
Typ03 = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_Name", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_Name", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 24)
ReadIL.MarkSequencePoint(doc11, 138, 1, 138, 100)
Dim typ40(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(System.String)
ReDim Preserve typ40(UBound(typ40) + 1)
typ40(UBound(typ40)) = Typ
ReadIL.Emit(OpCodes.Ldstr, ".")
Typ = GetType(System.String)
ReDim Preserve typ40(UBound(typ40) + 1)
typ40(UBound(typ40)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmMode"))
Typ = GetType(AsmFactory).GetField("AsmMode").FieldType
ReDim Preserve typ40(UBound(typ40) + 1)
typ40(UBound(typ40)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ40))
Typ = GetType(String).GetMethod("Concat", typ40).ReturnType
ReadIL.Emit(OpCodes.Stloc, 24)
ReadIL.MarkSequencePoint(doc11, 139, 1, 139, 100)
Dim locbldr202 As LocalBuilder = ReadIL.DeclareLocal(GetType(AssemblyBuilder))
locbldr202.SetLocalSymInfo("ab")
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmB"))
Typ = GetType(AsmFactory).GetField("AsmB").FieldType
ReadIL.Emit(OpCodes.Stloc, 25)
ReadIL.MarkSequencePoint(doc11, 141, 1, 141, 100)
Dim typ41(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(AssemblyBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(System.String)
ReDim Preserve typ41(UBound(typ41) + 1)
typ41(UBound(typ41)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(System.String)
ReDim Preserve typ41(UBound(typ41) + 1)
typ41(UBound(typ41)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("DebugFlg"))
Typ = GetType(AsmFactory).GetField("DebugFlg").FieldType
ReDim Preserve typ41(UBound(typ41) + 1)
typ41(UBound(typ41)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineDynamicModule", typ41))
Typ = Typ03.GetMethod("DefineDynamicModule", typ41).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("MdlB"))
ReadIL.MarkSequencePoint(doc11, 143, 1, 143, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("DebugFlg"))
Typ = GetType(AsmFactory).GetField("DebugFlg").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa144 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru144 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont144 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru144)
ReadIL.Emit(OpCodes.Br, fa144)
ReadIL.MarkLabel(tru144)
ReadIL.MarkSequencePoint(doc11, 144, 1, 144, 100)
Dim locbldr203 As LocalBuilder = ReadIL.DeclareLocal(GetType(ModuleBuilder))
locbldr203.SetLocalSymInfo("mdlbldbg")
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("MdlB"))
Typ = GetType(AsmFactory).GetField("MdlB").FieldType
ReadIL.Emit(OpCodes.Stloc, 26)
ReadIL.MarkSequencePoint(doc11, 145, 1, 145, 100)
Dim typ42(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 26)
Typ = GetType(ModuleBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.String)
ReDim Preserve typ42(UBound(typ42) + 1)
typ42(UBound(typ42)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Guid).GetField("Empty"))
Typ = GetType(Guid).GetField("Empty").FieldType
ReDim Preserve typ42(UBound(typ42) + 1)
typ42(UBound(typ42)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Guid).GetField("Empty"))
Typ = GetType(Guid).GetField("Empty").FieldType
ReDim Preserve typ42(UBound(typ42) + 1)
typ42(UBound(typ42)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Guid).GetField("Empty"))
Typ = GetType(Guid).GetField("Empty").FieldType
ReDim Preserve typ42(UBound(typ42) + 1)
typ42(UBound(typ42)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineDocument", typ42))
Typ = Typ03.GetMethod("DefineDocument", typ42).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("DocWriter"))
ReadIL.MarkSequencePoint(doc11, 146, 1, 146, 100)
ReadIL.Emit(OpCodes.Br, cont144)
ReadIL.MarkLabel(fa144)
ReadIL.Emit(OpCodes.Br, cont144)
ReadIL.MarkLabel(cont144)
ReadIL.MarkSequencePoint(doc11, 149, 1, 149, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("DebugFlg"))
Typ = GetType(AsmFactory).GetField("DebugFlg").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa145 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru145 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont145 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru145)
ReadIL.Emit(OpCodes.Br, fa145)
ReadIL.MarkLabel(tru145)
ReadIL.MarkSequencePoint(doc11, 150, 1, 150, 100)
Dim locbldr204 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr204.SetLocalSymInfo("dtyp")
ReadIL.Emit(OpCodes.Ldtoken, GetType(DebuggableAttribute))
Dim typ43 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ43))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ43).ReturnType
ReadIL.Emit(OpCodes.Stloc, 27)
ReadIL.MarkSequencePoint(doc11, 151, 1, 151, 100)
Dim locbldr205 As LocalBuilder = ReadIL.DeclareLocal(GetType(DebuggableAttribute.DebuggingModes))
locbldr205.SetLocalSymInfo("debugattr")
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(256))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Or)
ReadIL.Emit(OpCodes.Stloc, 28)
ReadIL.MarkSequencePoint(doc11, 152, 1, 152, 100)
Dim locbldr206 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Object))
locbldr206.SetLocalSymInfo("oattr")
ReadIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(DebuggableAttribute.DebuggingModes)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReadIL.Emit(OpCodes.Stloc, 29)
ReadIL.MarkSequencePoint(doc11, 153, 1, 153, 100)
Dim locbldr207 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr207.SetLocalSymInfo("dattyp")
ReadIL.Emit(OpCodes.Ldtoken, GetType(DebuggableAttribute.DebuggingModes))
Dim typ44 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ44))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ44).ReturnType
ReadIL.Emit(OpCodes.Stloc, 30)
ReadIL.MarkSequencePoint(doc11, 154, 1, 154, 100)
Dim locbldr208 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type).MakeArrayType())
locbldr208.SetLocalSymInfo("tarr")
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Type))
ReadIL.Emit(OpCodes.Stloc, 31)
ReadIL.MarkSequencePoint(doc11, 155, 1, 155, 100)
ReadIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldloc, 30)
Typ = GetType(System.Type)
ReadIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc11, 156, 1, 156, 100)
Dim locbldr209 As LocalBuilder = ReadIL.DeclareLocal(GetType(ConstructorInfo))
locbldr209.SetLocalSymInfo("dctor")
Dim typ45(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 27)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ45(UBound(typ45) + 1)
typ45(UBound(typ45)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetConstructor", typ45))
Typ = Typ03.GetMethod("GetConstructor", typ45).ReturnType
ReadIL.Emit(OpCodes.Stloc, 32)
ReadIL.MarkSequencePoint(doc11, 157, 1, 157, 100)
Dim locbldr210 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Object).MakeArrayType())
locbldr210.SetLocalSymInfo("oarr")
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Object))
ReadIL.Emit(OpCodes.Stloc, 33)
ReadIL.MarkSequencePoint(doc11, 158, 1, 158, 100)
ReadIL.Emit(OpCodes.Ldloc, 33)
Typ = GetType(System.Object).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldloc, 29)
Typ = GetType(System.Object)
ReadIL.Emit(OpCodes.Stelem, GetType(System.Object).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc11, 159, 1, 159, 100)
Dim locbldr211 As LocalBuilder = ReadIL.DeclareLocal(GetType(CustomAttributeBuilder))
locbldr211.SetLocalSymInfo("dbuilder")
Dim typ46(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 32)
Typ = GetType(ConstructorInfo)
ReDim Preserve typ46(UBound(typ46) + 1)
typ46(UBound(typ46)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 33)
Typ = GetType(System.Object).MakeArrayType()
ReDim Preserve typ46(UBound(typ46) + 1)
typ46(UBound(typ46)) = Typ
ReadIL.Emit(OpCodes.Newobj, GetType(CustomAttributeBuilder).GetConstructor(typ46))
ReadIL.Emit(OpCodes.Stloc, 34)
ReadIL.MarkSequencePoint(doc11, 160, 1, 160, 100)
Dim typ47(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(AssemblyBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 34)
Typ = GetType(CustomAttributeBuilder)
ReDim Preserve typ47(UBound(typ47) + 1)
typ47(UBound(typ47)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("SetCustomAttribute", typ47))
Typ = Typ03.GetMethod("SetCustomAttribute", typ47).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 161, 1, 161, 100)
ReadIL.Emit(OpCodes.Br, cont145)
ReadIL.MarkLabel(fa145)
ReadIL.Emit(OpCodes.Br, cont145)
ReadIL.MarkLabel(cont145)
ReadIL.MarkSequencePoint(doc11, 164, 1, 164, 100)
ReadIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(System.String)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AsmFile"))
ReadIL.MarkSequencePoint(doc11, 165, 1, 165, 100)
Dim typ48(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmB"))
Typ = GetType(AsmFactory).GetField("AsmB").FieldType
ReDim Preserve typ48(UBound(typ48) + 1)
typ48(UBound(typ48)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Importer).GetMethod("AddAsm", typ48))
Typ = GetType(Importer).GetMethod("AddAsm", typ48).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 166, 1, 166, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc11, 167, 1, 167, 100)
ReadIL.Emit(OpCodes.Br, cont143)
ReadIL.MarkLabel(fa143)
ReadIL.Emit(OpCodes.Br, cont143)
ReadIL.MarkLabel(cont143)
ReadIL.MarkSequencePoint(doc11, 169, 1, 169, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(DebugStmt))
Dim typ49 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ49))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ49).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc11, 170, 1, 170, 100)
Dim typ50(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ50(UBound(typ50) + 1)
typ50(UBound(typ50)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ50))
Typ = Typ03.GetMethod("IsInstanceOfType", typ50).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc11, 172, 1, 172, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa146 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru146 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont146 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru146)
ReadIL.Emit(OpCodes.Br, fa146)
ReadIL.MarkLabel(tru146)
ReadIL.MarkSequencePoint(doc11, 173, 1, 173, 100)
Dim locbldr212 As LocalBuilder = ReadIL.DeclareLocal(GetType(DebugStmt))
locbldr212.SetLocalSymInfo("dbgs")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 35)
ReadIL.MarkSequencePoint(doc11, 174, 1, 174, 100)
ReadIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(DebugStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(DebugStmt).GetField("Flg"))
Typ = GetType(DebugStmt).GetField("Flg").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("DebugFlg"))
ReadIL.MarkSequencePoint(doc11, 175, 1, 175, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc11, 176, 1, 176, 100)
ReadIL.Emit(OpCodes.Br, cont146)
ReadIL.MarkLabel(fa146)
ReadIL.Emit(OpCodes.Br, cont146)
ReadIL.MarkLabel(cont146)
ReadIL.MarkSequencePoint(doc11, 178, 1, 178, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(ClassStmt))
Dim typ51 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ51))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ51).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc11, 179, 1, 179, 100)
Dim typ52(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ52(UBound(typ52) + 1)
typ52(UBound(typ52)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ52))
Typ = Typ03.GetMethod("IsInstanceOfType", typ52).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc11, 181, 1, 181, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa147 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru147 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont147 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru147)
ReadIL.Emit(OpCodes.Br, fa147)
ReadIL.MarkLabel(tru147)
ReadIL.MarkSequencePoint(doc11, 182, 1, 182, 100)
Dim locbldr213 As LocalBuilder = ReadIL.DeclareLocal(GetType(ClassStmt))
locbldr213.SetLocalSymInfo("clss")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 36)
ReadIL.MarkSequencePoint(doc11, 184, 1, 184, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("inClass"))
Typ = GetType(AsmFactory).GetField("inClass").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa148 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru148 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont148 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru148)
ReadIL.Emit(OpCodes.Br, fa148)
ReadIL.MarkLabel(tru148)
ReadIL.MarkSequencePoint(doc11, 185, 1, 185, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("isNested"))
ReadIL.MarkSequencePoint(doc11, 186, 1, 186, 100)
ReadIL.Emit(OpCodes.Br, cont148)
ReadIL.MarkLabel(fa148)
ReadIL.Emit(OpCodes.Br, cont148)
ReadIL.MarkLabel(cont148)
ReadIL.MarkSequencePoint(doc11, 188, 1, 188, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa149 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru149 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont149 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru149)
ReadIL.Emit(OpCodes.Br, fa149)
ReadIL.MarkLabel(tru149)
ReadIL.MarkSequencePoint(doc11, 189, 1, 189, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("inClass"))
ReadIL.MarkSequencePoint(doc11, 190, 1, 190, 100)
ReadIL.Emit(OpCodes.Br, cont149)
ReadIL.MarkLabel(fa149)
ReadIL.Emit(OpCodes.Br, cont149)
ReadIL.MarkLabel(cont149)
ReadIL.MarkSequencePoint(doc11, 192, 1, 192, 100)
Dim locbldr214 As LocalBuilder = ReadIL.DeclareLocal(GetType(Attributes.Attribute).MakeArrayType())
locbldr214.SetLocalSymInfo("attrs")
ReadIL.Emit(OpCodes.Ldloc, 36)
Typ = GetType(ClassStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(ClassStmt).GetField("Attrs"))
Typ = GetType(ClassStmt).GetField("Attrs").FieldType
ReadIL.Emit(OpCodes.Stloc, 37)
ReadIL.MarkSequencePoint(doc11, 193, 1, 193, 100)
Dim locbldr215 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeAttributes))
locbldr215.SetLocalSymInfo("ta")
Dim typ53(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 37)
Typ = GetType(Attributes.Attribute).MakeArrayType()
ReDim Preserve typ53(UBound(typ53) + 1)
typ53(UBound(typ53)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessClassAttrs", typ53))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessClassAttrs", typ53).ReturnType
ReadIL.Emit(OpCodes.Stloc, 38)
ReadIL.MarkSequencePoint(doc11, 194, 1, 194, 100)
Dim locbldr216 As LocalBuilder = ReadIL.DeclareLocal(GetType(Ident))
locbldr216.SetLocalSymInfo("clssnam")
ReadIL.Emit(OpCodes.Ldloc, 36)
Typ = GetType(ClassStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(ClassStmt).GetField("ClassName"))
Typ = GetType(ClassStmt).GetField("ClassName").FieldType
ReadIL.Emit(OpCodes.Stloc, 39)
ReadIL.MarkSequencePoint(doc11, 195, 1, 195, 100)
Dim locbldr217 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.String))
locbldr217.SetLocalSymInfo("clsnamstr")
ReadIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stloc, 40)
ReadIL.MarkSequencePoint(doc11, 196, 1, 196, 100)
Dim locbldr218 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeTok))
locbldr218.SetLocalSymInfo("inhclstok")
ReadIL.Emit(OpCodes.Ldloc, 36)
Typ = GetType(ClassStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(ClassStmt).GetField("InhClass"))
Typ = GetType(ClassStmt).GetField("InhClass").FieldType
ReadIL.Emit(OpCodes.Stloc, 41)
ReadIL.MarkSequencePoint(doc11, 197, 1, 197, 100)
Dim locbldr219 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr219.SetLocalSymInfo("inhtyp")
ReadIL.Emit(OpCodes.Ldnull)
ReadIL.Emit(OpCodes.Stloc, 42)
ReadIL.MarkSequencePoint(doc11, 198, 1, 198, 100)
Dim locbldr220 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr220.SetLocalSymInfo("reft")
ReadIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(TypeTok)
ReadIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("RefTyp"))
Typ = GetType(TypeTok).GetField("RefTyp").FieldType
ReadIL.Emit(OpCodes.Stloc, 43)
ReadIL.MarkSequencePoint(doc11, 199, 1, 199, 100)
Dim locbldr221 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Int32))
locbldr221.SetLocalSymInfo("cmp")
Dim typ54(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(TypeTok)
ReadIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("Value"))
Typ = GetType(TypeTok).GetField("Value").FieldType
ReDim Preserve typ54(UBound(typ54) + 1)
typ54(UBound(typ54)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ReDim Preserve typ54(UBound(typ54) + 1)
typ54(UBound(typ54)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ54))
Typ = GetType(String).GetMethod("Compare", typ54).ReturnType
ReadIL.Emit(OpCodes.Stloc, 44)
ReadIL.MarkSequencePoint(doc11, 201, 1, 201, 100)
ReadIL.Emit(OpCodes.Ldloc, 43)
Typ = GetType(System.Type)
ReadIL.Emit(OpCodes.Ldnull)
Dim fa150 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru150 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont150 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru150)
ReadIL.Emit(OpCodes.Br, fa150)
ReadIL.MarkLabel(tru150)
ReadIL.MarkSequencePoint(doc11, 202, 1, 202, 100)
ReadIL.Emit(OpCodes.Ldloc, 44)
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa151 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru151 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont151 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru151)
ReadIL.Emit(OpCodes.Br, fa151)
ReadIL.MarkLabel(tru151)
ReadIL.MarkSequencePoint(doc11, 203, 1, 203, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(System.Object))
Dim typ55 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ55))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ55).ReturnType
ReadIL.Emit(OpCodes.Stloc, 42)
ReadIL.MarkSequencePoint(doc11, 204, 1, 204, 100)
ReadIL.Emit(OpCodes.Br, cont151)
ReadIL.MarkLabel(fa151)
ReadIL.MarkSequencePoint(doc11, 205, 1, 205, 100)
Dim typ56(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(TypeTok)
ReDim Preserve typ56(UBound(typ56) + 1)
typ56(UBound(typ56)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ56))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ56).ReturnType
ReadIL.Emit(OpCodes.Stloc, 42)
ReadIL.MarkSequencePoint(doc11, 206, 1, 206, 100)
ReadIL.Emit(OpCodes.Br, cont151)
ReadIL.MarkLabel(cont151)
ReadIL.MarkSequencePoint(doc11, 207, 1, 207, 100)
ReadIL.Emit(OpCodes.Br, cont150)
ReadIL.MarkLabel(fa150)
ReadIL.MarkSequencePoint(doc11, 208, 1, 208, 100)
ReadIL.Emit(OpCodes.Ldloc, 43)
Typ = GetType(System.Type)
ReadIL.Emit(OpCodes.Stloc, 42)
ReadIL.MarkSequencePoint(doc11, 209, 1, 209, 100)
ReadIL.Emit(OpCodes.Br, cont150)
ReadIL.MarkLabel(cont150)
ReadIL.MarkSequencePoint(doc11, 212, 1, 212, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa152 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru152 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont152 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru152)
ReadIL.Emit(OpCodes.Br, fa152)
ReadIL.MarkLabel(tru152)
ReadIL.MarkSequencePoint(doc11, 213, 1, 213, 100)
Dim locbldr222 As LocalBuilder = ReadIL.DeclareLocal(GetType(ModuleBuilder))
locbldr222.SetLocalSymInfo("mdlbld")
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("MdlB"))
Typ = GetType(AsmFactory).GetField("MdlB").FieldType
ReadIL.Emit(OpCodes.Stloc, 45)
ReadIL.MarkSequencePoint(doc11, 214, 1, 214, 100)
Dim typ57(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnNS"))
Typ = GetType(AsmFactory).GetField("CurnNS").FieldType
ReDim Preserve typ57(UBound(typ57) + 1)
typ57(UBound(typ57)) = Typ
ReadIL.Emit(OpCodes.Ldstr, ".")
Typ = GetType(System.String)
ReDim Preserve typ57(UBound(typ57) + 1)
typ57(UBound(typ57)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(System.String)
ReDim Preserve typ57(UBound(typ57) + 1)
typ57(UBound(typ57)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ57))
Typ = GetType(String).GetMethod("Concat", typ57).ReturnType
ReadIL.Emit(OpCodes.Stloc, 40)
ReadIL.MarkSequencePoint(doc11, 215, 1, 215, 100)
Dim typ58(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(ModuleBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(System.String)
ReDim Preserve typ58(UBound(typ58) + 1)
typ58(UBound(typ58)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(TypeAttributes)
ReDim Preserve typ58(UBound(typ58) + 1)
typ58(UBound(typ58)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(System.Type)
ReDim Preserve typ58(UBound(typ58) + 1)
typ58(UBound(typ58)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineType", typ58))
Typ = Typ03.GetMethod("DefineType", typ58).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnTypB"))
ReadIL.MarkSequencePoint(doc11, 217, 1, 217, 100)
Dim typ59(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Adding Class: ")
Typ = GetType(System.String)
ReDim Preserve typ59(UBound(typ59) + 1)
typ59(UBound(typ59)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ59))
Typ = GetType(Console).GetMethod("Write", typ59).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 218, 1, 218, 100)
Dim typ60(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(System.String)
ReDim Preserve typ60(UBound(typ60) + 1)
typ60(UBound(typ60)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ60))
Typ = GetType(Console).GetMethod("WriteLine", typ60).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 219, 1, 219, 100)
ReadIL.Emit(OpCodes.Br, cont152)
ReadIL.MarkLabel(fa152)
ReadIL.MarkSequencePoint(doc11, 220, 1, 220, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnTypB2"))
ReadIL.MarkSequencePoint(doc11, 221, 1, 221, 100)
Dim locbldr223 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeBuilder))
locbldr223.SetLocalSymInfo("ctb2")
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB2"))
Typ = GetType(AsmFactory).GetField("CurnTypB2").FieldType
ReadIL.Emit(OpCodes.Stloc, 46)
ReadIL.MarkSequencePoint(doc11, 222, 1, 222, 100)
Dim typ61(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Adding Nested Class: ")
Typ = GetType(System.String)
ReDim Preserve typ61(UBound(typ61) + 1)
typ61(UBound(typ61)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ61))
Typ = GetType(Console).GetMethod("Write", typ61).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 223, 1, 223, 100)
Dim typ62(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(System.String)
ReDim Preserve typ62(UBound(typ62) + 1)
typ62(UBound(typ62)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ62))
Typ = GetType(Console).GetMethod("WriteLine", typ62).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 224, 1, 224, 100)
Dim typ63(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 46)
Typ = GetType(TypeBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(System.String)
ReDim Preserve typ63(UBound(typ63) + 1)
typ63(UBound(typ63)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(TypeAttributes)
ReDim Preserve typ63(UBound(typ63) + 1)
typ63(UBound(typ63)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(System.Type)
ReDim Preserve typ63(UBound(typ63) + 1)
typ63(UBound(typ63)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineNestedType", typ63))
Typ = Typ03.GetMethod("DefineNestedType", typ63).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnTypB"))
ReadIL.MarkSequencePoint(doc11, 225, 1, 225, 100)
ReadIL.Emit(OpCodes.Br, cont152)
ReadIL.MarkLabel(cont152)
ReadIL.MarkSequencePoint(doc11, 227, 1, 227, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc11, 228, 1, 228, 100)
ReadIL.Emit(OpCodes.Br, cont147)
ReadIL.MarkLabel(fa147)
ReadIL.Emit(OpCodes.Br, cont147)
ReadIL.MarkLabel(cont147)
ReadIL.MarkSequencePoint(doc11, 230, 1, 230, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(FieldStmt))
Dim typ64 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ64))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ64).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc11, 231, 1, 231, 100)
Dim typ65(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ65(UBound(typ65) + 1)
typ65(UBound(typ65)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ65))
Typ = Typ03.GetMethod("IsInstanceOfType", typ65).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc11, 233, 1, 233, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa153 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru153 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont153 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru153)
ReadIL.Emit(OpCodes.Br, fa153)
ReadIL.MarkLabel(tru153)
ReadIL.MarkSequencePoint(doc11, 234, 1, 234, 100)
Dim locbldr224 As LocalBuilder = ReadIL.DeclareLocal(GetType(FieldStmt))
locbldr224.SetLocalSymInfo("flss")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 47)
ReadIL.MarkSequencePoint(doc11, 236, 1, 236, 100)
Dim locbldr225 As LocalBuilder = ReadIL.DeclareLocal(GetType(Attributes.Attribute).MakeArrayType())
locbldr225.SetLocalSymInfo("fattrs")
ReadIL.Emit(OpCodes.Ldloc, 47)
Typ = GetType(FieldStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(FieldStmt).GetField("Attrs"))
Typ = GetType(FieldStmt).GetField("Attrs").FieldType
ReadIL.Emit(OpCodes.Stloc, 48)
ReadIL.MarkSequencePoint(doc11, 237, 1, 237, 100)
Dim locbldr226 As LocalBuilder = ReadIL.DeclareLocal(GetType(FieldAttributes))
locbldr226.SetLocalSymInfo("fa")
Dim typ66(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 48)
Typ = GetType(Attributes.Attribute).MakeArrayType()
ReDim Preserve typ66(UBound(typ66) + 1)
typ66(UBound(typ66)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessFieldAttrs", typ66))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessFieldAttrs", typ66).ReturnType
ReadIL.Emit(OpCodes.Stloc, 49)
ReadIL.MarkSequencePoint(doc11, 238, 1, 238, 100)
Dim locbldr227 As LocalBuilder = ReadIL.DeclareLocal(GetType(Ident))
locbldr227.SetLocalSymInfo("flssnam")
ReadIL.Emit(OpCodes.Ldloc, 47)
Typ = GetType(FieldStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(FieldStmt).GetField("FieldName"))
Typ = GetType(FieldStmt).GetField("FieldName").FieldType
ReadIL.Emit(OpCodes.Stloc, 50)
ReadIL.MarkSequencePoint(doc11, 239, 1, 239, 100)
Dim locbldr228 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.String))
locbldr228.SetLocalSymInfo("flsnamstr")
ReadIL.Emit(OpCodes.Ldloc, 50)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stloc, 51)
ReadIL.MarkSequencePoint(doc11, 240, 1, 240, 100)
Dim locbldr229 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeTok))
locbldr229.SetLocalSymInfo("ftyptok")
ReadIL.Emit(OpCodes.Ldloc, 47)
Typ = GetType(FieldStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(FieldStmt).GetField("FieldTyp"))
Typ = GetType(FieldStmt).GetField("FieldTyp").FieldType
ReadIL.Emit(OpCodes.Stloc, 52)
ReadIL.MarkSequencePoint(doc11, 241, 1, 241, 100)
Dim locbldr230 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr230.SetLocalSymInfo("ftyp")
ReadIL.Emit(OpCodes.Ldnull)
ReadIL.Emit(OpCodes.Stloc, 53)
ReadIL.MarkSequencePoint(doc11, 254, 1, 254, 100)
Dim typ67(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(TypeTok)
ReDim Preserve typ67(UBound(typ67) + 1)
typ67(UBound(typ67)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ67))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ67).ReturnType
ReadIL.Emit(OpCodes.Stloc, 53)
ReadIL.MarkSequencePoint(doc11, 256, 1, 256, 100)
Dim locbldr231 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeBuilder))
locbldr231.SetLocalSymInfo("typb2")
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
ReadIL.Emit(OpCodes.Stloc, 54)
ReadIL.MarkSequencePoint(doc11, 257, 1, 257, 100)
Dim typ68(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 54)
Typ = GetType(TypeBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 51)
Typ = GetType(System.String)
ReDim Preserve typ68(UBound(typ68) + 1)
typ68(UBound(typ68)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 53)
Typ = GetType(System.Type)
ReDim Preserve typ68(UBound(typ68) + 1)
typ68(UBound(typ68)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 49)
Typ = GetType(FieldAttributes)
ReDim Preserve typ68(UBound(typ68) + 1)
typ68(UBound(typ68)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineField", typ68))
Typ = Typ03.GetMethod("DefineField", typ68).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnFldB"))
ReadIL.MarkSequencePoint(doc11, 259, 1, 259, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa154 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru154 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont154 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru154)
ReadIL.Emit(OpCodes.Br, fa154)
ReadIL.MarkLabel(tru154)
ReadIL.MarkSequencePoint(doc11, 260, 1, 260, 100)
Dim typ69(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 51)
Typ = GetType(System.String)
ReDim Preserve typ69(UBound(typ69) + 1)
typ69(UBound(typ69)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 53)
Typ = GetType(System.Type)
ReDim Preserve typ69(UBound(typ69) + 1)
typ69(UBound(typ69)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnFldB"))
Typ = GetType(AsmFactory).GetField("CurnFldB").FieldType
ReDim Preserve typ69(UBound(typ69) + 1)
typ69(UBound(typ69)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddFld", typ69))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddFld", typ69).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 261, 1, 261, 100)
ReadIL.Emit(OpCodes.Br, cont154)
ReadIL.MarkLabel(fa154)
ReadIL.MarkSequencePoint(doc11, 262, 1, 262, 100)
Dim typ70(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 51)
Typ = GetType(System.String)
ReDim Preserve typ70(UBound(typ70) + 1)
typ70(UBound(typ70)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 53)
Typ = GetType(System.Type)
ReDim Preserve typ70(UBound(typ70) + 1)
typ70(UBound(typ70)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnFldB"))
Typ = GetType(AsmFactory).GetField("CurnFldB").FieldType
ReDim Preserve typ70(UBound(typ70) + 1)
typ70(UBound(typ70)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddNestedFld", typ70))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddNestedFld", typ70).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 263, 1, 263, 100)
ReadIL.Emit(OpCodes.Br, cont154)
ReadIL.MarkLabel(cont154)
ReadIL.MarkSequencePoint(doc11, 265, 1, 265, 100)
Dim typ71(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Adding Field: ")
Typ = GetType(System.String)
ReDim Preserve typ71(UBound(typ71) + 1)
typ71(UBound(typ71)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ71))
Typ = GetType(Console).GetMethod("Write", typ71).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 266, 1, 266, 100)
Dim typ72(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 51)
Typ = GetType(System.String)
ReDim Preserve typ72(UBound(typ72) + 1)
typ72(UBound(typ72)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ72))
Typ = GetType(Console).GetMethod("WriteLine", typ72).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 268, 1, 268, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc11, 269, 1, 269, 100)
ReadIL.Emit(OpCodes.Br, cont153)
ReadIL.MarkLabel(fa153)
ReadIL.Emit(OpCodes.Br, cont153)
ReadIL.MarkLabel(cont153)
ReadIL.MarkSequencePoint(doc11, 272, 1, 272, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(EndClassStmt))
Dim typ73 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ73))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ73).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc11, 273, 1, 273, 100)
Dim typ74(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ74(UBound(typ74) + 1)
typ74(UBound(typ74)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ74))
Typ = Typ03.GetMethod("IsInstanceOfType", typ74).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc11, 275, 1, 275, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa155 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru155 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont155 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru155)
ReadIL.Emit(OpCodes.Br, fa155)
ReadIL.MarkLabel(tru155)
ReadIL.MarkSequencePoint(doc11, 276, 1, 276, 100)
ReadIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("CreateTyp", Type.EmptyTypes))
Typ = GetType(AsmFactory).GetMethod("CreateTyp", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 277, 1, 277, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa156 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru156 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont156 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru156)
ReadIL.Emit(OpCodes.Br, fa156)
ReadIL.MarkLabel(tru156)
ReadIL.MarkSequencePoint(doc11, 278, 1, 278, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("inClass"))
ReadIL.MarkSequencePoint(doc11, 279, 1, 279, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetMet", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetMet", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 280, 1, 280, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetCtor", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetCtor", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 281, 1, 281, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetFld", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetFld", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 282, 1, 282, 100)
ReadIL.Emit(OpCodes.Br, cont156)
ReadIL.MarkLabel(fa156)
ReadIL.Emit(OpCodes.Br, cont156)
ReadIL.MarkLabel(cont156)
ReadIL.MarkSequencePoint(doc11, 283, 1, 283, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa157 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru157 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont157 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru157)
ReadIL.Emit(OpCodes.Br, fa157)
ReadIL.MarkLabel(tru157)
ReadIL.MarkSequencePoint(doc11, 284, 1, 284, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB2"))
Typ = GetType(AsmFactory).GetField("CurnTypB2").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnTypB"))
ReadIL.MarkSequencePoint(doc11, 285, 1, 285, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("isNested"))
ReadIL.MarkSequencePoint(doc11, 286, 1, 286, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetNestedMet", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetNestedMet", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 287, 1, 287, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetNestedCtor", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetNestedCtor", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 288, 1, 288, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetNestedFld", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetNestedFld", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 289, 1, 289, 100)
ReadIL.Emit(OpCodes.Br, cont157)
ReadIL.MarkLabel(fa157)
ReadIL.Emit(OpCodes.Br, cont157)
ReadIL.MarkLabel(cont157)
ReadIL.MarkSequencePoint(doc11, 290, 1, 290, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc11, 291, 1, 291, 100)
ReadIL.Emit(OpCodes.Br, cont155)
ReadIL.MarkLabel(fa155)
ReadIL.Emit(OpCodes.Br, cont155)
ReadIL.MarkLabel(cont155)
ReadIL.MarkSequencePoint(doc11, 293, 1, 293, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(MethodStmt))
Dim typ75 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ75))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ75).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc11, 294, 1, 294, 100)
Dim typ76(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ76(UBound(typ76) + 1)
typ76(UBound(typ76)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ76))
Typ = Typ03.GetMethod("IsInstanceOfType", typ76).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc11, 296, 1, 296, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa158 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru158 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont158 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru158)
ReadIL.Emit(OpCodes.Br, fa158)
ReadIL.MarkLabel(tru158)
ReadIL.MarkSequencePoint(doc11, 297, 1, 297, 100)
Dim locbldr232 As LocalBuilder = ReadIL.DeclareLocal(GetType(MethodStmt))
locbldr232.SetLocalSymInfo("mtss")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 55)
ReadIL.MarkSequencePoint(doc11, 299, 1, 299, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(ILEmitter).GetField("StaticFlg"))
ReadIL.MarkSequencePoint(doc11, 300, 1, 300, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetVar", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetVar", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 301, 1, 301, 100)
Dim locbldr233 As LocalBuilder = ReadIL.DeclareLocal(GetType(Attributes.Attribute).MakeArrayType())
locbldr233.SetLocalSymInfo("mattrs")
ReadIL.Emit(OpCodes.Ldloc, 55)
Typ = GetType(MethodStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(MethodStmt).GetField("Attrs"))
Typ = GetType(MethodStmt).GetField("Attrs").FieldType
ReadIL.Emit(OpCodes.Stloc, 56)
ReadIL.MarkSequencePoint(doc11, 302, 1, 302, 100)
Dim locbldr234 As LocalBuilder = ReadIL.DeclareLocal(GetType(MethodAttributes))
locbldr234.SetLocalSymInfo("ma")
Dim typ77(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 56)
Typ = GetType(Attributes.Attribute).MakeArrayType()
ReDim Preserve typ77(UBound(typ77) + 1)
typ77(UBound(typ77)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessMethodAttrs", typ77))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessMethodAttrs", typ77).ReturnType
ReadIL.Emit(OpCodes.Stloc, 57)
ReadIL.MarkSequencePoint(doc11, 303, 1, 303, 100)
Dim locbldr235 As LocalBuilder = ReadIL.DeclareLocal(GetType(Ident))
locbldr235.SetLocalSymInfo("mtssnam")
ReadIL.Emit(OpCodes.Ldloc, 55)
Typ = GetType(MethodStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(MethodStmt).GetField("MethodName"))
Typ = GetType(MethodStmt).GetField("MethodName").FieldType
ReadIL.Emit(OpCodes.Stloc, 58)
ReadIL.MarkSequencePoint(doc11, 304, 1, 304, 100)
Dim locbldr236 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.String))
locbldr236.SetLocalSymInfo("mtssnamstr")
ReadIL.Emit(OpCodes.Ldloc, 58)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stloc, 59)
ReadIL.MarkSequencePoint(doc11, 305, 1, 305, 100)
Dim locbldr237 As LocalBuilder = ReadIL.DeclareLocal(GetType(Expr).MakeArrayType())
locbldr237.SetLocalSymInfo("paramarr")
ReadIL.Emit(OpCodes.Ldloc, 55)
Typ = GetType(MethodStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(MethodStmt).GetField("Params"))
Typ = GetType(MethodStmt).GetField("Params").FieldType
ReadIL.Emit(OpCodes.Stloc, 60)
ReadIL.MarkSequencePoint(doc11, 306, 1, 306, 100)
Dim locbldr238 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Int32))
locbldr238.SetLocalSymInfo("paramlen")
ReadIL.Emit(OpCodes.Ldloc, 60)
Typ = GetType(Expr).MakeArrayType()
ReadIL.Emit(OpCodes.Ldlen)
ReadIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Stloc, 61)
ReadIL.MarkSequencePoint(doc11, 307, 1, 307, 100)
Dim locbldr239 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeTok))
locbldr239.SetLocalSymInfo("rettyptok")
ReadIL.Emit(OpCodes.Ldloc, 55)
Typ = GetType(MethodStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(MethodStmt).GetField("RetTyp"))
Typ = GetType(MethodStmt).GetField("RetTyp").FieldType
ReadIL.Emit(OpCodes.Stloc, 62)
ReadIL.MarkSequencePoint(doc11, 308, 1, 308, 100)
Dim locbldr240 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr240.SetLocalSymInfo("rettyp")
ReadIL.Emit(OpCodes.Ldnull)
ReadIL.Emit(OpCodes.Stloc, 63)
ReadIL.MarkSequencePoint(doc11, 325, 1, 325, 100)
Dim typ78(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 62)
Typ = GetType(TypeTok)
ReDim Preserve typ78(UBound(typ78) + 1)
typ78(UBound(typ78)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ78))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ78).ReturnType
ReadIL.Emit(OpCodes.Stloc, 63)
ReadIL.MarkSequencePoint(doc11, 327, 1, 327, 100)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Type))
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("TypArr"))
ReadIL.MarkSequencePoint(doc11, 329, 1, 329, 100)
ReadIL.Emit(OpCodes.Ldloc, 61)
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa159 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru159 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont159 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru159)
ReadIL.Emit(OpCodes.Br, fa159)
ReadIL.MarkLabel(tru159)
ReadIL.MarkSequencePoint(doc11, 330, 1, 330, 100)
ReadIL.Emit(OpCodes.Br, cont159)
ReadIL.MarkLabel(fa159)
ReadIL.MarkSequencePoint(doc11, 331, 1, 331, 100)
Dim typ79(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 60)
Typ = GetType(Expr).MakeArrayType()
ReDim Preserve typ79(UBound(typ79) + 1)
typ79(UBound(typ79)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessParams", typ79))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessParams", typ79).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 332, 1, 332, 100)
ReadIL.Emit(OpCodes.Br, cont159)
ReadIL.MarkLabel(cont159)
ReadIL.MarkSequencePoint(doc11, 335, 1, 335, 100)
Dim locbldr241 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeBuilder))
locbldr241.SetLocalSymInfo("typb")
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
ReadIL.Emit(OpCodes.Stloc, 64)
ReadIL.MarkSequencePoint(doc11, 336, 1, 336, 100)
Dim locbldr242 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Boolean))
locbldr242.SetLocalSymInfo("isconstr")
Dim typ80(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 59)
Typ = GetType(System.String)
ReDim Preserve typ80(UBound(typ80) + 1)
typ80(UBound(typ80)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "ctor*")
Typ = GetType(System.String)
ReDim Preserve typ80(UBound(typ80) + 1)
typ80(UBound(typ80)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ParseUtils).GetMethod("LikeOP", typ80))
Typ = GetType(ParseUtils).GetMethod("LikeOP", typ80).ReturnType
ReadIL.Emit(OpCodes.Stloc, 65)
ReadIL.MarkSequencePoint(doc11, 337, 1, 337, 100)
ReadIL.Emit(OpCodes.Ldloc, 65)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa160 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru160 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont160 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru160)
ReadIL.Emit(OpCodes.Br, fa160)
ReadIL.MarkLabel(tru160)
ReadIL.MarkSequencePoint(doc11, 338, 1, 338, 100)
Dim typ81(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 64)
Typ = GetType(TypeBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 59)
Typ = GetType(System.String)
ReDim Preserve typ81(UBound(typ81) + 1)
typ81(UBound(typ81)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 57)
Typ = GetType(MethodAttributes)
ReDim Preserve typ81(UBound(typ81) + 1)
typ81(UBound(typ81)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 63)
Typ = GetType(System.Type)
ReDim Preserve typ81(UBound(typ81) + 1)
typ81(UBound(typ81)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ReDim Preserve typ81(UBound(typ81) + 1)
typ81(UBound(typ81)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineMethod", typ81))
Typ = Typ03.GetMethod("DefineMethod", typ81).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnMetB"))
ReadIL.MarkSequencePoint(doc11, 339, 1, 339, 100)
ReadIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("InitMtd", Type.EmptyTypes))
Typ = GetType(AsmFactory).GetMethod("InitMtd", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 340, 1, 340, 100)
Dim typ82(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Adding Method: ")
Typ = GetType(System.String)
ReDim Preserve typ82(UBound(typ82) + 1)
typ82(UBound(typ82)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ82))
Typ = GetType(Console).GetMethod("Write", typ82).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 341, 1, 341, 100)
Dim typ83(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 59)
Typ = GetType(System.String)
ReDim Preserve typ83(UBound(typ83) + 1)
typ83(UBound(typ83)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ83))
Typ = GetType(Console).GetMethod("WriteLine", typ83).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 343, 1, 343, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa161 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru161 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont161 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru161)
ReadIL.Emit(OpCodes.Br, fa161)
ReadIL.MarkLabel(tru161)
ReadIL.MarkSequencePoint(doc11, 344, 1, 344, 100)
Dim typ84(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 59)
Typ = GetType(System.String)
ReDim Preserve typ84(UBound(typ84) + 1)
typ84(UBound(typ84)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 63)
Typ = GetType(System.Type)
ReDim Preserve typ84(UBound(typ84) + 1)
typ84(UBound(typ84)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ReDim Preserve typ84(UBound(typ84) + 1)
typ84(UBound(typ84)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnMetB"))
Typ = GetType(AsmFactory).GetField("CurnMetB").FieldType
ReDim Preserve typ84(UBound(typ84) + 1)
typ84(UBound(typ84)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddMet", typ84))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddMet", typ84).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 345, 1, 345, 100)
ReadIL.Emit(OpCodes.Br, cont161)
ReadIL.MarkLabel(fa161)
ReadIL.MarkSequencePoint(doc11, 346, 1, 346, 100)
Dim typ85(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 59)
Typ = GetType(System.String)
ReDim Preserve typ85(UBound(typ85) + 1)
typ85(UBound(typ85)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 63)
Typ = GetType(System.Type)
ReDim Preserve typ85(UBound(typ85) + 1)
typ85(UBound(typ85)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ReDim Preserve typ85(UBound(typ85) + 1)
typ85(UBound(typ85)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnMetB"))
Typ = GetType(AsmFactory).GetField("CurnMetB").FieldType
ReDim Preserve typ85(UBound(typ85) + 1)
typ85(UBound(typ85)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddNestedMet", typ85))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddNestedMet", typ85).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 347, 1, 347, 100)
ReadIL.Emit(OpCodes.Br, cont161)
ReadIL.MarkLabel(cont161)
ReadIL.MarkSequencePoint(doc11, 349, 1, 349, 100)
ReadIL.Emit(OpCodes.Br, cont160)
ReadIL.MarkLabel(fa160)
ReadIL.MarkSequencePoint(doc11, 350, 1, 350, 100)
Dim locbldr243 As LocalBuilder = ReadIL.DeclareLocal(GetType(CallingConventions))
locbldr243.SetLocalSymInfo("stdcallconv")
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Stloc, 66)
ReadIL.MarkSequencePoint(doc11, 351, 1, 351, 100)
Dim typ86(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 64)
Typ = GetType(TypeBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 57)
Typ = GetType(MethodAttributes)
ReDim Preserve typ86(UBound(typ86) + 1)
typ86(UBound(typ86)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 66)
Typ = GetType(CallingConventions)
ReDim Preserve typ86(UBound(typ86) + 1)
typ86(UBound(typ86)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ReDim Preserve typ86(UBound(typ86) + 1)
typ86(UBound(typ86)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineConstructor", typ86))
Typ = Typ03.GetMethod("DefineConstructor", typ86).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnConB"))
ReadIL.MarkSequencePoint(doc11, 352, 1, 352, 100)
ReadIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("InitConstr", Type.EmptyTypes))
Typ = GetType(AsmFactory).GetMethod("InitConstr", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 354, 1, 354, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa162 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru162 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont162 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru162)
ReadIL.Emit(OpCodes.Br, fa162)
ReadIL.MarkLabel(tru162)
ReadIL.MarkSequencePoint(doc11, 355, 1, 355, 100)
Dim typ87(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ReDim Preserve typ87(UBound(typ87) + 1)
typ87(UBound(typ87)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnConB"))
Typ = GetType(AsmFactory).GetField("CurnConB").FieldType
ReDim Preserve typ87(UBound(typ87) + 1)
typ87(UBound(typ87)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddCtor", typ87))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddCtor", typ87).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 356, 1, 356, 100)
ReadIL.Emit(OpCodes.Br, cont162)
ReadIL.MarkLabel(fa162)
ReadIL.MarkSequencePoint(doc11, 357, 1, 357, 100)
Dim typ88(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ReDim Preserve typ88(UBound(typ88) + 1)
typ88(UBound(typ88)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnConB"))
Typ = GetType(AsmFactory).GetField("CurnConB").FieldType
ReDim Preserve typ88(UBound(typ88) + 1)
typ88(UBound(typ88)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddNestedCtor", typ88))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddNestedCtor", typ88).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 358, 1, 358, 100)
ReadIL.Emit(OpCodes.Br, cont162)
ReadIL.MarkLabel(cont162)
ReadIL.MarkSequencePoint(doc11, 361, 1, 361, 100)
Dim typ89(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Adding Constructor: ")
Typ = GetType(System.String)
ReDim Preserve typ89(UBound(typ89) + 1)
typ89(UBound(typ89)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ89))
Typ = GetType(Console).GetMethod("Write", typ89).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 362, 1, 362, 100)
Dim typ90(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 59)
Typ = GetType(System.String)
ReDim Preserve typ90(UBound(typ90) + 1)
typ90(UBound(typ90)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ90))
Typ = GetType(Console).GetMethod("WriteLine", typ90).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 363, 1, 363, 100)
ReadIL.Emit(OpCodes.Br, cont160)
ReadIL.MarkLabel(cont160)
ReadIL.MarkSequencePoint(doc11, 366, 1, 366, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("InMethodFlg"))
ReadIL.MarkSequencePoint(doc11, 367, 1, 367, 100)
ReadIL.Emit(OpCodes.Ldloc, 59)
Typ = GetType(System.String)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnMetName"))
ReadIL.MarkSequencePoint(doc11, 369, 1, 369, 100)
ReadIL.Emit(OpCodes.Ldloc, 61)
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa163 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru163 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont163 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru163)
ReadIL.Emit(OpCodes.Br, fa163)
ReadIL.MarkLabel(tru163)
ReadIL.MarkSequencePoint(doc11, 370, 1, 370, 100)
ReadIL.Emit(OpCodes.Br, cont163)
ReadIL.MarkLabel(fa163)
ReadIL.MarkSequencePoint(doc11, 371, 1, 371, 100)
ReadIL.Emit(OpCodes.Ldloc, 65)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa164 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru164 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont164 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru164)
ReadIL.Emit(OpCodes.Br, fa164)
ReadIL.MarkLabel(tru164)
ReadIL.MarkSequencePoint(doc11, 372, 1, 372, 100)
Dim typ91(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 60)
Typ = GetType(Expr).MakeArrayType()
ReDim Preserve typ91(UBound(typ91) + 1)
typ91(UBound(typ91)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("PostProcessParams", typ91))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("PostProcessParams", typ91).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 373, 1, 373, 100)
ReadIL.Emit(OpCodes.Br, cont164)
ReadIL.MarkLabel(fa164)
ReadIL.MarkSequencePoint(doc11, 374, 1, 374, 100)
Dim typ92(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 60)
Typ = GetType(Expr).MakeArrayType()
ReDim Preserve typ92(UBound(typ92) + 1)
typ92(UBound(typ92)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("PostProcessParamsConstr", typ92))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("PostProcessParamsConstr", typ92).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 375, 1, 375, 100)
ReadIL.Emit(OpCodes.Br, cont164)
ReadIL.MarkLabel(cont164)
ReadIL.MarkSequencePoint(doc11, 376, 1, 376, 100)
ReadIL.Emit(OpCodes.Br, cont163)
ReadIL.MarkLabel(cont163)
ReadIL.MarkSequencePoint(doc11, 378, 1, 378, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc11, 379, 1, 379, 100)
ReadIL.Emit(OpCodes.Br, cont158)
ReadIL.MarkLabel(fa158)
ReadIL.Emit(OpCodes.Br, cont158)
ReadIL.MarkLabel(cont158)
ReadIL.MarkSequencePoint(doc11, 381, 1, 381, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(EndMethodStmt))
Dim typ93 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ93))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ93).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc11, 382, 1, 382, 100)
Dim typ94(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ94(UBound(typ94) + 1)
typ94(UBound(typ94)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ94))
Typ = Typ03.GetMethod("IsInstanceOfType", typ94).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc11, 384, 1, 384, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa165 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru165 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont165 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru165)
ReadIL.Emit(OpCodes.Br, fa165)
ReadIL.MarkLabel(tru165)
ReadIL.MarkSequencePoint(doc11, 385, 1, 385, 100)
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitRet", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitRet", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 386, 1, 386, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("InMethodFlg"))
ReadIL.MarkSequencePoint(doc11, 387, 1, 387, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmB"))
Typ = GetType(AsmFactory).GetField("AsmB").FieldType
ReadIL.Emit(OpCodes.Stloc, 25)
ReadIL.MarkSequencePoint(doc11, 388, 1, 388, 100)
Dim locbldr244 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Int32))
locbldr244.SetLocalSymInfo("mnamcomp")
Dim typ95(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnMetName"))
Typ = GetType(AsmFactory).GetField("CurnMetName").FieldType
ReDim Preserve typ95(UBound(typ95) + 1)
typ95(UBound(typ95)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "main")
Typ = GetType(System.String)
ReDim Preserve typ95(UBound(typ95) + 1)
typ95(UBound(typ95)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ95))
Typ = GetType(String).GetMethod("Compare", typ95).ReturnType
ReadIL.Emit(OpCodes.Stloc, 67)
ReadIL.MarkSequencePoint(doc11, 389, 1, 389, 100)
Dim locbldr245 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Int32))
locbldr245.SetLocalSymInfo("amodecomp")
Dim typ96(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmMode"))
Typ = GetType(AsmFactory).GetField("AsmMode").FieldType
ReDim Preserve typ96(UBound(typ96) + 1)
typ96(UBound(typ96)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "exe")
Typ = GetType(System.String)
ReDim Preserve typ96(UBound(typ96) + 1)
typ96(UBound(typ96)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ96))
Typ = GetType(String).GetMethod("Compare", typ96).ReturnType
ReadIL.Emit(OpCodes.Stloc, 68)
ReadIL.MarkSequencePoint(doc11, 390, 1, 390, 100)
ReadIL.Emit(OpCodes.Ldloc, 67)
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa166 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru166 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont166 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru166)
ReadIL.Emit(OpCodes.Br, fa166)
ReadIL.MarkLabel(tru166)
ReadIL.MarkSequencePoint(doc11, 391, 1, 391, 100)
ReadIL.Emit(OpCodes.Ldloc, 68)
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa167 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru167 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont167 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru167)
ReadIL.Emit(OpCodes.Br, fa167)
ReadIL.MarkLabel(tru167)
ReadIL.MarkSequencePoint(doc11, 392, 1, 392, 100)
Dim typ97(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(AssemblyBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("Met"))
Typ = GetType(ILEmitter).GetField("Met").FieldType
ReDim Preserve typ97(UBound(typ97) + 1)
typ97(UBound(typ97)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("SetEntryPoint", typ97))
Typ = Typ03.GetMethod("SetEntryPoint", typ97).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 393, 1, 393, 100)
ReadIL.Emit(OpCodes.Br, cont167)
ReadIL.MarkLabel(fa167)
ReadIL.Emit(OpCodes.Br, cont167)
ReadIL.MarkLabel(cont167)
ReadIL.MarkSequencePoint(doc11, 394, 1, 394, 100)
ReadIL.Emit(OpCodes.Br, cont166)
ReadIL.MarkLabel(fa166)
ReadIL.Emit(OpCodes.Br, cont166)
ReadIL.MarkLabel(cont166)
ReadIL.MarkSequencePoint(doc11, 395, 1, 395, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc11, 396, 1, 396, 100)
ReadIL.Emit(OpCodes.Br, cont165)
ReadIL.MarkLabel(fa165)
ReadIL.Emit(OpCodes.Br, cont165)
ReadIL.MarkLabel(cont165)
ReadIL.MarkSequencePoint(doc11, 398, 1, 398, 100)
Dim locbldr246 As LocalBuilder = ReadIL.DeclareLocal(GetType(Ident))
locbldr246.SetLocalSymInfo("vnam")
ReadIL.MarkSequencePoint(doc11, 399, 1, 399, 100)
Dim locbldr247 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeTok))
locbldr247.SetLocalSymInfo("vtyptok")
ReadIL.MarkSequencePoint(doc11, 400, 1, 400, 100)
Dim locbldr248 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr248.SetLocalSymInfo("vtyp")
ReadIL.Emit(OpCodes.Ldnull)
ReadIL.Emit(OpCodes.Stloc, 71)
ReadIL.MarkSequencePoint(doc11, 401, 1, 401, 100)
Dim locbldr249 As LocalBuilder = ReadIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator"))
locbldr249.SetLocalSymInfo("eval")
ReadIL.Emit(OpCodes.Ldnull)
ReadIL.Emit(OpCodes.Stloc, 72)
ReadIL.MarkSequencePoint(doc11, 404, 1, 404, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(VarStmt))
Dim typ98 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ98))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ98).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc11, 405, 1, 405, 100)
Dim typ99(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ99(UBound(typ99) + 1)
typ99(UBound(typ99)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ99))
Typ = Typ03.GetMethod("IsInstanceOfType", typ99).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc11, 407, 1, 407, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa168 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru168 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont168 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru168)
ReadIL.Emit(OpCodes.Br, fa168)
ReadIL.MarkLabel(tru168)
ReadIL.MarkSequencePoint(doc11, 408, 1, 408, 100)
Dim locbldr250 As LocalBuilder = ReadIL.DeclareLocal(GetType(VarStmt))
locbldr250.SetLocalSymInfo("curv")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 73)
ReadIL.MarkSequencePoint(doc11, 409, 1, 409, 100)
ReadIL.Emit(OpCodes.Ldloc, 73)
Typ = GetType(VarStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(VarStmt).GetField("VarName"))
Typ = GetType(VarStmt).GetField("VarName").FieldType
ReadIL.Emit(OpCodes.Stloc, 69)
ReadIL.MarkSequencePoint(doc11, 411, 1, 411, 100)
ReadIL.Emit(OpCodes.Ldloc, 73)
Typ = GetType(VarStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(VarStmt).GetField("VarTyp"))
Typ = GetType(VarStmt).GetField("VarTyp").FieldType
ReadIL.Emit(OpCodes.Stloc, 70)
ReadIL.MarkSequencePoint(doc11, 424, 1, 424, 100)
Dim typ100(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 70)
Typ = GetType(TypeTok)
ReDim Preserve typ100(UBound(typ100) + 1)
typ100(UBound(typ100)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ100))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ100).ReturnType
ReadIL.Emit(OpCodes.Stloc, 71)
ReadIL.MarkSequencePoint(doc11, 426, 1, 426, 100)
Dim typ101(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 69)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ101(UBound(typ101) + 1)
typ101(UBound(typ101)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 71)
Typ = GetType(System.Type)
ReDim Preserve typ101(UBound(typ101) + 1)
typ101(UBound(typ101)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("DeclVar", typ101))
Typ = GetType(ILEmitter).GetMethod("DeclVar", typ101).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 427, 1, 427, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("LocInd"))
Typ = GetType(ILEmitter).GetField("LocInd").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Add)
ReadIL.Emit(OpCodes.Stsfld, GetType(ILEmitter).GetField("LocInd"))
ReadIL.MarkSequencePoint(doc11, 428, 1, 428, 100)
Dim typ102(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 69)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ102(UBound(typ102) + 1)
typ102(UBound(typ102)) = Typ
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ102(UBound(typ102) + 1)
typ102(UBound(typ102)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("LocInd"))
Typ = GetType(ILEmitter).GetField("LocInd").FieldType
ReDim Preserve typ102(UBound(typ102) + 1)
typ102(UBound(typ102)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 71)
Typ = GetType(System.Type)
ReDim Preserve typ102(UBound(typ102) + 1)
typ102(UBound(typ102)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddVar", typ102))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddVar", typ102).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 430, 1, 430, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc11, 431, 1, 431, 100)
ReadIL.Emit(OpCodes.Br, cont168)
ReadIL.MarkLabel(fa168)
ReadIL.Emit(OpCodes.Br, cont168)
ReadIL.MarkLabel(cont168)
ReadIL.MarkSequencePoint(doc11, 433, 1, 433, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(VarAsgnStmt))
Dim typ103 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ103))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ103).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc11, 434, 1, 434, 100)
Dim typ104(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ104(UBound(typ104) + 1)
typ104(UBound(typ104)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ104))
Typ = Typ03.GetMethod("IsInstanceOfType", typ104).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc11, 436, 1, 436, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa169 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru169 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont169 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru169)
ReadIL.Emit(OpCodes.Br, fa169)
ReadIL.MarkLabel(tru169)
ReadIL.MarkSequencePoint(doc11, 437, 1, 437, 100)
Dim locbldr251 As LocalBuilder = ReadIL.DeclareLocal(GetType(VarAsgnStmt))
locbldr251.SetLocalSymInfo("curva")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 74)
ReadIL.MarkSequencePoint(doc11, 438, 1, 438, 100)
ReadIL.Emit(OpCodes.Ldloc, 74)
Typ = GetType(VarAsgnStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(VarAsgnStmt).GetField("VarName"))
Typ = GetType(VarAsgnStmt).GetField("VarName").FieldType
ReadIL.Emit(OpCodes.Stloc, 69)
ReadIL.MarkSequencePoint(doc11, 440, 1, 440, 100)
ReadIL.Emit(OpCodes.Ldloc, 74)
Typ = GetType(VarAsgnStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(VarAsgnStmt).GetField("VarTyp"))
Typ = GetType(VarAsgnStmt).GetField("VarTyp").FieldType
ReadIL.Emit(OpCodes.Stloc, 70)
ReadIL.MarkSequencePoint(doc11, 453, 1, 453, 100)
Dim typ105(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 70)
Typ = GetType(TypeTok)
ReDim Preserve typ105(UBound(typ105) + 1)
typ105(UBound(typ105)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ105))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ105).ReturnType
ReadIL.Emit(OpCodes.Stloc, 71)
ReadIL.MarkSequencePoint(doc11, 455, 1, 455, 100)
Dim typ106(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 69)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ106(UBound(typ106) + 1)
typ106(UBound(typ106)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 71)
Typ = GetType(System.Type)
ReDim Preserve typ106(UBound(typ106) + 1)
typ106(UBound(typ106)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("DeclVar", typ106))
Typ = GetType(ILEmitter).GetMethod("DeclVar", typ106).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 456, 1, 456, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("LocInd"))
Typ = GetType(ILEmitter).GetField("LocInd").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Add)
ReadIL.Emit(OpCodes.Stsfld, GetType(ILEmitter).GetField("LocInd"))
ReadIL.MarkSequencePoint(doc11, 457, 1, 457, 100)
Dim typ107(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 69)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ107(UBound(typ107) + 1)
typ107(UBound(typ107)) = Typ
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ107(UBound(typ107) + 1)
typ107(UBound(typ107)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("LocInd"))
Typ = GetType(ILEmitter).GetField("LocInd").FieldType
ReDim Preserve typ107(UBound(typ107) + 1)
typ107(UBound(typ107)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 71)
Typ = GetType(System.Type)
ReDim Preserve typ107(UBound(typ107) + 1)
typ107(UBound(typ107)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddVar", typ107))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddVar", typ107).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 458, 1, 458, 100)
ReadIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator").GetConstructor(Type.EmptyTypes))
ReadIL.Emit(OpCodes.Stloc, 72)
ReadIL.MarkSequencePoint(doc11, 459, 1, 459, 100)
Dim typ108(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 72)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator")
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 74)
Typ = GetType(VarAsgnStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(VarAsgnStmt).GetField("RExpr"))
Typ = GetType(VarAsgnStmt).GetField("RExpr").FieldType
ReDim Preserve typ108(UBound(typ108) + 1)
typ108(UBound(typ108)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Evaluate", typ108))
Typ = Typ03.GetMethod("Evaluate", typ108).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 461, 1, 461, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc11, 462, 1, 462, 100)
ReadIL.Emit(OpCodes.Br, cont169)
ReadIL.MarkLabel(fa169)
ReadIL.Emit(OpCodes.Br, cont169)
ReadIL.MarkLabel(cont169)
ReadIL.MarkSequencePoint(doc11, 464, 1, 464, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(AssignStmt))
Dim typ109 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ109))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ109).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc11, 465, 1, 465, 100)
Dim typ110(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ110(UBound(typ110) + 1)
typ110(UBound(typ110)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ110))
Typ = Typ03.GetMethod("IsInstanceOfType", typ110).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc11, 467, 1, 467, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa170 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru170 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont170 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru170)
ReadIL.Emit(OpCodes.Br, fa170)
ReadIL.MarkLabel(tru170)
ReadIL.MarkSequencePoint(doc11, 468, 1, 468, 100)
Dim locbldr252 As LocalBuilder = ReadIL.DeclareLocal(GetType(AssignStmt))
locbldr252.SetLocalSymInfo("asgnstm")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 75)
ReadIL.MarkSequencePoint(doc11, 469, 1, 469, 100)
ReadIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator").GetConstructor(Type.EmptyTypes))
ReadIL.Emit(OpCodes.Stloc, 72)
ReadIL.MarkSequencePoint(doc11, 470, 1, 470, 100)
Dim typ111(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 72)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator")
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 75)
Typ = GetType(AssignStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(AssignStmt).GetField("RExp"))
Typ = GetType(AssignStmt).GetField("RExp").FieldType
ReDim Preserve typ111(UBound(typ111) + 1)
typ111(UBound(typ111)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Evaluate", typ111))
Typ = Typ03.GetMethod("Evaluate", typ111).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc11, 472, 1, 472, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc11, 473, 1, 473, 100)
ReadIL.Emit(OpCodes.Br, cont170)
ReadIL.MarkLabel(fa170)
ReadIL.Emit(OpCodes.Br, cont170)
ReadIL.MarkLabel(cont170)
ReadIL.MarkSequencePoint(doc11, 475, 1, 475, 100)
ReadIL.MarkLabel(label0)
ReadIL.MarkSequencePoint(doc11, 477, 1, 477, 100)
ReadIL.Emit(OpCodes.Ret)
StmtReader.CreateType()
End Sub


Dim doc12 As ISymbolDocumentWriter

Sub CodeGenerator()
Dim CodeGenerator As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "CodeGenerator", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(StmtSet)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
Dim EmitMSIL As MethodBuilder = CodeGenerator.DefineMethod("EmitMSIL", MethodAttributes.Public, GetType(System.Void), typ0)
Dim EmitMSILIL As ILGenerator = EmitMSIL.GetILGenerator()
Dim EmitMSILparam01 As ParameterBuilder = EmitMSIL.DefineParameter(1, ParameterAttributes.None, "stmts")
Dim EmitMSILparam02 As ParameterBuilder = EmitMSIL.DefineParameter(2, ParameterAttributes.None, "fpath")
EmitMSILIL.MarkSequencePoint(doc12, 13, 1, 13, 100)
Dim locbldr253 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(System.Int32))
locbldr253.SetLocalSymInfo("i")
EmitMSILIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Stloc, 0)
EmitMSILIL.MarkSequencePoint(doc12, 14, 1, 14, 100)
Dim locbldr254 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(System.Int32))
locbldr254.SetLocalSymInfo("len")
EmitMSILIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(StmtSet)
EmitMSILIL.Emit(OpCodes.Ldfld, GetType(StmtSet).GetField("Stmts"))
Typ = GetType(StmtSet).GetField("Stmts").FieldType
EmitMSILIL.Emit(OpCodes.Ldlen)
EmitMSILIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Sub)
EmitMSILIL.Emit(OpCodes.Stloc, 1)
EmitMSILIL.MarkSequencePoint(doc12, 15, 1, 15, 100)
Dim locbldr255 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(Stmt))
locbldr255.SetLocalSymInfo("stm")
EmitMSILIL.Emit(OpCodes.Ldnull)
EmitMSILIL.Emit(OpCodes.Stloc, 2)
EmitMSILIL.MarkSequencePoint(doc12, 16, 1, 16, 100)
Dim locbldr256 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(System.Type))
locbldr256.SetLocalSymInfo("typ")
EmitMSILIL.MarkSequencePoint(doc12, 17, 1, 17, 100)
Dim locbldr257 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(System.Boolean))
locbldr257.SetLocalSymInfo("b")
EmitMSILIL.MarkSequencePoint(doc12, 19, 1, 19, 100)
Dim label0 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
EmitMSILIL.MarkSequencePoint(doc12, 20, 1, 20, 100)
Dim label1 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
EmitMSILIL.MarkSequencePoint(doc12, 22, 1, 22, 100)
EmitMSILIL.MarkLabel(label0)
EmitMSILIL.MarkSequencePoint(doc12, 24, 1, 24, 100)
EmitMSILIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Add)
EmitMSILIL.Emit(OpCodes.Stloc, 0)
EmitMSILIL.MarkSequencePoint(doc12, 26, 1, 26, 100)
EmitMSILIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(StmtSet)
EmitMSILIL.Emit(OpCodes.Ldfld, GetType(StmtSet).GetField("Stmts"))
Typ = GetType(StmtSet).GetField("Stmts").FieldType
Typ02 = Typ
EmitMSILIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitMSILIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
EmitMSILIL.Emit(OpCodes.Stloc, 2)
EmitMSILIL.MarkSequencePoint(doc12, 27, 1, 27, 100)
EmitMSILIL.Emit(OpCodes.Ldtoken, GetType(IncludeStmt))
Dim typ1 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitMSILIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ1))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ1).ReturnType
EmitMSILIL.Emit(OpCodes.Stloc, 3)
EmitMSILIL.MarkSequencePoint(doc12, 28, 1, 28, 100)
Dim typ2(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Type)
Typ03 = Typ
EmitMSILIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Stmt)
EmitMSILIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = Typ
EmitMSILIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ2))
Typ = Typ03.GetMethod("IsInstanceOfType", typ2).ReturnType
EmitMSILIL.Emit(OpCodes.Stloc, 4)
EmitMSILIL.MarkSequencePoint(doc12, 30, 1, 30, 100)
EmitMSILIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
EmitMSILIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa171 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
Dim tru171 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
Dim cont171 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
EmitMSILIL.Emit(OpCodes.Beq, tru171)
EmitMSILIL.Emit(OpCodes.Br, fa171)
EmitMSILIL.MarkLabel(tru171)
EmitMSILIL.MarkSequencePoint(doc12, 31, 1, 31, 100)
EmitMSILIL.Emit(OpCodes.Br, cont171)
EmitMSILIL.MarkLabel(fa171)
EmitMSILIL.MarkSequencePoint(doc12, 33, 1, 33, 100)
Dim locbldr258 As LocalBuilder = EmitMSILIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.StmtReader"))
locbldr258.SetLocalSymInfo("sr")
EmitMSILIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.StmtReader").GetConstructor(Type.EmptyTypes))
EmitMSILIL.Emit(OpCodes.Stloc, 5)
EmitMSILIL.MarkSequencePoint(doc12, 34, 1, 34, 100)
Dim typ3(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.StmtReader")
Typ03 = Typ
EmitMSILIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Stmt)
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = Typ
EmitMSILIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.String)
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = Typ
EmitMSILIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Read", typ3))
Typ = Typ03.GetMethod("Read", typ3).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMSILIL.Emit(OpCodes.Pop)
End If
EmitMSILIL.MarkSequencePoint(doc12, 36, 1, 36, 100)
EmitMSILIL.Emit(OpCodes.Br, cont171)
EmitMSILIL.MarkLabel(cont171)
EmitMSILIL.MarkSequencePoint(doc12, 38, 1, 38, 100)
EmitMSILIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
Dim fa172 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
Dim tru172 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
Dim cont172 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
EmitMSILIL.Emit(OpCodes.Beq, tru172)
EmitMSILIL.Emit(OpCodes.Br, fa172)
EmitMSILIL.MarkLabel(tru172)
EmitMSILIL.MarkSequencePoint(doc12, 40, 1, 40, 100)
Dim typ4(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldstr, "Writing Assembly to disk...")
Typ = GetType(System.String)
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
EmitMSILIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ4))
Typ = GetType(Console).GetMethod("Write", typ4).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMSILIL.Emit(OpCodes.Pop)
End If
EmitMSILIL.MarkSequencePoint(doc12, 41, 1, 41, 100)
Dim locbldr259 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(AssemblyBuilder))
locbldr259.SetLocalSymInfo("ab")
EmitMSILIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmB"))
Typ = GetType(AsmFactory).GetField("AsmB").FieldType
EmitMSILIL.Emit(OpCodes.Stloc, 6)
EmitMSILIL.MarkSequencePoint(doc12, 42, 1, 42, 100)
EmitMSILIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(AssemblyBuilder)
Typ03 = Typ
EmitMSILIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineVersionInfoResource", Type.EmptyTypes))
Typ = Typ03.GetMethod("DefineVersionInfoResource", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMSILIL.Emit(OpCodes.Pop)
End If
EmitMSILIL.MarkSequencePoint(doc12, 43, 1, 43, 100)
Dim typ6(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(AssemblyBuilder)
Typ03 = Typ
EmitMSILIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmFile"))
Typ = GetType(AsmFactory).GetField("AsmFile").FieldType
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = Typ
EmitMSILIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Save", typ6))
Typ = Typ03.GetMethod("Save", typ6).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMSILIL.Emit(OpCodes.Pop)
End If
EmitMSILIL.MarkSequencePoint(doc12, 44, 1, 44, 100)
Dim typ7(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldstr, "Done")
Typ = GetType(System.String)
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = Typ
EmitMSILIL.Emit(OpCodes.Call, GetType(COnsole).GetMethod("WriteLine", typ7))
Typ = GetType(COnsole).GetMethod("WriteLine", typ7).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMSILIL.Emit(OpCodes.Pop)
End If
EmitMSILIL.MarkSequencePoint(doc12, 46, 1, 46, 100)
EmitMSILIL.Emit(OpCodes.Br, label1)
EmitMSILIL.MarkSequencePoint(doc12, 47, 1, 47, 100)
EmitMSILIL.Emit(OpCodes.Br, cont172)
EmitMSILIL.MarkLabel(fa172)
EmitMSILIL.MarkSequencePoint(doc12, 48, 1, 48, 100)
EmitMSILIL.Emit(OpCodes.Br, label0)
EmitMSILIL.MarkSequencePoint(doc12, 49, 1, 49, 100)
EmitMSILIL.Emit(OpCodes.Br, cont172)
EmitMSILIL.MarkLabel(cont172)
EmitMSILIL.MarkSequencePoint(doc12, 51, 1, 51, 100)
EmitMSILIL.MarkLabel(label1)
EmitMSILIL.MarkSequencePoint(doc12, 53, 1, 53, 100)
EmitMSILIL.Emit(OpCodes.Ret)
CodeGenerator.CreateType()
End Sub

Sub Main()

asmName = New AssemblyName("tokenizer.CodeGen")
asmName.Version = New System.Version(11, 2, 7, 2)
asm  = AppDomain.CurrentDomain.DefineDynamicAssembly(asmName, AssemblyBuilderAccess.Save, CStr("E:\Code\dylannet\compiler\"))
mdl = asm.DefineDynamicModule(asmName.Name & ".dll" , asmName.Name & ".dll", True)
resw = mdl.DefineResource("tokenizer.CodeGen.resources" ,  "Description")
doc = mdl.DefineDocument("E:\Code\dylannet\compiler\tokenizer.CodeGen.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc2 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\varitem.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc3 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\fielditem.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc4 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\methoditem.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc5 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\ctoritem.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc6 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\symtable.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc7 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\helpers.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc8 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\constldr.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc9 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\opstack.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc10 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\eval.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc11 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\stmtreader.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc12 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\codegenerator.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
addstr("tokenizer.CodeGen")
addasm(asm)
Dim daType As Type = GetType(DebuggableAttribute)
Dim daCtor As ConstructorInfo = daType.GetConstructor(New Type() { GetType(DebuggableAttribute.DebuggingModes) })
Dim daBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(daCtor, New Object() {DebuggableAttribute.DebuggingModes.DisableOptimizations Or _
DebuggableAttribute.DebuggingModes.Default })
asm.SetCustomAttribute(daBuilder)

VarItem()
FieldItem()
MethodItem()
CtorItem()
SymTable()
Helpers()
OpStack()
Evaluator()
StmtReader()
CodeGenerator()
Dim vaType As Type = GetType(AssemblyFileVersionAttribute)
Dim vaCtor As ConstructorInfo = vaType.GetConstructor(New Type() { GetType(String) })
Dim vaBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(vaCtor, New Object() {"11.2.7.2"})
asm.SetCustomAttribute(vaBuilder)

Dim paType As Type = GetType(AssemblyProductAttribute)
Dim paCtor As ConstructorInfo = paType.GetConstructor(New Type() { GetType(String) })
Dim paBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(paCtor, New Object() {"tokenizer.CodeGen"})
asm.SetCustomAttribute(paBuilder)

Dim ataType As Type = GetType(AssemblyTitleAttribute)
Dim ataCtor As ConstructorInfo = ataType.GetConstructor(New Type() { GetType(String) })
Dim ataBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(ataCtor, New Object() {"tokenizer.CodeGen"})
asm.SetCustomAttribute(ataBuilder)

Dim deaType As Type = GetType(AssemblyDescriptionAttribute)
Dim deaCtor As ConstructorInfo = deaType.GetConstructor(New Type() { GetType(String) })
Dim deaBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(deaCtor, New Object() {"tokenizer.CodeGen"})
asm.SetCustomAttribute(deaBuilder)


asm.DefineVersionInfoResource()
asm.Save(asmName.Name & ".dll")
End Sub


End Module