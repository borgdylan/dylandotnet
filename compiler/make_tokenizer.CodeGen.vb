Imports dylan.NET.Tokenizer.Parser
Imports dylan.NET.Tokenizer.AST.Tokens.Chars
Imports dylan.NET.Tokenizer.AST.Tokens.Attributes
Imports dylan.NET.Tokenizer.AST.Tokens.Literals
Imports dylan.NET.Tokenizer.AST.Tokens.TypeToks
Imports dylan.NET.Tokenizer.AST.Tokens.Ops
Imports dylan.NET.Tokenizer.AST.Stmts
Imports dylan.NET.Tokenizer.AST.Exprs
Imports dylan.NET.Tokenizer.AST.Tokens
Imports dylan.NET.Tokenizer.AST
Imports dylan.NET.Tokenizer.Lexer
Imports dylan.NET.Reflection
Imports dylan.NET.Utils
Imports dylan.NET
Imports System.Linq
Imports System.Collections.Generic
Imports System.Collections
Imports System.IO
Imports Microsoft.VisualBasic
Imports System.Xml
Imports System.Xml.Linq
Imports System.Data

Imports System
Imports System.Diagnostics
Imports System.Diagnostics.SymbolStore
Imports System.Reflection
Imports System.Resources
Imports System.Reflection.Emit
Module Module1

Public asmName As AssemblyName
Public asm As AssemblyBuilder
Public Typ As Type
Public Typ02 As Type
Public Typ03 As Type
Public Typ04 As Type
Public impstr(-1) As String
Public impasm(-1) As Assembly
Public interfacebool As Boolean
Public mdl As ModuleBuilder
Public resw As IResourceWriter
Public resobj As Object

Dim doc As ISymbolDocumentWriter

Sub addstr(ByVal str As String)
ReDim Preserve impstr(UBound(impstr) + 1)
impstr(UBound(impstr)) = str
End Sub

Sub addasm(ByVal asm As Assembly)
ReDim Preserve impasm(UBound(impasm) + 1)
impasm(UBound(impasm)) = asm
End Sub

Function MakeGetType(ByVal TypeName As String) As Type
Dim attachbrackets As Boolean = False
If TypeName Like "*[[]*]" Then
Dim split As String() = TypeName.Split(New [Char] () {"[","]"})
TypeName = split(0)
attachbrackets = True
End If
Dim ind As Integer = -1
Dim i As Integer = -1
Dim len As Integer = impstr.Length - 1
Do Until i = len
i = i + 1
If TypeName Like impstr(i) & "*" Then
ind = i
End If
Loop
If ind <> -1 Then
Dim assem As Assembly = impasm(ind)
If attachbrackets = True Then
TypeName = TypeName & "[]"
End If
MakeGetType = assem.GetType(TypeName)
Else
If attachbrackets = True Then
TypeName = TypeName & "[]"
End If
MakeGetType = Type.GetType(TypeName)
End If
Return MakeGetType
End Function

Dim doc2 As ISymbolDocumentWriter

Sub VarItem()
Dim VarItem As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "VarItem", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim Name As FieldBuilder = VarItem.DefineField("Name", GetType(System.String), FieldAttributes.Public)
Dim LocArg As FieldBuilder = VarItem.DefineField("LocArg", GetType(System.Boolean), FieldAttributes.Public)
Dim Index As FieldBuilder = VarItem.DefineField("Index", GetType(System.Int32), FieldAttributes.Public)
Dim VarTyp As FieldBuilder = VarItem.DefineField("VarTyp", GetType(System.Type), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = VarItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc2, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc2, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, Name)
ctor0IL.MarkSequencePoint(doc2, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, LocArg)
ctor0IL.MarkSequencePoint(doc2, 21, 1, 21, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Stfld, Index)
ctor0IL.MarkSequencePoint(doc2, 22, 1, 22, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, VarTyp)
ctor0IL.MarkSequencePoint(doc2, 23, 1, 23, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Boolean)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Int32)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Type)
Dim ctor1 As ConstructorBuilder = VarItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "nme")
Dim ctor1param02 As ParameterBuilder = ctor1.DefineParameter(2, ParameterAttributes.None, "la")
Dim ctor1param03 As ParameterBuilder = ctor1.DefineParameter(3, ParameterAttributes.None, "ind")
Dim ctor1param04 As ParameterBuilder = ctor1.DefineParameter(4, ParameterAttributes.None, "typ")
ctor1IL.MarkSequencePoint(doc2, 26, 1, 26, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc2, 27, 1, 27, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, Name)
ctor1IL.MarkSequencePoint(doc2, 28, 1, 28, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, LocArg)
ctor1IL.MarkSequencePoint(doc2, 29, 1, 29, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 3)
Typ = GetType(System.Int32)
ctor1IL.Emit(OpCodes.Stfld, Index)
ctor1IL.MarkSequencePoint(doc2, 30, 1, 30, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 4)
Typ = GetType(System.Type)
ctor1IL.Emit(OpCodes.Stfld, VarTyp)
ctor1IL.MarkSequencePoint(doc2, 31, 1, 31, 100)
ctor1IL.Emit(OpCodes.Ret)
VarItem.CreateType()
End Sub


Dim doc3 As ISymbolDocumentWriter

Sub FieldItem()
Dim FieldItem As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "FieldItem", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim Name As FieldBuilder = FieldItem.DefineField("Name", GetType(System.String), FieldAttributes.Public)
Dim FieldTyp As FieldBuilder = FieldItem.DefineField("FieldTyp", GetType(System.Type), FieldAttributes.Public)
Dim FieldBldr As FieldBuilder = FieldItem.DefineField("FieldBldr", GetType(FieldBuilder), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = FieldItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc3, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc3, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, Name)
ctor0IL.MarkSequencePoint(doc3, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, FieldTyp)
ctor0IL.MarkSequencePoint(doc3, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, FieldBldr)
ctor0IL.MarkSequencePoint(doc3, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Type)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(FieldBuilder)
Dim ctor1 As ConstructorBuilder = FieldItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "nme")
Dim ctor1param02 As ParameterBuilder = ctor1.DefineParameter(2, ParameterAttributes.None, "typ")
Dim ctor1param03 As ParameterBuilder = ctor1.DefineParameter(3, ParameterAttributes.None, "bld")
ctor1IL.MarkSequencePoint(doc3, 23, 1, 23, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc3, 24, 1, 24, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, Name)
ctor1IL.MarkSequencePoint(doc3, 25, 1, 25, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Type)
ctor1IL.Emit(OpCodes.Stfld, FieldTyp)
ctor1IL.MarkSequencePoint(doc3, 26, 1, 26, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 3)
Typ = GetType(FieldBuilder)
ctor1IL.Emit(OpCodes.Stfld, FieldBldr)
ctor1IL.MarkSequencePoint(doc3, 27, 1, 27, 100)
ctor1IL.Emit(OpCodes.Ret)
FieldItem.CreateType()
End Sub


Dim doc4 As ISymbolDocumentWriter

Sub MethodItem()
Dim MethodItem As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "MethodItem", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim Name As FieldBuilder = MethodItem.DefineField("Name", GetType(System.String), FieldAttributes.Public)
Dim MethodTyp As FieldBuilder = MethodItem.DefineField("MethodTyp", GetType(System.Type), FieldAttributes.Public)
Dim ParamTyps As FieldBuilder = MethodItem.DefineField("ParamTyps", GetType(System.Type).MakeArrayType(), FieldAttributes.Public)
Dim MethodBldr As FieldBuilder = MethodItem.DefineField("MethodBldr", GetType(MethodBuilder), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = MethodItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc4, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc4, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ctor0IL.Emit(OpCodes.Stfld, Name)
ctor0IL.MarkSequencePoint(doc4, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, MethodTyp)
ctor0IL.MarkSequencePoint(doc4, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, MethodBldr)
ctor0IL.MarkSequencePoint(doc4, 21, 1, 21, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, GetType(System.Type))
ctor0IL.Emit(OpCodes.Stfld, ParamTyps)
ctor0IL.MarkSequencePoint(doc4, 22, 1, 22, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Type)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Type).MakeArrayType()
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(MethodBuilder)
Dim ctor1 As ConstructorBuilder = MethodItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "nme")
Dim ctor1param02 As ParameterBuilder = ctor1.DefineParameter(2, ParameterAttributes.None, "typ")
Dim ctor1param03 As ParameterBuilder = ctor1.DefineParameter(3, ParameterAttributes.None, "ptyps")
Dim ctor1param04 As ParameterBuilder = ctor1.DefineParameter(4, ParameterAttributes.None, "bld")
ctor1IL.MarkSequencePoint(doc4, 25, 1, 25, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc4, 26, 1, 26, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ctor1IL.Emit(OpCodes.Stfld, Name)
ctor1IL.MarkSequencePoint(doc4, 27, 1, 27, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Type)
ctor1IL.Emit(OpCodes.Stfld, MethodTyp)
ctor1IL.MarkSequencePoint(doc4, 28, 1, 28, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 4)
Typ = GetType(MethodBuilder)
ctor1IL.Emit(OpCodes.Stfld, MethodBldr)
ctor1IL.MarkSequencePoint(doc4, 29, 1, 29, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 3)
Typ = GetType(System.Type).MakeArrayType()
ctor1IL.Emit(OpCodes.Stfld, ParamTyps)
ctor1IL.MarkSequencePoint(doc4, 30, 1, 30, 100)
ctor1IL.Emit(OpCodes.Ret)
MethodItem.CreateType()
End Sub


Dim doc5 As ISymbolDocumentWriter

Sub CtorItem()
Dim CtorItem As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "CtorItem", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim ParamTyps As FieldBuilder = CtorItem.DefineField("ParamTyps", GetType(System.Type).MakeArrayType(), FieldAttributes.Public)
Dim CtorBldr As FieldBuilder = CtorItem.DefineField("CtorBldr", GetType(ConstructorBuilder), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = CtorItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc5, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc5, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, CtorBldr)
ctor0IL.MarkSequencePoint(doc5, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, GetType(System.Type))
ctor0IL.Emit(OpCodes.Stfld, ParamTyps)
ctor0IL.MarkSequencePoint(doc5, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Type).MakeArrayType()
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(ConstructorBuilder)
Dim ctor1 As ConstructorBuilder = CtorItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "ptyps")
Dim ctor1param02 As ParameterBuilder = ctor1.DefineParameter(2, ParameterAttributes.None, "bld")
ctor1IL.MarkSequencePoint(doc5, 21, 1, 21, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc5, 22, 1, 22, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(ConstructorBuilder)
ctor1IL.Emit(OpCodes.Stfld, CtorBldr)
ctor1IL.MarkSequencePoint(doc5, 23, 1, 23, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type).MakeArrayType()
ctor1IL.Emit(OpCodes.Stfld, ParamTyps)
ctor1IL.MarkSequencePoint(doc5, 24, 1, 24, 100)
ctor1IL.Emit(OpCodes.Ret)
CtorItem.CreateType()
End Sub


Dim doc6 As ISymbolDocumentWriter

Sub IfItem()
Dim IfItem As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "IfItem", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim EndLabel As FieldBuilder = IfItem.DefineField("EndLabel", GetType(Emit.Label), FieldAttributes.Public)
Dim NextBlkLabel As FieldBuilder = IfItem.DefineField("NextBlkLabel", GetType(Emit.Label), FieldAttributes.Public)
Dim ElsePass As FieldBuilder = IfItem.DefineField("ElsePass", GetType(System.Boolean), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = IfItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc6, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc6, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stfld, ElsePass)
ctor0IL.MarkSequencePoint(doc6, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(Emit.Label)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(Emit.Label)
Dim ctor1 As ConstructorBuilder = IfItem.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , typ0)
Dim ctor1IL As ILGenerator = ctor1.GetILGenerator()
Dim ctor1param01 As ParameterBuilder = ctor1.DefineParameter(1, ParameterAttributes.None, "endl")
Dim ctor1param02 As ParameterBuilder = ctor1.DefineParameter(2, ParameterAttributes.None, "nbl")
ctor1IL.MarkSequencePoint(doc6, 21, 1, 21, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor1IL.MarkSequencePoint(doc6, 22, 1, 22, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Emit.Label)
ctor1IL.Emit(OpCodes.Stfld, EndLabel)
ctor1IL.MarkSequencePoint(doc6, 23, 1, 23, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(Emit.Label)
ctor1IL.Emit(OpCodes.Stfld, NextBlkLabel)
ctor1IL.MarkSequencePoint(doc6, 24, 1, 24, 100)
ctor1IL.Emit(OpCodes.Ldarg_0)
ctor1IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor1IL.Emit(OpCodes.Stfld, ElsePass)
ctor1IL.MarkSequencePoint(doc6, 25, 1, 25, 100)
ctor1IL.Emit(OpCodes.Ret)
IfItem.CreateType()
End Sub


Dim doc7 As ISymbolDocumentWriter

Sub SymTable()
Dim SymTable As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "SymTable", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass Or TypeAttributes.BeforeFieldInit, GetType(System.Object))
Dim VarLst As FieldBuilder = SymTable.DefineField("VarLst", asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").MakeArrayType(), FieldAttributes.Public Or FieldAttributes.Static)
Dim FldLst As FieldBuilder = SymTable.DefineField("FldLst", asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType(), FieldAttributes.Public Or FieldAttributes.Static)
Dim NestedFldLst As FieldBuilder = SymTable.DefineField("NestedFldLst", asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType(), FieldAttributes.Public Or FieldAttributes.Static)
Dim MetLst As FieldBuilder = SymTable.DefineField("MetLst", asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType(), FieldAttributes.Public Or FieldAttributes.Static)
Dim NestedMetLst As FieldBuilder = SymTable.DefineField("NestedMetLst", asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType(), FieldAttributes.Public Or FieldAttributes.Static)
Dim CtorLst As FieldBuilder = SymTable.DefineField("CtorLst", asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType(), FieldAttributes.Public Or FieldAttributes.Static)
Dim NestedCtorLst As FieldBuilder = SymTable.DefineField("NestedCtorLst", asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType(), FieldAttributes.Public Or FieldAttributes.Static)
Dim IfLst As FieldBuilder = SymTable.DefineField("IfLst", asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").MakeArrayType(), FieldAttributes.Public Or FieldAttributes.Static)
Dim ctor0 As ConstructorBuilder = SymTable.DefineConstructor(MethodAttributes.Public Or MethodAttributes.Static,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc7, 21, 1, 21, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"))
ctor0IL.Emit(OpCodes.Stsfld, VarLst)
ctor0IL.MarkSequencePoint(doc7, 22, 1, 22, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
ctor0IL.Emit(OpCodes.Stsfld, FldLst)
ctor0IL.MarkSequencePoint(doc7, 23, 1, 23, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
ctor0IL.Emit(OpCodes.Stsfld, NestedFldLst)
ctor0IL.MarkSequencePoint(doc7, 24, 1, 24, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
ctor0IL.Emit(OpCodes.Stsfld, MetLst)
ctor0IL.MarkSequencePoint(doc7, 25, 1, 25, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
ctor0IL.Emit(OpCodes.Stsfld, NestedMetLst)
ctor0IL.MarkSequencePoint(doc7, 26, 1, 26, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
ctor0IL.Emit(OpCodes.Stsfld, CtorLst)
ctor0IL.MarkSequencePoint(doc7, 27, 1, 27, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
ctor0IL.Emit(OpCodes.Stsfld, NestedCtorLst)
ctor0IL.MarkSequencePoint(doc7, 28, 1, 28, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem"))
ctor0IL.Emit(OpCodes.Stsfld, IfLst)
ctor0IL.MarkSequencePoint(doc7, 29, 1, 29, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim ResetIf As MethodBuilder = SymTable.DefineMethod("ResetIf", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim ResetIfIL As ILGenerator = ResetIf.GetILGenerator()
ResetIfIL.MarkSequencePoint(doc7, 32, 1, 32, 100)
ResetIfIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ResetIfIL.Emit(OpCodes.Conv_U)
ResetIfIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem"))
ResetIfIL.Emit(OpCodes.Stsfld, IfLst)
ResetIfIL.MarkSequencePoint(doc7, 33, 1, 33, 100)
ResetIfIL.Emit(OpCodes.Ret)
Dim ResetVar As MethodBuilder = SymTable.DefineMethod("ResetVar", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim ResetVarIL As ILGenerator = ResetVar.GetILGenerator()
ResetVarIL.MarkSequencePoint(doc7, 36, 1, 36, 100)
ResetVarIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ResetVarIL.Emit(OpCodes.Conv_U)
ResetVarIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"))
ResetVarIL.Emit(OpCodes.Stsfld, VarLst)
ResetVarIL.MarkSequencePoint(doc7, 37, 1, 37, 100)
ResetVarIL.Emit(OpCodes.Ret)
Dim ResetFld As MethodBuilder = SymTable.DefineMethod("ResetFld", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim ResetFldIL As ILGenerator = ResetFld.GetILGenerator()
ResetFldIL.MarkSequencePoint(doc7, 40, 1, 40, 100)
ResetFldIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ResetFldIL.Emit(OpCodes.Conv_U)
ResetFldIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
ResetFldIL.Emit(OpCodes.Stsfld, FldLst)
ResetFldIL.MarkSequencePoint(doc7, 41, 1, 41, 100)
ResetFldIL.Emit(OpCodes.Ret)
Dim ResetNestedFld As MethodBuilder = SymTable.DefineMethod("ResetNestedFld", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim ResetNestedFldIL As ILGenerator = ResetNestedFld.GetILGenerator()
ResetNestedFldIL.MarkSequencePoint(doc7, 44, 1, 44, 100)
ResetNestedFldIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ResetNestedFldIL.Emit(OpCodes.Conv_U)
ResetNestedFldIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
ResetNestedFldIL.Emit(OpCodes.Stsfld, NestedFldLst)
ResetNestedFldIL.MarkSequencePoint(doc7, 45, 1, 45, 100)
ResetNestedFldIL.Emit(OpCodes.Ret)
Dim ResetMet As MethodBuilder = SymTable.DefineMethod("ResetMet", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim ResetMetIL As ILGenerator = ResetMet.GetILGenerator()
ResetMetIL.MarkSequencePoint(doc7, 48, 1, 48, 100)
ResetMetIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ResetMetIL.Emit(OpCodes.Conv_U)
ResetMetIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
ResetMetIL.Emit(OpCodes.Stsfld, MetLst)
ResetMetIL.MarkSequencePoint(doc7, 49, 1, 49, 100)
ResetMetIL.Emit(OpCodes.Ret)
Dim ResetNestedMet As MethodBuilder = SymTable.DefineMethod("ResetNestedMet", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim ResetNestedMetIL As ILGenerator = ResetNestedMet.GetILGenerator()
ResetNestedMetIL.MarkSequencePoint(doc7, 52, 1, 52, 100)
ResetNestedMetIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ResetNestedMetIL.Emit(OpCodes.Conv_U)
ResetNestedMetIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
ResetNestedMetIL.Emit(OpCodes.Stsfld, NestedMetLst)
ResetNestedMetIL.MarkSequencePoint(doc7, 53, 1, 53, 100)
ResetNestedMetIL.Emit(OpCodes.Ret)
Dim ResetCtor As MethodBuilder = SymTable.DefineMethod("ResetCtor", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim ResetCtorIL As ILGenerator = ResetCtor.GetILGenerator()
ResetCtorIL.MarkSequencePoint(doc7, 56, 1, 56, 100)
ResetCtorIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ResetCtorIL.Emit(OpCodes.Conv_U)
ResetCtorIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
ResetCtorIL.Emit(OpCodes.Stsfld, CtorLst)
ResetCtorIL.MarkSequencePoint(doc7, 57, 1, 57, 100)
ResetCtorIL.Emit(OpCodes.Ret)
Dim ResetNestedCtor As MethodBuilder = SymTable.DefineMethod("ResetNestedCtor", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim ResetNestedCtorIL As ILGenerator = ResetNestedCtor.GetILGenerator()
ResetNestedCtorIL.MarkSequencePoint(doc7, 60, 1, 60, 100)
ResetNestedCtorIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ResetNestedCtorIL.Emit(OpCodes.Conv_U)
ResetNestedCtorIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
ResetNestedCtorIL.Emit(OpCodes.Stsfld, NestedCtorLst)
ResetNestedCtorIL.MarkSequencePoint(doc7, 61, 1, 61, 100)
ResetNestedCtorIL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Boolean)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Int32)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.Type)
Dim AddVar As MethodBuilder = SymTable.DefineMethod("AddVar", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ0)
Dim AddVarIL As ILGenerator = AddVar.GetILGenerator()
Dim AddVarparam01 As ParameterBuilder = AddVar.DefineParameter(1, ParameterAttributes.None, "nme")
Dim AddVarparam02 As ParameterBuilder = AddVar.DefineParameter(2, ParameterAttributes.None, "la")
Dim AddVarparam03 As ParameterBuilder = AddVar.DefineParameter(3, ParameterAttributes.None, "ind")
Dim AddVarparam04 As ParameterBuilder = AddVar.DefineParameter(4, ParameterAttributes.None, "typ")
AddVarIL.MarkSequencePoint(doc7, 65, 1, 65, 100)
Dim locbldr0 As LocalBuilder = AddVarIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"))
locbldr0.SetLocalSymInfo("vr")
Dim typ1(-1) As Type
AddVarIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = Typ
AddVarIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = Typ
AddVarIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Int32)
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = Typ
AddVarIL.Emit(OpCodes.Ldarg, 3)
Typ = GetType(System.Type)
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = Typ
AddVarIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetConstructor(typ1))
AddVarIL.Emit(OpCodes.Stloc, 0)
AddVarIL.MarkSequencePoint(doc7, 67, 1, 67, 100)
Dim locbldr1 As LocalBuilder = AddVarIL.DeclareLocal(GetType(System.Int32))
locbldr1.SetLocalSymInfo("len")
AddVarIL.Emit(OpCodes.Ldsfld, VarLst)
Typ = VarLst.FieldType
AddVarIL.Emit(OpCodes.Ldlen)
AddVarIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Stloc, 1)
AddVarIL.MarkSequencePoint(doc7, 68, 1, 68, 100)
Dim locbldr2 As LocalBuilder = AddVarIL.DeclareLocal(GetType(System.Int32))
locbldr2.SetLocalSymInfo("destl")
AddVarIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Add)
AddVarIL.Emit(OpCodes.Stloc, 2)
AddVarIL.MarkSequencePoint(doc7, 69, 1, 69, 100)
Dim locbldr3 As LocalBuilder = AddVarIL.DeclareLocal(GetType(System.Int32))
locbldr3.SetLocalSymInfo("stopel")
AddVarIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Sub)
AddVarIL.Emit(OpCodes.Stloc, 3)
AddVarIL.MarkSequencePoint(doc7, 70, 1, 70, 100)
Dim locbldr4 As LocalBuilder = AddVarIL.DeclareLocal(GetType(System.Int32))
locbldr4.SetLocalSymInfo("i")
AddVarIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Stloc, 4)
AddVarIL.MarkSequencePoint(doc7, 72, 1, 72, 100)
Dim locbldr5 As LocalBuilder = AddVarIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").MakeArrayType())
locbldr5.SetLocalSymInfo("destarr")
AddVarIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Conv_U)
AddVarIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"))
AddVarIL.Emit(OpCodes.Stloc, 5)
AddVarIL.MarkSequencePoint(doc7, 74, 1, 74, 100)
Dim label0 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
AddVarIL.MarkSequencePoint(doc7, 75, 1, 75, 100)
Dim label1 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
AddVarIL.MarkSequencePoint(doc7, 77, 1, 77, 100)
AddVarIL.MarkLabel(label0)
AddVarIL.MarkSequencePoint(doc7, 79, 1, 79, 100)
AddVarIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Add)
AddVarIL.Emit(OpCodes.Stloc, 4)
AddVarIL.MarkSequencePoint(doc7, 81, 1, 81, 100)
AddVarIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa0 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
Dim tru0 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
Dim cont0 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
AddVarIL.Emit(OpCodes.Bgt, tru0)
AddVarIL.Emit(OpCodes.Br, fa0)
AddVarIL.MarkLabel(tru0)
AddVarIL.MarkSequencePoint(doc7, 83, 1, 83, 100)
AddVarIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").MakeArrayType()
Typ02 = Typ
AddVarIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddVarIL.Emit(OpCodes.Ldsfld, VarLst)
Typ = VarLst.FieldType
Typ02 = Typ
AddVarIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddVarIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddVarIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").MakeArrayType().GetElementType())
AddVarIL.MarkSequencePoint(doc7, 85, 1, 85, 100)
AddVarIL.Emit(OpCodes.Br, cont0)
AddVarIL.MarkLabel(fa0)
AddVarIL.Emit(OpCodes.Br, cont0)
AddVarIL.MarkLabel(cont0)
AddVarIL.MarkSequencePoint(doc7, 87, 1, 87, 100)
AddVarIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
Dim fa1 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
Dim tru1 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
Dim cont1 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
AddVarIL.Emit(OpCodes.Beq, tru1)
AddVarIL.Emit(OpCodes.Br, fa1)
AddVarIL.MarkLabel(tru1)
AddVarIL.MarkSequencePoint(doc7, 88, 1, 88, 100)
AddVarIL.Emit(OpCodes.Br, label1)
AddVarIL.MarkSequencePoint(doc7, 89, 1, 89, 100)
AddVarIL.Emit(OpCodes.Br, cont1)
AddVarIL.MarkLabel(fa1)
AddVarIL.MarkSequencePoint(doc7, 90, 1, 90, 100)
AddVarIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa2 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
Dim tru2 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
Dim cont2 As System.Reflection.Emit.Label = AddVarIL.DefineLabel()
AddVarIL.Emit(OpCodes.Beq, fa2)
AddVarIL.Emit(OpCodes.Br, tru2)
AddVarIL.MarkLabel(tru2)
AddVarIL.MarkSequencePoint(doc7, 91, 1, 91, 100)
AddVarIL.Emit(OpCodes.Br, label0)
AddVarIL.MarkSequencePoint(doc7, 92, 1, 92, 100)
AddVarIL.Emit(OpCodes.Br, cont2)
AddVarIL.MarkLabel(fa2)
AddVarIL.MarkSequencePoint(doc7, 93, 1, 93, 100)
AddVarIL.Emit(OpCodes.Br, label1)
AddVarIL.MarkSequencePoint(doc7, 94, 1, 94, 100)
AddVarIL.Emit(OpCodes.Br, cont2)
AddVarIL.MarkLabel(cont2)
AddVarIL.MarkSequencePoint(doc7, 95, 1, 95, 100)
AddVarIL.Emit(OpCodes.Br, cont1)
AddVarIL.MarkLabel(cont1)
AddVarIL.MarkSequencePoint(doc7, 97, 1, 97, 100)
AddVarIL.MarkLabel(label1)
AddVarIL.MarkSequencePoint(doc7, 99, 1, 99, 100)
AddVarIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").MakeArrayType()
Typ02 = Typ
AddVarIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddVarIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddVarIL.Emit(OpCodes.Ldloc, 0)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
AddVarIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").MakeArrayType().GetElementType())
AddVarIL.MarkSequencePoint(doc7, 101, 1, 101, 100)
AddVarIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").MakeArrayType()
AddVarIL.Emit(OpCodes.Stsfld, VarLst)
AddVarIL.MarkSequencePoint(doc7, 103, 1, 103, 100)
AddVarIL.Emit(OpCodes.Ret)
Dim typ2(-1) As Type
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = GetType(System.String)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = GetType(System.Type)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = GetType(FieldBuilder)
Dim AddFld As MethodBuilder = SymTable.DefineMethod("AddFld", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ2)
Dim AddFldIL As ILGenerator = AddFld.GetILGenerator()
Dim AddFldparam01 As ParameterBuilder = AddFld.DefineParameter(1, ParameterAttributes.None, "nme")
Dim AddFldparam02 As ParameterBuilder = AddFld.DefineParameter(2, ParameterAttributes.None, "typ")
Dim AddFldparam03 As ParameterBuilder = AddFld.DefineParameter(3, ParameterAttributes.None, "fld")
AddFldIL.MarkSequencePoint(doc7, 107, 1, 107, 100)
Dim locbldr6 As LocalBuilder = AddFldIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
locbldr6.SetLocalSymInfo("vr")
Dim typ3(-1) As Type
AddFldIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = Typ
AddFldIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = Typ
AddFldIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(FieldBuilder)
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = Typ
AddFldIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").GetConstructor(typ3))
AddFldIL.Emit(OpCodes.Stloc, 0)
AddFldIL.MarkSequencePoint(doc7, 109, 1, 109, 100)
Dim locbldr7 As LocalBuilder = AddFldIL.DeclareLocal(GetType(System.Int32))
locbldr7.SetLocalSymInfo("len")
AddFldIL.Emit(OpCodes.Ldsfld, FldLst)
Typ = FldLst.FieldType
AddFldIL.Emit(OpCodes.Ldlen)
AddFldIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Stloc, 1)
AddFldIL.MarkSequencePoint(doc7, 110, 1, 110, 100)
Dim locbldr8 As LocalBuilder = AddFldIL.DeclareLocal(GetType(System.Int32))
locbldr8.SetLocalSymInfo("destl")
AddFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Add)
AddFldIL.Emit(OpCodes.Stloc, 2)
AddFldIL.MarkSequencePoint(doc7, 111, 1, 111, 100)
Dim locbldr9 As LocalBuilder = AddFldIL.DeclareLocal(GetType(System.Int32))
locbldr9.SetLocalSymInfo("stopel")
AddFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Sub)
AddFldIL.Emit(OpCodes.Stloc, 3)
AddFldIL.MarkSequencePoint(doc7, 112, 1, 112, 100)
Dim locbldr10 As LocalBuilder = AddFldIL.DeclareLocal(GetType(System.Int32))
locbldr10.SetLocalSymInfo("i")
AddFldIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Stloc, 4)
AddFldIL.MarkSequencePoint(doc7, 114, 1, 114, 100)
Dim locbldr11 As LocalBuilder = AddFldIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType())
locbldr11.SetLocalSymInfo("destarr")
AddFldIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Conv_U)
AddFldIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
AddFldIL.Emit(OpCodes.Stloc, 5)
AddFldIL.MarkSequencePoint(doc7, 116, 1, 116, 100)
Dim label2 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
AddFldIL.MarkSequencePoint(doc7, 117, 1, 117, 100)
Dim label3 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
AddFldIL.MarkSequencePoint(doc7, 119, 1, 119, 100)
AddFldIL.MarkLabel(label2)
AddFldIL.MarkSequencePoint(doc7, 121, 1, 121, 100)
AddFldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Add)
AddFldIL.Emit(OpCodes.Stloc, 4)
AddFldIL.MarkSequencePoint(doc7, 123, 1, 123, 100)
AddFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa3 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
Dim tru3 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
Dim cont3 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
AddFldIL.Emit(OpCodes.Bgt, tru3)
AddFldIL.Emit(OpCodes.Br, fa3)
AddFldIL.MarkLabel(tru3)
AddFldIL.MarkSequencePoint(doc7, 125, 1, 125, 100)
AddFldIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType()
Typ02 = Typ
AddFldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddFldIL.Emit(OpCodes.Ldsfld, FldLst)
Typ = FldLst.FieldType
Typ02 = Typ
AddFldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddFldIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddFldIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType().GetElementType())
AddFldIL.MarkSequencePoint(doc7, 127, 1, 127, 100)
AddFldIL.Emit(OpCodes.Br, cont3)
AddFldIL.MarkLabel(fa3)
AddFldIL.Emit(OpCodes.Br, cont3)
AddFldIL.MarkLabel(cont3)
AddFldIL.MarkSequencePoint(doc7, 129, 1, 129, 100)
AddFldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
Dim fa4 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
Dim tru4 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
Dim cont4 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
AddFldIL.Emit(OpCodes.Beq, tru4)
AddFldIL.Emit(OpCodes.Br, fa4)
AddFldIL.MarkLabel(tru4)
AddFldIL.MarkSequencePoint(doc7, 130, 1, 130, 100)
AddFldIL.Emit(OpCodes.Br, label3)
AddFldIL.MarkSequencePoint(doc7, 131, 1, 131, 100)
AddFldIL.Emit(OpCodes.Br, cont4)
AddFldIL.MarkLabel(fa4)
AddFldIL.MarkSequencePoint(doc7, 132, 1, 132, 100)
AddFldIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa5 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
Dim tru5 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
Dim cont5 As System.Reflection.Emit.Label = AddFldIL.DefineLabel()
AddFldIL.Emit(OpCodes.Beq, fa5)
AddFldIL.Emit(OpCodes.Br, tru5)
AddFldIL.MarkLabel(tru5)
AddFldIL.MarkSequencePoint(doc7, 133, 1, 133, 100)
AddFldIL.Emit(OpCodes.Br, label2)
AddFldIL.MarkSequencePoint(doc7, 134, 1, 134, 100)
AddFldIL.Emit(OpCodes.Br, cont5)
AddFldIL.MarkLabel(fa5)
AddFldIL.MarkSequencePoint(doc7, 135, 1, 135, 100)
AddFldIL.Emit(OpCodes.Br, label3)
AddFldIL.MarkSequencePoint(doc7, 136, 1, 136, 100)
AddFldIL.Emit(OpCodes.Br, cont5)
AddFldIL.MarkLabel(cont5)
AddFldIL.MarkSequencePoint(doc7, 137, 1, 137, 100)
AddFldIL.Emit(OpCodes.Br, cont4)
AddFldIL.MarkLabel(cont4)
AddFldIL.MarkSequencePoint(doc7, 139, 1, 139, 100)
AddFldIL.MarkLabel(label3)
AddFldIL.MarkSequencePoint(doc7, 141, 1, 141, 100)
AddFldIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType()
Typ02 = Typ
AddFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddFldIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddFldIL.Emit(OpCodes.Ldloc, 0)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem")
AddFldIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType().GetElementType())
AddFldIL.MarkSequencePoint(doc7, 143, 1, 143, 100)
AddFldIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType()
AddFldIL.Emit(OpCodes.Stsfld, FldLst)
AddFldIL.MarkSequencePoint(doc7, 145, 1, 145, 100)
AddFldIL.Emit(OpCodes.Ret)
Dim typ4(-1) As Type
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = GetType(System.String)
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = GetType(System.Type)
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = GetType(FieldBuilder)
Dim AddNestedFld As MethodBuilder = SymTable.DefineMethod("AddNestedFld", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ4)
Dim AddNestedFldIL As ILGenerator = AddNestedFld.GetILGenerator()
Dim AddNestedFldparam01 As ParameterBuilder = AddNestedFld.DefineParameter(1, ParameterAttributes.None, "nme")
Dim AddNestedFldparam02 As ParameterBuilder = AddNestedFld.DefineParameter(2, ParameterAttributes.None, "typ")
Dim AddNestedFldparam03 As ParameterBuilder = AddNestedFld.DefineParameter(3, ParameterAttributes.None, "fld")
AddNestedFldIL.MarkSequencePoint(doc7, 149, 1, 149, 100)
Dim locbldr12 As LocalBuilder = AddNestedFldIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
locbldr12.SetLocalSymInfo("vr")
Dim typ5(-1) As Type
AddNestedFldIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ5(UBound(typ5) + 1)
typ5(UBound(typ5)) = Typ
AddNestedFldIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ5(UBound(typ5) + 1)
typ5(UBound(typ5)) = Typ
AddNestedFldIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(FieldBuilder)
ReDim Preserve typ5(UBound(typ5) + 1)
typ5(UBound(typ5)) = Typ
AddNestedFldIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").GetConstructor(typ5))
AddNestedFldIL.Emit(OpCodes.Stloc, 0)
AddNestedFldIL.MarkSequencePoint(doc7, 151, 1, 151, 100)
Dim locbldr13 As LocalBuilder = AddNestedFldIL.DeclareLocal(GetType(System.Int32))
locbldr13.SetLocalSymInfo("len")
AddNestedFldIL.Emit(OpCodes.Ldsfld, NestedFldLst)
Typ = NestedFldLst.FieldType
AddNestedFldIL.Emit(OpCodes.Ldlen)
AddNestedFldIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Stloc, 1)
AddNestedFldIL.MarkSequencePoint(doc7, 152, 1, 152, 100)
Dim locbldr14 As LocalBuilder = AddNestedFldIL.DeclareLocal(GetType(System.Int32))
locbldr14.SetLocalSymInfo("destl")
AddNestedFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Add)
AddNestedFldIL.Emit(OpCodes.Stloc, 2)
AddNestedFldIL.MarkSequencePoint(doc7, 153, 1, 153, 100)
Dim locbldr15 As LocalBuilder = AddNestedFldIL.DeclareLocal(GetType(System.Int32))
locbldr15.SetLocalSymInfo("stopel")
AddNestedFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Sub)
AddNestedFldIL.Emit(OpCodes.Stloc, 3)
AddNestedFldIL.MarkSequencePoint(doc7, 154, 1, 154, 100)
Dim locbldr16 As LocalBuilder = AddNestedFldIL.DeclareLocal(GetType(System.Int32))
locbldr16.SetLocalSymInfo("i")
AddNestedFldIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Stloc, 4)
AddNestedFldIL.MarkSequencePoint(doc7, 156, 1, 156, 100)
Dim locbldr17 As LocalBuilder = AddNestedFldIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType())
locbldr17.SetLocalSymInfo("destarr")
AddNestedFldIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Conv_U)
AddNestedFldIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
AddNestedFldIL.Emit(OpCodes.Stloc, 5)
AddNestedFldIL.MarkSequencePoint(doc7, 158, 1, 158, 100)
Dim label4 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
AddNestedFldIL.MarkSequencePoint(doc7, 159, 1, 159, 100)
Dim label5 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
AddNestedFldIL.MarkSequencePoint(doc7, 161, 1, 161, 100)
AddNestedFldIL.MarkLabel(label4)
AddNestedFldIL.MarkSequencePoint(doc7, 163, 1, 163, 100)
AddNestedFldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Add)
AddNestedFldIL.Emit(OpCodes.Stloc, 4)
AddNestedFldIL.MarkSequencePoint(doc7, 165, 1, 165, 100)
AddNestedFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa6 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
Dim tru6 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
Dim cont6 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
AddNestedFldIL.Emit(OpCodes.Bgt, tru6)
AddNestedFldIL.Emit(OpCodes.Br, fa6)
AddNestedFldIL.MarkLabel(tru6)
AddNestedFldIL.MarkSequencePoint(doc7, 167, 1, 167, 100)
AddNestedFldIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType()
Typ02 = Typ
AddNestedFldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNestedFldIL.Emit(OpCodes.Ldsfld, NestedFldLst)
Typ = NestedFldLst.FieldType
Typ02 = Typ
AddNestedFldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNestedFldIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddNestedFldIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType().GetElementType())
AddNestedFldIL.MarkSequencePoint(doc7, 169, 1, 169, 100)
AddNestedFldIL.Emit(OpCodes.Br, cont6)
AddNestedFldIL.MarkLabel(fa6)
AddNestedFldIL.Emit(OpCodes.Br, cont6)
AddNestedFldIL.MarkLabel(cont6)
AddNestedFldIL.MarkSequencePoint(doc7, 171, 1, 171, 100)
AddNestedFldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
Dim fa7 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
Dim tru7 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
Dim cont7 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
AddNestedFldIL.Emit(OpCodes.Beq, tru7)
AddNestedFldIL.Emit(OpCodes.Br, fa7)
AddNestedFldIL.MarkLabel(tru7)
AddNestedFldIL.MarkSequencePoint(doc7, 172, 1, 172, 100)
AddNestedFldIL.Emit(OpCodes.Br, label5)
AddNestedFldIL.MarkSequencePoint(doc7, 173, 1, 173, 100)
AddNestedFldIL.Emit(OpCodes.Br, cont7)
AddNestedFldIL.MarkLabel(fa7)
AddNestedFldIL.MarkSequencePoint(doc7, 174, 1, 174, 100)
AddNestedFldIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa8 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
Dim tru8 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
Dim cont8 As System.Reflection.Emit.Label = AddNestedFldIL.DefineLabel()
AddNestedFldIL.Emit(OpCodes.Beq, fa8)
AddNestedFldIL.Emit(OpCodes.Br, tru8)
AddNestedFldIL.MarkLabel(tru8)
AddNestedFldIL.MarkSequencePoint(doc7, 175, 1, 175, 100)
AddNestedFldIL.Emit(OpCodes.Br, label4)
AddNestedFldIL.MarkSequencePoint(doc7, 176, 1, 176, 100)
AddNestedFldIL.Emit(OpCodes.Br, cont8)
AddNestedFldIL.MarkLabel(fa8)
AddNestedFldIL.MarkSequencePoint(doc7, 177, 1, 177, 100)
AddNestedFldIL.Emit(OpCodes.Br, label5)
AddNestedFldIL.MarkSequencePoint(doc7, 178, 1, 178, 100)
AddNestedFldIL.Emit(OpCodes.Br, cont8)
AddNestedFldIL.MarkLabel(cont8)
AddNestedFldIL.MarkSequencePoint(doc7, 179, 1, 179, 100)
AddNestedFldIL.Emit(OpCodes.Br, cont7)
AddNestedFldIL.MarkLabel(cont7)
AddNestedFldIL.MarkSequencePoint(doc7, 181, 1, 181, 100)
AddNestedFldIL.MarkLabel(label5)
AddNestedFldIL.MarkSequencePoint(doc7, 183, 1, 183, 100)
AddNestedFldIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType()
Typ02 = Typ
AddNestedFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedFldIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNestedFldIL.Emit(OpCodes.Ldloc, 0)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem")
AddNestedFldIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType().GetElementType())
AddNestedFldIL.MarkSequencePoint(doc7, 185, 1, 185, 100)
AddNestedFldIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").MakeArrayType()
AddNestedFldIL.Emit(OpCodes.Stsfld, NestedFldLst)
AddNestedFldIL.MarkSequencePoint(doc7, 187, 1, 187, 100)
AddNestedFldIL.Emit(OpCodes.Ret)
Dim typ6(-1) As Type
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = GetType(System.String)
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = GetType(System.Type)
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = GetType(System.Type).MakeArrayType()
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = GetType(MethodBuilder)
Dim AddMet As MethodBuilder = SymTable.DefineMethod("AddMet", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ6)
Dim AddMetIL As ILGenerator = AddMet.GetILGenerator()
Dim AddMetparam01 As ParameterBuilder = AddMet.DefineParameter(1, ParameterAttributes.None, "nme")
Dim AddMetparam02 As ParameterBuilder = AddMet.DefineParameter(2, ParameterAttributes.None, "typ")
Dim AddMetparam03 As ParameterBuilder = AddMet.DefineParameter(3, ParameterAttributes.None, "ptyps")
Dim AddMetparam04 As ParameterBuilder = AddMet.DefineParameter(4, ParameterAttributes.None, "met")
AddMetIL.MarkSequencePoint(doc7, 192, 1, 192, 100)
Dim locbldr18 As LocalBuilder = AddMetIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
locbldr18.SetLocalSymInfo("vr")
Dim typ7(-1) As Type
AddMetIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = Typ
AddMetIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = Typ
AddMetIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = Typ
AddMetIL.Emit(OpCodes.Ldarg, 3)
Typ = GetType(MethodBuilder)
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = Typ
AddMetIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").GetConstructor(typ7))
AddMetIL.Emit(OpCodes.Stloc, 0)
AddMetIL.MarkSequencePoint(doc7, 194, 1, 194, 100)
Dim locbldr19 As LocalBuilder = AddMetIL.DeclareLocal(GetType(System.Int32))
locbldr19.SetLocalSymInfo("len")
AddMetIL.Emit(OpCodes.Ldsfld, MetLst)
Typ = MetLst.FieldType
AddMetIL.Emit(OpCodes.Ldlen)
AddMetIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Stloc, 1)
AddMetIL.MarkSequencePoint(doc7, 195, 1, 195, 100)
Dim locbldr20 As LocalBuilder = AddMetIL.DeclareLocal(GetType(System.Int32))
locbldr20.SetLocalSymInfo("destl")
AddMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Add)
AddMetIL.Emit(OpCodes.Stloc, 2)
AddMetIL.MarkSequencePoint(doc7, 196, 1, 196, 100)
Dim locbldr21 As LocalBuilder = AddMetIL.DeclareLocal(GetType(System.Int32))
locbldr21.SetLocalSymInfo("stopel")
AddMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Sub)
AddMetIL.Emit(OpCodes.Stloc, 3)
AddMetIL.MarkSequencePoint(doc7, 197, 1, 197, 100)
Dim locbldr22 As LocalBuilder = AddMetIL.DeclareLocal(GetType(System.Int32))
locbldr22.SetLocalSymInfo("i")
AddMetIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Stloc, 4)
AddMetIL.MarkSequencePoint(doc7, 199, 1, 199, 100)
Dim locbldr23 As LocalBuilder = AddMetIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType())
locbldr23.SetLocalSymInfo("destarr")
AddMetIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Conv_U)
AddMetIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
AddMetIL.Emit(OpCodes.Stloc, 5)
AddMetIL.MarkSequencePoint(doc7, 201, 1, 201, 100)
Dim label6 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
AddMetIL.MarkSequencePoint(doc7, 202, 1, 202, 100)
Dim label7 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
AddMetIL.MarkSequencePoint(doc7, 204, 1, 204, 100)
AddMetIL.MarkLabel(label6)
AddMetIL.MarkSequencePoint(doc7, 206, 1, 206, 100)
AddMetIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Add)
AddMetIL.Emit(OpCodes.Stloc, 4)
AddMetIL.MarkSequencePoint(doc7, 208, 1, 208, 100)
AddMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa9 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
Dim tru9 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
Dim cont9 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
AddMetIL.Emit(OpCodes.Bgt, tru9)
AddMetIL.Emit(OpCodes.Br, fa9)
AddMetIL.MarkLabel(tru9)
AddMetIL.MarkSequencePoint(doc7, 210, 1, 210, 100)
AddMetIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType()
Typ02 = Typ
AddMetIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddMetIL.Emit(OpCodes.Ldsfld, MetLst)
Typ = MetLst.FieldType
Typ02 = Typ
AddMetIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddMetIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddMetIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType().GetElementType())
AddMetIL.MarkSequencePoint(doc7, 212, 1, 212, 100)
AddMetIL.Emit(OpCodes.Br, cont9)
AddMetIL.MarkLabel(fa9)
AddMetIL.Emit(OpCodes.Br, cont9)
AddMetIL.MarkLabel(cont9)
AddMetIL.MarkSequencePoint(doc7, 214, 1, 214, 100)
AddMetIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
Dim fa10 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
Dim tru10 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
Dim cont10 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
AddMetIL.Emit(OpCodes.Beq, tru10)
AddMetIL.Emit(OpCodes.Br, fa10)
AddMetIL.MarkLabel(tru10)
AddMetIL.MarkSequencePoint(doc7, 215, 1, 215, 100)
AddMetIL.Emit(OpCodes.Br, label7)
AddMetIL.MarkSequencePoint(doc7, 216, 1, 216, 100)
AddMetIL.Emit(OpCodes.Br, cont10)
AddMetIL.MarkLabel(fa10)
AddMetIL.MarkSequencePoint(doc7, 217, 1, 217, 100)
AddMetIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa11 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
Dim tru11 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
Dim cont11 As System.Reflection.Emit.Label = AddMetIL.DefineLabel()
AddMetIL.Emit(OpCodes.Beq, fa11)
AddMetIL.Emit(OpCodes.Br, tru11)
AddMetIL.MarkLabel(tru11)
AddMetIL.MarkSequencePoint(doc7, 218, 1, 218, 100)
AddMetIL.Emit(OpCodes.Br, label6)
AddMetIL.MarkSequencePoint(doc7, 219, 1, 219, 100)
AddMetIL.Emit(OpCodes.Br, cont11)
AddMetIL.MarkLabel(fa11)
AddMetIL.MarkSequencePoint(doc7, 220, 1, 220, 100)
AddMetIL.Emit(OpCodes.Br, label7)
AddMetIL.MarkSequencePoint(doc7, 221, 1, 221, 100)
AddMetIL.Emit(OpCodes.Br, cont11)
AddMetIL.MarkLabel(cont11)
AddMetIL.MarkSequencePoint(doc7, 222, 1, 222, 100)
AddMetIL.Emit(OpCodes.Br, cont10)
AddMetIL.MarkLabel(cont10)
AddMetIL.MarkSequencePoint(doc7, 224, 1, 224, 100)
AddMetIL.MarkLabel(label7)
AddMetIL.MarkSequencePoint(doc7, 226, 1, 226, 100)
AddMetIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType()
Typ02 = Typ
AddMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddMetIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddMetIL.Emit(OpCodes.Ldloc, 0)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem")
AddMetIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType().GetElementType())
AddMetIL.MarkSequencePoint(doc7, 228, 1, 228, 100)
AddMetIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType()
AddMetIL.Emit(OpCodes.Stsfld, MetLst)
AddMetIL.MarkSequencePoint(doc7, 230, 1, 230, 100)
AddMetIL.Emit(OpCodes.Ret)
Dim typ8(-1) As Type
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = GetType(System.String)
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = GetType(System.Type)
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = GetType(System.Type).MakeArrayType()
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = GetType(MethodBuilder)
Dim AddNestedMet As MethodBuilder = SymTable.DefineMethod("AddNestedMet", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ8)
Dim AddNestedMetIL As ILGenerator = AddNestedMet.GetILGenerator()
Dim AddNestedMetparam01 As ParameterBuilder = AddNestedMet.DefineParameter(1, ParameterAttributes.None, "nme")
Dim AddNestedMetparam02 As ParameterBuilder = AddNestedMet.DefineParameter(2, ParameterAttributes.None, "typ")
Dim AddNestedMetparam03 As ParameterBuilder = AddNestedMet.DefineParameter(3, ParameterAttributes.None, "ptyps")
Dim AddNestedMetparam04 As ParameterBuilder = AddNestedMet.DefineParameter(4, ParameterAttributes.None, "met")
AddNestedMetIL.MarkSequencePoint(doc7, 235, 1, 235, 100)
Dim locbldr24 As LocalBuilder = AddNestedMetIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
locbldr24.SetLocalSymInfo("vr")
Dim typ9(-1) As Type
AddNestedMetIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = Typ
AddNestedMetIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = Typ
AddNestedMetIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = Typ
AddNestedMetIL.Emit(OpCodes.Ldarg, 3)
Typ = GetType(MethodBuilder)
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = Typ
AddNestedMetIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").GetConstructor(typ9))
AddNestedMetIL.Emit(OpCodes.Stloc, 0)
AddNestedMetIL.MarkSequencePoint(doc7, 237, 1, 237, 100)
Dim locbldr25 As LocalBuilder = AddNestedMetIL.DeclareLocal(GetType(System.Int32))
locbldr25.SetLocalSymInfo("len")
AddNestedMetIL.Emit(OpCodes.Ldsfld, NestedMetLst)
Typ = NestedMetLst.FieldType
AddNestedMetIL.Emit(OpCodes.Ldlen)
AddNestedMetIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Stloc, 1)
AddNestedMetIL.MarkSequencePoint(doc7, 238, 1, 238, 100)
Dim locbldr26 As LocalBuilder = AddNestedMetIL.DeclareLocal(GetType(System.Int32))
locbldr26.SetLocalSymInfo("destl")
AddNestedMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Add)
AddNestedMetIL.Emit(OpCodes.Stloc, 2)
AddNestedMetIL.MarkSequencePoint(doc7, 239, 1, 239, 100)
Dim locbldr27 As LocalBuilder = AddNestedMetIL.DeclareLocal(GetType(System.Int32))
locbldr27.SetLocalSymInfo("stopel")
AddNestedMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Sub)
AddNestedMetIL.Emit(OpCodes.Stloc, 3)
AddNestedMetIL.MarkSequencePoint(doc7, 240, 1, 240, 100)
Dim locbldr28 As LocalBuilder = AddNestedMetIL.DeclareLocal(GetType(System.Int32))
locbldr28.SetLocalSymInfo("i")
AddNestedMetIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Stloc, 4)
AddNestedMetIL.MarkSequencePoint(doc7, 242, 1, 242, 100)
Dim locbldr29 As LocalBuilder = AddNestedMetIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType())
locbldr29.SetLocalSymInfo("destarr")
AddNestedMetIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Conv_U)
AddNestedMetIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem"))
AddNestedMetIL.Emit(OpCodes.Stloc, 5)
AddNestedMetIL.MarkSequencePoint(doc7, 244, 1, 244, 100)
Dim label8 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
AddNestedMetIL.MarkSequencePoint(doc7, 245, 1, 245, 100)
Dim label9 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
AddNestedMetIL.MarkSequencePoint(doc7, 247, 1, 247, 100)
AddNestedMetIL.MarkLabel(label8)
AddNestedMetIL.MarkSequencePoint(doc7, 249, 1, 249, 100)
AddNestedMetIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Add)
AddNestedMetIL.Emit(OpCodes.Stloc, 4)
AddNestedMetIL.MarkSequencePoint(doc7, 251, 1, 251, 100)
AddNestedMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa12 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
Dim tru12 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
Dim cont12 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
AddNestedMetIL.Emit(OpCodes.Bgt, tru12)
AddNestedMetIL.Emit(OpCodes.Br, fa12)
AddNestedMetIL.MarkLabel(tru12)
AddNestedMetIL.MarkSequencePoint(doc7, 253, 1, 253, 100)
AddNestedMetIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType()
Typ02 = Typ
AddNestedMetIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNestedMetIL.Emit(OpCodes.Ldsfld, NestedMetLst)
Typ = NestedMetLst.FieldType
Typ02 = Typ
AddNestedMetIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNestedMetIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddNestedMetIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType().GetElementType())
AddNestedMetIL.MarkSequencePoint(doc7, 255, 1, 255, 100)
AddNestedMetIL.Emit(OpCodes.Br, cont12)
AddNestedMetIL.MarkLabel(fa12)
AddNestedMetIL.Emit(OpCodes.Br, cont12)
AddNestedMetIL.MarkLabel(cont12)
AddNestedMetIL.MarkSequencePoint(doc7, 257, 1, 257, 100)
AddNestedMetIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
Dim fa13 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
Dim tru13 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
Dim cont13 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
AddNestedMetIL.Emit(OpCodes.Beq, tru13)
AddNestedMetIL.Emit(OpCodes.Br, fa13)
AddNestedMetIL.MarkLabel(tru13)
AddNestedMetIL.MarkSequencePoint(doc7, 258, 1, 258, 100)
AddNestedMetIL.Emit(OpCodes.Br, label9)
AddNestedMetIL.MarkSequencePoint(doc7, 259, 1, 259, 100)
AddNestedMetIL.Emit(OpCodes.Br, cont13)
AddNestedMetIL.MarkLabel(fa13)
AddNestedMetIL.MarkSequencePoint(doc7, 260, 1, 260, 100)
AddNestedMetIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa14 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
Dim tru14 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
Dim cont14 As System.Reflection.Emit.Label = AddNestedMetIL.DefineLabel()
AddNestedMetIL.Emit(OpCodes.Beq, fa14)
AddNestedMetIL.Emit(OpCodes.Br, tru14)
AddNestedMetIL.MarkLabel(tru14)
AddNestedMetIL.MarkSequencePoint(doc7, 261, 1, 261, 100)
AddNestedMetIL.Emit(OpCodes.Br, label8)
AddNestedMetIL.MarkSequencePoint(doc7, 262, 1, 262, 100)
AddNestedMetIL.Emit(OpCodes.Br, cont14)
AddNestedMetIL.MarkLabel(fa14)
AddNestedMetIL.MarkSequencePoint(doc7, 263, 1, 263, 100)
AddNestedMetIL.Emit(OpCodes.Br, label9)
AddNestedMetIL.MarkSequencePoint(doc7, 264, 1, 264, 100)
AddNestedMetIL.Emit(OpCodes.Br, cont14)
AddNestedMetIL.MarkLabel(cont14)
AddNestedMetIL.MarkSequencePoint(doc7, 265, 1, 265, 100)
AddNestedMetIL.Emit(OpCodes.Br, cont13)
AddNestedMetIL.MarkLabel(cont13)
AddNestedMetIL.MarkSequencePoint(doc7, 267, 1, 267, 100)
AddNestedMetIL.MarkLabel(label9)
AddNestedMetIL.MarkSequencePoint(doc7, 269, 1, 269, 100)
AddNestedMetIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType()
Typ02 = Typ
AddNestedMetIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedMetIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNestedMetIL.Emit(OpCodes.Ldloc, 0)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem")
AddNestedMetIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType().GetElementType())
AddNestedMetIL.MarkSequencePoint(doc7, 271, 1, 271, 100)
AddNestedMetIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.MethodItem").MakeArrayType()
AddNestedMetIL.Emit(OpCodes.Stsfld, NestedMetLst)
AddNestedMetIL.MarkSequencePoint(doc7, 273, 1, 273, 100)
AddNestedMetIL.Emit(OpCodes.Ret)
Dim typ10(-1) As Type
ReDim Preserve typ10(UBound(typ10) + 1)
typ10(UBound(typ10)) = GetType(System.Type).MakeArrayType()
ReDim Preserve typ10(UBound(typ10) + 1)
typ10(UBound(typ10)) = GetType(ConstructorBuilder)
Dim AddCtor As MethodBuilder = SymTable.DefineMethod("AddCtor", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ10)
Dim AddCtorIL As ILGenerator = AddCtor.GetILGenerator()
Dim AddCtorparam01 As ParameterBuilder = AddCtor.DefineParameter(1, ParameterAttributes.None, "ptyps")
Dim AddCtorparam02 As ParameterBuilder = AddCtor.DefineParameter(2, ParameterAttributes.None, "met")
AddCtorIL.MarkSequencePoint(doc7, 278, 1, 278, 100)
Dim locbldr30 As LocalBuilder = AddCtorIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
locbldr30.SetLocalSymInfo("vr")
Dim typ11(-1) As Type
AddCtorIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ11(UBound(typ11) + 1)
typ11(UBound(typ11)) = Typ
AddCtorIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(ConstructorBuilder)
ReDim Preserve typ11(UBound(typ11) + 1)
typ11(UBound(typ11)) = Typ
AddCtorIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").GetConstructor(typ11))
AddCtorIL.Emit(OpCodes.Stloc, 0)
AddCtorIL.MarkSequencePoint(doc7, 280, 1, 280, 100)
Dim locbldr31 As LocalBuilder = AddCtorIL.DeclareLocal(GetType(System.Int32))
locbldr31.SetLocalSymInfo("len")
AddCtorIL.Emit(OpCodes.Ldsfld, CtorLst)
Typ = CtorLst.FieldType
AddCtorIL.Emit(OpCodes.Ldlen)
AddCtorIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Stloc, 1)
AddCtorIL.MarkSequencePoint(doc7, 281, 1, 281, 100)
Dim locbldr32 As LocalBuilder = AddCtorIL.DeclareLocal(GetType(System.Int32))
locbldr32.SetLocalSymInfo("destl")
AddCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Add)
AddCtorIL.Emit(OpCodes.Stloc, 2)
AddCtorIL.MarkSequencePoint(doc7, 282, 1, 282, 100)
Dim locbldr33 As LocalBuilder = AddCtorIL.DeclareLocal(GetType(System.Int32))
locbldr33.SetLocalSymInfo("stopel")
AddCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Sub)
AddCtorIL.Emit(OpCodes.Stloc, 3)
AddCtorIL.MarkSequencePoint(doc7, 283, 1, 283, 100)
Dim locbldr34 As LocalBuilder = AddCtorIL.DeclareLocal(GetType(System.Int32))
locbldr34.SetLocalSymInfo("i")
AddCtorIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Stloc, 4)
AddCtorIL.MarkSequencePoint(doc7, 285, 1, 285, 100)
Dim locbldr35 As LocalBuilder = AddCtorIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType())
locbldr35.SetLocalSymInfo("destarr")
AddCtorIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Conv_U)
AddCtorIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
AddCtorIL.Emit(OpCodes.Stloc, 5)
AddCtorIL.MarkSequencePoint(doc7, 287, 1, 287, 100)
Dim label10 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
AddCtorIL.MarkSequencePoint(doc7, 288, 1, 288, 100)
Dim label11 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
AddCtorIL.MarkSequencePoint(doc7, 290, 1, 290, 100)
AddCtorIL.MarkLabel(label10)
AddCtorIL.MarkSequencePoint(doc7, 292, 1, 292, 100)
AddCtorIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Add)
AddCtorIL.Emit(OpCodes.Stloc, 4)
AddCtorIL.MarkSequencePoint(doc7, 294, 1, 294, 100)
AddCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa15 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
Dim tru15 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
Dim cont15 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
AddCtorIL.Emit(OpCodes.Bgt, tru15)
AddCtorIL.Emit(OpCodes.Br, fa15)
AddCtorIL.MarkLabel(tru15)
AddCtorIL.MarkSequencePoint(doc7, 296, 1, 296, 100)
AddCtorIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType()
Typ02 = Typ
AddCtorIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddCtorIL.Emit(OpCodes.Ldsfld, CtorLst)
Typ = CtorLst.FieldType
Typ02 = Typ
AddCtorIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddCtorIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddCtorIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType().GetElementType())
AddCtorIL.MarkSequencePoint(doc7, 298, 1, 298, 100)
AddCtorIL.Emit(OpCodes.Br, cont15)
AddCtorIL.MarkLabel(fa15)
AddCtorIL.Emit(OpCodes.Br, cont15)
AddCtorIL.MarkLabel(cont15)
AddCtorIL.MarkSequencePoint(doc7, 300, 1, 300, 100)
AddCtorIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
Dim fa16 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
Dim tru16 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
Dim cont16 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
AddCtorIL.Emit(OpCodes.Beq, tru16)
AddCtorIL.Emit(OpCodes.Br, fa16)
AddCtorIL.MarkLabel(tru16)
AddCtorIL.MarkSequencePoint(doc7, 301, 1, 301, 100)
AddCtorIL.Emit(OpCodes.Br, label11)
AddCtorIL.MarkSequencePoint(doc7, 302, 1, 302, 100)
AddCtorIL.Emit(OpCodes.Br, cont16)
AddCtorIL.MarkLabel(fa16)
AddCtorIL.MarkSequencePoint(doc7, 303, 1, 303, 100)
AddCtorIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa17 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
Dim tru17 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
Dim cont17 As System.Reflection.Emit.Label = AddCtorIL.DefineLabel()
AddCtorIL.Emit(OpCodes.Beq, fa17)
AddCtorIL.Emit(OpCodes.Br, tru17)
AddCtorIL.MarkLabel(tru17)
AddCtorIL.MarkSequencePoint(doc7, 304, 1, 304, 100)
AddCtorIL.Emit(OpCodes.Br, label10)
AddCtorIL.MarkSequencePoint(doc7, 305, 1, 305, 100)
AddCtorIL.Emit(OpCodes.Br, cont17)
AddCtorIL.MarkLabel(fa17)
AddCtorIL.MarkSequencePoint(doc7, 306, 1, 306, 100)
AddCtorIL.Emit(OpCodes.Br, label11)
AddCtorIL.MarkSequencePoint(doc7, 307, 1, 307, 100)
AddCtorIL.Emit(OpCodes.Br, cont17)
AddCtorIL.MarkLabel(cont17)
AddCtorIL.MarkSequencePoint(doc7, 308, 1, 308, 100)
AddCtorIL.Emit(OpCodes.Br, cont16)
AddCtorIL.MarkLabel(cont16)
AddCtorIL.MarkSequencePoint(doc7, 310, 1, 310, 100)
AddCtorIL.MarkLabel(label11)
AddCtorIL.MarkSequencePoint(doc7, 312, 1, 312, 100)
AddCtorIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType()
Typ02 = Typ
AddCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddCtorIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddCtorIL.Emit(OpCodes.Ldloc, 0)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem")
AddCtorIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType().GetElementType())
AddCtorIL.MarkSequencePoint(doc7, 314, 1, 314, 100)
AddCtorIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType()
AddCtorIL.Emit(OpCodes.Stsfld, CtorLst)
AddCtorIL.MarkSequencePoint(doc7, 316, 1, 316, 100)
AddCtorIL.Emit(OpCodes.Ret)
Dim typ12(-1) As Type
ReDim Preserve typ12(UBound(typ12) + 1)
typ12(UBound(typ12)) = GetType(System.Type).MakeArrayType()
ReDim Preserve typ12(UBound(typ12) + 1)
typ12(UBound(typ12)) = GetType(ConstructorBuilder)
Dim AddNestedCtor As MethodBuilder = SymTable.DefineMethod("AddNestedCtor", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ12)
Dim AddNestedCtorIL As ILGenerator = AddNestedCtor.GetILGenerator()
Dim AddNestedCtorparam01 As ParameterBuilder = AddNestedCtor.DefineParameter(1, ParameterAttributes.None, "ptyps")
Dim AddNestedCtorparam02 As ParameterBuilder = AddNestedCtor.DefineParameter(2, ParameterAttributes.None, "met")
AddNestedCtorIL.MarkSequencePoint(doc7, 321, 1, 321, 100)
Dim locbldr36 As LocalBuilder = AddNestedCtorIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
locbldr36.SetLocalSymInfo("vr")
Dim typ13(-1) As Type
AddNestedCtorIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ13(UBound(typ13) + 1)
typ13(UBound(typ13)) = Typ
AddNestedCtorIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(ConstructorBuilder)
ReDim Preserve typ13(UBound(typ13) + 1)
typ13(UBound(typ13)) = Typ
AddNestedCtorIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").GetConstructor(typ13))
AddNestedCtorIL.Emit(OpCodes.Stloc, 0)
AddNestedCtorIL.MarkSequencePoint(doc7, 323, 1, 323, 100)
Dim locbldr37 As LocalBuilder = AddNestedCtorIL.DeclareLocal(GetType(System.Int32))
locbldr37.SetLocalSymInfo("len")
AddNestedCtorIL.Emit(OpCodes.Ldsfld, NestedCtorLst)
Typ = NestedCtorLst.FieldType
AddNestedCtorIL.Emit(OpCodes.Ldlen)
AddNestedCtorIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Stloc, 1)
AddNestedCtorIL.MarkSequencePoint(doc7, 324, 1, 324, 100)
Dim locbldr38 As LocalBuilder = AddNestedCtorIL.DeclareLocal(GetType(System.Int32))
locbldr38.SetLocalSymInfo("destl")
AddNestedCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Add)
AddNestedCtorIL.Emit(OpCodes.Stloc, 2)
AddNestedCtorIL.MarkSequencePoint(doc7, 325, 1, 325, 100)
Dim locbldr39 As LocalBuilder = AddNestedCtorIL.DeclareLocal(GetType(System.Int32))
locbldr39.SetLocalSymInfo("stopel")
AddNestedCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Sub)
AddNestedCtorIL.Emit(OpCodes.Stloc, 3)
AddNestedCtorIL.MarkSequencePoint(doc7, 326, 1, 326, 100)
Dim locbldr40 As LocalBuilder = AddNestedCtorIL.DeclareLocal(GetType(System.Int32))
locbldr40.SetLocalSymInfo("i")
AddNestedCtorIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Stloc, 4)
AddNestedCtorIL.MarkSequencePoint(doc7, 328, 1, 328, 100)
Dim locbldr41 As LocalBuilder = AddNestedCtorIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType())
locbldr41.SetLocalSymInfo("destarr")
AddNestedCtorIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Conv_U)
AddNestedCtorIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem"))
AddNestedCtorIL.Emit(OpCodes.Stloc, 5)
AddNestedCtorIL.MarkSequencePoint(doc7, 330, 1, 330, 100)
Dim label12 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
AddNestedCtorIL.MarkSequencePoint(doc7, 331, 1, 331, 100)
Dim label13 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
AddNestedCtorIL.MarkSequencePoint(doc7, 333, 1, 333, 100)
AddNestedCtorIL.MarkLabel(label12)
AddNestedCtorIL.MarkSequencePoint(doc7, 335, 1, 335, 100)
AddNestedCtorIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Add)
AddNestedCtorIL.Emit(OpCodes.Stloc, 4)
AddNestedCtorIL.MarkSequencePoint(doc7, 337, 1, 337, 100)
AddNestedCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa18 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
Dim tru18 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
Dim cont18 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
AddNestedCtorIL.Emit(OpCodes.Bgt, tru18)
AddNestedCtorIL.Emit(OpCodes.Br, fa18)
AddNestedCtorIL.MarkLabel(tru18)
AddNestedCtorIL.MarkSequencePoint(doc7, 339, 1, 339, 100)
AddNestedCtorIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType()
Typ02 = Typ
AddNestedCtorIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNestedCtorIL.Emit(OpCodes.Ldsfld, NestedCtorLst)
Typ = NestedCtorLst.FieldType
Typ02 = Typ
AddNestedCtorIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNestedCtorIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddNestedCtorIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType().GetElementType())
AddNestedCtorIL.MarkSequencePoint(doc7, 341, 1, 341, 100)
AddNestedCtorIL.Emit(OpCodes.Br, cont18)
AddNestedCtorIL.MarkLabel(fa18)
AddNestedCtorIL.Emit(OpCodes.Br, cont18)
AddNestedCtorIL.MarkLabel(cont18)
AddNestedCtorIL.MarkSequencePoint(doc7, 343, 1, 343, 100)
AddNestedCtorIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
Dim fa19 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
Dim tru19 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
Dim cont19 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
AddNestedCtorIL.Emit(OpCodes.Beq, tru19)
AddNestedCtorIL.Emit(OpCodes.Br, fa19)
AddNestedCtorIL.MarkLabel(tru19)
AddNestedCtorIL.MarkSequencePoint(doc7, 344, 1, 344, 100)
AddNestedCtorIL.Emit(OpCodes.Br, label13)
AddNestedCtorIL.MarkSequencePoint(doc7, 345, 1, 345, 100)
AddNestedCtorIL.Emit(OpCodes.Br, cont19)
AddNestedCtorIL.MarkLabel(fa19)
AddNestedCtorIL.MarkSequencePoint(doc7, 346, 1, 346, 100)
AddNestedCtorIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa20 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
Dim tru20 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
Dim cont20 As System.Reflection.Emit.Label = AddNestedCtorIL.DefineLabel()
AddNestedCtorIL.Emit(OpCodes.Beq, fa20)
AddNestedCtorIL.Emit(OpCodes.Br, tru20)
AddNestedCtorIL.MarkLabel(tru20)
AddNestedCtorIL.MarkSequencePoint(doc7, 347, 1, 347, 100)
AddNestedCtorIL.Emit(OpCodes.Br, label12)
AddNestedCtorIL.MarkSequencePoint(doc7, 348, 1, 348, 100)
AddNestedCtorIL.Emit(OpCodes.Br, cont20)
AddNestedCtorIL.MarkLabel(fa20)
AddNestedCtorIL.MarkSequencePoint(doc7, 349, 1, 349, 100)
AddNestedCtorIL.Emit(OpCodes.Br, label13)
AddNestedCtorIL.MarkSequencePoint(doc7, 350, 1, 350, 100)
AddNestedCtorIL.Emit(OpCodes.Br, cont20)
AddNestedCtorIL.MarkLabel(cont20)
AddNestedCtorIL.MarkSequencePoint(doc7, 351, 1, 351, 100)
AddNestedCtorIL.Emit(OpCodes.Br, cont19)
AddNestedCtorIL.MarkLabel(cont19)
AddNestedCtorIL.MarkSequencePoint(doc7, 353, 1, 353, 100)
AddNestedCtorIL.MarkLabel(label13)
AddNestedCtorIL.MarkSequencePoint(doc7, 355, 1, 355, 100)
AddNestedCtorIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType()
Typ02 = Typ
AddNestedCtorIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
AddNestedCtorIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNestedCtorIL.Emit(OpCodes.Ldloc, 0)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem")
AddNestedCtorIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType().GetElementType())
AddNestedCtorIL.MarkSequencePoint(doc7, 357, 1, 357, 100)
AddNestedCtorIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.CtorItem").MakeArrayType()
AddNestedCtorIL.Emit(OpCodes.Stsfld, NestedCtorLst)
AddNestedCtorIL.MarkSequencePoint(doc7, 359, 1, 359, 100)
AddNestedCtorIL.Emit(OpCodes.Ret)
Dim AddIf As MethodBuilder = SymTable.DefineMethod("AddIf", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim AddIfIL As ILGenerator = AddIf.GetILGenerator()
AddIfIL.MarkSequencePoint(doc7, 363, 1, 363, 100)
Dim locbldr42 As LocalBuilder = AddIfIL.DeclareLocal(GetType(Emit.Label))
locbldr42.SetLocalSymInfo("endl")
AddIfIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("DefineLbl", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("DefineLbl", Type.EmptyTypes).ReturnType
AddIfIL.Emit(OpCodes.Stloc, 0)
AddIfIL.MarkSequencePoint(doc7, 364, 1, 364, 100)
Dim locbldr43 As LocalBuilder = AddIfIL.DeclareLocal(GetType(Emit.Label))
locbldr43.SetLocalSymInfo("nbl")
AddIfIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("DefineLbl", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("DefineLbl", Type.EmptyTypes).ReturnType
AddIfIL.Emit(OpCodes.Stloc, 1)
AddIfIL.MarkSequencePoint(doc7, 365, 1, 365, 100)
Dim locbldr44 As LocalBuilder = AddIfIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem"))
locbldr44.SetLocalSymInfo("vr")
Dim typ14(-1) As Type
AddIfIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Emit.Label)
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = Typ
AddIfIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Emit.Label)
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = Typ
AddIfIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").GetConstructor(typ14))
AddIfIL.Emit(OpCodes.Stloc, 2)
AddIfIL.MarkSequencePoint(doc7, 367, 1, 367, 100)
Dim locbldr45 As LocalBuilder = AddIfIL.DeclareLocal(GetType(System.Int32))
locbldr45.SetLocalSymInfo("len")
AddIfIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
AddIfIL.Emit(OpCodes.Ldlen)
AddIfIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Stloc, 3)
AddIfIL.MarkSequencePoint(doc7, 368, 1, 368, 100)
Dim locbldr46 As LocalBuilder = AddIfIL.DeclareLocal(GetType(System.Int32))
locbldr46.SetLocalSymInfo("destl")
AddIfIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Add)
AddIfIL.Emit(OpCodes.Stloc, 4)
AddIfIL.MarkSequencePoint(doc7, 369, 1, 369, 100)
Dim locbldr47 As LocalBuilder = AddIfIL.DeclareLocal(GetType(System.Int32))
locbldr47.SetLocalSymInfo("stopel")
AddIfIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Sub)
AddIfIL.Emit(OpCodes.Stloc, 5)
AddIfIL.MarkSequencePoint(doc7, 370, 1, 370, 100)
Dim locbldr48 As LocalBuilder = AddIfIL.DeclareLocal(GetType(System.Int32))
locbldr48.SetLocalSymInfo("i")
AddIfIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Stloc, 6)
AddIfIL.MarkSequencePoint(doc7, 372, 1, 372, 100)
Dim locbldr49 As LocalBuilder = AddIfIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").MakeArrayType())
locbldr49.SetLocalSymInfo("destarr")
AddIfIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Conv_U)
AddIfIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem"))
AddIfIL.Emit(OpCodes.Stloc, 7)
AddIfIL.MarkSequencePoint(doc7, 374, 1, 374, 100)
Dim label14 As System.Reflection.Emit.Label = AddIfIL.DefineLabel()
AddIfIL.MarkSequencePoint(doc7, 375, 1, 375, 100)
Dim label15 As System.Reflection.Emit.Label = AddIfIL.DefineLabel()
AddIfIL.MarkSequencePoint(doc7, 377, 1, 377, 100)
AddIfIL.MarkLabel(label14)
AddIfIL.MarkSequencePoint(doc7, 379, 1, 379, 100)
AddIfIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Add)
AddIfIL.Emit(OpCodes.Stloc, 6)
AddIfIL.MarkSequencePoint(doc7, 381, 1, 381, 100)
AddIfIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa21 As System.Reflection.Emit.Label = AddIfIL.DefineLabel()
Dim tru21 As System.Reflection.Emit.Label = AddIfIL.DefineLabel()
Dim cont21 As System.Reflection.Emit.Label = AddIfIL.DefineLabel()
AddIfIL.Emit(OpCodes.Bgt, tru21)
AddIfIL.Emit(OpCodes.Br, fa21)
AddIfIL.MarkLabel(tru21)
AddIfIL.MarkSequencePoint(doc7, 383, 1, 383, 100)
AddIfIL.Emit(OpCodes.Ldloc, 7)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").MakeArrayType()
Typ02 = Typ
AddIfIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddIfIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
Typ02 = Typ
AddIfIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddIfIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
AddIfIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").MakeArrayType().GetElementType())
AddIfIL.MarkSequencePoint(doc7, 385, 1, 385, 100)
AddIfIL.Emit(OpCodes.Br, cont21)
AddIfIL.MarkLabel(fa21)
AddIfIL.Emit(OpCodes.Br, cont21)
AddIfIL.MarkLabel(cont21)
AddIfIL.MarkSequencePoint(doc7, 387, 1, 387, 100)
AddIfIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Int32)
Dim fa22 As System.Reflection.Emit.Label = AddIfIL.DefineLabel()
Dim tru22 As System.Reflection.Emit.Label = AddIfIL.DefineLabel()
Dim cont22 As System.Reflection.Emit.Label = AddIfIL.DefineLabel()
AddIfIL.Emit(OpCodes.Beq, tru22)
AddIfIL.Emit(OpCodes.Br, fa22)
AddIfIL.MarkLabel(tru22)
AddIfIL.MarkSequencePoint(doc7, 388, 1, 388, 100)
AddIfIL.Emit(OpCodes.Br, label15)
AddIfIL.MarkSequencePoint(doc7, 389, 1, 389, 100)
AddIfIL.Emit(OpCodes.Br, cont22)
AddIfIL.MarkLabel(fa22)
AddIfIL.MarkSequencePoint(doc7, 390, 1, 390, 100)
AddIfIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa23 As System.Reflection.Emit.Label = AddIfIL.DefineLabel()
Dim tru23 As System.Reflection.Emit.Label = AddIfIL.DefineLabel()
Dim cont23 As System.Reflection.Emit.Label = AddIfIL.DefineLabel()
AddIfIL.Emit(OpCodes.Beq, fa23)
AddIfIL.Emit(OpCodes.Br, tru23)
AddIfIL.MarkLabel(tru23)
AddIfIL.MarkSequencePoint(doc7, 391, 1, 391, 100)
AddIfIL.Emit(OpCodes.Br, label14)
AddIfIL.MarkSequencePoint(doc7, 392, 1, 392, 100)
AddIfIL.Emit(OpCodes.Br, cont23)
AddIfIL.MarkLabel(fa23)
AddIfIL.MarkSequencePoint(doc7, 393, 1, 393, 100)
AddIfIL.Emit(OpCodes.Br, label15)
AddIfIL.MarkSequencePoint(doc7, 394, 1, 394, 100)
AddIfIL.Emit(OpCodes.Br, cont23)
AddIfIL.MarkLabel(cont23)
AddIfIL.MarkSequencePoint(doc7, 395, 1, 395, 100)
AddIfIL.Emit(OpCodes.Br, cont22)
AddIfIL.MarkLabel(cont22)
AddIfIL.MarkSequencePoint(doc7, 397, 1, 397, 100)
AddIfIL.MarkLabel(label15)
AddIfIL.MarkSequencePoint(doc7, 399, 1, 399, 100)
AddIfIL.Emit(OpCodes.Ldloc, 7)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").MakeArrayType()
Typ02 = Typ
AddIfIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
AddIfIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddIfIL.Emit(OpCodes.Ldloc, 2)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem")
AddIfIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").MakeArrayType().GetElementType())
AddIfIL.MarkSequencePoint(doc7, 401, 1, 401, 100)
AddIfIL.Emit(OpCodes.Ldloc, 7)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").MakeArrayType()
AddIfIL.Emit(OpCodes.Stsfld, IfLst)
AddIfIL.MarkSequencePoint(doc7, 403, 1, 403, 100)
AddIfIL.Emit(OpCodes.Ret)
Dim PopIf As MethodBuilder = SymTable.DefineMethod("PopIf", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim PopIfIL As ILGenerator = PopIf.GetILGenerator()
PopIfIL.MarkSequencePoint(doc7, 407, 1, 407, 100)
Dim locbldr50 As LocalBuilder = PopIfIL.DeclareLocal(GetType(System.Int32))
locbldr50.SetLocalSymInfo("len")
PopIfIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
PopIfIL.Emit(OpCodes.Ldlen)
PopIfIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Stloc, 0)
PopIfIL.MarkSequencePoint(doc7, 408, 1, 408, 100)
Dim locbldr51 As LocalBuilder = PopIfIL.DeclareLocal(GetType(System.Int32))
locbldr51.SetLocalSymInfo("destl")
PopIfIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Sub)
PopIfIL.Emit(OpCodes.Stloc, 1)
PopIfIL.MarkSequencePoint(doc7, 409, 1, 409, 100)
Dim locbldr52 As LocalBuilder = PopIfIL.DeclareLocal(GetType(System.Int32))
locbldr52.SetLocalSymInfo("stopel")
PopIfIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Sub)
PopIfIL.Emit(OpCodes.Stloc, 2)
PopIfIL.MarkSequencePoint(doc7, 410, 1, 410, 100)
Dim locbldr53 As LocalBuilder = PopIfIL.DeclareLocal(GetType(System.Int32))
locbldr53.SetLocalSymInfo("i")
PopIfIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Stloc, 3)
PopIfIL.MarkSequencePoint(doc7, 412, 1, 412, 100)
Dim locbldr54 As LocalBuilder = PopIfIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").MakeArrayType())
locbldr54.SetLocalSymInfo("destarr")
PopIfIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Conv_U)
PopIfIL.Emit(OpCodes.Newarr, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem"))
PopIfIL.Emit(OpCodes.Stloc, 4)
PopIfIL.MarkSequencePoint(doc7, 414, 1, 414, 100)
Dim label16 As System.Reflection.Emit.Label = PopIfIL.DefineLabel()
PopIfIL.MarkSequencePoint(doc7, 415, 1, 415, 100)
Dim label17 As System.Reflection.Emit.Label = PopIfIL.DefineLabel()
PopIfIL.MarkSequencePoint(doc7, 417, 1, 417, 100)
PopIfIL.MarkLabel(label16)
PopIfIL.MarkSequencePoint(doc7, 419, 1, 419, 100)
PopIfIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Add)
PopIfIL.Emit(OpCodes.Stloc, 3)
PopIfIL.MarkSequencePoint(doc7, 421, 1, 421, 100)
PopIfIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa24 As System.Reflection.Emit.Label = PopIfIL.DefineLabel()
Dim tru24 As System.Reflection.Emit.Label = PopIfIL.DefineLabel()
Dim cont24 As System.Reflection.Emit.Label = PopIfIL.DefineLabel()
PopIfIL.Emit(OpCodes.Bge, tru24)
PopIfIL.Emit(OpCodes.Br, fa24)
PopIfIL.MarkLabel(tru24)
PopIfIL.MarkSequencePoint(doc7, 423, 1, 423, 100)
PopIfIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").MakeArrayType()
Typ02 = Typ
PopIfIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Conv_U)
Typ = Typ02
PopIfIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
Typ02 = Typ
PopIfIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Conv_U)
Typ = Typ02
PopIfIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
PopIfIL.Emit(OpCodes.Stelem, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").MakeArrayType().GetElementType())
PopIfIL.MarkSequencePoint(doc7, 425, 1, 425, 100)
PopIfIL.Emit(OpCodes.Br, cont24)
PopIfIL.MarkLabel(fa24)
PopIfIL.Emit(OpCodes.Br, cont24)
PopIfIL.MarkLabel(cont24)
PopIfIL.MarkSequencePoint(doc7, 427, 1, 427, 100)
PopIfIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa25 As System.Reflection.Emit.Label = PopIfIL.DefineLabel()
Dim tru25 As System.Reflection.Emit.Label = PopIfIL.DefineLabel()
Dim cont25 As System.Reflection.Emit.Label = PopIfIL.DefineLabel()
PopIfIL.Emit(OpCodes.Beq, tru25)
PopIfIL.Emit(OpCodes.Br, fa25)
PopIfIL.MarkLabel(tru25)
PopIfIL.MarkSequencePoint(doc7, 428, 1, 428, 100)
PopIfIL.Emit(OpCodes.Br, label17)
PopIfIL.MarkSequencePoint(doc7, 429, 1, 429, 100)
PopIfIL.Emit(OpCodes.Br, cont25)
PopIfIL.MarkLabel(fa25)
PopIfIL.MarkSequencePoint(doc7, 430, 1, 430, 100)
PopIfIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
PopIfIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa26 As System.Reflection.Emit.Label = PopIfIL.DefineLabel()
Dim tru26 As System.Reflection.Emit.Label = PopIfIL.DefineLabel()
Dim cont26 As System.Reflection.Emit.Label = PopIfIL.DefineLabel()
PopIfIL.Emit(OpCodes.Beq, fa26)
PopIfIL.Emit(OpCodes.Br, tru26)
PopIfIL.MarkLabel(tru26)
PopIfIL.MarkSequencePoint(doc7, 431, 1, 431, 100)
PopIfIL.Emit(OpCodes.Br, label16)
PopIfIL.MarkSequencePoint(doc7, 432, 1, 432, 100)
PopIfIL.Emit(OpCodes.Br, cont26)
PopIfIL.MarkLabel(fa26)
PopIfIL.MarkSequencePoint(doc7, 433, 1, 433, 100)
PopIfIL.Emit(OpCodes.Br, label17)
PopIfIL.MarkSequencePoint(doc7, 434, 1, 434, 100)
PopIfIL.Emit(OpCodes.Br, cont26)
PopIfIL.MarkLabel(cont26)
PopIfIL.MarkSequencePoint(doc7, 435, 1, 435, 100)
PopIfIL.Emit(OpCodes.Br, cont25)
PopIfIL.MarkLabel(cont25)
PopIfIL.MarkSequencePoint(doc7, 437, 1, 437, 100)
PopIfIL.MarkLabel(label17)
PopIfIL.MarkSequencePoint(doc7, 439, 1, 439, 100)
PopIfIL.Emit(OpCodes.Ldloc, 4)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").MakeArrayType()
PopIfIL.Emit(OpCodes.Stsfld, IfLst)
PopIfIL.MarkSequencePoint(doc7, 441, 1, 441, 100)
PopIfIL.Emit(OpCodes.Ret)
Dim ReadIfEndLbl As MethodBuilder = SymTable.DefineMethod("ReadIfEndLbl", MethodAttributes.Public Or MethodAttributes.Static, GetType(Emit.Label), Type.EmptyTypes)
Dim ReadIfEndLblIL As ILGenerator = ReadIfEndLbl.GetILGenerator()
ReadIfEndLblIL.MarkSequencePoint(doc7, 444, 1, 444, 100)
Dim locbldr55 As LocalBuilder = ReadIfEndLblIL.DeclareLocal(GetType(System.Int32))
locbldr55.SetLocalSymInfo("lastel")
ReadIfEndLblIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
ReadIfEndLblIL.Emit(OpCodes.Ldlen)
ReadIfEndLblIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ReadIfEndLblIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIfEndLblIL.Emit(OpCodes.Sub)
ReadIfEndLblIL.Emit(OpCodes.Stloc, 0)
ReadIfEndLblIL.MarkSequencePoint(doc7, 445, 1, 445, 100)
Dim locbldr56 As LocalBuilder = ReadIfEndLblIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem"))
locbldr56.SetLocalSymInfo("ifi")
ReadIfEndLblIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
Typ02 = Typ
ReadIfEndLblIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
ReadIfEndLblIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIfEndLblIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ReadIfEndLblIL.Emit(OpCodes.Stloc, 1)
ReadIfEndLblIL.MarkSequencePoint(doc7, 446, 1, 446, 100)
ReadIfEndLblIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem")
ReadIfEndLblIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").GetField("EndLabel"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").GetField("EndLabel").FieldType
ReadIfEndLblIL.MarkSequencePoint(doc7, 447, 1, 447, 100)
ReadIfEndLblIL.Emit(OpCodes.Ret)
Dim ReadIfNxtBlkLbl As MethodBuilder = SymTable.DefineMethod("ReadIfNxtBlkLbl", MethodAttributes.Public Or MethodAttributes.Static, GetType(Emit.Label), Type.EmptyTypes)
Dim ReadIfNxtBlkLblIL As ILGenerator = ReadIfNxtBlkLbl.GetILGenerator()
ReadIfNxtBlkLblIL.MarkSequencePoint(doc7, 450, 1, 450, 100)
Dim locbldr57 As LocalBuilder = ReadIfNxtBlkLblIL.DeclareLocal(GetType(System.Int32))
locbldr57.SetLocalSymInfo("lastel")
ReadIfNxtBlkLblIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
ReadIfNxtBlkLblIL.Emit(OpCodes.Ldlen)
ReadIfNxtBlkLblIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ReadIfNxtBlkLblIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIfNxtBlkLblIL.Emit(OpCodes.Sub)
ReadIfNxtBlkLblIL.Emit(OpCodes.Stloc, 0)
ReadIfNxtBlkLblIL.MarkSequencePoint(doc7, 451, 1, 451, 100)
Dim locbldr58 As LocalBuilder = ReadIfNxtBlkLblIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem"))
locbldr58.SetLocalSymInfo("ifi")
ReadIfNxtBlkLblIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
Typ02 = Typ
ReadIfNxtBlkLblIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
ReadIfNxtBlkLblIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIfNxtBlkLblIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ReadIfNxtBlkLblIL.Emit(OpCodes.Stloc, 1)
ReadIfNxtBlkLblIL.MarkSequencePoint(doc7, 452, 1, 452, 100)
ReadIfNxtBlkLblIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem")
ReadIfNxtBlkLblIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").GetField("NextBlkLabel"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").GetField("NextBlkLabel").FieldType
ReadIfNxtBlkLblIL.MarkSequencePoint(doc7, 453, 1, 453, 100)
ReadIfNxtBlkLblIL.Emit(OpCodes.Ret)
Dim ReadIfElsePass As MethodBuilder = SymTable.DefineMethod("ReadIfElsePass", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Boolean), Type.EmptyTypes)
Dim ReadIfElsePassIL As ILGenerator = ReadIfElsePass.GetILGenerator()
ReadIfElsePassIL.MarkSequencePoint(doc7, 456, 1, 456, 100)
Dim locbldr59 As LocalBuilder = ReadIfElsePassIL.DeclareLocal(GetType(System.Int32))
locbldr59.SetLocalSymInfo("lastel")
ReadIfElsePassIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
ReadIfElsePassIL.Emit(OpCodes.Ldlen)
ReadIfElsePassIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ReadIfElsePassIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIfElsePassIL.Emit(OpCodes.Sub)
ReadIfElsePassIL.Emit(OpCodes.Stloc, 0)
ReadIfElsePassIL.MarkSequencePoint(doc7, 457, 1, 457, 100)
Dim locbldr60 As LocalBuilder = ReadIfElsePassIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem"))
locbldr60.SetLocalSymInfo("ifi")
ReadIfElsePassIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
Typ02 = Typ
ReadIfElsePassIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
ReadIfElsePassIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIfElsePassIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ReadIfElsePassIL.Emit(OpCodes.Stloc, 1)
ReadIfElsePassIL.MarkSequencePoint(doc7, 458, 1, 458, 100)
ReadIfElsePassIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem")
ReadIfElsePassIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").GetField("ElsePass"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").GetField("ElsePass").FieldType
ReadIfElsePassIL.MarkSequencePoint(doc7, 459, 1, 459, 100)
ReadIfElsePassIL.Emit(OpCodes.Ret)
Dim SetIfElsePass As MethodBuilder = SymTable.DefineMethod("SetIfElsePass", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim SetIfElsePassIL As ILGenerator = SetIfElsePass.GetILGenerator()
SetIfElsePassIL.MarkSequencePoint(doc7, 462, 1, 462, 100)
Dim locbldr61 As LocalBuilder = SetIfElsePassIL.DeclareLocal(GetType(System.Int32))
locbldr61.SetLocalSymInfo("lastel")
SetIfElsePassIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
SetIfElsePassIL.Emit(OpCodes.Ldlen)
SetIfElsePassIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
SetIfElsePassIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
SetIfElsePassIL.Emit(OpCodes.Sub)
SetIfElsePassIL.Emit(OpCodes.Stloc, 0)
SetIfElsePassIL.MarkSequencePoint(doc7, 463, 1, 463, 100)
Dim locbldr62 As LocalBuilder = SetIfElsePassIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem"))
locbldr62.SetLocalSymInfo("ifi")
SetIfElsePassIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
Typ02 = Typ
SetIfElsePassIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
SetIfElsePassIL.Emit(OpCodes.Conv_U)
Typ = Typ02
SetIfElsePassIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
SetIfElsePassIL.Emit(OpCodes.Stloc, 1)
SetIfElsePassIL.MarkSequencePoint(doc7, 464, 1, 464, 100)
SetIfElsePassIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem")
SetIfElsePassIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
SetIfElsePassIL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").GetField("ElsePass"))
SetIfElsePassIL.MarkSequencePoint(doc7, 465, 1, 465, 100)
SetIfElsePassIL.Emit(OpCodes.Ret)
Dim SetIfNxtBlkLbl As MethodBuilder = SymTable.DefineMethod("SetIfNxtBlkLbl", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim SetIfNxtBlkLblIL As ILGenerator = SetIfNxtBlkLbl.GetILGenerator()
SetIfNxtBlkLblIL.MarkSequencePoint(doc7, 468, 1, 468, 100)
Dim locbldr63 As LocalBuilder = SetIfNxtBlkLblIL.DeclareLocal(GetType(System.Int32))
locbldr63.SetLocalSymInfo("lastel")
SetIfNxtBlkLblIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
SetIfNxtBlkLblIL.Emit(OpCodes.Ldlen)
SetIfNxtBlkLblIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
SetIfNxtBlkLblIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
SetIfNxtBlkLblIL.Emit(OpCodes.Sub)
SetIfNxtBlkLblIL.Emit(OpCodes.Stloc, 0)
SetIfNxtBlkLblIL.MarkSequencePoint(doc7, 469, 1, 469, 100)
Dim locbldr64 As LocalBuilder = SetIfNxtBlkLblIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem"))
locbldr64.SetLocalSymInfo("ifi")
SetIfNxtBlkLblIL.Emit(OpCodes.Ldsfld, IfLst)
Typ = IfLst.FieldType
Typ02 = Typ
SetIfNxtBlkLblIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
SetIfNxtBlkLblIL.Emit(OpCodes.Conv_U)
Typ = Typ02
SetIfNxtBlkLblIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
SetIfNxtBlkLblIL.Emit(OpCodes.Stloc, 1)
SetIfNxtBlkLblIL.MarkSequencePoint(doc7, 470, 1, 470, 100)
SetIfNxtBlkLblIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem")
SetIfNxtBlkLblIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("DefineLbl", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("DefineLbl", Type.EmptyTypes).ReturnType
SetIfNxtBlkLblIL.Emit(OpCodes.Stfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.IfItem").GetField("NextBlkLabel"))
SetIfNxtBlkLblIL.MarkSequencePoint(doc7, 471, 1, 471, 100)
SetIfNxtBlkLblIL.Emit(OpCodes.Ret)
Dim typ15(-1) As Type
ReDim Preserve typ15(UBound(typ15) + 1)
typ15(UBound(typ15)) = GetType(System.String)
Dim FindVar As MethodBuilder = SymTable.DefineMethod("FindVar", MethodAttributes.Public Or MethodAttributes.Static, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"), typ15)
Dim FindVarIL As ILGenerator = FindVar.GetILGenerator()
Dim FindVarparam01 As ParameterBuilder = FindVar.DefineParameter(1, ParameterAttributes.None, "nam")
FindVarIL.MarkSequencePoint(doc7, 475, 1, 475, 100)
Dim locbldr65 As LocalBuilder = FindVarIL.DeclareLocal(GetType(System.Int32))
locbldr65.SetLocalSymInfo("len")
FindVarIL.Emit(OpCodes.Ldsfld, VarLst)
Typ = VarLst.FieldType
FindVarIL.Emit(OpCodes.Ldlen)
FindVarIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Sub)
FindVarIL.Emit(OpCodes.Stloc, 0)
FindVarIL.MarkSequencePoint(doc7, 476, 1, 476, 100)
Dim locbldr66 As LocalBuilder = FindVarIL.DeclareLocal(GetType(System.Int32))
locbldr66.SetLocalSymInfo("i")
FindVarIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Stloc, 1)
FindVarIL.MarkSequencePoint(doc7, 477, 1, 477, 100)
Dim locbldr67 As LocalBuilder = FindVarIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"))
locbldr67.SetLocalSymInfo("vr")
FindVarIL.Emit(OpCodes.Ldnull)
FindVarIL.Emit(OpCodes.Stloc, 2)
FindVarIL.MarkSequencePoint(doc7, 478, 1, 478, 100)
Dim locbldr68 As LocalBuilder = FindVarIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"))
locbldr68.SetLocalSymInfo("rvr")
FindVarIL.Emit(OpCodes.Ldnull)
FindVarIL.Emit(OpCodes.Stloc, 3)
FindVarIL.MarkSequencePoint(doc7, 479, 1, 479, 100)
Dim locbldr69 As LocalBuilder = FindVarIL.DeclareLocal(GetType(System.Int32))
locbldr69.SetLocalSymInfo("comp")
FindVarIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Stloc, 4)
FindVarIL.MarkSequencePoint(doc7, 481, 1, 481, 100)
Dim label18 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
FindVarIL.MarkSequencePoint(doc7, 482, 1, 482, 100)
Dim label19 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
FindVarIL.MarkSequencePoint(doc7, 484, 1, 484, 100)
FindVarIL.Emit(OpCodes.Ldsfld, VarLst)
Typ = VarLst.FieldType
FindVarIL.Emit(OpCodes.Ldlen)
FindVarIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa27 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
Dim tru27 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
Dim cont27 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
FindVarIL.Emit(OpCodes.Beq, tru27)
FindVarIL.Emit(OpCodes.Br, fa27)
FindVarIL.MarkLabel(tru27)
FindVarIL.MarkSequencePoint(doc7, 485, 1, 485, 100)
FindVarIL.Emit(OpCodes.Br, label18)
FindVarIL.MarkSequencePoint(doc7, 486, 1, 486, 100)
FindVarIL.Emit(OpCodes.Br, cont27)
FindVarIL.MarkLabel(fa27)
FindVarIL.Emit(OpCodes.Br, cont27)
FindVarIL.MarkLabel(cont27)
FindVarIL.MarkSequencePoint(doc7, 488, 1, 488, 100)
FindVarIL.MarkLabel(label19)
FindVarIL.MarkSequencePoint(doc7, 490, 1, 490, 100)
FindVarIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Add)
FindVarIL.Emit(OpCodes.Stloc, 1)
FindVarIL.MarkSequencePoint(doc7, 492, 1, 492, 100)
FindVarIL.Emit(OpCodes.Ldsfld, VarLst)
Typ = VarLst.FieldType
Typ02 = Typ
FindVarIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Conv_U)
Typ = Typ02
FindVarIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
FindVarIL.Emit(OpCodes.Stloc, 2)
FindVarIL.MarkSequencePoint(doc7, 493, 1, 493, 100)
Dim typ16(-1) As Type
FindVarIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ16(UBound(typ16) + 1)
typ16(UBound(typ16)) = Typ
FindVarIL.Emit(OpCodes.Ldloc, 2)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
FindVarIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("Name"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("Name").FieldType
ReDim Preserve typ16(UBound(typ16) + 1)
typ16(UBound(typ16)) = Typ
FindVarIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ16))
Typ = GetType(String).GetMethod("Compare", typ16).ReturnType
FindVarIL.Emit(OpCodes.Stloc, 4)
FindVarIL.MarkSequencePoint(doc7, 494, 1, 494, 100)
FindVarIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa28 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
Dim tru28 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
Dim cont28 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
FindVarIL.Emit(OpCodes.Beq, tru28)
FindVarIL.Emit(OpCodes.Br, fa28)
FindVarIL.MarkLabel(tru28)
FindVarIL.MarkSequencePoint(doc7, 495, 1, 495, 100)
FindVarIL.Emit(OpCodes.Ldloc, 2)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
FindVarIL.Emit(OpCodes.Stloc, 3)
FindVarIL.MarkSequencePoint(doc7, 496, 1, 496, 100)
FindVarIL.Emit(OpCodes.Br, label18)
FindVarIL.MarkSequencePoint(doc7, 497, 1, 497, 100)
FindVarIL.Emit(OpCodes.Br, cont28)
FindVarIL.MarkLabel(fa28)
FindVarIL.Emit(OpCodes.Br, cont28)
FindVarIL.MarkLabel(cont28)
FindVarIL.MarkSequencePoint(doc7, 499, 1, 499, 100)
FindVarIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindVarIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
Dim fa29 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
Dim tru29 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
Dim cont29 As System.Reflection.Emit.Label = FindVarIL.DefineLabel()
FindVarIL.Emit(OpCodes.Beq, tru29)
FindVarIL.Emit(OpCodes.Br, fa29)
FindVarIL.MarkLabel(tru29)
FindVarIL.MarkSequencePoint(doc7, 500, 1, 500, 100)
FindVarIL.Emit(OpCodes.Br, label18)
FindVarIL.MarkSequencePoint(doc7, 501, 1, 501, 100)
FindVarIL.Emit(OpCodes.Br, cont29)
FindVarIL.MarkLabel(fa29)
FindVarIL.MarkSequencePoint(doc7, 502, 1, 502, 100)
FindVarIL.Emit(OpCodes.Br, label19)
FindVarIL.MarkSequencePoint(doc7, 503, 1, 503, 100)
FindVarIL.Emit(OpCodes.Br, cont29)
FindVarIL.MarkLabel(cont29)
FindVarIL.MarkSequencePoint(doc7, 505, 1, 505, 100)
FindVarIL.MarkLabel(label18)
FindVarIL.MarkSequencePoint(doc7, 507, 1, 507, 100)
FindVarIL.Emit(OpCodes.Ldloc, 3)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
FindVarIL.MarkSequencePoint(doc7, 508, 1, 508, 100)
FindVarIL.Emit(OpCodes.Ret)
Dim typ17(-1) As Type
ReDim Preserve typ17(UBound(typ17) + 1)
typ17(UBound(typ17)) = GetType(System.String)
Dim FindFld As MethodBuilder = SymTable.DefineMethod("FindFld", MethodAttributes.Public Or MethodAttributes.Static, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"), typ17)
Dim FindFldIL As ILGenerator = FindFld.GetILGenerator()
Dim FindFldparam01 As ParameterBuilder = FindFld.DefineParameter(1, ParameterAttributes.None, "nam")
FindFldIL.MarkSequencePoint(doc7, 512, 1, 512, 100)
Dim locbldr70 As LocalBuilder = FindFldIL.DeclareLocal(GetType(System.Int32))
locbldr70.SetLocalSymInfo("len")
FindFldIL.Emit(OpCodes.Ldsfld, FldLst)
Typ = FldLst.FieldType
FindFldIL.Emit(OpCodes.Ldlen)
FindFldIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
FindFldIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
FindFldIL.Emit(OpCodes.Sub)
FindFldIL.Emit(OpCodes.Stloc, 0)
FindFldIL.MarkSequencePoint(doc7, 513, 1, 513, 100)
Dim locbldr71 As LocalBuilder = FindFldIL.DeclareLocal(GetType(System.Int32))
locbldr71.SetLocalSymInfo("i")
FindFldIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
FindFldIL.Emit(OpCodes.Stloc, 1)
FindFldIL.MarkSequencePoint(doc7, 514, 1, 514, 100)
Dim locbldr72 As LocalBuilder = FindFldIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
locbldr72.SetLocalSymInfo("fld")
FindFldIL.Emit(OpCodes.Ldnull)
FindFldIL.Emit(OpCodes.Stloc, 2)
FindFldIL.MarkSequencePoint(doc7, 515, 1, 515, 100)
Dim locbldr73 As LocalBuilder = FindFldIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
locbldr73.SetLocalSymInfo("rfld")
FindFldIL.Emit(OpCodes.Ldnull)
FindFldIL.Emit(OpCodes.Stloc, 3)
FindFldIL.MarkSequencePoint(doc7, 516, 1, 516, 100)
Dim locbldr74 As LocalBuilder = FindFldIL.DeclareLocal(GetType(System.Int32))
locbldr74.SetLocalSymInfo("comp")
FindFldIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
FindFldIL.Emit(OpCodes.Stloc, 4)
FindFldIL.MarkSequencePoint(doc7, 518, 1, 518, 100)
Dim label20 As System.Reflection.Emit.Label = FindFldIL.DefineLabel()
FindFldIL.MarkSequencePoint(doc7, 519, 1, 519, 100)
Dim label21 As System.Reflection.Emit.Label = FindFldIL.DefineLabel()
FindFldIL.MarkSequencePoint(doc7, 521, 1, 521, 100)
FindFldIL.Emit(OpCodes.Ldsfld, FldLst)
Typ = FldLst.FieldType
FindFldIL.Emit(OpCodes.Ldlen)
FindFldIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
FindFldIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa30 As System.Reflection.Emit.Label = FindFldIL.DefineLabel()
Dim tru30 As System.Reflection.Emit.Label = FindFldIL.DefineLabel()
Dim cont30 As System.Reflection.Emit.Label = FindFldIL.DefineLabel()
FindFldIL.Emit(OpCodes.Beq, tru30)
FindFldIL.Emit(OpCodes.Br, fa30)
FindFldIL.MarkLabel(tru30)
FindFldIL.MarkSequencePoint(doc7, 522, 1, 522, 100)
FindFldIL.Emit(OpCodes.Br, label20)
FindFldIL.MarkSequencePoint(doc7, 523, 1, 523, 100)
FindFldIL.Emit(OpCodes.Br, cont30)
FindFldIL.MarkLabel(fa30)
FindFldIL.Emit(OpCodes.Br, cont30)
FindFldIL.MarkLabel(cont30)
FindFldIL.MarkSequencePoint(doc7, 525, 1, 525, 100)
FindFldIL.MarkLabel(label21)
FindFldIL.MarkSequencePoint(doc7, 527, 1, 527, 100)
FindFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindFldIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
FindFldIL.Emit(OpCodes.Add)
FindFldIL.Emit(OpCodes.Stloc, 1)
FindFldIL.MarkSequencePoint(doc7, 529, 1, 529, 100)
FindFldIL.Emit(OpCodes.Ldsfld, FldLst)
Typ = FldLst.FieldType
Typ02 = Typ
FindFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindFldIL.Emit(OpCodes.Conv_U)
Typ = Typ02
FindFldIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
FindFldIL.Emit(OpCodes.Stloc, 2)
FindFldIL.MarkSequencePoint(doc7, 530, 1, 530, 100)
Dim typ18(-1) As Type
FindFldIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ18(UBound(typ18) + 1)
typ18(UBound(typ18)) = Typ
FindFldIL.Emit(OpCodes.Ldloc, 2)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem")
FindFldIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").GetField("Name"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem").GetField("Name").FieldType
ReDim Preserve typ18(UBound(typ18) + 1)
typ18(UBound(typ18)) = Typ
FindFldIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ18))
Typ = GetType(String).GetMethod("Compare", typ18).ReturnType
FindFldIL.Emit(OpCodes.Stloc, 4)
FindFldIL.MarkSequencePoint(doc7, 531, 1, 531, 100)
FindFldIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
FindFldIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa31 As System.Reflection.Emit.Label = FindFldIL.DefineLabel()
Dim tru31 As System.Reflection.Emit.Label = FindFldIL.DefineLabel()
Dim cont31 As System.Reflection.Emit.Label = FindFldIL.DefineLabel()
FindFldIL.Emit(OpCodes.Beq, tru31)
FindFldIL.Emit(OpCodes.Br, fa31)
FindFldIL.MarkLabel(tru31)
FindFldIL.MarkSequencePoint(doc7, 532, 1, 532, 100)
FindFldIL.Emit(OpCodes.Ldloc, 2)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem")
FindFldIL.Emit(OpCodes.Stloc, 3)
FindFldIL.MarkSequencePoint(doc7, 533, 1, 533, 100)
FindFldIL.Emit(OpCodes.Br, label20)
FindFldIL.MarkSequencePoint(doc7, 534, 1, 534, 100)
FindFldIL.Emit(OpCodes.Br, cont31)
FindFldIL.MarkLabel(fa31)
FindFldIL.Emit(OpCodes.Br, cont31)
FindFldIL.MarkLabel(cont31)
FindFldIL.MarkSequencePoint(doc7, 536, 1, 536, 100)
FindFldIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
FindFldIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
Dim fa32 As System.Reflection.Emit.Label = FindFldIL.DefineLabel()
Dim tru32 As System.Reflection.Emit.Label = FindFldIL.DefineLabel()
Dim cont32 As System.Reflection.Emit.Label = FindFldIL.DefineLabel()
FindFldIL.Emit(OpCodes.Beq, tru32)
FindFldIL.Emit(OpCodes.Br, fa32)
FindFldIL.MarkLabel(tru32)
FindFldIL.MarkSequencePoint(doc7, 537, 1, 537, 100)
FindFldIL.Emit(OpCodes.Br, label20)
FindFldIL.MarkSequencePoint(doc7, 538, 1, 538, 100)
FindFldIL.Emit(OpCodes.Br, cont32)
FindFldIL.MarkLabel(fa32)
FindFldIL.MarkSequencePoint(doc7, 539, 1, 539, 100)
FindFldIL.Emit(OpCodes.Br, label21)
FindFldIL.MarkSequencePoint(doc7, 540, 1, 540, 100)
FindFldIL.Emit(OpCodes.Br, cont32)
FindFldIL.MarkLabel(cont32)
FindFldIL.MarkSequencePoint(doc7, 542, 1, 542, 100)
FindFldIL.MarkLabel(label20)
FindFldIL.MarkSequencePoint(doc7, 544, 1, 544, 100)
FindFldIL.Emit(OpCodes.Ldloc, 3)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem")
FindFldIL.MarkSequencePoint(doc7, 545, 1, 545, 100)
FindFldIL.Emit(OpCodes.Ret)
SymTable.CreateType()
End Sub


Dim doc8 As ISymbolDocumentWriter

Sub Helpers()
Dim Helpers As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "Helpers", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass Or TypeAttributes.BeforeFieldInit, GetType(System.Object))
Dim StringFlg As FieldBuilder = Helpers.DefineField("StringFlg", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static)
Dim OpCodeSuppFlg As FieldBuilder = Helpers.DefineField("OpCodeSuppFlg", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static)
Dim LeftOp As FieldBuilder = Helpers.DefineField("LeftOp", GetType(System.Type), FieldAttributes.Public Or FieldAttributes.Static)
Dim RightOp As FieldBuilder = Helpers.DefineField("RightOp", GetType(System.Type), FieldAttributes.Public Or FieldAttributes.Static)
Dim ctor0 As ConstructorBuilder = Helpers.DefineConstructor(MethodAttributes.Public Or MethodAttributes.Static,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc8, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, StringFlg)
ctor0IL.MarkSequencePoint(doc8, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, OpCodeSuppFlg)
ctor0IL.MarkSequencePoint(doc8, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stsfld, LeftOp)
ctor0IL.MarkSequencePoint(doc8, 20, 1, 20, 100)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stsfld, RightOp)
ctor0IL.MarkSequencePoint(doc8, 21, 1, 21, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(Attributes.Attribute).MakeArrayType()
Dim ProcessClassAttrs As MethodBuilder = Helpers.DefineMethod("ProcessClassAttrs", MethodAttributes.Public Or MethodAttributes.Static, GetType(TypeAttributes), typ0)
Dim ProcessClassAttrsIL As ILGenerator = ProcessClassAttrs.GetILGenerator()
Dim ProcessClassAttrsparam01 As ParameterBuilder = ProcessClassAttrs.DefineParameter(1, ParameterAttributes.None, "attrs")
ProcessClassAttrsIL.MarkSequencePoint(doc8, 24, 1, 24, 100)
Dim locbldr75 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(TypeAttributes))
locbldr75.SetLocalSymInfo("ta")
ProcessClassAttrsIL.MarkSequencePoint(doc8, 25, 1, 25, 100)
Dim locbldr76 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(TypeAttributes))
locbldr76.SetLocalSymInfo("temp")
ProcessClassAttrsIL.MarkSequencePoint(doc8, 27, 1, 27, 100)
Dim label0 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.MarkSequencePoint(doc8, 28, 1, 28, 100)
Dim label1 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.MarkSequencePoint(doc8, 29, 1, 29, 100)
Dim label2 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.MarkSequencePoint(doc8, 31, 1, 31, 100)
Dim locbldr77 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(System.Int32))
locbldr77.SetLocalSymInfo("len")
ProcessClassAttrsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Attributes.Attribute).MakeArrayType()
ProcessClassAttrsIL.Emit(OpCodes.Ldlen)
ProcessClassAttrsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Sub)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 2)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 32, 1, 32, 100)
Dim locbldr78 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(System.Int32))
locbldr78.SetLocalSymInfo("i")
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 3)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 33, 1, 33, 100)
Dim locbldr79 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(System.Boolean))
locbldr79.SetLocalSymInfo("b")
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 34, 1, 34, 100)
Dim locbldr80 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(System.Type))
locbldr80.SetLocalSymInfo("typ")
ProcessClassAttrsIL.MarkSequencePoint(doc8, 35, 1, 35, 100)
Dim locbldr81 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(Attributes.Attribute))
locbldr81.SetLocalSymInfo("curattr")
ProcessClassAttrsIL.Emit(OpCodes.Ldnull)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 6)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 36, 1, 36, 100)
Dim locbldr82 As LocalBuilder = ProcessClassAttrsIL.DeclareLocal(GetType(System.Boolean))
locbldr82.SetLocalSymInfo("fir")
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 38, 1, 38, 100)
ProcessClassAttrsIL.MarkLabel(label0)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 40, 1, 40, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Add)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 3)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 42, 1, 42, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Attributes.Attribute).MakeArrayType()
Typ02 = Typ
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ProcessClassAttrsIL.Emit(OpCodes.Ldelem, GetType(Attributes.Attribute).MakeArrayType().GetElementType())
Typ = GetType(Attributes.Attribute).MakeArrayType().GetElementType()
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 6)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 44, 1, 44, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.PublicAttr))
Dim typ1 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessClassAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ1))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ1).ReturnType
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 45, 1, 45, 100)
Dim typ2(-1) As Type
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessClassAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = Typ
ProcessClassAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ2))
Typ = Typ03.GetMethod("IsInstanceOfType", typ2).ReturnType
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 47, 1, 47, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa33 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru33 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont33 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru33)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa33)
ProcessClassAttrsIL.MarkLabel(tru33)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 48, 1, 48, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa34 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru34 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont34 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru34)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa34)
ProcessClassAttrsIL.MarkLabel(tru34)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 49, 1, 49, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 50, 1, 50, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont34)
ProcessClassAttrsIL.MarkLabel(fa34)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 51, 1, 51, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 52, 1, 52, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont34)
ProcessClassAttrsIL.MarkLabel(cont34)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 53, 1, 53, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa35 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru35 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont35 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru35)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa35)
ProcessClassAttrsIL.MarkLabel(tru35)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 54, 1, 54, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.And)
ProcessClassAttrsIL.Emit(OpCodes.Not)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 55, 1, 55, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 56, 1, 56, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont35)
ProcessClassAttrsIL.MarkLabel(fa35)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 57, 1, 57, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Or)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 58, 1, 58, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont35)
ProcessClassAttrsIL.MarkLabel(cont35)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 59, 1, 59, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, label2)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 60, 1, 60, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont33)
ProcessClassAttrsIL.MarkLabel(fa33)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont33)
ProcessClassAttrsIL.MarkLabel(cont33)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 62, 1, 62, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.AutoLayoutAttr))
Dim typ3 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessClassAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ3))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ3).ReturnType
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 63, 1, 63, 100)
Dim typ4(-1) As Type
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessClassAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
ProcessClassAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ4))
Typ = Typ03.GetMethod("IsInstanceOfType", typ4).ReturnType
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 65, 1, 65, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa36 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru36 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont36 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru36)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa36)
ProcessClassAttrsIL.MarkLabel(tru36)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 66, 1, 66, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 67, 1, 67, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa37 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru37 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont37 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru37)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa37)
ProcessClassAttrsIL.MarkLabel(tru37)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 68, 1, 68, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.And)
ProcessClassAttrsIL.Emit(OpCodes.Not)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 69, 1, 69, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 70, 1, 70, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont37)
ProcessClassAttrsIL.MarkLabel(fa37)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 71, 1, 71, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Or)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 72, 1, 72, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont37)
ProcessClassAttrsIL.MarkLabel(cont37)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 73, 1, 73, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, label2)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 74, 1, 74, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont36)
ProcessClassAttrsIL.MarkLabel(fa36)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont36)
ProcessClassAttrsIL.MarkLabel(cont36)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 76, 1, 76, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.AnsiClassAttr))
Dim typ5 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessClassAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ5))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ5).ReturnType
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 77, 1, 77, 100)
Dim typ6(-1) As Type
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessClassAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = Typ
ProcessClassAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ6))
Typ = Typ03.GetMethod("IsInstanceOfType", typ6).ReturnType
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 79, 1, 79, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa38 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru38 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont38 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru38)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa38)
ProcessClassAttrsIL.MarkLabel(tru38)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 80, 1, 80, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 81, 1, 81, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa39 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru39 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont39 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru39)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa39)
ProcessClassAttrsIL.MarkLabel(tru39)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 82, 1, 82, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessClassAttrsIL.Emit(OpCodes.And)
ProcessClassAttrsIL.Emit(OpCodes.Not)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 83, 1, 83, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 84, 1, 84, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont39)
ProcessClassAttrsIL.MarkLabel(fa39)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 85, 1, 85, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.Emit(OpCodes.Or)
ProcessClassAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 86, 1, 86, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont39)
ProcessClassAttrsIL.MarkLabel(cont39)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 87, 1, 87, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, label2)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 88, 1, 88, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont38)
ProcessClassAttrsIL.MarkLabel(fa38)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont38)
ProcessClassAttrsIL.MarkLabel(cont38)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 90, 1, 90, 100)
ProcessClassAttrsIL.MarkLabel(label2)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 92, 1, 92, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa40 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim tru40 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
Dim cont40 As System.Reflection.Emit.Label = ProcessClassAttrsIL.DefineLabel()
ProcessClassAttrsIL.Emit(OpCodes.Beq, tru40)
ProcessClassAttrsIL.Emit(OpCodes.Br, fa40)
ProcessClassAttrsIL.MarkLabel(tru40)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 93, 1, 93, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, label1)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 94, 1, 94, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont40)
ProcessClassAttrsIL.MarkLabel(fa40)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 95, 1, 95, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, label0)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 96, 1, 96, 100)
ProcessClassAttrsIL.Emit(OpCodes.Br, cont40)
ProcessClassAttrsIL.MarkLabel(cont40)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 99, 1, 99, 100)
ProcessClassAttrsIL.MarkLabel(label1)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 102, 1, 102, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(TypeAttributes)
ProcessClassAttrsIL.MarkSequencePoint(doc8, 103, 1, 103, 100)
ProcessClassAttrsIL.Emit(OpCodes.Ret)
Dim typ7(-1) As Type
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = GetType(Attributes.Attribute).MakeArrayType()
Dim ProcessMethodAttrs As MethodBuilder = Helpers.DefineMethod("ProcessMethodAttrs", MethodAttributes.Public Or MethodAttributes.Static, GetType(MethodAttributes), typ7)
Dim ProcessMethodAttrsIL As ILGenerator = ProcessMethodAttrs.GetILGenerator()
Dim ProcessMethodAttrsparam01 As ParameterBuilder = ProcessMethodAttrs.DefineParameter(1, ParameterAttributes.None, "attrs")
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 106, 1, 106, 100)
Dim locbldr83 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(MethodAttributes))
locbldr83.SetLocalSymInfo("ta")
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 107, 1, 107, 100)
Dim locbldr84 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(MethodAttributes))
locbldr84.SetLocalSymInfo("temp")
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 109, 1, 109, 100)
Dim label3 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 110, 1, 110, 100)
Dim label4 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 111, 1, 111, 100)
Dim label5 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 113, 1, 113, 100)
Dim locbldr85 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(System.Int32))
locbldr85.SetLocalSymInfo("len")
ProcessMethodAttrsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Attributes.Attribute).MakeArrayType()
ProcessMethodAttrsIL.Emit(OpCodes.Ldlen)
ProcessMethodAttrsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Sub)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 2)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 114, 1, 114, 100)
Dim locbldr86 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(System.Int32))
locbldr86.SetLocalSymInfo("i")
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 3)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 115, 1, 115, 100)
Dim locbldr87 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(System.Boolean))
locbldr87.SetLocalSymInfo("b")
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 116, 1, 116, 100)
Dim locbldr88 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(System.Type))
locbldr88.SetLocalSymInfo("typ")
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 117, 1, 117, 100)
Dim locbldr89 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(Attributes.Attribute))
locbldr89.SetLocalSymInfo("curattr")
ProcessMethodAttrsIL.Emit(OpCodes.Ldnull)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 6)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 118, 1, 118, 100)
Dim locbldr90 As LocalBuilder = ProcessMethodAttrsIL.DeclareLocal(GetType(System.Boolean))
locbldr90.SetLocalSymInfo("fir")
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 120, 1, 120, 100)
ProcessMethodAttrsIL.MarkLabel(label3)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 122, 1, 122, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Add)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 3)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 124, 1, 124, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Attributes.Attribute).MakeArrayType()
Typ02 = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ProcessMethodAttrsIL.Emit(OpCodes.Ldelem, GetType(Attributes.Attribute).MakeArrayType().GetElementType())
Typ = GetType(Attributes.Attribute).MakeArrayType().GetElementType()
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 6)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 126, 1, 126, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.PublicAttr))
Dim typ8 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessMethodAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ8))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ8).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 127, 1, 127, 100)
Dim typ9(-1) As Type
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessMethodAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ9))
Typ = Typ03.GetMethod("IsInstanceOfType", typ9).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 129, 1, 129, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa41 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru41 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont41 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru41)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa41)
ProcessMethodAttrsIL.MarkLabel(tru41)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 130, 1, 130, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, CInt(6))
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 131, 1, 131, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa42 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru42 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont42 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru42)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa42)
ProcessMethodAttrsIL.MarkLabel(tru42)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 132, 1, 132, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.And)
ProcessMethodAttrsIL.Emit(OpCodes.Not)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 133, 1, 133, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 134, 1, 134, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont42)
ProcessMethodAttrsIL.MarkLabel(fa42)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 135, 1, 135, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Or)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 136, 1, 136, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont42)
ProcessMethodAttrsIL.MarkLabel(cont42)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 137, 1, 137, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, label5)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 138, 1, 138, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont41)
ProcessMethodAttrsIL.MarkLabel(fa41)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont41)
ProcessMethodAttrsIL.MarkLabel(cont41)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 140, 1, 140, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.StaticAttr))
Dim typ10 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessMethodAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ10))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ10).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 141, 1, 141, 100)
Dim typ11(-1) As Type
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessMethodAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ11(UBound(typ11) + 1)
typ11(UBound(typ11)) = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ11))
Typ = Typ03.GetMethod("IsInstanceOfType", typ11).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 143, 1, 143, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa43 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru43 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont43 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru43)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa43)
ProcessMethodAttrsIL.MarkLabel(tru43)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 144, 1, 144, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, CInt(16))
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 145, 1, 145, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Stsfld, GetType(ILEmitter).GetField("StaticFlg"))
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 146, 1, 146, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa44 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru44 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont44 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru44)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa44)
ProcessMethodAttrsIL.MarkLabel(tru44)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 147, 1, 147, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.And)
ProcessMethodAttrsIL.Emit(OpCodes.Not)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 148, 1, 148, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 149, 1, 149, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont44)
ProcessMethodAttrsIL.MarkLabel(fa44)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 150, 1, 150, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Or)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 151, 1, 151, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont44)
ProcessMethodAttrsIL.MarkLabel(cont44)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 152, 1, 152, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, label5)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 153, 1, 153, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont43)
ProcessMethodAttrsIL.MarkLabel(fa43)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont43)
ProcessMethodAttrsIL.MarkLabel(cont43)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 155, 1, 155, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.SpecialNameAttr))
Dim typ12 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessMethodAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ12))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ12).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 156, 1, 156, 100)
Dim typ13(-1) As Type
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessMethodAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ13(UBound(typ13) + 1)
typ13(UBound(typ13)) = Typ
ProcessMethodAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ13))
Typ = Typ03.GetMethod("IsInstanceOfType", typ13).ReturnType
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 158, 1, 158, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa45 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru45 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont45 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru45)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa45)
ProcessMethodAttrsIL.MarkLabel(tru45)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 159, 1, 159, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, CInt(2048))
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 160, 1, 160, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa46 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru46 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont46 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru46)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa46)
ProcessMethodAttrsIL.MarkLabel(tru46)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 161, 1, 161, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessMethodAttrsIL.Emit(OpCodes.And)
ProcessMethodAttrsIL.Emit(OpCodes.Not)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 162, 1, 162, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 163, 1, 163, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont46)
ProcessMethodAttrsIL.MarkLabel(fa46)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 164, 1, 164, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.Emit(OpCodes.Or)
ProcessMethodAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 165, 1, 165, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont46)
ProcessMethodAttrsIL.MarkLabel(cont46)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 166, 1, 166, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, label5)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 167, 1, 167, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont45)
ProcessMethodAttrsIL.MarkLabel(fa45)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont45)
ProcessMethodAttrsIL.MarkLabel(cont45)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 169, 1, 169, 100)
ProcessMethodAttrsIL.MarkLabel(label5)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 171, 1, 171, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa47 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim tru47 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
Dim cont47 As System.Reflection.Emit.Label = ProcessMethodAttrsIL.DefineLabel()
ProcessMethodAttrsIL.Emit(OpCodes.Beq, tru47)
ProcessMethodAttrsIL.Emit(OpCodes.Br, fa47)
ProcessMethodAttrsIL.MarkLabel(tru47)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 172, 1, 172, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, label4)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 173, 1, 173, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont47)
ProcessMethodAttrsIL.MarkLabel(fa47)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 174, 1, 174, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, label3)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 175, 1, 175, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Br, cont47)
ProcessMethodAttrsIL.MarkLabel(cont47)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 178, 1, 178, 100)
ProcessMethodAttrsIL.MarkLabel(label4)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 181, 1, 181, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(MethodAttributes)
ProcessMethodAttrsIL.MarkSequencePoint(doc8, 182, 1, 182, 100)
ProcessMethodAttrsIL.Emit(OpCodes.Ret)
Dim typ14(-1) As Type
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = GetType(Attributes.Attribute).MakeArrayType()
Dim ProcessFieldAttrs As MethodBuilder = Helpers.DefineMethod("ProcessFieldAttrs", MethodAttributes.Public Or MethodAttributes.Static, GetType(FieldAttributes), typ14)
Dim ProcessFieldAttrsIL As ILGenerator = ProcessFieldAttrs.GetILGenerator()
Dim ProcessFieldAttrsparam01 As ParameterBuilder = ProcessFieldAttrs.DefineParameter(1, ParameterAttributes.None, "attrs")
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 186, 1, 186, 100)
Dim locbldr91 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(FieldAttributes))
locbldr91.SetLocalSymInfo("ta")
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 187, 1, 187, 100)
Dim locbldr92 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(FieldAttributes))
locbldr92.SetLocalSymInfo("temp")
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 189, 1, 189, 100)
Dim label6 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 190, 1, 190, 100)
Dim label7 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 191, 1, 191, 100)
Dim label8 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 193, 1, 193, 100)
Dim locbldr93 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(System.Int32))
locbldr93.SetLocalSymInfo("len")
ProcessFieldAttrsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Attributes.Attribute).MakeArrayType()
ProcessFieldAttrsIL.Emit(OpCodes.Ldlen)
ProcessFieldAttrsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Sub)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 2)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 194, 1, 194, 100)
Dim locbldr94 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(System.Int32))
locbldr94.SetLocalSymInfo("i")
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 3)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 195, 1, 195, 100)
Dim locbldr95 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(System.Boolean))
locbldr95.SetLocalSymInfo("b")
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 196, 1, 196, 100)
Dim locbldr96 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(System.Type))
locbldr96.SetLocalSymInfo("typ")
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 197, 1, 197, 100)
Dim locbldr97 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(Attributes.Attribute))
locbldr97.SetLocalSymInfo("curattr")
ProcessFieldAttrsIL.Emit(OpCodes.Ldnull)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 6)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 198, 1, 198, 100)
Dim locbldr98 As LocalBuilder = ProcessFieldAttrsIL.DeclareLocal(GetType(System.Boolean))
locbldr98.SetLocalSymInfo("fir")
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 200, 1, 200, 100)
ProcessFieldAttrsIL.MarkLabel(label6)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 202, 1, 202, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Add)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 3)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 204, 1, 204, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Attributes.Attribute).MakeArrayType()
Typ02 = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ProcessFieldAttrsIL.Emit(OpCodes.Ldelem, GetType(Attributes.Attribute).MakeArrayType().GetElementType())
Typ = GetType(Attributes.Attribute).MakeArrayType().GetElementType()
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 6)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 206, 1, 206, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.PublicAttr))
Dim typ15 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessFieldAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ15))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ15).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 207, 1, 207, 100)
Dim typ16(-1) As Type
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessFieldAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ16(UBound(typ16) + 1)
typ16(UBound(typ16)) = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ16))
Typ = Typ03.GetMethod("IsInstanceOfType", typ16).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 209, 1, 209, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa48 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru48 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont48 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru48)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa48)
ProcessFieldAttrsIL.MarkLabel(tru48)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 210, 1, 210, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(6))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 211, 1, 211, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa49 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru49 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont49 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru49)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa49)
ProcessFieldAttrsIL.MarkLabel(tru49)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 212, 1, 212, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.And)
ProcessFieldAttrsIL.Emit(OpCodes.Not)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 213, 1, 213, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 214, 1, 214, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont49)
ProcessFieldAttrsIL.MarkLabel(fa49)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 215, 1, 215, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Or)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 216, 1, 216, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont49)
ProcessFieldAttrsIL.MarkLabel(cont49)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 217, 1, 217, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, label8)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 218, 1, 218, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont48)
ProcessFieldAttrsIL.MarkLabel(fa48)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont48)
ProcessFieldAttrsIL.MarkLabel(cont48)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 220, 1, 220, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.StaticAttr))
Dim typ17 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessFieldAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ17))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ17).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 221, 1, 221, 100)
Dim typ18(-1) As Type
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessFieldAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ18(UBound(typ18) + 1)
typ18(UBound(typ18)) = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ18))
Typ = Typ03.GetMethod("IsInstanceOfType", typ18).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 223, 1, 223, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa50 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru50 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont50 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru50)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa50)
ProcessFieldAttrsIL.MarkLabel(tru50)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 224, 1, 224, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(16))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 225, 1, 225, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa51 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru51 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont51 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru51)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa51)
ProcessFieldAttrsIL.MarkLabel(tru51)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 226, 1, 226, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.And)
ProcessFieldAttrsIL.Emit(OpCodes.Not)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 227, 1, 227, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 228, 1, 228, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont51)
ProcessFieldAttrsIL.MarkLabel(fa51)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 229, 1, 229, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Or)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 230, 1, 230, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont51)
ProcessFieldAttrsIL.MarkLabel(cont51)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 231, 1, 231, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, label8)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 232, 1, 232, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont50)
ProcessFieldAttrsIL.MarkLabel(fa50)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont50)
ProcessFieldAttrsIL.MarkLabel(cont50)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 234, 1, 234, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.InitOnlyAttr))
Dim typ19 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessFieldAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ19))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ19).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 235, 1, 235, 100)
Dim typ20(-1) As Type
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessFieldAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ20(UBound(typ20) + 1)
typ20(UBound(typ20)) = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ20))
Typ = Typ03.GetMethod("IsInstanceOfType", typ20).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 237, 1, 237, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa52 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru52 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont52 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru52)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa52)
ProcessFieldAttrsIL.MarkLabel(tru52)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 238, 1, 238, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(32))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 239, 1, 239, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa53 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru53 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont53 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru53)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa53)
ProcessFieldAttrsIL.MarkLabel(tru53)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 240, 1, 240, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.And)
ProcessFieldAttrsIL.Emit(OpCodes.Not)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 241, 1, 241, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 242, 1, 242, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont53)
ProcessFieldAttrsIL.MarkLabel(fa53)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 243, 1, 243, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Or)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 244, 1, 244, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont53)
ProcessFieldAttrsIL.MarkLabel(cont53)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 245, 1, 245, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, label8)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 246, 1, 246, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont52)
ProcessFieldAttrsIL.MarkLabel(fa52)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont52)
ProcessFieldAttrsIL.MarkLabel(cont52)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 248, 1, 248, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldtoken, GetType(Attributes.PrivateAttr))
Dim typ21 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessFieldAttrsIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ21))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ21).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 5)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 249, 1, 249, 100)
Dim typ22(-1) As Type
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Attributes.Attribute)
ProcessFieldAttrsIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ22(UBound(typ22) + 1)
typ22(UBound(typ22)) = Typ
ProcessFieldAttrsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ22))
Typ = Typ03.GetMethod("IsInstanceOfType", typ22).ReturnType
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 4)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 251, 1, 251, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa54 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru54 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont54 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru54)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa54)
ProcessFieldAttrsIL.MarkLabel(tru54)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 252, 1, 252, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 1)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 253, 1, 253, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa55 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru55 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont55 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru55)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa55)
ProcessFieldAttrsIL.MarkLabel(tru55)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 254, 1, 254, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ProcessFieldAttrsIL.Emit(OpCodes.And)
ProcessFieldAttrsIL.Emit(OpCodes.Not)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 7)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 255, 1, 255, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 256, 1, 256, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont55)
ProcessFieldAttrsIL.MarkLabel(fa55)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 257, 1, 257, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.Emit(OpCodes.Or)
ProcessFieldAttrsIL.Emit(OpCodes.Stloc, 0)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 258, 1, 258, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont55)
ProcessFieldAttrsIL.MarkLabel(cont55)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 259, 1, 259, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, label8)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 260, 1, 260, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont54)
ProcessFieldAttrsIL.MarkLabel(fa54)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont54)
ProcessFieldAttrsIL.MarkLabel(cont54)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 263, 1, 263, 100)
ProcessFieldAttrsIL.MarkLabel(label8)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 265, 1, 265, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa56 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim tru56 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
Dim cont56 As System.Reflection.Emit.Label = ProcessFieldAttrsIL.DefineLabel()
ProcessFieldAttrsIL.Emit(OpCodes.Beq, tru56)
ProcessFieldAttrsIL.Emit(OpCodes.Br, fa56)
ProcessFieldAttrsIL.MarkLabel(tru56)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 266, 1, 266, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, label7)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 267, 1, 267, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont56)
ProcessFieldAttrsIL.MarkLabel(fa56)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 268, 1, 268, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, label6)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 269, 1, 269, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Br, cont56)
ProcessFieldAttrsIL.MarkLabel(cont56)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 272, 1, 272, 100)
ProcessFieldAttrsIL.MarkLabel(label7)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 275, 1, 275, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(FieldAttributes)
ProcessFieldAttrsIL.MarkSequencePoint(doc8, 276, 1, 276, 100)
ProcessFieldAttrsIL.Emit(OpCodes.Ret)
Dim typ23(-1) As Type
ReDim Preserve typ23(UBound(typ23) + 1)
typ23(UBound(typ23)) = GetType(TypeTok)
Dim EvalTTok As MethodBuilder = Helpers.DefineMethod("EvalTTok", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ23)
Dim EvalTTokIL As ILGenerator = EvalTTok.GetILGenerator()
Dim EvalTTokparam01 As ParameterBuilder = EvalTTok.DefineParameter(1, ParameterAttributes.None, "tt")
EvalTTokIL.MarkSequencePoint(doc8, 283, 1, 283, 100)
Dim locbldr99 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.Type).MakeArrayType())
locbldr99.SetLocalSymInfo("tarr")
EvalTTokIL.MarkSequencePoint(doc8, 284, 1, 284, 100)
Dim locbldr100 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.Type))
locbldr100.SetLocalSymInfo("typ")
EvalTTokIL.MarkSequencePoint(doc8, 285, 1, 285, 100)
Dim locbldr101 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.Type))
locbldr101.SetLocalSymInfo("temptyp")
EvalTTokIL.MarkSequencePoint(doc8, 286, 1, 286, 100)
Dim locbldr102 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(GenericTypeTok))
locbldr102.SetLocalSymInfo("gtt")
EvalTTokIL.MarkSequencePoint(doc8, 287, 1, 287, 100)
Dim locbldr103 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(TypeTok).MakeArrayType())
locbldr103.SetLocalSymInfo("pttoks")
EvalTTokIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Conv_U)
EvalTTokIL.Emit(OpCodes.Newarr, GetType(TypeTok))
EvalTTokIL.Emit(OpCodes.Stloc, 4)
EvalTTokIL.MarkSequencePoint(doc8, 288, 1, 288, 100)
Dim locbldr104 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(TypeTok))
locbldr104.SetLocalSymInfo("curpttok")
EvalTTokIL.Emit(OpCodes.Newobj, GetType(TypeToK).GetConstructor(Type.EmptyTypes))
EvalTTokIL.Emit(OpCodes.Stloc, 5)
EvalTTokIL.MarkSequencePoint(doc8, 289, 1, 289, 100)
Dim locbldr105 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.Int32))
locbldr105.SetLocalSymInfo("i")
EvalTTokIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Stloc, 6)
EvalTTokIL.MarkSequencePoint(doc8, 290, 1, 290, 100)
Dim locbldr106 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.Int32))
locbldr106.SetLocalSymInfo("len")
EvalTTokIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Stloc, 7)
EvalTTokIL.MarkSequencePoint(doc8, 291, 1, 291, 100)
Dim locbldr107 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.Int32))
locbldr107.SetLocalSymInfo("n")
EvalTTokIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Stloc, 8)
EvalTTokIL.MarkSequencePoint(doc8, 292, 1, 292, 100)
Dim locbldr108 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.Int32))
locbldr108.SetLocalSymInfo("comp")
EvalTTokIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Stloc, 9)
EvalTTokIL.MarkSequencePoint(doc8, 293, 1, 293, 100)
Dim locbldr109 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.String))
locbldr109.SetLocalSymInfo("tstr")
EvalTTokIL.Emit(OpCodes.Ldstr, " ")
Typ = GetType(System.String)
EvalTTokIL.Emit(OpCodes.Stloc, 10)
EvalTTokIL.MarkSequencePoint(doc8, 295, 1, 295, 100)
Dim locbldr110 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.Type))
locbldr110.SetLocalSymInfo("ttyp")
EvalTTokIL.Emit(OpCodes.Ldtoken, GetType(GenericTypeTok))
Dim typ24 As Type() = {GetType(System.RuntimeTypeHandle)}
EvalTTokIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ24))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ24).ReturnType
EvalTTokIL.Emit(OpCodes.Stloc, 11)
EvalTTokIL.MarkSequencePoint(doc8, 296, 1, 296, 100)
Dim locbldr111 As LocalBuilder = EvalTTokIL.DeclareLocal(GetType(System.Boolean))
locbldr111.SetLocalSymInfo("b")
Dim typ25(-1) As Type
EvalTTokIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Type)
Typ03 = Typ
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ25(UBound(typ25) + 1)
typ25(UBound(typ25)) = Typ
EvalTTokIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ25))
Typ = Typ03.GetMethod("IsInstanceOfType", typ25).ReturnType
EvalTTokIL.Emit(OpCodes.Stloc, 12)
EvalTTokIL.MarkSequencePoint(doc8, 298, 1, 298, 100)
Dim label9 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
EvalTTokIL.MarkSequencePoint(doc8, 299, 1, 299, 100)
Dim label10 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
EvalTTokIL.MarkSequencePoint(doc8, 301, 1, 301, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(System.Boolean)
EvalTTokIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa57 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
Dim tru57 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
Dim cont57 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
EvalTTokIL.Emit(OpCodes.Beq, fa57)
EvalTTokIL.Emit(OpCodes.Br, tru57)
EvalTTokIL.MarkLabel(tru57)
EvalTTokIL.MarkSequencePoint(doc8, 303, 1, 303, 100)
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Stloc, 3)
EvalTTokIL.MarkSequencePoint(doc8, 304, 1, 304, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(GenericTypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(GenericTypeTok).GetField("Params"))
Typ = GetType(GenericTypeTok).GetField("Params").FieldType
EvalTTokIL.Emit(OpCodes.Stloc, 4)
EvalTTokIL.MarkSequencePoint(doc8, 305, 1, 305, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(TypeTok).MakeArrayType()
EvalTTokIL.Emit(OpCodes.Ldlen)
EvalTTokIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Stloc, 8)
EvalTTokIL.MarkSequencePoint(doc8, 306, 1, 306, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Sub)
EvalTTokIL.Emit(OpCodes.Stloc, 7)
EvalTTokIL.MarkSequencePoint(doc8, 308, 1, 308, 100)
EvalTTokIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
EvalTTokIL.Emit(OpCodes.Stloc, 0)
EvalTTokIL.MarkSequencePoint(doc8, 309, 1, 309, 100)
EvalTTokIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Conv_U)
EvalTTokIL.Emit(OpCodes.Newarr, GetType(System.Type))
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("TypArr"))
EvalTTokIL.MarkSequencePoint(doc8, 311, 1, 311, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(GenericTypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(GenericTypeTok).GetField("IsArray"))
Typ = GetType(GenericTypeTok).GetField("IsArray").FieldType
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeArr"))
EvalTTokIL.MarkSequencePoint(doc8, 312, 1, 312, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(GenericTypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(GenericTypeTok).GetField("IsByRef"))
Typ = GetType(GenericTypeTok).GetField("IsByRef").FieldType
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeRef"))
EvalTTokIL.MarkSequencePoint(doc8, 313, 1, 313, 100)
Dim typ26(-1) As Type
EvalTTokIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(GenericTypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(GenericTypeTok).GetField("Value"))
Typ = GetType(GenericTypeTok).GetField("Value").FieldType
ReDim Preserve typ26(UBound(typ26) + 1)
typ26(UBound(typ26)) = Typ
EvalTTokIL.Emit(OpCodes.Ldstr, "`")
Typ = GetType(System.String)
ReDim Preserve typ26(UBound(typ26) + 1)
typ26(UBound(typ26)) = Typ
EvalTTokIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Int32)
Dim typ27 As Type() = {Typ}
EvalTTokIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToString", typ27))
Typ = GetType(System.Convert).GetMethod("ToString", typ27).ReturnType
ReDim Preserve typ26(UBound(typ26) + 1)
typ26(UBound(typ26)) = Typ
EvalTTokIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ26))
Typ = GetType(String).GetMethod("Concat", typ26).ReturnType
EvalTTokIL.Emit(OpCodes.Stloc, 10)
EvalTTokIL.MarkSequencePoint(doc8, 314, 1, 314, 100)
Dim typ28(-1) As Type
EvalTTokIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(System.String)
ReDim Preserve typ28(UBound(typ28) + 1)
typ28(UBound(typ28)) = Typ
EvalTTokIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadClass", typ28))
Typ = GetType(Loader).GetMethod("LoadClass", typ28).ReturnType
EvalTTokIL.Emit(OpCodes.Stloc, 1)
EvalTTokIL.MarkSequencePoint(doc8, 316, 1, 316, 100)
EvalTTokIL.MarkLabel(label10)
EvalTTokIL.MarkSequencePoint(doc8, 318, 1, 318, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Add)
EvalTTokIL.Emit(OpCodes.Stloc, 6)
EvalTTokIL.MarkSequencePoint(doc8, 320, 1, 320, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(TypeTok).MakeArrayType()
Typ02 = Typ
EvalTTokIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EvalTTokIL.Emit(OpCodes.Ldelem, GetType(TypeTok).MakeArrayType().GetElementType())
Typ = GetType(TypeTok).MakeArrayType().GetElementType()
EvalTTokIL.Emit(OpCodes.Stloc, 5)
EvalTTokIL.MarkSequencePoint(doc8, 321, 1, 321, 100)
Dim typ29(-1) As Type
EvalTTokIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(TypeTok)
ReDim Preserve typ29(UBound(typ29) + 1)
typ29(UBound(typ29)) = Typ
EvalTTokIL.Emit(OpCodes.Call, EvalTTok)
Typ = EvalTTok.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EvalTTokIL.Emit(OpCodes.Pop)
End If
EvalTTokIL.MarkSequencePoint(doc8, 322, 1, 322, 100)
EvalTTokIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type01"))
Typ = GetType(AsmFactory).GetField("Type01").FieldType
EvalTTokIL.Emit(OpCodes.Stloc, 2)
EvalTTokIL.MarkSequencePoint(doc8, 323, 1, 323, 100)
Dim typ30(-1) As Type
EvalTTokIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ30(UBound(typ30) + 1)
typ30(UBound(typ30)) = Typ
EvalTTokIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("AddTyp", typ30))
Typ = GetType(AsmFactory).GetMethod("AddTyp", typ30).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EvalTTokIL.Emit(OpCodes.Pop)
End If
EvalTTokIL.MarkSequencePoint(doc8, 325, 1, 325, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
Dim fa58 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
Dim tru58 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
Dim cont58 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
EvalTTokIL.Emit(OpCodes.Beq, tru58)
EvalTTokIL.Emit(OpCodes.Br, fa58)
EvalTTokIL.MarkLabel(tru58)
EvalTTokIL.MarkSequencePoint(doc8, 326, 1, 326, 100)
EvalTTokIL.Emit(OpCodes.Br, label9)
EvalTTokIL.MarkSequencePoint(doc8, 327, 1, 327, 100)
EvalTTokIL.Emit(OpCodes.Br, cont58)
EvalTTokIL.MarkLabel(fa58)
EvalTTokIL.MarkSequencePoint(doc8, 328, 1, 328, 100)
EvalTTokIL.Emit(OpCodes.Br, label10)
EvalTTokIL.MarkSequencePoint(doc8, 329, 1, 329, 100)
EvalTTokIL.Emit(OpCodes.Br, cont58)
EvalTTokIL.MarkLabel(cont58)
EvalTTokIL.MarkSequencePoint(doc8, 331, 1, 331, 100)
EvalTTokIL.MarkLabel(label9)
EvalTTokIL.MarkSequencePoint(doc8, 334, 1, 334, 100)
Dim typ31(-1) As Type
EvalTTokIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EvalTTokIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ReDim Preserve typ31(UBound(typ31) + 1)
typ31(UBound(typ31)) = Typ
EvalTTokIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("MakeGenericType", typ31))
Typ = Typ03.GetMethod("MakeGenericType", typ31).ReturnType
EvalTTokIL.Emit(OpCodes.Stloc, 1)
EvalTTokIL.MarkSequencePoint(doc8, 335, 1, 335, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type).MakeArrayType()
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("TypArr"))
EvalTTokIL.MarkSequencePoint(doc8, 337, 1, 337, 100)
EvalTTokIL.Emit(OpCodes.Br, cont57)
EvalTTokIL.MarkLabel(fa57)
EvalTTokIL.MarkSequencePoint(doc8, 339, 1, 339, 100)
Dim label11 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
EvalTTokIL.MarkSequencePoint(doc8, 341, 1, 341, 100)
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("RefTyp"))
Typ = GetType(TypeTok).GetField("RefTyp").FieldType
EvalTTokIL.Emit(OpCodes.Ldnull)
Dim fa59 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
Dim tru59 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
Dim cont59 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
EvalTTokIL.Emit(OpCodes.Beq, tru59)
EvalTTokIL.Emit(OpCodes.Br, fa59)
EvalTTokIL.MarkLabel(tru59)
EvalTTokIL.MarkSequencePoint(doc8, 342, 1, 342, 100)
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("IsArray"))
Typ = GetType(TypeTok).GetField("IsArray").FieldType
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeArr"))
EvalTTokIL.MarkSequencePoint(doc8, 343, 1, 343, 100)
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("IsByRef"))
Typ = GetType(TypeTok).GetField("IsByRef").FieldType
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeRef"))
EvalTTokIL.MarkSequencePoint(doc8, 344, 1, 344, 100)
Dim typ32(-1) As Type
EvalTTokIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypName"))
Typ = GetType(AsmFactory).GetField("CurnTypName").FieldType
ReDim Preserve typ32(UBound(typ32) + 1)
typ32(UBound(typ32)) = Typ
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("Value"))
Typ = GetType(TypeTok).GetField("Value").FieldType
ReDim Preserve typ32(UBound(typ32) + 1)
typ32(UBound(typ32)) = Typ
EvalTTokIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ32))
Typ = GetType(String).GetMethod("Compare", typ32).ReturnType
EvalTTokIL.Emit(OpCodes.Stloc, 9)
EvalTTokIL.MarkSequencePoint(doc8, 345, 1, 345, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Int32)
EvalTTokIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa60 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
Dim tru60 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
Dim cont60 As System.Reflection.Emit.Label = EvalTTokIL.DefineLabel()
EvalTTokIL.Emit(OpCodes.Beq, tru60)
EvalTTokIL.Emit(OpCodes.Br, fa60)
EvalTTokIL.MarkLabel(tru60)
EvalTTokIL.MarkSequencePoint(doc8, 346, 1, 346, 100)
EvalTTokIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
EvalTTokIL.Emit(OpCodes.Stloc, 1)
EvalTTokIL.MarkSequencePoint(doc8, 347, 1, 347, 100)
EvalTTokIL.Emit(OpCodes.Br, cont60)
EvalTTokIL.MarkLabel(fa60)
EvalTTokIL.MarkSequencePoint(doc8, 348, 1, 348, 100)
Dim typ33(-1) As Type
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("Value"))
Typ = GetType(TypeTok).GetField("Value").FieldType
ReDim Preserve typ33(UBound(typ33) + 1)
typ33(UBound(typ33)) = Typ
EvalTTokIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadClass", typ33))
Typ = GetType(Loader).GetMethod("LoadClass", typ33).ReturnType
EvalTTokIL.Emit(OpCodes.Stloc, 1)
EvalTTokIL.MarkSequencePoint(doc8, 349, 1, 349, 100)
EvalTTokIL.Emit(OpCodes.Br, cont60)
EvalTTokIL.MarkLabel(cont60)
EvalTTokIL.MarkSequencePoint(doc8, 350, 1, 350, 100)
EvalTTokIL.Emit(OpCodes.Br, label11)
EvalTTokIL.MarkSequencePoint(doc8, 351, 1, 351, 100)
EvalTTokIL.Emit(OpCodes.Br, cont59)
EvalTTokIL.MarkLabel(fa59)
EvalTTokIL.Emit(OpCodes.Br, cont59)
EvalTTokIL.MarkLabel(cont59)
EvalTTokIL.MarkSequencePoint(doc8, 353, 1, 353, 100)
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("IsArray"))
Typ = GetType(TypeTok).GetField("IsArray").FieldType
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeArr"))
EvalTTokIL.MarkSequencePoint(doc8, 354, 1, 354, 100)
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("IsByRef"))
Typ = GetType(TypeTok).GetField("IsByRef").FieldType
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(Loader).GetField("MakeRef"))
EvalTTokIL.MarkSequencePoint(doc8, 355, 1, 355, 100)
Dim typ34(-1) As Type
EvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
EvalTTokIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("RefTyp"))
Typ = GetType(TypeTok).GetField("RefTyp").FieldType
ReDim Preserve typ34(UBound(typ34) + 1)
typ34(UBound(typ34)) = Typ
EvalTTokIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("ProcessType", typ34))
Typ = GetType(Loader).GetMethod("ProcessType", typ34).ReturnType
EvalTTokIL.Emit(OpCodes.Stloc, 1)
EvalTTokIL.MarkSequencePoint(doc8, 357, 1, 357, 100)
EvalTTokIL.MarkLabel(label11)
EvalTTokIL.MarkSequencePoint(doc8, 359, 1, 359, 100)
EvalTTokIL.Emit(OpCodes.Br, cont57)
EvalTTokIL.MarkLabel(cont57)
EvalTTokIL.MarkSequencePoint(doc8, 361, 1, 361, 100)
EvalTTokIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
EvalTTokIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type01"))
EvalTTokIL.MarkSequencePoint(doc8, 363, 1, 363, 100)
EvalTTokIL.Emit(OpCodes.Ret)
Dim typ35(-1) As Type
ReDim Preserve typ35(UBound(typ35) + 1)
typ35(UBound(typ35)) = GetType(TypeTok)
Dim CommitEvalTTok As MethodBuilder = Helpers.DefineMethod("CommitEvalTTok", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Type), typ35)
Dim CommitEvalTTokIL As ILGenerator = CommitEvalTTok.GetILGenerator()
Dim CommitEvalTTokparam01 As ParameterBuilder = CommitEvalTTok.DefineParameter(1, ParameterAttributes.None, "tt")
CommitEvalTTokIL.MarkSequencePoint(doc8, 366, 1, 366, 100)
Dim typ36(-1) As Type
CommitEvalTTokIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(TypeTok)
ReDim Preserve typ36(UBound(typ36) + 1)
typ36(UBound(typ36)) = Typ
CommitEvalTTokIL.Emit(OpCodes.Call, EvalTTok)
Typ = EvalTTok.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
CommitEvalTTokIL.Emit(OpCodes.Pop)
End If
CommitEvalTTokIL.MarkSequencePoint(doc8, 367, 1, 367, 100)
CommitEvalTTokIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type01"))
Typ = GetType(AsmFactory).GetField("Type01").FieldType
CommitEvalTTokIL.MarkSequencePoint(doc8, 368, 1, 368, 100)
CommitEvalTTokIL.Emit(OpCodes.Ret)
Dim typ37(-1) As Type
ReDim Preserve typ37(UBound(typ37) + 1)
typ37(UBound(typ37)) = GetType(Expr).MakeArrayType()
Dim ProcessParams As MethodBuilder = Helpers.DefineMethod("ProcessParams", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ37)
Dim ProcessParamsIL As ILGenerator = ProcessParams.GetILGenerator()
Dim ProcessParamsparam01 As ParameterBuilder = ProcessParams.DefineParameter(1, ParameterAttributes.None, "ps")
ProcessParamsIL.MarkSequencePoint(doc8, 372, 1, 372, 100)
Dim locbldr112 As LocalBuilder = ProcessParamsIL.DeclareLocal(GetType(System.Int32))
locbldr112.SetLocalSymInfo("len")
ProcessParamsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Expr).MakeArrayType()
ProcessParamsIL.Emit(OpCodes.Ldlen)
ProcessParamsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessParamsIL.Emit(OpCodes.Sub)
ProcessParamsIL.Emit(OpCodes.Stloc, 0)
ProcessParamsIL.MarkSequencePoint(doc8, 373, 1, 373, 100)
Dim locbldr113 As LocalBuilder = ProcessParamsIL.DeclareLocal(GetType(System.Int32))
locbldr113.SetLocalSymInfo("i")
ProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ProcessParamsIL.Emit(OpCodes.Stloc, 1)
ProcessParamsIL.MarkSequencePoint(doc8, 374, 1, 374, 100)
Dim locbldr114 As LocalBuilder = ProcessParamsIL.DeclareLocal(GetType(VarExpr))
locbldr114.SetLocalSymInfo("curp")
ProcessParamsIL.Emit(OpCodes.Ldnull)
ProcessParamsIL.Emit(OpCodes.Stloc, 2)
ProcessParamsIL.MarkSequencePoint(doc8, 375, 1, 375, 100)
Dim locbldr115 As LocalBuilder = ProcessParamsIL.DeclareLocal(GetType(TypeTok))
locbldr115.SetLocalSymInfo("typtok")
ProcessParamsIL.MarkSequencePoint(doc8, 376, 1, 376, 100)
Dim locbldr116 As LocalBuilder = ProcessParamsIL.DeclareLocal(GetType(Ident))
locbldr116.SetLocalSymInfo("nam")
ProcessParamsIL.MarkSequencePoint(doc8, 377, 1, 377, 100)
Dim locbldr117 As LocalBuilder = ProcessParamsIL.DeclareLocal(GetType(System.Type))
locbldr117.SetLocalSymInfo("typ")
ProcessParamsIL.Emit(OpCodes.Ldnull)
ProcessParamsIL.Emit(OpCodes.Stloc, 5)
ProcessParamsIL.MarkSequencePoint(doc8, 381, 1, 381, 100)
Dim label12 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
ProcessParamsIL.MarkSequencePoint(doc8, 382, 1, 382, 100)
Dim label13 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
ProcessParamsIL.MarkSequencePoint(doc8, 384, 1, 384, 100)
ProcessParamsIL.MarkLabel(label12)
ProcessParamsIL.MarkSequencePoint(doc8, 386, 1, 386, 100)
ProcessParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ProcessParamsIL.Emit(OpCodes.Add)
ProcessParamsIL.Emit(OpCodes.Stloc, 1)
ProcessParamsIL.MarkSequencePoint(doc8, 388, 1, 388, 100)
ProcessParamsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Expr).MakeArrayType()
Typ02 = Typ
ProcessParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ProcessParamsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ProcessParamsIL.Emit(OpCodes.Ldelem, GetType(Expr).MakeArrayType().GetElementType())
Typ = GetType(Expr).MakeArrayType().GetElementType()
ProcessParamsIL.Emit(OpCodes.Stloc, 2)
ProcessParamsIL.MarkSequencePoint(doc8, 389, 1, 389, 100)
ProcessParamsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarExpr)
ProcessParamsIL.Emit(OpCodes.Ldfld, GetType(VarExpr).GetField("VarTyp"))
Typ = GetType(VarExpr).GetField("VarTyp").FieldType
ProcessParamsIL.Emit(OpCodes.Stloc, 3)
ProcessParamsIL.MarkSequencePoint(doc8, 402, 1, 402, 100)
Dim typ38(-1) As Type
ProcessParamsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(TypeTok)
ReDim Preserve typ38(UBound(typ38) + 1)
typ38(UBound(typ38)) = Typ
ProcessParamsIL.Emit(OpCodes.Call, CommitEvalTTok)
Typ = CommitEvalTTok.ReturnType
ProcessParamsIL.Emit(OpCodes.Stloc, 5)
ProcessParamsIL.MarkSequencePoint(doc8, 404, 1, 404, 100)
ProcessParamsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
ProcessParamsIL.Emit(OpCodes.Ldnull)
Dim fa61 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
Dim tru61 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
Dim cont61 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
ProcessParamsIL.Emit(OpCodes.Beq, fa61)
ProcessParamsIL.Emit(OpCodes.Br, tru61)
ProcessParamsIL.MarkLabel(tru61)
ProcessParamsIL.MarkSequencePoint(doc8, 405, 1, 405, 100)
Dim typ39(-1) As Type
ProcessParamsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
ReDim Preserve typ39(UBound(typ39) + 1)
typ39(UBound(typ39)) = Typ
ProcessParamsIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("AddTyp", typ39))
Typ = GetType(AsmFactory).GetMethod("AddTyp", typ39).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ProcessParamsIL.Emit(OpCodes.Pop)
End If
ProcessParamsIL.MarkSequencePoint(doc8, 406, 1, 406, 100)
ProcessParamsIL.Emit(OpCodes.Br, cont61)
ProcessParamsIL.MarkLabel(fa61)
ProcessParamsIL.Emit(OpCodes.Br, cont61)
ProcessParamsIL.MarkLabel(cont61)
ProcessParamsIL.MarkSequencePoint(doc8, 408, 1, 408, 100)
ProcessParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ProcessParamsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
Dim fa62 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
Dim tru62 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
Dim cont62 As System.Reflection.Emit.Label = ProcessParamsIL.DefineLabel()
ProcessParamsIL.Emit(OpCodes.Beq, tru62)
ProcessParamsIL.Emit(OpCodes.Br, fa62)
ProcessParamsIL.MarkLabel(tru62)
ProcessParamsIL.MarkSequencePoint(doc8, 409, 1, 409, 100)
ProcessParamsIL.Emit(OpCodes.Br, label13)
ProcessParamsIL.MarkSequencePoint(doc8, 410, 1, 410, 100)
ProcessParamsIL.Emit(OpCodes.Br, cont62)
ProcessParamsIL.MarkLabel(fa62)
ProcessParamsIL.MarkSequencePoint(doc8, 411, 1, 411, 100)
ProcessParamsIL.Emit(OpCodes.Br, label12)
ProcessParamsIL.MarkSequencePoint(doc8, 412, 1, 412, 100)
ProcessParamsIL.Emit(OpCodes.Br, cont62)
ProcessParamsIL.MarkLabel(cont62)
ProcessParamsIL.MarkSequencePoint(doc8, 414, 1, 414, 100)
ProcessParamsIL.MarkLabel(label13)
ProcessParamsIL.MarkSequencePoint(doc8, 416, 1, 416, 100)
ProcessParamsIL.Emit(OpCodes.Ret)
Dim typ40(-1) As Type
ReDim Preserve typ40(UBound(typ40) + 1)
typ40(UBound(typ40)) = GetType(Expr).MakeArrayType()
Dim PostProcessParams As MethodBuilder = Helpers.DefineMethod("PostProcessParams", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ40)
Dim PostProcessParamsIL As ILGenerator = PostProcessParams.GetILGenerator()
Dim PostProcessParamsparam01 As ParameterBuilder = PostProcessParams.DefineParameter(1, ParameterAttributes.None, "ps")
PostProcessParamsIL.MarkSequencePoint(doc8, 420, 1, 420, 100)
Dim locbldr118 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(System.Int32))
locbldr118.SetLocalSymInfo("len")
PostProcessParamsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Expr).MakeArrayType()
PostProcessParamsIL.Emit(OpCodes.Ldlen)
PostProcessParamsIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Sub)
PostProcessParamsIL.Emit(OpCodes.Stloc, 0)
PostProcessParamsIL.MarkSequencePoint(doc8, 421, 1, 421, 100)
Dim locbldr119 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(System.Int32))
locbldr119.SetLocalSymInfo("i")
PostProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Stloc, 1)
PostProcessParamsIL.MarkSequencePoint(doc8, 422, 1, 422, 100)
Dim locbldr120 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(VarExpr))
locbldr120.SetLocalSymInfo("curp")
PostProcessParamsIL.Emit(OpCodes.Ldnull)
PostProcessParamsIL.Emit(OpCodes.Stloc, 2)
PostProcessParamsIL.MarkSequencePoint(doc8, 423, 1, 423, 100)
Dim locbldr121 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(Ident))
locbldr121.SetLocalSymInfo("nam")
PostProcessParamsIL.MarkSequencePoint(doc8, 424, 1, 424, 100)
Dim locbldr122 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(TypeTok))
locbldr122.SetLocalSymInfo("typtok")
PostProcessParamsIL.MarkSequencePoint(doc8, 425, 1, 425, 100)
Dim locbldr123 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(System.Type))
locbldr123.SetLocalSymInfo("typ")
PostProcessParamsIL.Emit(OpCodes.Ldnull)
PostProcessParamsIL.Emit(OpCodes.Stloc, 5)
PostProcessParamsIL.MarkSequencePoint(doc8, 426, 1, 426, 100)
Dim locbldr124 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(System.Type))
locbldr124.SetLocalSymInfo("reft")
PostProcessParamsIL.MarkSequencePoint(doc8, 429, 1, 429, 100)
Dim label14 As System.Reflection.Emit.Label = PostProcessParamsIL.DefineLabel()
PostProcessParamsIL.MarkSequencePoint(doc8, 430, 1, 430, 100)
Dim label15 As System.Reflection.Emit.Label = PostProcessParamsIL.DefineLabel()
PostProcessParamsIL.MarkSequencePoint(doc8, 432, 1, 432, 100)
PostProcessParamsIL.MarkLabel(label14)
PostProcessParamsIL.MarkSequencePoint(doc8, 434, 1, 434, 100)
PostProcessParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Add)
PostProcessParamsIL.Emit(OpCodes.Stloc, 1)
PostProcessParamsIL.MarkSequencePoint(doc8, 436, 1, 436, 100)
PostProcessParamsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Expr).MakeArrayType()
Typ02 = Typ
PostProcessParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Conv_U)
Typ = Typ02
PostProcessParamsIL.Emit(OpCodes.Ldelem, GetType(Expr).MakeArrayType().GetElementType())
Typ = GetType(Expr).MakeArrayType().GetElementType()
PostProcessParamsIL.Emit(OpCodes.Stloc, 2)
PostProcessParamsIL.MarkSequencePoint(doc8, 438, 1, 438, 100)
Dim locbldr125 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(MethodBuilder))
locbldr125.SetLocalSymInfo("mb")
PostProcessParamsIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("Met"))
Typ = GetType(ILEmitter).GetField("Met").FieldType
PostProcessParamsIL.Emit(OpCodes.Stloc, 7)
PostProcessParamsIL.MarkSequencePoint(doc8, 439, 1, 439, 100)
Dim locbldr126 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(ParameterAttributes))
locbldr126.SetLocalSymInfo("non")
PostProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Stloc, 8)
PostProcessParamsIL.MarkSequencePoint(doc8, 440, 1, 440, 100)
PostProcessParamsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarExpr)
PostProcessParamsIL.Emit(OpCodes.Ldfld, GetType(VarExpr).GetField("VarName"))
Typ = GetType(VarExpr).GetField("VarName").FieldType
PostProcessParamsIL.Emit(OpCodes.Stloc, 3)
PostProcessParamsIL.MarkSequencePoint(doc8, 441, 1, 441, 100)
Dim locbldr127 As LocalBuilder = PostProcessParamsIL.DeclareLocal(GetType(System.Int32))
locbldr127.SetLocalSymInfo("ind")
PostProcessParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Add)
PostProcessParamsIL.Emit(OpCodes.Stloc, 9)
PostProcessParamsIL.MarkSequencePoint(doc8, 442, 1, 442, 100)
Dim typ41(-1) As Type
PostProcessParamsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(MethodBuilder)
Typ03 = Typ
PostProcessParamsIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Int32)
ReDim Preserve typ41(UBound(typ41) + 1)
typ41(UBound(typ41)) = Typ
PostProcessParamsIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(ParameterAttributes)
ReDim Preserve typ41(UBound(typ41) + 1)
typ41(UBound(typ41)) = Typ
PostProcessParamsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Ident)
PostProcessParamsIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ41(UBound(typ41) + 1)
typ41(UBound(typ41)) = Typ
PostProcessParamsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineParameter", typ41))
Typ = Typ03.GetMethod("DefineParameter", typ41).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
PostProcessParamsIL.Emit(OpCodes.Pop)
End If
PostProcessParamsIL.MarkSequencePoint(doc8, 444, 1, 444, 100)
PostProcessParamsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarExpr)
PostProcessParamsIL.Emit(OpCodes.Ldfld, GetType(VarExpr).GetField("VarTyp"))
Typ = GetType(VarExpr).GetField("VarTyp").FieldType
PostProcessParamsIL.Emit(OpCodes.Stloc, 4)
PostProcessParamsIL.MarkSequencePoint(doc8, 457, 1, 457, 100)
Dim typ42(-1) As Type
PostProcessParamsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(TypeTok)
ReDim Preserve typ42(UBound(typ42) + 1)
typ42(UBound(typ42)) = Typ
PostProcessParamsIL.Emit(OpCodes.Call, CommitEvalTTok)
Typ = CommitEvalTTok.ReturnType
PostProcessParamsIL.Emit(OpCodes.Stloc, 5)
PostProcessParamsIL.MarkSequencePoint(doc8, 459, 1, 459, 100)
PostProcessParamsIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("ArgInd"))
Typ = GetType(ILEmitter).GetField("ArgInd").FieldType
PostProcessParamsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Add)
PostProcessParamsIL.Emit(OpCodes.Stsfld, GetType(ILEmitter).GetField("ArgInd"))
PostProcessParamsIL.MarkSequencePoint(doc8, 460, 1, 460, 100)
Dim typ43(-1) As Type
PostProcessParamsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Ident)
PostProcessParamsIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ43(UBound(typ43) + 1)
typ43(UBound(typ43)) = Typ
PostProcessParamsIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReDim Preserve typ43(UBound(typ43) + 1)
typ43(UBound(typ43)) = Typ
PostProcessParamsIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("ArgInd"))
Typ = GetType(ILEmitter).GetField("ArgInd").FieldType
ReDim Preserve typ43(UBound(typ43) + 1)
typ43(UBound(typ43)) = Typ
PostProcessParamsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
ReDim Preserve typ43(UBound(typ43) + 1)
typ43(UBound(typ43)) = Typ
PostProcessParamsIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddVar", typ43))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddVar", typ43).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
PostProcessParamsIL.Emit(OpCodes.Pop)
End If
PostProcessParamsIL.MarkSequencePoint(doc8, 462, 1, 462, 100)
PostProcessParamsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PostProcessParamsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
Dim fa63 As System.Reflection.Emit.Label = PostProcessParamsIL.DefineLabel()
Dim tru63 As System.Reflection.Emit.Label = PostProcessParamsIL.DefineLabel()
Dim cont63 As System.Reflection.Emit.Label = PostProcessParamsIL.DefineLabel()
PostProcessParamsIL.Emit(OpCodes.Beq, tru63)
PostProcessParamsIL.Emit(OpCodes.Br, fa63)
PostProcessParamsIL.MarkLabel(tru63)
PostProcessParamsIL.MarkSequencePoint(doc8, 463, 1, 463, 100)
PostProcessParamsIL.Emit(OpCodes.Br, label15)
PostProcessParamsIL.MarkSequencePoint(doc8, 464, 1, 464, 100)
PostProcessParamsIL.Emit(OpCodes.Br, cont63)
PostProcessParamsIL.MarkLabel(fa63)
PostProcessParamsIL.MarkSequencePoint(doc8, 465, 1, 465, 100)
PostProcessParamsIL.Emit(OpCodes.Br, label14)
PostProcessParamsIL.MarkSequencePoint(doc8, 466, 1, 466, 100)
PostProcessParamsIL.Emit(OpCodes.Br, cont63)
PostProcessParamsIL.MarkLabel(cont63)
PostProcessParamsIL.MarkSequencePoint(doc8, 468, 1, 468, 100)
PostProcessParamsIL.MarkLabel(label15)
PostProcessParamsIL.MarkSequencePoint(doc8, 470, 1, 470, 100)
PostProcessParamsIL.Emit(OpCodes.Ret)
Dim typ44(-1) As Type
ReDim Preserve typ44(UBound(typ44) + 1)
typ44(UBound(typ44)) = GetType(Expr).MakeArrayType()
Dim PostProcessParamsConstr As MethodBuilder = Helpers.DefineMethod("PostProcessParamsConstr", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ44)
Dim PostProcessParamsConstrIL As ILGenerator = PostProcessParamsConstr.GetILGenerator()
Dim PostProcessParamsConstrparam01 As ParameterBuilder = PostProcessParamsConstr.DefineParameter(1, ParameterAttributes.None, "ps")
PostProcessParamsConstrIL.MarkSequencePoint(doc8, 474, 1, 474, 100)
Dim locbldr128 As LocalBuilder = PostProcessParamsConstrIL.DeclareLocal(GetType(System.Int32))
locbldr128.SetLocalSymInfo("len")
PostProcessParamsConstrIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Expr).MakeArrayType()
PostProcessParamsConstrIL.Emit(OpCodes.Ldlen)
PostProcessParamsConstrIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Sub)
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 0)
PostProcessParamsConstrIL.MarkSequencePoint(doc8, 475, 1, 475, 100)
Dim locbldr129 As LocalBuilder = PostProcessParamsConstrIL.DeclareLocal(GetType(System.Int32))
locbldr129.SetLocalSymInfo("i")
PostProcessParamsConstrIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 1)
PostProcessParamsConstrIL.MarkSequencePoint(doc8, 476, 1, 476, 100)
Dim locbldr130 As LocalBuilder = PostProcessParamsConstrIL.DeclareLocal(GetType(VarExpr))
locbldr130.SetLocalSymInfo("curp")
PostProcessParamsConstrIL.Emit(OpCodes.Ldnull)
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 2)
PostProcessParamsConstrIL.MarkSequencePoint(doc8, 477, 1, 477, 100)
Dim locbldr131 As LocalBuilder = PostProcessParamsConstrIL.DeclareLocal(GetType(Ident))
locbldr131.SetLocalSymInfo("nam")
PostProcessParamsConstrIL.MarkSequencePoint(doc8, 478, 1, 478, 100)
Dim locbldr132 As LocalBuilder = PostProcessParamsConstrIL.DeclareLocal(GetType(TypeTok))
locbldr132.SetLocalSymInfo("typtok")
PostProcessParamsConstrIL.MarkSequencePoint(doc8, 479, 1, 479, 100)
Dim locbldr133 As LocalBuilder = PostProcessParamsConstrIL.DeclareLocal(GetType(System.Type))
locbldr133.SetLocalSymInfo("typ")
PostProcessParamsConstrIL.Emit(OpCodes.Ldnull)
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 5)
PostProcessParamsConstrIL.MarkSequencePoint(doc8, 482, 1, 482, 100)
Dim label16 As System.Reflection.Emit.Label = PostProcessParamsConstrIL.DefineLabel()
PostProcessParamsConstrIL.MarkSequencePoint(doc8, 483, 1, 483, 100)
Dim label17 As System.Reflection.Emit.Label = PostProcessParamsConstrIL.DefineLabel()
PostProcessParamsConstrIL.MarkSequencePoint(doc8, 485, 1, 485, 100)
PostProcessParamsConstrIL.MarkLabel(label16)
PostProcessParamsConstrIL.MarkSequencePoint(doc8, 487, 1, 487, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Add)
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 1)
PostProcessParamsConstrIL.MarkSequencePoint(doc8, 489, 1, 489, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Expr).MakeArrayType()
Typ02 = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Conv_U)
Typ = Typ02
PostProcessParamsConstrIL.Emit(OpCodes.Ldelem, GetType(Expr).MakeArrayType().GetElementType())
Typ = GetType(Expr).MakeArrayType().GetElementType()
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 2)
PostProcessParamsConstrIL.MarkSequencePoint(doc8, 491, 1, 491, 100)
Dim locbldr134 As LocalBuilder = PostProcessParamsConstrIL.DeclareLocal(GetType(ConstructorBuilder))
locbldr134.SetLocalSymInfo("cb")
PostProcessParamsConstrIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("Constr"))
Typ = GetType(ILEmitter).GetField("Constr").FieldType
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 6)
PostProcessParamsConstrIL.MarkSequencePoint(doc8, 492, 1, 492, 100)
Dim locbldr135 As LocalBuilder = PostProcessParamsConstrIL.DeclareLocal(GetType(ParameterAttributes))
locbldr135.SetLocalSymInfo("non")
PostProcessParamsConstrIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 7)
PostProcessParamsConstrIL.MarkSequencePoint(doc8, 493, 1, 493, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarExpr)
PostProcessParamsConstrIL.Emit(OpCodes.Ldfld, GetType(VarExpr).GetField("VarName"))
Typ = GetType(VarExpr).GetField("VarName").FieldType
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 3)
PostProcessParamsConstrIL.MarkSequencePoint(doc8, 494, 1, 494, 100)
Dim locbldr136 As LocalBuilder = PostProcessParamsConstrIL.DeclareLocal(GetType(System.Int32))
locbldr136.SetLocalSymInfo("ind")
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Add)
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 8)
PostProcessParamsConstrIL.MarkSequencePoint(doc8, 495, 1, 495, 100)
Dim typ45(-1) As Type
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(ConstructorBuilder)
Typ03 = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Int32)
ReDim Preserve typ45(UBound(typ45) + 1)
typ45(UBound(typ45)) = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(ParameterAttributes)
ReDim Preserve typ45(UBound(typ45) + 1)
typ45(UBound(typ45)) = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Ident)
PostProcessParamsConstrIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ45(UBound(typ45) + 1)
typ45(UBound(typ45)) = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineParameter", typ45))
Typ = Typ03.GetMethod("DefineParameter", typ45).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
PostProcessParamsConstrIL.Emit(OpCodes.Pop)
End If
PostProcessParamsConstrIL.MarkSequencePoint(doc8, 497, 1, 497, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(VarExpr)
PostProcessParamsConstrIL.Emit(OpCodes.Ldfld, GetType(VarExpr).GetField("VarTyp"))
Typ = GetType(VarExpr).GetField("VarTyp").FieldType
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 4)
PostProcessParamsConstrIL.MarkSequencePoint(doc8, 510, 1, 510, 100)
Dim typ46(-1) As Type
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(TypeTok)
ReDim Preserve typ46(UBound(typ46) + 1)
typ46(UBound(typ46)) = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Call, CommitEvalTTok)
Typ = CommitEvalTTok.ReturnType
PostProcessParamsConstrIL.Emit(OpCodes.Stloc, 5)
PostProcessParamsConstrIL.MarkSequencePoint(doc8, 512, 1, 512, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("ArgInd"))
Typ = GetType(ILEmitter).GetField("ArgInd").FieldType
PostProcessParamsConstrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Add)
PostProcessParamsConstrIL.Emit(OpCodes.Stsfld, GetType(ILEmitter).GetField("ArgInd"))
PostProcessParamsConstrIL.MarkSequencePoint(doc8, 513, 1, 513, 100)
Dim typ47(-1) As Type
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Ident)
PostProcessParamsConstrIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ47(UBound(typ47) + 1)
typ47(UBound(typ47)) = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReDim Preserve typ47(UBound(typ47) + 1)
typ47(UBound(typ47)) = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("ArgInd"))
Typ = GetType(ILEmitter).GetField("ArgInd").FieldType
ReDim Preserve typ47(UBound(typ47) + 1)
typ47(UBound(typ47)) = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type)
ReDim Preserve typ47(UBound(typ47) + 1)
typ47(UBound(typ47)) = Typ
PostProcessParamsConstrIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddVar", typ47))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddVar", typ47).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
PostProcessParamsConstrIL.Emit(OpCodes.Pop)
End If
PostProcessParamsConstrIL.MarkSequencePoint(doc8, 515, 1, 515, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
PostProcessParamsConstrIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
Dim fa64 As System.Reflection.Emit.Label = PostProcessParamsConstrIL.DefineLabel()
Dim tru64 As System.Reflection.Emit.Label = PostProcessParamsConstrIL.DefineLabel()
Dim cont64 As System.Reflection.Emit.Label = PostProcessParamsConstrIL.DefineLabel()
PostProcessParamsConstrIL.Emit(OpCodes.Beq, tru64)
PostProcessParamsConstrIL.Emit(OpCodes.Br, fa64)
PostProcessParamsConstrIL.MarkLabel(tru64)
PostProcessParamsConstrIL.MarkSequencePoint(doc8, 516, 1, 516, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Br, label17)
PostProcessParamsConstrIL.MarkSequencePoint(doc8, 517, 1, 517, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Br, cont64)
PostProcessParamsConstrIL.MarkLabel(fa64)
PostProcessParamsConstrIL.MarkSequencePoint(doc8, 518, 1, 518, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Br, label16)
PostProcessParamsConstrIL.MarkSequencePoint(doc8, 519, 1, 519, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Br, cont64)
PostProcessParamsConstrIL.MarkLabel(cont64)
PostProcessParamsConstrIL.MarkSequencePoint(doc8, 521, 1, 521, 100)
PostProcessParamsConstrIL.MarkLabel(label17)
PostProcessParamsConstrIL.MarkSequencePoint(doc8, 523, 1, 523, 100)
PostProcessParamsConstrIL.Emit(OpCodes.Ret)
Dim typ48(-1) As Type
ReDim Preserve typ48(UBound(typ48) + 1)
typ48(UBound(typ48)) = GetType(System.Type)
Dim getCodeFromType As MethodBuilder = Helpers.DefineMethod("getCodeFromType", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Int32), typ48)
Dim getCodeFromTypeIL As ILGenerator = getCodeFromType.GetILGenerator()
Dim getCodeFromTypeparam01 As ParameterBuilder = getCodeFromType.DefineParameter(1, ParameterAttributes.None, "typ")
getCodeFromTypeIL.MarkSequencePoint(doc8, 526, 1, 526, 100)
Dim locbldr137 As LocalBuilder = getCodeFromTypeIL.DeclareLocal(GetType(System.Int32))
locbldr137.SetLocalSymInfo("cod")
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc8, 527, 1, 527, 100)
Dim locbldr138 As LocalBuilder = getCodeFromTypeIL.DeclareLocal(GetType(System.Boolean))
locbldr138.SetLocalSymInfo("b")
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc8, 528, 1, 528, 100)
Dim locbldr139 As LocalBuilder = getCodeFromTypeIL.DeclareLocal(GetType(System.Type))
locbldr139.SetLocalSymInfo("typ2")
getCodeFromTypeIL.MarkSequencePoint(doc8, 530, 1, 530, 100)
Dim label18 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.MarkSequencePoint(doc8, 532, 1, 532, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(System.Boolean))
Dim typ49 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ49))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ49).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc8, 533, 1, 533, 100)
Dim typ50(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ50(UBound(typ50) + 1)
typ50(UBound(typ50)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ50))
Typ = Typ03.GetMethod("Equals", typ50).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc8, 534, 1, 534, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa65 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru65 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont65 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru65)
getCodeFromTypeIL.Emit(OpCodes.Br, fa65)
getCodeFromTypeIL.MarkLabel(tru65)
getCodeFromTypeIL.MarkSequencePoint(doc8, 535, 1, 535, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(101))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc8, 536, 1, 536, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc8, 537, 1, 537, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont65)
getCodeFromTypeIL.MarkLabel(fa65)
getCodeFromTypeIL.Emit(OpCodes.Br, cont65)
getCodeFromTypeIL.MarkLabel(cont65)
getCodeFromTypeIL.MarkSequencePoint(doc8, 539, 1, 539, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(Byte))
Dim typ51 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ51))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ51).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc8, 540, 1, 540, 100)
Dim typ52(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ52(UBound(typ52) + 1)
typ52(UBound(typ52)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ52))
Typ = Typ03.GetMethod("Equals", typ52).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc8, 541, 1, 541, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa66 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru66 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont66 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru66)
getCodeFromTypeIL.Emit(OpCodes.Br, fa66)
getCodeFromTypeIL.MarkLabel(tru66)
getCodeFromTypeIL.MarkSequencePoint(doc8, 542, 1, 542, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(8))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc8, 543, 1, 543, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc8, 544, 1, 544, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont66)
getCodeFromTypeIL.MarkLabel(fa66)
getCodeFromTypeIL.Emit(OpCodes.Br, cont66)
getCodeFromTypeIL.MarkLabel(cont66)
getCodeFromTypeIL.MarkSequencePoint(doc8, 546, 1, 546, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(UInt16))
Dim typ53 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ53))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ53).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc8, 547, 1, 547, 100)
Dim typ54(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ54(UBound(typ54) + 1)
typ54(UBound(typ54)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ54))
Typ = Typ03.GetMethod("Equals", typ54).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc8, 548, 1, 548, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa67 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru67 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont67 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru67)
getCodeFromTypeIL.Emit(OpCodes.Br, fa67)
getCodeFromTypeIL.MarkLabel(tru67)
getCodeFromTypeIL.MarkSequencePoint(doc8, 549, 1, 549, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(16))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc8, 550, 1, 550, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc8, 551, 1, 551, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont67)
getCodeFromTypeIL.MarkLabel(fa67)
getCodeFromTypeIL.Emit(OpCodes.Br, cont67)
getCodeFromTypeIL.MarkLabel(cont67)
getCodeFromTypeIL.MarkSequencePoint(doc8, 553, 1, 553, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(UInt32))
Dim typ55 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ55))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ55).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc8, 554, 1, 554, 100)
Dim typ56(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ56(UBound(typ56) + 1)
typ56(UBound(typ56)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ56))
Typ = Typ03.GetMethod("Equals", typ56).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc8, 555, 1, 555, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa68 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru68 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont68 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru68)
getCodeFromTypeIL.Emit(OpCodes.Br, fa68)
getCodeFromTypeIL.MarkLabel(tru68)
getCodeFromTypeIL.MarkSequencePoint(doc8, 556, 1, 556, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(32))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc8, 557, 1, 557, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc8, 558, 1, 558, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont68)
getCodeFromTypeIL.MarkLabel(fa68)
getCodeFromTypeIL.Emit(OpCodes.Br, cont68)
getCodeFromTypeIL.MarkLabel(cont68)
getCodeFromTypeIL.MarkSequencePoint(doc8, 560, 1, 560, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(UIntPtr))
Dim typ57 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ57))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ57).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc8, 561, 1, 561, 100)
Dim typ58(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ58(UBound(typ58) + 1)
typ58(UBound(typ58)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ58))
Typ = Typ03.GetMethod("Equals", typ58).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc8, 562, 1, 562, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa69 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru69 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont69 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru69)
getCodeFromTypeIL.Emit(OpCodes.Br, fa69)
getCodeFromTypeIL.MarkLabel(tru69)
getCodeFromTypeIL.MarkSequencePoint(doc8, 563, 1, 563, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(40))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc8, 564, 1, 564, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc8, 565, 1, 565, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont69)
getCodeFromTypeIL.MarkLabel(fa69)
getCodeFromTypeIL.Emit(OpCodes.Br, cont69)
getCodeFromTypeIL.MarkLabel(cont69)
getCodeFromTypeIL.MarkSequencePoint(doc8, 567, 1, 567, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(UInt64))
Dim typ59 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ59))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ59).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc8, 568, 1, 568, 100)
Dim typ60(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ60(UBound(typ60) + 1)
typ60(UBound(typ60)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ60))
Typ = Typ03.GetMethod("Equals", typ60).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc8, 569, 1, 569, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa70 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru70 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont70 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru70)
getCodeFromTypeIL.Emit(OpCodes.Br, fa70)
getCodeFromTypeIL.MarkLabel(tru70)
getCodeFromTypeIL.MarkSequencePoint(doc8, 570, 1, 570, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(64))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc8, 571, 1, 571, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc8, 572, 1, 572, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont70)
getCodeFromTypeIL.MarkLabel(fa70)
getCodeFromTypeIL.Emit(OpCodes.Br, cont70)
getCodeFromTypeIL.MarkLabel(cont70)
getCodeFromTypeIL.MarkSequencePoint(doc8, 574, 1, 574, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(System.SByte))
Dim typ61 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ61))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ61).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc8, 575, 1, 575, 100)
Dim typ62(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ62(UBound(typ62) + 1)
typ62(UBound(typ62)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ62))
Typ = Typ03.GetMethod("Equals", typ62).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc8, 576, 1, 576, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa71 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru71 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont71 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru71)
getCodeFromTypeIL.Emit(OpCodes.Br, fa71)
getCodeFromTypeIL.MarkLabel(tru71)
getCodeFromTypeIL.MarkSequencePoint(doc8, 577, 1, 577, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(108))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc8, 578, 1, 578, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc8, 579, 1, 579, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont71)
getCodeFromTypeIL.MarkLabel(fa71)
getCodeFromTypeIL.Emit(OpCodes.Br, cont71)
getCodeFromTypeIL.MarkLabel(cont71)
getCodeFromTypeIL.MarkSequencePoint(doc8, 581, 1, 581, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(System.Int16))
Dim typ63 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ63))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ63).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc8, 582, 1, 582, 100)
Dim typ64(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ64(UBound(typ64) + 1)
typ64(UBound(typ64)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ64))
Typ = Typ03.GetMethod("Equals", typ64).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc8, 583, 1, 583, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa72 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru72 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont72 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru72)
getCodeFromTypeIL.Emit(OpCodes.Br, fa72)
getCodeFromTypeIL.MarkLabel(tru72)
getCodeFromTypeIL.MarkSequencePoint(doc8, 584, 1, 584, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(116))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc8, 585, 1, 585, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc8, 586, 1, 586, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont72)
getCodeFromTypeIL.MarkLabel(fa72)
getCodeFromTypeIL.Emit(OpCodes.Br, cont72)
getCodeFromTypeIL.MarkLabel(cont72)
getCodeFromTypeIL.MarkSequencePoint(doc8, 588, 1, 588, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(System.Int32))
Dim typ65 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ65))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ65).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc8, 589, 1, 589, 100)
Dim typ66(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ66(UBound(typ66) + 1)
typ66(UBound(typ66)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ66))
Typ = Typ03.GetMethod("Equals", typ66).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc8, 590, 1, 590, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa73 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru73 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont73 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru73)
getCodeFromTypeIL.Emit(OpCodes.Br, fa73)
getCodeFromTypeIL.MarkLabel(tru73)
getCodeFromTypeIL.MarkSequencePoint(doc8, 591, 1, 591, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(132))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc8, 592, 1, 592, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc8, 593, 1, 593, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont73)
getCodeFromTypeIL.MarkLabel(fa73)
getCodeFromTypeIL.Emit(OpCodes.Br, cont73)
getCodeFromTypeIL.MarkLabel(cont73)
getCodeFromTypeIL.MarkSequencePoint(doc8, 595, 1, 595, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(IntPtr))
Dim typ67 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ67))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ67).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc8, 596, 1, 596, 100)
Dim typ68(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ68(UBound(typ68) + 1)
typ68(UBound(typ68)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ68))
Typ = Typ03.GetMethod("Equals", typ68).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc8, 597, 1, 597, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa74 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru74 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont74 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru74)
getCodeFromTypeIL.Emit(OpCodes.Br, fa74)
getCodeFromTypeIL.MarkLabel(tru74)
getCodeFromTypeIL.MarkSequencePoint(doc8, 598, 1, 598, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(140))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc8, 599, 1, 599, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc8, 600, 1, 600, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont74)
getCodeFromTypeIL.MarkLabel(fa74)
getCodeFromTypeIL.Emit(OpCodes.Br, cont74)
getCodeFromTypeIL.MarkLabel(cont74)
getCodeFromTypeIL.MarkSequencePoint(doc8, 602, 1, 602, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(System.Char))
Dim typ69 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ69))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ69).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc8, 603, 1, 603, 100)
Dim typ70(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ70(UBound(typ70) + 1)
typ70(UBound(typ70)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ70))
Typ = Typ03.GetMethod("Equals", typ70).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc8, 604, 1, 604, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa75 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru75 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont75 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru75)
getCodeFromTypeIL.Emit(OpCodes.Br, fa75)
getCodeFromTypeIL.MarkLabel(tru75)
getCodeFromTypeIL.MarkSequencePoint(doc8, 605, 1, 605, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(150))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc8, 606, 1, 606, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc8, 607, 1, 607, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont75)
getCodeFromTypeIL.MarkLabel(fa75)
getCodeFromTypeIL.Emit(OpCodes.Br, cont75)
getCodeFromTypeIL.MarkLabel(cont75)
getCodeFromTypeIL.MarkSequencePoint(doc8, 609, 1, 609, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(System.Int64))
Dim typ71 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ71))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ71).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc8, 610, 1, 610, 100)
Dim typ72(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ72(UBound(typ72) + 1)
typ72(UBound(typ72)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ72))
Typ = Typ03.GetMethod("Equals", typ72).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc8, 611, 1, 611, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa76 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru76 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont76 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru76)
getCodeFromTypeIL.Emit(OpCodes.Br, fa76)
getCodeFromTypeIL.MarkLabel(tru76)
getCodeFromTypeIL.MarkSequencePoint(doc8, 612, 1, 612, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(164))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc8, 613, 1, 613, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc8, 614, 1, 614, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont76)
getCodeFromTypeIL.MarkLabel(fa76)
getCodeFromTypeIL.Emit(OpCodes.Br, cont76)
getCodeFromTypeIL.MarkLabel(cont76)
getCodeFromTypeIL.MarkSequencePoint(doc8, 616, 1, 616, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(System.Single))
Dim typ73 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ73))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ73).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc8, 617, 1, 617, 100)
Dim typ74(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ74(UBound(typ74) + 1)
typ74(UBound(typ74)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ74))
Typ = Typ03.GetMethod("Equals", typ74).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc8, 618, 1, 618, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa77 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru77 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont77 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru77)
getCodeFromTypeIL.Emit(OpCodes.Br, fa77)
getCodeFromTypeIL.MarkLabel(tru77)
getCodeFromTypeIL.MarkSequencePoint(doc8, 619, 1, 619, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(232))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc8, 620, 1, 620, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc8, 621, 1, 621, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont77)
getCodeFromTypeIL.MarkLabel(fa77)
getCodeFromTypeIL.Emit(OpCodes.Br, cont77)
getCodeFromTypeIL.MarkLabel(cont77)
getCodeFromTypeIL.MarkSequencePoint(doc8, 623, 1, 623, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(System.Double))
Dim typ75 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ75))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ75).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc8, 624, 1, 624, 100)
Dim typ76(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ76(UBound(typ76) + 1)
typ76(UBound(typ76)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ76))
Typ = Typ03.GetMethod("Equals", typ76).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc8, 625, 1, 625, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa78 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru78 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont78 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru78)
getCodeFromTypeIL.Emit(OpCodes.Br, fa78)
getCodeFromTypeIL.MarkLabel(tru78)
getCodeFromTypeIL.MarkSequencePoint(doc8, 626, 1, 626, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(264))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc8, 627, 1, 627, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc8, 628, 1, 628, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont78)
getCodeFromTypeIL.MarkLabel(fa78)
getCodeFromTypeIL.Emit(OpCodes.Br, cont78)
getCodeFromTypeIL.MarkLabel(cont78)
getCodeFromTypeIL.MarkSequencePoint(doc8, 630, 1, 630, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldtoken, GetType(System.String))
Dim typ77 As Type() = {GetType(System.RuntimeTypeHandle)}
getCodeFromTypeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ77))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ77).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 2)
getCodeFromTypeIL.MarkSequencePoint(doc8, 631, 1, 631, 100)
Dim typ78(-1) As Type
getCodeFromTypeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Type)
ReDim Preserve typ78(UBound(typ78) + 1)
typ78(UBound(typ78)) = Typ
getCodeFromTypeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ78))
Typ = Typ03.GetMethod("Equals", typ78).ReturnType
getCodeFromTypeIL.Emit(OpCodes.Stloc, 1)
getCodeFromTypeIL.MarkSequencePoint(doc8, 632, 1, 632, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa79 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim tru79 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
Dim cont79 As System.Reflection.Emit.Label = getCodeFromTypeIL.DefineLabel()
getCodeFromTypeIL.Emit(OpCodes.Beq, tru79)
getCodeFromTypeIL.Emit(OpCodes.Br, fa79)
getCodeFromTypeIL.MarkLabel(tru79)
getCodeFromTypeIL.MarkSequencePoint(doc8, 633, 1, 633, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldc_I4, CInt(270))
Typ = GetType(System.Int32)
getCodeFromTypeIL.Emit(OpCodes.Stloc, 0)
getCodeFromTypeIL.MarkSequencePoint(doc8, 634, 1, 634, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, label18)
getCodeFromTypeIL.MarkSequencePoint(doc8, 635, 1, 635, 100)
getCodeFromTypeIL.Emit(OpCodes.Br, cont79)
getCodeFromTypeIL.MarkLabel(fa79)
getCodeFromTypeIL.Emit(OpCodes.Br, cont79)
getCodeFromTypeIL.MarkLabel(cont79)
getCodeFromTypeIL.MarkSequencePoint(doc8, 637, 1, 637, 100)
getCodeFromTypeIL.MarkLabel(label18)
getCodeFromTypeIL.MarkSequencePoint(doc8, 638, 1, 638, 100)
getCodeFromTypeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
getCodeFromTypeIL.MarkSequencePoint(doc8, 639, 1, 639, 100)
getCodeFromTypeIL.Emit(OpCodes.Ret)
Dim typ79(-1) As Type
ReDim Preserve typ79(UBound(typ79) + 1)
typ79(UBound(typ79)) = GetType(System.Int32)
Dim getTypeFromCode As MethodBuilder = Helpers.DefineMethod("getTypeFromCode", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Type), typ79)
Dim getTypeFromCodeIL As ILGenerator = getTypeFromCode.GetILGenerator()
Dim getTypeFromCodeparam01 As ParameterBuilder = getTypeFromCode.DefineParameter(1, ParameterAttributes.None, "cod")
getTypeFromCodeIL.MarkSequencePoint(doc8, 642, 1, 642, 100)
Dim locbldr140 As LocalBuilder = getTypeFromCodeIL.DeclareLocal(GetType(System.Type))
locbldr140.SetLocalSymInfo("typ2")
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(System.Object))
Dim typ80 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ80))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ80).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc8, 644, 1, 644, 100)
Dim label19 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.MarkSequencePoint(doc8, 646, 1, 646, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(101))
Typ = GetType(System.Int32)
Dim fa80 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru80 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont80 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru80)
getTypeFromCodeIL.Emit(OpCodes.Br, fa80)
getTypeFromCodeIL.MarkLabel(tru80)
getTypeFromCodeIL.MarkSequencePoint(doc8, 647, 1, 647, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(System.Boolean))
Dim typ81 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ81))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ81).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc8, 648, 1, 648, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc8, 649, 1, 649, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont80)
getTypeFromCodeIL.MarkLabel(fa80)
getTypeFromCodeIL.Emit(OpCodes.Br, cont80)
getTypeFromCodeIL.MarkLabel(cont80)
getTypeFromCodeIL.MarkSequencePoint(doc8, 651, 1, 651, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(8))
Typ = GetType(System.Int32)
Dim fa81 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru81 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont81 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru81)
getTypeFromCodeIL.Emit(OpCodes.Br, fa81)
getTypeFromCodeIL.MarkLabel(tru81)
getTypeFromCodeIL.MarkSequencePoint(doc8, 652, 1, 652, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(Byte))
Dim typ82 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ82))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ82).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc8, 653, 1, 653, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc8, 654, 1, 654, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont81)
getTypeFromCodeIL.MarkLabel(fa81)
getTypeFromCodeIL.Emit(OpCodes.Br, cont81)
getTypeFromCodeIL.MarkLabel(cont81)
getTypeFromCodeIL.MarkSequencePoint(doc8, 656, 1, 656, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(16))
Typ = GetType(System.Int32)
Dim fa82 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru82 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont82 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru82)
getTypeFromCodeIL.Emit(OpCodes.Br, fa82)
getTypeFromCodeIL.MarkLabel(tru82)
getTypeFromCodeIL.MarkSequencePoint(doc8, 657, 1, 657, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(UInt16))
Dim typ83 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ83))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ83).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc8, 658, 1, 658, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc8, 659, 1, 659, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont82)
getTypeFromCodeIL.MarkLabel(fa82)
getTypeFromCodeIL.Emit(OpCodes.Br, cont82)
getTypeFromCodeIL.MarkLabel(cont82)
getTypeFromCodeIL.MarkSequencePoint(doc8, 661, 1, 661, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(32))
Typ = GetType(System.Int32)
Dim fa83 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru83 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont83 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru83)
getTypeFromCodeIL.Emit(OpCodes.Br, fa83)
getTypeFromCodeIL.MarkLabel(tru83)
getTypeFromCodeIL.MarkSequencePoint(doc8, 662, 1, 662, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(UInt32))
Dim typ84 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ84))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ84).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc8, 663, 1, 663, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc8, 664, 1, 664, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont83)
getTypeFromCodeIL.MarkLabel(fa83)
getTypeFromCodeIL.Emit(OpCodes.Br, cont83)
getTypeFromCodeIL.MarkLabel(cont83)
getTypeFromCodeIL.MarkSequencePoint(doc8, 666, 1, 666, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(40))
Typ = GetType(System.Int32)
Dim fa84 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru84 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont84 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru84)
getTypeFromCodeIL.Emit(OpCodes.Br, fa84)
getTypeFromCodeIL.MarkLabel(tru84)
getTypeFromCodeIL.MarkSequencePoint(doc8, 667, 1, 667, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(UIntPtr))
Dim typ85 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ85))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ85).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc8, 668, 1, 668, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc8, 669, 1, 669, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont84)
getTypeFromCodeIL.MarkLabel(fa84)
getTypeFromCodeIL.Emit(OpCodes.Br, cont84)
getTypeFromCodeIL.MarkLabel(cont84)
getTypeFromCodeIL.MarkSequencePoint(doc8, 671, 1, 671, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(64))
Typ = GetType(System.Int32)
Dim fa85 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru85 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont85 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru85)
getTypeFromCodeIL.Emit(OpCodes.Br, fa85)
getTypeFromCodeIL.MarkLabel(tru85)
getTypeFromCodeIL.MarkSequencePoint(doc8, 672, 1, 672, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(UInt64))
Dim typ86 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ86))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ86).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc8, 673, 1, 673, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc8, 674, 1, 674, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont85)
getTypeFromCodeIL.MarkLabel(fa85)
getTypeFromCodeIL.Emit(OpCodes.Br, cont85)
getTypeFromCodeIL.MarkLabel(cont85)
getTypeFromCodeIL.MarkSequencePoint(doc8, 676, 1, 676, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(108))
Typ = GetType(System.Int32)
Dim fa86 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru86 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont86 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru86)
getTypeFromCodeIL.Emit(OpCodes.Br, fa86)
getTypeFromCodeIL.MarkLabel(tru86)
getTypeFromCodeIL.MarkSequencePoint(doc8, 677, 1, 677, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(System.SByte))
Dim typ87 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ87))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ87).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc8, 678, 1, 678, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc8, 679, 1, 679, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont86)
getTypeFromCodeIL.MarkLabel(fa86)
getTypeFromCodeIL.Emit(OpCodes.Br, cont86)
getTypeFromCodeIL.MarkLabel(cont86)
getTypeFromCodeIL.MarkSequencePoint(doc8, 681, 1, 681, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(116))
Typ = GetType(System.Int32)
Dim fa87 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru87 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont87 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru87)
getTypeFromCodeIL.Emit(OpCodes.Br, fa87)
getTypeFromCodeIL.MarkLabel(tru87)
getTypeFromCodeIL.MarkSequencePoint(doc8, 682, 1, 682, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(System.Int16))
Dim typ88 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ88))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ88).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc8, 683, 1, 683, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc8, 684, 1, 684, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont87)
getTypeFromCodeIL.MarkLabel(fa87)
getTypeFromCodeIL.Emit(OpCodes.Br, cont87)
getTypeFromCodeIL.MarkLabel(cont87)
getTypeFromCodeIL.MarkSequencePoint(doc8, 686, 1, 686, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(132))
Typ = GetType(System.Int32)
Dim fa88 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru88 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont88 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru88)
getTypeFromCodeIL.Emit(OpCodes.Br, fa88)
getTypeFromCodeIL.MarkLabel(tru88)
getTypeFromCodeIL.MarkSequencePoint(doc8, 687, 1, 687, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(System.Int32))
Dim typ89 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ89))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ89).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc8, 688, 1, 688, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc8, 689, 1, 689, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont88)
getTypeFromCodeIL.MarkLabel(fa88)
getTypeFromCodeIL.Emit(OpCodes.Br, cont88)
getTypeFromCodeIL.MarkLabel(cont88)
getTypeFromCodeIL.MarkSequencePoint(doc8, 691, 1, 691, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(140))
Typ = GetType(System.Int32)
Dim fa89 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru89 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont89 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru89)
getTypeFromCodeIL.Emit(OpCodes.Br, fa89)
getTypeFromCodeIL.MarkLabel(tru89)
getTypeFromCodeIL.MarkSequencePoint(doc8, 692, 1, 692, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(IntPtr))
Dim typ90 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ90))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ90).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc8, 693, 1, 693, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc8, 694, 1, 694, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont89)
getTypeFromCodeIL.MarkLabel(fa89)
getTypeFromCodeIL.Emit(OpCodes.Br, cont89)
getTypeFromCodeIL.MarkLabel(cont89)
getTypeFromCodeIL.MarkSequencePoint(doc8, 696, 1, 696, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(150))
Typ = GetType(System.Int32)
Dim fa90 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru90 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont90 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru90)
getTypeFromCodeIL.Emit(OpCodes.Br, fa90)
getTypeFromCodeIL.MarkLabel(tru90)
getTypeFromCodeIL.MarkSequencePoint(doc8, 697, 1, 697, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(System.Char))
Dim typ91 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ91))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ91).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc8, 698, 1, 698, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc8, 699, 1, 699, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont90)
getTypeFromCodeIL.MarkLabel(fa90)
getTypeFromCodeIL.Emit(OpCodes.Br, cont90)
getTypeFromCodeIL.MarkLabel(cont90)
getTypeFromCodeIL.MarkSequencePoint(doc8, 701, 1, 701, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(164))
Typ = GetType(System.Int32)
Dim fa91 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru91 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont91 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru91)
getTypeFromCodeIL.Emit(OpCodes.Br, fa91)
getTypeFromCodeIL.MarkLabel(tru91)
getTypeFromCodeIL.MarkSequencePoint(doc8, 702, 1, 702, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(System.Int64))
Dim typ92 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ92))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ92).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc8, 703, 1, 703, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc8, 704, 1, 704, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont91)
getTypeFromCodeIL.MarkLabel(fa91)
getTypeFromCodeIL.Emit(OpCodes.Br, cont91)
getTypeFromCodeIL.MarkLabel(cont91)
getTypeFromCodeIL.MarkSequencePoint(doc8, 706, 1, 706, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(232))
Typ = GetType(System.Int32)
Dim fa92 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru92 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont92 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru92)
getTypeFromCodeIL.Emit(OpCodes.Br, fa92)
getTypeFromCodeIL.MarkLabel(tru92)
getTypeFromCodeIL.MarkSequencePoint(doc8, 707, 1, 707, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(System.Single))
Dim typ93 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ93))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ93).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc8, 708, 1, 708, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc8, 709, 1, 709, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont92)
getTypeFromCodeIL.MarkLabel(fa92)
getTypeFromCodeIL.Emit(OpCodes.Br, cont92)
getTypeFromCodeIL.MarkLabel(cont92)
getTypeFromCodeIL.MarkSequencePoint(doc8, 711, 1, 711, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(264))
Typ = GetType(System.Int32)
Dim fa93 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru93 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont93 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru93)
getTypeFromCodeIL.Emit(OpCodes.Br, fa93)
getTypeFromCodeIL.MarkLabel(tru93)
getTypeFromCodeIL.MarkSequencePoint(doc8, 712, 1, 712, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(System.Double))
Dim typ94 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ94))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ94).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc8, 713, 1, 713, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc8, 714, 1, 714, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont93)
getTypeFromCodeIL.MarkLabel(fa93)
getTypeFromCodeIL.Emit(OpCodes.Br, cont93)
getTypeFromCodeIL.MarkLabel(cont93)
getTypeFromCodeIL.MarkSequencePoint(doc8, 716, 1, 716, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
getTypeFromCodeIL.Emit(OpCodes.Ldc_I4, CInt(270))
Typ = GetType(System.Int32)
Dim fa94 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim tru94 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
Dim cont94 As System.Reflection.Emit.Label = getTypeFromCodeIL.DefineLabel()
getTypeFromCodeIL.Emit(OpCodes.Beq, tru94)
getTypeFromCodeIL.Emit(OpCodes.Br, fa94)
getTypeFromCodeIL.MarkLabel(tru94)
getTypeFromCodeIL.MarkSequencePoint(doc8, 717, 1, 717, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldtoken, GetType(System.String))
Dim typ95 As Type() = {GetType(System.RuntimeTypeHandle)}
getTypeFromCodeIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ95))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ95).ReturnType
getTypeFromCodeIL.Emit(OpCodes.Stloc, 0)
getTypeFromCodeIL.MarkSequencePoint(doc8, 718, 1, 718, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, label19)
getTypeFromCodeIL.MarkSequencePoint(doc8, 719, 1, 719, 100)
getTypeFromCodeIL.Emit(OpCodes.Br, cont94)
getTypeFromCodeIL.MarkLabel(fa94)
getTypeFromCodeIL.Emit(OpCodes.Br, cont94)
getTypeFromCodeIL.MarkLabel(cont94)
getTypeFromCodeIL.MarkSequencePoint(doc8, 721, 1, 721, 100)
getTypeFromCodeIL.MarkLabel(label19)
getTypeFromCodeIL.MarkSequencePoint(doc8, 722, 1, 722, 100)
getTypeFromCodeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
getTypeFromCodeIL.MarkSequencePoint(doc8, 723, 1, 723, 100)
getTypeFromCodeIL.Emit(OpCodes.Ret)
Dim typ96(-1) As Type
ReDim Preserve typ96(UBound(typ96) + 1)
typ96(UBound(typ96)) = GetType(Literal)
Dim EmitLiteral As MethodBuilder = Helpers.DefineMethod("EmitLiteral", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ96)
Dim EmitLiteralIL As ILGenerator = EmitLiteral.GetILGenerator()
Dim EmitLiteralparam01 As ParameterBuilder = EmitLiteral.DefineParameter(1, ParameterAttributes.None, "lit")
EmitLiteralIL.MarkSequencePoint(doc8, 727, 1, 727, 100)
Dim label20 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
EmitLiteralIL.MarkSequencePoint(doc8, 728, 1, 728, 100)
Dim locbldr141 As LocalBuilder = EmitLiteralIL.DeclareLocal(GetType(System.Type))
locbldr141.SetLocalSymInfo("typ")
EmitLiteralIL.MarkSequencePoint(doc8, 729, 1, 729, 100)
Dim locbldr142 As LocalBuilder = EmitLiteralIL.DeclareLocal(GetType(System.Boolean))
locbldr142.SetLocalSymInfo("b")
EmitLiteralIL.MarkSequencePoint(doc8, 731, 1, 731, 100)
EmitLiteralIL.Emit(OpCodes.Ldtoken, GetType(StringLiteral))
Dim typ97 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitLiteralIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ97))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ97).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 0)
EmitLiteralIL.MarkSequencePoint(doc8, 732, 1, 732, 100)
Dim typ98(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ98(UBound(typ98) + 1)
typ98(UBound(typ98)) = Typ
EmitLiteralIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ98))
Typ = Typ03.GetMethod("IsInstanceOfType", typ98).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 1)
EmitLiteralIL.MarkSequencePoint(doc8, 734, 1, 734, 100)
EmitLiteralIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitLiteralIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa95 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim tru95 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim cont95 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
EmitLiteralIL.Emit(OpCodes.Beq, tru95)
EmitLiteralIL.Emit(OpCodes.Br, fa95)
EmitLiteralIL.MarkLabel(tru95)
EmitLiteralIL.MarkSequencePoint(doc8, 735, 1, 735, 100)
Dim locbldr143 As LocalBuilder = EmitLiteralIL.DeclareLocal(GetType(StringLiteral))
locbldr143.SetLocalSymInfo("slit")
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Stloc, 2)
EmitLiteralIL.MarkSequencePoint(doc8, 736, 1, 736, 100)
Dim typ99(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(StringLiteral)
EmitLiteralIL.Emit(OpCodes.Ldfld, GetType(StringLiteral).GetField("Value"))
Typ = GetType(StringLiteral).GetField("Value").FieldType
ReDim Preserve typ99(UBound(typ99) + 1)
typ99(UBound(typ99)) = Typ
EmitLiteralIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdstr", typ99))
Typ = GetType(ILEmitter).GetMethod("EmitLdstr", typ99).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLiteralIL.Emit(OpCodes.Pop)
End If
EmitLiteralIL.MarkSequencePoint(doc8, 737, 1, 737, 100)
EmitLiteralIL.Emit(OpCodes.Br, label20)
EmitLiteralIL.MarkSequencePoint(doc8, 738, 1, 738, 100)
EmitLiteralIL.Emit(OpCodes.Br, cont95)
EmitLiteralIL.MarkLabel(fa95)
EmitLiteralIL.Emit(OpCodes.Br, cont95)
EmitLiteralIL.MarkLabel(cont95)
EmitLiteralIL.MarkSequencePoint(doc8, 740, 1, 740, 100)
EmitLiteralIL.Emit(OpCodes.Ldtoken, GetType(SByteLiteral))
Dim typ100 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitLiteralIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ100))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ100).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 0)
EmitLiteralIL.MarkSequencePoint(doc8, 741, 1, 741, 100)
Dim typ101(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ101(UBound(typ101) + 1)
typ101(UBound(typ101)) = Typ
EmitLiteralIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ101))
Typ = Typ03.GetMethod("IsInstanceOfType", typ101).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 1)
EmitLiteralIL.MarkSequencePoint(doc8, 743, 1, 743, 100)
EmitLiteralIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitLiteralIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa96 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim tru96 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim cont96 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
EmitLiteralIL.Emit(OpCodes.Beq, tru96)
EmitLiteralIL.Emit(OpCodes.Br, fa96)
EmitLiteralIL.MarkLabel(tru96)
EmitLiteralIL.MarkSequencePoint(doc8, 744, 1, 744, 100)
Dim locbldr144 As LocalBuilder = EmitLiteralIL.DeclareLocal(GetType(SByteLiteral))
locbldr144.SetLocalSymInfo("sblit")
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Stloc, 3)
EmitLiteralIL.MarkSequencePoint(doc8, 745, 1, 745, 100)
Dim typ102(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(SByteLiteral)
EmitLiteralIL.Emit(OpCodes.Ldfld, GetType(SByteLiteral).GetField("NumVal"))
Typ = GetType(SByteLiteral).GetField("NumVal").FieldType
ReDim Preserve typ102(UBound(typ102) + 1)
typ102(UBound(typ102)) = Typ
EmitLiteralIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdcI1", typ102))
Typ = GetType(ILEmitter).GetMethod("EmitLdcI1", typ102).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLiteralIL.Emit(OpCodes.Pop)
End If
EmitLiteralIL.MarkSequencePoint(doc8, 746, 1, 746, 100)
EmitLiteralIL.Emit(OpCodes.Br, label20)
EmitLiteralIL.MarkSequencePoint(doc8, 747, 1, 747, 100)
EmitLiteralIL.Emit(OpCodes.Br, cont96)
EmitLiteralIL.MarkLabel(fa96)
EmitLiteralIL.Emit(OpCodes.Br, cont96)
EmitLiteralIL.MarkLabel(cont96)
EmitLiteralIL.MarkSequencePoint(doc8, 749, 1, 749, 100)
EmitLiteralIL.Emit(OpCodes.Ldtoken, GetType(ShortLiteral))
Dim typ103 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitLiteralIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ103))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ103).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 0)
EmitLiteralIL.MarkSequencePoint(doc8, 750, 1, 750, 100)
Dim typ104(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ104(UBound(typ104) + 1)
typ104(UBound(typ104)) = Typ
EmitLiteralIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ104))
Typ = Typ03.GetMethod("IsInstanceOfType", typ104).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 1)
EmitLiteralIL.MarkSequencePoint(doc8, 752, 1, 752, 100)
EmitLiteralIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitLiteralIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa97 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim tru97 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim cont97 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
EmitLiteralIL.Emit(OpCodes.Beq, tru97)
EmitLiteralIL.Emit(OpCodes.Br, fa97)
EmitLiteralIL.MarkLabel(tru97)
EmitLiteralIL.MarkSequencePoint(doc8, 753, 1, 753, 100)
Dim locbldr145 As LocalBuilder = EmitLiteralIL.DeclareLocal(GetType(ShortLiteral))
locbldr145.SetLocalSymInfo("shlit")
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Stloc, 4)
EmitLiteralIL.MarkSequencePoint(doc8, 754, 1, 754, 100)
Dim typ105(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(ShortLiteral)
EmitLiteralIL.Emit(OpCodes.Ldfld, GetType(ShortLiteral).GetField("NumVal"))
Typ = GetType(ShortLiteral).GetField("NumVal").FieldType
ReDim Preserve typ105(UBound(typ105) + 1)
typ105(UBound(typ105)) = Typ
EmitLiteralIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdcI2", typ105))
Typ = GetType(ILEmitter).GetMethod("EmitLdcI2", typ105).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLiteralIL.Emit(OpCodes.Pop)
End If
EmitLiteralIL.MarkSequencePoint(doc8, 755, 1, 755, 100)
EmitLiteralIL.Emit(OpCodes.Br, label20)
EmitLiteralIL.MarkSequencePoint(doc8, 756, 1, 756, 100)
EmitLiteralIL.Emit(OpCodes.Br, cont97)
EmitLiteralIL.MarkLabel(fa97)
EmitLiteralIL.Emit(OpCodes.Br, cont97)
EmitLiteralIL.MarkLabel(cont97)
EmitLiteralIL.MarkSequencePoint(doc8, 758, 1, 758, 100)
EmitLiteralIL.Emit(OpCodes.Ldtoken, GetType(IntLiteral))
Dim typ106 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitLiteralIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ106))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ106).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 0)
EmitLiteralIL.MarkSequencePoint(doc8, 759, 1, 759, 100)
Dim typ107(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ107(UBound(typ107) + 1)
typ107(UBound(typ107)) = Typ
EmitLiteralIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ107))
Typ = Typ03.GetMethod("IsInstanceOfType", typ107).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 1)
EmitLiteralIL.MarkSequencePoint(doc8, 761, 1, 761, 100)
EmitLiteralIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitLiteralIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa98 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim tru98 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim cont98 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
EmitLiteralIL.Emit(OpCodes.Beq, tru98)
EmitLiteralIL.Emit(OpCodes.Br, fa98)
EmitLiteralIL.MarkLabel(tru98)
EmitLiteralIL.MarkSequencePoint(doc8, 762, 1, 762, 100)
Dim locbldr146 As LocalBuilder = EmitLiteralIL.DeclareLocal(GetType(IntLiteral))
locbldr146.SetLocalSymInfo("ilit")
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Stloc, 5)
EmitLiteralIL.MarkSequencePoint(doc8, 763, 1, 763, 100)
Dim typ108(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(IntLiteral)
EmitLiteralIL.Emit(OpCodes.Ldfld, GetType(IntLiteral).GetField("NumVal"))
Typ = GetType(IntLiteral).GetField("NumVal").FieldType
ReDim Preserve typ108(UBound(typ108) + 1)
typ108(UBound(typ108)) = Typ
EmitLiteralIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdcI4", typ108))
Typ = GetType(ILEmitter).GetMethod("EmitLdcI4", typ108).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLiteralIL.Emit(OpCodes.Pop)
End If
EmitLiteralIL.MarkSequencePoint(doc8, 764, 1, 764, 100)
EmitLiteralIL.Emit(OpCodes.Br, label20)
EmitLiteralIL.MarkSequencePoint(doc8, 765, 1, 765, 100)
EmitLiteralIL.Emit(OpCodes.Br, cont98)
EmitLiteralIL.MarkLabel(fa98)
EmitLiteralIL.Emit(OpCodes.Br, cont98)
EmitLiteralIL.MarkLabel(cont98)
EmitLiteralIL.MarkSequencePoint(doc8, 767, 1, 767, 100)
EmitLiteralIL.Emit(OpCodes.Ldtoken, GetType(LongLiteral))
Dim typ109 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitLiteralIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ109))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ109).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 0)
EmitLiteralIL.MarkSequencePoint(doc8, 768, 1, 768, 100)
Dim typ110(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ110(UBound(typ110) + 1)
typ110(UBound(typ110)) = Typ
EmitLiteralIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ110))
Typ = Typ03.GetMethod("IsInstanceOfType", typ110).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 1)
EmitLiteralIL.MarkSequencePoint(doc8, 770, 1, 770, 100)
EmitLiteralIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitLiteralIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa99 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim tru99 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim cont99 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
EmitLiteralIL.Emit(OpCodes.Beq, tru99)
EmitLiteralIL.Emit(OpCodes.Br, fa99)
EmitLiteralIL.MarkLabel(tru99)
EmitLiteralIL.MarkSequencePoint(doc8, 771, 1, 771, 100)
Dim locbldr147 As LocalBuilder = EmitLiteralIL.DeclareLocal(GetType(LongLiteral))
locbldr147.SetLocalSymInfo("llit")
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Stloc, 6)
EmitLiteralIL.MarkSequencePoint(doc8, 772, 1, 772, 100)
Dim typ111(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(LongLiteral)
EmitLiteralIL.Emit(OpCodes.Ldfld, GetType(LongLiteral).GetField("NumVal"))
Typ = GetType(LongLiteral).GetField("NumVal").FieldType
ReDim Preserve typ111(UBound(typ111) + 1)
typ111(UBound(typ111)) = Typ
EmitLiteralIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdcI8", typ111))
Typ = GetType(ILEmitter).GetMethod("EmitLdcI8", typ111).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLiteralIL.Emit(OpCodes.Pop)
End If
EmitLiteralIL.MarkSequencePoint(doc8, 773, 1, 773, 100)
EmitLiteralIL.Emit(OpCodes.Br, label20)
EmitLiteralIL.MarkSequencePoint(doc8, 774, 1, 774, 100)
EmitLiteralIL.Emit(OpCodes.Br, cont99)
EmitLiteralIL.MarkLabel(fa99)
EmitLiteralIL.Emit(OpCodes.Br, cont99)
EmitLiteralIL.MarkLabel(cont99)
EmitLiteralIL.MarkSequencePoint(doc8, 776, 1, 776, 100)
EmitLiteralIL.Emit(OpCodes.Ldtoken, GetType(FloatLiteral))
Dim typ112 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitLiteralIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ112))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ112).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 0)
EmitLiteralIL.MarkSequencePoint(doc8, 777, 1, 777, 100)
Dim typ113(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ113(UBound(typ113) + 1)
typ113(UBound(typ113)) = Typ
EmitLiteralIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ113))
Typ = Typ03.GetMethod("IsInstanceOfType", typ113).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 1)
EmitLiteralIL.MarkSequencePoint(doc8, 779, 1, 779, 100)
EmitLiteralIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitLiteralIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa100 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim tru100 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim cont100 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
EmitLiteralIL.Emit(OpCodes.Beq, tru100)
EmitLiteralIL.Emit(OpCodes.Br, fa100)
EmitLiteralIL.MarkLabel(tru100)
EmitLiteralIL.MarkSequencePoint(doc8, 780, 1, 780, 100)
Dim locbldr148 As LocalBuilder = EmitLiteralIL.DeclareLocal(GetType(FloatLiteral))
locbldr148.SetLocalSymInfo("flit")
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Stloc, 7)
EmitLiteralIL.MarkSequencePoint(doc8, 781, 1, 781, 100)
Dim typ114(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(FloatLiteral)
EmitLiteralIL.Emit(OpCodes.Ldfld, GetType(FloatLiteral).GetField("NumVal"))
Typ = GetType(FloatLiteral).GetField("NumVal").FieldType
ReDim Preserve typ114(UBound(typ114) + 1)
typ114(UBound(typ114)) = Typ
EmitLiteralIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdcR4", typ114))
Typ = GetType(ILEmitter).GetMethod("EmitLdcR4", typ114).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLiteralIL.Emit(OpCodes.Pop)
End If
EmitLiteralIL.MarkSequencePoint(doc8, 782, 1, 782, 100)
EmitLiteralIL.Emit(OpCodes.Br, label20)
EmitLiteralIL.MarkSequencePoint(doc8, 783, 1, 783, 100)
EmitLiteralIL.Emit(OpCodes.Br, cont100)
EmitLiteralIL.MarkLabel(fa100)
EmitLiteralIL.Emit(OpCodes.Br, cont100)
EmitLiteralIL.MarkLabel(cont100)
EmitLiteralIL.MarkSequencePoint(doc8, 785, 1, 785, 100)
EmitLiteralIL.Emit(OpCodes.Ldtoken, GetType(DoubleLiteral))
Dim typ115 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitLiteralIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ115))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ115).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 0)
EmitLiteralIL.MarkSequencePoint(doc8, 786, 1, 786, 100)
Dim typ116(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ116(UBound(typ116) + 1)
typ116(UBound(typ116)) = Typ
EmitLiteralIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ116))
Typ = Typ03.GetMethod("IsInstanceOfType", typ116).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 1)
EmitLiteralIL.MarkSequencePoint(doc8, 788, 1, 788, 100)
EmitLiteralIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitLiteralIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa101 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim tru101 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim cont101 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
EmitLiteralIL.Emit(OpCodes.Beq, tru101)
EmitLiteralIL.Emit(OpCodes.Br, fa101)
EmitLiteralIL.MarkLabel(tru101)
EmitLiteralIL.MarkSequencePoint(doc8, 789, 1, 789, 100)
Dim locbldr149 As LocalBuilder = EmitLiteralIL.DeclareLocal(GetType(DoubleLiteral))
locbldr149.SetLocalSymInfo("dlit")
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Stloc, 8)
EmitLiteralIL.MarkSequencePoint(doc8, 790, 1, 790, 100)
Dim typ117(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(DoubleLiteral)
EmitLiteralIL.Emit(OpCodes.Ldfld, GetType(DoubleLiteral).GetField("NumVal"))
Typ = GetType(DoubleLiteral).GetField("NumVal").FieldType
ReDim Preserve typ117(UBound(typ117) + 1)
typ117(UBound(typ117)) = Typ
EmitLiteralIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdcR8", typ117))
Typ = GetType(ILEmitter).GetMethod("EmitLdcR8", typ117).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLiteralIL.Emit(OpCodes.Pop)
End If
EmitLiteralIL.MarkSequencePoint(doc8, 791, 1, 791, 100)
EmitLiteralIL.Emit(OpCodes.Br, label20)
EmitLiteralIL.MarkSequencePoint(doc8, 792, 1, 792, 100)
EmitLiteralIL.Emit(OpCodes.Br, cont101)
EmitLiteralIL.MarkLabel(fa101)
EmitLiteralIL.Emit(OpCodes.Br, cont101)
EmitLiteralIL.MarkLabel(cont101)
EmitLiteralIL.MarkSequencePoint(doc8, 794, 1, 794, 100)
EmitLiteralIL.Emit(OpCodes.Ldtoken, GetType(BooleanLiteral))
Dim typ118 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitLiteralIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ118))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ118).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 0)
EmitLiteralIL.MarkSequencePoint(doc8, 795, 1, 795, 100)
Dim typ119(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ119(UBound(typ119) + 1)
typ119(UBound(typ119)) = Typ
EmitLiteralIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ119))
Typ = Typ03.GetMethod("IsInstanceOfType", typ119).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 1)
EmitLiteralIL.MarkSequencePoint(doc8, 797, 1, 797, 100)
EmitLiteralIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitLiteralIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa102 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim tru102 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim cont102 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
EmitLiteralIL.Emit(OpCodes.Beq, tru102)
EmitLiteralIL.Emit(OpCodes.Br, fa102)
EmitLiteralIL.MarkLabel(tru102)
EmitLiteralIL.MarkSequencePoint(doc8, 798, 1, 798, 100)
Dim locbldr150 As LocalBuilder = EmitLiteralIL.DeclareLocal(GetType(BooleanLiteral))
locbldr150.SetLocalSymInfo("bllit")
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Stloc, 9)
EmitLiteralIL.MarkSequencePoint(doc8, 799, 1, 799, 100)
Dim typ120(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(BooleanLiteral)
EmitLiteralIL.Emit(OpCodes.Ldfld, GetType(BooleanLiteral).GetField("BoolVal"))
Typ = GetType(BooleanLiteral).GetField("BoolVal").FieldType
ReDim Preserve typ120(UBound(typ120) + 1)
typ120(UBound(typ120)) = Typ
EmitLiteralIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdcBool", typ120))
Typ = GetType(ILEmitter).GetMethod("EmitLdcBool", typ120).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLiteralIL.Emit(OpCodes.Pop)
End If
EmitLiteralIL.MarkSequencePoint(doc8, 800, 1, 800, 100)
EmitLiteralIL.Emit(OpCodes.Br, label20)
EmitLiteralIL.MarkSequencePoint(doc8, 801, 1, 801, 100)
EmitLiteralIL.Emit(OpCodes.Br, cont102)
EmitLiteralIL.MarkLabel(fa102)
EmitLiteralIL.Emit(OpCodes.Br, cont102)
EmitLiteralIL.MarkLabel(cont102)
EmitLiteralIL.MarkSequencePoint(doc8, 803, 1, 803, 100)
EmitLiteralIL.Emit(OpCodes.Ldtoken, GetType(CharLiteral))
Dim typ121 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitLiteralIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ121))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ121).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 0)
EmitLiteralIL.MarkSequencePoint(doc8, 804, 1, 804, 100)
Dim typ122(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ122(UBound(typ122) + 1)
typ122(UBound(typ122)) = Typ
EmitLiteralIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ122))
Typ = Typ03.GetMethod("IsInstanceOfType", typ122).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 1)
EmitLiteralIL.MarkSequencePoint(doc8, 806, 1, 806, 100)
EmitLiteralIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitLiteralIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa103 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim tru103 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim cont103 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
EmitLiteralIL.Emit(OpCodes.Beq, tru103)
EmitLiteralIL.Emit(OpCodes.Br, fa103)
EmitLiteralIL.MarkLabel(tru103)
EmitLiteralIL.MarkSequencePoint(doc8, 807, 1, 807, 100)
Dim locbldr151 As LocalBuilder = EmitLiteralIL.DeclareLocal(GetType(CharLiteral))
locbldr151.SetLocalSymInfo("clit")
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Stloc, 10)
EmitLiteralIL.MarkSequencePoint(doc8, 808, 1, 808, 100)
Dim typ123(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(CharLiteral)
EmitLiteralIL.Emit(OpCodes.Ldfld, GetType(CharLiteral).GetField("CharVal"))
Typ = GetType(CharLiteral).GetField("CharVal").FieldType
ReDim Preserve typ123(UBound(typ123) + 1)
typ123(UBound(typ123)) = Typ
EmitLiteralIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdcChar", typ123))
Typ = GetType(ILEmitter).GetMethod("EmitLdcChar", typ123).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLiteralIL.Emit(OpCodes.Pop)
End If
EmitLiteralIL.MarkSequencePoint(doc8, 809, 1, 809, 100)
EmitLiteralIL.Emit(OpCodes.Br, label20)
EmitLiteralIL.MarkSequencePoint(doc8, 810, 1, 810, 100)
EmitLiteralIL.Emit(OpCodes.Br, cont103)
EmitLiteralIL.MarkLabel(fa103)
EmitLiteralIL.Emit(OpCodes.Br, cont103)
EmitLiteralIL.MarkLabel(cont103)
EmitLiteralIL.MarkSequencePoint(doc8, 812, 1, 812, 100)
EmitLiteralIL.Emit(OpCodes.Ldtoken, GetType(NullLiteral))
Dim typ124 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitLiteralIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ124))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ124).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 0)
EmitLiteralIL.MarkSequencePoint(doc8, 813, 1, 813, 100)
Dim typ125(-1) As Type
EmitLiteralIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitLiteralIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Literal)
EmitLiteralIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ125(UBound(typ125) + 1)
typ125(UBound(typ125)) = Typ
EmitLiteralIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ125))
Typ = Typ03.GetMethod("IsInstanceOfType", typ125).ReturnType
EmitLiteralIL.Emit(OpCodes.Stloc, 1)
EmitLiteralIL.MarkSequencePoint(doc8, 815, 1, 815, 100)
EmitLiteralIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitLiteralIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa104 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim tru104 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
Dim cont104 As System.Reflection.Emit.Label = EmitLiteralIL.DefineLabel()
EmitLiteralIL.Emit(OpCodes.Beq, tru104)
EmitLiteralIL.Emit(OpCodes.Br, fa104)
EmitLiteralIL.MarkLabel(tru104)
EmitLiteralIL.MarkSequencePoint(doc8, 816, 1, 816, 100)
EmitLiteralIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdnull", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitLdnull", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLiteralIL.Emit(OpCodes.Pop)
End If
EmitLiteralIL.MarkSequencePoint(doc8, 817, 1, 817, 100)
EmitLiteralIL.Emit(OpCodes.Br, label20)
EmitLiteralIL.MarkSequencePoint(doc8, 818, 1, 818, 100)
EmitLiteralIL.Emit(OpCodes.Br, cont104)
EmitLiteralIL.MarkLabel(fa104)
EmitLiteralIL.Emit(OpCodes.Br, cont104)
EmitLiteralIL.MarkLabel(cont104)
EmitLiteralIL.MarkSequencePoint(doc8, 820, 1, 820, 100)
EmitLiteralIL.MarkLabel(label20)
EmitLiteralIL.MarkSequencePoint(doc8, 822, 1, 822, 100)
EmitLiteralIL.Emit(OpCodes.Ret)
Dim typ126(-1) As Type
ReDim Preserve typ126(UBound(typ126) + 1)
typ126(UBound(typ126)) = GetType(ConstLiteral)
Dim ProcessConst As MethodBuilder = Helpers.DefineMethod("ProcessConst", MethodAttributes.Public Or MethodAttributes.Static, GetType(Literal), typ126)
Dim ProcessConstIL As ILGenerator = ProcessConst.GetILGenerator()
Dim ProcessConstparam01 As ParameterBuilder = ProcessConst.DefineParameter(1, ParameterAttributes.None, "lit")
ProcessConstIL.MarkSequencePoint(doc8, 826, 1, 826, 100)
Dim label21 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
ProcessConstIL.MarkSequencePoint(doc8, 827, 1, 827, 100)
Dim locbldr152 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(System.Type))
locbldr152.SetLocalSymInfo("typ")
ProcessConstIL.MarkSequencePoint(doc8, 828, 1, 828, 100)
Dim locbldr153 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(System.Type))
locbldr153.SetLocalSymInfo("inttyp")
ProcessConstIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(ConstLiteral)
ProcessConstIL.Emit(OpCodes.Ldfld, GetType(ConstLiteral).GetField("IntTyp"))
Typ = GetType(ConstLiteral).GetField("IntTyp").FieldType
ProcessConstIL.Emit(OpCodes.Stloc, 1)
ProcessConstIL.MarkSequencePoint(doc8, 829, 1, 829, 100)
Dim locbldr154 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(System.Object))
locbldr154.SetLocalSymInfo("obj")
ProcessConstIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(ConstLiteral)
ProcessConstIL.Emit(OpCodes.Ldfld, GetType(ConstLiteral).GetField("ConstVal"))
Typ = GetType(ConstLiteral).GetField("ConstVal").FieldType
ProcessConstIL.Emit(OpCodes.Stloc, 2)
ProcessConstIL.MarkSequencePoint(doc8, 830, 1, 830, 100)
Dim locbldr155 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(System.Boolean))
locbldr155.SetLocalSymInfo("b")
ProcessConstIL.MarkSequencePoint(doc8, 832, 1, 832, 100)
ProcessConstIL.Emit(OpCodes.Ldtoken, GetType(System.String))
Dim typ127 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ127))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ127).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 0)
ProcessConstIL.MarkSequencePoint(doc8, 833, 1, 833, 100)
Dim typ128(-1) As Type
ProcessConstIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessConstIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
ReDim Preserve typ128(UBound(typ128) + 1)
typ128(UBound(typ128)) = Typ
ProcessConstIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ128))
Typ = Typ03.GetMethod("Equals", typ128).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 3)
ProcessConstIL.MarkSequencePoint(doc8, 835, 1, 835, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
ProcessConstIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa105 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim tru105 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim cont105 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
ProcessConstIL.Emit(OpCodes.Beq, tru105)
ProcessConstIL.Emit(OpCodes.Br, fa105)
ProcessConstIL.MarkLabel(tru105)
ProcessConstIL.MarkSequencePoint(doc8, 836, 1, 836, 100)
Dim locbldr156 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(StringLiteral))
locbldr156.SetLocalSymInfo("slit")
ProcessConstIL.Emit(OpCodes.Newobj, GetType(StringLiteral).GetConstructor(Type.EmptyTypes))
ProcessConstIL.Emit(OpCodes.Stloc, 4)
ProcessConstIL.MarkSequencePoint(doc8, 837, 1, 837, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(StringLiteral)
ProcessConstIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Object)
Dim typ129 As Type() = {Typ}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToString", typ129))
Typ = GetType(System.Convert).GetMethod("ToString", typ129).ReturnType
ProcessConstIL.Emit(OpCodes.Stfld, GetType(StringLiteral).GetField("Value"))
ProcessConstIL.MarkSequencePoint(doc8, 838, 1, 838, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(StringLiteral)
ProcessConstIL.MarkSequencePoint(doc8, 839, 1, 839, 100)
ProcessConstIL.Emit(OpCodes.Br, label21)
ProcessConstIL.MarkSequencePoint(doc8, 840, 1, 840, 100)
ProcessConstIL.Emit(OpCodes.Br, cont105)
ProcessConstIL.MarkLabel(fa105)
ProcessConstIL.Emit(OpCodes.Br, cont105)
ProcessConstIL.MarkLabel(cont105)
ProcessConstIL.MarkSequencePoint(doc8, 842, 1, 842, 100)
ProcessConstIL.Emit(OpCodes.Ldtoken, GetType(System.SByte))
Dim typ130 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ130))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ130).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 0)
ProcessConstIL.MarkSequencePoint(doc8, 843, 1, 843, 100)
Dim typ131(-1) As Type
ProcessConstIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessConstIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
ReDim Preserve typ131(UBound(typ131) + 1)
typ131(UBound(typ131)) = Typ
ProcessConstIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ131))
Typ = Typ03.GetMethod("Equals", typ131).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 3)
ProcessConstIL.MarkSequencePoint(doc8, 845, 1, 845, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
ProcessConstIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa106 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim tru106 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim cont106 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
ProcessConstIL.Emit(OpCodes.Beq, tru106)
ProcessConstIL.Emit(OpCodes.Br, fa106)
ProcessConstIL.MarkLabel(tru106)
ProcessConstIL.MarkSequencePoint(doc8, 846, 1, 846, 100)
Dim locbldr157 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(SByteLiteral))
locbldr157.SetLocalSymInfo("sblit")
ProcessConstIL.Emit(OpCodes.Newobj, GetType(SByteLiteral).GetConstructor(Type.EmptyTypes))
ProcessConstIL.Emit(OpCodes.Stloc, 5)
ProcessConstIL.MarkSequencePoint(doc8, 847, 1, 847, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(SByteLiteral)
ProcessConstIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Object)
Dim typ132 As Type() = {Typ}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToSByte", typ132))
Typ = GetType(System.Convert).GetMethod("ToSByte", typ132).ReturnType
ProcessConstIL.Emit(OpCodes.Stfld, GetType(SByteLiteral).GetField("NumVal"))
ProcessConstIL.MarkSequencePoint(doc8, 848, 1, 848, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(SByteLiteral)
ProcessConstIL.MarkSequencePoint(doc8, 849, 1, 849, 100)
ProcessConstIL.Emit(OpCodes.Br, label21)
ProcessConstIL.MarkSequencePoint(doc8, 850, 1, 850, 100)
ProcessConstIL.Emit(OpCodes.Br, cont106)
ProcessConstIL.MarkLabel(fa106)
ProcessConstIL.Emit(OpCodes.Br, cont106)
ProcessConstIL.MarkLabel(cont106)
ProcessConstIL.MarkSequencePoint(doc8, 852, 1, 852, 100)
ProcessConstIL.Emit(OpCodes.Ldtoken, GetType(System.Int16))
Dim typ133 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ133))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ133).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 0)
ProcessConstIL.MarkSequencePoint(doc8, 853, 1, 853, 100)
Dim typ134(-1) As Type
ProcessConstIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessConstIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
ReDim Preserve typ134(UBound(typ134) + 1)
typ134(UBound(typ134)) = Typ
ProcessConstIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ134))
Typ = Typ03.GetMethod("Equals", typ134).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 3)
ProcessConstIL.MarkSequencePoint(doc8, 855, 1, 855, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
ProcessConstIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa107 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim tru107 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim cont107 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
ProcessConstIL.Emit(OpCodes.Beq, tru107)
ProcessConstIL.Emit(OpCodes.Br, fa107)
ProcessConstIL.MarkLabel(tru107)
ProcessConstIL.MarkSequencePoint(doc8, 856, 1, 856, 100)
Dim locbldr158 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(ShortLiteral))
locbldr158.SetLocalSymInfo("shlit")
ProcessConstIL.Emit(OpCodes.Newobj, GetType(ShortLiteral).GetConstructor(Type.EmptyTypes))
ProcessConstIL.Emit(OpCodes.Stloc, 6)
ProcessConstIL.MarkSequencePoint(doc8, 857, 1, 857, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(ShortLiteral)
ProcessConstIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Object)
Dim typ135 As Type() = {Typ}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToInt16", typ135))
Typ = GetType(System.Convert).GetMethod("ToInt16", typ135).ReturnType
ProcessConstIL.Emit(OpCodes.Stfld, GetType(ShortLiteral).GetField("NumVal"))
ProcessConstIL.MarkSequencePoint(doc8, 858, 1, 858, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(ShortLiteral)
ProcessConstIL.MarkSequencePoint(doc8, 859, 1, 859, 100)
ProcessConstIL.Emit(OpCodes.Br, label21)
ProcessConstIL.MarkSequencePoint(doc8, 860, 1, 860, 100)
ProcessConstIL.Emit(OpCodes.Br, cont107)
ProcessConstIL.MarkLabel(fa107)
ProcessConstIL.Emit(OpCodes.Br, cont107)
ProcessConstIL.MarkLabel(cont107)
ProcessConstIL.MarkSequencePoint(doc8, 862, 1, 862, 100)
ProcessConstIL.Emit(OpCodes.Ldtoken, GetType(System.Int32))
Dim typ136 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ136))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ136).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 0)
ProcessConstIL.MarkSequencePoint(doc8, 863, 1, 863, 100)
Dim typ137(-1) As Type
ProcessConstIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessConstIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
ReDim Preserve typ137(UBound(typ137) + 1)
typ137(UBound(typ137)) = Typ
ProcessConstIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ137))
Typ = Typ03.GetMethod("Equals", typ137).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 3)
ProcessConstIL.MarkSequencePoint(doc8, 865, 1, 865, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
ProcessConstIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa108 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim tru108 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim cont108 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
ProcessConstIL.Emit(OpCodes.Beq, tru108)
ProcessConstIL.Emit(OpCodes.Br, fa108)
ProcessConstIL.MarkLabel(tru108)
ProcessConstIL.MarkSequencePoint(doc8, 866, 1, 866, 100)
Dim locbldr159 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(IntLiteral))
locbldr159.SetLocalSymInfo("ilit")
ProcessConstIL.Emit(OpCodes.Newobj, GetType(IntLiteral).GetConstructor(Type.EmptyTypes))
ProcessConstIL.Emit(OpCodes.Stloc, 7)
ProcessConstIL.MarkSequencePoint(doc8, 867, 1, 867, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(IntLiteral)
ProcessConstIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Object)
Dim typ138 As Type() = {Typ}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToInt32", typ138))
Typ = GetType(System.Convert).GetMethod("ToInt32", typ138).ReturnType
ProcessConstIL.Emit(OpCodes.Stfld, GetType(IntLiteral).GetField("NumVal"))
ProcessConstIL.MarkSequencePoint(doc8, 868, 1, 868, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(IntLiteral)
ProcessConstIL.MarkSequencePoint(doc8, 869, 1, 869, 100)
ProcessConstIL.Emit(OpCodes.Br, label21)
ProcessConstIL.MarkSequencePoint(doc8, 870, 1, 870, 100)
ProcessConstIL.Emit(OpCodes.Br, cont108)
ProcessConstIL.MarkLabel(fa108)
ProcessConstIL.Emit(OpCodes.Br, cont108)
ProcessConstIL.MarkLabel(cont108)
ProcessConstIL.MarkSequencePoint(doc8, 872, 1, 872, 100)
ProcessConstIL.Emit(OpCodes.Ldtoken, GetType(System.Int64))
Dim typ139 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ139))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ139).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 0)
ProcessConstIL.MarkSequencePoint(doc8, 873, 1, 873, 100)
Dim typ140(-1) As Type
ProcessConstIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessConstIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
ReDim Preserve typ140(UBound(typ140) + 1)
typ140(UBound(typ140)) = Typ
ProcessConstIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ140))
Typ = Typ03.GetMethod("Equals", typ140).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 3)
ProcessConstIL.MarkSequencePoint(doc8, 875, 1, 875, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
ProcessConstIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa109 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim tru109 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim cont109 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
ProcessConstIL.Emit(OpCodes.Beq, tru109)
ProcessConstIL.Emit(OpCodes.Br, fa109)
ProcessConstIL.MarkLabel(tru109)
ProcessConstIL.MarkSequencePoint(doc8, 876, 1, 876, 100)
Dim locbldr160 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(LongLiteral))
locbldr160.SetLocalSymInfo("llit")
ProcessConstIL.Emit(OpCodes.Newobj, GetType(LongLiteral).GetConstructor(Type.EmptyTypes))
ProcessConstIL.Emit(OpCodes.Stloc, 8)
ProcessConstIL.MarkSequencePoint(doc8, 877, 1, 877, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(LongLiteral)
ProcessConstIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Object)
Dim typ141 As Type() = {Typ}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToInt64", typ141))
Typ = GetType(System.Convert).GetMethod("ToInt64", typ141).ReturnType
ProcessConstIL.Emit(OpCodes.Stfld, GetType(LongLiteral).GetField("NumVal"))
ProcessConstIL.MarkSequencePoint(doc8, 878, 1, 878, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(LongLiteral)
ProcessConstIL.MarkSequencePoint(doc8, 879, 1, 879, 100)
ProcessConstIL.Emit(OpCodes.Br, label21)
ProcessConstIL.MarkSequencePoint(doc8, 880, 1, 880, 100)
ProcessConstIL.Emit(OpCodes.Br, cont109)
ProcessConstIL.MarkLabel(fa109)
ProcessConstIL.Emit(OpCodes.Br, cont109)
ProcessConstIL.MarkLabel(cont109)
ProcessConstIL.MarkSequencePoint(doc8, 882, 1, 882, 100)
ProcessConstIL.Emit(OpCodes.Ldtoken, GetType(System.Single))
Dim typ142 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ142))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ142).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 0)
ProcessConstIL.MarkSequencePoint(doc8, 883, 1, 883, 100)
Dim typ143(-1) As Type
ProcessConstIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessConstIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
ReDim Preserve typ143(UBound(typ143) + 1)
typ143(UBound(typ143)) = Typ
ProcessConstIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ143))
Typ = Typ03.GetMethod("Equals", typ143).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 3)
ProcessConstIL.MarkSequencePoint(doc8, 885, 1, 885, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
ProcessConstIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa110 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim tru110 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim cont110 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
ProcessConstIL.Emit(OpCodes.Beq, tru110)
ProcessConstIL.Emit(OpCodes.Br, fa110)
ProcessConstIL.MarkLabel(tru110)
ProcessConstIL.MarkSequencePoint(doc8, 886, 1, 886, 100)
Dim locbldr161 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(FloatLiteral))
locbldr161.SetLocalSymInfo("flit")
ProcessConstIL.Emit(OpCodes.Newobj, GetType(FloatLiteral).GetConstructor(Type.EmptyTypes))
ProcessConstIL.Emit(OpCodes.Stloc, 9)
ProcessConstIL.MarkSequencePoint(doc8, 887, 1, 887, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(FloatLiteral)
ProcessConstIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Object)
Dim typ144 As Type() = {Typ}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToSingle", typ144))
Typ = GetType(System.Convert).GetMethod("ToSingle", typ144).ReturnType
ProcessConstIL.Emit(OpCodes.Stfld, GetType(FloatLiteral).GetField("NumVal"))
ProcessConstIL.MarkSequencePoint(doc8, 888, 1, 888, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(FloatLiteral)
ProcessConstIL.MarkSequencePoint(doc8, 889, 1, 889, 100)
ProcessConstIL.Emit(OpCodes.Br, label21)
ProcessConstIL.MarkSequencePoint(doc8, 890, 1, 890, 100)
ProcessConstIL.Emit(OpCodes.Br, cont110)
ProcessConstIL.MarkLabel(fa110)
ProcessConstIL.Emit(OpCodes.Br, cont110)
ProcessConstIL.MarkLabel(cont110)
ProcessConstIL.MarkSequencePoint(doc8, 892, 1, 892, 100)
ProcessConstIL.Emit(OpCodes.Ldtoken, GetType(System.Double))
Dim typ145 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ145))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ145).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 0)
ProcessConstIL.MarkSequencePoint(doc8, 893, 1, 893, 100)
Dim typ146(-1) As Type
ProcessConstIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessConstIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
ReDim Preserve typ146(UBound(typ146) + 1)
typ146(UBound(typ146)) = Typ
ProcessConstIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ146))
Typ = Typ03.GetMethod("Equals", typ146).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 3)
ProcessConstIL.MarkSequencePoint(doc8, 895, 1, 895, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
ProcessConstIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa111 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim tru111 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim cont111 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
ProcessConstIL.Emit(OpCodes.Beq, tru111)
ProcessConstIL.Emit(OpCodes.Br, fa111)
ProcessConstIL.MarkLabel(tru111)
ProcessConstIL.MarkSequencePoint(doc8, 896, 1, 896, 100)
Dim locbldr162 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(DoubleLiteral))
locbldr162.SetLocalSymInfo("dlit")
ProcessConstIL.Emit(OpCodes.Newobj, GetType(DoubleLiteral).GetConstructor(Type.EmptyTypes))
ProcessConstIL.Emit(OpCodes.Stloc, 10)
ProcessConstIL.MarkSequencePoint(doc8, 897, 1, 897, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(DoubleLiteral)
ProcessConstIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Object)
Dim typ147 As Type() = {Typ}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToDouble", typ147))
Typ = GetType(System.Convert).GetMethod("ToDouble", typ147).ReturnType
ProcessConstIL.Emit(OpCodes.Stfld, GetType(DoubleLiteral).GetField("NumVal"))
ProcessConstIL.MarkSequencePoint(doc8, 898, 1, 898, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(DoubleLiteral)
ProcessConstIL.MarkSequencePoint(doc8, 899, 1, 899, 100)
ProcessConstIL.Emit(OpCodes.Br, label21)
ProcessConstIL.MarkSequencePoint(doc8, 900, 1, 900, 100)
ProcessConstIL.Emit(OpCodes.Br, cont111)
ProcessConstIL.MarkLabel(fa111)
ProcessConstIL.Emit(OpCodes.Br, cont111)
ProcessConstIL.MarkLabel(cont111)
ProcessConstIL.MarkSequencePoint(doc8, 902, 1, 902, 100)
ProcessConstIL.Emit(OpCodes.Ldtoken, GetType(System.Boolean))
Dim typ148 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ148))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ148).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 0)
ProcessConstIL.MarkSequencePoint(doc8, 903, 1, 903, 100)
Dim typ149(-1) As Type
ProcessConstIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessConstIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
ReDim Preserve typ149(UBound(typ149) + 1)
typ149(UBound(typ149)) = Typ
ProcessConstIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ149))
Typ = Typ03.GetMethod("Equals", typ149).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 3)
ProcessConstIL.MarkSequencePoint(doc8, 905, 1, 905, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
ProcessConstIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa112 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim tru112 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim cont112 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
ProcessConstIL.Emit(OpCodes.Beq, tru112)
ProcessConstIL.Emit(OpCodes.Br, fa112)
ProcessConstIL.MarkLabel(tru112)
ProcessConstIL.MarkSequencePoint(doc8, 906, 1, 906, 100)
Dim locbldr163 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(BooleanLiteral))
locbldr163.SetLocalSymInfo("bllit")
ProcessConstIL.Emit(OpCodes.Newobj, GetType(BooleanLiteral).GetConstructor(Type.EmptyTypes))
ProcessConstIL.Emit(OpCodes.Stloc, 11)
ProcessConstIL.MarkSequencePoint(doc8, 907, 1, 907, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(BooleanLiteral)
ProcessConstIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Object)
Dim typ150 As Type() = {Typ}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToBoolean", typ150))
Typ = GetType(System.Convert).GetMethod("ToBoolean", typ150).ReturnType
ProcessConstIL.Emit(OpCodes.Stfld, GetType(BooleanLiteral).GetField("BoolVal"))
ProcessConstIL.MarkSequencePoint(doc8, 908, 1, 908, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(BooleanLiteral)
ProcessConstIL.MarkSequencePoint(doc8, 909, 1, 909, 100)
ProcessConstIL.Emit(OpCodes.Br, label21)
ProcessConstIL.MarkSequencePoint(doc8, 910, 1, 910, 100)
ProcessConstIL.Emit(OpCodes.Br, cont112)
ProcessConstIL.MarkLabel(fa112)
ProcessConstIL.Emit(OpCodes.Br, cont112)
ProcessConstIL.MarkLabel(cont112)
ProcessConstIL.MarkSequencePoint(doc8, 912, 1, 912, 100)
ProcessConstIL.Emit(OpCodes.Ldtoken, GetType(System.Char))
Dim typ151 As Type() = {GetType(System.RuntimeTypeHandle)}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ151))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ151).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 0)
ProcessConstIL.MarkSequencePoint(doc8, 913, 1, 913, 100)
Dim typ152(-1) As Type
ProcessConstIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ProcessConstIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
ReDim Preserve typ152(UBound(typ152) + 1)
typ152(UBound(typ152)) = Typ
ProcessConstIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ152))
Typ = Typ03.GetMethod("Equals", typ152).ReturnType
ProcessConstIL.Emit(OpCodes.Stloc, 3)
ProcessConstIL.MarkSequencePoint(doc8, 915, 1, 915, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
ProcessConstIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa113 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim tru113 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
Dim cont113 As System.Reflection.Emit.Label = ProcessConstIL.DefineLabel()
ProcessConstIL.Emit(OpCodes.Beq, tru113)
ProcessConstIL.Emit(OpCodes.Br, fa113)
ProcessConstIL.MarkLabel(tru113)
ProcessConstIL.MarkSequencePoint(doc8, 916, 1, 916, 100)
Dim locbldr164 As LocalBuilder = ProcessConstIL.DeclareLocal(GetType(CharLiteral))
locbldr164.SetLocalSymInfo("clit")
ProcessConstIL.Emit(OpCodes.Newobj, GetType(CharLiteral).GetConstructor(Type.EmptyTypes))
ProcessConstIL.Emit(OpCodes.Stloc, 12)
ProcessConstIL.MarkSequencePoint(doc8, 917, 1, 917, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(CharLiteral)
ProcessConstIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Object)
Dim typ153 As Type() = {Typ}
ProcessConstIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ153))
Typ = GetType(System.Convert).GetMethod("ToChar", typ153).ReturnType
ProcessConstIL.Emit(OpCodes.Stfld, GetType(CharLiteral).GetField("CharVal"))
ProcessConstIL.MarkSequencePoint(doc8, 918, 1, 918, 100)
ProcessConstIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(CharLiteral)
ProcessConstIL.MarkSequencePoint(doc8, 919, 1, 919, 100)
ProcessConstIL.Emit(OpCodes.Br, label21)
ProcessConstIL.MarkSequencePoint(doc8, 920, 1, 920, 100)
ProcessConstIL.Emit(OpCodes.Br, cont113)
ProcessConstIL.MarkLabel(fa113)
ProcessConstIL.Emit(OpCodes.Br, cont113)
ProcessConstIL.MarkLabel(cont113)
ProcessConstIL.MarkSequencePoint(doc8, 922, 1, 922, 100)
ProcessConstIL.Emit(OpCodes.Ldnull)
ProcessConstIL.MarkSequencePoint(doc8, 924, 1, 924, 100)
ProcessConstIL.MarkLabel(label21)
ProcessConstIL.MarkSequencePoint(doc8, 926, 1, 926, 100)
ProcessConstIL.Emit(OpCodes.Ret)
Dim typ154(-1) As Type
ReDim Preserve typ154(UBound(typ154) + 1)
typ154(UBound(typ154)) = GetType(Op)
ReDim Preserve typ154(UBound(typ154) + 1)
typ154(UBound(typ154)) = GetType(System.Boolean)
Dim EmitOp As MethodBuilder = Helpers.DefineMethod("EmitOp", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ154)
Dim EmitOpIL As ILGenerator = EmitOp.GetILGenerator()
Dim EmitOpparam01 As ParameterBuilder = EmitOp.DefineParameter(1, ParameterAttributes.None, "op")
Dim EmitOpparam02 As ParameterBuilder = EmitOp.DefineParameter(2, ParameterAttributes.None, "s")
EmitOpIL.MarkSequencePoint(doc8, 931, 1, 931, 100)
Dim label22 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.MarkSequencePoint(doc8, 932, 1, 932, 100)
Dim locbldr165 As LocalBuilder = EmitOpIL.DeclareLocal(GetType(System.Type))
locbldr165.SetLocalSymInfo("typ")
EmitOpIL.MarkSequencePoint(doc8, 933, 1, 933, 100)
Dim locbldr166 As LocalBuilder = EmitOpIL.DeclareLocal(GetType(System.Boolean))
locbldr166.SetLocalSymInfo("b")
EmitOpIL.MarkSequencePoint(doc8, 934, 1, 934, 100)
Dim locbldr167 As LocalBuilder = EmitOpIL.DeclareLocal(GetType(MethodInfo))
locbldr167.SetLocalSymInfo("mtd")
EmitOpIL.Emit(OpCodes.Ldnull)
EmitOpIL.Emit(OpCodes.Stloc, 2)
EmitOpIL.MarkSequencePoint(doc8, 936, 1, 936, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(AddOp))
Dim typ155 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ155))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ155).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc8, 937, 1, 937, 100)
Dim typ156(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ156(UBound(typ156) + 1)
typ156(UBound(typ156)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ156))
Typ = Typ03.GetMethod("IsInstanceOfType", typ156).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc8, 939, 1, 939, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa114 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru114 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont114 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru114)
EmitOpIL.Emit(OpCodes.Br, fa114)
EmitOpIL.MarkLabel(tru114)
EmitOpIL.MarkSequencePoint(doc8, 940, 1, 940, 100)
Dim typ157(-1) As Type
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ157(UBound(typ157) + 1)
typ157(UBound(typ157)) = Typ
EmitOpIL.Emit(OpCodes.Ldstr, "op_Addition")
Typ = GetType(System.String)
ReDim Preserve typ157(UBound(typ157) + 1)
typ157(UBound(typ157)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ157(UBound(typ157) + 1)
typ157(UBound(typ157)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, RightOp)
Typ = RightOp.FieldType
ReDim Preserve typ157(UBound(typ157) + 1)
typ157(UBound(typ157)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadBinOp", typ157))
Typ = GetType(Loader).GetMethod("LoadBinOp", typ157).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 2)
EmitOpIL.MarkSequencePoint(doc8, 941, 1, 941, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
EmitOpIL.Emit(OpCodes.Ldnull)
Dim fa115 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru115 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont115 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, fa115)
EmitOpIL.Emit(OpCodes.Br, tru115)
EmitOpIL.MarkLabel(tru115)
EmitOpIL.MarkSequencePoint(doc8, 942, 1, 942, 100)
Dim typ158(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
ReDim Preserve typ158(UBound(typ158) + 1)
typ158(UBound(typ158)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ158))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ158).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc8, 943, 1, 943, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
EmitOpIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
EmitOpIL.MarkSequencePoint(doc8, 944, 1, 944, 100)
EmitOpIL.Emit(OpCodes.Br, cont115)
EmitOpIL.MarkLabel(fa115)
EmitOpIL.MarkSequencePoint(doc8, 945, 1, 945, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, StringFlg)
Typ = StringFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa116 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru116 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont116 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru116)
EmitOpIL.Emit(OpCodes.Br, fa116)
EmitOpIL.MarkLabel(tru116)
EmitOpIL.MarkSequencePoint(doc8, 946, 1, 946, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitStrAdd", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitStrAdd", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc8, 947, 1, 947, 100)
EmitOpIL.Emit(OpCodes.Br, cont116)
EmitOpIL.MarkLabel(fa116)
EmitOpIL.MarkSequencePoint(doc8, 948, 1, 948, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, OpCodeSuppFlg)
Typ = OpCodeSuppFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa117 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru117 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont117 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru117)
EmitOpIL.Emit(OpCodes.Br, fa117)
EmitOpIL.MarkLabel(tru117)
EmitOpIL.MarkSequencePoint(doc8, 949, 1, 949, 100)
Dim typ160(-1) As Type
EmitOpIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ160(UBound(typ160) + 1)
typ160(UBound(typ160)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitAdd", typ160))
Typ = GetType(ILEmitter).GetMethod("EmitAdd", typ160).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc8, 950, 1, 950, 100)
EmitOpIL.Emit(OpCodes.Br, cont117)
EmitOpIL.MarkLabel(fa117)
EmitOpIL.Emit(OpCodes.Br, cont117)
EmitOpIL.MarkLabel(cont117)
EmitOpIL.MarkSequencePoint(doc8, 951, 1, 951, 100)
EmitOpIL.Emit(OpCodes.Br, cont116)
EmitOpIL.MarkLabel(cont116)
EmitOpIL.MarkSequencePoint(doc8, 952, 1, 952, 100)
EmitOpIL.Emit(OpCodes.Br, cont115)
EmitOpIL.MarkLabel(cont115)
EmitOpIL.MarkSequencePoint(doc8, 953, 1, 953, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc8, 954, 1, 954, 100)
EmitOpIL.Emit(OpCodes.Br, cont114)
EmitOpIL.MarkLabel(fa114)
EmitOpIL.Emit(OpCodes.Br, cont114)
EmitOpIL.MarkLabel(cont114)
EmitOpIL.MarkSequencePoint(doc8, 956, 1, 956, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(MulOp))
Dim typ161 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ161))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ161).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc8, 957, 1, 957, 100)
Dim typ162(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ162(UBound(typ162) + 1)
typ162(UBound(typ162)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ162))
Typ = Typ03.GetMethod("IsInstanceOfType", typ162).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc8, 959, 1, 959, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa118 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru118 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont118 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru118)
EmitOpIL.Emit(OpCodes.Br, fa118)
EmitOpIL.MarkLabel(tru118)
EmitOpIL.MarkSequencePoint(doc8, 960, 1, 960, 100)
Dim typ163(-1) As Type
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ163(UBound(typ163) + 1)
typ163(UBound(typ163)) = Typ
EmitOpIL.Emit(OpCodes.Ldstr, "op_Multiply")
Typ = GetType(System.String)
ReDim Preserve typ163(UBound(typ163) + 1)
typ163(UBound(typ163)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ163(UBound(typ163) + 1)
typ163(UBound(typ163)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, RightOp)
Typ = RightOp.FieldType
ReDim Preserve typ163(UBound(typ163) + 1)
typ163(UBound(typ163)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadBinOp", typ163))
Typ = GetType(Loader).GetMethod("LoadBinOp", typ163).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 2)
EmitOpIL.MarkSequencePoint(doc8, 961, 1, 961, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
EmitOpIL.Emit(OpCodes.Ldnull)
Dim fa119 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru119 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont119 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, fa119)
EmitOpIL.Emit(OpCodes.Br, tru119)
EmitOpIL.MarkLabel(tru119)
EmitOpIL.MarkSequencePoint(doc8, 962, 1, 962, 100)
Dim typ164(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
ReDim Preserve typ164(UBound(typ164) + 1)
typ164(UBound(typ164)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ164))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ164).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc8, 963, 1, 963, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
EmitOpIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
EmitOpIL.MarkSequencePoint(doc8, 964, 1, 964, 100)
EmitOpIL.Emit(OpCodes.Br, cont119)
EmitOpIL.MarkLabel(fa119)
EmitOpIL.MarkSequencePoint(doc8, 965, 1, 965, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, OpCodeSuppFlg)
Typ = OpCodeSuppFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa120 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru120 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont120 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru120)
EmitOpIL.Emit(OpCodes.Br, fa120)
EmitOpIL.MarkLabel(tru120)
EmitOpIL.MarkSequencePoint(doc8, 966, 1, 966, 100)
Dim typ166(-1) As Type
EmitOpIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ166(UBound(typ166) + 1)
typ166(UBound(typ166)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitMul", typ166))
Typ = GetType(ILEmitter).GetMethod("EmitMul", typ166).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc8, 967, 1, 967, 100)
EmitOpIL.Emit(OpCodes.Br, cont120)
EmitOpIL.MarkLabel(fa120)
EmitOpIL.Emit(OpCodes.Br, cont120)
EmitOpIL.MarkLabel(cont120)
EmitOpIL.MarkSequencePoint(doc8, 968, 1, 968, 100)
EmitOpIL.Emit(OpCodes.Br, cont119)
EmitOpIL.MarkLabel(cont119)
EmitOpIL.MarkSequencePoint(doc8, 969, 1, 969, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc8, 970, 1, 970, 100)
EmitOpIL.Emit(OpCodes.Br, cont118)
EmitOpIL.MarkLabel(fa118)
EmitOpIL.Emit(OpCodes.Br, cont118)
EmitOpIL.MarkLabel(cont118)
EmitOpIL.MarkSequencePoint(doc8, 972, 1, 972, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(SubOp))
Dim typ167 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ167))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ167).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc8, 973, 1, 973, 100)
Dim typ168(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ168(UBound(typ168) + 1)
typ168(UBound(typ168)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ168))
Typ = Typ03.GetMethod("IsInstanceOfType", typ168).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc8, 975, 1, 975, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa121 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru121 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont121 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru121)
EmitOpIL.Emit(OpCodes.Br, fa121)
EmitOpIL.MarkLabel(tru121)
EmitOpIL.MarkSequencePoint(doc8, 976, 1, 976, 100)
Dim typ169(-1) As Type
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ169(UBound(typ169) + 1)
typ169(UBound(typ169)) = Typ
EmitOpIL.Emit(OpCodes.Ldstr, "op_Subtraction")
Typ = GetType(System.String)
ReDim Preserve typ169(UBound(typ169) + 1)
typ169(UBound(typ169)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ169(UBound(typ169) + 1)
typ169(UBound(typ169)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, RightOp)
Typ = RightOp.FieldType
ReDim Preserve typ169(UBound(typ169) + 1)
typ169(UBound(typ169)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadBinOp", typ169))
Typ = GetType(Loader).GetMethod("LoadBinOp", typ169).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 2)
EmitOpIL.MarkSequencePoint(doc8, 977, 1, 977, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
EmitOpIL.Emit(OpCodes.Ldnull)
Dim fa122 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru122 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont122 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, fa122)
EmitOpIL.Emit(OpCodes.Br, tru122)
EmitOpIL.MarkLabel(tru122)
EmitOpIL.MarkSequencePoint(doc8, 978, 1, 978, 100)
Dim typ170(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
ReDim Preserve typ170(UBound(typ170) + 1)
typ170(UBound(typ170)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ170))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ170).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc8, 979, 1, 979, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
EmitOpIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
EmitOpIL.MarkSequencePoint(doc8, 980, 1, 980, 100)
EmitOpIL.Emit(OpCodes.Br, cont122)
EmitOpIL.MarkLabel(fa122)
EmitOpIL.MarkSequencePoint(doc8, 981, 1, 981, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, OpCodeSuppFlg)
Typ = OpCodeSuppFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa123 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru123 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont123 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru123)
EmitOpIL.Emit(OpCodes.Br, fa123)
EmitOpIL.MarkLabel(tru123)
EmitOpIL.MarkSequencePoint(doc8, 982, 1, 982, 100)
Dim typ172(-1) As Type
EmitOpIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ172(UBound(typ172) + 1)
typ172(UBound(typ172)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitSub", typ172))
Typ = GetType(ILEmitter).GetMethod("EmitSub", typ172).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc8, 983, 1, 983, 100)
EmitOpIL.Emit(OpCodes.Br, cont123)
EmitOpIL.MarkLabel(fa123)
EmitOpIL.Emit(OpCodes.Br, cont123)
EmitOpIL.MarkLabel(cont123)
EmitOpIL.MarkSequencePoint(doc8, 984, 1, 984, 100)
EmitOpIL.Emit(OpCodes.Br, cont122)
EmitOpIL.MarkLabel(cont122)
EmitOpIL.MarkSequencePoint(doc8, 985, 1, 985, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc8, 986, 1, 986, 100)
EmitOpIL.Emit(OpCodes.Br, cont121)
EmitOpIL.MarkLabel(fa121)
EmitOpIL.Emit(OpCodes.Br, cont121)
EmitOpIL.MarkLabel(cont121)
EmitOpIL.MarkSequencePoint(doc8, 988, 1, 988, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(DivOp))
Dim typ173 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ173))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ173).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc8, 989, 1, 989, 100)
Dim typ174(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ174(UBound(typ174) + 1)
typ174(UBound(typ174)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ174))
Typ = Typ03.GetMethod("IsInstanceOfType", typ174).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc8, 991, 1, 991, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa124 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru124 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont124 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru124)
EmitOpIL.Emit(OpCodes.Br, fa124)
EmitOpIL.MarkLabel(tru124)
EmitOpIL.MarkSequencePoint(doc8, 992, 1, 992, 100)
Dim typ175(-1) As Type
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ175(UBound(typ175) + 1)
typ175(UBound(typ175)) = Typ
EmitOpIL.Emit(OpCodes.Ldstr, "op_Division")
Typ = GetType(System.String)
ReDim Preserve typ175(UBound(typ175) + 1)
typ175(UBound(typ175)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ175(UBound(typ175) + 1)
typ175(UBound(typ175)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, RightOp)
Typ = RightOp.FieldType
ReDim Preserve typ175(UBound(typ175) + 1)
typ175(UBound(typ175)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadBinOp", typ175))
Typ = GetType(Loader).GetMethod("LoadBinOp", typ175).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 2)
EmitOpIL.MarkSequencePoint(doc8, 993, 1, 993, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
EmitOpIL.Emit(OpCodes.Ldnull)
Dim fa125 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru125 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont125 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, fa125)
EmitOpIL.Emit(OpCodes.Br, tru125)
EmitOpIL.MarkLabel(tru125)
EmitOpIL.MarkSequencePoint(doc8, 994, 1, 994, 100)
Dim typ176(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
ReDim Preserve typ176(UBound(typ176) + 1)
typ176(UBound(typ176)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ176))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ176).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc8, 995, 1, 995, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
EmitOpIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
EmitOpIL.MarkSequencePoint(doc8, 996, 1, 996, 100)
EmitOpIL.Emit(OpCodes.Br, cont125)
EmitOpIL.MarkLabel(fa125)
EmitOpIL.MarkSequencePoint(doc8, 997, 1, 997, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, OpCodeSuppFlg)
Typ = OpCodeSuppFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa126 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru126 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont126 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru126)
EmitOpIL.Emit(OpCodes.Br, fa126)
EmitOpIL.MarkLabel(tru126)
EmitOpIL.MarkSequencePoint(doc8, 998, 1, 998, 100)
Dim typ178(-1) As Type
EmitOpIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ178(UBound(typ178) + 1)
typ178(UBound(typ178)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitDiv", typ178))
Typ = GetType(ILEmitter).GetMethod("EmitDiv", typ178).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc8, 999, 1, 999, 100)
EmitOpIL.Emit(OpCodes.Br, cont126)
EmitOpIL.MarkLabel(fa126)
EmitOpIL.Emit(OpCodes.Br, cont126)
EmitOpIL.MarkLabel(cont126)
EmitOpIL.MarkSequencePoint(doc8, 1000, 1, 1000, 100)
EmitOpIL.Emit(OpCodes.Br, cont125)
EmitOpIL.MarkLabel(cont125)
EmitOpIL.MarkSequencePoint(doc8, 1001, 1, 1001, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc8, 1002, 1, 1002, 100)
EmitOpIL.Emit(OpCodes.Br, cont124)
EmitOpIL.MarkLabel(fa124)
EmitOpIL.Emit(OpCodes.Br, cont124)
EmitOpIL.MarkLabel(cont124)
EmitOpIL.MarkSequencePoint(doc8, 1004, 1, 1004, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(ModOp))
Dim typ179 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ179))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ179).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc8, 1005, 1, 1005, 100)
Dim typ180(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ180(UBound(typ180) + 1)
typ180(UBound(typ180)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ180))
Typ = Typ03.GetMethod("IsInstanceOfType", typ180).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc8, 1007, 1, 1007, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa127 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru127 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont127 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru127)
EmitOpIL.Emit(OpCodes.Br, fa127)
EmitOpIL.MarkLabel(tru127)
EmitOpIL.MarkSequencePoint(doc8, 1008, 1, 1008, 100)
Dim typ181(-1) As Type
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ181(UBound(typ181) + 1)
typ181(UBound(typ181)) = Typ
EmitOpIL.Emit(OpCodes.Ldstr, "op_Modulus")
Typ = GetType(System.String)
ReDim Preserve typ181(UBound(typ181) + 1)
typ181(UBound(typ181)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ181(UBound(typ181) + 1)
typ181(UBound(typ181)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, RightOp)
Typ = RightOp.FieldType
ReDim Preserve typ181(UBound(typ181) + 1)
typ181(UBound(typ181)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadBinOp", typ181))
Typ = GetType(Loader).GetMethod("LoadBinOp", typ181).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 2)
EmitOpIL.MarkSequencePoint(doc8, 1009, 1, 1009, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
EmitOpIL.Emit(OpCodes.Ldnull)
Dim fa128 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru128 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont128 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, fa128)
EmitOpIL.Emit(OpCodes.Br, tru128)
EmitOpIL.MarkLabel(tru128)
EmitOpIL.MarkSequencePoint(doc8, 1010, 1, 1010, 100)
Dim typ182(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
ReDim Preserve typ182(UBound(typ182) + 1)
typ182(UBound(typ182)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ182))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ182).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc8, 1011, 1, 1011, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
EmitOpIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
EmitOpIL.MarkSequencePoint(doc8, 1012, 1, 1012, 100)
EmitOpIL.Emit(OpCodes.Br, cont128)
EmitOpIL.MarkLabel(fa128)
EmitOpIL.MarkSequencePoint(doc8, 1013, 1, 1013, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, OpCodeSuppFlg)
Typ = OpCodeSuppFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa129 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru129 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont129 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru129)
EmitOpIL.Emit(OpCodes.Br, fa129)
EmitOpIL.MarkLabel(tru129)
EmitOpIL.MarkSequencePoint(doc8, 1014, 1, 1014, 100)
Dim typ184(-1) As Type
EmitOpIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ184(UBound(typ184) + 1)
typ184(UBound(typ184)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitRem", typ184))
Typ = GetType(ILEmitter).GetMethod("EmitRem", typ184).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc8, 1015, 1, 1015, 100)
EmitOpIL.Emit(OpCodes.Br, cont129)
EmitOpIL.MarkLabel(fa129)
EmitOpIL.Emit(OpCodes.Br, cont129)
EmitOpIL.MarkLabel(cont129)
EmitOpIL.MarkSequencePoint(doc8, 1016, 1, 1016, 100)
EmitOpIL.Emit(OpCodes.Br, cont128)
EmitOpIL.MarkLabel(cont128)
EmitOpIL.MarkSequencePoint(doc8, 1017, 1, 1017, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc8, 1018, 1, 1018, 100)
EmitOpIL.Emit(OpCodes.Br, cont127)
EmitOpIL.MarkLabel(fa127)
EmitOpIL.Emit(OpCodes.Br, cont127)
EmitOpIL.MarkLabel(cont127)
EmitOpIL.MarkSequencePoint(doc8, 1020, 1, 1020, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(OrOp))
Dim typ185 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ185))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ185).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc8, 1021, 1, 1021, 100)
Dim typ186(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ186(UBound(typ186) + 1)
typ186(UBound(typ186)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ186))
Typ = Typ03.GetMethod("IsInstanceOfType", typ186).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc8, 1023, 1, 1023, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa130 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru130 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont130 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru130)
EmitOpIL.Emit(OpCodes.Br, fa130)
EmitOpIL.MarkLabel(tru130)
EmitOpIL.MarkSequencePoint(doc8, 1024, 1, 1024, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitOr", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitOr", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc8, 1025, 1, 1025, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc8, 1026, 1, 1026, 100)
EmitOpIL.Emit(OpCodes.Br, cont130)
EmitOpIL.MarkLabel(fa130)
EmitOpIL.Emit(OpCodes.Br, cont130)
EmitOpIL.MarkLabel(cont130)
EmitOpIL.MarkSequencePoint(doc8, 1028, 1, 1028, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(AndOp))
Dim typ187 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ187))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ187).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc8, 1029, 1, 1029, 100)
Dim typ188(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ188(UBound(typ188) + 1)
typ188(UBound(typ188)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ188))
Typ = Typ03.GetMethod("IsInstanceOfType", typ188).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc8, 1031, 1, 1031, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa131 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru131 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont131 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru131)
EmitOpIL.Emit(OpCodes.Br, fa131)
EmitOpIL.MarkLabel(tru131)
EmitOpIL.MarkSequencePoint(doc8, 1032, 1, 1032, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitAnd", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitAnd", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc8, 1033, 1, 1033, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc8, 1034, 1, 1034, 100)
EmitOpIL.Emit(OpCodes.Br, cont131)
EmitOpIL.MarkLabel(fa131)
EmitOpIL.Emit(OpCodes.Br, cont131)
EmitOpIL.MarkLabel(cont131)
EmitOpIL.MarkSequencePoint(doc8, 1036, 1, 1036, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(OrOp))
Dim typ189 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ189))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ189).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc8, 1037, 1, 1037, 100)
Dim typ190(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ190(UBound(typ190) + 1)
typ190(UBound(typ190)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ190))
Typ = Typ03.GetMethod("IsInstanceOfType", typ190).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc8, 1039, 1, 1039, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa132 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru132 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont132 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru132)
EmitOpIL.Emit(OpCodes.Br, fa132)
EmitOpIL.MarkLabel(tru132)
EmitOpIL.MarkSequencePoint(doc8, 1040, 1, 1040, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitOr", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitOr", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc8, 1041, 1, 1041, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc8, 1042, 1, 1042, 100)
EmitOpIL.Emit(OpCodes.Br, cont132)
EmitOpIL.MarkLabel(fa132)
EmitOpIL.Emit(OpCodes.Br, cont132)
EmitOpIL.MarkLabel(cont132)
EmitOpIL.MarkSequencePoint(doc8, 1044, 1, 1044, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(XorOp))
Dim typ191 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ191))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ191).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc8, 1045, 1, 1045, 100)
Dim typ192(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ192(UBound(typ192) + 1)
typ192(UBound(typ192)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ192))
Typ = Typ03.GetMethod("IsInstanceOfType", typ192).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc8, 1047, 1, 1047, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa133 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru133 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont133 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru133)
EmitOpIL.Emit(OpCodes.Br, fa133)
EmitOpIL.MarkLabel(tru133)
EmitOpIL.MarkSequencePoint(doc8, 1048, 1, 1048, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitXor", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitXor", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc8, 1049, 1, 1049, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc8, 1050, 1, 1050, 100)
EmitOpIL.Emit(OpCodes.Br, cont133)
EmitOpIL.MarkLabel(fa133)
EmitOpIL.Emit(OpCodes.Br, cont133)
EmitOpIL.MarkLabel(cont133)
EmitOpIL.MarkSequencePoint(doc8, 1052, 1, 1052, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(NandOp))
Dim typ193 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ193))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ193).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc8, 1053, 1, 1053, 100)
Dim typ194(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ194(UBound(typ194) + 1)
typ194(UBound(typ194)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ194))
Typ = Typ03.GetMethod("IsInstanceOfType", typ194).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc8, 1055, 1, 1055, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa134 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru134 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont134 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru134)
EmitOpIL.Emit(OpCodes.Br, fa134)
EmitOpIL.MarkLabel(tru134)
EmitOpIL.MarkSequencePoint(doc8, 1056, 1, 1056, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitNand", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitNand", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc8, 1057, 1, 1057, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc8, 1058, 1, 1058, 100)
EmitOpIL.Emit(OpCodes.Br, cont134)
EmitOpIL.MarkLabel(fa134)
EmitOpIL.Emit(OpCodes.Br, cont134)
EmitOpIL.MarkLabel(cont134)
EmitOpIL.MarkSequencePoint(doc8, 1060, 1, 1060, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(NorOp))
Dim typ195 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ195))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ195).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc8, 1061, 1, 1061, 100)
Dim typ196(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ196(UBound(typ196) + 1)
typ196(UBound(typ196)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ196))
Typ = Typ03.GetMethod("IsInstanceOfType", typ196).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc8, 1063, 1, 1063, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa135 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru135 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont135 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru135)
EmitOpIL.Emit(OpCodes.Br, fa135)
EmitOpIL.MarkLabel(tru135)
EmitOpIL.MarkSequencePoint(doc8, 1064, 1, 1064, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitNor", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitNor", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc8, 1065, 1, 1065, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc8, 1066, 1, 1066, 100)
EmitOpIL.Emit(OpCodes.Br, cont135)
EmitOpIL.MarkLabel(fa135)
EmitOpIL.Emit(OpCodes.Br, cont135)
EmitOpIL.MarkLabel(cont135)
EmitOpIL.MarkSequencePoint(doc8, 1068, 1, 1068, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(XnorOp))
Dim typ197 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ197))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ197).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc8, 1069, 1, 1069, 100)
Dim typ198(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ198(UBound(typ198) + 1)
typ198(UBound(typ198)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ198))
Typ = Typ03.GetMethod("IsInstanceOfType", typ198).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc8, 1071, 1, 1071, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa136 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru136 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont136 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru136)
EmitOpIL.Emit(OpCodes.Br, fa136)
EmitOpIL.MarkLabel(tru136)
EmitOpIL.MarkSequencePoint(doc8, 1072, 1, 1072, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitXnor", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitXnor", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc8, 1073, 1, 1073, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc8, 1074, 1, 1074, 100)
EmitOpIL.Emit(OpCodes.Br, cont136)
EmitOpIL.MarkLabel(fa136)
EmitOpIL.Emit(OpCodes.Br, cont136)
EmitOpIL.MarkLabel(cont136)
EmitOpIL.MarkSequencePoint(doc8, 1076, 1, 1076, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(GtOp))
Dim typ199 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ199))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ199).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc8, 1077, 1, 1077, 100)
Dim typ200(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ200(UBound(typ200) + 1)
typ200(UBound(typ200)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ200))
Typ = Typ03.GetMethod("IsInstanceOfType", typ200).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc8, 1079, 1, 1079, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa137 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru137 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont137 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru137)
EmitOpIL.Emit(OpCodes.Br, fa137)
EmitOpIL.MarkLabel(tru137)
EmitOpIL.MarkSequencePoint(doc8, 1080, 1, 1080, 100)
Dim typ201(-1) As Type
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ201(UBound(typ201) + 1)
typ201(UBound(typ201)) = Typ
EmitOpIL.Emit(OpCodes.Ldstr, "op_GreaterThan")
Typ = GetType(System.String)
ReDim Preserve typ201(UBound(typ201) + 1)
typ201(UBound(typ201)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ201(UBound(typ201) + 1)
typ201(UBound(typ201)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, RightOp)
Typ = RightOp.FieldType
ReDim Preserve typ201(UBound(typ201) + 1)
typ201(UBound(typ201)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadBinOp", typ201))
Typ = GetType(Loader).GetMethod("LoadBinOp", typ201).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 2)
EmitOpIL.MarkSequencePoint(doc8, 1081, 1, 1081, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
EmitOpIL.Emit(OpCodes.Ldnull)
Dim fa138 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru138 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont138 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, fa138)
EmitOpIL.Emit(OpCodes.Br, tru138)
EmitOpIL.MarkLabel(tru138)
EmitOpIL.MarkSequencePoint(doc8, 1082, 1, 1082, 100)
Dim typ202(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
ReDim Preserve typ202(UBound(typ202) + 1)
typ202(UBound(typ202)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ202))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ202).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc8, 1083, 1, 1083, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
EmitOpIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
EmitOpIL.MarkSequencePoint(doc8, 1084, 1, 1084, 100)
EmitOpIL.Emit(OpCodes.Br, cont138)
EmitOpIL.MarkLabel(fa138)
EmitOpIL.MarkSequencePoint(doc8, 1085, 1, 1085, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, OpCodeSuppFlg)
Typ = OpCodeSuppFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa139 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru139 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont139 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru139)
EmitOpIL.Emit(OpCodes.Br, fa139)
EmitOpIL.MarkLabel(tru139)
EmitOpIL.MarkSequencePoint(doc8, 1086, 1, 1086, 100)
Dim typ204(-1) As Type
EmitOpIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ204(UBound(typ204) + 1)
typ204(UBound(typ204)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCgt", typ204))
Typ = GetType(ILEmitter).GetMethod("EmitCgt", typ204).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc8, 1087, 1, 1087, 100)
EmitOpIL.Emit(OpCodes.Br, cont139)
EmitOpIL.MarkLabel(fa139)
EmitOpIL.Emit(OpCodes.Br, cont139)
EmitOpIL.MarkLabel(cont139)
EmitOpIL.MarkSequencePoint(doc8, 1088, 1, 1088, 100)
EmitOpIL.Emit(OpCodes.Br, cont138)
EmitOpIL.MarkLabel(cont138)
EmitOpIL.MarkSequencePoint(doc8, 1089, 1, 1089, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc8, 1090, 1, 1090, 100)
EmitOpIL.Emit(OpCodes.Br, cont137)
EmitOpIL.MarkLabel(fa137)
EmitOpIL.Emit(OpCodes.Br, cont137)
EmitOpIL.MarkLabel(cont137)
EmitOpIL.MarkSequencePoint(doc8, 1092, 1, 1092, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(LtOp))
Dim typ205 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ205))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ205).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc8, 1093, 1, 1093, 100)
Dim typ206(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ206(UBound(typ206) + 1)
typ206(UBound(typ206)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ206))
Typ = Typ03.GetMethod("IsInstanceOfType", typ206).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc8, 1095, 1, 1095, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa140 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru140 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont140 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru140)
EmitOpIL.Emit(OpCodes.Br, fa140)
EmitOpIL.MarkLabel(tru140)
EmitOpIL.MarkSequencePoint(doc8, 1096, 1, 1096, 100)
Dim typ207(-1) As Type
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ207(UBound(typ207) + 1)
typ207(UBound(typ207)) = Typ
EmitOpIL.Emit(OpCodes.Ldstr, "op_LessThan")
Typ = GetType(System.String)
ReDim Preserve typ207(UBound(typ207) + 1)
typ207(UBound(typ207)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ207(UBound(typ207) + 1)
typ207(UBound(typ207)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, RightOp)
Typ = RightOp.FieldType
ReDim Preserve typ207(UBound(typ207) + 1)
typ207(UBound(typ207)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadBinOp", typ207))
Typ = GetType(Loader).GetMethod("LoadBinOp", typ207).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 2)
EmitOpIL.MarkSequencePoint(doc8, 1097, 1, 1097, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
EmitOpIL.Emit(OpCodes.Ldnull)
Dim fa141 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru141 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont141 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, fa141)
EmitOpIL.Emit(OpCodes.Br, tru141)
EmitOpIL.MarkLabel(tru141)
EmitOpIL.MarkSequencePoint(doc8, 1098, 1, 1098, 100)
Dim typ208(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
ReDim Preserve typ208(UBound(typ208) + 1)
typ208(UBound(typ208)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ208))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ208).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc8, 1099, 1, 1099, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
EmitOpIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
EmitOpIL.MarkSequencePoint(doc8, 1100, 1, 1100, 100)
EmitOpIL.Emit(OpCodes.Br, cont141)
EmitOpIL.MarkLabel(fa141)
EmitOpIL.MarkSequencePoint(doc8, 1101, 1, 1101, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, OpCodeSuppFlg)
Typ = OpCodeSuppFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa142 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru142 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont142 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru142)
EmitOpIL.Emit(OpCodes.Br, fa142)
EmitOpIL.MarkLabel(tru142)
EmitOpIL.MarkSequencePoint(doc8, 1102, 1, 1102, 100)
Dim typ210(-1) As Type
EmitOpIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ210(UBound(typ210) + 1)
typ210(UBound(typ210)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitClt", typ210))
Typ = GetType(ILEmitter).GetMethod("EmitClt", typ210).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc8, 1103, 1, 1103, 100)
EmitOpIL.Emit(OpCodes.Br, cont142)
EmitOpIL.MarkLabel(fa142)
EmitOpIL.Emit(OpCodes.Br, cont142)
EmitOpIL.MarkLabel(cont142)
EmitOpIL.MarkSequencePoint(doc8, 1104, 1, 1104, 100)
EmitOpIL.Emit(OpCodes.Br, cont141)
EmitOpIL.MarkLabel(cont141)
EmitOpIL.MarkSequencePoint(doc8, 1105, 1, 1105, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc8, 1106, 1, 1106, 100)
EmitOpIL.Emit(OpCodes.Br, cont140)
EmitOpIL.MarkLabel(fa140)
EmitOpIL.Emit(OpCodes.Br, cont140)
EmitOpIL.MarkLabel(cont140)
EmitOpIL.MarkSequencePoint(doc8, 1108, 1, 1108, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(GeOp))
Dim typ211 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ211))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ211).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc8, 1109, 1, 1109, 100)
Dim typ212(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ212(UBound(typ212) + 1)
typ212(UBound(typ212)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ212))
Typ = Typ03.GetMethod("IsInstanceOfType", typ212).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc8, 1111, 1, 1111, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa143 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru143 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont143 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru143)
EmitOpIL.Emit(OpCodes.Br, fa143)
EmitOpIL.MarkLabel(tru143)
EmitOpIL.MarkSequencePoint(doc8, 1112, 1, 1112, 100)
Dim typ213(-1) As Type
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ213(UBound(typ213) + 1)
typ213(UBound(typ213)) = Typ
EmitOpIL.Emit(OpCodes.Ldstr, "op_GreaterThanOrEqual")
Typ = GetType(System.String)
ReDim Preserve typ213(UBound(typ213) + 1)
typ213(UBound(typ213)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ213(UBound(typ213) + 1)
typ213(UBound(typ213)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, RightOp)
Typ = RightOp.FieldType
ReDim Preserve typ213(UBound(typ213) + 1)
typ213(UBound(typ213)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadBinOp", typ213))
Typ = GetType(Loader).GetMethod("LoadBinOp", typ213).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 2)
EmitOpIL.MarkSequencePoint(doc8, 1113, 1, 1113, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
EmitOpIL.Emit(OpCodes.Ldnull)
Dim fa144 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru144 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont144 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, fa144)
EmitOpIL.Emit(OpCodes.Br, tru144)
EmitOpIL.MarkLabel(tru144)
EmitOpIL.MarkSequencePoint(doc8, 1114, 1, 1114, 100)
Dim typ214(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
ReDim Preserve typ214(UBound(typ214) + 1)
typ214(UBound(typ214)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ214))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ214).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc8, 1115, 1, 1115, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
EmitOpIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
EmitOpIL.MarkSequencePoint(doc8, 1116, 1, 1116, 100)
EmitOpIL.Emit(OpCodes.Br, cont144)
EmitOpIL.MarkLabel(fa144)
EmitOpIL.MarkSequencePoint(doc8, 1117, 1, 1117, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, OpCodeSuppFlg)
Typ = OpCodeSuppFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa145 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru145 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont145 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru145)
EmitOpIL.Emit(OpCodes.Br, fa145)
EmitOpIL.MarkLabel(tru145)
EmitOpIL.MarkSequencePoint(doc8, 1118, 1, 1118, 100)
Dim typ216(-1) As Type
EmitOpIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ216(UBound(typ216) + 1)
typ216(UBound(typ216)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCge", typ216))
Typ = GetType(ILEmitter).GetMethod("EmitCge", typ216).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc8, 1119, 1, 1119, 100)
EmitOpIL.Emit(OpCodes.Br, cont145)
EmitOpIL.MarkLabel(fa145)
EmitOpIL.Emit(OpCodes.Br, cont145)
EmitOpIL.MarkLabel(cont145)
EmitOpIL.MarkSequencePoint(doc8, 1120, 1, 1120, 100)
EmitOpIL.Emit(OpCodes.Br, cont144)
EmitOpIL.MarkLabel(cont144)
EmitOpIL.MarkSequencePoint(doc8, 1121, 1, 1121, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc8, 1122, 1, 1122, 100)
EmitOpIL.Emit(OpCodes.Br, cont143)
EmitOpIL.MarkLabel(fa143)
EmitOpIL.Emit(OpCodes.Br, cont143)
EmitOpIL.MarkLabel(cont143)
EmitOpIL.MarkSequencePoint(doc8, 1124, 1, 1124, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(LeOp))
Dim typ217 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ217))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ217).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc8, 1125, 1, 1125, 100)
Dim typ218(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ218(UBound(typ218) + 1)
typ218(UBound(typ218)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ218))
Typ = Typ03.GetMethod("IsInstanceOfType", typ218).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc8, 1127, 1, 1127, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa146 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru146 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont146 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru146)
EmitOpIL.Emit(OpCodes.Br, fa146)
EmitOpIL.MarkLabel(tru146)
EmitOpIL.MarkSequencePoint(doc8, 1128, 1, 1128, 100)
Dim typ219(-1) As Type
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ219(UBound(typ219) + 1)
typ219(UBound(typ219)) = Typ
EmitOpIL.Emit(OpCodes.Ldstr, "op_LessThanOrEqual")
Typ = GetType(System.String)
ReDim Preserve typ219(UBound(typ219) + 1)
typ219(UBound(typ219)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ219(UBound(typ219) + 1)
typ219(UBound(typ219)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, RightOp)
Typ = RightOp.FieldType
ReDim Preserve typ219(UBound(typ219) + 1)
typ219(UBound(typ219)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadBinOp", typ219))
Typ = GetType(Loader).GetMethod("LoadBinOp", typ219).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 2)
EmitOpIL.MarkSequencePoint(doc8, 1129, 1, 1129, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
EmitOpIL.Emit(OpCodes.Ldnull)
Dim fa147 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru147 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont147 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, fa147)
EmitOpIL.Emit(OpCodes.Br, tru147)
EmitOpIL.MarkLabel(tru147)
EmitOpIL.MarkSequencePoint(doc8, 1130, 1, 1130, 100)
Dim typ220(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
ReDim Preserve typ220(UBound(typ220) + 1)
typ220(UBound(typ220)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ220))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ220).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc8, 1131, 1, 1131, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
EmitOpIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
EmitOpIL.MarkSequencePoint(doc8, 1132, 1, 1132, 100)
EmitOpIL.Emit(OpCodes.Br, cont147)
EmitOpIL.MarkLabel(fa147)
EmitOpIL.MarkSequencePoint(doc8, 1133, 1, 1133, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, OpCodeSuppFlg)
Typ = OpCodeSuppFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa148 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru148 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont148 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru148)
EmitOpIL.Emit(OpCodes.Br, fa148)
EmitOpIL.MarkLabel(tru148)
EmitOpIL.MarkSequencePoint(doc8, 1134, 1, 1134, 100)
Dim typ222(-1) As Type
EmitOpIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ222(UBound(typ222) + 1)
typ222(UBound(typ222)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCle", typ222))
Typ = GetType(ILEmitter).GetMethod("EmitCle", typ222).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc8, 1135, 1, 1135, 100)
EmitOpIL.Emit(OpCodes.Br, cont148)
EmitOpIL.MarkLabel(fa148)
EmitOpIL.Emit(OpCodes.Br, cont148)
EmitOpIL.MarkLabel(cont148)
EmitOpIL.MarkSequencePoint(doc8, 1136, 1, 1136, 100)
EmitOpIL.Emit(OpCodes.Br, cont147)
EmitOpIL.MarkLabel(cont147)
EmitOpIL.MarkSequencePoint(doc8, 1137, 1, 1137, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc8, 1138, 1, 1138, 100)
EmitOpIL.Emit(OpCodes.Br, cont146)
EmitOpIL.MarkLabel(fa146)
EmitOpIL.Emit(OpCodes.Br, cont146)
EmitOpIL.MarkLabel(cont146)
EmitOpIL.MarkSequencePoint(doc8, 1140, 1, 1140, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(EqOp))
Dim typ223 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ223))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ223).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc8, 1141, 1, 1141, 100)
Dim typ224(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ224(UBound(typ224) + 1)
typ224(UBound(typ224)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ224))
Typ = Typ03.GetMethod("IsInstanceOfType", typ224).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc8, 1143, 1, 1143, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa149 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru149 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont149 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru149)
EmitOpIL.Emit(OpCodes.Br, fa149)
EmitOpIL.MarkLabel(tru149)
EmitOpIL.MarkSequencePoint(doc8, 1144, 1, 1144, 100)
Dim typ225(-1) As Type
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ225(UBound(typ225) + 1)
typ225(UBound(typ225)) = Typ
EmitOpIL.Emit(OpCodes.Ldstr, "op_Equality")
Typ = GetType(System.String)
ReDim Preserve typ225(UBound(typ225) + 1)
typ225(UBound(typ225)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ225(UBound(typ225) + 1)
typ225(UBound(typ225)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, RightOp)
Typ = RightOp.FieldType
ReDim Preserve typ225(UBound(typ225) + 1)
typ225(UBound(typ225)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadBinOp", typ225))
Typ = GetType(Loader).GetMethod("LoadBinOp", typ225).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 2)
EmitOpIL.MarkSequencePoint(doc8, 1145, 1, 1145, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
EmitOpIL.Emit(OpCodes.Ldnull)
Dim fa150 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru150 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont150 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, fa150)
EmitOpIL.Emit(OpCodes.Br, tru150)
EmitOpIL.MarkLabel(tru150)
EmitOpIL.MarkSequencePoint(doc8, 1146, 1, 1146, 100)
Dim typ226(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
ReDim Preserve typ226(UBound(typ226) + 1)
typ226(UBound(typ226)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ226))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ226).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc8, 1147, 1, 1147, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
EmitOpIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
EmitOpIL.MarkSequencePoint(doc8, 1148, 1, 1148, 100)
EmitOpIL.Emit(OpCodes.Br, cont150)
EmitOpIL.MarkLabel(fa150)
EmitOpIL.MarkSequencePoint(doc8, 1149, 1, 1149, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, StringFlg)
Typ = StringFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa151 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru151 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont151 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru151)
EmitOpIL.Emit(OpCodes.Br, fa151)
EmitOpIL.MarkLabel(tru151)
EmitOpIL.MarkSequencePoint(doc8, 1150, 1, 1150, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitStrCeq", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitStrCeq", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc8, 1151, 1, 1151, 100)
EmitOpIL.Emit(OpCodes.Br, cont151)
EmitOpIL.MarkLabel(fa151)
EmitOpIL.MarkSequencePoint(doc8, 1152, 1, 1152, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCeq", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitCeq", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc8, 1153, 1, 1153, 100)
EmitOpIL.Emit(OpCodes.Br, cont151)
EmitOpIL.MarkLabel(cont151)
EmitOpIL.MarkSequencePoint(doc8, 1154, 1, 1154, 100)
EmitOpIL.Emit(OpCodes.Br, cont150)
EmitOpIL.MarkLabel(cont150)
EmitOpIL.MarkSequencePoint(doc8, 1155, 1, 1155, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc8, 1156, 1, 1156, 100)
EmitOpIL.Emit(OpCodes.Br, cont149)
EmitOpIL.MarkLabel(fa149)
EmitOpIL.Emit(OpCodes.Br, cont149)
EmitOpIL.MarkLabel(cont149)
EmitOpIL.MarkSequencePoint(doc8, 1158, 1, 1158, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(NeqOp))
Dim typ228 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ228))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ228).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc8, 1159, 1, 1159, 100)
Dim typ229(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ229(UBound(typ229) + 1)
typ229(UBound(typ229)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ229))
Typ = Typ03.GetMethod("IsInstanceOfType", typ229).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc8, 1161, 1, 1161, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa152 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru152 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont152 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru152)
EmitOpIL.Emit(OpCodes.Br, fa152)
EmitOpIL.MarkLabel(tru152)
EmitOpIL.MarkSequencePoint(doc8, 1162, 1, 1162, 100)
Dim typ230(-1) As Type
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ230(UBound(typ230) + 1)
typ230(UBound(typ230)) = Typ
EmitOpIL.Emit(OpCodes.Ldstr, "op_Inequality")
Typ = GetType(System.String)
ReDim Preserve typ230(UBound(typ230) + 1)
typ230(UBound(typ230)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, LeftOp)
Typ = LeftOp.FieldType
ReDim Preserve typ230(UBound(typ230) + 1)
typ230(UBound(typ230)) = Typ
EmitOpIL.Emit(OpCodes.Ldsfld, RightOp)
Typ = RightOp.FieldType
ReDim Preserve typ230(UBound(typ230) + 1)
typ230(UBound(typ230)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadBinOp", typ230))
Typ = GetType(Loader).GetMethod("LoadBinOp", typ230).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 2)
EmitOpIL.MarkSequencePoint(doc8, 1163, 1, 1163, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
EmitOpIL.Emit(OpCodes.Ldnull)
Dim fa153 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru153 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont153 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, fa153)
EmitOpIL.Emit(OpCodes.Br, tru153)
EmitOpIL.MarkLabel(tru153)
EmitOpIL.MarkSequencePoint(doc8, 1164, 1, 1164, 100)
Dim typ231(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
ReDim Preserve typ231(UBound(typ231) + 1)
typ231(UBound(typ231)) = Typ
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ231))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ231).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc8, 1165, 1, 1165, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
EmitOpIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
EmitOpIL.MarkSequencePoint(doc8, 1166, 1, 1166, 100)
EmitOpIL.Emit(OpCodes.Br, cont153)
EmitOpIL.MarkLabel(fa153)
EmitOpIL.MarkSequencePoint(doc8, 1167, 1, 1167, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, StringFlg)
Typ = StringFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa154 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru154 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont154 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru154)
EmitOpIL.Emit(OpCodes.Br, fa154)
EmitOpIL.MarkLabel(tru154)
EmitOpIL.MarkSequencePoint(doc8, 1168, 1, 1168, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitStrCneq", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitStrCneq", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc8, 1169, 1, 1169, 100)
EmitOpIL.Emit(OpCodes.Br, cont154)
EmitOpIL.MarkLabel(fa154)
EmitOpIL.MarkSequencePoint(doc8, 1170, 1, 1170, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCneq", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitCneq", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc8, 1171, 1, 1171, 100)
EmitOpIL.Emit(OpCodes.Br, cont154)
EmitOpIL.MarkLabel(cont154)
EmitOpIL.MarkSequencePoint(doc8, 1172, 1, 1172, 100)
EmitOpIL.Emit(OpCodes.Br, cont153)
EmitOpIL.MarkLabel(cont153)
EmitOpIL.MarkSequencePoint(doc8, 1173, 1, 1173, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc8, 1174, 1, 1174, 100)
EmitOpIL.Emit(OpCodes.Br, cont152)
EmitOpIL.MarkLabel(fa152)
EmitOpIL.Emit(OpCodes.Br, cont152)
EmitOpIL.MarkLabel(cont152)
EmitOpIL.MarkSequencePoint(doc8, 1176, 1, 1176, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(LikeOp))
Dim typ233 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ233))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ233).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc8, 1177, 1, 1177, 100)
Dim typ234(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ234(UBound(typ234) + 1)
typ234(UBound(typ234)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ234))
Typ = Typ03.GetMethod("IsInstanceOfType", typ234).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc8, 1179, 1, 1179, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa155 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru155 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont155 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru155)
EmitOpIL.Emit(OpCodes.Br, fa155)
EmitOpIL.MarkLabel(tru155)
EmitOpIL.MarkSequencePoint(doc8, 1180, 1, 1180, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, StringFlg)
Typ = StringFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa156 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru156 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont156 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru156)
EmitOpIL.Emit(OpCodes.Br, fa156)
EmitOpIL.MarkLabel(tru156)
EmitOpIL.MarkSequencePoint(doc8, 1181, 1, 1181, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLike", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitLike", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc8, 1182, 1, 1182, 100)
EmitOpIL.Emit(OpCodes.Br, cont156)
EmitOpIL.MarkLabel(fa156)
EmitOpIL.Emit(OpCodes.Br, cont156)
EmitOpIL.MarkLabel(cont156)
EmitOpIL.MarkSequencePoint(doc8, 1183, 1, 1183, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc8, 1184, 1, 1184, 100)
EmitOpIL.Emit(OpCodes.Br, cont155)
EmitOpIL.MarkLabel(fa155)
EmitOpIL.Emit(OpCodes.Br, cont155)
EmitOpIL.MarkLabel(cont155)
EmitOpIL.MarkSequencePoint(doc8, 1186, 1, 1186, 100)
EmitOpIL.Emit(OpCodes.Ldtoken, GetType(NLikeOp))
Dim typ235 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ235))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ235).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 0)
EmitOpIL.MarkSequencePoint(doc8, 1187, 1, 1187, 100)
Dim typ236(-1) As Type
EmitOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitOpIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Op)
EmitOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ236(UBound(typ236) + 1)
typ236(UBound(typ236)) = Typ
EmitOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ236))
Typ = Typ03.GetMethod("IsInstanceOfType", typ236).ReturnType
EmitOpIL.Emit(OpCodes.Stloc, 1)
EmitOpIL.MarkSequencePoint(doc8, 1189, 1, 1189, 100)
EmitOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa157 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru157 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont157 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru157)
EmitOpIL.Emit(OpCodes.Br, fa157)
EmitOpIL.MarkLabel(tru157)
EmitOpIL.MarkSequencePoint(doc8, 1191, 1, 1191, 100)
EmitOpIL.Emit(OpCodes.Ldsfld, StringFlg)
Typ = StringFlg.FieldType
EmitOpIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa158 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim tru158 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
Dim cont158 As System.Reflection.Emit.Label = EmitOpIL.DefineLabel()
EmitOpIL.Emit(OpCodes.Beq, tru158)
EmitOpIL.Emit(OpCodes.Br, fa158)
EmitOpIL.MarkLabel(tru158)
EmitOpIL.MarkSequencePoint(doc8, 1192, 1, 1192, 100)
EmitOpIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitNLike", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitNLike", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitOpIL.Emit(OpCodes.Pop)
End If
EmitOpIL.MarkSequencePoint(doc8, 1193, 1, 1193, 100)
EmitOpIL.Emit(OpCodes.Br, cont158)
EmitOpIL.MarkLabel(fa158)
EmitOpIL.Emit(OpCodes.Br, cont158)
EmitOpIL.MarkLabel(cont158)
EmitOpIL.MarkSequencePoint(doc8, 1194, 1, 1194, 100)
EmitOpIL.Emit(OpCodes.Br, label22)
EmitOpIL.MarkSequencePoint(doc8, 1195, 1, 1195, 100)
EmitOpIL.Emit(OpCodes.Br, cont157)
EmitOpIL.MarkLabel(fa157)
EmitOpIL.Emit(OpCodes.Br, cont157)
EmitOpIL.MarkLabel(cont157)
EmitOpIL.MarkSequencePoint(doc8, 1197, 1, 1197, 100)
EmitOpIL.MarkLabel(label22)
EmitOpIL.MarkSequencePoint(doc8, 1198, 1, 1198, 100)
EmitOpIL.Emit(OpCodes.Ret)
Dim typ237(-1) As Type
ReDim Preserve typ237(UBound(typ237) + 1)
typ237(UBound(typ237)) = GetType(System.Int32)
ReDim Preserve typ237(UBound(typ237) + 1)
typ237(UBound(typ237)) = GetType(System.Boolean)
Dim EmitLocLd As MethodBuilder = Helpers.DefineMethod("EmitLocLd", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ237)
Dim EmitLocLdIL As ILGenerator = EmitLocLd.GetILGenerator()
Dim EmitLocLdparam01 As ParameterBuilder = EmitLocLd.DefineParameter(1, ParameterAttributes.None, "ind")
Dim EmitLocLdparam02 As ParameterBuilder = EmitLocLd.DefineParameter(2, ParameterAttributes.None, "locarg")
EmitLocLdIL.MarkSequencePoint(doc8, 1201, 1, 1201, 100)
EmitLocLdIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
EmitLocLdIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa159 As System.Reflection.Emit.Label = EmitLocLdIL.DefineLabel()
Dim tru159 As System.Reflection.Emit.Label = EmitLocLdIL.DefineLabel()
Dim cont159 As System.Reflection.Emit.Label = EmitLocLdIL.DefineLabel()
EmitLocLdIL.Emit(OpCodes.Beq, tru159)
EmitLocLdIL.Emit(OpCodes.Br, fa159)
EmitLocLdIL.MarkLabel(tru159)
EmitLocLdIL.MarkSequencePoint(doc8, 1202, 1, 1202, 100)
Dim typ238(-1) As Type
EmitLocLdIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
ReDim Preserve typ238(UBound(typ238) + 1)
typ238(UBound(typ238)) = Typ
EmitLocLdIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdloc", typ238))
Typ = GetType(ILEmitter).GetMethod("EmitLdloc", typ238).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLocLdIL.Emit(OpCodes.Pop)
End If
EmitLocLdIL.MarkSequencePoint(doc8, 1203, 1, 1203, 100)
EmitLocLdIL.Emit(OpCodes.Br, cont159)
EmitLocLdIL.MarkLabel(fa159)
EmitLocLdIL.MarkSequencePoint(doc8, 1204, 1, 1204, 100)
Dim typ239(-1) As Type
EmitLocLdIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
ReDim Preserve typ239(UBound(typ239) + 1)
typ239(UBound(typ239)) = Typ
EmitLocLdIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdarg", typ239))
Typ = GetType(ILEmitter).GetMethod("EmitLdarg", typ239).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLocLdIL.Emit(OpCodes.Pop)
End If
EmitLocLdIL.MarkSequencePoint(doc8, 1205, 1, 1205, 100)
EmitLocLdIL.Emit(OpCodes.Br, cont159)
EmitLocLdIL.MarkLabel(cont159)
EmitLocLdIL.MarkSequencePoint(doc8, 1206, 1, 1206, 100)
EmitLocLdIL.Emit(OpCodes.Ret)
Dim typ240(-1) As Type
ReDim Preserve typ240(UBound(typ240) + 1)
typ240(UBound(typ240)) = GetType(System.Int32)
ReDim Preserve typ240(UBound(typ240) + 1)
typ240(UBound(typ240)) = GetType(System.Boolean)
Dim EmitLocSt As MethodBuilder = Helpers.DefineMethod("EmitLocSt", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ240)
Dim EmitLocStIL As ILGenerator = EmitLocSt.GetILGenerator()
Dim EmitLocStparam01 As ParameterBuilder = EmitLocSt.DefineParameter(1, ParameterAttributes.None, "ind")
Dim EmitLocStparam02 As ParameterBuilder = EmitLocSt.DefineParameter(2, ParameterAttributes.None, "locarg")
EmitLocStIL.MarkSequencePoint(doc8, 1209, 1, 1209, 100)
EmitLocStIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
EmitLocStIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa160 As System.Reflection.Emit.Label = EmitLocStIL.DefineLabel()
Dim tru160 As System.Reflection.Emit.Label = EmitLocStIL.DefineLabel()
Dim cont160 As System.Reflection.Emit.Label = EmitLocStIL.DefineLabel()
EmitLocStIL.Emit(OpCodes.Beq, tru160)
EmitLocStIL.Emit(OpCodes.Br, fa160)
EmitLocStIL.MarkLabel(tru160)
EmitLocStIL.MarkSequencePoint(doc8, 1210, 1, 1210, 100)
Dim typ241(-1) As Type
EmitLocStIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
ReDim Preserve typ241(UBound(typ241) + 1)
typ241(UBound(typ241)) = Typ
EmitLocStIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitStloc", typ241))
Typ = GetType(ILEmitter).GetMethod("EmitStloc", typ241).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLocStIL.Emit(OpCodes.Pop)
End If
EmitLocStIL.MarkSequencePoint(doc8, 1211, 1, 1211, 100)
EmitLocStIL.Emit(OpCodes.Br, cont160)
EmitLocStIL.MarkLabel(fa160)
EmitLocStIL.MarkSequencePoint(doc8, 1212, 1, 1212, 100)
Dim typ242(-1) As Type
EmitLocStIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Int32)
ReDim Preserve typ242(UBound(typ242) + 1)
typ242(UBound(typ242)) = Typ
EmitLocStIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitStarg", typ242))
Typ = GetType(ILEmitter).GetMethod("EmitStarg", typ242).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitLocStIL.Emit(OpCodes.Pop)
End If
EmitLocStIL.MarkSequencePoint(doc8, 1213, 1, 1213, 100)
EmitLocStIL.Emit(OpCodes.Br, cont160)
EmitLocStIL.MarkLabel(cont160)
EmitLocStIL.MarkSequencePoint(doc8, 1214, 1, 1214, 100)
EmitLocStIL.Emit(OpCodes.Ret)
Dim typ243(-1) As Type
ReDim Preserve typ243(UBound(typ243) + 1)
typ243(UBound(typ243)) = GetType(System.Type)
ReDim Preserve typ243(UBound(typ243) + 1)
typ243(UBound(typ243)) = GetType(System.Type)
Dim EmitConv As MethodBuilder = Helpers.DefineMethod("EmitConv", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ243)
Dim EmitConvIL As ILGenerator = EmitConv.GetILGenerator()
Dim EmitConvparam01 As ParameterBuilder = EmitConv.DefineParameter(1, ParameterAttributes.None, "source")
Dim EmitConvparam02 As ParameterBuilder = EmitConv.DefineParameter(2, ParameterAttributes.None, "sink")
EmitConvIL.MarkSequencePoint(doc8, 1218, 1, 1218, 100)
Dim locbldr168 As LocalBuilder = EmitConvIL.DeclareLocal(GetType(System.Type))
locbldr168.SetLocalSymInfo("typ")
EmitConvIL.MarkSequencePoint(doc8, 1219, 1, 1219, 100)
Dim locbldr169 As LocalBuilder = EmitConvIL.DeclareLocal(GetType(System.Type))
locbldr169.SetLocalSymInfo("convc")
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.Convert))
Dim typ244 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ244))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ244).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 1)
EmitConvIL.MarkSequencePoint(doc8, 1220, 1, 1220, 100)
Dim locbldr170 As LocalBuilder = EmitConvIL.DeclareLocal(GetType(System.Boolean))
locbldr170.SetLocalSymInfo("b")
EmitConvIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc8, 1221, 1, 1221, 100)
Dim locbldr171 As LocalBuilder = EmitConvIL.DeclareLocal(GetType(System.Boolean))
locbldr171.SetLocalSymInfo("b2")
EmitConvIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Stloc, 3)
EmitConvIL.MarkSequencePoint(doc8, 1222, 1, 1222, 100)
Dim locbldr172 As LocalBuilder = EmitConvIL.DeclareLocal(GetType(MethodInfo))
locbldr172.SetLocalSymInfo("m1")
EmitConvIL.MarkSequencePoint(doc8, 1223, 1, 1223, 100)
Dim locbldr173 As LocalBuilder = EmitConvIL.DeclareLocal(GetType(System.Type).MakeArrayType())
locbldr173.SetLocalSymInfo("arr")
EmitConvIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
EmitConvIL.Emit(OpCodes.Conv_U)
EmitConvIL.Emit(OpCodes.Newarr, GetType(System.Type))
EmitConvIL.Emit(OpCodes.Stloc, 5)
EmitConvIL.MarkSequencePoint(doc8, 1225, 1, 1225, 100)
Dim label23 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.MarkSequencePoint(doc8, 1228, 1, 1228, 100)
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsPrimitive", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsPrimitive", Type.EmptyTypes).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc8, 1229, 1, 1229, 100)
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsPrimitive", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsPrimitive", Type.EmptyTypes).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 3)
EmitConvIL.MarkSequencePoint(doc8, 1230, 1, 1230, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.And)
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc8, 1234, 1, 1234, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa161 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru161 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont161 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru161)
EmitConvIL.Emit(OpCodes.Br, fa161)
EmitConvIL.MarkLabel(tru161)
EmitConvIL.MarkSequencePoint(doc8, 1236, 1, 1236, 100)
Dim typ247(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ247(UBound(typ247) + 1)
typ247(UBound(typ247)) = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "op_Implicit")
Typ = GetType(System.String)
ReDim Preserve typ247(UBound(typ247) + 1)
typ247(UBound(typ247)) = Typ
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
ReDim Preserve typ247(UBound(typ247) + 1)
typ247(UBound(typ247)) = Typ
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ247(UBound(typ247) + 1)
typ247(UBound(typ247)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadConvOp", typ247))
Typ = GetType(Loader).GetMethod("LoadConvOp", typ247).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc8, 1237, 1, 1237, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
EmitConvIL.Emit(OpCodes.Ldnull)
Dim fa162 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru162 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont162 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, fa162)
EmitConvIL.Emit(OpCodes.Br, tru162)
EmitConvIL.MarkLabel(tru162)
EmitConvIL.MarkSequencePoint(doc8, 1238, 1, 1238, 100)
Dim typ248(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ248(UBound(typ248) + 1)
typ248(UBound(typ248)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ248))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ248).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc8, 1239, 1, 1239, 100)
EmitConvIL.Emit(OpCodes.Br, label23)
EmitConvIL.MarkSequencePoint(doc8, 1240, 1, 1240, 100)
EmitConvIL.Emit(OpCodes.Br, cont162)
EmitConvIL.MarkLabel(fa162)
EmitConvIL.Emit(OpCodes.Br, cont162)
EmitConvIL.MarkLabel(cont162)
EmitConvIL.MarkSequencePoint(doc8, 1242, 1, 1242, 100)
Dim typ249(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ249(UBound(typ249) + 1)
typ249(UBound(typ249)) = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "op_Explicit")
Typ = GetType(System.String)
ReDim Preserve typ249(UBound(typ249) + 1)
typ249(UBound(typ249)) = Typ
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
ReDim Preserve typ249(UBound(typ249) + 1)
typ249(UBound(typ249)) = Typ
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ249(UBound(typ249) + 1)
typ249(UBound(typ249)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadConvOp", typ249))
Typ = GetType(Loader).GetMethod("LoadConvOp", typ249).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc8, 1243, 1, 1243, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
EmitConvIL.Emit(OpCodes.Ldnull)
Dim fa163 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru163 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont163 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, fa163)
EmitConvIL.Emit(OpCodes.Br, tru163)
EmitConvIL.MarkLabel(tru163)
EmitConvIL.MarkSequencePoint(doc8, 1244, 1, 1244, 100)
Dim typ250(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ250(UBound(typ250) + 1)
typ250(UBound(typ250)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ250))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ250).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc8, 1245, 1, 1245, 100)
EmitConvIL.Emit(OpCodes.Br, label23)
EmitConvIL.MarkSequencePoint(doc8, 1246, 1, 1246, 100)
EmitConvIL.Emit(OpCodes.Br, cont163)
EmitConvIL.MarkLabel(fa163)
EmitConvIL.Emit(OpCodes.Br, cont163)
EmitConvIL.MarkLabel(cont163)
EmitConvIL.MarkSequencePoint(doc8, 1248, 1, 1248, 100)
Dim typ251(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
ReDim Preserve typ251(UBound(typ251) + 1)
typ251(UBound(typ251)) = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "op_Implicit")
Typ = GetType(System.String)
ReDim Preserve typ251(UBound(typ251) + 1)
typ251(UBound(typ251)) = Typ
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
ReDim Preserve typ251(UBound(typ251) + 1)
typ251(UBound(typ251)) = Typ
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ251(UBound(typ251) + 1)
typ251(UBound(typ251)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadConvOp", typ251))
Typ = GetType(Loader).GetMethod("LoadConvOp", typ251).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc8, 1249, 1, 1249, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
EmitConvIL.Emit(OpCodes.Ldnull)
Dim fa164 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru164 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont164 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, fa164)
EmitConvIL.Emit(OpCodes.Br, tru164)
EmitConvIL.MarkLabel(tru164)
EmitConvIL.MarkSequencePoint(doc8, 1250, 1, 1250, 100)
Dim typ252(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ252(UBound(typ252) + 1)
typ252(UBound(typ252)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ252))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ252).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc8, 1251, 1, 1251, 100)
EmitConvIL.Emit(OpCodes.Br, label23)
EmitConvIL.MarkSequencePoint(doc8, 1252, 1, 1252, 100)
EmitConvIL.Emit(OpCodes.Br, cont164)
EmitConvIL.MarkLabel(fa164)
EmitConvIL.Emit(OpCodes.Br, cont164)
EmitConvIL.MarkLabel(cont164)
EmitConvIL.MarkSequencePoint(doc8, 1254, 1, 1254, 100)
Dim typ253(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
ReDim Preserve typ253(UBound(typ253) + 1)
typ253(UBound(typ253)) = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "op_Explicit")
Typ = GetType(System.String)
ReDim Preserve typ253(UBound(typ253) + 1)
typ253(UBound(typ253)) = Typ
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
ReDim Preserve typ253(UBound(typ253) + 1)
typ253(UBound(typ253)) = Typ
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
ReDim Preserve typ253(UBound(typ253) + 1)
typ253(UBound(typ253)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadConvOp", typ253))
Typ = GetType(Loader).GetMethod("LoadConvOp", typ253).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc8, 1255, 1, 1255, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
EmitConvIL.Emit(OpCodes.Ldnull)
Dim fa165 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru165 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont165 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, fa165)
EmitConvIL.Emit(OpCodes.Br, tru165)
EmitConvIL.MarkLabel(tru165)
EmitConvIL.MarkSequencePoint(doc8, 1256, 1, 1256, 100)
Dim typ254(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ254(UBound(typ254) + 1)
typ254(UBound(typ254)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ254))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ254).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc8, 1257, 1, 1257, 100)
EmitConvIL.Emit(OpCodes.Br, label23)
EmitConvIL.MarkSequencePoint(doc8, 1258, 1, 1258, 100)
EmitConvIL.Emit(OpCodes.Br, cont165)
EmitConvIL.MarkLabel(fa165)
EmitConvIL.Emit(OpCodes.Br, cont165)
EmitConvIL.MarkLabel(cont165)
EmitConvIL.MarkSequencePoint(doc8, 1260, 1, 1260, 100)
EmitConvIL.Emit(OpCodes.Br, cont161)
EmitConvIL.MarkLabel(fa161)
EmitConvIL.Emit(OpCodes.Br, cont161)
EmitConvIL.MarkLabel(cont161)
EmitConvIL.MarkSequencePoint(doc8, 1264, 1, 1264, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(IntPtr))
Dim typ255 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ255))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ255).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc8, 1265, 1, 1265, 100)
Dim typ256(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
ReDim Preserve typ256(UBound(typ256) + 1)
typ256(UBound(typ256)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ256))
Typ = Typ03.GetMethod("Equals", typ256).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc8, 1267, 1, 1267, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa166 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru166 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont166 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru166)
EmitConvIL.Emit(OpCodes.Br, fa166)
EmitConvIL.MarkLabel(tru166)
EmitConvIL.MarkSequencePoint(doc8, 1268, 1, 1268, 100)
Dim typ257(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "ToInt64")
Typ = GetType(System.String)
ReDim Preserve typ257(UBound(typ257) + 1)
typ257(UBound(typ257)) = Typ
EmitConvIL.Emit(OpCodes.Ldsfld, GetType(System.Type).GetField("EmptyTypes"))
Typ = GetType(System.Type).GetField("EmptyTypes").FieldType
ReDim Preserve typ257(UBound(typ257) + 1)
typ257(UBound(typ257)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetMethod", typ257))
Typ = Typ03.GetMethod("GetMethod", typ257).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc8, 1269, 1, 1269, 100)
Dim typ258(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ258(UBound(typ258) + 1)
typ258(UBound(typ258)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCallvirt", typ258))
Typ = GetType(ILEmitter).GetMethod("EmitCallvirt", typ258).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc8, 1270, 1, 1270, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.Int64))
Dim typ259 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ259))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ259).ReturnType
EmitConvIL.Emit(OpCodes.Starg, 0)
EmitConvIL.MarkSequencePoint(doc8, 1271, 1, 1271, 100)
EmitConvIL.Emit(OpCodes.Br, cont166)
EmitConvIL.MarkLabel(fa166)
EmitConvIL.Emit(OpCodes.Br, cont166)
EmitConvIL.MarkLabel(cont166)
EmitConvIL.MarkSequencePoint(doc8, 1273, 1, 1273, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.String))
Dim typ260 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ260))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ260).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc8, 1274, 1, 1274, 100)
Dim typ261(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
ReDim Preserve typ261(UBound(typ261) + 1)
typ261(UBound(typ261)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ261))
Typ = Typ03.GetMethod("Equals", typ261).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc8, 1276, 1, 1276, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa167 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru167 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont167 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru167)
EmitConvIL.Emit(OpCodes.Br, fa167)
EmitConvIL.MarkLabel(tru167)
EmitConvIL.MarkSequencePoint(doc8, 1277, 1, 1277, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
EmitConvIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EmitConvIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
EmitConvIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
EmitConvIL.MarkSequencePoint(doc8, 1278, 1, 1278, 100)
Dim typ262(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "ToString")
Typ = GetType(System.String)
ReDim Preserve typ262(UBound(typ262) + 1)
typ262(UBound(typ262)) = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ262(UBound(typ262) + 1)
typ262(UBound(typ262)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetMethod", typ262))
Typ = Typ03.GetMethod("GetMethod", typ262).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc8, 1279, 1, 1279, 100)
Dim typ263(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ263(UBound(typ263) + 1)
typ263(UBound(typ263)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ263))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ263).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc8, 1280, 1, 1280, 100)
EmitConvIL.Emit(OpCodes.Br, label23)
EmitConvIL.MarkSequencePoint(doc8, 1281, 1, 1281, 100)
EmitConvIL.Emit(OpCodes.Br, cont167)
EmitConvIL.MarkLabel(fa167)
EmitConvIL.Emit(OpCodes.Br, cont167)
EmitConvIL.MarkLabel(cont167)
EmitConvIL.MarkSequencePoint(doc8, 1283, 1, 1283, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.Char))
Dim typ264 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ264))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ264).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc8, 1284, 1, 1284, 100)
Dim typ265(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
ReDim Preserve typ265(UBound(typ265) + 1)
typ265(UBound(typ265)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ265))
Typ = Typ03.GetMethod("Equals", typ265).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc8, 1286, 1, 1286, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa168 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru168 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont168 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru168)
EmitConvIL.Emit(OpCodes.Br, fa168)
EmitConvIL.MarkLabel(tru168)
EmitConvIL.MarkSequencePoint(doc8, 1287, 1, 1287, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
EmitConvIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EmitConvIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
EmitConvIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
EmitConvIL.MarkSequencePoint(doc8, 1288, 1, 1288, 100)
Dim typ266(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "ToChar")
Typ = GetType(System.String)
ReDim Preserve typ266(UBound(typ266) + 1)
typ266(UBound(typ266)) = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ266(UBound(typ266) + 1)
typ266(UBound(typ266)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetMethod", typ266))
Typ = Typ03.GetMethod("GetMethod", typ266).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc8, 1289, 1, 1289, 100)
Dim typ267(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ267(UBound(typ267) + 1)
typ267(UBound(typ267)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ267))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ267).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc8, 1290, 1, 1290, 100)
EmitConvIL.Emit(OpCodes.Br, label23)
EmitConvIL.MarkSequencePoint(doc8, 1291, 1, 1291, 100)
EmitConvIL.Emit(OpCodes.Br, cont168)
EmitConvIL.MarkLabel(fa168)
EmitConvIL.Emit(OpCodes.Br, cont168)
EmitConvIL.MarkLabel(cont168)
EmitConvIL.MarkSequencePoint(doc8, 1294, 1, 1294, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.Decimal))
Dim typ268 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ268))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ268).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc8, 1295, 1, 1295, 100)
Dim typ269(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
ReDim Preserve typ269(UBound(typ269) + 1)
typ269(UBound(typ269)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ269))
Typ = Typ03.GetMethod("Equals", typ269).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc8, 1297, 1, 1297, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa169 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru169 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont169 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru169)
EmitConvIL.Emit(OpCodes.Br, fa169)
EmitConvIL.MarkLabel(tru169)
EmitConvIL.MarkSequencePoint(doc8, 1298, 1, 1298, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
EmitConvIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EmitConvIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
EmitConvIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
EmitConvIL.MarkSequencePoint(doc8, 1299, 1, 1299, 100)
Dim typ270(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "ToDecimal")
Typ = GetType(System.String)
ReDim Preserve typ270(UBound(typ270) + 1)
typ270(UBound(typ270)) = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ270(UBound(typ270) + 1)
typ270(UBound(typ270)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetMethod", typ270))
Typ = Typ03.GetMethod("GetMethod", typ270).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc8, 1300, 1, 1300, 100)
Dim typ271(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ271(UBound(typ271) + 1)
typ271(UBound(typ271)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ271))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ271).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc8, 1301, 1, 1301, 100)
EmitConvIL.Emit(OpCodes.Br, label23)
EmitConvIL.MarkSequencePoint(doc8, 1302, 1, 1302, 100)
EmitConvIL.Emit(OpCodes.Br, cont169)
EmitConvIL.MarkLabel(fa169)
EmitConvIL.Emit(OpCodes.Br, cont169)
EmitConvIL.MarkLabel(cont169)
EmitConvIL.MarkSequencePoint(doc8, 1304, 1, 1304, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.Double))
Dim typ272 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ272))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ272).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc8, 1305, 1, 1305, 100)
Dim typ273(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
ReDim Preserve typ273(UBound(typ273) + 1)
typ273(UBound(typ273)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ273))
Typ = Typ03.GetMethod("Equals", typ273).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc8, 1307, 1, 1307, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa170 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru170 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont170 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru170)
EmitConvIL.Emit(OpCodes.Br, fa170)
EmitConvIL.MarkLabel(tru170)
EmitConvIL.MarkSequencePoint(doc8, 1308, 1, 1308, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
EmitConvIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EmitConvIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
EmitConvIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
EmitConvIL.MarkSequencePoint(doc8, 1309, 1, 1309, 100)
Dim typ274(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "ToDouble")
Typ = GetType(System.String)
ReDim Preserve typ274(UBound(typ274) + 1)
typ274(UBound(typ274)) = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ274(UBound(typ274) + 1)
typ274(UBound(typ274)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetMethod", typ274))
Typ = Typ03.GetMethod("GetMethod", typ274).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc8, 1310, 1, 1310, 100)
Dim typ275(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ275(UBound(typ275) + 1)
typ275(UBound(typ275)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ275))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ275).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc8, 1311, 1, 1311, 100)
EmitConvIL.Emit(OpCodes.Br, label23)
EmitConvIL.MarkSequencePoint(doc8, 1312, 1, 1312, 100)
EmitConvIL.Emit(OpCodes.Br, cont170)
EmitConvIL.MarkLabel(fa170)
EmitConvIL.Emit(OpCodes.Br, cont170)
EmitConvIL.MarkLabel(cont170)
EmitConvIL.MarkSequencePoint(doc8, 1314, 1, 1314, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.Single))
Dim typ276 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ276))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ276).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc8, 1315, 1, 1315, 100)
Dim typ277(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
ReDim Preserve typ277(UBound(typ277) + 1)
typ277(UBound(typ277)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ277))
Typ = Typ03.GetMethod("Equals", typ277).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc8, 1317, 1, 1317, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa171 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru171 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont171 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru171)
EmitConvIL.Emit(OpCodes.Br, fa171)
EmitConvIL.MarkLabel(tru171)
EmitConvIL.MarkSequencePoint(doc8, 1318, 1, 1318, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
EmitConvIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EmitConvIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
EmitConvIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
EmitConvIL.MarkSequencePoint(doc8, 1319, 1, 1319, 100)
Dim typ278(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "ToSingle")
Typ = GetType(System.String)
ReDim Preserve typ278(UBound(typ278) + 1)
typ278(UBound(typ278)) = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ278(UBound(typ278) + 1)
typ278(UBound(typ278)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetMethod", typ278))
Typ = Typ03.GetMethod("GetMethod", typ278).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc8, 1320, 1, 1320, 100)
Dim typ279(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ279(UBound(typ279) + 1)
typ279(UBound(typ279)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ279))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ279).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc8, 1321, 1, 1321, 100)
EmitConvIL.Emit(OpCodes.Br, label23)
EmitConvIL.MarkSequencePoint(doc8, 1322, 1, 1322, 100)
EmitConvIL.Emit(OpCodes.Br, cont171)
EmitConvIL.MarkLabel(fa171)
EmitConvIL.Emit(OpCodes.Br, cont171)
EmitConvIL.MarkLabel(cont171)
EmitConvIL.MarkSequencePoint(doc8, 1324, 1, 1324, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.Int64))
Dim typ280 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ280))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ280).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc8, 1325, 1, 1325, 100)
Dim typ281(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
ReDim Preserve typ281(UBound(typ281) + 1)
typ281(UBound(typ281)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ281))
Typ = Typ03.GetMethod("Equals", typ281).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc8, 1327, 1, 1327, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa172 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru172 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont172 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru172)
EmitConvIL.Emit(OpCodes.Br, fa172)
EmitConvIL.MarkLabel(tru172)
EmitConvIL.MarkSequencePoint(doc8, 1328, 1, 1328, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
EmitConvIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EmitConvIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
EmitConvIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
EmitConvIL.MarkSequencePoint(doc8, 1329, 1, 1329, 100)
Dim typ282(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "ToInt64")
Typ = GetType(System.String)
ReDim Preserve typ282(UBound(typ282) + 1)
typ282(UBound(typ282)) = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ282(UBound(typ282) + 1)
typ282(UBound(typ282)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetMethod", typ282))
Typ = Typ03.GetMethod("GetMethod", typ282).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc8, 1330, 1, 1330, 100)
Dim typ283(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ283(UBound(typ283) + 1)
typ283(UBound(typ283)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ283))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ283).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc8, 1331, 1, 1331, 100)
EmitConvIL.Emit(OpCodes.Br, label23)
EmitConvIL.MarkSequencePoint(doc8, 1332, 1, 1332, 100)
EmitConvIL.Emit(OpCodes.Br, cont172)
EmitConvIL.MarkLabel(fa172)
EmitConvIL.Emit(OpCodes.Br, cont172)
EmitConvIL.MarkLabel(cont172)
EmitConvIL.MarkSequencePoint(doc8, 1334, 1, 1334, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.Int32))
Dim typ284 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ284))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ284).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc8, 1335, 1, 1335, 100)
Dim typ285(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
ReDim Preserve typ285(UBound(typ285) + 1)
typ285(UBound(typ285)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ285))
Typ = Typ03.GetMethod("Equals", typ285).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc8, 1337, 1, 1337, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa173 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru173 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont173 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru173)
EmitConvIL.Emit(OpCodes.Br, fa173)
EmitConvIL.MarkLabel(tru173)
EmitConvIL.MarkSequencePoint(doc8, 1338, 1, 1338, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
EmitConvIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EmitConvIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
EmitConvIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
EmitConvIL.MarkSequencePoint(doc8, 1339, 1, 1339, 100)
Dim typ286(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "ToInt32")
Typ = GetType(System.String)
ReDim Preserve typ286(UBound(typ286) + 1)
typ286(UBound(typ286)) = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ286(UBound(typ286) + 1)
typ286(UBound(typ286)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetMethod", typ286))
Typ = Typ03.GetMethod("GetMethod", typ286).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc8, 1340, 1, 1340, 100)
Dim typ287(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ287(UBound(typ287) + 1)
typ287(UBound(typ287)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ287))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ287).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc8, 1341, 1, 1341, 100)
EmitConvIL.Emit(OpCodes.Br, label23)
EmitConvIL.MarkSequencePoint(doc8, 1342, 1, 1342, 100)
EmitConvIL.Emit(OpCodes.Br, cont173)
EmitConvIL.MarkLabel(fa173)
EmitConvIL.Emit(OpCodes.Br, cont173)
EmitConvIL.MarkLabel(cont173)
EmitConvIL.MarkSequencePoint(doc8, 1344, 1, 1344, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.Int16))
Dim typ288 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ288))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ288).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc8, 1345, 1, 1345, 100)
Dim typ289(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
ReDim Preserve typ289(UBound(typ289) + 1)
typ289(UBound(typ289)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ289))
Typ = Typ03.GetMethod("Equals", typ289).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc8, 1347, 1, 1347, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa174 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru174 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont174 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru174)
EmitConvIL.Emit(OpCodes.Br, fa174)
EmitConvIL.MarkLabel(tru174)
EmitConvIL.MarkSequencePoint(doc8, 1348, 1, 1348, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
EmitConvIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EmitConvIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
EmitConvIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
EmitConvIL.MarkSequencePoint(doc8, 1349, 1, 1349, 100)
Dim typ290(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "ToInt16")
Typ = GetType(System.String)
ReDim Preserve typ290(UBound(typ290) + 1)
typ290(UBound(typ290)) = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ290(UBound(typ290) + 1)
typ290(UBound(typ290)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetMethod", typ290))
Typ = Typ03.GetMethod("GetMethod", typ290).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc8, 1350, 1, 1350, 100)
Dim typ291(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ291(UBound(typ291) + 1)
typ291(UBound(typ291)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ291))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ291).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc8, 1351, 1, 1351, 100)
EmitConvIL.Emit(OpCodes.Br, label23)
EmitConvIL.MarkSequencePoint(doc8, 1352, 1, 1352, 100)
EmitConvIL.Emit(OpCodes.Br, cont174)
EmitConvIL.MarkLabel(fa174)
EmitConvIL.Emit(OpCodes.Br, cont174)
EmitConvIL.MarkLabel(cont174)
EmitConvIL.MarkSequencePoint(doc8, 1354, 1, 1354, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.SByte))
Dim typ292 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ292))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ292).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc8, 1355, 1, 1355, 100)
Dim typ293(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
ReDim Preserve typ293(UBound(typ293) + 1)
typ293(UBound(typ293)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ293))
Typ = Typ03.GetMethod("Equals", typ293).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc8, 1357, 1, 1357, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa175 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru175 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont175 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru175)
EmitConvIL.Emit(OpCodes.Br, fa175)
EmitConvIL.MarkLabel(tru175)
EmitConvIL.MarkSequencePoint(doc8, 1358, 1, 1358, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
EmitConvIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EmitConvIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
EmitConvIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
EmitConvIL.MarkSequencePoint(doc8, 1359, 1, 1359, 100)
Dim typ294(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "ToSByte")
Typ = GetType(System.String)
ReDim Preserve typ294(UBound(typ294) + 1)
typ294(UBound(typ294)) = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ294(UBound(typ294) + 1)
typ294(UBound(typ294)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetMethod", typ294))
Typ = Typ03.GetMethod("GetMethod", typ294).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc8, 1360, 1, 1360, 100)
Dim typ295(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ295(UBound(typ295) + 1)
typ295(UBound(typ295)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ295))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ295).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc8, 1361, 1, 1361, 100)
EmitConvIL.Emit(OpCodes.Br, label23)
EmitConvIL.MarkSequencePoint(doc8, 1362, 1, 1362, 100)
EmitConvIL.Emit(OpCodes.Br, cont175)
EmitConvIL.MarkLabel(fa175)
EmitConvIL.Emit(OpCodes.Br, cont175)
EmitConvIL.MarkLabel(cont175)
EmitConvIL.MarkSequencePoint(doc8, 1364, 1, 1364, 100)
EmitConvIL.Emit(OpCodes.Ldtoken, GetType(System.Boolean))
Dim typ296 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitConvIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ296))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ296).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 0)
EmitConvIL.MarkSequencePoint(doc8, 1365, 1, 1365, 100)
Dim typ297(-1) As Type
EmitConvIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
ReDim Preserve typ297(UBound(typ297) + 1)
typ297(UBound(typ297)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ297))
Typ = Typ03.GetMethod("Equals", typ297).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 2)
EmitConvIL.MarkSequencePoint(doc8, 1367, 1, 1367, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitConvIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa176 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim tru176 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
Dim cont176 As System.Reflection.Emit.Label = EmitConvIL.DefineLabel()
EmitConvIL.Emit(OpCodes.Beq, tru176)
EmitConvIL.Emit(OpCodes.Br, fa176)
EmitConvIL.MarkLabel(tru176)
EmitConvIL.MarkSequencePoint(doc8, 1368, 1, 1368, 100)
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
EmitConvIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
EmitConvIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitConvIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.Type)
EmitConvIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
EmitConvIL.MarkSequencePoint(doc8, 1369, 1, 1369, 100)
Dim typ298(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
Typ03 = Typ
EmitConvIL.Emit(OpCodes.Ldstr, "ToBoolean")
Typ = GetType(System.String)
ReDim Preserve typ298(UBound(typ298) + 1)
typ298(UBound(typ298)) = Typ
EmitConvIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ298(UBound(typ298) + 1)
typ298(UBound(typ298)) = Typ
EmitConvIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetMethod", typ298))
Typ = Typ03.GetMethod("GetMethod", typ298).ReturnType
EmitConvIL.Emit(OpCodes.Stloc, 4)
EmitConvIL.MarkSequencePoint(doc8, 1370, 1, 1370, 100)
Dim typ299(-1) As Type
EmitConvIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(MethodInfo)
ReDim Preserve typ299(UBound(typ299) + 1)
typ299(UBound(typ299)) = Typ
EmitConvIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ299))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ299).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitConvIL.Emit(OpCodes.Pop)
End If
EmitConvIL.MarkSequencePoint(doc8, 1371, 1, 1371, 100)
EmitConvIL.Emit(OpCodes.Br, label23)
EmitConvIL.MarkSequencePoint(doc8, 1372, 1, 1372, 100)
EmitConvIL.Emit(OpCodes.Br, cont176)
EmitConvIL.MarkLabel(fa176)
EmitConvIL.Emit(OpCodes.Br, cont176)
EmitConvIL.MarkLabel(cont176)
EmitConvIL.MarkSequencePoint(doc8, 1375, 1, 1375, 100)
EmitConvIL.MarkLabel(label23)
EmitConvIL.MarkSequencePoint(doc8, 1377, 1, 1377, 100)
EmitConvIL.Emit(OpCodes.Ret)
Dim typ300(-1) As Type
ReDim Preserve typ300(UBound(typ300) + 1)
typ300(UBound(typ300)) = GetType(MethodInfo)
ReDim Preserve typ300(UBound(typ300) + 1)
typ300(UBound(typ300)) = GetType(System.Boolean)
Dim EmitMetCall As MethodBuilder = Helpers.DefineMethod("EmitMetCall", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ300)
Dim EmitMetCallIL As ILGenerator = EmitMetCall.GetILGenerator()
Dim EmitMetCallparam01 As ParameterBuilder = EmitMetCall.DefineParameter(1, ParameterAttributes.None, "met")
Dim EmitMetCallparam02 As ParameterBuilder = EmitMetCall.DefineParameter(2, ParameterAttributes.None, "stat")
EmitMetCallIL.MarkSequencePoint(doc8, 1380, 1, 1380, 100)
EmitMetCallIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
EmitMetCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa177 As System.Reflection.Emit.Label = EmitMetCallIL.DefineLabel()
Dim tru177 As System.Reflection.Emit.Label = EmitMetCallIL.DefineLabel()
Dim cont177 As System.Reflection.Emit.Label = EmitMetCallIL.DefineLabel()
EmitMetCallIL.Emit(OpCodes.Beq, tru177)
EmitMetCallIL.Emit(OpCodes.Br, fa177)
EmitMetCallIL.MarkLabel(tru177)
EmitMetCallIL.MarkSequencePoint(doc8, 1381, 1, 1381, 100)
Dim typ301(-1) As Type
EmitMetCallIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(MethodInfo)
ReDim Preserve typ301(UBound(typ301) + 1)
typ301(UBound(typ301)) = Typ
EmitMetCallIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ301))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ301).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMetCallIL.Emit(OpCodes.Pop)
End If
EmitMetCallIL.MarkSequencePoint(doc8, 1382, 1, 1382, 100)
EmitMetCallIL.Emit(OpCodes.Br, cont177)
EmitMetCallIL.MarkLabel(fa177)
EmitMetCallIL.MarkSequencePoint(doc8, 1383, 1, 1383, 100)
Dim typ302(-1) As Type
EmitMetCallIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(MethodInfo)
ReDim Preserve typ302(UBound(typ302) + 1)
typ302(UBound(typ302)) = Typ
EmitMetCallIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCallvirt", typ302))
Typ = GetType(ILEmitter).GetMethod("EmitCallvirt", typ302).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMetCallIL.Emit(OpCodes.Pop)
End If
EmitMetCallIL.MarkSequencePoint(doc8, 1384, 1, 1384, 100)
EmitMetCallIL.Emit(OpCodes.Br, cont177)
EmitMetCallIL.MarkLabel(cont177)
EmitMetCallIL.MarkSequencePoint(doc8, 1385, 1, 1385, 100)
EmitMetCallIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("PopFlg"))
Typ = GetType(AsmFactory).GetField("PopFlg").FieldType
EmitMetCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa178 As System.Reflection.Emit.Label = EmitMetCallIL.DefineLabel()
Dim tru178 As System.Reflection.Emit.Label = EmitMetCallIL.DefineLabel()
Dim cont178 As System.Reflection.Emit.Label = EmitMetCallIL.DefineLabel()
EmitMetCallIL.Emit(OpCodes.Beq, tru178)
EmitMetCallIL.Emit(OpCodes.Br, fa178)
EmitMetCallIL.MarkLabel(tru178)
EmitMetCallIL.MarkSequencePoint(doc8, 1386, 1, 1386, 100)
Dim locbldr174 As LocalBuilder = EmitMetCallIL.DeclareLocal(GetType(System.Type))
locbldr174.SetLocalSymInfo("rt")
EmitMetCallIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(MethodInfo)
Typ03 = Typ
EmitMetCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_ReturnType", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_ReturnType", Type.EmptyTypes).ReturnType
EmitMetCallIL.Emit(OpCodes.Stloc, 0)
EmitMetCallIL.MarkSequencePoint(doc8, 1387, 1, 1387, 100)
Dim locbldr175 As LocalBuilder = EmitMetCallIL.DeclareLocal(GetType(System.Type))
locbldr175.SetLocalSymInfo("vt")
EmitMetCallIL.Emit(OpCodes.Ldtoken, GetType(System.Void))
Dim typ304 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitMetCallIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ304))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ304).ReturnType
EmitMetCallIL.Emit(OpCodes.Stloc, 1)
EmitMetCallIL.MarkSequencePoint(doc8, 1388, 1, 1388, 100)
Dim locbldr176 As LocalBuilder = EmitMetCallIL.DeclareLocal(GetType(System.Boolean))
locbldr176.SetLocalSymInfo("b")
Dim typ305(-1) As Type
EmitMetCallIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
EmitMetCallIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Type)
ReDim Preserve typ305(UBound(typ305) + 1)
typ305(UBound(typ305)) = Typ
EmitMetCallIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ305))
Typ = Typ03.GetMethod("Equals", typ305).ReturnType
EmitMetCallIL.Emit(OpCodes.Stloc, 2)
EmitMetCallIL.MarkSequencePoint(doc8, 1389, 1, 1389, 100)
EmitMetCallIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
EmitMetCallIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa179 As System.Reflection.Emit.Label = EmitMetCallIL.DefineLabel()
Dim tru179 As System.Reflection.Emit.Label = EmitMetCallIL.DefineLabel()
Dim cont179 As System.Reflection.Emit.Label = EmitMetCallIL.DefineLabel()
EmitMetCallIL.Emit(OpCodes.Beq, tru179)
EmitMetCallIL.Emit(OpCodes.Br, fa179)
EmitMetCallIL.MarkLabel(tru179)
EmitMetCallIL.MarkSequencePoint(doc8, 1390, 1, 1390, 100)
EmitMetCallIL.Emit(OpCodes.Br, cont179)
EmitMetCallIL.MarkLabel(fa179)
EmitMetCallIL.MarkSequencePoint(doc8, 1391, 1, 1391, 100)
EmitMetCallIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitPop", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitPop", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMetCallIL.Emit(OpCodes.Pop)
End If
EmitMetCallIL.MarkSequencePoint(doc8, 1392, 1, 1392, 100)
EmitMetCallIL.Emit(OpCodes.Br, cont179)
EmitMetCallIL.MarkLabel(cont179)
EmitMetCallIL.MarkSequencePoint(doc8, 1393, 1, 1393, 100)
EmitMetCallIL.Emit(OpCodes.Br, cont178)
EmitMetCallIL.MarkLabel(fa178)
EmitMetCallIL.Emit(OpCodes.Br, cont178)
EmitMetCallIL.MarkLabel(cont178)
EmitMetCallIL.MarkSequencePoint(doc8, 1394, 1, 1394, 100)
EmitMetCallIL.Emit(OpCodes.Ret)
Dim typ306(-1) As Type
ReDim Preserve typ306(UBound(typ306) + 1)
typ306(UBound(typ306)) = GetType(FieldInfo)
ReDim Preserve typ306(UBound(typ306) + 1)
typ306(UBound(typ306)) = GetType(System.Boolean)
Dim EmitFldLd As MethodBuilder = Helpers.DefineMethod("EmitFldLd", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ306)
Dim EmitFldLdIL As ILGenerator = EmitFldLd.GetILGenerator()
Dim EmitFldLdparam01 As ParameterBuilder = EmitFldLd.DefineParameter(1, ParameterAttributes.None, "fld")
Dim EmitFldLdparam02 As ParameterBuilder = EmitFldLd.DefineParameter(2, ParameterAttributes.None, "stat")
EmitFldLdIL.MarkSequencePoint(doc8, 1397, 1, 1397, 100)
EmitFldLdIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
EmitFldLdIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa180 As System.Reflection.Emit.Label = EmitFldLdIL.DefineLabel()
Dim tru180 As System.Reflection.Emit.Label = EmitFldLdIL.DefineLabel()
Dim cont180 As System.Reflection.Emit.Label = EmitFldLdIL.DefineLabel()
EmitFldLdIL.Emit(OpCodes.Beq, tru180)
EmitFldLdIL.Emit(OpCodes.Br, fa180)
EmitFldLdIL.MarkLabel(tru180)
EmitFldLdIL.MarkSequencePoint(doc8, 1398, 1, 1398, 100)
Dim typ307(-1) As Type
EmitFldLdIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(FieldInfo)
ReDim Preserve typ307(UBound(typ307) + 1)
typ307(UBound(typ307)) = Typ
EmitFldLdIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdsfld", typ307))
Typ = GetType(ILEmitter).GetMethod("EmitLdsfld", typ307).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitFldLdIL.Emit(OpCodes.Pop)
End If
EmitFldLdIL.MarkSequencePoint(doc8, 1399, 1, 1399, 100)
EmitFldLdIL.Emit(OpCodes.Br, cont180)
EmitFldLdIL.MarkLabel(fa180)
EmitFldLdIL.MarkSequencePoint(doc8, 1400, 1, 1400, 100)
Dim typ308(-1) As Type
EmitFldLdIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(FieldInfo)
ReDim Preserve typ308(UBound(typ308) + 1)
typ308(UBound(typ308)) = Typ
EmitFldLdIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdfld", typ308))
Typ = GetType(ILEmitter).GetMethod("EmitLdfld", typ308).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitFldLdIL.Emit(OpCodes.Pop)
End If
EmitFldLdIL.MarkSequencePoint(doc8, 1401, 1, 1401, 100)
EmitFldLdIL.Emit(OpCodes.Br, cont180)
EmitFldLdIL.MarkLabel(cont180)
EmitFldLdIL.MarkSequencePoint(doc8, 1402, 1, 1402, 100)
EmitFldLdIL.Emit(OpCodes.Ret)
Dim typ309(-1) As Type
ReDim Preserve typ309(UBound(typ309) + 1)
typ309(UBound(typ309)) = GetType(FieldInfo)
ReDim Preserve typ309(UBound(typ309) + 1)
typ309(UBound(typ309)) = GetType(System.Boolean)
Dim EmitFldSt As MethodBuilder = Helpers.DefineMethod("EmitFldSt", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ309)
Dim EmitFldStIL As ILGenerator = EmitFldSt.GetILGenerator()
Dim EmitFldStparam01 As ParameterBuilder = EmitFldSt.DefineParameter(1, ParameterAttributes.None, "fld")
Dim EmitFldStparam02 As ParameterBuilder = EmitFldSt.DefineParameter(2, ParameterAttributes.None, "stat")
EmitFldStIL.MarkSequencePoint(doc8, 1405, 1, 1405, 100)
EmitFldStIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.Boolean)
EmitFldStIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa181 As System.Reflection.Emit.Label = EmitFldStIL.DefineLabel()
Dim tru181 As System.Reflection.Emit.Label = EmitFldStIL.DefineLabel()
Dim cont181 As System.Reflection.Emit.Label = EmitFldStIL.DefineLabel()
EmitFldStIL.Emit(OpCodes.Beq, tru181)
EmitFldStIL.Emit(OpCodes.Br, fa181)
EmitFldStIL.MarkLabel(tru181)
EmitFldStIL.MarkSequencePoint(doc8, 1406, 1, 1406, 100)
Dim typ310(-1) As Type
EmitFldStIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(FieldInfo)
ReDim Preserve typ310(UBound(typ310) + 1)
typ310(UBound(typ310)) = Typ
EmitFldStIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitStsfld", typ310))
Typ = GetType(ILEmitter).GetMethod("EmitStsfld", typ310).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitFldStIL.Emit(OpCodes.Pop)
End If
EmitFldStIL.MarkSequencePoint(doc8, 1407, 1, 1407, 100)
EmitFldStIL.Emit(OpCodes.Br, cont181)
EmitFldStIL.MarkLabel(fa181)
EmitFldStIL.MarkSequencePoint(doc8, 1408, 1, 1408, 100)
Dim typ311(-1) As Type
EmitFldStIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(FieldInfo)
ReDim Preserve typ311(UBound(typ311) + 1)
typ311(UBound(typ311)) = Typ
EmitFldStIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitStfld", typ311))
Typ = GetType(ILEmitter).GetMethod("EmitStfld", typ311).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitFldStIL.Emit(OpCodes.Pop)
End If
EmitFldStIL.MarkSequencePoint(doc8, 1409, 1, 1409, 100)
EmitFldStIL.Emit(OpCodes.Br, cont181)
EmitFldStIL.MarkLabel(cont181)
EmitFldStIL.MarkSequencePoint(doc8, 1410, 1, 1410, 100)
EmitFldStIL.Emit(OpCodes.Ret)
Helpers.CreateType()
End Sub


Dim doc9 As ISymbolDocumentWriter


Dim doc10 As ISymbolDocumentWriter

Sub OpStack()
Dim OpStack As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "OpStack", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim Stack As FieldBuilder = OpStack.DefineField("Stack", GetType(Expr), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = OpStack.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc10, 14, 1, 14, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc10, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, GetType(Expr).GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, Stack)
ctor0IL.MarkSequencePoint(doc10, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(Token)
Dim PushOp As MethodBuilder = OpStack.DefineMethod("PushOp", MethodAttributes.Public, GetType(System.Void), typ0)
Dim PushOpIL As ILGenerator = PushOp.GetILGenerator()
Dim PushOpparam01 As ParameterBuilder = PushOp.DefineParameter(1, ParameterAttributes.None, "optok")
PushOpIL.MarkSequencePoint(doc10, 19, 1, 19, 100)
Dim typ1(-1) As Type
PushOpIL.Emit(OpCodes.Ldarg_0)
PushOpIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
PushOpIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = Typ
PushOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ1))
Typ = Typ03.GetMethod("AddToken", typ1).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
PushOpIL.Emit(OpCodes.Pop)
End If
PushOpIL.MarkSequencePoint(doc10, 20, 1, 20, 100)
PushOpIL.Emit(OpCodes.Ret)
Dim PopOp As MethodBuilder = OpStack.DefineMethod("PopOp", MethodAttributes.Public, GetType(System.Void), Type.EmptyTypes)
Dim PopOpIL As ILGenerator = PopOp.GetILGenerator()
PopOpIL.MarkSequencePoint(doc10, 23, 1, 23, 100)
PopOpIL.Emit(OpCodes.Ldarg_0)
PopOpIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
PopOpIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
PopOpIL.Emit(OpCodes.Ldlen)
PopOpIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
PopOpIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa182 As System.Reflection.Emit.Label = PopOpIL.DefineLabel()
Dim tru182 As System.Reflection.Emit.Label = PopOpIL.DefineLabel()
Dim cont182 As System.Reflection.Emit.Label = PopOpIL.DefineLabel()
PopOpIL.Emit(OpCodes.Beq, tru182)
PopOpIL.Emit(OpCodes.Br, fa182)
PopOpIL.MarkLabel(tru182)
PopOpIL.MarkSequencePoint(doc10, 24, 1, 24, 100)
PopOpIL.Emit(OpCodes.Br, cont182)
PopOpIL.MarkLabel(fa182)
PopOpIL.MarkSequencePoint(doc10, 25, 1, 25, 100)
Dim locbldr177 As LocalBuilder = PopOpIL.DeclareLocal(GetType(System.Int32))
locbldr177.SetLocalSymInfo("ind")
PopOpIL.Emit(OpCodes.Ldarg_0)
PopOpIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
PopOpIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
PopOpIL.Emit(OpCodes.Ldlen)
PopOpIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
PopOpIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
PopOpIL.Emit(OpCodes.Sub)
PopOpIL.Emit(OpCodes.Stloc, 0)
PopOpIL.MarkSequencePoint(doc10, 26, 1, 26, 100)
Dim typ2(-1) As Type
PopOpIL.Emit(OpCodes.Ldarg_0)
PopOpIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
PopOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = Typ
PopOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ2))
Typ = Typ03.GetMethod("RemToken", typ2).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
PopOpIL.Emit(OpCodes.Pop)
End If
PopOpIL.MarkSequencePoint(doc10, 27, 1, 27, 100)
PopOpIL.Emit(OpCodes.Br, cont182)
PopOpIL.MarkLabel(cont182)
PopOpIL.MarkSequencePoint(doc10, 28, 1, 28, 100)
PopOpIL.Emit(OpCodes.Ret)
Dim TopOp As MethodBuilder = OpStack.DefineMethod("TopOp", MethodAttributes.Public, GetType(Token), Type.EmptyTypes)
Dim TopOpIL As ILGenerator = TopOp.GetILGenerator()
TopOpIL.MarkSequencePoint(doc10, 31, 1, 31, 100)
TopOpIL.Emit(OpCodes.Ldarg_0)
TopOpIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
TopOpIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
TopOpIL.Emit(OpCodes.Ldlen)
TopOpIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
TopOpIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa183 As System.Reflection.Emit.Label = TopOpIL.DefineLabel()
Dim tru183 As System.Reflection.Emit.Label = TopOpIL.DefineLabel()
Dim cont183 As System.Reflection.Emit.Label = TopOpIL.DefineLabel()
TopOpIL.Emit(OpCodes.Beq, tru183)
TopOpIL.Emit(OpCodes.Br, fa183)
TopOpIL.MarkLabel(tru183)
TopOpIL.MarkSequencePoint(doc10, 32, 1, 32, 100)
TopOpIL.Emit(OpCodes.Ldnull)
TopOpIL.MarkSequencePoint(doc10, 33, 1, 33, 100)
TopOpIL.Emit(OpCodes.Br, cont183)
TopOpIL.MarkLabel(fa183)
TopOpIL.MarkSequencePoint(doc10, 34, 1, 34, 100)
Dim locbldr178 As LocalBuilder = TopOpIL.DeclareLocal(GetType(System.Int32))
locbldr178.SetLocalSymInfo("ind")
TopOpIL.Emit(OpCodes.Ldarg_0)
TopOpIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
TopOpIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
TopOpIL.Emit(OpCodes.Ldlen)
TopOpIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
TopOpIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
TopOpIL.Emit(OpCodes.Sub)
TopOpIL.Emit(OpCodes.Stloc, 0)
TopOpIL.MarkSequencePoint(doc10, 35, 1, 35, 100)
Dim locbldr179 As LocalBuilder = TopOpIL.DeclareLocal(GetType(Token))
locbldr179.SetLocalSymInfo("optok")
TopOpIL.Emit(OpCodes.Ldarg_0)
TopOpIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
TopOpIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
TopOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
TopOpIL.Emit(OpCodes.Conv_U)
Typ = Typ02
TopOpIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
TopOpIL.Emit(OpCodes.Stloc, 1)
TopOpIL.MarkSequencePoint(doc10, 36, 1, 36, 100)
TopOpIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Token)
TopOpIL.MarkSequencePoint(doc10, 37, 1, 37, 100)
TopOpIL.Emit(OpCodes.Br, cont183)
TopOpIL.MarkLabel(cont183)
TopOpIL.MarkSequencePoint(doc10, 38, 1, 38, 100)
TopOpIL.Emit(OpCodes.Ret)
Dim getLength As MethodBuilder = OpStack.DefineMethod("getLength", MethodAttributes.Public, GetType(System.Int32), Type.EmptyTypes)
Dim getLengthIL As ILGenerator = getLength.GetILGenerator()
getLengthIL.MarkSequencePoint(doc10, 41, 1, 41, 100)
getLengthIL.Emit(OpCodes.Ldarg_0)
getLengthIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
getLengthIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
getLengthIL.Emit(OpCodes.Ldlen)
getLengthIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
getLengthIL.MarkSequencePoint(doc10, 42, 1, 42, 100)
getLengthIL.Emit(OpCodes.Ret)
OpStack.CreateType()
End Sub


Dim doc11 As ISymbolDocumentWriter

Sub Evaluator()
Dim Evaluator As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "Evaluator", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass Or TypeAttributes.BeforeFieldInit, GetType(System.Object))
Dim Stack As FieldBuilder = Evaluator.DefineField("Stack", asm.GetType("dylan.NET.Tokenizer.CodeGen.OpStack"), FieldAttributes.Public)
Dim InstToken As FieldBuilder = Evaluator.DefineField("InstToken", GetType(Token), FieldAttributes.Public)
Dim ctor0 As ConstructorBuilder = Evaluator.DefineConstructor(MethodAttributes.Public,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc11, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Call, GetType(System.Object).GetConstructor(Type.EmptyTypes))
ctor0IL.MarkSequencePoint(doc11, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stfld, Stack)
ctor0IL.MarkSequencePoint(doc11, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldarg_0)
ctor0IL.Emit(OpCodes.Newobj, GetType(Token).GetConstructor(Type.EmptyTypes))
ctor0IL.Emit(OpCodes.Stfld, InstToken)
ctor0IL.MarkSequencePoint(doc11, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(Token)
Dim RetPrec As MethodBuilder = Evaluator.DefineMethod("RetPrec", MethodAttributes.Public, GetType(System.Int32), typ0)
Dim RetPrecIL As ILGenerator = RetPrec.GetILGenerator()
Dim RetPrecparam01 As ParameterBuilder = RetPrec.DefineParameter(1, ParameterAttributes.None, "tok")
RetPrecIL.MarkSequencePoint(doc11, 21, 1, 21, 100)
Dim locbldr180 As LocalBuilder = RetPrecIL.DeclareLocal(GetType(System.Type))
locbldr180.SetLocalSymInfo("typ")
RetPrecIL.Emit(OpCodes.Ldnull)
RetPrecIL.Emit(OpCodes.Stloc, 0)
RetPrecIL.MarkSequencePoint(doc11, 22, 1, 22, 100)
Dim locbldr181 As LocalBuilder = RetPrecIL.DeclareLocal(GetType(System.Boolean))
locbldr181.SetLocalSymInfo("b")
RetPrecIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
RetPrecIL.Emit(OpCodes.Stloc, 1)
RetPrecIL.MarkSequencePoint(doc11, 23, 1, 23, 100)
Dim locbldr182 As LocalBuilder = RetPrecIL.DeclareLocal(GetType(System.Int32))
locbldr182.SetLocalSymInfo("prec")
RetPrecIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
RetPrecIL.Emit(OpCodes.Stloc, 2)
RetPrecIL.MarkSequencePoint(doc11, 25, 1, 25, 100)
Dim label0 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
RetPrecIL.MarkSequencePoint(doc11, 27, 1, 27, 100)
RetPrecIL.Emit(OpCodes.Ldtoken, GetType(Op))
Dim typ1 As Type() = {GetType(System.RuntimeTypeHandle)}
RetPrecIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ1))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ1).ReturnType
RetPrecIL.Emit(OpCodes.Stloc, 0)
RetPrecIL.MarkSequencePoint(doc11, 28, 1, 28, 100)
Dim typ2(-1) As Type
RetPrecIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
RetPrecIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
RetPrecIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = Typ
RetPrecIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ2))
Typ = Typ03.GetMethod("IsInstanceOfType", typ2).ReturnType
RetPrecIL.Emit(OpCodes.Stloc, 1)
RetPrecIL.MarkSequencePoint(doc11, 30, 1, 30, 100)
RetPrecIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
RetPrecIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa184 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim tru184 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim cont184 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
RetPrecIL.Emit(OpCodes.Beq, tru184)
RetPrecIL.Emit(OpCodes.Br, fa184)
RetPrecIL.MarkLabel(tru184)
RetPrecIL.MarkSequencePoint(doc11, 31, 1, 31, 100)
Dim locbldr183 As LocalBuilder = RetPrecIL.DeclareLocal(GetType(Op))
locbldr183.SetLocalSymInfo("optok")
RetPrecIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
RetPrecIL.Emit(OpCodes.Stloc, 3)
RetPrecIL.MarkSequencePoint(doc11, 32, 1, 32, 100)
RetPrecIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Op)
RetPrecIL.Emit(OpCodes.Ldfld, GetType(Op).GetField("PrecNo"))
Typ = GetType(Op).GetField("PrecNo").FieldType
RetPrecIL.Emit(OpCodes.Stloc, 2)
RetPrecIL.MarkSequencePoint(doc11, 33, 1, 33, 100)
RetPrecIL.Emit(OpCodes.Br, label0)
RetPrecIL.MarkSequencePoint(doc11, 34, 1, 34, 100)
RetPrecIL.Emit(OpCodes.Br, cont184)
RetPrecIL.MarkLabel(fa184)
RetPrecIL.Emit(OpCodes.Br, cont184)
RetPrecIL.MarkLabel(cont184)
RetPrecIL.MarkSequencePoint(doc11, 36, 1, 36, 100)
RetPrecIL.Emit(OpCodes.Ldtoken, GetType(LParen))
Dim typ3 As Type() = {GetType(System.RuntimeTypeHandle)}
RetPrecIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ3))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ3).ReturnType
RetPrecIL.Emit(OpCodes.Stloc, 0)
RetPrecIL.MarkSequencePoint(doc11, 37, 1, 37, 100)
Dim typ4(-1) As Type
RetPrecIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
RetPrecIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
RetPrecIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
RetPrecIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ4))
Typ = Typ03.GetMethod("IsInstanceOfType", typ4).ReturnType
RetPrecIL.Emit(OpCodes.Stloc, 1)
RetPrecIL.MarkSequencePoint(doc11, 39, 1, 39, 100)
RetPrecIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
RetPrecIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa185 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim tru185 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim cont185 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
RetPrecIL.Emit(OpCodes.Beq, tru185)
RetPrecIL.Emit(OpCodes.Br, fa185)
RetPrecIL.MarkLabel(tru185)
RetPrecIL.MarkSequencePoint(doc11, 40, 1, 40, 100)
RetPrecIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
RetPrecIL.Emit(OpCodes.Stloc, 2)
RetPrecIL.MarkSequencePoint(doc11, 41, 1, 41, 100)
RetPrecIL.Emit(OpCodes.Br, label0)
RetPrecIL.MarkSequencePoint(doc11, 42, 1, 42, 100)
RetPrecIL.Emit(OpCodes.Br, cont185)
RetPrecIL.MarkLabel(fa185)
RetPrecIL.Emit(OpCodes.Br, cont185)
RetPrecIL.MarkLabel(cont185)
RetPrecIL.MarkSequencePoint(doc11, 44, 1, 44, 100)
RetPrecIL.Emit(OpCodes.Ldtoken, GetType(RParen))
Dim typ5 As Type() = {GetType(System.RuntimeTypeHandle)}
RetPrecIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ5))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ5).ReturnType
RetPrecIL.Emit(OpCodes.Stloc, 0)
RetPrecIL.MarkSequencePoint(doc11, 45, 1, 45, 100)
Dim typ6(-1) As Type
RetPrecIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
RetPrecIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
RetPrecIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = Typ
RetPrecIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ6))
Typ = Typ03.GetMethod("IsInstanceOfType", typ6).ReturnType
RetPrecIL.Emit(OpCodes.Stloc, 1)
RetPrecIL.MarkSequencePoint(doc11, 47, 1, 47, 100)
RetPrecIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
RetPrecIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa186 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim tru186 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim cont186 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
RetPrecIL.Emit(OpCodes.Beq, tru186)
RetPrecIL.Emit(OpCodes.Br, fa186)
RetPrecIL.MarkLabel(tru186)
RetPrecIL.MarkSequencePoint(doc11, 48, 1, 48, 100)
RetPrecIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
RetPrecIL.Emit(OpCodes.Stloc, 2)
RetPrecIL.MarkSequencePoint(doc11, 49, 1, 49, 100)
RetPrecIL.Emit(OpCodes.Br, label0)
RetPrecIL.MarkSequencePoint(doc11, 50, 1, 50, 100)
RetPrecIL.Emit(OpCodes.Br, cont186)
RetPrecIL.MarkLabel(fa186)
RetPrecIL.Emit(OpCodes.Br, cont186)
RetPrecIL.MarkLabel(cont186)
RetPrecIL.MarkSequencePoint(doc11, 52, 1, 52, 100)
RetPrecIL.MarkLabel(label0)
RetPrecIL.MarkSequencePoint(doc11, 54, 1, 54, 100)
RetPrecIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
RetPrecIL.MarkSequencePoint(doc11, 56, 1, 56, 100)
RetPrecIL.Emit(OpCodes.Ret)
Dim typ7(-1) As Type
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = GetType(Token)
Dim isLParen As MethodBuilder = Evaluator.DefineMethod("isLParen", MethodAttributes.Public, GetType(System.Boolean), typ7)
Dim isLParenIL As ILGenerator = isLParen.GetILGenerator()
Dim isLParenparam01 As ParameterBuilder = isLParen.DefineParameter(1, ParameterAttributes.None, "tok")
isLParenIL.MarkSequencePoint(doc11, 59, 1, 59, 100)
Dim locbldr184 As LocalBuilder = isLParenIL.DeclareLocal(GetType(System.Type))
locbldr184.SetLocalSymInfo("typ")
isLParenIL.Emit(OpCodes.Ldtoken, GetType(LParen))
Dim typ8 As Type() = {GetType(System.RuntimeTypeHandle)}
isLParenIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ8))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ8).ReturnType
isLParenIL.Emit(OpCodes.Stloc, 0)
isLParenIL.MarkSequencePoint(doc11, 60, 1, 60, 100)
Dim typ9(-1) As Type
isLParenIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
isLParenIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
isLParenIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = Typ
isLParenIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ9))
Typ = Typ03.GetMethod("IsInstanceOfType", typ9).ReturnType
isLParenIL.MarkSequencePoint(doc11, 61, 1, 61, 100)
isLParenIL.Emit(OpCodes.Ret)
Dim typ10(-1) As Type
ReDim Preserve typ10(UBound(typ10) + 1)
typ10(UBound(typ10)) = GetType(Token)
Dim isOp As MethodBuilder = Evaluator.DefineMethod("isOp", MethodAttributes.Public, GetType(System.Boolean), typ10)
Dim isOpIL As ILGenerator = isOp.GetILGenerator()
Dim isOpparam01 As ParameterBuilder = isOp.DefineParameter(1, ParameterAttributes.None, "tok")
isOpIL.MarkSequencePoint(doc11, 64, 1, 64, 100)
Dim locbldr185 As LocalBuilder = isOpIL.DeclareLocal(GetType(System.Type))
locbldr185.SetLocalSymInfo("typ")
isOpIL.Emit(OpCodes.Ldtoken, GetType(Op))
Dim typ11 As Type() = {GetType(System.RuntimeTypeHandle)}
isOpIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ11))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ11).ReturnType
isOpIL.Emit(OpCodes.Stloc, 0)
isOpIL.MarkSequencePoint(doc11, 65, 1, 65, 100)
Dim typ12(-1) As Type
isOpIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
isOpIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
isOpIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ12(UBound(typ12) + 1)
typ12(UBound(typ12)) = Typ
isOpIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ12))
Typ = Typ03.GetMethod("IsInstanceOfType", typ12).ReturnType
isOpIL.MarkSequencePoint(doc11, 66, 1, 66, 100)
isOpIL.Emit(OpCodes.Ret)
Dim typ13(-1) As Type
ReDim Preserve typ13(UBound(typ13) + 1)
typ13(UBound(typ13)) = GetType(Expr)
Dim ConvToRPN As MethodBuilder = Evaluator.DefineMethod("ConvToRPN", MethodAttributes.Public, GetType(Expr), typ13)
Dim ConvToRPNIL As ILGenerator = ConvToRPN.GetILGenerator()
Dim ConvToRPNparam01 As ParameterBuilder = ConvToRPN.DefineParameter(1, ParameterAttributes.None, "exp")
ConvToRPNIL.MarkSequencePoint(doc11, 70, 1, 70, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.OpStack").GetConstructor(Type.EmptyTypes))
ConvToRPNIL.Emit(OpCodes.Stfld, Stack)
ConvToRPNIL.MarkSequencePoint(doc11, 71, 1, 71, 100)
Dim locbldr186 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(Expr))
locbldr186.SetLocalSymInfo("exp2")
ConvToRPNIL.Emit(OpCodes.Newobj, GetType(Expr).GetConstructor(Type.EmptyTypes))
ConvToRPNIL.Emit(OpCodes.Stloc, 0)
ConvToRPNIL.MarkSequencePoint(doc11, 72, 1, 72, 100)
Dim locbldr187 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(System.Int32))
locbldr187.SetLocalSymInfo("i")
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Stloc, 1)
ConvToRPNIL.MarkSequencePoint(doc11, 73, 1, 73, 100)
Dim locbldr188 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(System.Int32))
locbldr188.SetLocalSymInfo("len")
ConvToRPNIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToRPNIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
ConvToRPNIL.Emit(OpCodes.Ldlen)
ConvToRPNIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Sub)
ConvToRPNIL.Emit(OpCodes.Stloc, 2)
ConvToRPNIL.MarkSequencePoint(doc11, 74, 1, 74, 100)
Dim locbldr189 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(System.Int32))
locbldr189.SetLocalSymInfo("int1")
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Stloc, 3)
ConvToRPNIL.MarkSequencePoint(doc11, 75, 1, 75, 100)
Dim locbldr190 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(System.Int32))
locbldr190.SetLocalSymInfo("int2")
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Stloc, 4)
ConvToRPNIL.MarkSequencePoint(doc11, 76, 1, 76, 100)
Dim locbldr191 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(Token))
locbldr191.SetLocalSymInfo("tok")
ConvToRPNIL.Emit(OpCodes.Ldnull)
ConvToRPNIL.Emit(OpCodes.Stloc, 5)
ConvToRPNIL.MarkSequencePoint(doc11, 77, 1, 77, 100)
Dim locbldr192 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(Token))
locbldr192.SetLocalSymInfo("tok2")
ConvToRPNIL.Emit(OpCodes.Ldnull)
ConvToRPNIL.Emit(OpCodes.Stloc, 6)
ConvToRPNIL.MarkSequencePoint(doc11, 78, 1, 78, 100)
Dim locbldr193 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(System.Type))
locbldr193.SetLocalSymInfo("typ")
ConvToRPNIL.Emit(OpCodes.Ldnull)
ConvToRPNIL.Emit(OpCodes.Stloc, 7)
ConvToRPNIL.MarkSequencePoint(doc11, 79, 1, 79, 100)
Dim locbldr194 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(System.Boolean))
locbldr194.SetLocalSymInfo("b")
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc11, 80, 1, 80, 100)
Dim locbldr195 As LocalBuilder = ConvToRPNIL.DeclareLocal(GetType(System.Boolean))
locbldr195.SetLocalSymInfo("orflg")
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Stloc, 9)
ConvToRPNIL.MarkSequencePoint(doc11, 82, 1, 82, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Expr)
ConvToRPNIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToRPNIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Line"))
Typ = GetType(Expr).GetField("Line").FieldType
ConvToRPNIL.Emit(OpCodes.Stfld, GetType(Expr).GetField("Line"))
ConvToRPNIL.MarkSequencePoint(doc11, 84, 1, 84, 100)
Dim label1 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.MarkSequencePoint(doc11, 85, 1, 85, 100)
Dim label2 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.MarkSequencePoint(doc11, 86, 1, 86, 100)
Dim label3 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.MarkSequencePoint(doc11, 88, 1, 88, 100)
ConvToRPNIL.MarkLabel(label2)
ConvToRPNIL.MarkSequencePoint(doc11, 90, 1, 90, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Add)
ConvToRPNIL.Emit(OpCodes.Stloc, 1)
ConvToRPNIL.MarkSequencePoint(doc11, 92, 1, 92, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToRPNIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
ConvToRPNIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ConvToRPNIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ConvToRPNIL.Emit(OpCodes.Stloc, 5)
ConvToRPNIL.MarkSequencePoint(doc11, 94, 1, 94, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ14(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, isOp)
Typ = isOp.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 9)
ConvToRPNIL.MarkSequencePoint(doc11, 95, 1, 95, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ15(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReDim Preserve typ15(UBound(typ15) + 1)
typ15(UBound(typ15)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, isLParen)
Typ = isLParen.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc11, 96, 1, 96, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Or)
ConvToRPNIL.Emit(OpCodes.Stloc, 9)
ConvToRPNIL.MarkSequencePoint(doc11, 97, 1, 97, 100)
ConvToRPNIL.Emit(OpCodes.Ldtoken, GetType(RParen))
Dim typ16 As Type() = {GetType(System.RuntimeTypeHandle)}
ConvToRPNIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ16))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ16).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 7)
ConvToRPNIL.MarkSequencePoint(doc11, 98, 1, 98, 100)
Dim typ17(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Type)
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ConvToRPNIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ17(UBound(typ17) + 1)
typ17(UBound(typ17)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ17))
Typ = Typ03.GetMethod("IsInstanceOfType", typ17).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc11, 99, 1, 99, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Or)
ConvToRPNIL.Emit(OpCodes.Stloc, 9)
ConvToRPNIL.MarkSequencePoint(doc11, 101, 1, 101, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa187 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru187 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont187 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru187)
ConvToRPNIL.Emit(OpCodes.Br, fa187)
ConvToRPNIL.MarkLabel(tru187)
ConvToRPNIL.MarkSequencePoint(doc11, 102, 1, 102, 100)
Dim typ18(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Expr)
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReDim Preserve typ18(UBound(typ18) + 1)
typ18(UBound(typ18)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ18))
Typ = Typ03.GetMethod("AddToken", typ18).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc11, 103, 1, 103, 100)
ConvToRPNIL.Emit(OpCodes.Br, label3)
ConvToRPNIL.MarkSequencePoint(doc11, 104, 1, 104, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont187)
ConvToRPNIL.MarkLabel(fa187)
ConvToRPNIL.Emit(OpCodes.Br, cont187)
ConvToRPNIL.MarkLabel(cont187)
ConvToRPNIL.MarkSequencePoint(doc11, 106, 1, 106, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ19(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReDim Preserve typ19(UBound(typ19) + 1)
typ19(UBound(typ19)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, isOp)
Typ = isOp.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc11, 108, 1, 108, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa188 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru188 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont188 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru188)
ConvToRPNIL.Emit(OpCodes.Br, fa188)
ConvToRPNIL.MarkLabel(tru188)
ConvToRPNIL.MarkSequencePoint(doc11, 109, 1, 109, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("getLength", Type.EmptyTypes))
Typ = Typ03.GetMethod("getLength", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 3)
ConvToRPNIL.MarkSequencePoint(doc11, 110, 1, 110, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa189 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru189 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont189 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, fa189)
ConvToRPNIL.Emit(OpCodes.Br, tru189)
ConvToRPNIL.MarkLabel(tru189)
ConvToRPNIL.MarkSequencePoint(doc11, 111, 1, 111, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("TopOp", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 6)
ConvToRPNIL.MarkSequencePoint(doc11, 112, 1, 112, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ22(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReDim Preserve typ22(UBound(typ22) + 1)
typ22(UBound(typ22)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, RetPrec)
Typ = RetPrec.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 3)
ConvToRPNIL.MarkSequencePoint(doc11, 113, 1, 113, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ23(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
ReDim Preserve typ23(UBound(typ23) + 1)
typ23(UBound(typ23)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, RetPrec)
Typ = RetPrec.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 4)
ConvToRPNIL.MarkSequencePoint(doc11, 114, 1, 114, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
Dim fa190 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru190 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont190 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Ble, tru190)
ConvToRPNIL.Emit(OpCodes.Br, fa190)
ConvToRPNIL.MarkLabel(tru190)
ConvToRPNIL.MarkSequencePoint(doc11, 115, 1, 115, 100)
Dim typ24(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Expr)
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
ReDim Preserve typ24(UBound(typ24) + 1)
typ24(UBound(typ24)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ24))
Typ = Typ03.GetMethod("AddToken", typ24).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc11, 116, 1, 116, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("PopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("PopOp", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc11, 117, 1, 117, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont190)
ConvToRPNIL.MarkLabel(fa190)
ConvToRPNIL.Emit(OpCodes.Br, cont190)
ConvToRPNIL.MarkLabel(cont190)
ConvToRPNIL.MarkSequencePoint(doc11, 118, 1, 118, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont189)
ConvToRPNIL.MarkLabel(fa189)
ConvToRPNIL.Emit(OpCodes.Br, cont189)
ConvToRPNIL.MarkLabel(cont189)
ConvToRPNIL.MarkSequencePoint(doc11, 119, 1, 119, 100)
Dim typ26(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReDim Preserve typ26(UBound(typ26) + 1)
typ26(UBound(typ26)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("PushOp", typ26))
Typ = Typ03.GetMethod("PushOp", typ26).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc11, 120, 1, 120, 100)
ConvToRPNIL.Emit(OpCodes.Br, label3)
ConvToRPNIL.MarkSequencePoint(doc11, 121, 1, 121, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont188)
ConvToRPNIL.MarkLabel(fa188)
ConvToRPNIL.Emit(OpCodes.Br, cont188)
ConvToRPNIL.MarkLabel(cont188)
ConvToRPNIL.MarkSequencePoint(doc11, 123, 1, 123, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ27(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReDim Preserve typ27(UBound(typ27) + 1)
typ27(UBound(typ27)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, isLParen)
Typ = isLParen.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc11, 125, 1, 125, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa191 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru191 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont191 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru191)
ConvToRPNIL.Emit(OpCodes.Br, fa191)
ConvToRPNIL.MarkLabel(tru191)
ConvToRPNIL.MarkSequencePoint(doc11, 126, 1, 126, 100)
Dim typ28(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ReDim Preserve typ28(UBound(typ28) + 1)
typ28(UBound(typ28)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("PushOp", typ28))
Typ = Typ03.GetMethod("PushOp", typ28).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc11, 127, 1, 127, 100)
ConvToRPNIL.Emit(OpCodes.Br, label3)
ConvToRPNIL.MarkSequencePoint(doc11, 128, 1, 128, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont191)
ConvToRPNIL.MarkLabel(fa191)
ConvToRPNIL.Emit(OpCodes.Br, cont191)
ConvToRPNIL.MarkLabel(cont191)
ConvToRPNIL.MarkSequencePoint(doc11, 130, 1, 130, 100)
ConvToRPNIL.Emit(OpCodes.Ldtoken, GetType(RParen))
Dim typ29 As Type() = {GetType(System.RuntimeTypeHandle)}
ConvToRPNIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ29))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ29).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 7)
ConvToRPNIL.MarkSequencePoint(doc11, 131, 1, 131, 100)
Dim typ30(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Type)
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ConvToRPNIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ30(UBound(typ30) + 1)
typ30(UBound(typ30)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ30))
Typ = Typ03.GetMethod("IsInstanceOfType", typ30).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc11, 133, 1, 133, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa192 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru192 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont192 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru192)
ConvToRPNIL.Emit(OpCodes.Br, fa192)
ConvToRPNIL.MarkLabel(tru192)
ConvToRPNIL.MarkSequencePoint(doc11, 134, 1, 134, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("getLength", Type.EmptyTypes))
Typ = Typ03.GetMethod("getLength", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 3)
ConvToRPNIL.MarkSequencePoint(doc11, 135, 1, 135, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa193 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru193 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont193 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, fa193)
ConvToRPNIL.Emit(OpCodes.Br, tru193)
ConvToRPNIL.MarkLabel(tru193)
ConvToRPNIL.MarkSequencePoint(doc11, 136, 1, 136, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("TopOp", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 6)
ConvToRPNIL.MarkSequencePoint(doc11, 137, 1, 137, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ33(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
ReDim Preserve typ33(UBound(typ33) + 1)
typ33(UBound(typ33)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, isLParen)
Typ = isLParen.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc11, 138, 1, 138, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa194 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru194 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont194 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru194)
ConvToRPNIL.Emit(OpCodes.Br, fa194)
ConvToRPNIL.MarkLabel(tru194)
ConvToRPNIL.MarkSequencePoint(doc11, 139, 1, 139, 100)
Dim typ34(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Expr)
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
ReDim Preserve typ34(UBound(typ34) + 1)
typ34(UBound(typ34)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ34))
Typ = Typ03.GetMethod("AddToken", typ34).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc11, 140, 1, 140, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("PopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("PopOp", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc11, 141, 1, 141, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("getLength", Type.EmptyTypes))
Typ = Typ03.GetMethod("getLength", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 3)
ConvToRPNIL.MarkSequencePoint(doc11, 142, 1, 142, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa195 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru195 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont195 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, fa195)
ConvToRPNIL.Emit(OpCodes.Br, tru195)
ConvToRPNIL.MarkLabel(tru195)
ConvToRPNIL.MarkSequencePoint(doc11, 143, 1, 143, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("TopOp", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 6)
ConvToRPNIL.MarkSequencePoint(doc11, 144, 1, 144, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ38(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
ReDim Preserve typ38(UBound(typ38) + 1)
typ38(UBound(typ38)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, isLParen)
Typ = isLParen.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc11, 145, 1, 145, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa196 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru196 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont196 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru196)
ConvToRPNIL.Emit(OpCodes.Br, fa196)
ConvToRPNIL.MarkLabel(tru196)
ConvToRPNIL.MarkSequencePoint(doc11, 146, 1, 146, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("PopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("PopOp", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc11, 147, 1, 147, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont196)
ConvToRPNIL.MarkLabel(fa196)
ConvToRPNIL.Emit(OpCodes.Br, cont196)
ConvToRPNIL.MarkLabel(cont196)
ConvToRPNIL.MarkSequencePoint(doc11, 148, 1, 148, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont195)
ConvToRPNIL.MarkLabel(fa195)
ConvToRPNIL.Emit(OpCodes.Br, cont195)
ConvToRPNIL.MarkLabel(cont195)
ConvToRPNIL.MarkSequencePoint(doc11, 149, 1, 149, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont194)
ConvToRPNIL.MarkLabel(fa194)
ConvToRPNIL.Emit(OpCodes.Br, cont194)
ConvToRPNIL.MarkLabel(cont194)
ConvToRPNIL.MarkSequencePoint(doc11, 150, 1, 150, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont193)
ConvToRPNIL.MarkLabel(fa193)
ConvToRPNIL.MarkSequencePoint(doc11, 151, 1, 151, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("TopOp", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 6)
ConvToRPNIL.MarkSequencePoint(doc11, 152, 1, 152, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ41(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
ReDim Preserve typ41(UBound(typ41) + 1)
typ41(UBound(typ41)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, isLParen)
Typ = isLParen.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc11, 153, 1, 153, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa197 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru197 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont197 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru197)
ConvToRPNIL.Emit(OpCodes.Br, fa197)
ConvToRPNIL.MarkLabel(tru197)
ConvToRPNIL.MarkSequencePoint(doc11, 154, 1, 154, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("PopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("PopOp", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc11, 155, 1, 155, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont197)
ConvToRPNIL.MarkLabel(fa197)
ConvToRPNIL.Emit(OpCodes.Br, cont197)
ConvToRPNIL.MarkLabel(cont197)
ConvToRPNIL.MarkSequencePoint(doc11, 156, 1, 156, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont193)
ConvToRPNIL.MarkLabel(cont193)
ConvToRPNIL.MarkSequencePoint(doc11, 157, 1, 157, 100)
ConvToRPNIL.Emit(OpCodes.Br, label3)
ConvToRPNIL.MarkSequencePoint(doc11, 158, 1, 158, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont192)
ConvToRPNIL.MarkLabel(fa192)
ConvToRPNIL.Emit(OpCodes.Br, cont192)
ConvToRPNIL.MarkLabel(cont192)
ConvToRPNIL.MarkSequencePoint(doc11, 160, 1, 160, 100)
ConvToRPNIL.MarkLabel(label3)
ConvToRPNIL.MarkSequencePoint(doc11, 162, 1, 162, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa198 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru198 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont198 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru198)
ConvToRPNIL.Emit(OpCodes.Br, fa198)
ConvToRPNIL.MarkLabel(tru198)
ConvToRPNIL.MarkSequencePoint(doc11, 163, 1, 163, 100)
ConvToRPNIL.Emit(OpCodes.Br, label1)
ConvToRPNIL.MarkSequencePoint(doc11, 164, 1, 164, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont198)
ConvToRPNIL.MarkLabel(fa198)
ConvToRPNIL.MarkSequencePoint(doc11, 165, 1, 165, 100)
ConvToRPNIL.Emit(OpCodes.Br, label2)
ConvToRPNIL.MarkSequencePoint(doc11, 166, 1, 166, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont198)
ConvToRPNIL.MarkLabel(cont198)
ConvToRPNIL.MarkSequencePoint(doc11, 168, 1, 168, 100)
ConvToRPNIL.MarkLabel(label1)
ConvToRPNIL.MarkSequencePoint(doc11, 170, 1, 170, 100)
Dim label4 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.MarkSequencePoint(doc11, 171, 1, 171, 100)
Dim label5 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.MarkSequencePoint(doc11, 173, 1, 173, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("getLength", Type.EmptyTypes))
Typ = Typ03.GetMethod("getLength", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 3)
ConvToRPNIL.MarkSequencePoint(doc11, 174, 1, 174, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa199 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru199 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont199 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru199)
ConvToRPNIL.Emit(OpCodes.Br, fa199)
ConvToRPNIL.MarkLabel(tru199)
ConvToRPNIL.MarkSequencePoint(doc11, 175, 1, 175, 100)
ConvToRPNIL.Emit(OpCodes.Br, label5)
ConvToRPNIL.MarkSequencePoint(doc11, 176, 1, 176, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont199)
ConvToRPNIL.MarkLabel(fa199)
ConvToRPNIL.Emit(OpCodes.Br, cont199)
ConvToRPNIL.MarkLabel(cont199)
ConvToRPNIL.MarkSequencePoint(doc11, 178, 1, 178, 100)
ConvToRPNIL.MarkLabel(label4)
ConvToRPNIL.MarkSequencePoint(doc11, 180, 1, 180, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("TopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("TopOp", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 6)
ConvToRPNIL.MarkSequencePoint(doc11, 181, 1, 181, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
Dim typ45(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
ReDim Preserve typ45(UBound(typ45) + 1)
typ45(UBound(typ45)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, isLParen)
Typ = isLParen.ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 8)
ConvToRPNIL.MarkSequencePoint(doc11, 183, 1, 183, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Boolean)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa200 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru200 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont200 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru200)
ConvToRPNIL.Emit(OpCodes.Br, fa200)
ConvToRPNIL.MarkLabel(tru200)
ConvToRPNIL.MarkSequencePoint(doc11, 184, 1, 184, 100)
Dim typ46(-1) As Type
ConvToRPNIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Expr)
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(Token)
ReDim Preserve typ46(UBound(typ46) + 1)
typ46(UBound(typ46)) = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ46))
Typ = Typ03.GetMethod("AddToken", typ46).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc11, 185, 1, 185, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont200)
ConvToRPNIL.MarkLabel(fa200)
ConvToRPNIL.Emit(OpCodes.Br, cont200)
ConvToRPNIL.MarkLabel(cont200)
ConvToRPNIL.MarkSequencePoint(doc11, 187, 1, 187, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("PopOp", Type.EmptyTypes))
Typ = Typ03.GetMethod("PopOp", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToRPNIL.Emit(OpCodes.Pop)
End If
ConvToRPNIL.MarkSequencePoint(doc11, 189, 1, 189, 100)
ConvToRPNIL.Emit(OpCodes.Ldarg_0)
ConvToRPNIL.Emit(OpCodes.Ldfld, Stack)
Typ = Stack.FieldType
Typ03 = Typ
ConvToRPNIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("getLength", Type.EmptyTypes))
Typ = Typ03.GetMethod("getLength", Type.EmptyTypes).ReturnType
ConvToRPNIL.Emit(OpCodes.Stloc, 3)
ConvToRPNIL.MarkSequencePoint(doc11, 190, 1, 190, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToRPNIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa201 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim tru201 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
Dim cont201 As System.Reflection.Emit.Label = ConvToRPNIL.DefineLabel()
ConvToRPNIL.Emit(OpCodes.Beq, tru201)
ConvToRPNIL.Emit(OpCodes.Br, fa201)
ConvToRPNIL.MarkLabel(tru201)
ConvToRPNIL.MarkSequencePoint(doc11, 191, 1, 191, 100)
ConvToRPNIL.Emit(OpCodes.Br, label5)
ConvToRPNIL.MarkSequencePoint(doc11, 192, 1, 192, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont201)
ConvToRPNIL.MarkLabel(fa201)
ConvToRPNIL.MarkSequencePoint(doc11, 193, 1, 193, 100)
ConvToRPNIL.Emit(OpCodes.Br, label4)
ConvToRPNIL.MarkSequencePoint(doc11, 194, 1, 194, 100)
ConvToRPNIL.Emit(OpCodes.Br, cont201)
ConvToRPNIL.MarkLabel(cont201)
ConvToRPNIL.MarkSequencePoint(doc11, 196, 1, 196, 100)
ConvToRPNIL.MarkLabel(label5)
ConvToRPNIL.MarkSequencePoint(doc11, 198, 1, 198, 100)
ConvToRPNIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Expr)
ConvToRPNIL.MarkSequencePoint(doc11, 200, 1, 200, 100)
ConvToRPNIL.Emit(OpCodes.Ret)
Dim typ49(-1) As Type
ReDim Preserve typ49(UBound(typ49) + 1)
typ49(UBound(typ49)) = GetType(Expr)
Dim ConvToAST As MethodBuilder = Evaluator.DefineMethod("ConvToAST", MethodAttributes.Public, GetType(Expr), typ49)
Dim ConvToASTIL As ILGenerator = ConvToAST.GetILGenerator()
Dim ConvToASTparam01 As ParameterBuilder = ConvToAST.DefineParameter(1, ParameterAttributes.None, "exp")
ConvToASTIL.MarkSequencePoint(doc11, 204, 1, 204, 100)
Dim locbldr196 As LocalBuilder = ConvToASTIL.DeclareLocal(GetType(Token))
locbldr196.SetLocalSymInfo("tokf")
ConvToASTIL.MarkSequencePoint(doc11, 205, 1, 205, 100)
Dim locbldr197 As LocalBuilder = ConvToASTIL.DeclareLocal(GetType(System.Int32))
locbldr197.SetLocalSymInfo("i")
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Stloc, 1)
ConvToASTIL.MarkSequencePoint(doc11, 206, 1, 206, 100)
Dim locbldr198 As LocalBuilder = ConvToASTIL.DeclareLocal(GetType(System.Int32))
locbldr198.SetLocalSymInfo("j")
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Stloc, 2)
ConvToASTIL.MarkSequencePoint(doc11, 207, 1, 207, 100)
Dim locbldr199 As LocalBuilder = ConvToASTIL.DeclareLocal(GetType(System.Int32))
locbldr199.SetLocalSymInfo("len")
ConvToASTIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToASTIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
ConvToASTIL.Emit(OpCodes.Ldlen)
ConvToASTIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Stloc, 3)
ConvToASTIL.MarkSequencePoint(doc11, 208, 1, 208, 100)
Dim locbldr200 As LocalBuilder = ConvToASTIL.DeclareLocal(GetType(Token))
locbldr200.SetLocalSymInfo("tok")
ConvToASTIL.Emit(OpCodes.Ldnull)
ConvToASTIL.Emit(OpCodes.Stloc, 4)
ConvToASTIL.MarkSequencePoint(doc11, 209, 1, 209, 100)
Dim locbldr201 As LocalBuilder = ConvToASTIL.DeclareLocal(GetType(Token))
locbldr201.SetLocalSymInfo("tok2")
ConvToASTIL.Emit(OpCodes.Ldnull)
ConvToASTIL.Emit(OpCodes.Stloc, 5)
ConvToASTIL.MarkSequencePoint(doc11, 210, 1, 210, 100)
Dim locbldr202 As LocalBuilder = ConvToASTIL.DeclareLocal(GetType(System.Type))
locbldr202.SetLocalSymInfo("typ")
ConvToASTIL.Emit(OpCodes.Ldnull)
ConvToASTIL.Emit(OpCodes.Stloc, 6)
ConvToASTIL.MarkSequencePoint(doc11, 211, 1, 211, 100)
Dim locbldr203 As LocalBuilder = ConvToASTIL.DeclareLocal(GetType(System.Boolean))
locbldr203.SetLocalSymInfo("b")
ConvToASTIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ConvToASTIL.Emit(OpCodes.Stloc, 7)
ConvToASTIL.MarkSequencePoint(doc11, 212, 1, 212, 100)
Dim locbldr204 As LocalBuilder = ConvToASTIL.DeclareLocal(GetType(Op))
locbldr204.SetLocalSymInfo("optok")
ConvToASTIL.MarkSequencePoint(doc11, 214, 1, 214, 100)
Dim label6 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
ConvToASTIL.MarkSequencePoint(doc11, 215, 1, 215, 100)
Dim label7 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
ConvToASTIL.MarkSequencePoint(doc11, 216, 1, 216, 100)
Dim label8 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
ConvToASTIL.MarkSequencePoint(doc11, 218, 1, 218, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
Dim fa202 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
Dim tru202 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
Dim cont202 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
ConvToASTIL.Emit(OpCodes.Beq, tru202)
ConvToASTIL.Emit(OpCodes.Br, fa202)
ConvToASTIL.MarkLabel(tru202)
ConvToASTIL.MarkSequencePoint(doc11, 219, 1, 219, 100)
ConvToASTIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToASTIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ConvToASTIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ConvToASTIL.Emit(OpCodes.Stloc, 0)
ConvToASTIL.MarkSequencePoint(doc11, 220, 1, 220, 100)
ConvToASTIL.Emit(OpCodes.Br, label6)
ConvToASTIL.MarkSequencePoint(doc11, 221, 1, 221, 100)
ConvToASTIL.Emit(OpCodes.Br, cont202)
ConvToASTIL.MarkLabel(fa202)
ConvToASTIL.Emit(OpCodes.Br, cont202)
ConvToASTIL.MarkLabel(cont202)
ConvToASTIL.MarkSequencePoint(doc11, 223, 1, 223, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Sub)
ConvToASTIL.Emit(OpCodes.Stloc, 3)
ConvToASTIL.MarkSequencePoint(doc11, 225, 1, 225, 100)
ConvToASTIL.MarkLabel(label7)
ConvToASTIL.MarkSequencePoint(doc11, 227, 1, 227, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Add)
ConvToASTIL.Emit(OpCodes.Stloc, 1)
ConvToASTIL.MarkSequencePoint(doc11, 229, 1, 229, 100)
ConvToASTIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToASTIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
ConvToASTIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ConvToASTIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ConvToASTIL.Emit(OpCodes.Stloc, 4)
ConvToASTIL.MarkSequencePoint(doc11, 231, 1, 231, 100)
ConvToASTIL.Emit(OpCodes.Ldarg_0)
Dim typ50(-1) As Type
ConvToASTIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(Token)
ReDim Preserve typ50(UBound(typ50) + 1)
typ50(UBound(typ50)) = Typ
ConvToASTIL.Emit(OpCodes.Callvirt, isOp)
Typ = isOp.ReturnType
ConvToASTIL.Emit(OpCodes.Stloc, 7)
ConvToASTIL.MarkSequencePoint(doc11, 233, 1, 233, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Boolean)
ConvToASTIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa203 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
Dim tru203 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
Dim cont203 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
ConvToASTIL.Emit(OpCodes.Beq, tru203)
ConvToASTIL.Emit(OpCodes.Br, fa203)
ConvToASTIL.MarkLabel(tru203)
ConvToASTIL.MarkSequencePoint(doc11, 234, 1, 234, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
Dim fa204 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
Dim tru204 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
Dim cont204 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
ConvToASTIL.Emit(OpCodes.Bge, tru204)
ConvToASTIL.Emit(OpCodes.Br, fa204)
ConvToASTIL.MarkLabel(tru204)
ConvToASTIL.MarkSequencePoint(doc11, 235, 1, 235, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(Token)
ConvToASTIL.Emit(OpCodes.Stloc, 8)
ConvToASTIL.MarkSequencePoint(doc11, 237, 1, 237, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Sub)
ConvToASTIL.Emit(OpCodes.Stloc, 2)
ConvToASTIL.MarkSequencePoint(doc11, 238, 1, 238, 100)
ConvToASTIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToASTIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
ConvToASTIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ConvToASTIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ConvToASTIL.Emit(OpCodes.Stloc, 5)
ConvToASTIL.MarkSequencePoint(doc11, 239, 1, 239, 100)
Dim typ51(-1) As Type
ConvToASTIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
ConvToASTIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
ReDim Preserve typ51(UBound(typ51) + 1)
typ51(UBound(typ51)) = Typ
ConvToASTIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ51))
Typ = Typ03.GetMethod("RemToken", typ51).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToASTIL.Emit(OpCodes.Pop)
End If
ConvToASTIL.MarkSequencePoint(doc11, 240, 1, 240, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Sub)
ConvToASTIL.Emit(OpCodes.Stloc, 3)
ConvToASTIL.MarkSequencePoint(doc11, 241, 1, 241, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Sub)
ConvToASTIL.Emit(OpCodes.Stloc, 2)
ConvToASTIL.MarkSequencePoint(doc11, 242, 1, 242, 100)
ConvToASTIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToASTIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
ConvToASTIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ConvToASTIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ConvToASTIL.Emit(OpCodes.Stloc, 4)
ConvToASTIL.MarkSequencePoint(doc11, 243, 1, 243, 100)
Dim typ52(-1) As Type
ConvToASTIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
Typ03 = Typ
ConvToASTIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
ReDim Preserve typ52(UBound(typ52) + 1)
typ52(UBound(typ52)) = Typ
ConvToASTIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("RemToken", typ52))
Typ = Typ03.GetMethod("RemToken", typ52).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ConvToASTIL.Emit(OpCodes.Pop)
End If
ConvToASTIL.MarkSequencePoint(doc11, 244, 1, 244, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Sub)
ConvToASTIL.Emit(OpCodes.Stloc, 3)
ConvToASTIL.MarkSequencePoint(doc11, 245, 1, 245, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(Op)
ConvToASTIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(Token)
ConvToASTIL.Emit(OpCodes.Stfld, GetType(Op).GetField("LChild"))
ConvToASTIL.MarkSequencePoint(doc11, 246, 1, 246, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(Op)
ConvToASTIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(Token)
ConvToASTIL.Emit(OpCodes.Stfld, GetType(Op).GetField("RChild"))
ConvToASTIL.MarkSequencePoint(doc11, 247, 1, 247, 100)
ConvToASTIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToASTIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
ConvToASTIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Conv_U)
Typ = Typ02
Typ02 = Typ
ConvToASTIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(Op)
Typ = Typ02
ConvToASTIL.Emit(OpCodes.Stelem, Typ.GetElementType())
ConvToASTIL.MarkSequencePoint(doc11, 248, 1, 248, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Stloc, 1)
ConvToASTIL.MarkSequencePoint(doc11, 249, 1, 249, 100)
ConvToASTIL.Emit(OpCodes.Br, cont204)
ConvToASTIL.MarkLabel(fa204)
ConvToASTIL.Emit(OpCodes.Br, cont204)
ConvToASTIL.MarkLabel(cont204)
ConvToASTIL.MarkSequencePoint(doc11, 250, 1, 250, 100)
ConvToASTIL.Emit(OpCodes.Br, label8)
ConvToASTIL.MarkSequencePoint(doc11, 251, 1, 251, 100)
ConvToASTIL.Emit(OpCodes.Br, cont203)
ConvToASTIL.MarkLabel(fa203)
ConvToASTIL.Emit(OpCodes.Br, cont203)
ConvToASTIL.MarkLabel(cont203)
ConvToASTIL.MarkSequencePoint(doc11, 253, 1, 253, 100)
ConvToASTIL.MarkLabel(label8)
ConvToASTIL.MarkSequencePoint(doc11, 255, 1, 255, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
Dim fa205 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
Dim tru205 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
Dim cont205 As System.Reflection.Emit.Label = ConvToASTIL.DefineLabel()
ConvToASTIL.Emit(OpCodes.Beq, tru205)
ConvToASTIL.Emit(OpCodes.Br, fa205)
ConvToASTIL.MarkLabel(tru205)
ConvToASTIL.MarkSequencePoint(doc11, 256, 1, 256, 100)
ConvToASTIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ConvToASTIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
ConvToASTIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ConvToASTIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ConvToASTIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ConvToASTIL.Emit(OpCodes.Stloc, 0)
ConvToASTIL.MarkSequencePoint(doc11, 257, 1, 257, 100)
ConvToASTIL.Emit(OpCodes.Br, label6)
ConvToASTIL.MarkSequencePoint(doc11, 258, 1, 258, 100)
ConvToASTIL.Emit(OpCodes.Br, cont205)
ConvToASTIL.MarkLabel(fa205)
ConvToASTIL.MarkSequencePoint(doc11, 259, 1, 259, 100)
ConvToASTIL.Emit(OpCodes.Br, label7)
ConvToASTIL.MarkSequencePoint(doc11, 260, 1, 260, 100)
ConvToASTIL.Emit(OpCodes.Br, cont205)
ConvToASTIL.MarkLabel(cont205)
ConvToASTIL.MarkSequencePoint(doc11, 262, 1, 262, 100)
ConvToASTIL.MarkLabel(label6)
ConvToASTIL.MarkSequencePoint(doc11, 264, 1, 264, 100)
ConvToASTIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Token)
ConvToASTIL.MarkSequencePoint(doc11, 266, 1, 266, 100)
ConvToASTIL.Emit(OpCodes.Ret)
Dim typ53(-1) As Type
ReDim Preserve typ53(UBound(typ53) + 1)
typ53(UBound(typ53)) = GetType(Token)
ReDim Preserve typ53(UBound(typ53) + 1)
typ53(UBound(typ53)) = GetType(System.Boolean)
Dim ASTEmit As MethodBuilder = Evaluator.DefineMethod("ASTEmit", MethodAttributes.Public, GetType(System.Void), typ53)
Dim ASTEmitIL As ILGenerator = ASTEmit.GetILGenerator()
Dim ASTEmitparam01 As ParameterBuilder = ASTEmit.DefineParameter(1, ParameterAttributes.None, "tok")
Dim ASTEmitparam02 As ParameterBuilder = ASTEmit.DefineParameter(2, ParameterAttributes.None, "emt")
ASTEmitIL.MarkSequencePoint(doc11, 270, 1, 270, 100)
Dim locbldr205 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr205.SetLocalSymInfo("isop")
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ54(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ReDim Preserve typ54(UBound(typ54) + 1)
typ54(UBound(typ54)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, isOp)
Typ = isOp.ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 0)
ASTEmitIL.MarkSequencePoint(doc11, 271, 1, 271, 100)
Dim locbldr206 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Op))
locbldr206.SetLocalSymInfo("optok")
ASTEmitIL.Emit(OpCodes.Newobj, GetType(Op).GetConstructor(Type.EmptyTypes))
ASTEmitIL.Emit(OpCodes.Stloc, 1)
ASTEmitIL.MarkSequencePoint(doc11, 272, 1, 272, 100)
Dim locbldr207 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Token))
locbldr207.SetLocalSymInfo("rc")
ASTEmitIL.Emit(OpCodes.Newobj, GetType(Token).GetConstructor(Type.EmptyTypes))
ASTEmitIL.Emit(OpCodes.Stloc, 2)
ASTEmitIL.MarkSequencePoint(doc11, 273, 1, 273, 100)
Dim locbldr208 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Token))
locbldr208.SetLocalSymInfo("lc")
ASTEmitIL.Emit(OpCodes.Newobj, GetType(Token).GetConstructor(Type.EmptyTypes))
ASTEmitIL.Emit(OpCodes.Stloc, 3)
ASTEmitIL.MarkSequencePoint(doc11, 274, 1, 274, 100)
Dim locbldr209 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Int32))
locbldr209.SetLocalSymInfo("lcint")
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 4)
ASTEmitIL.MarkSequencePoint(doc11, 275, 1, 275, 100)
Dim locbldr210 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Int32))
locbldr210.SetLocalSymInfo("rcint")
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 5)
ASTEmitIL.MarkSequencePoint(doc11, 276, 1, 276, 100)
Dim locbldr211 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Type))
locbldr211.SetLocalSymInfo("lctyp")
ASTEmitIL.Emit(OpCodes.Ldnull)
ASTEmitIL.Emit(OpCodes.Stloc, 6)
ASTEmitIL.MarkSequencePoint(doc11, 277, 1, 277, 100)
Dim locbldr212 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Type))
locbldr212.SetLocalSymInfo("rctyp")
ASTEmitIL.Emit(OpCodes.Ldnull)
ASTEmitIL.Emit(OpCodes.Stloc, 7)
ASTEmitIL.MarkSequencePoint(doc11, 278, 1, 278, 100)
Dim locbldr213 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Type))
locbldr213.SetLocalSymInfo("typ")
ASTEmitIL.MarkSequencePoint(doc11, 279, 1, 279, 100)
Dim locbldr214 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr214.SetLocalSymInfo("b")
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc11, 280, 1, 280, 100)
Dim locbldr215 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(TypeTok))
locbldr215.SetLocalSymInfo("tt")
ASTEmitIL.Emit(OpCodes.Ldnull)
ASTEmitIL.Emit(OpCodes.Stloc, 10)
ASTEmitIL.MarkSequencePoint(doc11, 281, 1, 281, 100)
Dim locbldr216 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Int32))
locbldr216.SetLocalSymInfo("i")
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc11, 282, 1, 282, 100)
Dim locbldr217 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Int32))
locbldr217.SetLocalSymInfo("j")
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 12)
ASTEmitIL.MarkSequencePoint(doc11, 283, 1, 283, 100)
Dim locbldr218 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Int32))
locbldr218.SetLocalSymInfo("len")
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 13)
ASTEmitIL.MarkSequencePoint(doc11, 284, 1, 284, 100)
Dim locbldr219 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr219.SetLocalSymInfo("instflg")
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 14)
ASTEmitIL.MarkSequencePoint(doc11, 286, 1, 286, 100)
Dim label9 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc11, 288, 1, 288, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa206 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru206 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont206 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru206)
ASTEmitIL.Emit(OpCodes.Br, fa206)
ASTEmitIL.MarkLabel(tru206)
ASTEmitIL.MarkSequencePoint(doc11, 290, 1, 290, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Stloc, 1)
ASTEmitIL.MarkSequencePoint(doc11, 291, 1, 291, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Op)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Op).GetField("RChild"))
Typ = GetType(Op).GetField("RChild").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 2)
ASTEmitIL.MarkSequencePoint(doc11, 292, 1, 292, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Op)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Op).GetField("LChild"))
Typ = GetType(Op).GetField("LChild").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 3)
ASTEmitIL.MarkSequencePoint(doc11, 293, 1, 293, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ55(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Token)
ReDim Preserve typ55(UBound(typ55) + 1)
typ55(UBound(typ55)) = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ReDim Preserve typ55(UBound(typ55) + 1)
typ55(UBound(typ55)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc11, 294, 1, 294, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 6)
ASTEmitIL.MarkSequencePoint(doc11, 295, 1, 295, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ56(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Token)
ReDim Preserve typ56(UBound(typ56) + 1)
typ56(UBound(typ56)) = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ReDim Preserve typ56(UBound(typ56) + 1)
typ56(UBound(typ56)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc11, 296, 1, 296, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 7)
ASTEmitIL.MarkSequencePoint(doc11, 298, 1, 298, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa207 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru207 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont207 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru207)
ASTEmitIL.Emit(OpCodes.Br, fa207)
ASTEmitIL.MarkLabel(tru207)
ASTEmitIL.MarkSequencePoint(doc11, 299, 1, 299, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(System.String))
Dim typ57 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ57))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ57).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc11, 300, 1, 300, 100)
Dim typ58(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
ReDim Preserve typ58(UBound(typ58) + 1)
typ58(UBound(typ58)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ58))
Typ = Typ03.GetMethod("Equals", typ58).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc11, 301, 1, 301, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetField("StringFlg"))
ASTEmitIL.MarkSequencePoint(doc11, 302, 1, 302, 100)
ASTEmitIL.Emit(OpCodes.Br, cont207)
ASTEmitIL.MarkLabel(fa207)
ASTEmitIL.Emit(OpCodes.Br, cont207)
ASTEmitIL.MarkLabel(cont207)
ASTEmitIL.MarkSequencePoint(doc11, 304, 1, 304, 100)
Dim typ59(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Type)
ReDim Preserve typ59(UBound(typ59) + 1)
typ59(UBound(typ59)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Equals", typ59))
Typ = Typ03.GetMethod("Equals", typ59).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc11, 305, 1, 305, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa208 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru208 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont208 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru208)
ASTEmitIL.Emit(OpCodes.Br, fa208)
ASTEmitIL.MarkLabel(tru208)
ASTEmitIL.MarkSequencePoint(doc11, 306, 1, 306, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_IsPrimitive", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_IsPrimitive", Type.EmptyTypes).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetField("OpCodeSuppFlg"))
ASTEmitIL.MarkSequencePoint(doc11, 307, 1, 307, 100)
ASTEmitIL.Emit(OpCodes.Br, cont208)
ASTEmitIL.MarkLabel(fa208)
ASTEmitIL.MarkSequencePoint(doc11, 308, 1, 308, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetField("OpCodeSuppFlg"))
ASTEmitIL.MarkSequencePoint(doc11, 309, 1, 309, 100)
ASTEmitIL.Emit(OpCodes.Br, cont208)
ASTEmitIL.MarkLabel(cont208)
ASTEmitIL.MarkSequencePoint(doc11, 313, 1, 313, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(ConditionalOp))
Dim typ61 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ61))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ61).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc11, 314, 1, 314, 100)
Dim typ62(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Op)
ASTEmitIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ62(UBound(typ62) + 1)
typ62(UBound(typ62)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ62))
Typ = Typ03.GetMethod("IsInstanceOfType", typ62).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc11, 316, 1, 316, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa209 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru209 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont209 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru209)
ASTEmitIL.Emit(OpCodes.Br, fa209)
ASTEmitIL.MarkLabel(tru209)
ASTEmitIL.MarkSequencePoint(doc11, 317, 1, 317, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(System.Boolean))
Dim typ63 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ63))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ63).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc11, 318, 1, 318, 100)
ASTEmitIL.Emit(OpCodes.Br, cont209)
ASTEmitIL.MarkLabel(fa209)
ASTEmitIL.MarkSequencePoint(doc11, 319, 1, 319, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Type)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc11, 320, 1, 320, 100)
ASTEmitIL.Emit(OpCodes.Br, cont209)
ASTEmitIL.MarkLabel(cont209)
ASTEmitIL.MarkSequencePoint(doc11, 322, 1, 322, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa210 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru210 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont210 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru210)
ASTEmitIL.Emit(OpCodes.Br, fa210)
ASTEmitIL.MarkLabel(tru210)
ASTEmitIL.MarkSequencePoint(doc11, 323, 1, 323, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Type)
ASTEmitIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetField("LeftOp"))
ASTEmitIL.MarkSequencePoint(doc11, 324, 1, 324, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Type)
ASTEmitIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetField("RightOp"))
ASTEmitIL.MarkSequencePoint(doc11, 325, 1, 325, 100)
Dim typ64(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Op)
ReDim Preserve typ64(UBound(typ64) + 1)
typ64(UBound(typ64)) = Typ
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ64(UBound(typ64) + 1)
typ64(UBound(typ64)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitOp", typ64))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitOp", typ64).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc11, 326, 1, 326, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetField("StringFlg"))
ASTEmitIL.MarkSequencePoint(doc11, 327, 1, 327, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetField("OpCodeSuppFlg"))
ASTEmitIL.MarkSequencePoint(doc11, 328, 1, 328, 100)
ASTEmitIL.Emit(OpCodes.Br, cont210)
ASTEmitIL.MarkLabel(fa210)
ASTEmitIL.Emit(OpCodes.Br, cont210)
ASTEmitIL.MarkLabel(cont210)
ASTEmitIL.MarkSequencePoint(doc11, 335, 1, 335, 100)
ASTEmitIL.Emit(OpCodes.Br, cont206)
ASTEmitIL.MarkLabel(fa206)
ASTEmitIL.MarkSequencePoint(doc11, 337, 1, 337, 100)
Dim locbldr220 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Type))
locbldr220.SetLocalSymInfo("src1")
ASTEmitIL.MarkSequencePoint(doc11, 338, 1, 338, 100)
Dim locbldr221 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Type))
locbldr221.SetLocalSymInfo("snk1")
ASTEmitIL.MarkSequencePoint(doc11, 340, 1, 340, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(StringLiteral))
Dim typ65 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ65))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ65).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc11, 341, 1, 341, 100)
Dim typ66(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ66(UBound(typ66) + 1)
typ66(UBound(typ66)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ66))
Typ = Typ03.GetMethod("IsInstanceOfType", typ66).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc11, 343, 1, 343, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa211 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru211 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont211 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru211)
ASTEmitIL.Emit(OpCodes.Br, fa211)
ASTEmitIL.MarkLabel(tru211)
ASTEmitIL.MarkSequencePoint(doc11, 344, 1, 344, 100)
Dim locbldr222 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(StringLiteral))
locbldr222.SetLocalSymInfo("slit")
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Stloc, 17)
ASTEmitIL.MarkSequencePoint(doc11, 345, 1, 345, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(StringLiteral)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(StringLiteral).GetField("Conv"))
Typ = GetType(StringLiteral).GetField("Conv").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa212 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru212 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont212 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru212)
ASTEmitIL.Emit(OpCodes.Br, fa212)
ASTEmitIL.MarkLabel(tru212)
ASTEmitIL.MarkSequencePoint(doc11, 347, 1, 347, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(StringLiteral)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(StringLiteral).GetField("LitTyp"))
Typ = GetType(StringLiteral).GetField("LitTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 10)
ASTEmitIL.MarkSequencePoint(doc11, 348, 1, 348, 100)
Dim typ67(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
ReDim Preserve typ67(UBound(typ67) + 1)
typ67(UBound(typ67)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ67))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ67).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc11, 350, 1, 350, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa213 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru213 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont213 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru213)
ASTEmitIL.Emit(OpCodes.Br, fa213)
ASTEmitIL.MarkLabel(tru213)
ASTEmitIL.MarkSequencePoint(doc11, 351, 1, 351, 100)
Dim typ68(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(StringLiteral)
ReDim Preserve typ68(UBound(typ68) + 1)
typ68(UBound(typ68)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLiteral", typ68))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLiteral", typ68).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc11, 352, 1, 352, 100)
ASTEmitIL.Emit(OpCodes.Br, cont213)
ASTEmitIL.MarkLabel(fa213)
ASTEmitIL.Emit(OpCodes.Br, cont213)
ASTEmitIL.MarkLabel(cont213)
ASTEmitIL.MarkSequencePoint(doc11, 354, 1, 354, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(StringLiteral)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(StringLiteral).GetField("MemberAccessFlg"))
Typ = GetType(StringLiteral).GetField("MemberAccessFlg").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa214 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru214 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont214 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru214)
ASTEmitIL.Emit(OpCodes.Br, fa214)
ASTEmitIL.MarkLabel(tru214)
ASTEmitIL.MarkSequencePoint(doc11, 355, 1, 355, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(ASMFactory).GetField("ChainFlg"))
ASTEmitIL.MarkSequencePoint(doc11, 356, 1, 356, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ69(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(StringLiteral)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(StringLiteral).GetField("MemberToAccess"))
Typ = GetType(StringLiteral).GetField("MemberToAccess").FieldType
ReDim Preserve typ69(UBound(typ69) + 1)
typ69(UBound(typ69)) = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ReDim Preserve typ69(UBound(typ69) + 1)
typ69(UBound(typ69)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc11, 357, 1, 357, 100)
ASTEmitIL.Emit(OpCodes.Br, cont214)
ASTEmitIL.MarkLabel(fa214)
ASTEmitIL.Emit(OpCodes.Br, cont214)
ASTEmitIL.MarkLabel(cont214)
ASTEmitIL.MarkSequencePoint(doc11, 359, 1, 359, 100)
ASTEmitIL.Emit(OpCodes.Br, label9)
ASTEmitIL.MarkSequencePoint(doc11, 361, 1, 361, 100)
ASTEmitIL.Emit(OpCodes.Br, cont212)
ASTEmitIL.MarkLabel(fa212)
ASTEmitIL.MarkSequencePoint(doc11, 363, 1, 363, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(StringLiteral)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(StringLiteral).GetField("LitTyp"))
Typ = GetType(StringLiteral).GetField("LitTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 10)
ASTEmitIL.MarkSequencePoint(doc11, 364, 1, 364, 100)
Dim typ70(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
ReDim Preserve typ70(UBound(typ70) + 1)
typ70(UBound(typ70)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ70))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ70).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc11, 366, 1, 366, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa215 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru215 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont215 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru215)
ASTEmitIL.Emit(OpCodes.Br, fa215)
ASTEmitIL.MarkLabel(tru215)
ASTEmitIL.MarkSequencePoint(doc11, 367, 1, 367, 100)
Dim typ71(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(StringLiteral)
ReDim Preserve typ71(UBound(typ71) + 1)
typ71(UBound(typ71)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLiteral", typ71))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLiteral", typ71).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc11, 368, 1, 368, 100)
ASTEmitIL.Emit(OpCodes.Br, cont215)
ASTEmitIL.MarkLabel(fa215)
ASTEmitIL.Emit(OpCodes.Br, cont215)
ASTEmitIL.MarkLabel(cont215)
ASTEmitIL.MarkSequencePoint(doc11, 370, 1, 370, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(StringLiteral)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(StringLiteral).GetField("MemberAccessFlg"))
Typ = GetType(StringLiteral).GetField("MemberAccessFlg").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa216 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru216 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont216 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru216)
ASTEmitIL.Emit(OpCodes.Br, fa216)
ASTEmitIL.MarkLabel(tru216)
ASTEmitIL.MarkSequencePoint(doc11, 371, 1, 371, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(ASMFactory).GetField("ChainFlg"))
ASTEmitIL.MarkSequencePoint(doc11, 372, 1, 372, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ72(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(StringLiteral)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(StringLiteral).GetField("MemberToAccess"))
Typ = GetType(StringLiteral).GetField("MemberToAccess").FieldType
ReDim Preserve typ72(UBound(typ72) + 1)
typ72(UBound(typ72)) = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ReDim Preserve typ72(UBound(typ72) + 1)
typ72(UBound(typ72)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc11, 373, 1, 373, 100)
ASTEmitIL.Emit(OpCodes.Br, cont216)
ASTEmitIL.MarkLabel(fa216)
ASTEmitIL.Emit(OpCodes.Br, cont216)
ASTEmitIL.MarkLabel(cont216)
ASTEmitIL.MarkSequencePoint(doc11, 375, 1, 375, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa217 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru217 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont217 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru217)
ASTEmitIL.Emit(OpCodes.Br, fa217)
ASTEmitIL.MarkLabel(tru217)
ASTEmitIL.MarkSequencePoint(doc11, 376, 1, 376, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 15)
ASTEmitIL.MarkSequencePoint(doc11, 377, 1, 377, 100)
ASTEmitIL.Emit(OpCodes.Br, cont217)
ASTEmitIL.MarkLabel(fa217)
ASTEmitIL.Emit(OpCodes.Br, cont217)
ASTEmitIL.MarkLabel(cont217)
ASTEmitIL.MarkSequencePoint(doc11, 379, 1, 379, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(StringLiteral)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(StringLiteral).GetField("TTok"))
Typ = GetType(StringLiteral).GetField("TTok").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 10)
ASTEmitIL.MarkSequencePoint(doc11, 380, 1, 380, 100)
Dim typ73(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
ReDim Preserve typ73(UBound(typ73) + 1)
typ73(UBound(typ73)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ73))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ73).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc11, 382, 1, 382, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa218 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru218 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont218 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru218)
ASTEmitIL.Emit(OpCodes.Br, fa218)
ASTEmitIL.MarkLabel(tru218)
ASTEmitIL.MarkSequencePoint(doc11, 383, 1, 383, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 16)
ASTEmitIL.MarkSequencePoint(doc11, 384, 1, 384, 100)
Dim typ74(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(System.Type)
ReDim Preserve typ74(UBound(typ74) + 1)
typ74(UBound(typ74)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(System.Type)
ReDim Preserve typ74(UBound(typ74) + 1)
typ74(UBound(typ74)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitConv", typ74))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitConv", typ74).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc11, 385, 1, 385, 100)
ASTEmitIL.Emit(OpCodes.Br, cont218)
ASTEmitIL.MarkLabel(fa218)
ASTEmitIL.Emit(OpCodes.Br, cont218)
ASTEmitIL.MarkLabel(cont218)
ASTEmitIL.MarkSequencePoint(doc11, 388, 1, 388, 100)
ASTEmitIL.Emit(OpCodes.Br, label9)
ASTEmitIL.MarkSequencePoint(doc11, 389, 1, 389, 100)
ASTEmitIL.Emit(OpCodes.Br, cont212)
ASTEmitIL.MarkLabel(cont212)
ASTEmitIL.MarkSequencePoint(doc11, 390, 1, 390, 100)
ASTEmitIL.Emit(OpCodes.Br, cont211)
ASTEmitIL.MarkLabel(fa211)
ASTEmitIL.Emit(OpCodes.Br, cont211)
ASTEmitIL.MarkLabel(cont211)
ASTEmitIL.MarkSequencePoint(doc11, 392, 1, 392, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(Literal))
Dim typ75 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ75))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ75).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc11, 393, 1, 393, 100)
Dim typ76(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ76(UBound(typ76) + 1)
typ76(UBound(typ76)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ76))
Typ = Typ03.GetMethod("IsInstanceOfType", typ76).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc11, 395, 1, 395, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa219 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru219 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont219 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru219)
ASTEmitIL.Emit(OpCodes.Br, fa219)
ASTEmitIL.MarkLabel(tru219)
ASTEmitIL.MarkSequencePoint(doc11, 396, 1, 396, 100)
Dim locbldr223 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Literal))
locbldr223.SetLocalSymInfo("lit")
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Stloc, 18)
ASTEmitIL.MarkSequencePoint(doc11, 397, 1, 397, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(Literal)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Literal).GetField("Conv"))
Typ = GetType(Literal).GetField("Conv").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa220 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru220 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont220 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru220)
ASTEmitIL.Emit(OpCodes.Br, fa220)
ASTEmitIL.MarkLabel(tru220)
ASTEmitIL.MarkSequencePoint(doc11, 399, 1, 399, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(Literal)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Literal).GetField("LitTyp"))
Typ = GetType(Literal).GetField("LitTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 10)
ASTEmitIL.MarkSequencePoint(doc11, 400, 1, 400, 100)
Dim typ77(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
ReDim Preserve typ77(UBound(typ77) + 1)
typ77(UBound(typ77)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ77))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ77).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc11, 402, 1, 402, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa221 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru221 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont221 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru221)
ASTEmitIL.Emit(OpCodes.Br, fa221)
ASTEmitIL.MarkLabel(tru221)
ASTEmitIL.MarkSequencePoint(doc11, 403, 1, 403, 100)
Dim typ78(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(Literal)
ReDim Preserve typ78(UBound(typ78) + 1)
typ78(UBound(typ78)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLiteral", typ78))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLiteral", typ78).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc11, 404, 1, 404, 100)
ASTEmitIL.Emit(OpCodes.Br, cont221)
ASTEmitIL.MarkLabel(fa221)
ASTEmitIL.Emit(OpCodes.Br, cont221)
ASTEmitIL.MarkLabel(cont221)
ASTEmitIL.MarkSequencePoint(doc11, 406, 1, 406, 100)
ASTEmitIL.Emit(OpCodes.Br, label9)
ASTEmitIL.MarkSequencePoint(doc11, 408, 1, 408, 100)
ASTEmitIL.Emit(OpCodes.Br, cont220)
ASTEmitIL.MarkLabel(fa220)
ASTEmitIL.MarkSequencePoint(doc11, 411, 1, 411, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa222 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru222 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont222 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru222)
ASTEmitIL.Emit(OpCodes.Br, fa222)
ASTEmitIL.MarkLabel(tru222)
ASTEmitIL.MarkSequencePoint(doc11, 412, 1, 412, 100)
Dim typ79(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(Literal)
ReDim Preserve typ79(UBound(typ79) + 1)
typ79(UBound(typ79)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLiteral", typ79))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLiteral", typ79).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc11, 413, 1, 413, 100)
ASTEmitIL.Emit(OpCodes.Br, cont222)
ASTEmitIL.MarkLabel(fa222)
ASTEmitIL.Emit(OpCodes.Br, cont222)
ASTEmitIL.MarkLabel(cont222)
ASTEmitIL.MarkSequencePoint(doc11, 415, 1, 415, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(Literal)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Literal).GetField("LitTyp"))
Typ = GetType(Literal).GetField("LitTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 10)
ASTEmitIL.MarkSequencePoint(doc11, 416, 1, 416, 100)
Dim typ80(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
ReDim Preserve typ80(UBound(typ80) + 1)
typ80(UBound(typ80)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ80))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ80).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc11, 418, 1, 418, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa223 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru223 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont223 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru223)
ASTEmitIL.Emit(OpCodes.Br, fa223)
ASTEmitIL.MarkLabel(tru223)
ASTEmitIL.MarkSequencePoint(doc11, 419, 1, 419, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 15)
ASTEmitIL.MarkSequencePoint(doc11, 420, 1, 420, 100)
ASTEmitIL.Emit(OpCodes.Br, cont223)
ASTEmitIL.MarkLabel(fa223)
ASTEmitIL.Emit(OpCodes.Br, cont223)
ASTEmitIL.MarkLabel(cont223)
ASTEmitIL.MarkSequencePoint(doc11, 422, 1, 422, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(Literal)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Literal).GetField("TTok"))
Typ = GetType(Literal).GetField("TTok").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 10)
ASTEmitIL.MarkSequencePoint(doc11, 423, 1, 423, 100)
Dim typ81(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
ReDim Preserve typ81(UBound(typ81) + 1)
typ81(UBound(typ81)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ81))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ81).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc11, 425, 1, 425, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa224 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru224 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont224 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru224)
ASTEmitIL.Emit(OpCodes.Br, fa224)
ASTEmitIL.MarkLabel(tru224)
ASTEmitIL.MarkSequencePoint(doc11, 426, 1, 426, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 16)
ASTEmitIL.MarkSequencePoint(doc11, 427, 1, 427, 100)
Dim typ82(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(System.Type)
ReDim Preserve typ82(UBound(typ82) + 1)
typ82(UBound(typ82)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(System.Type)
ReDim Preserve typ82(UBound(typ82) + 1)
typ82(UBound(typ82)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitConv", typ82))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitConv", typ82).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc11, 428, 1, 428, 100)
ASTEmitIL.Emit(OpCodes.Br, cont224)
ASTEmitIL.MarkLabel(fa224)
ASTEmitIL.Emit(OpCodes.Br, cont224)
ASTEmitIL.MarkLabel(cont224)
ASTEmitIL.MarkSequencePoint(doc11, 431, 1, 431, 100)
ASTEmitIL.Emit(OpCodes.Br, label9)
ASTEmitIL.MarkSequencePoint(doc11, 432, 1, 432, 100)
ASTEmitIL.Emit(OpCodes.Br, cont220)
ASTEmitIL.MarkLabel(cont220)
ASTEmitIL.MarkSequencePoint(doc11, 433, 1, 433, 100)
ASTEmitIL.Emit(OpCodes.Br, cont219)
ASTEmitIL.MarkLabel(fa219)
ASTEmitIL.Emit(OpCodes.Br, cont219)
ASTEmitIL.MarkLabel(cont219)
ASTEmitIL.MarkSequencePoint(doc11, 435, 1, 435, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(Ident))
Dim typ83 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ83))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ83).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc11, 436, 1, 436, 100)
Dim typ84(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ84(UBound(typ84) + 1)
typ84(UBound(typ84)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ84))
Typ = Typ03.GetMethod("IsInstanceOfType", typ84).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc11, 438, 1, 438, 100)
Dim locbldr224 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.String))
locbldr224.SetLocalSymInfo("idtnam")
ASTEmitIL.MarkSequencePoint(doc11, 439, 1, 439, 100)
Dim locbldr225 As LocalBuilder = ASTEmitIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"))
locbldr225.SetLocalSymInfo("vr")
ASTEmitIL.MarkSequencePoint(doc11, 440, 1, 440, 100)
Dim locbldr226 As LocalBuilder = ASTEmitIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.FieldItem"))
locbldr226.SetLocalSymInfo("fldr")
ASTEmitIL.MarkSequencePoint(doc11, 441, 1, 441, 100)
Dim locbldr227 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(FieldInfo))
locbldr227.SetLocalSymInfo("idtfldinf")
ASTEmitIL.MarkSequencePoint(doc11, 442, 1, 442, 100)
Dim locbldr228 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr228.SetLocalSymInfo("idtb1")
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 23)
ASTEmitIL.MarkSequencePoint(doc11, 443, 1, 443, 100)
Dim locbldr229 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr229.SetLocalSymInfo("idtb2")
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 24)
ASTEmitIL.MarkSequencePoint(doc11, 444, 1, 444, 100)
Dim locbldr230 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Ident))
locbldr230.SetLocalSymInfo("idt")
ASTEmitIL.MarkSequencePoint(doc11, 445, 1, 445, 100)
Dim locbldr231 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Int32))
locbldr231.SetLocalSymInfo("idtcomp")
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 26)
ASTEmitIL.MarkSequencePoint(doc11, 446, 1, 446, 100)
Dim locbldr232 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Type))
locbldr232.SetLocalSymInfo("idttyp")
ASTEmitIL.MarkSequencePoint(doc11, 447, 1, 447, 100)
Dim locbldr233 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr233.SetLocalSymInfo("idtisstatic")
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 28)
ASTEmitIL.MarkSequencePoint(doc11, 448, 1, 448, 100)
Dim locbldr234 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Expr))
locbldr234.SetLocalSymInfo("arrlocexpr")
ASTEmitIL.MarkSequencePoint(doc11, 449, 1, 449, 100)
Dim locbldr235 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Ident))
locbldr235.SetLocalSymInfo("idtarrloc")
ASTEmitIL.MarkSequencePoint(doc11, 450, 1, 450, 100)
Dim locbldr236 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.String).MakeArrayType())
locbldr236.SetLocalSymInfo("idtnamarr")
ASTEmitIL.MarkSequencePoint(doc11, 453, 1, 453, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa225 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru225 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont225 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru225)
ASTEmitIL.Emit(OpCodes.Br, fa225)
ASTEmitIL.MarkLabel(tru225)
ASTEmitIL.MarkSequencePoint(doc11, 454, 1, 454, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Stloc, 25)
ASTEmitIL.MarkSequencePoint(doc11, 455, 1, 455, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(Ident)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 19)
ASTEmitIL.MarkSequencePoint(doc11, 456, 1, 456, 100)
Dim typ85(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(System.String)
ReDim Preserve typ85(UBound(typ85) + 1)
typ85(UBound(typ85)) = Typ
ASTEmitIL.Emit(OpCodes.Ldstr, ":")
Typ = GetType(System.String)
ReDim Preserve typ85(UBound(typ85) + 1)
typ85(UBound(typ85)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ParseUtils).GetMethod("StringParser", typ85))
Typ = GetType(ParseUtils).GetMethod("StringParser", typ85).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 31)
ASTEmitIL.MarkSequencePoint(doc11, 457, 1, 457, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc11, 458, 1, 458, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.String).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Sub)
ASTEmitIL.Emit(OpCodes.Stloc, 13)
ASTEmitIL.MarkSequencePoint(doc11, 460, 1, 460, 100)
Dim typ86(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ86(UBound(typ86) + 1)
typ86(UBound(typ86)) = Typ
ASTEmitIL.Emit(OpCodes.Ldstr, "me")
Typ = GetType(System.String)
ReDim Preserve typ86(UBound(typ86) + 1)
typ86(UBound(typ86)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ86))
Typ = GetType(String).GetMethod("Compare", typ86).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 26)
ASTEmitIL.MarkSequencePoint(doc11, 461, 1, 461, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 26)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa226 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru226 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont226 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru226)
ASTEmitIL.Emit(OpCodes.Br, fa226)
ASTEmitIL.MarkLabel(tru226)
ASTEmitIL.MarkSequencePoint(doc11, 462, 1, 462, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Add)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc11, 463, 1, 463, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 23)
ASTEmitIL.MarkSequencePoint(doc11, 464, 1, 464, 100)
ASTEmitIL.Emit(OpCodes.Br, cont226)
ASTEmitIL.MarkLabel(fa226)
ASTEmitIL.Emit(OpCodes.Br, cont226)
ASTEmitIL.MarkLabel(cont226)
ASTEmitIL.MarkSequencePoint(doc11, 466, 1, 466, 100)
Dim label10 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc11, 467, 1, 467, 100)
Dim label11 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc11, 468, 1, 468, 100)
Dim label12 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc11, 470, 1, 470, 100)
ASTEmitIL.MarkLabel(label10)
ASTEmitIL.MarkSequencePoint(doc11, 471, 1, 471, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Add)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc11, 473, 1, 473, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa227 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru227 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont227 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru227)
ASTEmitIL.Emit(OpCodes.Br, fa227)
ASTEmitIL.MarkLabel(tru227)
ASTEmitIL.MarkSequencePoint(doc11, 475, 1, 475, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 23)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa228 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru228 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont228 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru228)
ASTEmitIL.Emit(OpCodes.Br, fa228)
ASTEmitIL.MarkLabel(tru228)
ASTEmitIL.MarkSequencePoint(doc11, 476, 1, 476, 100)
Dim typ87(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ87(UBound(typ87) + 1)
typ87(UBound(typ87)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindVar", typ87))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindVar", typ87).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 20)
ASTEmitIL.MarkSequencePoint(doc11, 477, 1, 477, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 20)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldnull)
Dim fa229 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru229 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont229 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, fa229)
ASTEmitIL.Emit(OpCodes.Br, tru229)
ASTEmitIL.MarkLabel(tru229)
ASTEmitIL.MarkSequencePoint(doc11, 478, 1, 478, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa230 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru230 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont230 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru230)
ASTEmitIL.Emit(OpCodes.Br, fa230)
ASTEmitIL.MarkLabel(tru230)
ASTEmitIL.MarkSequencePoint(doc11, 479, 1, 479, 100)
Dim typ88(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 20)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("Index"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("Index").FieldType
ReDim Preserve typ88(UBound(typ88) + 1)
typ88(UBound(typ88)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 20)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("LocArg"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("LocArg").FieldType
ReDim Preserve typ88(UBound(typ88) + 1)
typ88(UBound(typ88)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLocLd", typ88))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLocLd", typ88).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc11, 480, 1, 480, 100)
ASTEmitIL.Emit(OpCodes.Br, cont230)
ASTEmitIL.MarkLabel(fa230)
ASTEmitIL.Emit(OpCodes.Br, cont230)
ASTEmitIL.MarkLabel(cont230)
ASTEmitIL.MarkSequencePoint(doc11, 481, 1, 481, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 20)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc11, 482, 1, 482, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 20)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc11, 483, 1, 483, 100)
ASTEmitIL.Emit(OpCodes.Br, label12)
ASTEmitIL.MarkSequencePoint(doc11, 484, 1, 484, 100)
ASTEmitIL.Emit(OpCodes.Br, cont229)
ASTEmitIL.MarkLabel(fa229)
ASTEmitIL.Emit(OpCodes.Br, cont229)
ASTEmitIL.MarkLabel(cont229)
ASTEmitIL.MarkSequencePoint(doc11, 485, 1, 485, 100)
ASTEmitIL.Emit(OpCodes.Br, cont228)
ASTEmitIL.MarkLabel(fa228)
ASTEmitIL.Emit(OpCodes.Br, cont228)
ASTEmitIL.MarkLabel(cont228)
ASTEmitIL.MarkSequencePoint(doc11, 487, 1, 487, 100)
Dim typ89(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ89(UBound(typ89) + 1)
typ89(UBound(typ89)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadClass", typ89))
Typ = GetType(Loader).GetMethod("LoadClass", typ89).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc11, 488, 1, 488, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 28)
ASTEmitIL.MarkSequencePoint(doc11, 490, 1, 490, 100)
ASTEmitIL.Emit(OpCodes.Br, cont227)
ASTEmitIL.MarkLabel(fa227)
ASTEmitIL.MarkSequencePoint(doc11, 492, 1, 492, 100)
Dim typ90(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
ReDim Preserve typ90(UBound(typ90) + 1)
typ90(UBound(typ90)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ90(UBound(typ90) + 1)
typ90(UBound(typ90)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadField", typ90))
Typ = GetType(Loader).GetMethod("LoadField", typ90).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 22)
ASTEmitIL.MarkSequencePoint(doc11, 493, 1, 493, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("MemberTyp"))
Typ = GetType(Loader).GetField("MemberTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc11, 494, 1, 494, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("MemberTyp"))
Typ = GetType(Loader).GetField("MemberTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc11, 495, 1, 495, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa231 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru231 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont231 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru231)
ASTEmitIL.Emit(OpCodes.Br, fa231)
ASTEmitIL.MarkLabel(tru231)
ASTEmitIL.MarkSequencePoint(doc11, 497, 1, 497, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("FldLitFlag"))
Typ = GetType(Loader).GetField("FldLitFlag").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa232 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru232 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont232 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru232)
ASTEmitIL.Emit(OpCodes.Br, fa232)
ASTEmitIL.MarkLabel(tru232)
ASTEmitIL.MarkSequencePoint(doc11, 498, 1, 498, 100)
Dim typ91(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(FieldInfo)
ReDim Preserve typ91(UBound(typ91) + 1)
typ91(UBound(typ91)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(System.Boolean)
ReDim Preserve typ91(UBound(typ91) + 1)
typ91(UBound(typ91)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ91))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ91).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc11, 499, 1, 499, 100)
ASTEmitIL.Emit(OpCodes.Br, cont232)
ASTEmitIL.MarkLabel(fa232)
ASTEmitIL.MarkSequencePoint(doc11, 501, 1, 501, 100)
Dim locbldr237 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(ConstLiteral))
locbldr237.SetLocalSymInfo("constlit")
ASTEmitIL.Emit(OpCodes.Newobj, GetType(ConstLiteral).GetConstructor(Type.EmptyTypes))
ASTEmitIL.Emit(OpCodes.Stloc, 32)
ASTEmitIL.MarkSequencePoint(doc11, 502, 1, 502, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 32)
Typ = GetType(ConstLiteral)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("FldLitVal"))
Typ = GetType(Loader).GetField("FldLitVal").FieldType
ASTEmitIL.Emit(OpCodes.Stfld, GetType(ConstLiteral).GetField("ConstVal"))
ASTEmitIL.MarkSequencePoint(doc11, 503, 1, 503, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 32)
Typ = GetType(ConstLiteral)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("FldLitTyp"))
Typ = GetType(Loader).GetField("FldLitTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stfld, GetType(ConstLiteral).GetField("ExtTyp"))
ASTEmitIL.MarkSequencePoint(doc11, 504, 1, 504, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("EnumLitFlag"))
Typ = GetType(Loader).GetField("EnumLitFlag").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa233 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru233 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont233 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru233)
ASTEmitIL.Emit(OpCodes.Br, fa233)
ASTEmitIL.MarkLabel(tru233)
ASTEmitIL.MarkSequencePoint(doc11, 505, 1, 505, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 32)
Typ = GetType(ConstLiteral)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("EnumLitTyp"))
Typ = GetType(Loader).GetField("EnumLitTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stfld, GetType(ConstLiteral).GetField("IntTyp"))
ASTEmitIL.MarkSequencePoint(doc11, 506, 1, 506, 100)
ASTEmitIL.Emit(OpCodes.Br, cont233)
ASTEmitIL.MarkLabel(fa233)
ASTEmitIL.MarkSequencePoint(doc11, 507, 1, 507, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 32)
Typ = GetType(ConstLiteral)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("FldLitTyp"))
Typ = GetType(Loader).GetField("FldLitTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stfld, GetType(ConstLiteral).GetField("IntTyp"))
ASTEmitIL.MarkSequencePoint(doc11, 508, 1, 508, 100)
ASTEmitIL.Emit(OpCodes.Br, cont233)
ASTEmitIL.MarkLabel(cont233)
ASTEmitIL.MarkSequencePoint(doc11, 510, 1, 510, 100)
Dim locbldr238 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Literal))
locbldr238.SetLocalSymInfo("constl")
Dim typ92(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 32)
Typ = GetType(ConstLiteral)
ReDim Preserve typ92(UBound(typ92) + 1)
typ92(UBound(typ92)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessConst", typ92))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessConst", typ92).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 33)
ASTEmitIL.MarkSequencePoint(doc11, 511, 1, 511, 100)
Dim typ93(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 33)
Typ = GetType(Literal)
ReDim Preserve typ93(UBound(typ93) + 1)
typ93(UBound(typ93)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLiteral", typ93))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLiteral", typ93).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc11, 512, 1, 512, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("FldLitTyp"))
Typ = GetType(Loader).GetField("FldLitTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc11, 513, 1, 513, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("FldLitTyp"))
Typ = GetType(Loader).GetField("FldLitTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc11, 515, 1, 515, 100)
ASTEmitIL.Emit(OpCodes.Br, cont232)
ASTEmitIL.MarkLabel(cont232)
ASTEmitIL.MarkSequencePoint(doc11, 517, 1, 517, 100)
ASTEmitIL.Emit(OpCodes.Br, cont231)
ASTEmitIL.MarkLabel(fa231)
ASTEmitIL.Emit(OpCodes.Br, cont231)
ASTEmitIL.MarkLabel(cont231)
ASTEmitIL.MarkSequencePoint(doc11, 519, 1, 519, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa234 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru234 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont234 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru234)
ASTEmitIL.Emit(OpCodes.Br, fa234)
ASTEmitIL.MarkLabel(tru234)
ASTEmitIL.MarkSequencePoint(doc11, 520, 1, 520, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 28)
ASTEmitIL.MarkSequencePoint(doc11, 521, 1, 521, 100)
ASTEmitIL.Emit(OpCodes.Br, cont234)
ASTEmitIL.MarkLabel(fa234)
ASTEmitIL.Emit(OpCodes.Br, cont234)
ASTEmitIL.MarkLabel(cont234)
ASTEmitIL.MarkSequencePoint(doc11, 523, 1, 523, 100)
ASTEmitIL.Emit(OpCodes.Br, cont227)
ASTEmitIL.MarkLabel(cont227)
ASTEmitIL.MarkSequencePoint(doc11, 525, 1, 525, 100)
ASTEmitIL.MarkLabel(label12)
ASTEmitIL.MarkSequencePoint(doc11, 527, 1, 527, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 24)
ASTEmitIL.MarkSequencePoint(doc11, 529, 1, 529, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(System.Int32)
Dim fa235 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru235 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont235 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru235)
ASTEmitIL.Emit(OpCodes.Br, fa235)
ASTEmitIL.MarkLabel(tru235)
ASTEmitIL.MarkSequencePoint(doc11, 530, 1, 530, 100)
ASTEmitIL.Emit(OpCodes.Br, label11)
ASTEmitIL.MarkSequencePoint(doc11, 531, 1, 531, 100)
ASTEmitIL.Emit(OpCodes.Br, cont235)
ASTEmitIL.MarkLabel(fa235)
ASTEmitIL.MarkSequencePoint(doc11, 532, 1, 532, 100)
ASTEmitIL.Emit(OpCodes.Br, label10)
ASTEmitIL.MarkSequencePoint(doc11, 533, 1, 533, 100)
ASTEmitIL.Emit(OpCodes.Br, cont235)
ASTEmitIL.MarkLabel(cont235)
ASTEmitIL.MarkSequencePoint(doc11, 535, 1, 535, 100)
ASTEmitIL.MarkLabel(label11)
ASTEmitIL.MarkSequencePoint(doc11, 538, 1, 538, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(Ident)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Conv"))
Typ = GetType(Ident).GetField("Conv").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa236 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru236 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont236 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru236)
ASTEmitIL.Emit(OpCodes.Br, fa236)
ASTEmitIL.MarkLabel(tru236)
ASTEmitIL.MarkSequencePoint(doc11, 540, 1, 540, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa237 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru237 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont237 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru237)
ASTEmitIL.Emit(OpCodes.Br, fa237)
ASTEmitIL.MarkLabel(tru237)
ASTEmitIL.MarkSequencePoint(doc11, 541, 1, 541, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 15)
ASTEmitIL.MarkSequencePoint(doc11, 542, 1, 542, 100)
ASTEmitIL.Emit(OpCodes.Br, cont237)
ASTEmitIL.MarkLabel(fa237)
ASTEmitIL.Emit(OpCodes.Br, cont237)
ASTEmitIL.MarkLabel(cont237)
ASTEmitIL.MarkSequencePoint(doc11, 544, 1, 544, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(Ident)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("TTok"))
Typ = GetType(Ident).GetField("TTok").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 10)
ASTEmitIL.MarkSequencePoint(doc11, 545, 1, 545, 100)
Dim typ94(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
ReDim Preserve typ94(UBound(typ94) + 1)
typ94(UBound(typ94)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ94))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ94).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc11, 547, 1, 547, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa238 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru238 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont238 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru238)
ASTEmitIL.Emit(OpCodes.Br, fa238)
ASTEmitIL.MarkLabel(tru238)
ASTEmitIL.MarkSequencePoint(doc11, 548, 1, 548, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 16)
ASTEmitIL.MarkSequencePoint(doc11, 549, 1, 549, 100)
Dim typ95(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(System.Type)
ReDim Preserve typ95(UBound(typ95) + 1)
typ95(UBound(typ95)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(System.Type)
ReDim Preserve typ95(UBound(typ95) + 1)
typ95(UBound(typ95)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitConv", typ95))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitConv", typ95).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc11, 550, 1, 550, 100)
ASTEmitIL.Emit(OpCodes.Br, cont238)
ASTEmitIL.MarkLabel(fa238)
ASTEmitIL.Emit(OpCodes.Br, cont238)
ASTEmitIL.MarkLabel(cont238)
ASTEmitIL.MarkSequencePoint(doc11, 552, 1, 552, 100)
ASTEmitIL.Emit(OpCodes.Br, cont236)
ASTEmitIL.MarkLabel(fa236)
ASTEmitIL.Emit(OpCodes.Br, cont236)
ASTEmitIL.MarkLabel(cont236)
ASTEmitIL.MarkSequencePoint(doc11, 554, 1, 554, 100)
ASTEmitIL.Emit(OpCodes.Br, label9)
ASTEmitIL.MarkSequencePoint(doc11, 555, 1, 555, 100)
ASTEmitIL.Emit(OpCodes.Br, cont225)
ASTEmitIL.MarkLabel(fa225)
ASTEmitIL.Emit(OpCodes.Br, cont225)
ASTEmitIL.MarkLabel(cont225)
ASTEmitIL.MarkSequencePoint(doc11, 557, 1, 557, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(MethodCallTok))
Dim typ96 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ96))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ96).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc11, 558, 1, 558, 100)
Dim typ97(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ97(UBound(typ97) + 1)
typ97(UBound(typ97)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ97))
Typ = Typ03.GetMethod("IsInstanceOfType", typ97).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc11, 560, 1, 560, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa239 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru239 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont239 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru239)
ASTEmitIL.Emit(OpCodes.Br, fa239)
ASTEmitIL.MarkLabel(tru239)
ASTEmitIL.MarkSequencePoint(doc11, 561, 1, 561, 100)
Dim locbldr239 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Type))
locbldr239.SetLocalSymInfo("mcparenttyp")
ASTEmitIL.MarkSequencePoint(doc11, 562, 1, 562, 100)
Dim locbldr240 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.String).MakeArrayType())
locbldr240.SetLocalSymInfo("mnstrarr")
ASTEmitIL.MarkSequencePoint(doc11, 563, 1, 563, 100)
Dim locbldr241 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(MethodInfo))
locbldr241.SetLocalSymInfo("mcmetinf")
ASTEmitIL.MarkSequencePoint(doc11, 564, 1, 564, 100)
Dim locbldr242 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Type))
locbldr242.SetLocalSymInfo("nctyp")
ASTEmitIL.MarkSequencePoint(doc11, 565, 1, 565, 100)
Dim locbldr243 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(MethodCallTok))
locbldr243.SetLocalSymInfo("mctok")
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Stloc, 38)
ASTEmitIL.MarkSequencePoint(doc11, 566, 1, 566, 100)
Dim locbldr244 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(MethodNameTok))
locbldr244.SetLocalSymInfo("mntok")
ASTEmitIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(MethodCallTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodCallTok).GetField("Name"))
Typ = GetType(MethodCallTok).GetField("Name").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 39)
ASTEmitIL.MarkSequencePoint(doc11, 567, 1, 567, 100)
Dim locbldr245 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.String))
locbldr245.SetLocalSymInfo("mnstr")
ASTEmitIL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ASTEmitIL.Emit(OpCodes.Stloc, 40)
ASTEmitIL.MarkSequencePoint(doc11, 568, 1, 568, 100)
Dim locbldr246 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Expr).MakeArrayType())
locbldr246.SetLocalSymInfo("mcparams")
ASTEmitIL.MarkSequencePoint(doc11, 569, 1, 569, 100)
Dim locbldr247 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Type).MakeArrayType())
locbldr247.SetLocalSymInfo("typarr1")
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
ASTEmitIL.Emit(OpCodes.Newarr, GetType(System.Type))
ASTEmitIL.Emit(OpCodes.Stloc, 42)
ASTEmitIL.MarkSequencePoint(doc11, 570, 1, 570, 100)
Dim locbldr248 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Type).MakeArrayType())
locbldr248.SetLocalSymInfo("typarr2")
ASTEmitIL.MarkSequencePoint(doc11, 571, 1, 571, 100)
Dim locbldr249 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Int32))
locbldr249.SetLocalSymInfo("paramlen")
ASTEmitIL.MarkSequencePoint(doc11, 572, 1, 572, 100)
Dim locbldr250 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Expr))
locbldr250.SetLocalSymInfo("curexpr")
ASTEmitIL.MarkSequencePoint(doc11, 573, 1, 573, 100)
Dim locbldr251 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Expr))
locbldr251.SetLocalSymInfo("rpnparam")
ASTEmitIL.MarkSequencePoint(doc11, 574, 1, 574, 100)
Dim locbldr252 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(Token))
locbldr252.SetLocalSymInfo("astparam")
ASTEmitIL.MarkSequencePoint(doc11, 575, 1, 575, 100)
Dim locbldr253 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(ConstructorInfo))
locbldr253.SetLocalSymInfo("ncctorinf")
ASTEmitIL.MarkSequencePoint(doc11, 576, 1, 576, 100)
Dim locbldr254 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(FieldInfo))
locbldr254.SetLocalSymInfo("mcfldinf")
ASTEmitIL.MarkSequencePoint(doc11, 577, 1, 577, 100)
Dim locbldr255 As LocalBuilder = ASTEmitIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"))
locbldr255.SetLocalSymInfo("mcvr")
ASTEmitIL.MarkSequencePoint(doc11, 578, 1, 578, 100)
Dim locbldr256 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr256.SetLocalSymInfo("mcisstatic")
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 51)
ASTEmitIL.MarkSequencePoint(doc11, 580, 1, 580, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(MethodNameTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodNameTok).GetField("Value"))
Typ = GetType(MethodNameTok).GetField("Value").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 40)
ASTEmitIL.MarkSequencePoint(doc11, 581, 1, 581, 100)
Dim typ98(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(System.String)
ReDim Preserve typ98(UBound(typ98) + 1)
typ98(UBound(typ98)) = Typ
ASTEmitIL.Emit(OpCodes.Ldstr, ":")
Typ = GetType(System.String)
ReDim Preserve typ98(UBound(typ98) + 1)
typ98(UBound(typ98)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ParseUtils).GetMethod("StringParser", typ98))
Typ = GetType(ParseUtils).GetMethod("StringParser", typ98).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 35)
ASTEmitIL.MarkSequencePoint(doc11, 582, 1, 582, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(MethodCallTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodCallTok).GetField("Params"))
Typ = GetType(MethodCallTok).GetField("Params").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 41)
ASTEmitIL.MarkSequencePoint(doc11, 583, 1, 583, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(Expr).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Sub)
ASTEmitIL.Emit(OpCodes.Stloc, 44)
ASTEmitIL.MarkSequencePoint(doc11, 584, 1, 584, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 23)
ASTEmitIL.MarkSequencePoint(doc11, 585, 1, 585, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 24)
ASTEmitIL.MarkSequencePoint(doc11, 668, 1, 668, 100)
ASTEmitIL.Emit(OpCodes.Ldnull)
ASTEmitIL.Emit(OpCodes.Stloc, 34)
ASTEmitIL.MarkSequencePoint(doc11, 669, 1, 669, 100)
ASTEmitIL.Emit(OpCodes.Ldnull)
ASTEmitIL.Emit(OpCodes.Stloc, 36)
ASTEmitIL.MarkSequencePoint(doc11, 670, 1, 670, 100)
ASTEmitIL.Emit(OpCodes.Ldnull)
ASTEmitIL.Emit(OpCodes.Stloc, 49)
ASTEmitIL.MarkSequencePoint(doc11, 672, 1, 672, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc11, 673, 1, 673, 100)
Dim locbldr257 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(System.String))
locbldr257.SetLocalSymInfo("tstr")
ASTEmitIL.MarkSequencePoint(doc11, 674, 1, 674, 100)
Dim typ99(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(System.String)
ReDim Preserve typ99(UBound(typ99) + 1)
typ99(UBound(typ99)) = Typ
ASTEmitIL.Emit(OpCodes.Ldstr, ":")
Typ = GetType(System.String)
ReDim Preserve typ99(UBound(typ99) + 1)
typ99(UBound(typ99)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ParseUtils).GetMethod("StringParser", typ99))
Typ = GetType(ParseUtils).GetMethod("StringParser", typ99).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 35)
ASTEmitIL.MarkSequencePoint(doc11, 675, 1, 675, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(System.String).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Sub)
ASTEmitIL.Emit(OpCodes.Stloc, 13)
ASTEmitIL.MarkSequencePoint(doc11, 677, 1, 677, 100)
Dim typ100(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ100(UBound(typ100) + 1)
typ100(UBound(typ100)) = Typ
ASTEmitIL.Emit(OpCodes.Ldstr, "me")
Typ = GetType(System.String)
ReDim Preserve typ100(UBound(typ100) + 1)
typ100(UBound(typ100)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ100))
Typ = GetType(String).GetMethod("Compare", typ100).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 26)
ASTEmitIL.MarkSequencePoint(doc11, 678, 1, 678, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 26)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa240 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru240 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont240 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru240)
ASTEmitIL.Emit(OpCodes.Br, fa240)
ASTEmitIL.MarkLabel(tru240)
ASTEmitIL.MarkSequencePoint(doc11, 679, 1, 679, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Add)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc11, 680, 1, 680, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 23)
ASTEmitIL.MarkSequencePoint(doc11, 681, 1, 681, 100)
ASTEmitIL.Emit(OpCodes.Br, cont240)
ASTEmitIL.MarkLabel(fa240)
ASTEmitIL.Emit(OpCodes.Br, cont240)
ASTEmitIL.MarkLabel(cont240)
ASTEmitIL.MarkSequencePoint(doc11, 683, 1, 683, 100)
Dim label13 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc11, 684, 1, 684, 100)
Dim label14 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc11, 685, 1, 685, 100)
Dim label15 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc11, 688, 1, 688, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(System.String).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
Dim fa241 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru241 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont241 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Blt, tru241)
ASTEmitIL.Emit(OpCodes.Br, fa241)
ASTEmitIL.MarkLabel(tru241)
ASTEmitIL.MarkSequencePoint(doc11, 689, 1, 689, 100)
ASTEmitIL.Emit(OpCodes.Br, label14)
ASTEmitIL.MarkSequencePoint(doc11, 690, 1, 690, 100)
ASTEmitIL.Emit(OpCodes.Br, cont241)
ASTEmitIL.MarkLabel(fa241)
ASTEmitIL.Emit(OpCodes.Br, cont241)
ASTEmitIL.MarkLabel(cont241)
ASTEmitIL.MarkSequencePoint(doc11, 692, 1, 692, 100)
ASTEmitIL.MarkLabel(label13)
ASTEmitIL.MarkSequencePoint(doc11, 693, 1, 693, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Add)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc11, 695, 1, 695, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa242 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru242 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont242 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru242)
ASTEmitIL.Emit(OpCodes.Br, fa242)
ASTEmitIL.MarkLabel(tru242)
ASTEmitIL.MarkSequencePoint(doc11, 697, 1, 697, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 23)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa243 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru243 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont243 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru243)
ASTEmitIL.Emit(OpCodes.Br, fa243)
ASTEmitIL.MarkLabel(tru243)
ASTEmitIL.MarkSequencePoint(doc11, 698, 1, 698, 100)
Dim typ101(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ101(UBound(typ101) + 1)
typ101(UBound(typ101)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindVar", typ101))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindVar", typ101).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 50)
ASTEmitIL.MarkSequencePoint(doc11, 699, 1, 699, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 50)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldnull)
Dim fa244 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru244 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont244 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, fa244)
ASTEmitIL.Emit(OpCodes.Br, tru244)
ASTEmitIL.MarkLabel(tru244)
ASTEmitIL.MarkSequencePoint(doc11, 700, 1, 700, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa245 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru245 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont245 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru245)
ASTEmitIL.Emit(OpCodes.Br, fa245)
ASTEmitIL.MarkLabel(tru245)
ASTEmitIL.MarkSequencePoint(doc11, 701, 1, 701, 100)
Dim typ102(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 50)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("Index"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("Index").FieldType
ReDim Preserve typ102(UBound(typ102) + 1)
typ102(UBound(typ102)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 50)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("LocArg"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("LocArg").FieldType
ReDim Preserve typ102(UBound(typ102) + 1)
typ102(UBound(typ102)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLocLd", typ102))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLocLd", typ102).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc11, 702, 1, 702, 100)
ASTEmitIL.Emit(OpCodes.Br, cont245)
ASTEmitIL.MarkLabel(fa245)
ASTEmitIL.Emit(OpCodes.Br, cont245)
ASTEmitIL.MarkLabel(cont245)
ASTEmitIL.MarkSequencePoint(doc11, 703, 1, 703, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 50)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc11, 704, 1, 704, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 50)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
ASTEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("VarTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 34)
ASTEmitIL.MarkSequencePoint(doc11, 705, 1, 705, 100)
ASTEmitIL.Emit(OpCodes.Br, label15)
ASTEmitIL.MarkSequencePoint(doc11, 706, 1, 706, 100)
ASTEmitIL.Emit(OpCodes.Br, cont244)
ASTEmitIL.MarkLabel(fa244)
ASTEmitIL.Emit(OpCodes.Br, cont244)
ASTEmitIL.MarkLabel(cont244)
ASTEmitIL.MarkSequencePoint(doc11, 707, 1, 707, 100)
ASTEmitIL.Emit(OpCodes.Br, cont243)
ASTEmitIL.MarkLabel(fa243)
ASTEmitIL.Emit(OpCodes.Br, cont243)
ASTEmitIL.MarkLabel(cont243)
ASTEmitIL.MarkSequencePoint(doc11, 709, 1, 709, 100)
Dim typ103(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ103(UBound(typ103) + 1)
typ103(UBound(typ103)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadClass", typ103))
Typ = GetType(Loader).GetMethod("LoadClass", typ103).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 34)
ASTEmitIL.MarkSequencePoint(doc11, 710, 1, 710, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 51)
ASTEmitIL.MarkSequencePoint(doc11, 712, 1, 712, 100)
ASTEmitIL.Emit(OpCodes.Br, cont242)
ASTEmitIL.MarkLabel(fa242)
ASTEmitIL.MarkSequencePoint(doc11, 714, 1, 714, 100)
Dim typ104(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 34)
Typ = GetType(System.Type)
ReDim Preserve typ104(UBound(typ104) + 1)
typ104(UBound(typ104)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ104(UBound(typ104) + 1)
typ104(UBound(typ104)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadField", typ104))
Typ = GetType(Loader).GetMethod("LoadField", typ104).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 49)
ASTEmitIL.MarkSequencePoint(doc11, 715, 1, 715, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("MemberTyp"))
Typ = GetType(Loader).GetField("MemberTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc11, 716, 1, 716, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("MemberTyp"))
Typ = GetType(Loader).GetField("MemberTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 34)
ASTEmitIL.MarkSequencePoint(doc11, 718, 1, 718, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa246 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru246 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont246 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru246)
ASTEmitIL.Emit(OpCodes.Br, fa246)
ASTEmitIL.MarkLabel(tru246)
ASTEmitIL.MarkSequencePoint(doc11, 719, 1, 719, 100)
Dim typ105(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 49)
Typ = GetType(FieldInfo)
ReDim Preserve typ105(UBound(typ105) + 1)
typ105(UBound(typ105)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 51)
Typ = GetType(System.Boolean)
ReDim Preserve typ105(UBound(typ105) + 1)
typ105(UBound(typ105)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ105))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitFldLd", typ105).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc11, 720, 1, 720, 100)
ASTEmitIL.Emit(OpCodes.Br, cont246)
ASTEmitIL.MarkLabel(fa246)
ASTEmitIL.Emit(OpCodes.Br, cont246)
ASTEmitIL.MarkLabel(cont246)
ASTEmitIL.MarkSequencePoint(doc11, 722, 1, 722, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 51)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa247 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru247 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont247 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru247)
ASTEmitIL.Emit(OpCodes.Br, fa247)
ASTEmitIL.MarkLabel(tru247)
ASTEmitIL.MarkSequencePoint(doc11, 723, 1, 723, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 51)
ASTEmitIL.MarkSequencePoint(doc11, 724, 1, 724, 100)
ASTEmitIL.Emit(OpCodes.Br, cont247)
ASTEmitIL.MarkLabel(fa247)
ASTEmitIL.Emit(OpCodes.Br, cont247)
ASTEmitIL.MarkLabel(cont247)
ASTEmitIL.MarkSequencePoint(doc11, 726, 1, 726, 100)
ASTEmitIL.Emit(OpCodes.Br, cont242)
ASTEmitIL.MarkLabel(cont242)
ASTEmitIL.MarkSequencePoint(doc11, 728, 1, 728, 100)
ASTEmitIL.MarkLabel(label15)
ASTEmitIL.MarkSequencePoint(doc11, 730, 1, 730, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stloc, 24)
ASTEmitIL.MarkSequencePoint(doc11, 732, 1, 732, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(System.Int32)
Dim fa248 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru248 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont248 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru248)
ASTEmitIL.Emit(OpCodes.Br, fa248)
ASTEmitIL.MarkLabel(tru248)
ASTEmitIL.MarkSequencePoint(doc11, 733, 1, 733, 100)
ASTEmitIL.Emit(OpCodes.Br, label14)
ASTEmitIL.MarkSequencePoint(doc11, 734, 1, 734, 100)
ASTEmitIL.Emit(OpCodes.Br, cont248)
ASTEmitIL.MarkLabel(fa248)
ASTEmitIL.MarkSequencePoint(doc11, 735, 1, 735, 100)
ASTEmitIL.Emit(OpCodes.Br, label13)
ASTEmitIL.MarkSequencePoint(doc11, 736, 1, 736, 100)
ASTEmitIL.Emit(OpCodes.Br, cont248)
ASTEmitIL.MarkLabel(cont248)
ASTEmitIL.MarkSequencePoint(doc11, 738, 1, 738, 100)
ASTEmitIL.MarkLabel(label14)
ASTEmitIL.MarkSequencePoint(doc11, 740, 1, 740, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 12)
ASTEmitIL.MarkSequencePoint(doc11, 741, 1, 741, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type03"))
ASTEmitIL.MarkSequencePoint(doc11, 744, 1, 744, 100)
Dim label16 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc11, 745, 1, 745, 100)
Dim label17 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc11, 747, 1, 747, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc11, 749, 1, 749, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(Expr).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa249 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru249 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont249 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru249)
ASTEmitIL.Emit(OpCodes.Br, fa249)
ASTEmitIL.MarkLabel(tru249)
ASTEmitIL.MarkSequencePoint(doc11, 750, 1, 750, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(System.Type).GetField("EmptyTypes"))
Typ = GetType(System.Type).GetField("EmptyTypes").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 42)
ASTEmitIL.MarkSequencePoint(doc11, 751, 1, 751, 100)
ASTEmitIL.Emit(OpCodes.Br, label17)
ASTEmitIL.MarkSequencePoint(doc11, 752, 1, 752, 100)
ASTEmitIL.Emit(OpCodes.Br, cont249)
ASTEmitIL.MarkLabel(fa249)
ASTEmitIL.Emit(OpCodes.Br, cont249)
ASTEmitIL.MarkLabel(cont249)
ASTEmitIL.MarkSequencePoint(doc11, 754, 1, 754, 100)
ASTEmitIL.MarkLabel(label16)
ASTEmitIL.MarkSequencePoint(doc11, 756, 1, 756, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Add)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc11, 757, 1, 757, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(Expr).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(Expr).MakeArrayType().GetElementType())
Typ = GetType(Expr).MakeArrayType().GetElementType()
ASTEmitIL.Emit(OpCodes.Stloc, 45)
ASTEmitIL.MarkSequencePoint(doc11, 759, 1, 759, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(Expr)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
Dim fa250 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru250 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont250 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru250)
ASTEmitIL.Emit(OpCodes.Br, fa250)
ASTEmitIL.MarkLabel(tru250)
ASTEmitIL.MarkSequencePoint(doc11, 760, 1, 760, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(Expr)
ASTEmitIL.Emit(OpCodes.Stloc, 46)
ASTEmitIL.MarkSequencePoint(doc11, 761, 1, 761, 100)
ASTEmitIL.Emit(OpCodes.Br, cont250)
ASTEmitIL.MarkLabel(fa250)
ASTEmitIL.MarkSequencePoint(doc11, 762, 1, 762, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(Expr)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
Dim fa251 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru251 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont251 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Bge, tru251)
ASTEmitIL.Emit(OpCodes.Br, fa251)
ASTEmitIL.MarkLabel(tru251)
ASTEmitIL.MarkSequencePoint(doc11, 763, 1, 763, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ106(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(Expr)
ReDim Preserve typ106(UBound(typ106) + 1)
typ106(UBound(typ106)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ConvToRPN)
Typ = ConvToRPN.ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 46)
ASTEmitIL.MarkSequencePoint(doc11, 764, 1, 764, 100)
ASTEmitIL.Emit(OpCodes.Br, cont251)
ASTEmitIL.MarkLabel(fa251)
ASTEmitIL.Emit(OpCodes.Br, cont251)
ASTEmitIL.MarkLabel(cont251)
ASTEmitIL.MarkSequencePoint(doc11, 765, 1, 765, 100)
ASTEmitIL.Emit(OpCodes.Br, cont250)
ASTEmitIL.MarkLabel(cont250)
ASTEmitIL.MarkSequencePoint(doc11, 767, 1, 767, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ107(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 46)
Typ = GetType(Expr)
ReDim Preserve typ107(UBound(typ107) + 1)
typ107(UBound(typ107)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ConvToAST)
Typ = ConvToAST.ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 47)
ASTEmitIL.MarkSequencePoint(doc11, 768, 1, 768, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ108(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 47)
Typ = GetType(Token)
ReDim Preserve typ108(UBound(typ108) + 1)
typ108(UBound(typ108)) = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ReDim Preserve typ108(UBound(typ108) + 1)
typ108(UBound(typ108)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc11, 770, 1, 770, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 43)
ASTEmitIL.MarkSequencePoint(doc11, 771, 1, 771, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(System.Type).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("TypArr"))
ASTEmitIL.MarkSequencePoint(doc11, 772, 1, 772, 100)
Dim typ109(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ReDim Preserve typ109(UBound(typ109) + 1)
typ109(UBound(typ109)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("AddTyp", typ109))
Typ = GetType(AsmFactory).GetMethod("AddTyp", typ109).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc11, 773, 1, 773, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 42)
ASTEmitIL.MarkSequencePoint(doc11, 774, 1, 774, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 43)
Typ = GetType(System.Type).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("TypArr"))
ASTEmitIL.MarkSequencePoint(doc11, 776, 1, 776, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldloc, 44)
Typ = GetType(System.Int32)
Dim fa252 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru252 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont252 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru252)
ASTEmitIL.Emit(OpCodes.Br, fa252)
ASTEmitIL.MarkLabel(tru252)
ASTEmitIL.MarkSequencePoint(doc11, 777, 1, 777, 100)
ASTEmitIL.Emit(OpCodes.Br, label17)
ASTEmitIL.MarkSequencePoint(doc11, 778, 1, 778, 100)
ASTEmitIL.Emit(OpCodes.Br, cont252)
ASTEmitIL.MarkLabel(fa252)
ASTEmitIL.MarkSequencePoint(doc11, 779, 1, 779, 100)
ASTEmitIL.Emit(OpCodes.Br, label16)
ASTEmitIL.MarkSequencePoint(doc11, 780, 1, 780, 100)
ASTEmitIL.Emit(OpCodes.Br, cont252)
ASTEmitIL.MarkLabel(cont252)
ASTEmitIL.MarkSequencePoint(doc11, 782, 1, 782, 100)
ASTEmitIL.MarkLabel(label17)
ASTEmitIL.MarkSequencePoint(doc11, 784, 1, 784, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type03"))
Typ = GetType(AsmFactory).GetField("Type03").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc11, 785, 1, 785, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc11, 787, 1, 787, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Add)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc11, 789, 1, 789, 100)
Dim typ110(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 34)
Typ = GetType(System.Type)
ReDim Preserve typ110(UBound(typ110) + 1)
typ110(UBound(typ110)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
ReDim Preserve typ110(UBound(typ110) + 1)
typ110(UBound(typ110)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ110(UBound(typ110) + 1)
typ110(UBound(typ110)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(Loader).GetMethod("LoadMethod", typ110))
Typ = GetType(Loader).GetMethod("LoadMethod", typ110).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 36)
ASTEmitIL.MarkSequencePoint(doc11, 790, 1, 790, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(Loader).GetField("MemberTyp"))
Typ = GetType(Loader).GetField("MemberTyp").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc11, 792, 1, 792, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa253 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru253 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont253 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru253)
ASTEmitIL.Emit(OpCodes.Br, fa253)
ASTEmitIL.MarkLabel(tru253)
ASTEmitIL.MarkSequencePoint(doc11, 793, 1, 793, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(MethodCallTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodCallTok).GetField("PopFlg"))
Typ = GetType(MethodCallTok).GetField("PopFlg").FieldType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("PopFlg"))
ASTEmitIL.MarkSequencePoint(doc11, 794, 1, 794, 100)
Dim typ111(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 36)
Typ = GetType(MethodInfo)
ReDim Preserve typ111(UBound(typ111) + 1)
typ111(UBound(typ111)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 51)
Typ = GetType(System.Boolean)
ReDim Preserve typ111(UBound(typ111) + 1)
typ111(UBound(typ111)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitMetCall", typ111))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitMetCall", typ111).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc11, 795, 1, 795, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("PopFlg"))
ASTEmitIL.MarkSequencePoint(doc11, 796, 1, 796, 100)
ASTEmitIL.Emit(OpCodes.Br, cont253)
ASTEmitIL.MarkLabel(fa253)
ASTEmitIL.Emit(OpCodes.Br, cont253)
ASTEmitIL.MarkLabel(cont253)
ASTEmitIL.MarkSequencePoint(doc11, 798, 1, 798, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(MethodNameTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodNameTok).GetField("MemberAccessFlg"))
Typ = GetType(MethodNameTok).GetField("MemberAccessFlg").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa254 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru254 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont254 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru254)
ASTEmitIL.Emit(OpCodes.Br, fa254)
ASTEmitIL.MarkLabel(tru254)
ASTEmitIL.MarkSequencePoint(doc11, 799, 1, 799, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(ASMFactory).GetField("ChainFlg"))
ASTEmitIL.MarkSequencePoint(doc11, 800, 1, 800, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ112(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(MethodNameTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodNameTok).GetField("MemberToAccess"))
Typ = GetType(MethodNameTok).GetField("MemberToAccess").FieldType
ReDim Preserve typ112(UBound(typ112) + 1)
typ112(UBound(typ112)) = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ReDim Preserve typ112(UBound(typ112) + 1)
typ112(UBound(typ112)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc11, 801, 1, 801, 100)
ASTEmitIL.Emit(OpCodes.Br, cont254)
ASTEmitIL.MarkLabel(fa254)
ASTEmitIL.Emit(OpCodes.Br, cont254)
ASTEmitIL.MarkLabel(cont254)
ASTEmitIL.MarkSequencePoint(doc11, 804, 1, 804, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(MethodNameTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodNameTok).GetField("Conv"))
Typ = GetType(MethodNameTok).GetField("Conv").FieldType
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa255 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru255 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont255 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru255)
ASTEmitIL.Emit(OpCodes.Br, fa255)
ASTEmitIL.MarkLabel(tru255)
ASTEmitIL.MarkSequencePoint(doc11, 806, 1, 806, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa256 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru256 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont256 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru256)
ASTEmitIL.Emit(OpCodes.Br, fa256)
ASTEmitIL.MarkLabel(tru256)
ASTEmitIL.MarkSequencePoint(doc11, 807, 1, 807, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 15)
ASTEmitIL.MarkSequencePoint(doc11, 808, 1, 808, 100)
ASTEmitIL.Emit(OpCodes.Br, cont256)
ASTEmitIL.MarkLabel(fa256)
ASTEmitIL.Emit(OpCodes.Br, cont256)
ASTEmitIL.MarkLabel(cont256)
ASTEmitIL.MarkSequencePoint(doc11, 810, 1, 810, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(MethodNameTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(MethodNameTok).GetField("TTok"))
Typ = GetType(MethodNameTok).GetField("TTok").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 10)
ASTEmitIL.MarkSequencePoint(doc11, 811, 1, 811, 100)
Dim typ113(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
ReDim Preserve typ113(UBound(typ113) + 1)
typ113(UBound(typ113)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ113))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ113).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc11, 813, 1, 813, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa257 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru257 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont257 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru257)
ASTEmitIL.Emit(OpCodes.Br, fa257)
ASTEmitIL.MarkLabel(tru257)
ASTEmitIL.MarkSequencePoint(doc11, 814, 1, 814, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 16)
ASTEmitIL.MarkSequencePoint(doc11, 815, 1, 815, 100)
Dim typ114(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(System.Type)
ReDim Preserve typ114(UBound(typ114) + 1)
typ114(UBound(typ114)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(System.Type)
ReDim Preserve typ114(UBound(typ114) + 1)
typ114(UBound(typ114)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitConv", typ114))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitConv", typ114).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc11, 816, 1, 816, 100)
ASTEmitIL.Emit(OpCodes.Br, cont257)
ASTEmitIL.MarkLabel(fa257)
ASTEmitIL.Emit(OpCodes.Br, cont257)
ASTEmitIL.MarkLabel(cont257)
ASTEmitIL.MarkSequencePoint(doc11, 818, 1, 818, 100)
ASTEmitIL.Emit(OpCodes.Br, cont255)
ASTEmitIL.MarkLabel(fa255)
ASTEmitIL.Emit(OpCodes.Br, cont255)
ASTEmitIL.MarkLabel(cont255)
ASTEmitIL.MarkSequencePoint(doc11, 820, 1, 820, 100)
ASTEmitIL.Emit(OpCodes.Br, label9)
ASTEmitIL.MarkSequencePoint(doc11, 822, 1, 822, 100)
ASTEmitIL.Emit(OpCodes.Br, cont239)
ASTEmitIL.MarkLabel(fa239)
ASTEmitIL.Emit(OpCodes.Br, cont239)
ASTEmitIL.MarkLabel(cont239)
ASTEmitIL.MarkSequencePoint(doc11, 824, 1, 824, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(NewCallTok))
Dim typ115 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ115))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ115).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc11, 825, 1, 825, 100)
Dim typ116(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ116(UBound(typ116) + 1)
typ116(UBound(typ116)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ116))
Typ = Typ03.GetMethod("IsInstanceOfType", typ116).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc11, 827, 1, 827, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa258 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru258 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont258 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru258)
ASTEmitIL.Emit(OpCodes.Br, fa258)
ASTEmitIL.MarkLabel(tru258)
ASTEmitIL.MarkSequencePoint(doc11, 829, 1, 829, 100)
Dim locbldr258 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(NewCallTok))
locbldr258.SetLocalSymInfo("nctok")
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Stloc, 53)
ASTEmitIL.MarkSequencePoint(doc11, 830, 1, 830, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 53)
Typ = GetType(NewCallTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(NewCallTok).GetField("Name"))
Typ = GetType(NewCallTok).GetField("Name").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 10)
ASTEmitIL.MarkSequencePoint(doc11, 831, 1, 831, 100)
Dim typ117(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
ReDim Preserve typ117(UBound(typ117) + 1)
typ117(UBound(typ117)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ117))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ117).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 37)
ASTEmitIL.MarkSequencePoint(doc11, 832, 1, 832, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 53)
Typ = GetType(NewCallTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(NewCallTok).GetField("Params"))
Typ = GetType(NewCallTok).GetField("Params").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 41)
ASTEmitIL.MarkSequencePoint(doc11, 833, 1, 833, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(Expr).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Sub)
ASTEmitIL.Emit(OpCodes.Stloc, 44)
ASTEmitIL.MarkSequencePoint(doc11, 835, 1, 835, 100)
Dim label18 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc11, 836, 1, 836, 100)
Dim label19 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.MarkSequencePoint(doc11, 838, 1, 838, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(Expr).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa259 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru259 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont259 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru259)
ASTEmitIL.Emit(OpCodes.Br, fa259)
ASTEmitIL.MarkLabel(tru259)
ASTEmitIL.MarkSequencePoint(doc11, 839, 1, 839, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(System.Type).GetField("EmptyTypes"))
Typ = GetType(System.Type).GetField("EmptyTypes").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 42)
ASTEmitIL.MarkSequencePoint(doc11, 840, 1, 840, 100)
ASTEmitIL.Emit(OpCodes.Br, label19)
ASTEmitIL.MarkSequencePoint(doc11, 841, 1, 841, 100)
ASTEmitIL.Emit(OpCodes.Br, cont259)
ASTEmitIL.MarkLabel(fa259)
ASTEmitIL.MarkSequencePoint(doc11, 842, 1, 842, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
ASTEmitIL.Emit(OpCodes.Newarr, GetType(System.Type))
ASTEmitIL.Emit(OpCodes.Stloc, 42)
ASTEmitIL.MarkSequencePoint(doc11, 843, 1, 843, 100)
ASTEmitIL.Emit(OpCodes.Br, cont259)
ASTEmitIL.MarkLabel(cont259)
ASTEmitIL.MarkSequencePoint(doc11, 845, 1, 845, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc11, 847, 1, 847, 100)
ASTEmitIL.MarkLabel(label18)
ASTEmitIL.MarkSequencePoint(doc11, 849, 1, 849, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Add)
ASTEmitIL.Emit(OpCodes.Stloc, 11)
ASTEmitIL.MarkSequencePoint(doc11, 850, 1, 850, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(Expr).MakeArrayType()
Typ02 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ASTEmitIL.Emit(OpCodes.Ldelem, GetType(Expr).MakeArrayType().GetElementType())
Typ = GetType(Expr).MakeArrayType().GetElementType()
ASTEmitIL.Emit(OpCodes.Stloc, 45)
ASTEmitIL.MarkSequencePoint(doc11, 852, 1, 852, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(Expr)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
Dim fa260 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru260 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont260 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru260)
ASTEmitIL.Emit(OpCodes.Br, fa260)
ASTEmitIL.MarkLabel(tru260)
ASTEmitIL.MarkSequencePoint(doc11, 853, 1, 853, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(Expr)
ASTEmitIL.Emit(OpCodes.Stloc, 46)
ASTEmitIL.MarkSequencePoint(doc11, 854, 1, 854, 100)
ASTEmitIL.Emit(OpCodes.Br, cont260)
ASTEmitIL.MarkLabel(fa260)
ASTEmitIL.MarkSequencePoint(doc11, 855, 1, 855, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(Expr)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
ASTEmitIL.Emit(OpCodes.Ldlen)
ASTEmitIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
Dim fa261 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru261 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont261 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Bge, tru261)
ASTEmitIL.Emit(OpCodes.Br, fa261)
ASTEmitIL.MarkLabel(tru261)
ASTEmitIL.MarkSequencePoint(doc11, 856, 1, 856, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ118(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(Expr)
ReDim Preserve typ118(UBound(typ118) + 1)
typ118(UBound(typ118)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ConvToRPN)
Typ = ConvToRPN.ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 46)
ASTEmitIL.MarkSequencePoint(doc11, 857, 1, 857, 100)
ASTEmitIL.Emit(OpCodes.Br, cont261)
ASTEmitIL.MarkLabel(fa261)
ASTEmitIL.Emit(OpCodes.Br, cont261)
ASTEmitIL.MarkLabel(cont261)
ASTEmitIL.MarkSequencePoint(doc11, 858, 1, 858, 100)
ASTEmitIL.Emit(OpCodes.Br, cont260)
ASTEmitIL.MarkLabel(cont260)
ASTEmitIL.MarkSequencePoint(doc11, 860, 1, 860, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ119(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 46)
Typ = GetType(Expr)
ReDim Preserve typ119(UBound(typ119) + 1)
typ119(UBound(typ119)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ConvToAST)
Typ = ConvToAST.ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 47)
ASTEmitIL.MarkSequencePoint(doc11, 861, 1, 861, 100)
ASTEmitIL.Emit(OpCodes.Ldarg_0)
Dim typ120(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 47)
Typ = GetType(Token)
ReDim Preserve typ120(UBound(typ120) + 1)
typ120(UBound(typ120)) = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ReDim Preserve typ120(UBound(typ120) + 1)
typ120(UBound(typ120)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc11, 863, 1, 863, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 43)
ASTEmitIL.MarkSequencePoint(doc11, 864, 1, 864, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(System.Type).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("TypArr"))
ASTEmitIL.MarkSequencePoint(doc11, 865, 1, 865, 100)
Dim typ121(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("Type02"))
Typ = GetType(AsmFactory).GetField("Type02").FieldType
ReDim Preserve typ121(UBound(typ121) + 1)
typ121(UBound(typ121)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("AddTyp", typ121))
Typ = GetType(AsmFactory).GetMethod("AddTyp", typ121).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc11, 866, 1, 866, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 42)
ASTEmitIL.MarkSequencePoint(doc11, 867, 1, 867, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 43)
Typ = GetType(System.Type).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("TypArr"))
ASTEmitIL.MarkSequencePoint(doc11, 869, 1, 869, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Ldloc, 44)
Typ = GetType(System.Int32)
Dim fa262 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru262 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont262 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru262)
ASTEmitIL.Emit(OpCodes.Br, fa262)
ASTEmitIL.MarkLabel(tru262)
ASTEmitIL.MarkSequencePoint(doc11, 870, 1, 870, 100)
ASTEmitIL.Emit(OpCodes.Br, label19)
ASTEmitIL.MarkSequencePoint(doc11, 871, 1, 871, 100)
ASTEmitIL.Emit(OpCodes.Br, cont262)
ASTEmitIL.MarkLabel(fa262)
ASTEmitIL.MarkSequencePoint(doc11, 872, 1, 872, 100)
ASTEmitIL.Emit(OpCodes.Br, label18)
ASTEmitIL.MarkSequencePoint(doc11, 873, 1, 873, 100)
ASTEmitIL.Emit(OpCodes.Br, cont262)
ASTEmitIL.MarkLabel(cont262)
ASTEmitIL.MarkSequencePoint(doc11, 875, 1, 875, 100)
ASTEmitIL.MarkLabel(label19)
ASTEmitIL.MarkSequencePoint(doc11, 877, 1, 877, 100)
Dim typ122(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 37)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ122(UBound(typ122) + 1)
typ122(UBound(typ122)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetConstructor", typ122))
Typ = Typ03.GetMethod("GetConstructor", typ122).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 48)
ASTEmitIL.MarkSequencePoint(doc11, 879, 1, 879, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa263 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru263 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont263 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru263)
ASTEmitIL.Emit(OpCodes.Br, fa263)
ASTEmitIL.MarkLabel(tru263)
ASTEmitIL.MarkSequencePoint(doc11, 880, 1, 880, 100)
Dim typ123(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 48)
Typ = GetType(ConstructorInfo)
ReDim Preserve typ123(UBound(typ123) + 1)
typ123(UBound(typ123)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitNewobj", typ123))
Typ = GetType(ILEmitter).GetMethod("EmitNewobj", typ123).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc11, 881, 1, 881, 100)
ASTEmitIL.Emit(OpCodes.Br, cont263)
ASTEmitIL.MarkLabel(fa263)
ASTEmitIL.Emit(OpCodes.Br, cont263)
ASTEmitIL.MarkLabel(cont263)
ASTEmitIL.MarkSequencePoint(doc11, 883, 1, 883, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 37)
Typ = GetType(System.Type)
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc11, 884, 1, 884, 100)
ASTEmitIL.Emit(OpCodes.Br, label9)
ASTEmitIL.MarkSequencePoint(doc11, 885, 1, 885, 100)
ASTEmitIL.Emit(OpCodes.Br, cont258)
ASTEmitIL.MarkLabel(fa258)
ASTEmitIL.Emit(OpCodes.Br, cont258)
ASTEmitIL.MarkLabel(cont258)
ASTEmitIL.MarkSequencePoint(doc11, 887, 1, 887, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(GettypeCallTok))
Dim typ124 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ124))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ124).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc11, 888, 1, 888, 100)
Dim typ125(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ125(UBound(typ125) + 1)
typ125(UBound(typ125)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ125))
Typ = Typ03.GetMethod("IsInstanceOfType", typ125).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 9)
ASTEmitIL.MarkSequencePoint(doc11, 890, 1, 890, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa264 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru264 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont264 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru264)
ASTEmitIL.Emit(OpCodes.Br, fa264)
ASTEmitIL.MarkLabel(tru264)
ASTEmitIL.MarkSequencePoint(doc11, 892, 1, 892, 100)
ASTEmitIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.Boolean)
ASTEmitIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa265 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim tru265 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
Dim cont265 As System.Reflection.Emit.Label = ASTEmitIL.DefineLabel()
ASTEmitIL.Emit(OpCodes.Beq, tru265)
ASTEmitIL.Emit(OpCodes.Br, fa265)
ASTEmitIL.MarkLabel(tru265)
ASTEmitIL.MarkSequencePoint(doc11, 894, 1, 894, 100)
Dim locbldr259 As LocalBuilder = ASTEmitIL.DeclareLocal(GetType(GettypeCallTok))
locbldr259.SetLocalSymInfo("gtctok")
ASTEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Token)
ASTEmitIL.Emit(OpCodes.Stloc, 54)
ASTEmitIL.MarkSequencePoint(doc11, 895, 1, 895, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 54)
Typ = GetType(GettypeCallTok)
ASTEmitIL.Emit(OpCodes.Ldfld, GetType(GettypeCallTok).GetField("Name"))
Typ = GetType(GettypeCallTok).GetField("Name").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 10)
ASTEmitIL.MarkSequencePoint(doc11, 896, 1, 896, 100)
Dim typ126(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(TypeTok)
ReDim Preserve typ126(UBound(typ126) + 1)
typ126(UBound(typ126)) = Typ
ASTEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ126))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ126).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc11, 897, 1, 897, 100)
Dim typ127(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
ReDim Preserve typ127(UBound(typ127) + 1)
typ127(UBound(typ127)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitLdtoken", typ127))
Typ = GetType(ILEmitter).GetMethod("EmitLdtoken", typ127).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc11, 899, 1, 899, 100)
ASTEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ASTEmitIL.Emit(OpCodes.Conv_U)
ASTEmitIL.Emit(OpCodes.Newarr, GetType(System.Type))
ASTEmitIL.Emit(OpCodes.Stloc, 42)
ASTEmitIL.MarkSequencePoint(doc11, 901, 1, 901, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 43)
ASTEmitIL.MarkSequencePoint(doc11, 902, 1, 902, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(System.Type).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("TypArr"))
ASTEmitIL.MarkSequencePoint(doc11, 903, 1, 903, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(System.RuntimeTypeHandle))
Dim typ128 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ128))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ128).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc11, 904, 1, 904, 100)
Dim typ129(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
ReDim Preserve typ129(UBound(typ129) + 1)
typ129(UBound(typ129)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("AddTyp", typ129))
Typ = GetType(AsmFactory).GetMethod("AddTyp", typ129).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc11, 905, 1, 905, 100)
ASTEmitIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ASTEmitIL.Emit(OpCodes.Stloc, 42)
ASTEmitIL.MarkSequencePoint(doc11, 906, 1, 906, 100)
ASTEmitIL.Emit(OpCodes.Ldloc, 43)
Typ = GetType(System.Type).MakeArrayType()
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("TypArr"))
ASTEmitIL.MarkSequencePoint(doc11, 908, 1, 908, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(System.Type))
Dim typ130 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ130))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ130).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 8)
ASTEmitIL.MarkSequencePoint(doc11, 909, 1, 909, 100)
Dim typ131(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Type)
Typ03 = Typ
ASTEmitIL.Emit(OpCodes.Ldstr, "GetTypeFromHandle")
Typ = GetType(System.String)
ReDim Preserve typ131(UBound(typ131) + 1)
typ131(UBound(typ131)) = Typ
ASTEmitIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ131(UBound(typ131) + 1)
typ131(UBound(typ131)) = Typ
ASTEmitIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetMethod", typ131))
Typ = Typ03.GetMethod("GetMethod", typ131).ReturnType
ASTEmitIL.Emit(OpCodes.Stloc, 36)
ASTEmitIL.MarkSequencePoint(doc11, 910, 1, 910, 100)
Dim typ132(-1) As Type
ASTEmitIL.Emit(OpCodes.Ldloc, 36)
Typ = GetType(MethodInfo)
ReDim Preserve typ132(UBound(typ132) + 1)
typ132(UBound(typ132)) = Typ
ASTEmitIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitCall", typ132))
Typ = GetType(ILEmitter).GetMethod("EmitCall", typ132).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ASTEmitIL.Emit(OpCodes.Pop)
End If
ASTEmitIL.MarkSequencePoint(doc11, 912, 1, 912, 100)
ASTEmitIL.Emit(OpCodes.Br, cont265)
ASTEmitIL.MarkLabel(fa265)
ASTEmitIL.Emit(OpCodes.Br, cont265)
ASTEmitIL.MarkLabel(cont265)
ASTEmitIL.MarkSequencePoint(doc11, 914, 1, 914, 100)
ASTEmitIL.Emit(OpCodes.Ldtoken, GetType(System.Type))
Dim typ133 As Type() = {GetType(System.RuntimeTypeHandle)}
ASTEmitIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ133))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ133).ReturnType
ASTEmitIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("Type02"))
ASTEmitIL.MarkSequencePoint(doc11, 916, 1, 916, 100)
ASTEmitIL.Emit(OpCodes.Br, label9)
ASTEmitIL.MarkSequencePoint(doc11, 917, 1, 917, 100)
ASTEmitIL.Emit(OpCodes.Br, cont264)
ASTEmitIL.MarkLabel(fa264)
ASTEmitIL.Emit(OpCodes.Br, cont264)
ASTEmitIL.MarkLabel(cont264)
ASTEmitIL.MarkSequencePoint(doc11, 919, 1, 919, 100)
ASTEmitIL.MarkLabel(label9)
ASTEmitIL.MarkSequencePoint(doc11, 921, 1, 921, 100)
ASTEmitIL.Emit(OpCodes.Br, cont206)
ASTEmitIL.MarkLabel(cont206)
ASTEmitIL.MarkSequencePoint(doc11, 923, 1, 923, 100)
ASTEmitIL.Emit(OpCodes.Ret)
Dim typ134(-1) As Type
ReDim Preserve typ134(UBound(typ134) + 1)
typ134(UBound(typ134)) = GetType(Expr)
Dim Evaluate As MethodBuilder = Evaluator.DefineMethod("Evaluate", MethodAttributes.Public, GetType(System.Void), typ134)
Dim EvaluateIL As ILGenerator = Evaluate.GetILGenerator()
Dim Evaluateparam01 As ParameterBuilder = Evaluate.DefineParameter(1, ParameterAttributes.None, "exp")
EvaluateIL.MarkSequencePoint(doc11, 927, 1, 927, 100)
Dim locbldr260 As LocalBuilder = EvaluateIL.DeclareLocal(GetType(System.Int32))
locbldr260.SetLocalSymInfo("len")
EvaluateIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
EvaluateIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
EvaluateIL.Emit(OpCodes.Ldlen)
EvaluateIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
EvaluateIL.Emit(OpCodes.Stloc, 0)
EvaluateIL.MarkSequencePoint(doc11, 929, 1, 929, 100)
Dim locbldr261 As LocalBuilder = EvaluateIL.DeclareLocal(GetType(Expr))
locbldr261.SetLocalSymInfo("rpnexp")
EvaluateIL.MarkSequencePoint(doc11, 931, 1, 931, 100)
EvaluateIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
EvaluateIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
Dim fa266 As System.Reflection.Emit.Label = EvaluateIL.DefineLabel()
Dim tru266 As System.Reflection.Emit.Label = EvaluateIL.DefineLabel()
Dim cont266 As System.Reflection.Emit.Label = EvaluateIL.DefineLabel()
EvaluateIL.Emit(OpCodes.Beq, tru266)
EvaluateIL.Emit(OpCodes.Br, fa266)
EvaluateIL.MarkLabel(tru266)
EvaluateIL.MarkSequencePoint(doc11, 932, 1, 932, 100)
EvaluateIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
EvaluateIL.Emit(OpCodes.Stloc, 1)
EvaluateIL.MarkSequencePoint(doc11, 933, 1, 933, 100)
EvaluateIL.Emit(OpCodes.Br, cont266)
EvaluateIL.MarkLabel(fa266)
EvaluateIL.MarkSequencePoint(doc11, 934, 1, 934, 100)
EvaluateIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
EvaluateIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
Dim fa267 As System.Reflection.Emit.Label = EvaluateIL.DefineLabel()
Dim tru267 As System.Reflection.Emit.Label = EvaluateIL.DefineLabel()
Dim cont267 As System.Reflection.Emit.Label = EvaluateIL.DefineLabel()
EvaluateIL.Emit(OpCodes.Bge, tru267)
EvaluateIL.Emit(OpCodes.Br, fa267)
EvaluateIL.MarkLabel(tru267)
EvaluateIL.MarkSequencePoint(doc11, 935, 1, 935, 100)
EvaluateIL.Emit(OpCodes.Ldarg_0)
Dim typ135(-1) As Type
EvaluateIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Expr)
ReDim Preserve typ135(UBound(typ135) + 1)
typ135(UBound(typ135)) = Typ
EvaluateIL.Emit(OpCodes.Callvirt, ConvToRPN)
Typ = ConvToRPN.ReturnType
EvaluateIL.Emit(OpCodes.Stloc, 1)
EvaluateIL.MarkSequencePoint(doc11, 936, 1, 936, 100)
EvaluateIL.Emit(OpCodes.Br, cont267)
EvaluateIL.MarkLabel(fa267)
EvaluateIL.Emit(OpCodes.Br, cont267)
EvaluateIL.MarkLabel(cont267)
EvaluateIL.MarkSequencePoint(doc11, 937, 1, 937, 100)
EvaluateIL.Emit(OpCodes.Br, cont266)
EvaluateIL.MarkLabel(cont266)
EvaluateIL.MarkSequencePoint(doc11, 939, 1, 939, 100)
Dim locbldr262 As LocalBuilder = EvaluateIL.DeclareLocal(GetType(Token))
locbldr262.SetLocalSymInfo("asttok")
EvaluateIL.Emit(OpCodes.Ldarg_0)
Dim typ136(-1) As Type
EvaluateIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Expr)
ReDim Preserve typ136(UBound(typ136) + 1)
typ136(UBound(typ136)) = Typ
EvaluateIL.Emit(OpCodes.Callvirt, ConvToAST)
Typ = ConvToAST.ReturnType
EvaluateIL.Emit(OpCodes.Stloc, 2)
EvaluateIL.MarkSequencePoint(doc11, 940, 1, 940, 100)
EvaluateIL.Emit(OpCodes.Ldarg_0)
Dim typ137(-1) As Type
EvaluateIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Token)
ReDim Preserve typ137(UBound(typ137) + 1)
typ137(UBound(typ137)) = Typ
EvaluateIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReDim Preserve typ137(UBound(typ137) + 1)
typ137(UBound(typ137)) = Typ
EvaluateIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EvaluateIL.Emit(OpCodes.Pop)
End If
EvaluateIL.MarkSequencePoint(doc11, 941, 1, 941, 100)
EvaluateIL.Emit(OpCodes.Ldarg_0)
Dim typ138(-1) As Type
EvaluateIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Token)
ReDim Preserve typ138(UBound(typ138) + 1)
typ138(UBound(typ138)) = Typ
EvaluateIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ138(UBound(typ138) + 1)
typ138(UBound(typ138)) = Typ
EvaluateIL.Emit(OpCodes.Callvirt, ASTEmit)
Typ = ASTEmit.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EvaluateIL.Emit(OpCodes.Pop)
End If
EvaluateIL.MarkSequencePoint(doc11, 943, 1, 943, 100)
EvaluateIL.Emit(OpCodes.Ret)
Dim typ139(-1) As Type
ReDim Preserve typ139(UBound(typ139) + 1)
typ139(UBound(typ139)) = GetType(Ident)
Dim StoreEmit As MethodBuilder = Evaluator.DefineMethod("StoreEmit", MethodAttributes.Public, GetType(System.Void), typ139)
Dim StoreEmitIL As ILGenerator = StoreEmit.GetILGenerator()
Dim StoreEmitparam01 As ParameterBuilder = StoreEmit.DefineParameter(1, ParameterAttributes.None, "idt")
StoreEmitIL.MarkSequencePoint(doc11, 947, 1, 947, 100)
Dim locbldr263 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(System.String))
locbldr263.SetLocalSymInfo("idtnam")
StoreEmitIL.MarkSequencePoint(doc11, 948, 1, 948, 100)
Dim locbldr264 As LocalBuilder = StoreEmitIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem"))
locbldr264.SetLocalSymInfo("vr")
StoreEmitIL.MarkSequencePoint(doc11, 949, 1, 949, 100)
Dim locbldr265 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr265.SetLocalSymInfo("idtb1")
StoreEmitIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
StoreEmitIL.Emit(OpCodes.Stloc, 2)
StoreEmitIL.MarkSequencePoint(doc11, 950, 1, 950, 100)
Dim locbldr266 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(System.Int32))
locbldr266.SetLocalSymInfo("idtcomp")
StoreEmitIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
StoreEmitIL.Emit(OpCodes.Stloc, 3)
StoreEmitIL.MarkSequencePoint(doc11, 951, 1, 951, 100)
Dim locbldr267 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(System.Type))
locbldr267.SetLocalSymInfo("idttyp")
StoreEmitIL.MarkSequencePoint(doc11, 952, 1, 952, 100)
Dim locbldr268 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(Expr))
locbldr268.SetLocalSymInfo("arrlocexpr")
StoreEmitIL.MarkSequencePoint(doc11, 953, 1, 953, 100)
Dim locbldr269 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(Ident))
locbldr269.SetLocalSymInfo("idtarrloc")
StoreEmitIL.MarkSequencePoint(doc11, 954, 1, 954, 100)
Dim locbldr270 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(Token))
locbldr270.SetLocalSymInfo("tok")
StoreEmitIL.MarkSequencePoint(doc11, 955, 1, 955, 100)
Dim locbldr271 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(System.Type))
locbldr271.SetLocalSymInfo("typ")
StoreEmitIL.MarkSequencePoint(doc11, 956, 1, 956, 100)
Dim locbldr272 As LocalBuilder = StoreEmitIL.DeclareLocal(GetType(System.Boolean))
locbldr272.SetLocalSymInfo("b")
StoreEmitIL.MarkSequencePoint(doc11, 958, 1, 958, 100)
StoreEmitIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Ident)
StoreEmitIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
StoreEmitIL.Emit(OpCodes.Stloc, 0)
StoreEmitIL.MarkSequencePoint(doc11, 959, 1, 959, 100)
Dim typ140(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.String)
ReDim Preserve typ140(UBound(typ140) + 1)
typ140(UBound(typ140)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindVar", typ140))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("FindVar", typ140).ReturnType
StoreEmitIL.Emit(OpCodes.Stloc, 1)
StoreEmitIL.MarkSequencePoint(doc11, 960, 1, 960, 100)
StoreEmitIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
StoreEmitIL.Emit(OpCodes.Ldnull)
Dim fa268 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim tru268 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
Dim cont268 As System.Reflection.Emit.Label = StoreEmitIL.DefineLabel()
StoreEmitIL.Emit(OpCodes.Beq, fa268)
StoreEmitIL.Emit(OpCodes.Br, tru268)
StoreEmitIL.MarkLabel(tru268)
StoreEmitIL.MarkSequencePoint(doc11, 963, 1, 963, 100)
Dim typ141(-1) As Type
StoreEmitIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
StoreEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("Index"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("Index").FieldType
ReDim Preserve typ141(UBound(typ141) + 1)
typ141(UBound(typ141)) = Typ
StoreEmitIL.Emit(OpCodes.Ldloc, 1)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem")
StoreEmitIL.Emit(OpCodes.Ldfld, asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("LocArg"))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.VarItem").GetField("LocArg").FieldType
ReDim Preserve typ141(UBound(typ141) + 1)
typ141(UBound(typ141)) = Typ
StoreEmitIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLocSt", typ141))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("EmitLocSt", typ141).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
StoreEmitIL.Emit(OpCodes.Pop)
End If
StoreEmitIL.MarkSequencePoint(doc11, 1002, 1, 1002, 100)
StoreEmitIL.Emit(OpCodes.Br, cont268)
StoreEmitIL.MarkLabel(fa268)
StoreEmitIL.Emit(OpCodes.Br, cont268)
StoreEmitIL.MarkLabel(cont268)
StoreEmitIL.MarkSequencePoint(doc11, 1004, 1, 1004, 100)
StoreEmitIL.Emit(OpCodes.Ret)
Evaluator.CreateType()
End Sub


Dim doc12 As ISymbolDocumentWriter

Sub StmtReader()
Dim StmtReader As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "StmtReader", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(Stmt)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
Dim Read As MethodBuilder = StmtReader.DefineMethod("Read", MethodAttributes.Public, GetType(System.Void), typ0)
Dim ReadIL As ILGenerator = Read.GetILGenerator()
Dim Readparam01 As ParameterBuilder = Read.DefineParameter(1, ParameterAttributes.None, "stm")
Dim Readparam02 As ParameterBuilder = Read.DefineParameter(2, ParameterAttributes.None, "fpath")
ReadIL.MarkSequencePoint(doc12, 13, 1, 13, 100)
Dim locbldr273 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr273.SetLocalSymInfo("typ")
ReadIL.MarkSequencePoint(doc12, 14, 1, 14, 100)
Dim locbldr274 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Boolean))
locbldr274.SetLocalSymInfo("b")
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc12, 16, 1, 16, 100)
Dim label0 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.MarkSequencePoint(doc12, 18, 1, 18, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("DebugFlg"))
Typ = GetType(AsmFactory).GetField("DebugFlg").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa269 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru269 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont269 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru269)
ReadIL.Emit(OpCodes.Br, fa269)
ReadIL.MarkLabel(tru269)
ReadIL.MarkSequencePoint(doc12, 19, 1, 19, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("InMethodFlg"))
Typ = GetType(AsmFactory).GetField("InMethodFlg").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa270 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru270 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont270 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru270)
ReadIL.Emit(OpCodes.Br, fa270)
ReadIL.MarkLabel(tru270)
ReadIL.MarkSequencePoint(doc12, 20, 1, 20, 100)
Dim typ1(-1) As Type
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(Stmt).GetField("Line"))
Typ = GetType(Stmt).GetField("Line").FieldType
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("MarkDbgPt", typ1))
Typ = GetType(ILEmitter).GetMethod("MarkDbgPt", typ1).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 21, 1, 21, 100)
ReadIL.Emit(OpCodes.Br, cont270)
ReadIL.MarkLabel(fa270)
ReadIL.Emit(OpCodes.Br, cont270)
ReadIL.MarkLabel(cont270)
ReadIL.MarkSequencePoint(doc12, 22, 1, 22, 100)
ReadIL.Emit(OpCodes.Br, cont269)
ReadIL.MarkLabel(fa269)
ReadIL.Emit(OpCodes.Br, cont269)
ReadIL.MarkLabel(cont269)
ReadIL.MarkSequencePoint(doc12, 24, 1, 24, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(RefasmStmt))
Dim typ2 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ2))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ2).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc12, 25, 1, 25, 100)
Dim typ3(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ3))
Typ = Typ03.GetMethod("IsInstanceOfType", typ3).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc12, 27, 1, 27, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa271 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru271 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont271 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru271)
ReadIL.Emit(OpCodes.Br, fa271)
ReadIL.MarkLabel(tru271)
ReadIL.MarkSequencePoint(doc12, 28, 1, 28, 100)
Dim locbldr275 As LocalBuilder = ReadIL.DeclareLocal(GetType(RefasmStmt))
locbldr275.SetLocalSymInfo("rastm")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 2)
ReadIL.MarkSequencePoint(doc12, 29, 1, 29, 100)
Dim locbldr276 As LocalBuilder = ReadIL.DeclareLocal(GetType(Token))
locbldr276.SetLocalSymInfo("ap")
ReadIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(RefasmStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(RefasmStmt).GetField("AsmPath"))
Typ = GetType(RefasmStmt).GetField("AsmPath").FieldType
ReadIL.Emit(OpCodes.Stloc, 3)
ReadIL.MarkSequencePoint(doc12, 31, 1, 31, 100)
Dim locbldr277 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.String))
locbldr277.SetLocalSymInfo("tmpstr")
Dim typ4(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "*")
Typ = GetType(System.String)
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ4))
Typ = GetType(String).GetMethod("Concat", typ4).ReturnType
ReadIL.Emit(OpCodes.Stloc, 4)
ReadIL.MarkSequencePoint(doc12, 32, 1, 32, 100)
Dim locbldr278 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Boolean))
locbldr278.SetLocalSymInfo("compb")
Dim typ5(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ5(UBound(typ5) + 1)
typ5(UBound(typ5)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String)
ReDim Preserve typ5(UBound(typ5) + 1)
typ5(UBound(typ5)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ5))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ5).ReturnType
ReadIL.Emit(OpCodes.Stloc, 5)
ReadIL.MarkSequencePoint(doc12, 34, 1, 34, 100)
ReadIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa272 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru272 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont272 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru272)
ReadIL.Emit(OpCodes.Br, fa272)
ReadIL.MarkLabel(tru272)
ReadIL.MarkSequencePoint(doc12, 35, 1, 35, 100)
ReadIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stloc, 4)
ReadIL.MarkSequencePoint(doc12, 36, 1, 36, 100)
Dim locbldr279 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Char).MakeArrayType())
locbldr279.SetLocalSymInfo("tmpchrarr")
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Char))
ReadIL.Emit(OpCodes.Stloc, 6)
ReadIL.MarkSequencePoint(doc12, 37, 1, 37, 100)
ReadIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
Dim typ6 As Type() = {Typ}
ReadIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ6))
Typ = GetType(System.Convert).GetMethod("ToChar", typ6).ReturnType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc12, 38, 1, 38, 100)
Dim typ7(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Trim", typ7))
Typ = Typ03.GetMethod("Trim", typ7).ReturnType
ReadIL.Emit(OpCodes.Stloc, 4)
ReadIL.MarkSequencePoint(doc12, 39, 1, 39, 100)
ReadIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String)
ReadIL.Emit(OpCodes.Stfld, GetType(Token).GetField("Value"))
ReadIL.MarkSequencePoint(doc12, 40, 1, 40, 100)
ReadIL.Emit(OpCodes.Br, cont272)
ReadIL.MarkLabel(fa272)
ReadIL.Emit(OpCodes.Br, cont272)
ReadIL.MarkLabel(cont272)
ReadIL.MarkSequencePoint(doc12, 42, 1, 42, 100)
Dim locbldr280 As LocalBuilder = ReadIL.DeclareLocal(GetType(Assembly))
locbldr280.SetLocalSymInfo("asm")
Dim typ8(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Assembly).GetMethod("LoadFrom", typ8))
Typ = GetType(Assembly).GetMethod("LoadFrom", typ8).ReturnType
ReadIL.Emit(OpCodes.Stloc, 7)
ReadIL.MarkSequencePoint(doc12, 43, 1, 43, 100)
Dim typ9(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Referencing Assembly: ")
Typ = GetType(System.String)
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ9))
Typ = GetType(Console).GetMethod("Write", typ9).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 44, 1, 44, 100)
Dim typ10(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ10(UBound(typ10) + 1)
typ10(UBound(typ10)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ10))
Typ = GetType(Console).GetMethod("WriteLine", typ10).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 45, 1, 45, 100)
Dim typ11(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(Assembly)
ReDim Preserve typ11(UBound(typ11) + 1)
typ11(UBound(typ11)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Importer).GetMethod("AddAsm", typ11))
Typ = GetType(Importer).GetMethod("AddAsm", typ11).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 46, 1, 46, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc12, 47, 1, 47, 100)
ReadIL.Emit(OpCodes.Br, cont271)
ReadIL.MarkLabel(fa271)
ReadIL.Emit(OpCodes.Br, cont271)
ReadIL.MarkLabel(cont271)
ReadIL.MarkSequencePoint(doc12, 49, 1, 49, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(ImportStmt))
Dim typ12 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ12))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ12).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc12, 50, 1, 50, 100)
Dim typ13(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ13(UBound(typ13) + 1)
typ13(UBound(typ13)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ13))
Typ = Typ03.GetMethod("IsInstanceOfType", typ13).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc12, 52, 1, 52, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa273 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru273 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont273 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru273)
ReadIL.Emit(OpCodes.Br, fa273)
ReadIL.MarkLabel(tru273)
ReadIL.MarkSequencePoint(doc12, 53, 1, 53, 100)
Dim locbldr281 As LocalBuilder = ReadIL.DeclareLocal(GetType(ImportStmt))
locbldr281.SetLocalSymInfo("istm")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 8)
ReadIL.MarkSequencePoint(doc12, 54, 1, 54, 100)
Dim locbldr282 As LocalBuilder = ReadIL.DeclareLocal(GetType(Token))
locbldr282.SetLocalSymInfo("ina")
ReadIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(ImportStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(ImportStmt).GetField("NS"))
Typ = GetType(ImportStmt).GetField("NS").FieldType
ReadIL.Emit(OpCodes.Stloc, 9)
ReadIL.MarkSequencePoint(doc12, 56, 1, 56, 100)
Dim typ14(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "*")
Typ = GetType(System.String)
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ14))
Typ = GetType(String).GetMethod("Concat", typ14).ReturnType
ReadIL.Emit(OpCodes.Stloc, 4)
ReadIL.MarkSequencePoint(doc12, 57, 1, 57, 100)
Dim typ15(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ15(UBound(typ15) + 1)
typ15(UBound(typ15)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String)
ReDim Preserve typ15(UBound(typ15) + 1)
typ15(UBound(typ15)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ15))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ15).ReturnType
ReadIL.Emit(OpCodes.Stloc, 5)
ReadIL.MarkSequencePoint(doc12, 59, 1, 59, 100)
ReadIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa274 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru274 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont274 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru274)
ReadIL.Emit(OpCodes.Br, fa274)
ReadIL.MarkLabel(tru274)
ReadIL.MarkSequencePoint(doc12, 60, 1, 60, 100)
ReadIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stloc, 4)
ReadIL.MarkSequencePoint(doc12, 61, 1, 61, 100)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Char))
ReadIL.Emit(OpCodes.Stloc, 6)
ReadIL.MarkSequencePoint(doc12, 62, 1, 62, 100)
ReadIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
Dim typ16 As Type() = {Typ}
ReadIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ16))
Typ = GetType(System.Convert).GetMethod("ToChar", typ16).ReturnType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc12, 63, 1, 63, 100)
Dim typ17(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ17(UBound(typ17) + 1)
typ17(UBound(typ17)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Trim", typ17))
Typ = Typ03.GetMethod("Trim", typ17).ReturnType
ReadIL.Emit(OpCodes.Stloc, 4)
ReadIL.MarkSequencePoint(doc12, 64, 1, 64, 100)
ReadIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String)
ReadIL.Emit(OpCodes.Stfld, GetType(Token).GetField("Value"))
ReadIL.MarkSequencePoint(doc12, 65, 1, 65, 100)
ReadIL.Emit(OpCodes.Br, cont274)
ReadIL.MarkLabel(fa274)
ReadIL.Emit(OpCodes.Br, cont274)
ReadIL.MarkLabel(cont274)
ReadIL.MarkSequencePoint(doc12, 67, 1, 67, 100)
Dim typ18(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Importing Namespace: ")
Typ = GetType(System.String)
ReDim Preserve typ18(UBound(typ18) + 1)
typ18(UBound(typ18)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ18))
Typ = GetType(Console).GetMethod("Write", typ18).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 68, 1, 68, 100)
Dim typ19(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ19(UBound(typ19) + 1)
typ19(UBound(typ19)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ19))
Typ = GetType(Console).GetMethod("WriteLine", typ19).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 70, 1, 70, 100)
Dim typ20(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ20(UBound(typ20) + 1)
typ20(UBound(typ20)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Importer).GetMethod("AddImp", typ20))
Typ = GetType(Importer).GetMethod("AddImp", typ20).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 71, 1, 71, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc12, 72, 1, 72, 100)
ReadIL.Emit(OpCodes.Br, cont273)
ReadIL.MarkLabel(fa273)
ReadIL.Emit(OpCodes.Br, cont273)
ReadIL.MarkLabel(cont273)
ReadIL.MarkSequencePoint(doc12, 74, 1, 74, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(LocimportStmt))
Dim typ21 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ21))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ21).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc12, 75, 1, 75, 100)
Dim typ22(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ22(UBound(typ22) + 1)
typ22(UBound(typ22)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ22))
Typ = Typ03.GetMethod("IsInstanceOfType", typ22).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc12, 77, 1, 77, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa275 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru275 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont275 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru275)
ReadIL.Emit(OpCodes.Br, fa275)
ReadIL.MarkLabel(tru275)
ReadIL.MarkSequencePoint(doc12, 78, 1, 78, 100)
Dim locbldr283 As LocalBuilder = ReadIL.DeclareLocal(GetType(LocimportStmt))
locbldr283.SetLocalSymInfo("listm")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 10)
ReadIL.MarkSequencePoint(doc12, 79, 1, 79, 100)
Dim locbldr284 As LocalBuilder = ReadIL.DeclareLocal(GetType(Token))
locbldr284.SetLocalSymInfo("lina")
ReadIL.Emit(OpCodes.Ldloc, 10)
Typ = GetType(LocimportStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(LocimportStmt).GetField("NS"))
Typ = GetType(LocimportStmt).GetField("NS").FieldType
ReadIL.Emit(OpCodes.Stloc, 11)
ReadIL.MarkSequencePoint(doc12, 81, 1, 81, 100)
Dim typ23(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ23(UBound(typ23) + 1)
typ23(UBound(typ23)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "*")
Typ = GetType(System.String)
ReDim Preserve typ23(UBound(typ23) + 1)
typ23(UBound(typ23)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
ReDim Preserve typ23(UBound(typ23) + 1)
typ23(UBound(typ23)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ23))
Typ = GetType(String).GetMethod("Concat", typ23).ReturnType
ReadIL.Emit(OpCodes.Stloc, 4)
ReadIL.MarkSequencePoint(doc12, 82, 1, 82, 100)
Dim typ24(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ24(UBound(typ24) + 1)
typ24(UBound(typ24)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String)
ReDim Preserve typ24(UBound(typ24) + 1)
typ24(UBound(typ24)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Utils.ParseUtils).GetMethod("LikeOP", typ24))
Typ = GetType(Utils.ParseUtils).GetMethod("LikeOP", typ24).ReturnType
ReadIL.Emit(OpCodes.Stloc, 5)
ReadIL.MarkSequencePoint(doc12, 84, 1, 84, 100)
ReadIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa276 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru276 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont276 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru276)
ReadIL.Emit(OpCodes.Br, fa276)
ReadIL.MarkLabel(tru276)
ReadIL.MarkSequencePoint(doc12, 85, 1, 85, 100)
ReadIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stloc, 4)
ReadIL.MarkSequencePoint(doc12, 86, 1, 86, 100)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Char))
ReadIL.Emit(OpCodes.Stloc, 6)
ReadIL.MarkSequencePoint(doc12, 87, 1, 87, 100)
ReadIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Char).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldsfld, GetType(Utils.Constants).GetField("quot"))
Typ = GetType(Utils.Constants).GetField("quot").FieldType
Dim typ25 As Type() = {Typ}
ReadIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ25))
Typ = GetType(System.Convert).GetMethod("ToChar", typ25).ReturnType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Char).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc12, 88, 1, 88, 100)
Dim typ26(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.Char).MakeArrayType()
ReDim Preserve typ26(UBound(typ26) + 1)
typ26(UBound(typ26)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Trim", typ26))
Typ = Typ03.GetMethod("Trim", typ26).ReturnType
ReadIL.Emit(OpCodes.Stloc, 4)
ReadIL.MarkSequencePoint(doc12, 89, 1, 89, 100)
ReadIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String)
ReadIL.Emit(OpCodes.Stfld, GetType(Token).GetField("Value"))
ReadIL.MarkSequencePoint(doc12, 90, 1, 90, 100)
ReadIL.Emit(OpCodes.Br, cont276)
ReadIL.MarkLabel(fa276)
ReadIL.Emit(OpCodes.Br, cont276)
ReadIL.MarkLabel(cont276)
ReadIL.MarkSequencePoint(doc12, 92, 1, 92, 100)
Dim typ27(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Importing Namespace: ")
Typ = GetType(System.String)
ReDim Preserve typ27(UBound(typ27) + 1)
typ27(UBound(typ27)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ27))
Typ = GetType(Console).GetMethod("Write", typ27).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 93, 1, 93, 100)
Dim typ28(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ28(UBound(typ28) + 1)
typ28(UBound(typ28)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ28))
Typ = GetType(Console).GetMethod("WriteLine", typ28).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 95, 1, 95, 100)
Dim typ29(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 11)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReDim Preserve typ29(UBound(typ29) + 1)
typ29(UBound(typ29)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Importer).GetMethod("AddLocImp", typ29))
Typ = GetType(Importer).GetMethod("AddLocImp", typ29).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 96, 1, 96, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc12, 97, 1, 97, 100)
ReadIL.Emit(OpCodes.Br, cont275)
ReadIL.MarkLabel(fa275)
ReadIL.Emit(OpCodes.Br, cont275)
ReadIL.MarkLabel(cont275)
ReadIL.MarkSequencePoint(doc12, 99, 1, 99, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(AssemblyStmt))
Dim typ30 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ30))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ30).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc12, 100, 1, 100, 100)
Dim typ31(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ31(UBound(typ31) + 1)
typ31(UBound(typ31)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ31))
Typ = Typ03.GetMethod("IsInstanceOfType", typ31).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc12, 102, 1, 102, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa277 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru277 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont277 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru277)
ReadIL.Emit(OpCodes.Br, fa277)
ReadIL.MarkLabel(tru277)
ReadIL.MarkSequencePoint(doc12, 104, 1, 104, 100)
Dim locbldr285 As LocalBuilder = ReadIL.DeclareLocal(GetType(AssemblyStmt))
locbldr285.SetLocalSymInfo("asms")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 12)
ReadIL.MarkSequencePoint(doc12, 105, 1, 105, 100)
Dim locbldr286 As LocalBuilder = ReadIL.DeclareLocal(GetType(Ident))
locbldr286.SetLocalSymInfo("asmn")
ReadIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(AssemblyStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(AssemblyStmt).GetField("AsmName"))
Typ = GetType(AssemblyStmt).GetField("AsmName").FieldType
ReadIL.Emit(OpCodes.Stloc, 13)
ReadIL.MarkSequencePoint(doc12, 106, 1, 106, 100)
Dim typ32(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ32(UBound(typ32) + 1)
typ32(UBound(typ32)) = Typ
ReadIL.Emit(OpCodes.Newobj, GetType(AssemblyName).GetConstructor(typ32))
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AsmNameStr"))
ReadIL.MarkSequencePoint(doc12, 107, 1, 107, 100)
Dim locbldr287 As LocalBuilder = ReadIL.DeclareLocal(GetType(Token))
locbldr287.SetLocalSymInfo("asmm")
ReadIL.Emit(OpCodes.Ldloc, 12)
Typ = GetType(AssemblyStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(AssemblyStmt).GetField("Mode"))
Typ = GetType(AssemblyStmt).GetField("Mode").FieldType
ReadIL.Emit(OpCodes.Stloc, 14)
ReadIL.MarkSequencePoint(doc12, 108, 1, 108, 100)
ReadIL.Emit(OpCodes.Ldloc, 14)
Typ = GetType(Token)
ReadIL.Emit(OpCodes.Ldfld, GetType(Token).GetField("Value"))
Typ = GetType(Token).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AsmMode"))
ReadIL.MarkSequencePoint(doc12, 109, 1, 109, 100)
ReadIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("DfltNS"))
ReadIL.MarkSequencePoint(doc12, 110, 1, 110, 100)
ReadIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnNS"))
ReadIL.MarkSequencePoint(doc12, 112, 1, 112, 100)
Dim typ33(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Beginning Assembly: ")
Typ = GetType(System.String)
ReDim Preserve typ33(UBound(typ33) + 1)
typ33(UBound(typ33)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ33))
Typ = GetType(Console).GetMethod("Write", typ33).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 113, 1, 113, 100)
Dim typ34(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 13)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ34(UBound(typ34) + 1)
typ34(UBound(typ34)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ34))
Typ = GetType(Console).GetMethod("WriteLine", typ34).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 115, 1, 115, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc12, 117, 1, 117, 100)
ReadIL.Emit(OpCodes.Br, cont277)
ReadIL.MarkLabel(fa277)
ReadIL.Emit(OpCodes.Br, cont277)
ReadIL.MarkLabel(cont277)
ReadIL.MarkSequencePoint(doc12, 119, 1, 119, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(VerStmt))
Dim typ35 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ35))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ35).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc12, 120, 1, 120, 100)
Dim typ36(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ36(UBound(typ36) + 1)
typ36(UBound(typ36)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ36))
Typ = Typ03.GetMethod("IsInstanceOfType", typ36).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc12, 122, 1, 122, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa278 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru278 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont278 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru278)
ReadIL.Emit(OpCodes.Br, fa278)
ReadIL.MarkLabel(tru278)
ReadIL.MarkSequencePoint(doc12, 123, 1, 123, 100)
Dim locbldr288 As LocalBuilder = ReadIL.DeclareLocal(GetType(VerStmt))
locbldr288.SetLocalSymInfo("asmv")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 15)
ReadIL.MarkSequencePoint(doc12, 124, 1, 124, 100)
Dim locbldr289 As LocalBuilder = ReadIL.DeclareLocal(GetType(IntLiteral).MakeArrayType())
locbldr289.SetLocalSymInfo("vns")
ReadIL.Emit(OpCodes.Ldloc, 15)
Typ = GetType(VerStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(VerStmt).GetField("VersionNos"))
Typ = GetType(VerStmt).GetField("VersionNos").FieldType
ReadIL.Emit(OpCodes.Stloc, 16)
ReadIL.MarkSequencePoint(doc12, 125, 1, 125, 100)
Dim locbldr290 As LocalBuilder = ReadIL.DeclareLocal(GetType(IntLiteral))
locbldr290.SetLocalSymInfo("vne")
ReadIL.MarkSequencePoint(doc12, 126, 1, 126, 100)
Dim locbldr291 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Int32).MakeArrayType())
locbldr291.SetLocalSymInfo("vernos")
ReadIL.Emit(OpCodes.Ldc_I4, CInt(4))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Int32))
ReadIL.Emit(OpCodes.Stloc, 18)
ReadIL.MarkSequencePoint(doc12, 127, 1, 127, 100)
ReadIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(IntLiteral).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(IntLiteral).MakeArrayType().GetElementType())
Typ = GetType(IntLiteral).MakeArrayType().GetElementType()
ReadIL.Emit(OpCodes.Stloc, 17)
ReadIL.MarkSequencePoint(doc12, 128, 1, 128, 100)
ReadIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(IntLiteral)
ReadIL.Emit(OpCodes.Ldfld, GetType(IntLiteral).GetField("NumVal"))
Typ = GetType(IntLiteral).GetField("NumVal").FieldType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Int32).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc12, 129, 1, 129, 100)
ReadIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(IntLiteral).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(IntLiteral).MakeArrayType().GetElementType())
Typ = GetType(IntLiteral).MakeArrayType().GetElementType()
ReadIL.Emit(OpCodes.Stloc, 17)
ReadIL.MarkSequencePoint(doc12, 130, 1, 130, 100)
ReadIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(IntLiteral)
ReadIL.Emit(OpCodes.Ldfld, GetType(IntLiteral).GetField("NumVal"))
Typ = GetType(IntLiteral).GetField("NumVal").FieldType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Int32).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc12, 131, 1, 131, 100)
ReadIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(IntLiteral).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(IntLiteral).MakeArrayType().GetElementType())
Typ = GetType(IntLiteral).MakeArrayType().GetElementType()
ReadIL.Emit(OpCodes.Stloc, 17)
ReadIL.MarkSequencePoint(doc12, 132, 1, 132, 100)
ReadIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(IntLiteral)
ReadIL.Emit(OpCodes.Ldfld, GetType(IntLiteral).GetField("NumVal"))
Typ = GetType(IntLiteral).GetField("NumVal").FieldType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Int32).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc12, 133, 1, 133, 100)
ReadIL.Emit(OpCodes.Ldloc, 16)
Typ = GetType(IntLiteral).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(IntLiteral).MakeArrayType().GetElementType())
Typ = GetType(IntLiteral).MakeArrayType().GetElementType()
ReadIL.Emit(OpCodes.Stloc, 17)
ReadIL.MarkSequencePoint(doc12, 134, 1, 134, 100)
ReadIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldloc, 17)
Typ = GetType(IntLiteral)
ReadIL.Emit(OpCodes.Ldfld, GetType(IntLiteral).GetField("NumVal"))
Typ = GetType(IntLiteral).GetField("NumVal").FieldType
ReadIL.Emit(OpCodes.Stelem, GetType(System.Int32).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc12, 135, 1, 135, 100)
Dim locbldr292 As LocalBuilder = ReadIL.DeclareLocal(GetType(Version))
locbldr292.SetLocalSymInfo("asmver")
Dim typ37(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(System.Int32).MakeArrayType().GetElementType())
Typ = GetType(System.Int32).MakeArrayType().GetElementType()
ReDim Preserve typ37(UBound(typ37) + 1)
typ37(UBound(typ37)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(System.Int32).MakeArrayType().GetElementType())
Typ = GetType(System.Int32).MakeArrayType().GetElementType()
ReDim Preserve typ37(UBound(typ37) + 1)
typ37(UBound(typ37)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(System.Int32).MakeArrayType().GetElementType())
Typ = GetType(System.Int32).MakeArrayType().GetElementType()
ReDim Preserve typ37(UBound(typ37) + 1)
typ37(UBound(typ37)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 18)
Typ = GetType(System.Int32).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(3))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, GetType(System.Int32).MakeArrayType().GetElementType())
Typ = GetType(System.Int32).MakeArrayType().GetElementType()
ReDim Preserve typ37(UBound(typ37) + 1)
typ37(UBound(typ37)) = Typ
ReadIL.Emit(OpCodes.Newobj, GetType(Version).GetConstructor(typ37))
ReadIL.Emit(OpCodes.Stloc, 19)
ReadIL.MarkSequencePoint(doc12, 136, 1, 136, 100)
Dim locbldr293 As LocalBuilder = ReadIL.DeclareLocal(GetType(AssemblyName))
locbldr293.SetLocalSymInfo("asmnm")
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmNameStr"))
Typ = GetType(AsmFactory).GetField("AsmNameStr").FieldType
ReadIL.Emit(OpCodes.Stloc, 20)
ReadIL.MarkSequencePoint(doc12, 137, 1, 137, 100)
Dim typ38(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(AssemblyName)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 19)
Typ = GetType(Version)
ReDim Preserve typ38(UBound(typ38) + 1)
typ38(UBound(typ38)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("set_Version", typ38))
Typ = Typ03.GetMethod("set_Version", typ38).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 138, 1, 138, 100)
ReadIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(AssemblyName)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AsmNameStr"))
ReadIL.MarkSequencePoint(doc12, 139, 1, 139, 100)
Dim locbldr294 As LocalBuilder = ReadIL.DeclareLocal(GetType(AppDomain))
locbldr294.SetLocalSymInfo("cad")
ReadIL.Emit(OpCodes.Call, GetType(AppDomain).GetMethod("get_CurrentDomain", Type.EmptyTypes))
Typ = GetType(AppDomain).GetMethod("get_CurrentDomain", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 21)
ReadIL.MarkSequencePoint(doc12, 140, 1, 140, 100)
Dim locbldr295 As LocalBuilder = ReadIL.DeclareLocal(GetType(AssemblyBuilderAccess))
locbldr295.SetLocalSymInfo("aasv")
ReadIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Stloc, 22)
ReadIL.MarkSequencePoint(doc12, 141, 1, 141, 100)
Dim locbldr296 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.String))
locbldr296.SetLocalSymInfo("curd")
ReadIL.Emit(OpCodes.Call, GetType(Directory).GetMethod("GetCurrentDirectory", Type.EmptyTypes))
Typ = GetType(Directory).GetMethod("GetCurrentDirectory", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 23)
ReadIL.MarkSequencePoint(doc12, 142, 1, 142, 100)
Dim typ39(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 21)
Typ = GetType(AppDomain)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(AssemblyName)
ReDim Preserve typ39(UBound(typ39) + 1)
typ39(UBound(typ39)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 22)
Typ = GetType(AssemblyBuilderAccess)
ReDim Preserve typ39(UBound(typ39) + 1)
typ39(UBound(typ39)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 23)
Typ = GetType(System.String)
ReDim Preserve typ39(UBound(typ39) + 1)
typ39(UBound(typ39)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineDynamicAssembly", typ39))
Typ = Typ03.GetMethod("DefineDynamicAssembly", typ39).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AsmB"))
ReadIL.MarkSequencePoint(doc12, 143, 1, 143, 100)
Dim locbldr297 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.String))
locbldr297.SetLocalSymInfo("asmnme")
ReadIL.Emit(OpCodes.Ldloc, 20)
Typ = GetType(AssemblyName)
Typ03 = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_Name", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_Name", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 24)
ReadIL.MarkSequencePoint(doc12, 144, 1, 144, 100)
Dim typ41(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(System.String)
ReDim Preserve typ41(UBound(typ41) + 1)
typ41(UBound(typ41)) = Typ
ReadIL.Emit(OpCodes.Ldstr, ".")
Typ = GetType(System.String)
ReDim Preserve typ41(UBound(typ41) + 1)
typ41(UBound(typ41)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmMode"))
Typ = GetType(AsmFactory).GetField("AsmMode").FieldType
ReDim Preserve typ41(UBound(typ41) + 1)
typ41(UBound(typ41)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ41))
Typ = GetType(String).GetMethod("Concat", typ41).ReturnType
ReadIL.Emit(OpCodes.Stloc, 24)
ReadIL.MarkSequencePoint(doc12, 145, 1, 145, 100)
Dim locbldr298 As LocalBuilder = ReadIL.DeclareLocal(GetType(AssemblyBuilder))
locbldr298.SetLocalSymInfo("ab")
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmB"))
Typ = GetType(AsmFactory).GetField("AsmB").FieldType
ReadIL.Emit(OpCodes.Stloc, 25)
ReadIL.MarkSequencePoint(doc12, 147, 1, 147, 100)
Dim typ42(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(AssemblyBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(System.String)
ReDim Preserve typ42(UBound(typ42) + 1)
typ42(UBound(typ42)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(System.String)
ReDim Preserve typ42(UBound(typ42) + 1)
typ42(UBound(typ42)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("DebugFlg"))
Typ = GetType(AsmFactory).GetField("DebugFlg").FieldType
ReDim Preserve typ42(UBound(typ42) + 1)
typ42(UBound(typ42)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineDynamicModule", typ42))
Typ = Typ03.GetMethod("DefineDynamicModule", typ42).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("MdlB"))
ReadIL.MarkSequencePoint(doc12, 149, 1, 149, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("DebugFlg"))
Typ = GetType(AsmFactory).GetField("DebugFlg").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa279 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru279 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont279 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru279)
ReadIL.Emit(OpCodes.Br, fa279)
ReadIL.MarkLabel(tru279)
ReadIL.MarkSequencePoint(doc12, 150, 1, 150, 100)
Dim locbldr299 As LocalBuilder = ReadIL.DeclareLocal(GetType(ModuleBuilder))
locbldr299.SetLocalSymInfo("mdlbldbg")
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("MdlB"))
Typ = GetType(AsmFactory).GetField("MdlB").FieldType
ReadIL.Emit(OpCodes.Stloc, 26)
ReadIL.MarkSequencePoint(doc12, 151, 1, 151, 100)
Dim typ43(-1) As Type
ReadIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.String)
ReDim Preserve typ43(UBound(typ43) + 1)
typ43(UBound(typ43)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Path).GetMethod("GetFullPath", typ43))
Typ = GetType(Path).GetMethod("GetFullPath", typ43).ReturnType
ReadIL.Emit(OpCodes.Starg, 2)
ReadIL.MarkSequencePoint(doc12, 152, 1, 152, 100)
Dim typ44(-1) As Type
ReadIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.String)
ReDim Preserve typ44(UBound(typ44) + 1)
typ44(UBound(typ44)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ44))
Typ = GetType(Console).GetMethod("WriteLine", typ44).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 153, 1, 153, 100)
Dim typ45(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 26)
Typ = GetType(ModuleBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.String)
ReDim Preserve typ45(UBound(typ45) + 1)
typ45(UBound(typ45)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Guid).GetField("Empty"))
Typ = GetType(Guid).GetField("Empty").FieldType
ReDim Preserve typ45(UBound(typ45) + 1)
typ45(UBound(typ45)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Guid).GetField("Empty"))
Typ = GetType(Guid).GetField("Empty").FieldType
ReDim Preserve typ45(UBound(typ45) + 1)
typ45(UBound(typ45)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(Guid).GetField("Empty"))
Typ = GetType(Guid).GetField("Empty").FieldType
ReDim Preserve typ45(UBound(typ45) + 1)
typ45(UBound(typ45)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineDocument", typ45))
Typ = Typ03.GetMethod("DefineDocument", typ45).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("DocWriter"))
ReadIL.MarkSequencePoint(doc12, 154, 1, 154, 100)
ReadIL.Emit(OpCodes.Br, cont279)
ReadIL.MarkLabel(fa279)
ReadIL.Emit(OpCodes.Br, cont279)
ReadIL.MarkLabel(cont279)
ReadIL.MarkSequencePoint(doc12, 157, 1, 157, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("DebugFlg"))
Typ = GetType(AsmFactory).GetField("DebugFlg").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa280 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru280 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont280 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru280)
ReadIL.Emit(OpCodes.Br, fa280)
ReadIL.MarkLabel(tru280)
ReadIL.MarkSequencePoint(doc12, 158, 1, 158, 100)
Dim locbldr300 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr300.SetLocalSymInfo("dtyp")
ReadIL.Emit(OpCodes.Ldtoken, GetType(DebuggableAttribute))
Dim typ46 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ46))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ46).ReturnType
ReadIL.Emit(OpCodes.Stloc, 27)
ReadIL.MarkSequencePoint(doc12, 159, 1, 159, 100)
Dim locbldr301 As LocalBuilder = ReadIL.DeclareLocal(GetType(DebuggableAttribute.DebuggingModes))
locbldr301.SetLocalSymInfo("debugattr")
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(256))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Or)
ReadIL.Emit(OpCodes.Stloc, 28)
ReadIL.MarkSequencePoint(doc12, 160, 1, 160, 100)
Dim locbldr302 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Object))
locbldr302.SetLocalSymInfo("oattr")
ReadIL.Emit(OpCodes.Ldloc, 28)
Typ = GetType(DebuggableAttribute.DebuggingModes)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReadIL.Emit(OpCodes.Stloc, 29)
ReadIL.MarkSequencePoint(doc12, 161, 1, 161, 100)
Dim locbldr303 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr303.SetLocalSymInfo("dattyp")
ReadIL.Emit(OpCodes.Ldtoken, GetType(DebuggableAttribute.DebuggingModes))
Dim typ47 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ47))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ47).ReturnType
ReadIL.Emit(OpCodes.Stloc, 30)
ReadIL.MarkSequencePoint(doc12, 162, 1, 162, 100)
Dim locbldr304 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type).MakeArrayType())
locbldr304.SetLocalSymInfo("tarr")
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Type))
ReadIL.Emit(OpCodes.Stloc, 31)
ReadIL.MarkSequencePoint(doc12, 163, 1, 163, 100)
ReadIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.Type).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldloc, 30)
Typ = GetType(System.Type)
ReadIL.Emit(OpCodes.Stelem, GetType(System.Type).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc12, 164, 1, 164, 100)
Dim locbldr305 As LocalBuilder = ReadIL.DeclareLocal(GetType(ConstructorInfo))
locbldr305.SetLocalSymInfo("dctor")
Dim typ48(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 27)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 31)
Typ = GetType(System.Type).MakeArrayType()
ReDim Preserve typ48(UBound(typ48) + 1)
typ48(UBound(typ48)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("GetConstructor", typ48))
Typ = Typ03.GetMethod("GetConstructor", typ48).ReturnType
ReadIL.Emit(OpCodes.Stloc, 32)
ReadIL.MarkSequencePoint(doc12, 165, 1, 165, 100)
Dim locbldr306 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Object).MakeArrayType())
locbldr306.SetLocalSymInfo("oarr")
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Object))
ReadIL.Emit(OpCodes.Stloc, 33)
ReadIL.MarkSequencePoint(doc12, 166, 1, 166, 100)
ReadIL.Emit(OpCodes.Ldloc, 33)
Typ = GetType(System.Object).MakeArrayType()
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldloc, 29)
Typ = GetType(System.Object)
ReadIL.Emit(OpCodes.Stelem, GetType(System.Object).MakeArrayType().GetElementType())
ReadIL.MarkSequencePoint(doc12, 167, 1, 167, 100)
Dim locbldr307 As LocalBuilder = ReadIL.DeclareLocal(GetType(CustomAttributeBuilder))
locbldr307.SetLocalSymInfo("dbuilder")
Dim typ49(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 32)
Typ = GetType(ConstructorInfo)
ReDim Preserve typ49(UBound(typ49) + 1)
typ49(UBound(typ49)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 33)
Typ = GetType(System.Object).MakeArrayType()
ReDim Preserve typ49(UBound(typ49) + 1)
typ49(UBound(typ49)) = Typ
ReadIL.Emit(OpCodes.Newobj, GetType(CustomAttributeBuilder).GetConstructor(typ49))
ReadIL.Emit(OpCodes.Stloc, 34)
ReadIL.MarkSequencePoint(doc12, 168, 1, 168, 100)
Dim typ50(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(AssemblyBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 34)
Typ = GetType(CustomAttributeBuilder)
ReDim Preserve typ50(UBound(typ50) + 1)
typ50(UBound(typ50)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("SetCustomAttribute", typ50))
Typ = Typ03.GetMethod("SetCustomAttribute", typ50).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 169, 1, 169, 100)
ReadIL.Emit(OpCodes.Br, cont280)
ReadIL.MarkLabel(fa280)
ReadIL.Emit(OpCodes.Br, cont280)
ReadIL.MarkLabel(cont280)
ReadIL.MarkSequencePoint(doc12, 172, 1, 172, 100)
ReadIL.Emit(OpCodes.Ldloc, 24)
Typ = GetType(System.String)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("AsmFile"))
ReadIL.MarkSequencePoint(doc12, 173, 1, 173, 100)
Dim typ51(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmB"))
Typ = GetType(AsmFactory).GetField("AsmB").FieldType
ReDim Preserve typ51(UBound(typ51) + 1)
typ51(UBound(typ51)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Importer).GetMethod("AddAsm", typ51))
Typ = GetType(Importer).GetMethod("AddAsm", typ51).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 174, 1, 174, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc12, 175, 1, 175, 100)
ReadIL.Emit(OpCodes.Br, cont278)
ReadIL.MarkLabel(fa278)
ReadIL.Emit(OpCodes.Br, cont278)
ReadIL.MarkLabel(cont278)
ReadIL.MarkSequencePoint(doc12, 177, 1, 177, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(DebugStmt))
Dim typ52 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ52))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ52).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc12, 178, 1, 178, 100)
Dim typ53(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ53(UBound(typ53) + 1)
typ53(UBound(typ53)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ53))
Typ = Typ03.GetMethod("IsInstanceOfType", typ53).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc12, 180, 1, 180, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa281 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru281 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont281 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru281)
ReadIL.Emit(OpCodes.Br, fa281)
ReadIL.MarkLabel(tru281)
ReadIL.MarkSequencePoint(doc12, 181, 1, 181, 100)
Dim locbldr308 As LocalBuilder = ReadIL.DeclareLocal(GetType(DebugStmt))
locbldr308.SetLocalSymInfo("dbgs")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 35)
ReadIL.MarkSequencePoint(doc12, 182, 1, 182, 100)
ReadIL.Emit(OpCodes.Ldloc, 35)
Typ = GetType(DebugStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(DebugStmt).GetField("Flg"))
Typ = GetType(DebugStmt).GetField("Flg").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("DebugFlg"))
ReadIL.MarkSequencePoint(doc12, 183, 1, 183, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc12, 184, 1, 184, 100)
ReadIL.Emit(OpCodes.Br, cont281)
ReadIL.MarkLabel(fa281)
ReadIL.Emit(OpCodes.Br, cont281)
ReadIL.MarkLabel(cont281)
ReadIL.MarkSequencePoint(doc12, 186, 1, 186, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(ClassStmt))
Dim typ54 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ54))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ54).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc12, 187, 1, 187, 100)
Dim typ55(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ55(UBound(typ55) + 1)
typ55(UBound(typ55)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ55))
Typ = Typ03.GetMethod("IsInstanceOfType", typ55).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc12, 189, 1, 189, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa282 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru282 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont282 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru282)
ReadIL.Emit(OpCodes.Br, fa282)
ReadIL.MarkLabel(tru282)
ReadIL.MarkSequencePoint(doc12, 190, 1, 190, 100)
Dim locbldr309 As LocalBuilder = ReadIL.DeclareLocal(GetType(ClassStmt))
locbldr309.SetLocalSymInfo("clss")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 36)
ReadIL.MarkSequencePoint(doc12, 192, 1, 192, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("inClass"))
Typ = GetType(AsmFactory).GetField("inClass").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa283 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru283 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont283 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru283)
ReadIL.Emit(OpCodes.Br, fa283)
ReadIL.MarkLabel(tru283)
ReadIL.MarkSequencePoint(doc12, 193, 1, 193, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("isNested"))
ReadIL.MarkSequencePoint(doc12, 194, 1, 194, 100)
ReadIL.Emit(OpCodes.Br, cont283)
ReadIL.MarkLabel(fa283)
ReadIL.Emit(OpCodes.Br, cont283)
ReadIL.MarkLabel(cont283)
ReadIL.MarkSequencePoint(doc12, 196, 1, 196, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa284 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru284 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont284 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru284)
ReadIL.Emit(OpCodes.Br, fa284)
ReadIL.MarkLabel(tru284)
ReadIL.MarkSequencePoint(doc12, 197, 1, 197, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("inClass"))
ReadIL.MarkSequencePoint(doc12, 198, 1, 198, 100)
ReadIL.Emit(OpCodes.Br, cont284)
ReadIL.MarkLabel(fa284)
ReadIL.Emit(OpCodes.Br, cont284)
ReadIL.MarkLabel(cont284)
ReadIL.MarkSequencePoint(doc12, 200, 1, 200, 100)
Dim locbldr310 As LocalBuilder = ReadIL.DeclareLocal(GetType(Attributes.Attribute).MakeArrayType())
locbldr310.SetLocalSymInfo("attrs")
ReadIL.Emit(OpCodes.Ldloc, 36)
Typ = GetType(ClassStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(ClassStmt).GetField("Attrs"))
Typ = GetType(ClassStmt).GetField("Attrs").FieldType
ReadIL.Emit(OpCodes.Stloc, 37)
ReadIL.MarkSequencePoint(doc12, 201, 1, 201, 100)
Dim locbldr311 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeAttributes))
locbldr311.SetLocalSymInfo("ta")
Dim typ56(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 37)
Typ = GetType(Attributes.Attribute).MakeArrayType()
ReDim Preserve typ56(UBound(typ56) + 1)
typ56(UBound(typ56)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessClassAttrs", typ56))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessClassAttrs", typ56).ReturnType
ReadIL.Emit(OpCodes.Stloc, 38)
ReadIL.MarkSequencePoint(doc12, 202, 1, 202, 100)
Dim locbldr312 As LocalBuilder = ReadIL.DeclareLocal(GetType(Ident))
locbldr312.SetLocalSymInfo("clssnam")
ReadIL.Emit(OpCodes.Ldloc, 36)
Typ = GetType(ClassStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(ClassStmt).GetField("ClassName"))
Typ = GetType(ClassStmt).GetField("ClassName").FieldType
ReadIL.Emit(OpCodes.Stloc, 39)
ReadIL.MarkSequencePoint(doc12, 203, 1, 203, 100)
Dim locbldr313 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.String))
locbldr313.SetLocalSymInfo("clsnamstr")
ReadIL.Emit(OpCodes.Ldloc, 39)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stloc, 40)
ReadIL.MarkSequencePoint(doc12, 204, 1, 204, 100)
Dim locbldr314 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeTok))
locbldr314.SetLocalSymInfo("inhclstok")
ReadIL.Emit(OpCodes.Ldloc, 36)
Typ = GetType(ClassStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(ClassStmt).GetField("InhClass"))
Typ = GetType(ClassStmt).GetField("InhClass").FieldType
ReadIL.Emit(OpCodes.Stloc, 41)
ReadIL.MarkSequencePoint(doc12, 205, 1, 205, 100)
Dim locbldr315 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr315.SetLocalSymInfo("inhtyp")
ReadIL.Emit(OpCodes.Ldnull)
ReadIL.Emit(OpCodes.Stloc, 42)
ReadIL.MarkSequencePoint(doc12, 206, 1, 206, 100)
Dim locbldr316 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr316.SetLocalSymInfo("reft")
ReadIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(TypeTok)
ReadIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("RefTyp"))
Typ = GetType(TypeTok).GetField("RefTyp").FieldType
ReadIL.Emit(OpCodes.Stloc, 43)
ReadIL.MarkSequencePoint(doc12, 207, 1, 207, 100)
Dim locbldr317 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Int32))
locbldr317.SetLocalSymInfo("cmp")
Dim typ57(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(TypeTok)
ReadIL.Emit(OpCodes.Ldfld, GetType(TypeTok).GetField("Value"))
Typ = GetType(TypeTok).GetField("Value").FieldType
ReDim Preserve typ57(UBound(typ57) + 1)
typ57(UBound(typ57)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ReDim Preserve typ57(UBound(typ57) + 1)
typ57(UBound(typ57)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ57))
Typ = GetType(String).GetMethod("Compare", typ57).ReturnType
ReadIL.Emit(OpCodes.Stloc, 44)
ReadIL.MarkSequencePoint(doc12, 209, 1, 209, 100)
ReadIL.Emit(OpCodes.Ldloc, 43)
Typ = GetType(System.Type)
ReadIL.Emit(OpCodes.Ldnull)
Dim fa285 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru285 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont285 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru285)
ReadIL.Emit(OpCodes.Br, fa285)
ReadIL.MarkLabel(tru285)
ReadIL.MarkSequencePoint(doc12, 210, 1, 210, 100)
ReadIL.Emit(OpCodes.Ldloc, 44)
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa286 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru286 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont286 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru286)
ReadIL.Emit(OpCodes.Br, fa286)
ReadIL.MarkLabel(tru286)
ReadIL.MarkSequencePoint(doc12, 211, 1, 211, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(System.Object))
Dim typ58 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ58))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ58).ReturnType
ReadIL.Emit(OpCodes.Stloc, 42)
ReadIL.MarkSequencePoint(doc12, 212, 1, 212, 100)
ReadIL.Emit(OpCodes.Br, cont286)
ReadIL.MarkLabel(fa286)
ReadIL.MarkSequencePoint(doc12, 213, 1, 213, 100)
Dim typ59(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 41)
Typ = GetType(TypeTok)
ReDim Preserve typ59(UBound(typ59) + 1)
typ59(UBound(typ59)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ59))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ59).ReturnType
ReadIL.Emit(OpCodes.Stloc, 42)
ReadIL.MarkSequencePoint(doc12, 214, 1, 214, 100)
ReadIL.Emit(OpCodes.Br, cont286)
ReadIL.MarkLabel(cont286)
ReadIL.MarkSequencePoint(doc12, 215, 1, 215, 100)
ReadIL.Emit(OpCodes.Br, cont285)
ReadIL.MarkLabel(fa285)
ReadIL.MarkSequencePoint(doc12, 216, 1, 216, 100)
ReadIL.Emit(OpCodes.Ldloc, 43)
Typ = GetType(System.Type)
ReadIL.Emit(OpCodes.Stloc, 42)
ReadIL.MarkSequencePoint(doc12, 217, 1, 217, 100)
ReadIL.Emit(OpCodes.Br, cont285)
ReadIL.MarkLabel(cont285)
ReadIL.MarkSequencePoint(doc12, 220, 1, 220, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa287 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru287 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont287 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru287)
ReadIL.Emit(OpCodes.Br, fa287)
ReadIL.MarkLabel(tru287)
ReadIL.MarkSequencePoint(doc12, 221, 1, 221, 100)
Dim locbldr318 As LocalBuilder = ReadIL.DeclareLocal(GetType(ModuleBuilder))
locbldr318.SetLocalSymInfo("mdlbld")
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("MdlB"))
Typ = GetType(AsmFactory).GetField("MdlB").FieldType
ReadIL.Emit(OpCodes.Stloc, 45)
ReadIL.MarkSequencePoint(doc12, 222, 1, 222, 100)
ReadIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(System.String)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnTypName"))
ReadIL.MarkSequencePoint(doc12, 223, 1, 223, 100)
Dim typ60(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnNS"))
Typ = GetType(AsmFactory).GetField("CurnNS").FieldType
ReDim Preserve typ60(UBound(typ60) + 1)
typ60(UBound(typ60)) = Typ
ReadIL.Emit(OpCodes.Ldstr, ".")
Typ = GetType(System.String)
ReDim Preserve typ60(UBound(typ60) + 1)
typ60(UBound(typ60)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(System.String)
ReDim Preserve typ60(UBound(typ60) + 1)
typ60(UBound(typ60)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ60))
Typ = GetType(String).GetMethod("Concat", typ60).ReturnType
ReadIL.Emit(OpCodes.Stloc, 40)
ReadIL.MarkSequencePoint(doc12, 224, 1, 224, 100)
Dim typ61(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 45)
Typ = GetType(ModuleBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(System.String)
ReDim Preserve typ61(UBound(typ61) + 1)
typ61(UBound(typ61)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(TypeAttributes)
ReDim Preserve typ61(UBound(typ61) + 1)
typ61(UBound(typ61)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(System.Type)
ReDim Preserve typ61(UBound(typ61) + 1)
typ61(UBound(typ61)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineType", typ61))
Typ = Typ03.GetMethod("DefineType", typ61).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnTypB"))
ReadIL.MarkSequencePoint(doc12, 226, 1, 226, 100)
Dim typ62(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Adding Class: ")
Typ = GetType(System.String)
ReDim Preserve typ62(UBound(typ62) + 1)
typ62(UBound(typ62)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ62))
Typ = GetType(Console).GetMethod("Write", typ62).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 227, 1, 227, 100)
Dim typ63(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(System.String)
ReDim Preserve typ63(UBound(typ63) + 1)
typ63(UBound(typ63)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ63))
Typ = GetType(Console).GetMethod("WriteLine", typ63).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 228, 1, 228, 100)
ReadIL.Emit(OpCodes.Br, cont287)
ReadIL.MarkLabel(fa287)
ReadIL.MarkSequencePoint(doc12, 229, 1, 229, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnTypB2"))
ReadIL.MarkSequencePoint(doc12, 230, 1, 230, 100)
Dim locbldr319 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeBuilder))
locbldr319.SetLocalSymInfo("ctb2")
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB2"))
Typ = GetType(AsmFactory).GetField("CurnTypB2").FieldType
ReadIL.Emit(OpCodes.Stloc, 46)
ReadIL.MarkSequencePoint(doc12, 231, 1, 231, 100)
Dim typ64(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Adding Nested Class: ")
Typ = GetType(System.String)
ReDim Preserve typ64(UBound(typ64) + 1)
typ64(UBound(typ64)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ64))
Typ = GetType(Console).GetMethod("Write", typ64).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 232, 1, 232, 100)
Dim typ65(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(System.String)
ReDim Preserve typ65(UBound(typ65) + 1)
typ65(UBound(typ65)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ65))
Typ = GetType(Console).GetMethod("WriteLine", typ65).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 233, 1, 233, 100)
ReadIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(System.String)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnTypName"))
ReadIL.MarkSequencePoint(doc12, 234, 1, 234, 100)
Dim typ66(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 46)
Typ = GetType(TypeBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 40)
Typ = GetType(System.String)
ReDim Preserve typ66(UBound(typ66) + 1)
typ66(UBound(typ66)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 38)
Typ = GetType(TypeAttributes)
ReDim Preserve typ66(UBound(typ66) + 1)
typ66(UBound(typ66)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 42)
Typ = GetType(System.Type)
ReDim Preserve typ66(UBound(typ66) + 1)
typ66(UBound(typ66)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineNestedType", typ66))
Typ = Typ03.GetMethod("DefineNestedType", typ66).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnTypB"))
ReadIL.MarkSequencePoint(doc12, 235, 1, 235, 100)
ReadIL.Emit(OpCodes.Br, cont287)
ReadIL.MarkLabel(cont287)
ReadIL.MarkSequencePoint(doc12, 237, 1, 237, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc12, 238, 1, 238, 100)
ReadIL.Emit(OpCodes.Br, cont282)
ReadIL.MarkLabel(fa282)
ReadIL.Emit(OpCodes.Br, cont282)
ReadIL.MarkLabel(cont282)
ReadIL.MarkSequencePoint(doc12, 240, 1, 240, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(FieldStmt))
Dim typ67 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ67))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ67).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc12, 241, 1, 241, 100)
Dim typ68(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ68(UBound(typ68) + 1)
typ68(UBound(typ68)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ68))
Typ = Typ03.GetMethod("IsInstanceOfType", typ68).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc12, 243, 1, 243, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa288 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru288 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont288 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru288)
ReadIL.Emit(OpCodes.Br, fa288)
ReadIL.MarkLabel(tru288)
ReadIL.MarkSequencePoint(doc12, 244, 1, 244, 100)
Dim locbldr320 As LocalBuilder = ReadIL.DeclareLocal(GetType(FieldStmt))
locbldr320.SetLocalSymInfo("flss")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 47)
ReadIL.MarkSequencePoint(doc12, 246, 1, 246, 100)
Dim locbldr321 As LocalBuilder = ReadIL.DeclareLocal(GetType(Attributes.Attribute).MakeArrayType())
locbldr321.SetLocalSymInfo("fattrs")
ReadIL.Emit(OpCodes.Ldloc, 47)
Typ = GetType(FieldStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(FieldStmt).GetField("Attrs"))
Typ = GetType(FieldStmt).GetField("Attrs").FieldType
ReadIL.Emit(OpCodes.Stloc, 48)
ReadIL.MarkSequencePoint(doc12, 247, 1, 247, 100)
Dim locbldr322 As LocalBuilder = ReadIL.DeclareLocal(GetType(FieldAttributes))
locbldr322.SetLocalSymInfo("fa")
Dim typ69(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 48)
Typ = GetType(Attributes.Attribute).MakeArrayType()
ReDim Preserve typ69(UBound(typ69) + 1)
typ69(UBound(typ69)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessFieldAttrs", typ69))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessFieldAttrs", typ69).ReturnType
ReadIL.Emit(OpCodes.Stloc, 49)
ReadIL.MarkSequencePoint(doc12, 248, 1, 248, 100)
Dim locbldr323 As LocalBuilder = ReadIL.DeclareLocal(GetType(Ident))
locbldr323.SetLocalSymInfo("flssnam")
ReadIL.Emit(OpCodes.Ldloc, 47)
Typ = GetType(FieldStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(FieldStmt).GetField("FieldName"))
Typ = GetType(FieldStmt).GetField("FieldName").FieldType
ReadIL.Emit(OpCodes.Stloc, 50)
ReadIL.MarkSequencePoint(doc12, 249, 1, 249, 100)
Dim locbldr324 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.String))
locbldr324.SetLocalSymInfo("flsnamstr")
ReadIL.Emit(OpCodes.Ldloc, 50)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stloc, 51)
ReadIL.MarkSequencePoint(doc12, 250, 1, 250, 100)
Dim locbldr325 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeTok))
locbldr325.SetLocalSymInfo("ftyptok")
ReadIL.Emit(OpCodes.Ldloc, 47)
Typ = GetType(FieldStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(FieldStmt).GetField("FieldTyp"))
Typ = GetType(FieldStmt).GetField("FieldTyp").FieldType
ReadIL.Emit(OpCodes.Stloc, 52)
ReadIL.MarkSequencePoint(doc12, 251, 1, 251, 100)
Dim locbldr326 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr326.SetLocalSymInfo("ftyp")
ReadIL.Emit(OpCodes.Ldnull)
ReadIL.Emit(OpCodes.Stloc, 53)
ReadIL.MarkSequencePoint(doc12, 264, 1, 264, 100)
Dim typ70(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 52)
Typ = GetType(TypeTok)
ReDim Preserve typ70(UBound(typ70) + 1)
typ70(UBound(typ70)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ70))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ70).ReturnType
ReadIL.Emit(OpCodes.Stloc, 53)
ReadIL.MarkSequencePoint(doc12, 266, 1, 266, 100)
Dim locbldr327 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeBuilder))
locbldr327.SetLocalSymInfo("typb2")
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
ReadIL.Emit(OpCodes.Stloc, 54)
ReadIL.MarkSequencePoint(doc12, 267, 1, 267, 100)
Dim typ71(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 54)
Typ = GetType(TypeBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 51)
Typ = GetType(System.String)
ReDim Preserve typ71(UBound(typ71) + 1)
typ71(UBound(typ71)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 53)
Typ = GetType(System.Type)
ReDim Preserve typ71(UBound(typ71) + 1)
typ71(UBound(typ71)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 49)
Typ = GetType(FieldAttributes)
ReDim Preserve typ71(UBound(typ71) + 1)
typ71(UBound(typ71)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineField", typ71))
Typ = Typ03.GetMethod("DefineField", typ71).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnFldB"))
ReadIL.MarkSequencePoint(doc12, 269, 1, 269, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa289 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru289 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont289 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru289)
ReadIL.Emit(OpCodes.Br, fa289)
ReadIL.MarkLabel(tru289)
ReadIL.MarkSequencePoint(doc12, 270, 1, 270, 100)
Dim typ72(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 51)
Typ = GetType(System.String)
ReDim Preserve typ72(UBound(typ72) + 1)
typ72(UBound(typ72)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 53)
Typ = GetType(System.Type)
ReDim Preserve typ72(UBound(typ72) + 1)
typ72(UBound(typ72)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnFldB"))
Typ = GetType(AsmFactory).GetField("CurnFldB").FieldType
ReDim Preserve typ72(UBound(typ72) + 1)
typ72(UBound(typ72)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddFld", typ72))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddFld", typ72).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 271, 1, 271, 100)
ReadIL.Emit(OpCodes.Br, cont289)
ReadIL.MarkLabel(fa289)
ReadIL.MarkSequencePoint(doc12, 272, 1, 272, 100)
Dim typ73(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 51)
Typ = GetType(System.String)
ReDim Preserve typ73(UBound(typ73) + 1)
typ73(UBound(typ73)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 53)
Typ = GetType(System.Type)
ReDim Preserve typ73(UBound(typ73) + 1)
typ73(UBound(typ73)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnFldB"))
Typ = GetType(AsmFactory).GetField("CurnFldB").FieldType
ReDim Preserve typ73(UBound(typ73) + 1)
typ73(UBound(typ73)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddNestedFld", typ73))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddNestedFld", typ73).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 273, 1, 273, 100)
ReadIL.Emit(OpCodes.Br, cont289)
ReadIL.MarkLabel(cont289)
ReadIL.MarkSequencePoint(doc12, 275, 1, 275, 100)
Dim typ74(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Adding Field: ")
Typ = GetType(System.String)
ReDim Preserve typ74(UBound(typ74) + 1)
typ74(UBound(typ74)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ74))
Typ = GetType(Console).GetMethod("Write", typ74).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 276, 1, 276, 100)
Dim typ75(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 51)
Typ = GetType(System.String)
ReDim Preserve typ75(UBound(typ75) + 1)
typ75(UBound(typ75)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ75))
Typ = GetType(Console).GetMethod("WriteLine", typ75).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 278, 1, 278, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc12, 279, 1, 279, 100)
ReadIL.Emit(OpCodes.Br, cont288)
ReadIL.MarkLabel(fa288)
ReadIL.Emit(OpCodes.Br, cont288)
ReadIL.MarkLabel(cont288)
ReadIL.MarkSequencePoint(doc12, 282, 1, 282, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(EndClassStmt))
Dim typ76 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ76))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ76).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc12, 283, 1, 283, 100)
Dim typ77(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ77(UBound(typ77) + 1)
typ77(UBound(typ77)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ77))
Typ = Typ03.GetMethod("IsInstanceOfType", typ77).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc12, 285, 1, 285, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa290 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru290 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont290 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru290)
ReadIL.Emit(OpCodes.Br, fa290)
ReadIL.MarkLabel(tru290)
ReadIL.MarkSequencePoint(doc12, 286, 1, 286, 100)
ReadIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("CreateTyp", Type.EmptyTypes))
Typ = GetType(AsmFactory).GetMethod("CreateTyp", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 287, 1, 287, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa291 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru291 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont291 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru291)
ReadIL.Emit(OpCodes.Br, fa291)
ReadIL.MarkLabel(tru291)
ReadIL.MarkSequencePoint(doc12, 288, 1, 288, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("inClass"))
ReadIL.MarkSequencePoint(doc12, 289, 1, 289, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetMet", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetMet", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 290, 1, 290, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetCtor", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetCtor", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 291, 1, 291, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetFld", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetFld", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 292, 1, 292, 100)
ReadIL.Emit(OpCodes.Br, cont291)
ReadIL.MarkLabel(fa291)
ReadIL.Emit(OpCodes.Br, cont291)
ReadIL.MarkLabel(cont291)
ReadIL.MarkSequencePoint(doc12, 293, 1, 293, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa292 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru292 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont292 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru292)
ReadIL.Emit(OpCodes.Br, fa292)
ReadIL.MarkLabel(tru292)
ReadIL.MarkSequencePoint(doc12, 294, 1, 294, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB2"))
Typ = GetType(AsmFactory).GetField("CurnTypB2").FieldType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnTypB"))
ReadIL.MarkSequencePoint(doc12, 295, 1, 295, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("isNested"))
ReadIL.MarkSequencePoint(doc12, 296, 1, 296, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetNestedMet", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetNestedMet", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 297, 1, 297, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetNestedCtor", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetNestedCtor", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 298, 1, 298, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetNestedFld", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetNestedFld", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 299, 1, 299, 100)
ReadIL.Emit(OpCodes.Br, cont292)
ReadIL.MarkLabel(fa292)
ReadIL.Emit(OpCodes.Br, cont292)
ReadIL.MarkLabel(cont292)
ReadIL.MarkSequencePoint(doc12, 300, 1, 300, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc12, 301, 1, 301, 100)
ReadIL.Emit(OpCodes.Br, cont290)
ReadIL.MarkLabel(fa290)
ReadIL.Emit(OpCodes.Br, cont290)
ReadIL.MarkLabel(cont290)
ReadIL.MarkSequencePoint(doc12, 303, 1, 303, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(MethodStmt))
Dim typ78 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ78))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ78).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc12, 304, 1, 304, 100)
Dim typ79(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ79(UBound(typ79) + 1)
typ79(UBound(typ79)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ79))
Typ = Typ03.GetMethod("IsInstanceOfType", typ79).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc12, 306, 1, 306, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa293 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru293 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont293 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru293)
ReadIL.Emit(OpCodes.Br, fa293)
ReadIL.MarkLabel(tru293)
ReadIL.MarkSequencePoint(doc12, 307, 1, 307, 100)
Dim locbldr328 As LocalBuilder = ReadIL.DeclareLocal(GetType(MethodStmt))
locbldr328.SetLocalSymInfo("mtss")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 55)
ReadIL.MarkSequencePoint(doc12, 309, 1, 309, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(ILEmitter).GetField("StaticFlg"))
ReadIL.MarkSequencePoint(doc12, 311, 1, 311, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetVar", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetVar", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 312, 1, 312, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetIf", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ResetIf", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 314, 1, 314, 100)
Dim locbldr329 As LocalBuilder = ReadIL.DeclareLocal(GetType(Attributes.Attribute).MakeArrayType())
locbldr329.SetLocalSymInfo("mattrs")
ReadIL.Emit(OpCodes.Ldloc, 55)
Typ = GetType(MethodStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(MethodStmt).GetField("Attrs"))
Typ = GetType(MethodStmt).GetField("Attrs").FieldType
ReadIL.Emit(OpCodes.Stloc, 56)
ReadIL.MarkSequencePoint(doc12, 315, 1, 315, 100)
Dim locbldr330 As LocalBuilder = ReadIL.DeclareLocal(GetType(MethodAttributes))
locbldr330.SetLocalSymInfo("ma")
Dim typ80(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 56)
Typ = GetType(Attributes.Attribute).MakeArrayType()
ReDim Preserve typ80(UBound(typ80) + 1)
typ80(UBound(typ80)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessMethodAttrs", typ80))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessMethodAttrs", typ80).ReturnType
ReadIL.Emit(OpCodes.Stloc, 57)
ReadIL.MarkSequencePoint(doc12, 316, 1, 316, 100)
Dim locbldr331 As LocalBuilder = ReadIL.DeclareLocal(GetType(Ident))
locbldr331.SetLocalSymInfo("mtssnam")
ReadIL.Emit(OpCodes.Ldloc, 55)
Typ = GetType(MethodStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(MethodStmt).GetField("MethodName"))
Typ = GetType(MethodStmt).GetField("MethodName").FieldType
ReadIL.Emit(OpCodes.Stloc, 58)
ReadIL.MarkSequencePoint(doc12, 317, 1, 317, 100)
Dim locbldr332 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.String))
locbldr332.SetLocalSymInfo("mtssnamstr")
ReadIL.Emit(OpCodes.Ldloc, 58)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReadIL.Emit(OpCodes.Stloc, 59)
ReadIL.MarkSequencePoint(doc12, 318, 1, 318, 100)
Dim locbldr333 As LocalBuilder = ReadIL.DeclareLocal(GetType(Expr).MakeArrayType())
locbldr333.SetLocalSymInfo("paramarr")
ReadIL.Emit(OpCodes.Ldloc, 55)
Typ = GetType(MethodStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(MethodStmt).GetField("Params"))
Typ = GetType(MethodStmt).GetField("Params").FieldType
ReadIL.Emit(OpCodes.Stloc, 60)
ReadIL.MarkSequencePoint(doc12, 319, 1, 319, 100)
Dim locbldr334 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Int32))
locbldr334.SetLocalSymInfo("paramlen")
ReadIL.Emit(OpCodes.Ldloc, 60)
Typ = GetType(Expr).MakeArrayType()
ReadIL.Emit(OpCodes.Ldlen)
ReadIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Stloc, 61)
ReadIL.MarkSequencePoint(doc12, 320, 1, 320, 100)
Dim locbldr335 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeTok))
locbldr335.SetLocalSymInfo("rettyptok")
ReadIL.Emit(OpCodes.Ldloc, 55)
Typ = GetType(MethodStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(MethodStmt).GetField("RetTyp"))
Typ = GetType(MethodStmt).GetField("RetTyp").FieldType
ReadIL.Emit(OpCodes.Stloc, 62)
ReadIL.MarkSequencePoint(doc12, 321, 1, 321, 100)
Dim locbldr336 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr336.SetLocalSymInfo("rettyp")
ReadIL.Emit(OpCodes.Ldnull)
ReadIL.Emit(OpCodes.Stloc, 63)
ReadIL.MarkSequencePoint(doc12, 338, 1, 338, 100)
Dim typ81(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 62)
Typ = GetType(TypeTok)
ReDim Preserve typ81(UBound(typ81) + 1)
typ81(UBound(typ81)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ81))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ81).ReturnType
ReadIL.Emit(OpCodes.Stloc, 63)
ReadIL.MarkSequencePoint(doc12, 340, 1, 340, 100)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
ReadIL.Emit(OpCodes.Newarr, GetType(System.Type))
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("TypArr"))
ReadIL.MarkSequencePoint(doc12, 342, 1, 342, 100)
ReadIL.Emit(OpCodes.Ldloc, 61)
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa294 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru294 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont294 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru294)
ReadIL.Emit(OpCodes.Br, fa294)
ReadIL.MarkLabel(tru294)
ReadIL.MarkSequencePoint(doc12, 343, 1, 343, 100)
ReadIL.Emit(OpCodes.Br, cont294)
ReadIL.MarkLabel(fa294)
ReadIL.MarkSequencePoint(doc12, 344, 1, 344, 100)
Dim typ82(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 60)
Typ = GetType(Expr).MakeArrayType()
ReDim Preserve typ82(UBound(typ82) + 1)
typ82(UBound(typ82)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessParams", typ82))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("ProcessParams", typ82).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 345, 1, 345, 100)
ReadIL.Emit(OpCodes.Br, cont294)
ReadIL.MarkLabel(cont294)
ReadIL.MarkSequencePoint(doc12, 348, 1, 348, 100)
Dim locbldr337 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeBuilder))
locbldr337.SetLocalSymInfo("typb")
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnTypB"))
Typ = GetType(AsmFactory).GetField("CurnTypB").FieldType
ReadIL.Emit(OpCodes.Stloc, 64)
ReadIL.MarkSequencePoint(doc12, 349, 1, 349, 100)
Dim locbldr338 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Boolean))
locbldr338.SetLocalSymInfo("isconstr")
Dim typ83(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 59)
Typ = GetType(System.String)
ReDim Preserve typ83(UBound(typ83) + 1)
typ83(UBound(typ83)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "^ctor(.)*$")
Typ = GetType(System.String)
ReDim Preserve typ83(UBound(typ83) + 1)
typ83(UBound(typ83)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ParseUtils).GetMethod("LikeOP", typ83))
Typ = GetType(ParseUtils).GetMethod("LikeOP", typ83).ReturnType
ReadIL.Emit(OpCodes.Stloc, 65)
ReadIL.MarkSequencePoint(doc12, 350, 1, 350, 100)
ReadIL.Emit(OpCodes.Ldloc, 65)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa295 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru295 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont295 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru295)
ReadIL.Emit(OpCodes.Br, fa295)
ReadIL.MarkLabel(tru295)
ReadIL.MarkSequencePoint(doc12, 351, 1, 351, 100)
Dim typ84(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 64)
Typ = GetType(TypeBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 59)
Typ = GetType(System.String)
ReDim Preserve typ84(UBound(typ84) + 1)
typ84(UBound(typ84)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 57)
Typ = GetType(MethodAttributes)
ReDim Preserve typ84(UBound(typ84) + 1)
typ84(UBound(typ84)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 63)
Typ = GetType(System.Type)
ReDim Preserve typ84(UBound(typ84) + 1)
typ84(UBound(typ84)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ReDim Preserve typ84(UBound(typ84) + 1)
typ84(UBound(typ84)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineMethod", typ84))
Typ = Typ03.GetMethod("DefineMethod", typ84).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnMetB"))
ReadIL.MarkSequencePoint(doc12, 352, 1, 352, 100)
ReadIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("InitMtd", Type.EmptyTypes))
Typ = GetType(AsmFactory).GetMethod("InitMtd", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 353, 1, 353, 100)
Dim typ85(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Adding Method: ")
Typ = GetType(System.String)
ReDim Preserve typ85(UBound(typ85) + 1)
typ85(UBound(typ85)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ85))
Typ = GetType(Console).GetMethod("Write", typ85).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 354, 1, 354, 100)
Dim typ86(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 59)
Typ = GetType(System.String)
ReDim Preserve typ86(UBound(typ86) + 1)
typ86(UBound(typ86)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ86))
Typ = GetType(Console).GetMethod("WriteLine", typ86).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 356, 1, 356, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa296 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru296 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont296 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru296)
ReadIL.Emit(OpCodes.Br, fa296)
ReadIL.MarkLabel(tru296)
ReadIL.MarkSequencePoint(doc12, 357, 1, 357, 100)
Dim typ87(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 59)
Typ = GetType(System.String)
ReDim Preserve typ87(UBound(typ87) + 1)
typ87(UBound(typ87)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 63)
Typ = GetType(System.Type)
ReDim Preserve typ87(UBound(typ87) + 1)
typ87(UBound(typ87)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ReDim Preserve typ87(UBound(typ87) + 1)
typ87(UBound(typ87)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnMetB"))
Typ = GetType(AsmFactory).GetField("CurnMetB").FieldType
ReDim Preserve typ87(UBound(typ87) + 1)
typ87(UBound(typ87)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddMet", typ87))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddMet", typ87).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 358, 1, 358, 100)
ReadIL.Emit(OpCodes.Br, cont296)
ReadIL.MarkLabel(fa296)
ReadIL.MarkSequencePoint(doc12, 359, 1, 359, 100)
Dim typ88(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 59)
Typ = GetType(System.String)
ReDim Preserve typ88(UBound(typ88) + 1)
typ88(UBound(typ88)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 63)
Typ = GetType(System.Type)
ReDim Preserve typ88(UBound(typ88) + 1)
typ88(UBound(typ88)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ReDim Preserve typ88(UBound(typ88) + 1)
typ88(UBound(typ88)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnMetB"))
Typ = GetType(AsmFactory).GetField("CurnMetB").FieldType
ReDim Preserve typ88(UBound(typ88) + 1)
typ88(UBound(typ88)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddNestedMet", typ88))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddNestedMet", typ88).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 360, 1, 360, 100)
ReadIL.Emit(OpCodes.Br, cont296)
ReadIL.MarkLabel(cont296)
ReadIL.MarkSequencePoint(doc12, 362, 1, 362, 100)
ReadIL.Emit(OpCodes.Br, cont295)
ReadIL.MarkLabel(fa295)
ReadIL.MarkSequencePoint(doc12, 363, 1, 363, 100)
Dim locbldr339 As LocalBuilder = ReadIL.DeclareLocal(GetType(CallingConventions))
locbldr339.SetLocalSymInfo("stdcallconv")
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Stloc, 66)
ReadIL.MarkSequencePoint(doc12, 364, 1, 364, 100)
Dim typ89(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 64)
Typ = GetType(TypeBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 57)
Typ = GetType(MethodAttributes)
ReDim Preserve typ89(UBound(typ89) + 1)
typ89(UBound(typ89)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 66)
Typ = GetType(CallingConventions)
ReDim Preserve typ89(UBound(typ89) + 1)
typ89(UBound(typ89)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ReDim Preserve typ89(UBound(typ89) + 1)
typ89(UBound(typ89)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineConstructor", typ89))
Typ = Typ03.GetMethod("DefineConstructor", typ89).ReturnType
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnConB"))
ReadIL.MarkSequencePoint(doc12, 365, 1, 365, 100)
ReadIL.Emit(OpCodes.Call, GetType(AsmFactory).GetMethod("InitConstr", Type.EmptyTypes))
Typ = GetType(AsmFactory).GetMethod("InitConstr", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 367, 1, 367, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("isNested"))
Typ = GetType(AsmFactory).GetField("isNested").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa297 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru297 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont297 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru297)
ReadIL.Emit(OpCodes.Br, fa297)
ReadIL.MarkLabel(tru297)
ReadIL.MarkSequencePoint(doc12, 368, 1, 368, 100)
Dim typ90(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ReDim Preserve typ90(UBound(typ90) + 1)
typ90(UBound(typ90)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnConB"))
Typ = GetType(AsmFactory).GetField("CurnConB").FieldType
ReDim Preserve typ90(UBound(typ90) + 1)
typ90(UBound(typ90)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddCtor", typ90))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddCtor", typ90).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 369, 1, 369, 100)
ReadIL.Emit(OpCodes.Br, cont297)
ReadIL.MarkLabel(fa297)
ReadIL.MarkSequencePoint(doc12, 370, 1, 370, 100)
Dim typ91(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("TypArr"))
Typ = GetType(AsmFactory).GetField("TypArr").FieldType
ReDim Preserve typ91(UBound(typ91) + 1)
typ91(UBound(typ91)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnConB"))
Typ = GetType(AsmFactory).GetField("CurnConB").FieldType
ReDim Preserve typ91(UBound(typ91) + 1)
typ91(UBound(typ91)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddNestedCtor", typ91))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddNestedCtor", typ91).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 371, 1, 371, 100)
ReadIL.Emit(OpCodes.Br, cont297)
ReadIL.MarkLabel(cont297)
ReadIL.MarkSequencePoint(doc12, 374, 1, 374, 100)
Dim typ92(-1) As Type
ReadIL.Emit(OpCodes.Ldstr, "Adding Constructor: ")
Typ = GetType(System.String)
ReDim Preserve typ92(UBound(typ92) + 1)
typ92(UBound(typ92)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ92))
Typ = GetType(Console).GetMethod("Write", typ92).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 375, 1, 375, 100)
Dim typ93(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 59)
Typ = GetType(System.String)
ReDim Preserve typ93(UBound(typ93) + 1)
typ93(UBound(typ93)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ93))
Typ = GetType(Console).GetMethod("WriteLine", typ93).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 376, 1, 376, 100)
ReadIL.Emit(OpCodes.Br, cont295)
ReadIL.MarkLabel(cont295)
ReadIL.MarkSequencePoint(doc12, 379, 1, 379, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("InMethodFlg"))
ReadIL.MarkSequencePoint(doc12, 380, 1, 380, 100)
ReadIL.Emit(OpCodes.Ldloc, 59)
Typ = GetType(System.String)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("CurnMetName"))
ReadIL.MarkSequencePoint(doc12, 382, 1, 382, 100)
ReadIL.Emit(OpCodes.Ldloc, 61)
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa298 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru298 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont298 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru298)
ReadIL.Emit(OpCodes.Br, fa298)
ReadIL.MarkLabel(tru298)
ReadIL.MarkSequencePoint(doc12, 383, 1, 383, 100)
ReadIL.Emit(OpCodes.Br, cont298)
ReadIL.MarkLabel(fa298)
ReadIL.MarkSequencePoint(doc12, 384, 1, 384, 100)
ReadIL.Emit(OpCodes.Ldloc, 65)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa299 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru299 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont299 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru299)
ReadIL.Emit(OpCodes.Br, fa299)
ReadIL.MarkLabel(tru299)
ReadIL.MarkSequencePoint(doc12, 385, 1, 385, 100)
Dim typ94(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 60)
Typ = GetType(Expr).MakeArrayType()
ReDim Preserve typ94(UBound(typ94) + 1)
typ94(UBound(typ94)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("PostProcessParams", typ94))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("PostProcessParams", typ94).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 386, 1, 386, 100)
ReadIL.Emit(OpCodes.Br, cont299)
ReadIL.MarkLabel(fa299)
ReadIL.MarkSequencePoint(doc12, 387, 1, 387, 100)
Dim typ95(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 60)
Typ = GetType(Expr).MakeArrayType()
ReDim Preserve typ95(UBound(typ95) + 1)
typ95(UBound(typ95)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("PostProcessParamsConstr", typ95))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("PostProcessParamsConstr", typ95).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 388, 1, 388, 100)
ReadIL.Emit(OpCodes.Br, cont299)
ReadIL.MarkLabel(cont299)
ReadIL.MarkSequencePoint(doc12, 389, 1, 389, 100)
ReadIL.Emit(OpCodes.Br, cont298)
ReadIL.MarkLabel(cont298)
ReadIL.MarkSequencePoint(doc12, 391, 1, 391, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc12, 392, 1, 392, 100)
ReadIL.Emit(OpCodes.Br, cont293)
ReadIL.MarkLabel(fa293)
ReadIL.Emit(OpCodes.Br, cont293)
ReadIL.MarkLabel(cont293)
ReadIL.MarkSequencePoint(doc12, 394, 1, 394, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(EndMethodStmt))
Dim typ96 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ96))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ96).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc12, 395, 1, 395, 100)
Dim typ97(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ97(UBound(typ97) + 1)
typ97(UBound(typ97)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ97))
Typ = Typ03.GetMethod("IsInstanceOfType", typ97).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc12, 397, 1, 397, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa300 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru300 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont300 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru300)
ReadIL.Emit(OpCodes.Br, fa300)
ReadIL.MarkLabel(tru300)
ReadIL.MarkSequencePoint(doc12, 398, 1, 398, 100)
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitRet", Type.EmptyTypes))
Typ = GetType(ILEmitter).GetMethod("EmitRet", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 399, 1, 399, 100)
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stsfld, GetType(AsmFactory).GetField("InMethodFlg"))
ReadIL.MarkSequencePoint(doc12, 400, 1, 400, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmB"))
Typ = GetType(AsmFactory).GetField("AsmB").FieldType
ReadIL.Emit(OpCodes.Stloc, 25)
ReadIL.MarkSequencePoint(doc12, 401, 1, 401, 100)
Dim locbldr340 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Int32))
locbldr340.SetLocalSymInfo("mnamcomp")
Dim typ98(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("CurnMetName"))
Typ = GetType(AsmFactory).GetField("CurnMetName").FieldType
ReDim Preserve typ98(UBound(typ98) + 1)
typ98(UBound(typ98)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "main")
Typ = GetType(System.String)
ReDim Preserve typ98(UBound(typ98) + 1)
typ98(UBound(typ98)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ98))
Typ = GetType(String).GetMethod("Compare", typ98).ReturnType
ReadIL.Emit(OpCodes.Stloc, 67)
ReadIL.MarkSequencePoint(doc12, 402, 1, 402, 100)
Dim locbldr341 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Int32))
locbldr341.SetLocalSymInfo("amodecomp")
Dim typ99(-1) As Type
ReadIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmMode"))
Typ = GetType(AsmFactory).GetField("AsmMode").FieldType
ReDim Preserve typ99(UBound(typ99) + 1)
typ99(UBound(typ99)) = Typ
ReadIL.Emit(OpCodes.Ldstr, "exe")
Typ = GetType(System.String)
ReDim Preserve typ99(UBound(typ99) + 1)
typ99(UBound(typ99)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ99))
Typ = GetType(String).GetMethod("Compare", typ99).ReturnType
ReadIL.Emit(OpCodes.Stloc, 68)
ReadIL.MarkSequencePoint(doc12, 403, 1, 403, 100)
ReadIL.Emit(OpCodes.Ldloc, 67)
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa301 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru301 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont301 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru301)
ReadIL.Emit(OpCodes.Br, fa301)
ReadIL.MarkLabel(tru301)
ReadIL.MarkSequencePoint(doc12, 404, 1, 404, 100)
ReadIL.Emit(OpCodes.Ldloc, 68)
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa302 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru302 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont302 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru302)
ReadIL.Emit(OpCodes.Br, fa302)
ReadIL.MarkLabel(tru302)
ReadIL.MarkSequencePoint(doc12, 405, 1, 405, 100)
Dim typ100(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 25)
Typ = GetType(AssemblyBuilder)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("Met"))
Typ = GetType(ILEmitter).GetField("Met").FieldType
ReDim Preserve typ100(UBound(typ100) + 1)
typ100(UBound(typ100)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("SetEntryPoint", typ100))
Typ = Typ03.GetMethod("SetEntryPoint", typ100).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 406, 1, 406, 100)
ReadIL.Emit(OpCodes.Br, cont302)
ReadIL.MarkLabel(fa302)
ReadIL.Emit(OpCodes.Br, cont302)
ReadIL.MarkLabel(cont302)
ReadIL.MarkSequencePoint(doc12, 407, 1, 407, 100)
ReadIL.Emit(OpCodes.Br, cont301)
ReadIL.MarkLabel(fa301)
ReadIL.Emit(OpCodes.Br, cont301)
ReadIL.MarkLabel(cont301)
ReadIL.MarkSequencePoint(doc12, 408, 1, 408, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc12, 409, 1, 409, 100)
ReadIL.Emit(OpCodes.Br, cont300)
ReadIL.MarkLabel(fa300)
ReadIL.Emit(OpCodes.Br, cont300)
ReadIL.MarkLabel(cont300)
ReadIL.MarkSequencePoint(doc12, 411, 1, 411, 100)
Dim locbldr342 As LocalBuilder = ReadIL.DeclareLocal(GetType(Ident))
locbldr342.SetLocalSymInfo("vnam")
ReadIL.MarkSequencePoint(doc12, 412, 1, 412, 100)
Dim locbldr343 As LocalBuilder = ReadIL.DeclareLocal(GetType(TypeTok))
locbldr343.SetLocalSymInfo("vtyptok")
ReadIL.MarkSequencePoint(doc12, 413, 1, 413, 100)
Dim locbldr344 As LocalBuilder = ReadIL.DeclareLocal(GetType(System.Type))
locbldr344.SetLocalSymInfo("vtyp")
ReadIL.Emit(OpCodes.Ldnull)
ReadIL.Emit(OpCodes.Stloc, 71)
ReadIL.MarkSequencePoint(doc12, 414, 1, 414, 100)
Dim locbldr345 As LocalBuilder = ReadIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator"))
locbldr345.SetLocalSymInfo("eval")
ReadIL.Emit(OpCodes.Ldnull)
ReadIL.Emit(OpCodes.Stloc, 72)
ReadIL.MarkSequencePoint(doc12, 417, 1, 417, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(VarStmt))
Dim typ101 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ101))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ101).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc12, 418, 1, 418, 100)
Dim typ102(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ102(UBound(typ102) + 1)
typ102(UBound(typ102)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ102))
Typ = Typ03.GetMethod("IsInstanceOfType", typ102).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc12, 420, 1, 420, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa303 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru303 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont303 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru303)
ReadIL.Emit(OpCodes.Br, fa303)
ReadIL.MarkLabel(tru303)
ReadIL.MarkSequencePoint(doc12, 421, 1, 421, 100)
Dim locbldr346 As LocalBuilder = ReadIL.DeclareLocal(GetType(VarStmt))
locbldr346.SetLocalSymInfo("curv")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 73)
ReadIL.MarkSequencePoint(doc12, 422, 1, 422, 100)
ReadIL.Emit(OpCodes.Ldloc, 73)
Typ = GetType(VarStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(VarStmt).GetField("VarName"))
Typ = GetType(VarStmt).GetField("VarName").FieldType
ReadIL.Emit(OpCodes.Stloc, 69)
ReadIL.MarkSequencePoint(doc12, 424, 1, 424, 100)
ReadIL.Emit(OpCodes.Ldloc, 73)
Typ = GetType(VarStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(VarStmt).GetField("VarTyp"))
Typ = GetType(VarStmt).GetField("VarTyp").FieldType
ReadIL.Emit(OpCodes.Stloc, 70)
ReadIL.MarkSequencePoint(doc12, 437, 1, 437, 100)
Dim typ103(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 70)
Typ = GetType(TypeTok)
ReDim Preserve typ103(UBound(typ103) + 1)
typ103(UBound(typ103)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ103))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ103).ReturnType
ReadIL.Emit(OpCodes.Stloc, 71)
ReadIL.MarkSequencePoint(doc12, 439, 1, 439, 100)
Dim typ104(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 69)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ104(UBound(typ104) + 1)
typ104(UBound(typ104)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 71)
Typ = GetType(System.Type)
ReDim Preserve typ104(UBound(typ104) + 1)
typ104(UBound(typ104)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("DeclVar", typ104))
Typ = GetType(ILEmitter).GetMethod("DeclVar", typ104).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 440, 1, 440, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("LocInd"))
Typ = GetType(ILEmitter).GetField("LocInd").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Add)
ReadIL.Emit(OpCodes.Stsfld, GetType(ILEmitter).GetField("LocInd"))
ReadIL.MarkSequencePoint(doc12, 441, 1, 441, 100)
Dim typ105(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 69)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ105(UBound(typ105) + 1)
typ105(UBound(typ105)) = Typ
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ105(UBound(typ105) + 1)
typ105(UBound(typ105)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("LocInd"))
Typ = GetType(ILEmitter).GetField("LocInd").FieldType
ReDim Preserve typ105(UBound(typ105) + 1)
typ105(UBound(typ105)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 71)
Typ = GetType(System.Type)
ReDim Preserve typ105(UBound(typ105) + 1)
typ105(UBound(typ105)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddVar", typ105))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddVar", typ105).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 443, 1, 443, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc12, 444, 1, 444, 100)
ReadIL.Emit(OpCodes.Br, cont303)
ReadIL.MarkLabel(fa303)
ReadIL.Emit(OpCodes.Br, cont303)
ReadIL.MarkLabel(cont303)
ReadIL.MarkSequencePoint(doc12, 446, 1, 446, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(VarAsgnStmt))
Dim typ106 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ106))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ106).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc12, 447, 1, 447, 100)
Dim typ107(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ107(UBound(typ107) + 1)
typ107(UBound(typ107)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ107))
Typ = Typ03.GetMethod("IsInstanceOfType", typ107).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc12, 449, 1, 449, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa304 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru304 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont304 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru304)
ReadIL.Emit(OpCodes.Br, fa304)
ReadIL.MarkLabel(tru304)
ReadIL.MarkSequencePoint(doc12, 450, 1, 450, 100)
Dim locbldr347 As LocalBuilder = ReadIL.DeclareLocal(GetType(VarAsgnStmt))
locbldr347.SetLocalSymInfo("curva")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 74)
ReadIL.MarkSequencePoint(doc12, 451, 1, 451, 100)
ReadIL.Emit(OpCodes.Ldloc, 74)
Typ = GetType(VarAsgnStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(VarAsgnStmt).GetField("VarName"))
Typ = GetType(VarAsgnStmt).GetField("VarName").FieldType
ReadIL.Emit(OpCodes.Stloc, 69)
ReadIL.MarkSequencePoint(doc12, 453, 1, 453, 100)
ReadIL.Emit(OpCodes.Ldloc, 74)
Typ = GetType(VarAsgnStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(VarAsgnStmt).GetField("VarTyp"))
Typ = GetType(VarAsgnStmt).GetField("VarTyp").FieldType
ReadIL.Emit(OpCodes.Stloc, 70)
ReadIL.MarkSequencePoint(doc12, 466, 1, 466, 100)
Dim typ108(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 70)
Typ = GetType(TypeTok)
ReDim Preserve typ108(UBound(typ108) + 1)
typ108(UBound(typ108)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ108))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Helpers").GetMethod("CommitEvalTTok", typ108).ReturnType
ReadIL.Emit(OpCodes.Stloc, 71)
ReadIL.MarkSequencePoint(doc12, 468, 1, 468, 100)
Dim typ109(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 69)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ109(UBound(typ109) + 1)
typ109(UBound(typ109)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 71)
Typ = GetType(System.Type)
ReDim Preserve typ109(UBound(typ109) + 1)
typ109(UBound(typ109)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("DeclVar", typ109))
Typ = GetType(ILEmitter).GetMethod("DeclVar", typ109).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 469, 1, 469, 100)
ReadIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("LocInd"))
Typ = GetType(ILEmitter).GetField("LocInd").FieldType
ReadIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Add)
ReadIL.Emit(OpCodes.Stsfld, GetType(ILEmitter).GetField("LocInd"))
ReadIL.MarkSequencePoint(doc12, 470, 1, 470, 100)
Dim typ110(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 69)
Typ = GetType(Ident)
ReadIL.Emit(OpCodes.Ldfld, GetType(Ident).GetField("Value"))
Typ = GetType(Ident).GetField("Value").FieldType
ReDim Preserve typ110(UBound(typ110) + 1)
typ110(UBound(typ110)) = Typ
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ReDim Preserve typ110(UBound(typ110) + 1)
typ110(UBound(typ110)) = Typ
ReadIL.Emit(OpCodes.Ldsfld, GetType(ILEmitter).GetField("LocInd"))
Typ = GetType(ILEmitter).GetField("LocInd").FieldType
ReDim Preserve typ110(UBound(typ110) + 1)
typ110(UBound(typ110)) = Typ
ReadIL.Emit(OpCodes.Ldloc, 71)
Typ = GetType(System.Type)
ReDim Preserve typ110(UBound(typ110) + 1)
typ110(UBound(typ110)) = Typ
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddVar", typ110))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddVar", typ110).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 471, 1, 471, 100)
ReadIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator").GetConstructor(Type.EmptyTypes))
ReadIL.Emit(OpCodes.Stloc, 72)
ReadIL.MarkSequencePoint(doc12, 472, 1, 472, 100)
Dim typ111(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 72)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator")
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 74)
Typ = GetType(VarAsgnStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(VarAsgnStmt).GetField("RExpr"))
Typ = GetType(VarAsgnStmt).GetField("RExpr").FieldType
ReDim Preserve typ111(UBound(typ111) + 1)
typ111(UBound(typ111)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Evaluate", typ111))
Typ = Typ03.GetMethod("Evaluate", typ111).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 473, 1, 473, 100)
Dim typ112(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 72)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator")
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 69)
Typ = GetType(Ident)
ReDim Preserve typ112(UBound(typ112) + 1)
typ112(UBound(typ112)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("StoreEmit", typ112))
Typ = Typ03.GetMethod("StoreEmit", typ112).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 475, 1, 475, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc12, 476, 1, 476, 100)
ReadIL.Emit(OpCodes.Br, cont304)
ReadIL.MarkLabel(fa304)
ReadIL.Emit(OpCodes.Br, cont304)
ReadIL.MarkLabel(cont304)
ReadIL.MarkSequencePoint(doc12, 478, 1, 478, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(AssignStmt))
Dim typ113 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ113))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ113).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc12, 479, 1, 479, 100)
Dim typ114(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ114(UBound(typ114) + 1)
typ114(UBound(typ114)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ114))
Typ = Typ03.GetMethod("IsInstanceOfType", typ114).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc12, 481, 1, 481, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa305 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru305 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont305 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru305)
ReadIL.Emit(OpCodes.Br, fa305)
ReadIL.MarkLabel(tru305)
ReadIL.MarkSequencePoint(doc12, 482, 1, 482, 100)
Dim locbldr348 As LocalBuilder = ReadIL.DeclareLocal(GetType(AssignStmt))
locbldr348.SetLocalSymInfo("asgnstm")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 75)
ReadIL.MarkSequencePoint(doc12, 483, 1, 483, 100)
ReadIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator").GetConstructor(Type.EmptyTypes))
ReadIL.Emit(OpCodes.Stloc, 72)
ReadIL.MarkSequencePoint(doc12, 484, 1, 484, 100)
Dim typ115(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 72)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator")
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 75)
Typ = GetType(AssignStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(AssignStmt).GetField("RExp"))
Typ = GetType(AssignStmt).GetField("RExp").FieldType
ReDim Preserve typ115(UBound(typ115) + 1)
typ115(UBound(typ115)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Evaluate", typ115))
Typ = Typ03.GetMethod("Evaluate", typ115).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 485, 1, 485, 100)
Dim locbldr349 As LocalBuilder = ReadIL.DeclareLocal(GetType(Expr))
locbldr349.SetLocalSymInfo("asgnstmle")
ReadIL.Emit(OpCodes.Ldloc, 75)
Typ = GetType(AssignStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(AssignStmt).GetField("LExp"))
Typ = GetType(AssignStmt).GetField("LExp").FieldType
ReadIL.Emit(OpCodes.Stloc, 76)
ReadIL.MarkSequencePoint(doc12, 486, 1, 486, 100)
ReadIL.Emit(OpCodes.Ldloc, 76)
Typ = GetType(Expr)
ReadIL.Emit(OpCodes.Ldfld, GetType(Expr).GetField("Tokens"))
Typ = GetType(Expr).GetField("Tokens").FieldType
Typ02 = Typ
ReadIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ReadIL.Emit(OpCodes.Conv_U)
Typ = Typ02
ReadIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
ReadIL.Emit(OpCodes.Stloc, 69)
ReadIL.MarkSequencePoint(doc12, 487, 1, 487, 100)
Dim typ116(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 72)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator")
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 69)
Typ = GetType(Ident)
ReDim Preserve typ116(UBound(typ116) + 1)
typ116(UBound(typ116)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("StoreEmit", typ116))
Typ = Typ03.GetMethod("StoreEmit", typ116).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 488, 1, 488, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc12, 489, 1, 489, 100)
ReadIL.Emit(OpCodes.Br, cont305)
ReadIL.MarkLabel(fa305)
ReadIL.Emit(OpCodes.Br, cont305)
ReadIL.MarkLabel(cont305)
ReadIL.MarkSequencePoint(doc12, 491, 1, 491, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(MethodCallStmt))
Dim typ117 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ117))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ117).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc12, 492, 1, 492, 100)
Dim typ118(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ118(UBound(typ118) + 1)
typ118(UBound(typ118)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ118))
Typ = Typ03.GetMethod("IsInstanceOfType", typ118).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc12, 494, 1, 494, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa306 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru306 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont306 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru306)
ReadIL.Emit(OpCodes.Br, fa306)
ReadIL.MarkLabel(tru306)
ReadIL.MarkSequencePoint(doc12, 495, 1, 495, 100)
Dim locbldr350 As LocalBuilder = ReadIL.DeclareLocal(GetType(MethodCallStmt))
locbldr350.SetLocalSymInfo("mcstmt")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 77)
ReadIL.MarkSequencePoint(doc12, 496, 1, 496, 100)
Dim locbldr351 As LocalBuilder = ReadIL.DeclareLocal(GetType(Expr))
locbldr351.SetLocalSymInfo("mcstmtexp")
ReadIL.Emit(OpCodes.Newobj, GetType(Expr).GetConstructor(Type.EmptyTypes))
ReadIL.Emit(OpCodes.Stloc, 78)
ReadIL.MarkSequencePoint(doc12, 497, 1, 497, 100)
Dim locbldr352 As LocalBuilder = ReadIL.DeclareLocal(GetType(MethodCallTok))
locbldr352.SetLocalSymInfo("mcstmttok")
ReadIL.Emit(OpCodes.Ldloc, 77)
Typ = GetType(MethodCallStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(MethodCallStmt).GetField("MethodToken"))
Typ = GetType(MethodCallStmt).GetField("MethodToken").FieldType
ReadIL.Emit(OpCodes.Stloc, 79)
ReadIL.MarkSequencePoint(doc12, 498, 1, 498, 100)
ReadIL.Emit(OpCodes.Ldloc, 79)
Typ = GetType(MethodCallTok)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Stfld, GetType(MethodCallTok).GetField("PopFlg"))
ReadIL.MarkSequencePoint(doc12, 499, 1, 499, 100)
Dim typ119(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 78)
Typ = GetType(Expr)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 79)
Typ = GetType(MethodCallTok)
ReDim Preserve typ119(UBound(typ119) + 1)
typ119(UBound(typ119)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("AddToken", typ119))
Typ = Typ03.GetMethod("AddToken", typ119).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 500, 1, 500, 100)
ReadIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator").GetConstructor(Type.EmptyTypes))
ReadIL.Emit(OpCodes.Stloc, 72)
ReadIL.MarkSequencePoint(doc12, 501, 1, 501, 100)
Dim typ120(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 72)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator")
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 78)
Typ = GetType(Expr)
ReDim Preserve typ120(UBound(typ120) + 1)
typ120(UBound(typ120)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Evaluate", typ120))
Typ = Typ03.GetMethod("Evaluate", typ120).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 502, 1, 502, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc12, 503, 1, 503, 100)
ReadIL.Emit(OpCodes.Br, cont306)
ReadIL.MarkLabel(fa306)
ReadIL.Emit(OpCodes.Br, cont306)
ReadIL.MarkLabel(cont306)
ReadIL.MarkSequencePoint(doc12, 505, 1, 505, 100)
Dim locbldr353 As LocalBuilder = ReadIL.DeclareLocal(GetType(Emit.Label))
locbldr353.SetLocalSymInfo("ifendl")
ReadIL.MarkSequencePoint(doc12, 506, 1, 506, 100)
Dim locbldr354 As LocalBuilder = ReadIL.DeclareLocal(GetType(Emit.Label))
locbldr354.SetLocalSymInfo("ifnbl")
ReadIL.MarkSequencePoint(doc12, 508, 1, 508, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(IfStmt))
Dim typ121 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ121))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ121).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc12, 509, 1, 509, 100)
Dim typ122(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ122(UBound(typ122) + 1)
typ122(UBound(typ122)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ122))
Typ = Typ03.GetMethod("IsInstanceOfType", typ122).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc12, 511, 1, 511, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa307 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru307 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont307 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru307)
ReadIL.Emit(OpCodes.Br, fa307)
ReadIL.MarkLabel(tru307)
ReadIL.MarkSequencePoint(doc12, 512, 1, 512, 100)
Dim locbldr355 As LocalBuilder = ReadIL.DeclareLocal(GetType(IfStmt))
locbldr355.SetLocalSymInfo("ifstm")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 82)
ReadIL.MarkSequencePoint(doc12, 513, 1, 513, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddIf", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("AddIf", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 514, 1, 514, 100)
Dim locbldr356 As LocalBuilder = ReadIL.DeclareLocal(GetType(Expr))
locbldr356.SetLocalSymInfo("ifexp")
ReadIL.Emit(OpCodes.Ldloc, 82)
Typ = GetType(IfStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(IfStmt).GetField("Exp"))
Typ = GetType(IfStmt).GetField("Exp").FieldType
ReadIL.Emit(OpCodes.Stloc, 83)
ReadIL.MarkSequencePoint(doc12, 515, 1, 515, 100)
ReadIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator").GetConstructor(Type.EmptyTypes))
ReadIL.Emit(OpCodes.Stloc, 72)
ReadIL.MarkSequencePoint(doc12, 516, 1, 516, 100)
Dim typ123(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 72)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator")
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 83)
Typ = GetType(Expr)
ReDim Preserve typ123(UBound(typ123) + 1)
typ123(UBound(typ123)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Evaluate", typ123))
Typ = Typ03.GetMethod("Evaluate", typ123).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 518, 1, 518, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfNxtBlkLbl", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfNxtBlkLbl", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 81)
ReadIL.MarkSequencePoint(doc12, 519, 1, 519, 100)
Dim typ124(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 81)
Typ = GetType(Emit.Label)
ReDim Preserve typ124(UBound(typ124) + 1)
typ124(UBound(typ124)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitBrfalse", typ124))
Typ = GetType(ILEmitter).GetMethod("EmitBrfalse", typ124).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 521, 1, 521, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc12, 522, 1, 522, 100)
ReadIL.Emit(OpCodes.Br, cont307)
ReadIL.MarkLabel(fa307)
ReadIL.Emit(OpCodes.Br, cont307)
ReadIL.MarkLabel(cont307)
ReadIL.MarkSequencePoint(doc12, 524, 1, 524, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(ElseIfStmt))
Dim typ125 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ125))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ125).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc12, 525, 1, 525, 100)
Dim typ126(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ126(UBound(typ126) + 1)
typ126(UBound(typ126)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ126))
Typ = Typ03.GetMethod("IsInstanceOfType", typ126).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc12, 527, 1, 527, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa308 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru308 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont308 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru308)
ReadIL.Emit(OpCodes.Br, fa308)
ReadIL.MarkLabel(tru308)
ReadIL.MarkSequencePoint(doc12, 529, 1, 529, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfEndLbl", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfEndLbl", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 80)
ReadIL.MarkSequencePoint(doc12, 530, 1, 530, 100)
Dim typ127(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 80)
Typ = GetType(Emit.Label)
ReDim Preserve typ127(UBound(typ127) + 1)
typ127(UBound(typ127)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitBr", typ127))
Typ = GetType(ILEmitter).GetMethod("EmitBr", typ127).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 531, 1, 531, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfNxtBlkLbl", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfNxtBlkLbl", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 81)
ReadIL.MarkSequencePoint(doc12, 532, 1, 532, 100)
Dim typ128(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 81)
Typ = GetType(Emit.Label)
ReDim Preserve typ128(UBound(typ128) + 1)
typ128(UBound(typ128)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("MarkLbl", typ128))
Typ = GetType(ILEmitter).GetMethod("MarkLbl", typ128).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 533, 1, 533, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("SetIfNxtBlkLbl", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("SetIfNxtBlkLbl", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 535, 1, 535, 100)
Dim locbldr357 As LocalBuilder = ReadIL.DeclareLocal(GetType(ElseIfStmt))
locbldr357.SetLocalSymInfo("elifstm")
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Stloc, 84)
ReadIL.MarkSequencePoint(doc12, 536, 1, 536, 100)
Dim locbldr358 As LocalBuilder = ReadIL.DeclareLocal(GetType(Expr))
locbldr358.SetLocalSymInfo("elifexp")
ReadIL.Emit(OpCodes.Ldloc, 84)
Typ = GetType(ElseIfStmt)
ReadIL.Emit(OpCodes.Ldfld, GetType(ElseIfStmt).GetField("Exp"))
Typ = GetType(ElseIfStmt).GetField("Exp").FieldType
ReadIL.Emit(OpCodes.Stloc, 85)
ReadIL.MarkSequencePoint(doc12, 537, 1, 537, 100)
ReadIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator").GetConstructor(Type.EmptyTypes))
ReadIL.Emit(OpCodes.Stloc, 72)
ReadIL.MarkSequencePoint(doc12, 538, 1, 538, 100)
Dim typ129(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 72)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.Evaluator")
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldloc, 85)
Typ = GetType(Expr)
ReDim Preserve typ129(UBound(typ129) + 1)
typ129(UBound(typ129)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Evaluate", typ129))
Typ = Typ03.GetMethod("Evaluate", typ129).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 540, 1, 540, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfNxtBlkLbl", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfNxtBlkLbl", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 81)
ReadIL.MarkSequencePoint(doc12, 541, 1, 541, 100)
Dim typ130(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 81)
Typ = GetType(Emit.Label)
ReDim Preserve typ130(UBound(typ130) + 1)
typ130(UBound(typ130)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitBrfalse", typ130))
Typ = GetType(ILEmitter).GetMethod("EmitBrfalse", typ130).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 543, 1, 543, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc12, 544, 1, 544, 100)
ReadIL.Emit(OpCodes.Br, cont308)
ReadIL.MarkLabel(fa308)
ReadIL.Emit(OpCodes.Br, cont308)
ReadIL.MarkLabel(cont308)
ReadIL.MarkSequencePoint(doc12, 546, 1, 546, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(ElseStmt))
Dim typ131 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ131))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ131).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc12, 547, 1, 547, 100)
Dim typ132(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ132(UBound(typ132) + 1)
typ132(UBound(typ132)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ132))
Typ = Typ03.GetMethod("IsInstanceOfType", typ132).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc12, 549, 1, 549, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa309 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru309 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont309 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru309)
ReadIL.Emit(OpCodes.Br, fa309)
ReadIL.MarkLabel(tru309)
ReadIL.MarkSequencePoint(doc12, 550, 1, 550, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfEndLbl", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfEndLbl", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 80)
ReadIL.MarkSequencePoint(doc12, 551, 1, 551, 100)
Dim typ133(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 80)
Typ = GetType(Emit.Label)
ReDim Preserve typ133(UBound(typ133) + 1)
typ133(UBound(typ133)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("EmitBr", typ133))
Typ = GetType(ILEmitter).GetMethod("EmitBr", typ133).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 552, 1, 552, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfNxtBlkLbl", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfNxtBlkLbl", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 81)
ReadIL.MarkSequencePoint(doc12, 553, 1, 553, 100)
Dim typ134(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 81)
Typ = GetType(Emit.Label)
ReDim Preserve typ134(UBound(typ134) + 1)
typ134(UBound(typ134)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("MarkLbl", typ134))
Typ = GetType(ILEmitter).GetMethod("MarkLbl", typ134).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 554, 1, 554, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("SetIfElsePass", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("SetIfElsePass", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 555, 1, 555, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc12, 556, 1, 556, 100)
ReadIL.Emit(OpCodes.Br, cont309)
ReadIL.MarkLabel(fa309)
ReadIL.Emit(OpCodes.Br, cont309)
ReadIL.MarkLabel(cont309)
ReadIL.MarkSequencePoint(doc12, 558, 1, 558, 100)
ReadIL.Emit(OpCodes.Ldtoken, GetType(EndIfStmt))
Dim typ135 As Type() = {GetType(System.RuntimeTypeHandle)}
ReadIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ135))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ135).ReturnType
ReadIL.Emit(OpCodes.Stloc, 0)
ReadIL.MarkSequencePoint(doc12, 559, 1, 559, 100)
Dim typ136(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Type)
Typ03 = Typ
ReadIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(Stmt)
ReadIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ136(UBound(typ136) + 1)
typ136(UBound(typ136)) = Typ
ReadIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ136))
Typ = Typ03.GetMethod("IsInstanceOfType", typ136).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc12, 561, 1, 561, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa310 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru310 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont310 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru310)
ReadIL.Emit(OpCodes.Br, fa310)
ReadIL.MarkLabel(tru310)
ReadIL.MarkSequencePoint(doc12, 563, 1, 563, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfElsePass", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfElsePass", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 1)
ReadIL.MarkSequencePoint(doc12, 565, 1, 565, 100)
ReadIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
ReadIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa311 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim tru311 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
Dim cont311 As System.Reflection.Emit.Label = ReadIL.DefineLabel()
ReadIL.Emit(OpCodes.Beq, tru311)
ReadIL.Emit(OpCodes.Br, fa311)
ReadIL.MarkLabel(tru311)
ReadIL.MarkSequencePoint(doc12, 566, 1, 566, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfNxtBlkLbl", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfNxtBlkLbl", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 81)
ReadIL.MarkSequencePoint(doc12, 567, 1, 567, 100)
Dim typ137(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 81)
Typ = GetType(Emit.Label)
ReDim Preserve typ137(UBound(typ137) + 1)
typ137(UBound(typ137)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("MarkLbl", typ137))
Typ = GetType(ILEmitter).GetMethod("MarkLbl", typ137).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 568, 1, 568, 100)
ReadIL.Emit(OpCodes.Br, cont311)
ReadIL.MarkLabel(fa311)
ReadIL.Emit(OpCodes.Br, cont311)
ReadIL.MarkLabel(cont311)
ReadIL.MarkSequencePoint(doc12, 570, 1, 570, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfEndLbl", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("ReadIfEndLbl", Type.EmptyTypes).ReturnType
ReadIL.Emit(OpCodes.Stloc, 80)
ReadIL.MarkSequencePoint(doc12, 571, 1, 571, 100)
Dim typ138(-1) As Type
ReadIL.Emit(OpCodes.Ldloc, 80)
Typ = GetType(Emit.Label)
ReDim Preserve typ138(UBound(typ138) + 1)
typ138(UBound(typ138)) = Typ
ReadIL.Emit(OpCodes.Call, GetType(ILEmitter).GetMethod("MarkLbl", typ138))
Typ = GetType(ILEmitter).GetMethod("MarkLbl", typ138).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 572, 1, 572, 100)
ReadIL.Emit(OpCodes.Call, asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("PopIf", Type.EmptyTypes))
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.SymTable").GetMethod("PopIf", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
ReadIL.Emit(OpCodes.Pop)
End If
ReadIL.MarkSequencePoint(doc12, 573, 1, 573, 100)
ReadIL.Emit(OpCodes.Br, label0)
ReadIL.MarkSequencePoint(doc12, 574, 1, 574, 100)
ReadIL.Emit(OpCodes.Br, cont310)
ReadIL.MarkLabel(fa310)
ReadIL.Emit(OpCodes.Br, cont310)
ReadIL.MarkLabel(cont310)
ReadIL.MarkSequencePoint(doc12, 577, 1, 577, 100)
ReadIL.MarkLabel(label0)
ReadIL.MarkSequencePoint(doc12, 579, 1, 579, 100)
ReadIL.Emit(OpCodes.Ret)
StmtReader.CreateType()
End Sub


Dim doc13 As ISymbolDocumentWriter

Sub CodeGenerator()
Dim CodeGenerator As TypeBuilder = mdl.DefineType("dylan.NET.Tokenizer.CodeGen" & "." & "CodeGenerator", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(StmtSet)
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
Dim EmitMSIL As MethodBuilder = CodeGenerator.DefineMethod("EmitMSIL", MethodAttributes.Public, GetType(System.Void), typ0)
Dim EmitMSILIL As ILGenerator = EmitMSIL.GetILGenerator()
Dim EmitMSILparam01 As ParameterBuilder = EmitMSIL.DefineParameter(1, ParameterAttributes.None, "stmts")
Dim EmitMSILparam02 As ParameterBuilder = EmitMSIL.DefineParameter(2, ParameterAttributes.None, "fpath")
EmitMSILIL.MarkSequencePoint(doc13, 13, 1, 13, 100)
Dim locbldr359 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(System.Int32))
locbldr359.SetLocalSymInfo("i")
EmitMSILIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Stloc, 0)
EmitMSILIL.MarkSequencePoint(doc13, 14, 1, 14, 100)
Dim locbldr360 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(System.Int32))
locbldr360.SetLocalSymInfo("len")
EmitMSILIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(StmtSet)
EmitMSILIL.Emit(OpCodes.Ldfld, GetType(StmtSet).GetField("Stmts"))
Typ = GetType(StmtSet).GetField("Stmts").FieldType
EmitMSILIL.Emit(OpCodes.Ldlen)
EmitMSILIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Sub)
EmitMSILIL.Emit(OpCodes.Stloc, 1)
EmitMSILIL.MarkSequencePoint(doc13, 15, 1, 15, 100)
Dim locbldr361 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(Stmt))
locbldr361.SetLocalSymInfo("stm")
EmitMSILIL.Emit(OpCodes.Ldnull)
EmitMSILIL.Emit(OpCodes.Stloc, 2)
EmitMSILIL.MarkSequencePoint(doc13, 16, 1, 16, 100)
Dim locbldr362 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(System.Type))
locbldr362.SetLocalSymInfo("typ")
EmitMSILIL.MarkSequencePoint(doc13, 17, 1, 17, 100)
Dim locbldr363 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(System.Boolean))
locbldr363.SetLocalSymInfo("b")
EmitMSILIL.MarkSequencePoint(doc13, 19, 1, 19, 100)
Dim label0 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
EmitMSILIL.MarkSequencePoint(doc13, 20, 1, 20, 100)
Dim label1 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
EmitMSILIL.MarkSequencePoint(doc13, 22, 1, 22, 100)
EmitMSILIL.MarkLabel(label0)
EmitMSILIL.MarkSequencePoint(doc13, 24, 1, 24, 100)
EmitMSILIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Add)
EmitMSILIL.Emit(OpCodes.Stloc, 0)
EmitMSILIL.MarkSequencePoint(doc13, 26, 1, 26, 100)
EmitMSILIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(StmtSet)
EmitMSILIL.Emit(OpCodes.Ldfld, GetType(StmtSet).GetField("Stmts"))
Typ = GetType(StmtSet).GetField("Stmts").FieldType
Typ02 = Typ
EmitMSILIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Conv_U)
Typ = Typ02
EmitMSILIL.Emit(OpCodes.Ldelem, Typ.GetElementType())
Typ = Typ.GetElementType()
EmitMSILIL.Emit(OpCodes.Stloc, 2)
EmitMSILIL.MarkSequencePoint(doc13, 27, 1, 27, 100)
EmitMSILIL.Emit(OpCodes.Ldtoken, GetType(IncludeStmt))
Dim typ1 As Type() = {GetType(System.RuntimeTypeHandle)}
EmitMSILIL.Emit(OpCodes.Call, GetType(System.Type).GetMethod("GetTypeFromHandle", typ1))
Typ = GetType(System.Type).GetMethod("GetTypeFromHandle", typ1).ReturnType
EmitMSILIL.Emit(OpCodes.Stloc, 3)
EmitMSILIL.MarkSequencePoint(doc13, 28, 1, 28, 100)
Dim typ2(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Type)
Typ03 = Typ
EmitMSILIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Stmt)
EmitMSILIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = Typ
EmitMSILIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("IsInstanceOfType", typ2))
Typ = Typ03.GetMethod("IsInstanceOfType", typ2).ReturnType
EmitMSILIL.Emit(OpCodes.Stloc, 4)
EmitMSILIL.MarkSequencePoint(doc13, 30, 1, 30, 100)
EmitMSILIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Boolean)
EmitMSILIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa312 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
Dim tru312 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
Dim cont312 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
EmitMSILIL.Emit(OpCodes.Beq, tru312)
EmitMSILIL.Emit(OpCodes.Br, fa312)
EmitMSILIL.MarkLabel(tru312)
EmitMSILIL.MarkSequencePoint(doc13, 31, 1, 31, 100)
EmitMSILIL.Emit(OpCodes.Br, cont312)
EmitMSILIL.MarkLabel(fa312)
EmitMSILIL.MarkSequencePoint(doc13, 33, 1, 33, 100)
Dim locbldr364 As LocalBuilder = EmitMSILIL.DeclareLocal(asm.GetType("dylan.NET.Tokenizer.CodeGen.StmtReader"))
locbldr364.SetLocalSymInfo("sr")
EmitMSILIL.Emit(OpCodes.Newobj, asm.GetType("dylan.NET.Tokenizer.CodeGen.StmtReader").GetConstructor(Type.EmptyTypes))
EmitMSILIL.Emit(OpCodes.Stloc, 5)
EmitMSILIL.MarkSequencePoint(doc13, 34, 1, 34, 100)
Dim typ3(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldloc, 5)
Typ = asm.GetType("dylan.NET.Tokenizer.CodeGen.StmtReader")
Typ03 = Typ
EmitMSILIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(Stmt)
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = Typ
EmitMSILIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.String)
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = Typ
EmitMSILIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Read", typ3))
Typ = Typ03.GetMethod("Read", typ3).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMSILIL.Emit(OpCodes.Pop)
End If
EmitMSILIL.MarkSequencePoint(doc13, 36, 1, 36, 100)
EmitMSILIL.Emit(OpCodes.Br, cont312)
EmitMSILIL.MarkLabel(cont312)
EmitMSILIL.MarkSequencePoint(doc13, 38, 1, 38, 100)
EmitMSILIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
EmitMSILIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
Dim fa313 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
Dim tru313 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
Dim cont313 As System.Reflection.Emit.Label = EmitMSILIL.DefineLabel()
EmitMSILIL.Emit(OpCodes.Beq, tru313)
EmitMSILIL.Emit(OpCodes.Br, fa313)
EmitMSILIL.MarkLabel(tru313)
EmitMSILIL.MarkSequencePoint(doc13, 40, 1, 40, 100)
Dim typ4(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldstr, "Writing Assembly to Disk")
Typ = GetType(System.String)
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
EmitMSILIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ4))
Typ = GetType(Console).GetMethod("Write", typ4).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMSILIL.Emit(OpCodes.Pop)
End If
EmitMSILIL.MarkSequencePoint(doc13, 41, 1, 41, 100)
Dim locbldr365 As LocalBuilder = EmitMSILIL.DeclareLocal(GetType(AssemblyBuilder))
locbldr365.SetLocalSymInfo("ab")
EmitMSILIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmB"))
Typ = GetType(AsmFactory).GetField("AsmB").FieldType
EmitMSILIL.Emit(OpCodes.Stloc, 6)
EmitMSILIL.MarkSequencePoint(doc13, 42, 1, 42, 100)
EmitMSILIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(AssemblyBuilder)
Typ03 = Typ
EmitMSILIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("DefineVersionInfoResource", Type.EmptyTypes))
Typ = Typ03.GetMethod("DefineVersionInfoResource", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMSILIL.Emit(OpCodes.Pop)
End If
EmitMSILIL.MarkSequencePoint(doc13, 43, 1, 43, 100)
Dim typ6(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(AssemblyBuilder)
Typ03 = Typ
EmitMSILIL.Emit(OpCodes.Ldsfld, GetType(AsmFactory).GetField("AsmFile"))
Typ = GetType(AsmFactory).GetField("AsmFile").FieldType
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = Typ
EmitMSILIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Save", typ6))
Typ = Typ03.GetMethod("Save", typ6).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMSILIL.Emit(OpCodes.Pop)
End If
EmitMSILIL.MarkSequencePoint(doc13, 44, 1, 44, 100)
Dim typ7(-1) As Type
EmitMSILIL.Emit(OpCodes.Ldstr, "...Done.")
Typ = GetType(System.String)
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = Typ
EmitMSILIL.Emit(OpCodes.Call, GetType(COnsole).GetMethod("WriteLine", typ7))
Typ = GetType(COnsole).GetMethod("WriteLine", typ7).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
EmitMSILIL.Emit(OpCodes.Pop)
End If
EmitMSILIL.MarkSequencePoint(doc13, 46, 1, 46, 100)
EmitMSILIL.Emit(OpCodes.Br, label1)
EmitMSILIL.MarkSequencePoint(doc13, 47, 1, 47, 100)
EmitMSILIL.Emit(OpCodes.Br, cont313)
EmitMSILIL.MarkLabel(fa313)
EmitMSILIL.MarkSequencePoint(doc13, 48, 1, 48, 100)
EmitMSILIL.Emit(OpCodes.Br, label0)
EmitMSILIL.MarkSequencePoint(doc13, 49, 1, 49, 100)
EmitMSILIL.Emit(OpCodes.Br, cont313)
EmitMSILIL.MarkLabel(cont313)
EmitMSILIL.MarkSequencePoint(doc13, 51, 1, 51, 100)
EmitMSILIL.MarkLabel(label1)
EmitMSILIL.MarkSequencePoint(doc13, 53, 1, 53, 100)
EmitMSILIL.Emit(OpCodes.Ret)
CodeGenerator.CreateType()
End Sub

Sub Main()

asmName = New AssemblyName("tokenizer.CodeGen")
asmName.Version = New System.Version(11, 2, 7, 6)
asm  = AppDomain.CurrentDomain.DefineDynamicAssembly(asmName, AssemblyBuilderAccess.Save, CStr("E:\Code\dylannet\compiler\"))
mdl = asm.DefineDynamicModule(asmName.Name & ".dll" , asmName.Name & ".dll", True)
resw = mdl.DefineResource("tokenizer.CodeGen.resources" ,  "Description")
doc = mdl.DefineDocument("E:\Code\dylannet\compiler\tokenizer.CodeGen.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc2 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\varitem.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc3 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\fielditem.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc4 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\methoditem.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc5 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\ctoritem.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc6 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\ifitem.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc7 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\symtable.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc8 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\helpers.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc9 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\constldr.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc10 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\opstack.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc11 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\eval.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc12 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\stmtreader.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc13 = mdl.DefineDocument("E:\Code\dylannet\compiler\codegen\codegenerator.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
addstr("tokenizer.CodeGen")
addasm(asm)
Dim daType As Type = GetType(DebuggableAttribute)
Dim daCtor As ConstructorInfo = daType.GetConstructor(New Type() { GetType(DebuggableAttribute.DebuggingModes) })
Dim daBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(daCtor, New Object() {DebuggableAttribute.DebuggingModes.DisableOptimizations Or _
DebuggableAttribute.DebuggingModes.Default })
asm.SetCustomAttribute(daBuilder)

VarItem()
FieldItem()
MethodItem()
CtorItem()
IfItem()
SymTable()
Helpers()
OpStack()
Evaluator()
StmtReader()
CodeGenerator()
Dim vaType As Type = GetType(AssemblyFileVersionAttribute)
Dim vaCtor As ConstructorInfo = vaType.GetConstructor(New Type() { GetType(String) })
Dim vaBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(vaCtor, New Object() {"11.2.7.6"})
asm.SetCustomAttribute(vaBuilder)

Dim paType As Type = GetType(AssemblyProductAttribute)
Dim paCtor As ConstructorInfo = paType.GetConstructor(New Type() { GetType(String) })
Dim paBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(paCtor, New Object() {"tokenizer.CodeGen"})
asm.SetCustomAttribute(paBuilder)

Dim ataType As Type = GetType(AssemblyTitleAttribute)
Dim ataCtor As ConstructorInfo = ataType.GetConstructor(New Type() { GetType(String) })
Dim ataBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(ataCtor, New Object() {"tokenizer.CodeGen"})
asm.SetCustomAttribute(ataBuilder)

Dim deaType As Type = GetType(AssemblyDescriptionAttribute)
Dim deaCtor As ConstructorInfo = deaType.GetConstructor(New Type() { GetType(String) })
Dim deaBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(deaCtor, New Object() {"tokenizer.CodeGen"})
asm.SetCustomAttribute(deaBuilder)


asm.DefineVersionInfoResource()
asm.Save(asmName.Name & ".dll")
End Sub


End Module