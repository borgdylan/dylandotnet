<Type Name="InstructionHelper" FullName="dylan.NET.Reflection.InstructionHelper">
  <TypeSignature Language="C#" Value="public class InstructionHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi InstructionHelper extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>dnr</AssemblyName>
    <AssemblyVersion>11.2.7.3</AssemblyVersion>
    <AssemblyVersion>11.2.7.5</AssemblyVersion>
    <AssemblyVersion>11.2.7.6</AssemblyVersion>
    <AssemblyVersion>11.2.7.7</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>This class contains the infrastructure to return an OpCode instance given an opcode's name.</summary>
    <remarks>Use this class whenever you need an OpCOde isntance.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InstructionHelper ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.2.7.3</AssemblyVersion>
        <AssemblyVersion>11.2.7.5</AssemblyVersion>
        <AssemblyVersion>11.2.7.6</AssemblyVersion>
        <AssemblyVersion>11.2.7.7</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Constructs a new InstructionHelper".</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="compStr">
      <MemberSignature Language="C#" Value="public static bool compStr (string s1, string s2);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool compStr(string s1, string s2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.2.7.3</AssemblyVersion>
        <AssemblyVersion>11.2.7.5</AssemblyVersion>
        <AssemblyVersion>11.2.7.6</AssemblyVersion>
        <AssemblyVersion>11.2.7.7</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s1" Type="System.String" />
        <Parameter Name="s2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s1">The first string.</param>
        <param name="s2">The second string.</param>
        <summary>Compares 2 strings.</summary>
        <returns>True if the strings are equal else returns False.</returns>
        <remarks>This is mostly used as infrastructure for the getOPCode method.</remarks>
      </Docs>
    </Member>
    <Member MemberName="getOPCode">
      <MemberSignature Language="C#" Value="public static System.Reflection.Emit.OpCode getOPCode (string code);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Reflection.Emit.OpCode getOPCode(string code) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.2.7.3</AssemblyVersion>
        <AssemblyVersion>11.2.7.5</AssemblyVersion>
        <AssemblyVersion>11.2.7.6</AssemblyVersion>
        <AssemblyVersion>11.2.7.7</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="code">The opcode name as it use in the 'ILAsm' language e.g. ldc.i4, ldnull, newobj etc..</param>
        <summary>Fetches the OpCode instance corresponding to the opcode name supplied.</summary>
        <returns>An OpCode instance.</returns>
        <remarks>See the source code for this method to determin if the opcode you want is supoported.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
