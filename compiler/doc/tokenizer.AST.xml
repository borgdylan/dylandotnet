<doc>
    <assembly>
        <name>tokenizer.AST</name>
    </assembly>
    <members>
        <member name="dylan.NET.Tokenizer.AST.Exprs.Expr..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Exprs.Expr.AddToken">
            <param name="toktoadd">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Exprs.Expr.Line">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Exprs.Expr.RemToken">
            <param name="ind">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Exprs.Expr.ResultTyp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Exprs.Expr.Tokens">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Exprs.VarExpr..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Exprs.VarExpr.Attr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Exprs.VarExpr.VarName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Exprs.VarExpr.VarTyp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.AssemblyAttrStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.AssemblyStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.AssemblyStmt.AsmName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.AssemblyStmt.Mode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.AssemblyStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.AssignStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.AssignStmt.LExp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.AssignStmt.RExp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.AttrStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.AttrStmt.Ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.AttrStmt.Pairs">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.BreakStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.CatchStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.CatchStmt.ExName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.CatchStmt.ExTyp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.CatchStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.ClassAttrStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.ClassStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.ClassStmt.AddAttr">
            <param name="attrtoadd">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.ClassStmt.AddInterface">
            <param name="interftoadd">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.ClassStmt.Attrs">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.ClassStmt.ClassName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.ClassStmt.ImplInterfaces">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.ClassStmt.InhClass">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.CommentStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.ContinueStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.DebugStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.DebugStmt.Flg">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.DebugStmt.Opt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.DebugStmt.setFlg">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.DebugStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.DecStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.DecStmt.NumVar">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.DelegateStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.DelegateStmt.AddAttr">
            <param name="attrtoadd">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.DelegateStmt.AddParam">
            <param name="paramtoadd">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.DelegateStmt.Attrs">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.DelegateStmt.DelegateName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.DelegateStmt.Params">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.DelegateStmt.RetTyp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.DoStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.DoUntilStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.DoUntilStmt.Exp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.DoWhileStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.DoWhileStmt.Exp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.ElseIfStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.ElseIfStmt.Exp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.ElseStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.EndClassStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.EndClassStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.EndDoStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.EndEnumStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.EndEnumStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.EndEventStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.EndEventStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.EndHIfStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.EndIfStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.EndLockStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.EndLockStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.EndMethodStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.EndMethodStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.EndNSStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.EndNSStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.EndPropStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.EndPropStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.EndTryStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.EndTryStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.EnumStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.EnumStmt.AddAttr">
            <param name="attrtoadd">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.EnumStmt.Attrs">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.EnumStmt.EnumName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.EnumStmt.EnumTyp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.ErrorStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.ErrorStmt.Msg">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.ErrorStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.EventAddStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.EventAddStmt.Adder">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.EventAttrStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.EventRemoveStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.EventRemoveStmt.Remover">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.EventStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.EventStmt.AddAttr">
            <param name="attrtoadd">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.EventStmt.Attrs">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.EventStmt.EventName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.EventStmt.EventTyp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.FieldAttrStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.FieldStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.FieldStmt.AddAttr">
            <param name="attrtoadd">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.FieldStmt.Attrs">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.FieldStmt.FieldName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.FieldStmt.FieldTyp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.FieldStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.FinallyStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.FinallyStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.ForeachStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.ForeachStmt.Exp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.ForeachStmt.Iter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.GotoStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.GotoStmt.LabelName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.GotoStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.HCondCompStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.HDefineStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.HDefineStmt.Symbol">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.HElseIfStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.HElseIfStmt.Exp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.HElseStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.HIfStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.HIfStmt.Exp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.HUndefStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.HUndefStmt.Symbol">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.IfStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.IfStmt.Exp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.ImportStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.ImportStmt.Alias">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.ImportStmt.NS">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.ImportStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.IncludeStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.IncludeStmt.Path">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.IncludeStmt.SSet">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.IncludeStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.IncStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.IncStmt.NumVar">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.InfVarAsgnStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.InfVarAsgnStmt.RExpr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.InfVarAsgnStmt.VarName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.LabelStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.LabelStmt.LabelName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.LabelStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.LiteralStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.LiteralStmt.LitName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.LiteralStmt.RExp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.LocimportStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.LocimportStmt.NS">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.LocimportStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.LockStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.LockStmt.Lockee">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.MethodAttrStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.MethodCallStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.MethodCallStmt.MethodToken">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.MethodStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.MethodStmt.AddAttr">
            <param name="attrtoadd">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.MethodStmt.AddParam">
            <param name="paramtoadd">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.MethodStmt.Attrs">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.MethodStmt.MethodName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.MethodStmt.Params">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.MethodStmt.RetTyp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.NewresStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.NewresStmt.Path">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.NewresStmt.ResType">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.NSStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.NSStmt.NS">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.NSStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.ParameterAttrStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.ParameterAttrStmt.Index">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.PlaceStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.PlaceStmt.LabelName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.PlaceStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.PropertyAttrStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.PropertyGetStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.PropertyGetStmt.Getter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.PropertySetStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.PropertySetStmt.Setter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.PropertyStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.PropertyStmt.AddAttr">
            <param name="attrtoadd">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.PropertyStmt.Attrs">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.PropertyStmt.PropertyName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.PropertyStmt.PropertyTyp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.RefasmStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.RefasmStmt.AsmPath">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.RefasmStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.RefstdasmStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.RefstdasmStmt.AsmPath">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.RefstdasmStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.ReturnStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.ReturnStmt.RExp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.ScopeStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.ScopeStmt.Flg">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.ScopeStmt.Opt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.ScopeStmt.setFlg">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.Stmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.Stmt.AddToken">
            <param name="toktoadd">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.Stmt.Line">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.Stmt.RemToken">
            <param name="ind">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.Stmt.Tokens">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.StmtSet..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.StmtSet..ctor">
            <param name="p">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.StmtSet.AddStmt">
            <param name="stmttoadd">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.StmtSet.Path">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.StmtSet.Stmts">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.ThrowStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.ThrowStmt.RExp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.TryStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.TryStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.UntilStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.UntilStmt.Exp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.VarAsgnStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.VarAsgnStmt.RExpr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.VarAsgnStmt.VarName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.VarAsgnStmt.VarTyp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.VarStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.VarStmt.VarName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.VarStmt.VarTyp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.VerStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.VerStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.VerStmt.ToVersion">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.VerStmt.VersionNos">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.WarningStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.WarningStmt.Msg">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.WarningStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.WhileStmt..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Stmts.WhileStmt.Exp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.AddTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.AddTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ArrInitCallTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ArrInitCallTok..ctor">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ArrInitCallTok.AddElem">
            <param name="eltoadd">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ArrInitCallTok.ArrayType">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ArrInitCallTok.Elements">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ArrInitCallTok.ForceArray">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.AssemblyCTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.AssemblyCTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.AssemblyTok..ctor">
            <summary>Cosntructs a new AssemblyTok.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.AssemblyTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.AsTok..ctor">
            <summary>Constructs a new AsTok.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.AsTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.AttrValuePair..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.AttrValuePair..ctor">
            <param name="nme">To be added.</param>
            <param name="exp">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.AttrValuePair.Name">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.AttrValuePair.ValueExpr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.BreakTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.BreakTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.CastclassTok..ctor">
            <summary>Cosntructs a new CastclassTok.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.CatchTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.CatchTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ClassCTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ClassCTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ClassTok..ctor">
            <summary>Cosntructs a new ClassTok.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ClassTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.CommentTok..ctor">
            <summary>Constructs a new CommentTok.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ContinueTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ContinueTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.DebugTok..ctor">
            <summary>Constructs a new DebugTok.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.DebugTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.DelegateTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.DelegateTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.DllTok..ctor">
            <summary>Constructs a new DllTok.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.DllTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.DoTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.DoTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ElseIfTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ElseIfTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ElseTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ElseTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.EndTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.EndTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.EnumTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.EnumTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ErrorTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ErrorTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.EventCTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.EventCTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.EventTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.EventTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ExeTok..ctor">
            <summary>Constructs a new ExeTok.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ExeTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ExtendsTok..ctor">
            <summary>Constructs a new ExtendsTok.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ExtendsTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.FieldCTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.FieldCTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.FieldTok..ctor">
            <summary>Constructs a new FieldTok.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.FieldTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.FinallyTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.FinallyTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ForeachTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ForeachTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ForTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ForTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.GenericMethodNameTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.GenericMethodNameTok..ctor">
            <param name="idt">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.GenericMethodNameTok..ctor">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.GenericMethodNameTok.AddParam">
            <param name="param">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.GenericMethodNameTok.op_Implicit">
            <param name="idt">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.GenericMethodNameTok.Params">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.GetTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.GetTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.GettypeCallTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.GettypeCallTok..ctor">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.GettypeCallTok.Name">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.GettypeTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.GettypeTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.GotoTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.GotoTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.HDefineTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.HDefineTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.HElseIfTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.HElseIfTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.HElseTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.HElseTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.HIfTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.HIfTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.HUndefTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.HUndefTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ident..ctor">
            <summary>Constructs a new Ident.</summary>
            <remarks>If you want a constructor that assigns Value at the same time use the other constructor.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ident..ctor">
            <param name="value">To be added.</param>
            <summary>Constructs a new Ident given the string 'value'.</summary>
            <remarks>Assigns a value to the 'Value' field during initalisation. If this string is not available at construct time use the other constructor and set 'Value' manually.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ident.ArrLoc">
            <summary>Holds an expression that evaluates to the array location to load or store into.</summary>
            <remarks>This may be just the letter 'l' as an Ident so as to signal that the array length is required.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ident.Conv">
            <summary>This flag must be set if a conversion is desired.</summary>
            <remarks>The TTok field must be set if this is set.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ident.DoNeg">
            <summary>If a negation is wished this flag is to be set.</summary>
            <remarks>Set this only on identifiers that lead to numbers.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ident.DoNot">
            <summary>If a biwise not is required set this flag.</summary>
            <remarks>Set this only on identifiers that point to boolean values.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ident.IsArr">
            <summary>This flag must be set to perform an array access.</summary>
            <remarks>The slot to be used is to be put in ArrLoc.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ident.IsRef">
            <summary>Set this flag to return the address of the memory location holding this identifier.</summary>
            <remarks>Works only with valutypes/struct types.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ident.IsRefInst">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ident.IsValInRef">
            <summary>If this identifer leads to an address and you wish to access the location at that address set this flag.</summary>
            <remarks>Such an identifier cannot be stored in fields.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ident.IsValInRefInst">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ident.MemberAccessFlg">
            <summary>This flag when set indicates method chaining behaviour.</summary>
            <remarks>If this is set, also set MemberToAccess to indicate the member of teh return type to chain into.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ident.MemberToAccess">
            <summary>Indicates the member to access during method chaining.</summary>
            <remarks>Chaining only happens if MemberAccessFlg is set to true.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ident.OrdOp">
            <summary>Indicates the order in which the unary operators get applied in.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ident.TTok">
            <summary>Holds a type token indicating the type to convert to.</summary>
            <remarks>For a conversion to happen the Conv flag must be set to true.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.IfTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.IfTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ImageTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ImplementsTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ImplementsTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ImportTok..ctor">
            <summary>Constructs a new ImportTok.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ImportTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.IncludeTok..ctor">
            <summary>Constructs a new IncludeTok.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.IncludeTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.InOutTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.InOutTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.InTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.InTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.LabelTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.LabelTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.LiteralTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.LiteralTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.LocimportTok..ctor">
            <summary>Constructs a new LocimportTok.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.LocimportTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.LockTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.LockTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.MethodCallTok..ctor">
            <summary>Constructs a new MethodCallTok.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.MethodCallTok..ctor">
            <param name="value">This parameter is not usable in this class so use the other constructor.</param>
            <summary>Constructs a new MethodCallTok.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.MethodCallTok.AddParam">
            <param name="paramtoadd">The Expr instance holding the expression whose evaluated value will be passed as the parameter.</param>
            <summary>Adds another parameter expression to the list of parameters.</summary>
            <remarks>Initially the amount of parameters is 0.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.MethodCallTok.Name">
            <summary>The MethodName instance containg the method's name and other information.</summary>
            <remarks>Any identifier whose Value is a valid and accessible method name can be used as a valid value for this field provided that the Params fields is adequatley set.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.MethodCallTok.Params">
            <summary>The array of parameter expressions to be passed to the method.</summary>
            <remarks>The result type of each parameter in conjunction with the method name leads to the resolution of a MethodInfo instance.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.MethodCallTok.PopFlg">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.MethodCallTok.TypArr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.MethodCTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.MethodCTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.MethodNameTok..ctor">
            <summary>Constructs a new MethodNameTok.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.MethodNameTok..ctor">
            <param name="idt">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.MethodNameTok..ctor">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.MethodNameTok.op_Implicit">
            <param name="idt">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.MethodTok..ctor">
            <summary>Constructs a new MethodTok.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.MethodTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.MeTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.MeTok..ctor">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.MeTok.Conv">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.MeTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.MeTok.TTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.NamespaceTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.NamespaceTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.NewarrCallTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.NewarrCallTok..ctor">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.NewarrCallTok.ArrayLen">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.NewarrCallTok.ArrayType">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.NewarrTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.NewarrTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.NewCallTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.NewCallTok..ctor">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.NewCallTok.AddParam">
            <param name="paramtoadd">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.NewCallTok.MemberAccessFlg">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.NewCallTok.MemberToAccess">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.NewCallTok.Name">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.NewCallTok.Params">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.NewCallTok.PopFlg">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.NewresTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.NewTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.NewTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ObjInitCallTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ObjInitCallTok..ctor">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ObjInitCallTok.AddElem">
            <param name="eltoadd">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ObjInitCallTok.Ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ObjInitCallTok.Elements">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ObjInitCallTok.MemberAccessFlg">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ObjInitCallTok.MemberToAccess">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ObjInitCallTok.PopFlg">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.OffTok..ctor">
            <summary>Constructs a new OffTok.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.OffTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.OfTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.OfTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.OnTok..ctor">
            <summary>Constructs a new OnTok.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.OnTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.OutTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.OutTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ParameterCTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ParameterCTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.PlaceTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.PlaceTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.PropertyCTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.PropertyCTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.PropertyTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.PropertyTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.PtrCallTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.PtrCallTok..ctor">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.PtrCallTok.MetToCall">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.PtrTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.PtrTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.RefasmTok..ctor">
            <summary>Constructs a new RefasmTok.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.RefasmTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.RefstdasmTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.RefstdasmTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.RefTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.RefTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.RemoveTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.RemoveTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ReturnTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ReturnTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ScopeTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ScopeTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.SetTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.SetTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.StructTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.StructTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.SwitchTok..ctor">
            <summary>Constructs a new SwitchTok.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TernaryCallTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TernaryCallTok..ctor">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TernaryCallTok.Condition">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TernaryCallTok.FalseExpr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TernaryCallTok.TrueExpr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TernaryTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TernaryTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ThenTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ThenTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ThrowTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ThrowTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Token..ctor">
            <summary>Constructs a Token.</summary>
            <remarks>To just initialise a new Token with a particular value use the other constructor.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Token..ctor">
            <param name="value">The textual value of the Token to initialise.</param>
            <summary>Constructs a Token given its Value.</summary>
            <remarks>If the Value is not known at construct time please use the above cosntructor and set the Value field manually.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Token.Line">
            <summary>The Line where this Token was found.</summary>
            <remarks>This is important for debug info emission.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Token.ToString">
            <summary>Outputs the Token in terms of dylan.NET syntax.</summary>
            <returns>The dylan.NET syntax that represents this Token.</returns>
            <remarks>This method is overridden in many subclasses as this implementation is too general.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Token.Value">
            <summary>The textual value of the Token.</summary>
            <remarks>From this the Parser module can further optimize the Token into other subclasses.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TryTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TryTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.UntilTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.UntilTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ValInRefTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.ValInRefTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.VarTok..ctor">
            <summary>Constructs a new VarTok.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.VarTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.VerTok..ctor">
            <summary>Constructs a new VerTok.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.VerTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.WarningTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.WarningTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.WhileTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.WhileTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.AbstractAttr..ctor">
            <summary>Constructs a new AbstractAttr.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.AbstractAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.AnsiClassAttr..ctor">
            <summary>Constructs a new AnsiClassAttr.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.AnsiClassAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.AssemblyAttr..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.AssemblyAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute..ctor">
            <summary>Constructs a new Attribute.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.AutoClassAttr..ctor">
            <summary>Constructs a new AutoClassAttr.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.AutoClassAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.AutoLayoutAttr..ctor">
            <summary>Constructs a new AutoLayoutAttr.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.AutoLayoutAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.BeforeFieldInitAttr..ctor">
            <summary>Constructs a new BeforeFieldInitAttr.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.BeforeFieldInitAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.FamANDAssemAttr..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.FamANDAssemAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.FamilyAttr..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.FamilyAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.FamORAssemAttr..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.FamORAssemAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.FinalAttr..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.FinalAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.HasDefaultAttr..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.HasDefaultAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.HideBySigAttr..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.HideBySigAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.InitOnlyAttr..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.InitOnlyAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.InterfaceAttr..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.LiteralAttr..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.LiteralAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.NewSlotAttr..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.NewSlotAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.NoneAttr..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.NoneAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.PartialAttr..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.PartialAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.PinvokeImplAttr..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.PinvokeImplAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.PrivateAttr..ctor">
            <summary>Constructs a new PrivateAttr.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.PrivateAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.PrototypeAttr..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.PrototypeAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.PublicAttr..ctor">
            <summary>Constructs a new PublicAttr.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.PublicAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.SealedAttr..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.SealedAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.SequentialLayoutAttr..ctor">
            <summary>Constructs a new SequentialLayoutAttr.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.SequentialLayoutAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.SpecialNameAttr..ctor">
            <summary>Constructs a new SpecialNameAttr.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.SpecialNameAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.StaticAttr..ctor">
            <summary>Cosntructs a new StaticAttr.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.StaticAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.VirtualAttr..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Attributes.VirtualAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.Ampersand..ctor">
            <summary>Constructs a new Ampersand.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.Ampersand.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.Character..ctor">
            <summary>Cosntructs a new Character.</summary>
            <remarks>You might prefer using one of the subclasses of this class. This class only is useful for detecting characters in general.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.Colon..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.Colon.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.Comma..ctor">
            <summary>Constructs a new Comma.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.Comma.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.Cr..ctor">
            <summary>Constructs a new Cr.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.Cr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.CrLf..ctor">
            <summary>Constructs a new CrLf.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.CrLf.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.DollarSign..ctor">
            <summary>Constructs a new DollarSign.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.DollarSign.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.LAParen..ctor">
            <summary>Constructs a new LAParen.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.LAParen.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.LCParen..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.LCParen.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.Lf..ctor">
            <summary>Constructs a new Lf.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.Lf.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.LParen..ctor">
            <summary>Constructs a new LParen.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.LParen.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.LRSParen..ctor">
            <summary>Constructs a new LRSParen.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.LRSParen.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.LSParen..ctor">
            <summary>Constructs a new LSParen.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.LSParen.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.Pipe..ctor">
            <summary>Constructs a new Pipe.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.Pipe.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.QuestionMark..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.QuestionMark.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.RAParen..ctor">
            <summary>Constructs a new RAParen.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.RAParen.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.RCParen..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.RCParen.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.RParen..ctor">
            <summary>Constructs a new RParen.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.RParen.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.RSParen..ctor">
            <summary>Constructs a new RSParen.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Chars.RSParen.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.BooleanLiteral..ctor">
            <summary>Constructs a new BooleanLiteral.</summary>
            <remarks>Also sets the LitTyp field to an instance of BooleanTok.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.BooleanLiteral..ctor">
            <param name="value">The boolean value to assign to the BooleanLiteral.</param>
            <summary>Constructs a new BooleanLiteral with the given value.</summary>
            <remarks>Sets the Value and LitTyp fields accodingly.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.BooleanLiteral..ctor">
            <param name="value">The value to give the 'Value' field which is useless in this case.</param>
            <summary>Cosntructs a new BooleanLiteral.</summary>
            <remarks>Also sets the LitTyp field to an instance of BooleanTok.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.BooleanLiteral.BoolVal">
            <summary>Holds the value of the literal.</summary>
            <remarks>This value is loaded as the number 1 or 0 for true or false repectively.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.BooleanLiteral.DoNot">
            <summary>This flag indicates whether a negation of the vaue is required.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.BooleanLiteral.OrdOp">
            <summary>Contains the order in which unary operations are to be done on the literal.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.BooleanLiteral.ToString">
            <summary>Returns the dylan.NET syntax that is parsable into this literal.</summary>
            <returns>The dylan.NET syntactic equivalent to this literal ie. "true" or "false".</returns>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.ByteLiteral..ctor">
            <summary>Constructs a ByteLiteral.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.ByteLiteral..ctor">
            <param name="value">The byte value to assign to the ByteLiteral.</param>
            <summary>Constructs a new ByteLiteral with the given value.</summary>
            <remarks>Sets the Value and LitTyp fields accodingly.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.ByteLiteral..ctor">
            <param name="value" />
            <summary>Constructs a new ByteLiteral.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.ByteLiteral.NumVal">
            <summary>The numeric value of the literal.</summary>
            <remarks>It is loaded using the ldc.i4 set of opcodes followed by a conv.u1.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.ByteLiteral.ToString">
            <summary>Returns the dylan.NET syntax that is parsable into this literal.</summary>
            <returns>The dylan.NET syntactic equivalent to this literal ie. NumVal + "ub".</returns>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.CharLiteral..ctor">
            <summary>Constructs a new CharLiteral.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.CharLiteral..ctor">
            <param name="value">The char value to assign to the CharLiteral.</param>
            <summary>Constructs a new CharLiteral with the given value.</summary>
            <remarks>Sets the Value and LitTyp fields accodingly.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.CharLiteral..ctor">
            <param name="value" />
            <summary>Constructs a new CharLiteral.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.CharLiteral.CharVal">
            <summary>The value of the character literal.</summary>
            <remarks>This value is loaded by the ldc.i4 set of opcodes with the number corresponding to the character as its operand.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.CharLiteral.OrdOp">
            <summary>Indicates the order in which the unary operators get applied in.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.CharLiteral.ToString">
            <summary>Returns the dylan.NET syntax that is parsable into this literal.</summary>
            <returns>The dylan.NET syntactic equivalent to this literal ie. "'" + CharVal + "'".</returns>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.ConstLiteral..ctor">
            <summary>Constructs a new ConstLiteral.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.ConstLiteral..ctor">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.ConstLiteral.ConstVal">
            <summary>The value of the Literal/Constant field as given by the reflection infrastructure.</summary>
            <remarks>This value is post-processed via helper methods in the CodeGen library which ready it for loading.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.ConstLiteral.ExtTyp">
            <summary>The type of the constant as it should appear in method parameter lists etc.</summary>
            <remarks>In the case of enum entries this is the enum's name. In cases of standalone constant fields this is the same as IntTyp.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.ConstLiteral.IntTyp">
            <summary>The actual type of the value which is used for the transformation of this class instance into a suitable literal loadable by the EmitLiteral method in the Helpers class of CodeGen.</summary>
            <remarks>In the case of an enum member this is the enum's underlying type otherwise it is the reported field constant type.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.DecimalLiteral..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.DecimalLiteral..ctor">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.DecimalLiteral..ctor">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.DecimalLiteral.NumVal">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.DecimalLiteral.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.DoubleLiteral..ctor">
            <summary>Constructs a new DoubleLiteral.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.DoubleLiteral..ctor">
            <param name="value">The double value to assign to the DoubleLiteral.</param>
            <summary>Constructs a new DoubleLiteral with the given value.</summary>
            <remarks>Sets the Value and LitTyp fields accodingly.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.DoubleLiteral..ctor">
            <param name="value" />
            <summary>Constructs a new DoubleLiteral.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.DoubleLiteral.NumVal">
            <summary>The numeric value of the literal.</summary>
            <remarks>It is loaded using the ldc.r8 opcode.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.DoubleLiteral.ToString">
            <summary>Returns the dylan.NET syntax that is parsable into this literal.</summary>
            <returns>The dylan.NET syntactic equivalent to this literal ie. NumVal + "d".</returns>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.FloatLiteral..ctor">
            <summary>Constructs a new FloatLiteral.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.FloatLiteral..ctor">
            <param name="value">The single value to assign to the FloatLiteral.</param>
            <summary>Constructs a new FloatLiteral with the given value.</summary>
            <remarks>Sets the Value and LitTyp fields accodingly.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.FloatLiteral..ctor">
            <param name="value" />
            <summary>Constructs a new FloatLiteral.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.FloatLiteral.NumVal">
            <summary>The numeric value of the literal.</summary>
            <remarks>It is loaded using the ldc.r4 opcode.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.FloatLiteral.ToString">
            <summary>Returns the dylan.NET syntax that is parsable into this literal.</summary>
            <returns>The dylan.NET syntactic equivalent to this literal ie. NumVal + "f".</returns>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.IntLiteral..ctor">
            <summary>Constructs a new IntLiteral.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.IntLiteral..ctor">
            <param name="value">The integer value to assign to the IntLiteral.</param>
            <summary>Constructs a new IntLiteral with the given value.</summary>
            <remarks>Sets the Value and LitTyp fields accodingly.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.IntLiteral..ctor">
            <param name="value" />
            <summary>Constructs a new IntLiteral.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.IntLiteral.NumVal">
            <summary>The numerical value of this literal.</summary>
            <remarks>It is loaded using just the ldc.i4 set of opcodes.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.IntLiteral.ToString">
            <summary>Returns the dylan.NET syntax that is parsable into this literal.</summary>
            <returns>The dylan.NET syntactic equivalent to this literal ie. NumVal + "i".</returns>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.IntLiteral.ToStringNoI">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.IntPtrLiteral..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.IntPtrLiteral..ctor">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.IntPtrLiteral.NumVal">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.IntPtrLiteral.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.Literal..ctor">
            <summary>Constructs a new Literal.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.Literal..ctor">
            <param name="value">The string to assign to the Value field.</param>
            <summary>Constructs a new Literal.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.Literal.Conv">
            <summary>Holds a flag indicating whether a conversion is to be made or not.</summary>
            <remarks>Set this if a conversion is required. Also give a value to TTok to indicate the destination type.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.Literal.LitTyp">
            <summary>Holds a TypeTok indicating the type of literal represented. The RefTyp field of the TypeTok is useful during code generation.</summary>
            <remarks>This vaue is automatically assigned by the constructor of inheriting classes. Please do not change it.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.Literal.TTok">
            <summary>Holds a TypeTok indicating the type to convert to.</summary>
            <remarks>For the value of this field to have effects the Conv field is to be set true.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.LongLiteral..ctor">
            <summary>Constructs a new LongLiteral.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.LongLiteral..ctor">
            <param name="value">The long value to assign to the LongLiteral.</param>
            <summary>Constructs a new LongLiteral with the given value.</summary>
            <remarks>Sets the Value and LitTyp fields accodingly.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.LongLiteral..ctor">
            <param name="value" />
            <summary>Constructs a new LongLiteral.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.LongLiteral.NumVal">
            <summary>The numeric value of the literal.</summary>
            <remarks>It is loaded using the ldc.i4 set of opcodes folowed by a conv.i8 or by using ldc.i8 directly.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.LongLiteral.ToString">
            <summary>Returns the dylan.NET syntax that is parsable into this literal.</summary>
            <returns>The dylan.NET syntactic equivalent to this literal ie. NumVal + "l".</returns>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.NullLiteral..ctor">
            <summary>Constructs a new NullLiteral.</summary>
            <remarks>Also sets LitTyp to an ObjectTok instance.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.NullLiteral..ctor">
            <param name="value">The value to give to the 'Value' field which in this case is not useful.</param>
            <summary>Constructs a new NullLiteral.</summary>
            <remarks>Also sets LitTyp to an ObjectTok instance.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.NullLiteral.NullVal">
            <summary>Holds a null reference.</summary>
            <remarks>The code generator will not use this null reference. Instead it will load one using the 'ldnull' opcode.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.NullLiteral.ToString">
            <summary>Returns the dylan.NET syntax that is parsable into this literal.</summary>
            <returns>The dylan.NET syntactic equivalent to this literal ie. "null".</returns>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral..ctor">
            <summary>Constructs a new NumberLiteral.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral..ctor">
            <param name="value">This parameter is of no use in this case.</param>
            <summary>Constructs a new NumberLiteral.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral.DoNeg">
            <summary>Determines if a two's complement negation should be applied to the literal after loading.</summary>
            <remarks>This is usually applied using the neg opcode.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral.DoNot">
            <summary>Determines if a bitwise not should be applied on the literal after loading.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral.OrdOp">
            <summary>Contains the order in which unary operations are to be done on the literal.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.SByteLiteral..ctor">
            <summary>Constructs an SByteLiteral.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.SByteLiteral..ctor">
            <param name="value">The sbyte value to assign to the SByteLiteral.</param>
            <summary>Constructs a new SByteLiteral with the given value.</summary>
            <remarks>Sets the Value and LitTyp fields accodingly.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.SByteLiteral..ctor">
            <param name="value" />
            <summary>Constructs a new SByteLiteral.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.SByteLiteral.NumVal">
            <summary>The numeric value of the literal.</summary>
            <remarks>It is loaded using the ldc.i4 set of opcodes followed by a conv.i1.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.SByteLiteral.ToString">
            <summary>Returns the dylan.NET syntax that is parsable into this literal.</summary>
            <returns>The dylan.NET syntactic equivalent to this literal ie. NumVal + "b".</returns>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.ShortLiteral..ctor">
            <summary>Constructs a new ShortLiteral.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.ShortLiteral..ctor">
            <param name="value">The short value to assign to the ShortLiteral.</param>
            <summary>Constructs a new ShortLiteral with the given value.</summary>
            <remarks>Sets the Value and LitTyp fields accodingly.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.ShortLiteral..ctor">
            <param name="value" />
            <summary>Constructs a new ShortLiteral.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.ShortLiteral.NumVal">
            <summary>The numeric value of this literal.</summary>
            <remarks>It is loaded by the ldc.i4 set of opcodes followed by a conv.i2.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.ShortLiteral.ToString">
            <summary>Returns the dylan.NET syntax that is parsable into this literal.</summary>
            <returns>The dylan.NET syntactic equivalent to this literal ie. NumVal + "s".</returns>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.StringLiteral..ctor">
            <summary>Constructs a new StringLiteral.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.StringLiteral..ctor">
            <param name="value">The value to give to the literal.</param>
            <summary>Constructs a new StringLiteral.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.StringLiteral.MemberAccessFlg">
            <summary>This flag when set indicates that chaining must occur after this literal is loaded.</summary>
            <remarks>The MemberToAccess fied must be given value if this is set.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.StringLiteral.MemberToAccess">
            <summary>The token representing the method/field to be loaded using the instance of the loaded literal.</summary>
            <remarks>For this field to have significance the MemberAccessFlg must be set to true.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.StringLiteral.OrdOp">
            <summary>Indicates the order in which the unary operators get applied in.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.StringLiteral.ToString">
            <summary>Returns the dylan.NET syntax that is parsable into this literal.</summary>
            <returns>The dylan.NET syntactic equivalent to this literal ie. "\"" + Value + "\"".</returns>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.UIntLiteral..ctor">
            <summary>Constructs a new UIntLiteral.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.UIntLiteral..ctor">
            <param name="value" />
            <summary>Constructs a new UIntLiteral.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.UIntLiteral..ctor">
            <param name="value">The uinteger value to assign to the UIntLiteral.</param>
            <summary>Constructs a new UIntLiteral with the given value.</summary>
            <remarks>Sets the Value and LitTyp fields accodingly.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.UIntLiteral.NumVal">
            <summary>The numerical value of this literal.</summary>
            <remarks>It is loaded using the ldc.i4 set of opcodes or the 'ldc.i8' opcode followed by a conv.u4.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.UIntLiteral.ToString">
            <summary>Returns the dylan.NET syntax that is parsable into this literal.</summary>
            <returns>The dylan.NET syntactic equivalent to this literal ie. NumVal + "ui".</returns>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.ULongLiteral..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.ULongLiteral..ctor">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.ULongLiteral..ctor">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.ULongLiteral.NumVal">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.ULongLiteral.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.UShortLiteral..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.UShortLiteral..ctor">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.UShortLiteral..ctor">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.UShortLiteral.NumVal">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Literals.UShortLiteral.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.AddOp..ctor">
            <summary>Constructs an AddOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.AddOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.AndOp..ctor">
            <summary>Constructs an new AndOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.AndOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp..ctor">
            <summary>Constructs a new AritOp.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.AsOp..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.AsOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.AssignOp..ctor">
            <summary>Constructs a new AssignOp.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.AssignOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.AssignOp2..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.AssignOp2.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp..ctor">
            <summary>Constructs a new ConditionalOp.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.DecOp..ctor">
            <summary>Constructs a new DecOp.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.DecOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.DivOp..ctor">
            <summary>Constructs an new DivOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.DivOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.EqOp..ctor">
            <summary>Constructs a new EqOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.EqOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.GeOp..ctor">
            <summary>Constructs a new GeOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.GeOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.GtOp..ctor">
            <summary>Constructs a new GtOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.GtOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.IncOp..ctor">
            <summary>Constructs a new IncOp.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.IncOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.IsOp..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.IsOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.LeOp..ctor">
            <summary>Constructs a new LeOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.LeOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.LikeOp..ctor">
            <summary>Constructs a new LikeOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.LikeOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp..ctor">
            <summary>Constructs a new LogicalOp.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.LtOp..ctor">
            <summary>Cosntructs a new LtOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.LtOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.ModOp..ctor">
            <summary>Constructs a new ModOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.ModOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.MulOp..ctor">
            <summary>Constructs a new MulOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.MulOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.NandOp..ctor">
            <summary>Constructs a new NandOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.NandOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.NegOp..ctor">
            <summary>Constructs a new NegOp.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.NegOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.NeqOp..ctor">
            <summary>Constructs a new NeqOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.NeqOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.NLikeOp..ctor">
            <summary>Cosntructs a new NLikeOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.NLikeOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.NorOp..ctor">
            <summary>Constructs a new NorOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.NorOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.NotOp..ctor">
            <summary>Constructs a new NotOp.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.NotOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.Op..ctor">
            <summary>Constructs an Op.</summary>
            <remarks>Normally one would not want to construct an Op but one of its subclasses. This class is only useful for Op detection in general.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.Op.LChild">
            <summary>In an AST made by the codegen module this holds the Left Child this Op operates on.</summary>
            <remarks>This field is set automatically by the ConvToAST method of codegen.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.Op.PrecNo">
            <summary>This is the order of precedence number used during RPN expression making.</summary>
            <remarks>Each class sets this field as it gets initialised. Do not mess with this or else RPN components may work incorrectly. The numbers are assigned according to the C language order of precedence.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.Op.RChild">
            <summary>In an AST made by the codegen module this holds the Right Child this Op operates on.</summary>
            <remarks>This field is set automatically by the ConvToAST method of codegen.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.OrOp..ctor">
            <summary>Cosnstructs a new OrOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.OrOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.ShlOp..ctor">
            <summary>Constructs a new ShlOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.ShlOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.ShrOp..ctor">
            <summary>Constructs an ShrOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.ShrOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.SubOp..ctor">
            <summary>Constructs a new SubOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.SubOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.XnorOp..ctor">
            <summary>Constructs a new XnorOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.XnorOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.XorOp..ctor">
            <summary>Cosntructs a new XorOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.Ops.XorOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.BooleanTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.BooleanTok..ctor">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.BooleanTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.ByteTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.ByteTok..ctor">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.ByteTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.CharTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.CharTok..ctor">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.CharTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.DecimalTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.DecimalTok..ctor">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.DecimalTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.DoubleTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.DoubleTok..ctor">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.DoubleTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.GenericTypeTok..ctor">
            <summary>Constructs a new GenericTypeTok.</summary>
            <remarks>If you want to pass the type name during construction use the other constructor.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.GenericTypeTok..ctor">
            <param name="value">A valid type name that is reachable given the defined lists of assemblies and namespaces to import.</param>
            <summary>Constructs a new GenericTypeTok assigning the type name's value as specified in the value parameter.</summary>
            <remarks>If you wish to set the type name later use the other constructor and set the 'Value' field acccordingly.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.GenericTypeTok.AddParam">
            <param name="param">A type token representing a generic type parameter.</param>
            <summary>Adds a generic type parameter to the list of generic type parameters ie. 'Params'.</summary>
            <remarks />
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.GenericTypeTok.Clone">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.GenericTypeTok.CloneTT">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.GenericTypeTok.Params">
            <summary>Holds the type tokens for the type parameters that have to be substituted into this type.</summary>
            <remarks>The parameters may be generic or non-generic.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.GenericTypeTok.ToString">
            <summary>Outputs the GenericTypeTok in terms of dylan.NET syntax.</summary>
            <returns>The dylan.NET syntax that represents this GenericTypeTok.</returns>
            <remarks>This method is overrides the TypeTok implementation of ToString() since that implementation does not capture generic type parameters.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.IntegerTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.IntegerTok..ctor">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.IntegerTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.IntPtrTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.IntPtrTok..ctor">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.IntPtrTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.LongTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.LongTok..ctor">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.LongTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.ObjectTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.ObjectTok..ctor">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.ObjectTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.SByteTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.SByteTok..ctor">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.SByteTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.ShortTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.ShortTok..ctor">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.ShortTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.SingleTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.SingleTok..ctor">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.SingleTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.StringTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.StringTok..ctor">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.StringTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok..ctor">
            <summary>Constructs a new TypeToken.</summary>
            <remarks>If you want to pass the type name during construction use the other constructor.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok..ctor">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok..ctor">
            <param name="value">A valid type name that is reachable given the defined lists of assemblies and namespaces to import.</param>
            <summary>Constructs a new TypeTok assigning the type name's value as specified in the value parameter.</summary>
            <remarks>If you wish to set the type name later use the other constructor and set the 'Value' field acccordingly.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok.Clone">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok.CloneTT">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok.IsArray">
            <summary>If set to true indicates that an array type is desired.</summary>
            <remarks>Usually this field gets set true by the parser after finding '[]' after the type name.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok.IsByRef">
            <summary>If set to true indicates that a byref type is desired.</summary>
            <remarks>Normally this field gets set true by the parser after finding '&amp;' after the type name.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok.RefTyp">
            <summary>Holds the System.Type instance representing the required type. This is set automatically if the standard type tokens are used.</summary>
            <remarks>Make sure not to set this manually. Let the constructors of the standard type tokens or the parser/codegen infer its value instead.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok.ToString">
            <summary>Outputs the TypeTok in terms of dylan.NET syntax.</summary>
            <returns>The dylan.NET syntax that represents this TypeTok.</returns>
            <remarks>This method is overridden in GenericTypeTok as this implementation does not capture generic type parameters.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.UIntegerTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.UIntegerTok..ctor">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.UIntegerTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.ULongTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.ULongTok..ctor">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.ULongTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.UShortTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.UShortTok..ctor">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.UShortTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.VoidTok..ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.VoidTok..ctor">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="dylan.NET.Tokenizer.AST.Tokens.TypeToks.VoidTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
    </members>
</doc>
