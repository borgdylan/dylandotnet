<doc>
    <assembly>
        <name>tokenizer.AST</name>
    </assembly>
    <members>
        <member name="T:dylan.NET.Tokenizer.AST.Exprs.Expr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Exprs.Expr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Exprs.Expr.AddToken(dylan.NET.Tokenizer.AST.Tokens.Token)">
            <param name="toktoadd">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Exprs.Expr.Line">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Exprs.Expr.RemToken(System.Int32)">
            <param name="ind">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Exprs.Expr.ResultTyp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Exprs.Expr.Tokens">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Exprs.VarExpr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Exprs.VarExpr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Exprs.VarExpr.Attr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Exprs.VarExpr.VarName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Exprs.VarExpr.VarTyp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Interfaces.IConstrainable">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Interfaces.IConstrainable.AddConstraint(System.String,dylan.NET.Tokenizer.AST.Tokens.Token)">
            <param name="param">To be added.</param>
            <param name="ctr">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Interfaces.IConstrainable.Constraints">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Interfaces.IConvable">
            <summary>The interface implemented by all Tokens supporting conversion.</summary>
            <remarks>This interfaces depends on IUnaryOperatable.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Interfaces.IConvable.Conv">
            <summary>The flag indicating whether conversion should be performed.</summary>
            <value>The boolean value fo the flag.</value>
            <remarks>Make sure that the 'TTok' property is set before setting this to true.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Interfaces.IConvable.TTok">
            <summary>The type to convert to.</summary>
            <value>The TypeTok encoding the Type to convert to.</value>
            <remarks>For this property to have effect set the 'Conv' property should be set to true.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Interfaces.IHasConstraints">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Interfaces.IHasConstraints.HasConstraints">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Interfaces.IIncDecable">
            <summary>The interface implemented by all Tokens supporting increment i.e. '++' and decrement i.e. '--'.</summary>
            <remarks>This interface depends on IUnaryOperatable.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Interfaces.IIncDecable.DoDec">
            <summary>The flag indicating whether a decrement should be done.</summary>
            <value>The boolean value for the flag.</value>
            <remarks />
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Interfaces.IIncDecable.DoInc">
            <summary>The flag indicating whether an increment should be done.</summary>
            <value>The boolean value for the flag.</value>
            <remarks />
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Interfaces.INegatable">
            <summary>The interface implemented by all Tokens supporting negation i.e. '!'.</summary>
            <remarks>This interface depends on IUnaryOperatable.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Interfaces.INegatable.DoNeg">
            <summary>The flag indicating whether negation should be done.</summary>
            <value>The boolean value for the flag.</value>
            <remarks />
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Interfaces.INotable">
            <summary>The interface implemented by all Tokens supporting one's complement i.e. '~'.</summary>
            <remarks>This interface depends on IUnaryOperatable.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Interfaces.INotable.DoNot">
            <summary>The flag indicating whether one's complement should be done.</summary>
            <value>The boolean value for the flag.</value>
            <remarks />
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Interfaces.IUnaryOperatable">
            <summary>The main interface for those Tokens that support unary operations.</summary>
            <remarks>It is more usful if this interface is implemented along with one or more of the others.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Interfaces.IUnaryOperatable.OrdOp">
            <summary>Gives the order of unary operations.</summary>
            <value>A string with space delimeted codes each indicating a unary operation.</value>
            <remarks />
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.AssemblyAttrStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.AssemblyAttrStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.AssemblyStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.AssemblyStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.AssemblyStmt.AsmName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.AssemblyStmt.Mode">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.AssemblyStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.AssignStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.AssignStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.AssignStmt.LExp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.AssignStmt.RExp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.AttrStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.AttrStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.AttrStmt.Ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.AttrStmt.Pairs">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.BreakStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.BreakStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.CatchStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.CatchStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.CatchStmt.ExName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.CatchStmt.ExTyp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.CatchStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.ClassAttrStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.ClassAttrStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.ClassStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.ClassStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.ClassStmt.AddAttr(dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute)">
            <param name="attrtoadd">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.ClassStmt.AddConstraint(System.String,dylan.NET.Tokenizer.AST.Tokens.Token)">
            <param name="param">To be added.</param>
            <param name="ctr">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.ClassStmt.AddInterface(dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok)">
            <param name="interftoadd">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.ClassStmt.Attrs">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.ClassStmt.ClassName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Stmts.ClassStmt.Constraints">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Stmts.ClassStmt.HasConstraints">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.ClassStmt.ImplInterfaces">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.ClassStmt.InhClass">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.CommentStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.CommentStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.ContinueStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.ContinueStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.DebugStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.DebugStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.DebugStmt.Flg">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.DebugStmt.Opt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.DebugStmt.setFlg">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.DebugStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.DecStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.DecStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.DecStmt.NumVar">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.DelegateStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.DelegateStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.DelegateStmt.AddAttr(dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute)">
            <param name="attrtoadd">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.DelegateStmt.AddParam(dylan.NET.Tokenizer.AST.Exprs.Expr)">
            <param name="paramtoadd">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.DelegateStmt.Attrs">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.DelegateStmt.DelegateName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.DelegateStmt.Params">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.DelegateStmt.RetTyp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.DoStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.DoStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.DoUntilStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.DoUntilStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.DoUntilStmt.Exp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.DoWhileStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.DoWhileStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.DoWhileStmt.Exp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.ElseIfStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.ElseIfStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.ElseIfStmt.Exp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.ElseStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.ElseStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.EmbedStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.EmbedStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.EmbedStmt.LogicalName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.EmbedStmt.Path">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.EmbedStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.EndAddStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.EndAddStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.EndAddStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.EndClassStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.EndClassStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.EndClassStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.EndDoStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.EndDoStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.EndEnumStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.EndEnumStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.EndEnumStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.EndEventStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.EndEventStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.EndEventStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.EndGetStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.EndGetStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.EndGetStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.EndHIfStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.EndHIfStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.EndIfStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.EndIfStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.EndLockStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.EndLockStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.EndLockStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.EndMethodStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.EndMethodStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.EndMethodStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.EndNSStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.EndNSStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.EndNSStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.EndPropStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.EndPropStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.EndPropStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.EndRegionStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.EndRegionStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.EndRemoveStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.EndRemoveStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.EndRemoveStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.EndSetStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.EndSetStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.EndSetStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.EndTryStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.EndTryStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.EndTryStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.EndUsingStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.EndUsingStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.EndUsingStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.EnumAttrStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.EnumAttrStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.EnumStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.EnumStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.EnumStmt.AddAttr(dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute)">
            <param name="attrtoadd">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.EnumStmt.Attrs">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.EnumStmt.EnumName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.EnumStmt.EnumTyp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.ErrorStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.ErrorStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.ErrorStmt.Msg">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.ErrorStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.EventAddStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.EventAddStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.EventAddStmt.Adder">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.EventAttrStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.EventAttrStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.EventRemoveStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.EventRemoveStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.EventRemoveStmt.Remover">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.EventStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.EventStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.EventStmt.AddAttr(dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute)">
            <param name="attrtoadd">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.EventStmt.Attrs">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.EventStmt.EventName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.EventStmt.EventTyp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.FieldAttrStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.FieldAttrStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.FieldStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.FieldStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.FieldStmt.AddAttr(dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute)">
            <param name="attrtoadd">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.FieldStmt.Attrs">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.FieldStmt.ConstExp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.FieldStmt.FieldName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.FieldStmt.FieldTyp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.FieldStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.FinallyStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.FinallyStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.FinallyStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.ForeachStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.ForeachStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.ForeachStmt.Exp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.ForeachStmt.Iter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.ForeachStmt.Typ">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.ForStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.ForStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.ForStmt.Direction">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.ForStmt.EndExp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.ForStmt.Iter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.ForStmt.StartExp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.ForStmt.StepExp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.ForStmt.Typ">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.GotoStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.GotoStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.GotoStmt.LabelName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.GotoStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.HCondCompStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.HCondCompStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.HDefineStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.HDefineStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.HDefineStmt.Symbol">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.HElseIfStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.HElseIfStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.HElseIfStmt.Exp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.HElseStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.HElseStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.HIfStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.HIfStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.HIfStmt.Exp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.HUndefStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.HUndefStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.HUndefStmt.Symbol">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.IfStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.IfStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.IfStmt.Exp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.ImportStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.ImportStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.ImportStmt.Alias">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.ImportStmt.NS">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.ImportStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.IncludeStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.IncludeStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.IncludeStmt.HasError">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.IncludeStmt.Path">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.IncludeStmt.SSet">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.IncludeStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.IncStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.IncStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.IncStmt.NumVar">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.InfVarAsgnStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.InfVarAsgnStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.InfVarAsgnStmt.IsUsing">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.InfVarAsgnStmt.RExpr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.InfVarAsgnStmt.VarName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.LabelStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.LabelStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.LabelStmt.LabelName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.LabelStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.LocimportStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.LocimportStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.LocimportStmt.NS">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.LocimportStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.LockStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.LockStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.LockStmt.Lockee">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.MethodAttrStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.MethodAttrStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.MethodCallStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.MethodCallStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.MethodCallStmt.MethodToken">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.MethodStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.MethodStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.MethodStmt.AddAttr(dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute)">
            <param name="attrtoadd">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.MethodStmt.AddParam(dylan.NET.Tokenizer.AST.Exprs.Expr)">
            <param name="paramtoadd">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.MethodStmt.Attrs">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.MethodStmt.MethodName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.MethodStmt.Params">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.MethodStmt.RetTyp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.NewresStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.NewresStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.NewresStmt.Path">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.NewresStmt.ResType">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.NSStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.NSStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.NSStmt.NS">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.NSStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.ParameterAttrStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.ParameterAttrStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.ParameterAttrStmt.Index">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.PlaceStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.PlaceStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.PlaceStmt.LabelName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.PlaceStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.PropertyAttrStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.PropertyAttrStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.PropertyGetStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.PropertyGetStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.PropertyGetStmt.Getter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.PropertySetStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.PropertySetStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.PropertySetStmt.Setter">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.PropertyStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.PropertyStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.PropertyStmt.AddAttr(dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute)">
            <param name="attrtoadd">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.PropertyStmt.AddParam(dylan.NET.Tokenizer.AST.Exprs.Expr)">
            <param name="paramtoadd">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.PropertyStmt.Attrs">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.PropertyStmt.Params">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.PropertyStmt.PropertyName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.PropertyStmt.PropertyTyp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.RefasmStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.RefasmStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.RefasmStmt.AsmPath">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.RefasmStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.RefstdasmStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.RefstdasmStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.RefstdasmStmt.AsmPath">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.RefstdasmStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.RegionStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.RegionStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.RegionStmt.Name">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.ReturnStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.ReturnStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.ReturnStmt.RExp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.ScopeStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.ScopeStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.ScopeStmt.Flg">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.ScopeStmt.Opt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.ScopeStmt.setFlg">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.SignStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.SignStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.SignStmt.KeyPath">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.SignStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.Stmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.Stmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.Stmt.AddToken(dylan.NET.Tokenizer.AST.Tokens.Token)">
            <param name="toktoadd">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.Stmt.Line">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.Stmt.RemToken(System.Int32)">
            <param name="ind">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.Stmt.Tokens">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.StmtSet">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.StmtSet">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.StmtSet(System.String)">
            <param name="p">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.StmtSet.AddStmt(dylan.NET.Tokenizer.AST.Stmts.Stmt)">
            <param name="stmttoadd">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.StmtSet.Path">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.StmtSet.Stmts">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.ThrowStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.ThrowStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.ThrowStmt.RExp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.TryLockStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.TryLockStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.TryLockStmt.Lockee">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.TryStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.TryStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.TryStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.UntilStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.UntilStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.UntilStmt.Exp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.VarAsgnStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.VarAsgnStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.VarAsgnStmt.IsUsing">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.VarAsgnStmt.RExpr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.VarAsgnStmt.VarName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.VarAsgnStmt.VarTyp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.VarStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.VarStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.VarStmt.VarName">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.VarStmt.VarTyp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.VerStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.VerStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.VerStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.VerStmt.ToVersion">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.VerStmt.VersionNos">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.WarningStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.WarningStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.WarningStmt.Msg">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Stmts.WarningStmt.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Stmts.WhileStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Stmts.WhileStmt">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Stmts.WhileStmt.Exp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.AddTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.AddTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.AddTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.ArrInitCallTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.ArrInitCallTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.ArrInitCallTok(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.ArrInitCallTok.AddElem(dylan.NET.Tokenizer.AST.Exprs.Expr)">
            <param name="eltoadd">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.ArrInitCallTok.ArrayType">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.ArrInitCallTok.Elements">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.ArrInitCallTok.ForceArray">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.AssemblyCTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.AssemblyCTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.AssemblyCTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.AssemblyTok">
            <summary>Represents the 'assembly' keyword.</summary>
            <remarks>Used in detection of an assembly statetment.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.AssemblyTok">
            <summary>Cosntructs a new AssemblyTok.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.AssemblyTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.AsTok">
            <summary>Represents the 'as' keyword.</summary>
            <remarks>Used to detect a variable declaration.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.AsTok">
            <summary>Constructs a new AsTok.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.AsTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.AttrValuePair">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.AttrValuePair">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.AttrValuePair(dylan.NET.Tokenizer.AST.Tokens.Ident,dylan.NET.Tokenizer.AST.Exprs.Expr)">
            <param name="nme">To be added.</param>
            <param name="exp">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.AttrValuePair.Name">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.AttrValuePair.ValueExpr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.BreakTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.BreakTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.BreakTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.CatchTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.CatchTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.CatchTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.ClassCTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.ClassCTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.ClassCTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.ClassTok">
            <summary>Represents the 'class' keyword.</summary>
            <remarks>This class is used by the parser to detect class declarations.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.ClassTok">
            <summary>Cosntructs a new ClassTok.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.ClassTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.CommentTok">
            <summary>Represents the initial token of a comment in the form //*.</summary>
            <remarks />
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.CommentTok">
            <summary>Constructs a new CommentTok.</summary>
            <remarks />
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.ContinueTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.ContinueTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.ContinueTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.DebugTok">
            <summary>The '#debug' preprocessor keyword.</summary>
            <remarks>This class is used by the parser to detect a #debug preprocessor directive.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.DebugTok">
            <summary>Constructs a new DebugTok.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.DebugTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.DefaultCallTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.DefaultCallTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.DefaultCallTok(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.DefaultCallTok.Name">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.DefaultTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.DefaultTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.DefaultTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.DelegateTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.DelegateTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.DelegateTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.DllTok">
            <summary>Represents the 'dll' keyword.</summary>
            <remarks>This class is used in an assembly statement to indicate that the result of compilation should be a .dll library.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.DllTok">
            <summary>Constructs a new DllTok.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.DllTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.DoTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.DoTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.DoTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.DowntoTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.DowntoTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.DowntoTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.ElseIfTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.ElseIfTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.ElseIfTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.ElseTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.ElseTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.ElseTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.EmbedTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.EmbedTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.EmbedTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.EndTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.EndTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.EndTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.EnumCTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.EnumCTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.EnumCTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.EnumTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.EnumTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.EnumTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.ErrorTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.ErrorTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.ErrorTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.EventCTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.EventCTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.EventCTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.EventTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.EventTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.EventTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.ExeTok">
            <summary>Represents the 'exe' keyword.</summary>
            <remarks>This class is used in an assembly statement to indicate that the output of compilation should be a .exe assembly.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.ExeTok">
            <summary>Constructs a new ExeTok.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.ExeTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.ExprCallTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.ExprCallTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.ExprCallTok(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.ExprCallTok.Conv">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.ExprCallTok.DoDec">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.ExprCallTok.DoInc">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.ExprCallTok.DoNeg">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.ExprCallTok.DoNot">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.ExprCallTok.Exp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.ExprCallTok.MemberAccessFlg">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.ExprCallTok.MemberToAccess">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.ExprCallTok.OrdOp">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.ExprCallTok.TTok">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.ExprTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.ExprTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.ExprTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.ExtendsTok">
            <summary>Represents the 'extends' keyword.</summary>
            <remarks />
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.ExtendsTok">
            <summary>Constructs a new ExtendsTok.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.ExtendsTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.FieldCTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.FieldCTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.FieldCTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.FieldTok">
            <summary>Represents the 'field' keyword.</summary>
            <remarks>This class is used by the parser to detect a field declaration.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.FieldTok">
            <summary>Constructs a new FieldTok.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.FieldTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.FinallyTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.FinallyTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.FinallyTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.ForeachTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.ForeachTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.ForeachTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.ForTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.ForTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.ForTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.GenericMethodNameTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.GenericMethodNameTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.GenericMethodNameTok(dylan.NET.Tokenizer.AST.Tokens.Ident)">
            <param name="idt">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.GenericMethodNameTok(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.GenericMethodNameTok.AddConstraint(System.String,dylan.NET.Tokenizer.AST.Tokens.Token)">
            <param name="param">To be added.</param>
            <param name="ctr">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.GenericMethodNameTok.AddParam(dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok)">
            <param name="param">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.GenericMethodNameTok.Constraints">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.GenericMethodNameTok.HasConstraints">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.GenericMethodNameTok.op_Implicit(dylan.NET.Tokenizer.AST.Tokens.Ident)~dylan.NET.Tokenizer.AST.Tokens.GenericMethodNameTok">
            <param name="idt">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.GenericMethodNameTok.Params">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.GetTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.GetTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.GetTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.GettypeCallTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.GettypeCallTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.GettypeCallTok(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.GettypeCallTok.Name">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.GettypeTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.GettypeTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.GettypeTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.GotoTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.GotoTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.GotoTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.HDefineTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.HDefineTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.HDefineTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.HElseIfTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.HElseIfTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.HElseIfTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.HElseTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.HElseTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.HElseTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.HIfTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.HIfTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.HIfTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.HUndefTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.HUndefTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.HUndefTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ident">
            <summary>Represents an identifier.</summary>
            <remarks>May be a variable,arguument, field, method name etc.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ident">
            <summary>Constructs a new Ident.</summary>
            <remarks>If you want a constructor that assigns Value at the same time use the other constructor.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ident(System.String)">
            <param name="value">To be added.</param>
            <summary>Constructs a new Ident given the string 'value'.</summary>
            <remarks>Assigns a value to the 'Value' field during initalisation. If this string is not available at construct time use the other constructor and set 'Value' manually.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Ident._Conv">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Ident._DoDec">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Ident._DoInc">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Ident._DoNeg">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Ident._DoNot">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Ident._OrdOp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Ident._TTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Ident.ArrLoc">
            <summary>Holds an expression that evaluates to the array location to load or store into.</summary>
            <remarks>This may be just the letter 'l' as an Ident so as to signal that the array length is required.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.Ident.Conv">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.Ident.DoDec">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.Ident.DoInc">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.Ident.DoNeg">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.Ident.DoNot">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Ident.ExplType">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Ident.IsArr">
            <summary>This flag must be set to perform an array access.</summary>
            <remarks>The slot to be used is to be put in ArrLoc.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Ident.IsRef">
            <summary>Set this flag to return the address of the memory location holding this identifier.</summary>
            <remarks>Works only with valutypes/struct types.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Ident.IsValInRef">
            <summary>If this identifer leads to an address and you wish to access the location at that address set this flag.</summary>
            <remarks>Such an identifier cannot be stored in fields.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Ident.MemberAccessFlg">
            <summary>This flag when set indicates method chaining behaviour.</summary>
            <remarks>If this is set, also set MemberToAccess to indicate the member of teh return type to chain into.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Ident.MemberToAccess">
            <summary>Indicates the member to access during method chaining.</summary>
            <remarks>Chaining only happens if MemberAccessFlg is set to true.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.Ident.OrdOp">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.Ident.TTok">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.IfTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.IfTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.IfTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.ImplementsTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.ImplementsTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.ImplementsTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.ImportTok">
            <summary>Represents the 'import' keyword.</summary>
            <remarks>This class is used by the parser to detect a namespace import.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.ImportTok">
            <summary>Constructs a new ImportTok.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.ImportTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.IncludeTok">
            <summary>Represents the '#include' preprocessor keyword.</summary>
            <remarks>This is used by the parser to detect a #include directive.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.IncludeTok">
            <summary>Constructs a new IncludeTok.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.IncludeTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.InOutTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.InOutTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.InOutTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.InTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.InTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.InTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.LabelTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.LabelTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.LabelTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.LiteralTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.LiteralTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.LiteralTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.LocimportTok">
            <summary>Represents the soon to be deprecated 'locimport' keyword.</summary>
            <remarks>This class is used by the parser the soon to be deprecated local namespace import.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.LocimportTok">
            <summary>Constructs a new LocimportTok.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.LocimportTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.LockTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.LockTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.LockTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.MethodCallTok">
            <summary>Represents a method call in the form method-name(param1,param2,...).</summary>
            <remarks>This class' design allows dylan.NET method calls to use method calls and expressions as parameters.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.MethodCallTok">
            <summary>Constructs a new MethodCallTok.</summary>
            <remarks />
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.MethodCallTok(System.String)">
            <param name="value">This parameter is not usable in this class so use the other constructor.</param>
            <summary>Constructs a new MethodCallTok.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.MethodCallTok.AddParam(dylan.NET.Tokenizer.AST.Exprs.Expr)">
            <param name="paramtoadd">The Expr instance holding the expression whose evaluated value will be passed as the parameter.</param>
            <summary>Adds another parameter expression to the list of parameters.</summary>
            <remarks>Initially the amount of parameters is 0.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.MethodCallTok.Name">
            <summary>The MethodName instance containg the method's name and other information.</summary>
            <remarks>Any identifier whose Value is a valid and accessible method name can be used as a valid value for this field provided that the Params fields is adequatley set.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.MethodCallTok.Params">
            <summary>The array of parameter expressions to be passed to the method.</summary>
            <remarks>The result type of each parameter in conjunction with the method name leads to the resolution of a MethodInfo instance.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.MethodCallTok.PopFlg">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.MethodCallTok.TypArr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.MethodCTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.MethodCTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.MethodCTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.MethodNameTok">
            <summary>Represents a method name i.e. the full string of characters before the '('.</summary>
            <remarks>This class inherits Ident and hence allows nearly all identifier operations like chaining and conversions to be made in the same way.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.MethodNameTok">
            <summary>Constructs a new MethodNameTok.</summary>
            <remarks />
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.MethodNameTok(dylan.NET.Tokenizer.AST.Tokens.Ident)">
            <param name="idt">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.MethodNameTok(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.MethodNameTok.HasConstraints">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.MethodNameTok.op_Implicit(dylan.NET.Tokenizer.AST.Tokens.Ident)~dylan.NET.Tokenizer.AST.Tokens.MethodNameTok">
            <param name="idt">To be added.</param>
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.MethodTok">
            <summary>Represents the 'method' keyword.</summary>
            <remarks>This class is used by the parser to detect a method declaration.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.MethodTok">
            <summary>Constructs a new MethodTok.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.MethodTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.MeTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.MeTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.MeTok(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.MeTok._Conv">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.MeTok._TTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.MeTok.Conv">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.MeTok.OrdOp">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.MeTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.MeTok.TTok">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.NamespaceTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.NamespaceTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.NamespaceTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.NewarrCallTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.NewarrCallTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.NewarrCallTok(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.NewarrCallTok.ArrayLen">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.NewarrCallTok.ArrayType">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.NewarrTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.NewarrTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.NewarrTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.NewCallTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.NewCallTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.NewCallTok(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.NewCallTok.AddParam(dylan.NET.Tokenizer.AST.Exprs.Expr)">
            <param name="paramtoadd">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.NewCallTok.MemberAccessFlg">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.NewCallTok.MemberToAccess">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.NewCallTok.Name">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.NewCallTok.Params">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.NewCallTok.PopFlg">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.NewTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.NewTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.NewTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.NonExprToken">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.NonExprToken">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.NonExprToken(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.ObjInitCallTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.ObjInitCallTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.ObjInitCallTok(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.ObjInitCallTok.AddElem(dylan.NET.Tokenizer.AST.Tokens.Token)">
            <param name="eltoadd">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.ObjInitCallTok.Ctor">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.ObjInitCallTok.Elements">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.ObjInitCallTok.MemberAccessFlg">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.ObjInitCallTok.MemberToAccess">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.ObjInitCallTok.PopFlg">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.OffTok">
            <summary>Represents the 'off' keyword.</summary>
            <remarks>Turns off the code generation feature to which it is applied.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.OffTok">
            <summary>Constructs a new OffTok.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.OffTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.OfTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.OfTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.OfTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.OnTok">
            <summary>Represents the 'on' keyword.</summary>
            <remarks>Turns on the code generation feature to which it is applied.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.OnTok">
            <summary>Constructs a new OnTok.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.OnTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.OutTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.OutTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.OutTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.ParameterCTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.ParameterCTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.ParameterCTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.PlaceTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.PlaceTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.PlaceTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.PropertyCTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.PropertyCTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.PropertyCTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.PropertyTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.PropertyTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.PropertyTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.PtrCallTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.PtrCallTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.PtrCallTok(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.PtrCallTok.MetToCall">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.PtrTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.PtrTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.PtrTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.RefasmTok">
            <summary>Represents the '#refasm' preprocessor keyword.</summary>
            <remarks>This class is used by the parser to detect assembly load statements.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.RefasmTok">
            <summary>Constructs a new RefasmTok.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.RefasmTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.RefstdasmTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.RefstdasmTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.RefstdasmTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.RefTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.RefTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.RefTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.RegionTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.RegionTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.RegionTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.RemoveTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.RemoveTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.RemoveTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.ReturnTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.ReturnTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.ReturnTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.ScopeTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.ScopeTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.ScopeTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.SetTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.SetTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.SetTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.SignTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.SignTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.SignTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.StepTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.StepTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.StepTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.StructTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.StructTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.StructTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.SwitchTok">
            <summary>Represents an on/off option of a preprocessor directive which turns on/off a code generation feature.</summary>
            <remarks>The OnTok and OffTok classes inherit from this one and other ones may do so in order to support partial turning on of a feature.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.SwitchTok">
            <summary>Constructs a new SwitchTok.</summary>
            <remarks />
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.TernaryCallTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TernaryCallTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TernaryCallTok(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.TernaryCallTok.Condition">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.TernaryCallTok.FalseExpr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.TernaryCallTok.TrueExpr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.TernaryTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TernaryTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.TernaryTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.ThenTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.ThenTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.ThenTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.ThrowTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.ThrowTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.ThrowTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Token">
            <summary>This is the Token class which is the basis for all of the dylan.NET AST.</summary>
            <remarks>All Tokens must directly or indirectly inherit from this class.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Token">
            <summary>Constructs a Token.</summary>
            <remarks>To just initialise a new Token with a particular value use the other constructor.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Token(System.String)">
            <param name="value">The textual value of the Token to initialise.</param>
            <summary>Constructs a Token given its Value.</summary>
            <remarks>If the Value is not known at construct time please use the above cosntructor and set the Value field manually.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Token.Line">
            <summary>The Line where this Token was found.</summary>
            <remarks>This is important for debug info emission.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Token.ToString">
            <summary>Outputs the Token in terms of dylan.NET syntax.</summary>
            <returns>The dylan.NET syntax that represents this Token.</returns>
            <remarks>This method is overridden in many subclasses as this implementation is too general.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.Token.UnquotedValue">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Token.Value">
            <summary>The textual value of the Token.</summary>
            <remarks>From this the Parser module can further optimize the Token into other subclasses.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.TryLockTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TryLockTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.TryLockTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.TryTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TryTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.TryTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.UntilTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.UntilTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.UntilTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.UptoTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.UptoTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.UptoTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.UsingTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.UsingTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.UsingTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.ValInRefTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.ValInRefTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.ValInRefTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.ValueToken">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.ValueToken">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.ValueToken(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.VarTok">
            <summary>Represents the 'var' keyword.</summary>
            <remarks>This class is used by the parser to detect a varible/parameter delaration.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.VarTok">
            <summary>Constructs a new VarTok.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.VarTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.VerTok">
            <summary>Represents the 'ver' keyword.</summary>
            <remarks>This class is used by the parser to detect a version declaration.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.VerTok">
            <summary>Constructs a new VerTok.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.VerTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.WarningTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.WarningTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.WarningTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.WhereTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.WhereTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.WhereTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.WhileTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.WhileTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.WhileTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.WinexeTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.WinexeTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.WinexeTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Attributes.AbstractAttr">
            <summary>Represents the 'abstract' attribute.</summary>
            <remarks>Only applicable to classes. Renders them abstract.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Attributes.AbstractAttr">
            <summary>Constructs a new AbstractAttr.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Attributes.AbstractAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Attributes.AnsiClassAttr">
            <summary>Represents the 'ansi' attribute.</summary>
            <remarks>May only be applied to classes. Forces the encoding used to ANSI.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Attributes.AnsiClassAttr">
            <summary>Constructs a new AnsiClassAttr.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Attributes.AnsiClassAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Attributes.AssemblyAttr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Attributes.AssemblyAttr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Attributes.AssemblyAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute">
            <summary>Represents a dylan.NET method, type, field or property attribute.</summary>
            <remarks>All such attributes must inherit from this class.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Attributes.Attribute">
            <summary>Constructs a new Attribute.</summary>
            <remarks />
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Attributes.AutoClassAttr">
            <summary>Represents the 'autochar' attribute.</summary>
            <remarks>May only be applied to classes. Forces on them an automatic encoding.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Attributes.AutoClassAttr">
            <summary>Constructs a new AutoClassAttr.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Attributes.AutoClassAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Attributes.AutoGenAttr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Attributes.AutoGenAttr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Attributes.AutoGenAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Attributes.AutoLayoutAttr">
            <summary>Represents the 'auto' attribute.</summary>
            <remarks>May only be applied to classes. Allows the CLR to arrange their fields automatically.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Attributes.AutoLayoutAttr">
            <summary>Constructs a new AutoLayoutAttr.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Attributes.AutoLayoutAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Attributes.BeforeFieldInitAttr">
            <summary>Represnts the 'beforefieldinit' attribute.</summary>
            <remarks>May only be applied to classes. Forces the CLR to call their static constructors only once not on every use of the class. Has special use in static classes with static fields.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Attributes.BeforeFieldInitAttr">
            <summary>Constructs a new BeforeFieldInitAttr.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Attributes.BeforeFieldInitAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Attributes.FamANDAssemAttr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Attributes.FamANDAssemAttr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Attributes.FamANDAssemAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Attributes.FamilyAttr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Attributes.FamilyAttr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Attributes.FamilyAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Attributes.FamORAssemAttr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Attributes.FamORAssemAttr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Attributes.FamORAssemAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Attributes.FinalAttr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Attributes.FinalAttr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Attributes.FinalAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Attributes.HasDefaultAttr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Attributes.HasDefaultAttr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Attributes.HasDefaultAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Attributes.HideBySigAttr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Attributes.HideBySigAttr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Attributes.HideBySigAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Attributes.InitOnlyAttr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Attributes.InitOnlyAttr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Attributes.InitOnlyAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Attributes.InterfaceAttr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Attributes.InterfaceAttr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Attributes.InterfaceAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Attributes.LiteralAttr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Attributes.LiteralAttr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Attributes.LiteralAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Attributes.NewSlotAttr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Attributes.NewSlotAttr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Attributes.NewSlotAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Attributes.NoneAttr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Attributes.NoneAttr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Attributes.NoneAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Attributes.PartialAttr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Attributes.PartialAttr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Attributes.PartialAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Attributes.PinvokeImplAttr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Attributes.PinvokeImplAttr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Attributes.PinvokeImplAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Attributes.PrivateAttr">
            <summary>Represents the 'private' attribute.</summary>
            <remarks>Renders all members to which they are applied accessible ony inside the class that declares them.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Attributes.PrivateAttr">
            <summary>Constructs a new PrivateAttr.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Attributes.PrivateAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Attributes.PrototypeAttr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Attributes.PrototypeAttr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Attributes.PrototypeAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Attributes.PublicAttr">
            <summary>Represents the 'public' attribute.</summary>
            <remarks>Renders all members it is applied to fully accessible from every method in every class.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Attributes.PublicAttr">
            <summary>Constructs a new PublicAttr.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Attributes.PublicAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Attributes.SealedAttr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Attributes.SealedAttr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Attributes.SealedAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Attributes.SequentialLayoutAttr">
            <summary>Represents the 'sequential' attribute.</summary>
            <remarks>May only be applied to classes. Forces the CLR to lay their fields in the same order they were defined in. Has special uses in defining structs used for P/Invoke purposes.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Attributes.SequentialLayoutAttr">
            <summary>Constructs a new SequentialLayoutAttr.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Attributes.SequentialLayoutAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Attributes.SpecialNameAttr">
            <summary>Represents the 'specialname' attribute.</summary>
            <remarks>May ony be applied to methods. Makes the CLR interpret their name as special. Useful in defining property accessors/getters and operator overloads.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Attributes.SpecialNameAttr">
            <summary>Constructs a new SpecialNameAttr.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Attributes.SpecialNameAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Attributes.StaticAttr">
            <summary>Represents the 'static' attribute.</summary>
            <remarks>May only be applied to methods. Renders them static as in not requiring an instance of the declaring class (no this pointer will be available in them). </remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Attributes.StaticAttr">
            <summary>Cosntructs a new StaticAttr.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Attributes.StaticAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Attributes.VirtualAttr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Attributes.VirtualAttr">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Attributes.VirtualAttr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Chars.Ampersand">
            <summary>Represents an ampersand '&amp;' character.</summary>
            <remarks>This is required by the Parser to detect byref type tokens.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Chars.Ampersand">
            <summary>Constructs a new Ampersand.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Chars.Ampersand.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Chars.Character">
            <summary>Represents a character.</summary>
            <remarks>All characters in the AST must inherit from this class.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Chars.Character">
            <summary>Cosntructs a new Character.</summary>
            <remarks>You might prefer using one of the subclasses of this class. This class only is useful for detecting characters in general.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Chars.Character(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Chars.Colon">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Chars.Colon">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Chars.Colon.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Chars.Comma">
            <summary>Represents a Comma ',' character.</summary>
            <remarks>This is useful for the Parser when parsing method calls and declarations as well as other stuff.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Chars.Comma">
            <summary>Constructs a new Comma.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Chars.Comma.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Chars.Cr">
            <summary>Represents a carriage return character.</summary>
            <remarks>This class is not actually used in the Lexer.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Chars.Cr">
            <summary>Constructs a new Cr.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Chars.Cr.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Chars.CrLf">
            <summary>Represents a carriage return line feed character.</summary>
            <remarks>This class is not really used by the Lexer.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Chars.CrLf">
            <summary>Constructs a new CrLf.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Chars.CrLf.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Chars.DollarSign">
            <summary>Represents a dollar sign '$' character.</summary>
            <remarks>This is required by the Parser while detecting the dylan.NET conversion syntax.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Chars.DollarSign">
            <summary>Constructs a new DollarSign.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Chars.DollarSign.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Chars.LAParen">
            <summary>Represents a left angle bracket '&lt;' character.</summary>
            <remarks>To be used by the Parser while detecting generic type tokens.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Chars.LAParen">
            <summary>Constructs a new LAParen.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Chars.LAParen.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Chars.LCParen">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Chars.LCParen">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Chars.LCParen.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Chars.Lf">
            <summary>Represents a line feed character.</summary>
            <remarks>This class is not actually used by the Lexer.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Chars.Lf">
            <summary>Constructs a new Lf.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Chars.Lf.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Chars.LParen">
            <summary>Represents a left paranthesis '(' character.</summary>
            <remarks>This is used in the Parser to detect method calls and declarations as well as in the CodeGen for expressions.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Chars.LParen">
            <summary>Constructs a new LParen.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Chars.LParen.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Chars.LRSParen">
            <summary>Represents a left square bracket followed by a right square bracket '[]'.</summary>
            <remarks>This composit character is used in defining array type tokens.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Chars.LRSParen">
            <summary>Constructs a new LRSParen.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Chars.LRSParen.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Chars.LSParen">
            <summary>Represents a left square bracket '[' character.</summary>
            <remarks>This is used by the Parser to detect array acesses.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Chars.LSParen">
            <summary>Constructs a new LSParen.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Chars.LSParen.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Chars.Pipe">
            <summary>Represents a pipe '|' character.</summary>
            <remarks>This is used in byref identifier prefixes.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Chars.Pipe">
            <summary>Constructs a new Pipe.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Chars.Pipe.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Chars.QuestionMark">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Chars.QuestionMark">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Chars.QuestionMark.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Chars.RAParen">
            <summary>Represents a right angle bracket '&gt;' character.</summary>
            <remarks>To be used by the Parser in parsing generic type tokens.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Chars.RAParen">
            <summary>Constructs a new RAParen.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Chars.RAParen.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Chars.RCParen">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Chars.RCParen">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Chars.RCParen.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Chars.RParen">
            <summary>Represents a right paranthesis ')' character.</summary>
            <remarks>This is used by the parser to detect method calls and declaration and in CodeGen for expressions.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Chars.RParen">
            <summary>Constructs a new RParen.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Chars.RParen.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Chars.RSParen">
            <summary>Represents a right square bracket ']' character.</summary>
            <remarks>This is used by the Parser to detect array accesses.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Chars.RSParen">
            <summary>Constructs a new RSParen.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Chars.RSParen.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Literals.BooleanLiteral">
            <summary>Represents a boolean literal.</summary>
            <remarks>It is usually one of the literals 'true' or 'false'.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.BooleanLiteral">
            <summary>Constructs a new BooleanLiteral.</summary>
            <remarks>Also sets the LitTyp field to an instance of BooleanTok.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.BooleanLiteral(System.Boolean)">
            <param name="value">The boolean value to assign to the BooleanLiteral.</param>
            <summary>Constructs a new BooleanLiteral with the given value.</summary>
            <remarks>Sets the Value and LitTyp fields accodingly.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.BooleanLiteral(System.String)">
            <param name="value">The value to give the 'Value' field which is useless in this case.</param>
            <summary>Cosntructs a new BooleanLiteral.</summary>
            <remarks>Also sets the LitTyp field to an instance of BooleanTok.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Literals.BooleanLiteral.BoolVal">
            <summary>Holds the value of the literal.</summary>
            <remarks>This value is loaded as the number 1 or 0 for true or false repectively.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.Literals.BooleanLiteral.DoNeg">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Literals.BooleanLiteral.ToString">
            <summary>Returns the dylan.NET syntax that is parsable into this literal.</summary>
            <returns>The dylan.NET syntactic equivalent to this literal ie. "true" or "false".</returns>
            <remarks />
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Literals.ByteLiteral">
            <summary>Represents a byte (uint8) literal.</summary>
            <remarks>Such literals have a 'ub' suffix.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.ByteLiteral">
            <summary>Constructs a ByteLiteral.</summary>
            <remarks />
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.ByteLiteral(System.Byte)">
            <param name="value">The byte value to assign to the ByteLiteral.</param>
            <summary>Constructs a new ByteLiteral with the given value.</summary>
            <remarks>Sets the Value and LitTyp fields accodingly.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.ByteLiteral(System.String)">
            <param name="value" />
            <summary>Constructs a new ByteLiteral.</summary>
            <remarks />
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.Literals.ByteLiteral.DoNot">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Literals.ByteLiteral.NumVal">
            <summary>The numeric value of the literal.</summary>
            <remarks>It is loaded using the ldc.i4 set of opcodes followed by a conv.u1.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Literals.ByteLiteral.ToString">
            <summary>Returns the dylan.NET syntax that is parsable into this literal.</summary>
            <returns>The dylan.NET syntactic equivalent to this literal ie. NumVal + "ub".</returns>
            <remarks />
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Literals.CharLiteral">
            <summary>Represents a character literal.</summary>
            <remarks>It is usually one of the Unicode characters.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.CharLiteral">
            <summary>Constructs a new CharLiteral.</summary>
            <remarks />
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.CharLiteral(System.Char)">
            <param name="value">The char value to assign to the CharLiteral.</param>
            <summary>Constructs a new CharLiteral with the given value.</summary>
            <remarks>Sets the Value and LitTyp fields accodingly.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.CharLiteral(System.String)">
            <param name="value" />
            <summary>Constructs a new CharLiteral.</summary>
            <remarks />
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Literals.CharLiteral.CharVal">
            <summary>The value of the character literal.</summary>
            <remarks>This value is loaded by the ldc.i4 set of opcodes with the number corresponding to the character as its operand.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Literals.CharLiteral.ToString">
            <summary>Returns the dylan.NET syntax that is parsable into this literal.</summary>
            <returns>The dylan.NET syntactic equivalent to this literal ie. "'" + CharVal + "'".</returns>
            <remarks />
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Literals.ConstLiteral">
            <summary>Represents a Literal/Constant field's value.</summary>
            <remarks>The values of the fields in instances of this class are found using reflection.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.ConstLiteral">
            <summary>Constructs a new ConstLiteral.</summary>
            <remarks />
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.ConstLiteral(System.Object)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Literals.ConstLiteral.ConstVal">
            <summary>The value of the Literal/Constant field as given by the reflection infrastructure.</summary>
            <remarks>This value is post-processed via helper methods in the CodeGen library which ready it for loading.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Literals.ConstLiteral.ExtTyp">
            <summary>The type of the constant as it should appear in method parameter lists etc.</summary>
            <remarks>In the case of enum entries this is the enum's name. In cases of standalone constant fields this is the same as IntTyp.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Literals.ConstLiteral.IntTyp">
            <summary>The actual type of the value which is used for the transformation of this class instance into a suitable literal loadable by the EmitLiteral method in the Helpers class of CodeGen.</summary>
            <remarks>In the case of an enum member this is the enum's underlying type otherwise it is the reported field constant type.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Literals.DecimalLiteral">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.DecimalLiteral">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.DecimalLiteral(System.Decimal)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.DecimalLiteral(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.Literals.DecimalLiteral.DoNeg">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Literals.DecimalLiteral.NumVal">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Literals.DecimalLiteral.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Literals.DoubleLiteral">
            <summary>Represents a double (float64) literal.</summary>
            <remarks>Such literals may or may not have a 'd' suffix.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.DoubleLiteral">
            <summary>Constructs a new DoubleLiteral.</summary>
            <remarks />
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.DoubleLiteral(System.Double)">
            <param name="value">The double value to assign to the DoubleLiteral.</param>
            <summary>Constructs a new DoubleLiteral with the given value.</summary>
            <remarks>Sets the Value and LitTyp fields accodingly.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.DoubleLiteral(System.String)">
            <param name="value" />
            <summary>Constructs a new DoubleLiteral.</summary>
            <remarks />
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.Literals.DoubleLiteral.DoNeg">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Literals.DoubleLiteral.NumVal">
            <summary>The numeric value of the literal.</summary>
            <remarks>It is loaded using the ldc.r8 opcode.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Literals.DoubleLiteral.ToString">
            <summary>Returns the dylan.NET syntax that is parsable into this literal.</summary>
            <returns>The dylan.NET syntactic equivalent to this literal ie. NumVal + "d".</returns>
            <remarks />
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Literals.FloatLiteral">
            <summary>Represents a single (float32) literal.</summary>
            <remarks>Such literals have an 'f' suffix.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.FloatLiteral">
            <summary>Constructs a new FloatLiteral.</summary>
            <remarks />
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.FloatLiteral(System.Single)">
            <param name="value">The single value to assign to the FloatLiteral.</param>
            <summary>Constructs a new FloatLiteral with the given value.</summary>
            <remarks>Sets the Value and LitTyp fields accodingly.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.FloatLiteral(System.String)">
            <param name="value" />
            <summary>Constructs a new FloatLiteral.</summary>
            <remarks />
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.Literals.FloatLiteral.DoNeg">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Literals.FloatLiteral.NumVal">
            <summary>The numeric value of the literal.</summary>
            <remarks>It is loaded using the ldc.r4 opcode.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Literals.FloatLiteral.ToString">
            <summary>Returns the dylan.NET syntax that is parsable into this literal.</summary>
            <returns>The dylan.NET syntactic equivalent to this literal ie. NumVal + "f".</returns>
            <remarks />
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Literals.IntLiteral">
            <summary>Represents an integer (int32) literal.</summary>
            <remarks>Such literals may or may not have an 'i' suffix.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.IntLiteral">
            <summary>Constructs a new IntLiteral.</summary>
            <remarks />
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.IntLiteral(System.Int32)">
            <param name="value">The integer value to assign to the IntLiteral.</param>
            <summary>Constructs a new IntLiteral with the given value.</summary>
            <remarks>Sets the Value and LitTyp fields accodingly.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.IntLiteral(System.String)">
            <param name="value" />
            <summary>Constructs a new IntLiteral.</summary>
            <remarks />
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.Literals.IntLiteral.DoNeg">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.Literals.IntLiteral.DoNot">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Literals.IntLiteral.NumVal">
            <summary>The numerical value of this literal.</summary>
            <remarks>It is loaded using just the ldc.i4 set of opcodes.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Literals.IntLiteral.ToString">
            <summary>Returns the dylan.NET syntax that is parsable into this literal.</summary>
            <returns>The dylan.NET syntactic equivalent to this literal ie. NumVal + "i".</returns>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Literals.IntLiteral.ToStringNoI">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Literals.IntPtrLiteral">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.IntPtrLiteral">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.IntPtrLiteral(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.Literals.IntPtrLiteral.DoNeg">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.Literals.IntPtrLiteral.DoNot">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Literals.IntPtrLiteral.NumVal">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Literals.IntPtrLiteral.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Literals.Literal">
            <summary>Represents a dylan.NET literal.</summary>
            <remarks>All literals are to inherit this class to make sure they are properly processed.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.Literal">
            <summary>Constructs a new Literal.</summary>
            <remarks />
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.Literal(System.String)">
            <param name="value">The string to assign to the Value field.</param>
            <summary>Constructs a new Literal.</summary>
            <remarks />
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Literals.Literal._Conv">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Literals.Literal._OrdOp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Literals.Literal._TTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.Literals.Literal.Conv">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Literals.Literal.LitTyp">
            <summary>Holds a TypeTok indicating the type of literal represented. The RefTyp field of the TypeTok is useful during code generation.</summary>
            <remarks>This vaue is automatically assigned by the constructor of inheriting classes. Please do not change it.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.Literals.Literal.OrdOp">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.Literals.Literal.TTok">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Literals.LongLiteral">
            <summary>Represents a long (int64) literal.</summary>
            <remarks>Such literals have an 'l' suffix.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.LongLiteral">
            <summary>Constructs a new LongLiteral.</summary>
            <remarks />
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.LongLiteral(System.Int64)">
            <param name="value">The long value to assign to the LongLiteral.</param>
            <summary>Constructs a new LongLiteral with the given value.</summary>
            <remarks>Sets the Value and LitTyp fields accodingly.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.LongLiteral(System.String)">
            <param name="value" />
            <summary>Constructs a new LongLiteral.</summary>
            <remarks />
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.Literals.LongLiteral.DoNeg">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.Literals.LongLiteral.DoNot">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Literals.LongLiteral.NumVal">
            <summary>The numeric value of the literal.</summary>
            <remarks>It is loaded using the ldc.i4 set of opcodes folowed by a conv.i8 or by using ldc.i8 directly.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Literals.LongLiteral.ToString">
            <summary>Returns the dylan.NET syntax that is parsable into this literal.</summary>
            <returns>The dylan.NET syntactic equivalent to this literal ie. NumVal + "l".</returns>
            <remarks />
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Literals.NullLiteral">
            <summary>Represents the 'null' keyword in the form of a literal of type object.</summary>
            <remarks>This literal always evaluates to a null reference.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.NullLiteral">
            <summary>Constructs a new NullLiteral.</summary>
            <remarks>Also sets LitTyp to an ObjectTok instance.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.NullLiteral(System.String)">
            <param name="value">The value to give to the 'Value' field which in this case is not useful.</param>
            <summary>Constructs a new NullLiteral.</summary>
            <remarks>Also sets LitTyp to an ObjectTok instance.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Literals.NullLiteral.NullVal">
            <summary>Holds a null reference.</summary>
            <remarks>The code generator will not use this null reference. Instead it will load one using the 'ldnull' opcode.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Literals.NullLiteral.ToString">
            <summary>Returns the dylan.NET syntax that is parsable into this literal.</summary>
            <returns>The dylan.NET syntactic equivalent to this literal ie. "null".</returns>
            <remarks />
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral">
            <summary>Represents a dylan.NET number literal.</summary>
            <remarks>All numeric iteral classes should inherit from this class.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral">
            <summary>Constructs a new NumberLiteral.</summary>
            <remarks />
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral(System.String)">
            <param name="value">This parameter is of no use in this case.</param>
            <summary>Constructs a new NumberLiteral.</summary>
            <remarks />
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Literals.SByteLiteral">
            <summary>Represents an sbyte (int8) literal.</summary>
            <remarks>Such literals have a 'b' suffix.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.SByteLiteral">
            <summary>Constructs an SByteLiteral.</summary>
            <remarks />
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.SByteLiteral(System.SByte)">
            <param name="value">The sbyte value to assign to the SByteLiteral.</param>
            <summary>Constructs a new SByteLiteral with the given value.</summary>
            <remarks>Sets the Value and LitTyp fields accodingly.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.SByteLiteral(System.String)">
            <param name="value" />
            <summary>Constructs a new SByteLiteral.</summary>
            <remarks />
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.Literals.SByteLiteral.DoNeg">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.Literals.SByteLiteral.DoNot">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Literals.SByteLiteral.NumVal">
            <summary>The numeric value of the literal.</summary>
            <remarks>It is loaded using the ldc.i4 set of opcodes followed by a conv.i1.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Literals.SByteLiteral.ToString">
            <summary>Returns the dylan.NET syntax that is parsable into this literal.</summary>
            <returns>The dylan.NET syntactic equivalent to this literal ie. NumVal + "b".</returns>
            <remarks />
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Literals.ShortLiteral">
            <summary>Represents a short (int16) literal.</summary>
            <remarks>Such literals have an 's' suffix.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.ShortLiteral">
            <summary>Constructs a new ShortLiteral.</summary>
            <remarks />
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.ShortLiteral(System.Int16)">
            <param name="value">The short value to assign to the ShortLiteral.</param>
            <summary>Constructs a new ShortLiteral with the given value.</summary>
            <remarks>Sets the Value and LitTyp fields accodingly.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.ShortLiteral(System.String)">
            <param name="value" />
            <summary>Constructs a new ShortLiteral.</summary>
            <remarks />
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.Literals.ShortLiteral.DoNeg">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.Literals.ShortLiteral.DoNot">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Literals.ShortLiteral.NumVal">
            <summary>The numeric value of this literal.</summary>
            <remarks>It is loaded by the ldc.i4 set of opcodes followed by a conv.i2.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.Literals.ShortLiteral.OrdOp">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Literals.ShortLiteral.ToString">
            <summary>Returns the dylan.NET syntax that is parsable into this literal.</summary>
            <returns>The dylan.NET syntactic equivalent to this literal ie. NumVal + "s".</returns>
            <remarks />
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Literals.StringLiteral">
            <summary>Represents a string literal.</summary>
            <remarks>All strings specified in dylan.NET source code are converted to instances of this class.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.StringLiteral">
            <summary>Constructs a new StringLiteral.</summary>
            <remarks />
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.StringLiteral(System.String)">
            <param name="value">The value to give to the literal.</param>
            <summary>Constructs a new StringLiteral.</summary>
            <remarks />
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Literals.StringLiteral.MemberAccessFlg">
            <summary>This flag when set indicates that chaining must occur after this literal is loaded.</summary>
            <remarks>The MemberToAccess fied must be given value if this is set.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Literals.StringLiteral.MemberToAccess">
            <summary>The token representing the method/field to be loaded using the instance of the loaded literal.</summary>
            <remarks>For this field to have significance the MemberAccessFlg must be set to true.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Literals.StringLiteral.ToString">
            <summary>Returns the dylan.NET syntax that is parsable into this literal.</summary>
            <returns>The dylan.NET syntactic equivalent to this literal ie. "\"" + Value + "\"".</returns>
            <remarks />
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Literals.UIntLiteral">
            <summary>Represents an uinteger (uint32) literal.</summary>
            <remarks>Such literals must have a 'ui' suffix.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.UIntLiteral">
            <summary>Constructs a new UIntLiteral.</summary>
            <remarks />
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.UIntLiteral(System.String)">
            <param name="value" />
            <summary>Constructs a new UIntLiteral.</summary>
            <remarks />
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.UIntLiteral(System.UInt32)">
            <param name="value">The uinteger value to assign to the UIntLiteral.</param>
            <summary>Constructs a new UIntLiteral with the given value.</summary>
            <remarks>Sets the Value and LitTyp fields accodingly.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.Literals.UIntLiteral.DoNot">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Literals.UIntLiteral.NumVal">
            <summary>The numerical value of this literal.</summary>
            <remarks>It is loaded using the ldc.i4 set of opcodes or the 'ldc.i8' opcode followed by a conv.u4.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Literals.UIntLiteral.ToString">
            <summary>Returns the dylan.NET syntax that is parsable into this literal.</summary>
            <returns>The dylan.NET syntactic equivalent to this literal ie. NumVal + "ui".</returns>
            <remarks />
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Literals.ULongLiteral">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.ULongLiteral">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.ULongLiteral(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.ULongLiteral(System.UInt64)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.Literals.ULongLiteral.DoNot">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Literals.ULongLiteral.NumVal">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Literals.ULongLiteral.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Literals.UShortLiteral">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.UShortLiteral">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.UShortLiteral(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Literals.UShortLiteral(System.UInt16)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="P:dylan.NET.Tokenizer.AST.Tokens.Literals.UShortLiteral.DoNot">
            <summary>To be added.</summary>
            <value>To be added.</value>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Literals.UShortLiteral.NumVal">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Literals.UShortLiteral.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.AddOp">
            <summary>Represents an addition '+' operator</summary>
            <remarks>Adds its operands together.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.AddOp">
            <summary>Constructs an AddOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Ops.AddOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.AndAlsoOp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.AndAlsoOp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Ops.AndAlsoOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.AndOp">
            <summary>Represents a bitwise and 'and' operator.</summary>
            <remarks>Does a bitwise and of its operands.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.AndOp">
            <summary>Constructs an new AndOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Ops.AndOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp">
            <summary>Represents an arithmetic operator.</summary>
            <remarks>All arithmetic operators are required to inherit from this class.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.AritOp">
            <summary>Constructs a new AritOp.</summary>
            <remarks />
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.AsOp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.AsOp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Ops.AsOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.AssignOp">
            <summary>Represents an assignment '=' operator.</summary>
            <remarks>It is only allowed once in a statement and signals that the current Stmt is an AssignStmt.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.AssignOp">
            <summary>Constructs a new AssignOp.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Ops.AssignOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.AssignOp2">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.AssignOp2">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Ops.AssignOp2.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.CoalesceOp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.CoalesceOp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Ops.CoalesceOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp">
            <summary>Represents a conditional operator.</summary>
            <remarks>All conditional operators are required to inherit from this class.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.ConditionalOp">
            <summary>Constructs a new ConditionalOp.</summary>
            <remarks />
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.DecOp">
            <summary>Represents a decrement '--' operator.</summary>
            <remarks>Decrements its operator. Instances of DecOp are shortlived since they are translated to a flag inside the operand.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.DecOp">
            <summary>Constructs a new DecOp.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Ops.DecOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.DivOp">
            <summary>Represents a division '/' operator.</summary>
            <remarks>Divides LChild by RChild.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.DivOp">
            <summary>Constructs an new DivOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Ops.DivOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.EqOp">
            <summary>Represents an equality '==' operator.</summary>
            <remarks>Checks if its operands are equal in value.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.EqOp">
            <summary>Constructs a new EqOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Ops.EqOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.GeOp">
            <summary>Represents a greater or equal '&gt;=' operator.</summary>
            <remarks>Checks if RChild is greather than or equal than LChild.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.GeOp">
            <summary>Constructs a new GeOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Ops.GeOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.GtOp">
            <summary>Represents a greater than '&gt;' operator.</summary>
            <remarks>Checks if LChild is greaterr than RChild.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.GtOp">
            <summary>Constructs a new GtOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Ops.GtOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.IncOp">
            <summary>Represents an increment '++' operator.</summary>
            <remarks>Increments its operand. Instances of IncOp are shortlived since they are translated into a flag inside the operand.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.IncOp">
            <summary>Constructs a new IncOp.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Ops.IncOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.IsNotOp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.IsNotOp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Ops.IsNotOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.IsOp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.IsOp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Ops.IsOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.LeOp">
            <summary>Represents a less than or equal '&lt;=' operator.</summary>
            <remarks>Checks if LChild is less than or equal to RChild.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.LeOp">
            <summary>Constructs a new LeOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Ops.LeOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.LikeOp">
            <summary>Represents a Regex Matching 'like' operator.</summary>
            <remarks>Checks if the string LChild conforms to the pattern string RCHild. The library System.dll is required for its Regex components. Regex is being used instead of the VB Like operator as of 11.2.7.6.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.LikeOp">
            <summary>Constructs a new LikeOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Ops.LikeOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp">
            <summary>Represents a logical operator.</summary>
            <remarks>All logical operators must be derived from this class.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.LogicalOp">
            <summary>Constructs a new LogicalOp.</summary>
            <remarks />
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.LtOp">
            <summary>Represents a less than '&lt;' operator.</summary>
            <remarks>Checks if LChild is less than RChild.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.LtOp">
            <summary>Cosntructs a new LtOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Ops.LtOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.ModOp">
            <summary>Represents a modulo '%' operator.</summary>
            <remarks>Calculates the remainder left when dividing LChild by RChild.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.ModOp">
            <summary>Constructs a new ModOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Ops.ModOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.MulOp">
            <summary>Represents a multiplication '*' operator.</summary>
            <remarks>Multiplies its operands together.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.MulOp">
            <summary>Constructs a new MulOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Ops.MulOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.NandOp">
            <summary>Represents a bitwise nand 'nand' operator.</summary>
            <remarks>Does a bitwise and of its operators then negates the result.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.NandOp">
            <summary>Constructs a new NandOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Ops.NandOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.NegOp">
            <summary>Represents a two's complement negation '!' operator.</summary>
            <remarks>Negates its operand. For signed number operands only. Equivalent to operand * -1. Instances of this class are shortlived since they are translated to a flag inside the operand.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.NegOp">
            <summary>Constructs a new NegOp.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Ops.NegOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.NeqOp">
            <summary>Represents a not equal to '!=' operator.</summary>
            <remarks>Checks if the operators are non-equal in value.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.NeqOp">
            <summary>Constructs a new NeqOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Ops.NeqOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.NLikeOp">
            <summary>Represents a negated Regex Matching '!like' operator.</summary>
            <remarks>Checks if the string LChild is non-conformant to the pattern string RChild. The ibrary System.dll is required for its Regex components. REgex has been used instead of the VB like operator since 11.2.7.6.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.NLikeOp">
            <summary>Cosntructs a new NLikeOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Ops.NLikeOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.NorOp">
            <summary>Represents a bitwise nor 'nor' operator.</summary>
            <remarks>Does a bitwise or of its operand and negates the result.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.NorOp">
            <summary>Constructs a new NorOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Ops.NorOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.NotOp">
            <summary>Represents a one's complement not '~' operator.</summary>
            <remarks>Does a one's complement bitwise not of its operand. Use only on boolean values. Instances of this class are shortlived since they are translated to a flag inside the operand.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.NotOp">
            <summary>Constructs a new NotOp.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Ops.NotOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.Op">
            <summary>Represents a dylan.NET operator.</summary>
            <remarks>All operators must in some way inherit from this class.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.Op">
            <summary>Constructs an Op.</summary>
            <remarks>Normally one would not want to construct an Op but one of its subclasses. This class is only useful for Op detection in general.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Ops.Op.LChild">
            <summary>In an AST made by the codegen module this holds the Left Child this Op operates on.</summary>
            <remarks>This field is set automatically by the ConvToAST method of codegen.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Ops.Op.PrecNo">
            <summary>This is the order of precedence number used during RPN expression making.</summary>
            <remarks>Each class sets this field as it gets initialised. Do not mess with this or else RPN components may work incorrectly. The numbers are assigned according to the C language order of precedence.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.Ops.Op.RChild">
            <summary>In an AST made by the codegen module this holds the Right Child this Op operates on.</summary>
            <remarks>This field is set automatically by the ConvToAST method of codegen.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.OrElseOp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.OrElseOp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Ops.OrElseOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.OrOp">
            <summary>Represents a bitwise or 'or' operator.</summary>
            <remarks>Does a bitwise or of its operands.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.OrOp">
            <summary>Cosnstructs a new OrOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Ops.OrOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.ShlOp">
            <summary>Represents a left-shift '&lt;&lt;' operator.</summary>
            <remarks>Shifts the bits in LChild by RChild bits to the left.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.ShlOp">
            <summary>Constructs a new ShlOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Ops.ShlOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.ShrOp">
            <summary>Represents a right-shift '&gt;&gt;' operator.</summary>
            <remarks>Shifts the bits in LChild by RChild bits to the right.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.ShrOp">
            <summary>Constructs an ShrOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Ops.ShrOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.StrictEqOp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.StrictEqOp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Ops.StrictEqOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.StrictNeqOp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.StrictNeqOp">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Ops.StrictNeqOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.SubOp">
            <summary>Represents a subtraction '-' operator.</summary>
            <remarks>Substracts operand RChild from operand LChild.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.SubOp">
            <summary>Constructs a new SubOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Ops.SubOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.XnorOp">
            <summary>Represents a bitwise xnor 'xnor' operator.</summary>
            <remarks>Does a bitwise exclusive or on the operands then negates the result.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.XnorOp">
            <summary>Constructs a new XnorOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Ops.XnorOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.Ops.XorOp">
            <summary>Represents a bitwise exclusive or 'xor' operator.</summary>
            <remarks>Does a bitwise xor on its operands.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.Ops.XorOp">
            <summary>Cosntructs a new XorOp.</summary>
            <remarks>Also sets PrecNo accordingly.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.Ops.XorOp.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.TypeToks.BooleanTok">
            <summary>Represents a type token that is usable to assign a type of 'boolean' to something.</summary>
            <remarks>This resolves to a type of 'System.Boolean'.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.BooleanTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.BooleanTok(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.TypeToks.BooleanTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.TypeToks.ByteTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.ByteTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.ByteTok(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.TypeToks.ByteTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.TypeToks.CharTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.CharTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.CharTok(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.TypeToks.CharTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.TypeToks.DecimalTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.DecimalTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.DecimalTok(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.TypeToks.DecimalTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.TypeToks.DoubleTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.DoubleTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.DoubleTok(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.TypeToks.DoubleTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.TypeToks.GenericTypeTok">
            <summary>Represents a generic type token that is usable to assign a type to something.</summary>
            <remarks>Used to represent generic types and the parameters to be substitited into their definition.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.GenericTypeTok">
            <summary>Constructs a new GenericTypeTok.</summary>
            <remarks>If you want to pass the type name during construction use the other constructor.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.GenericTypeTok(System.String)">
            <param name="value">A valid type name that is reachable given the defined lists of assemblies and namespaces to import.</param>
            <summary>Constructs a new GenericTypeTok assigning the type name's value as specified in the value parameter.</summary>
            <remarks>If you wish to set the type name later use the other constructor and set the 'Value' field acccordingly.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.GenericTypeTok(System.String,System.Collections.Generic.IEnumerable{dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok})">
            <param name="value">To be added.</param>
            <param name="params">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.TypeToks.GenericTypeTok.AddParam(dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok)">
            <param name="param">A type token representing a generic type parameter.</param>
            <summary>Adds a generic type parameter to the list of generic type parameters ie. 'Params'.</summary>
            <remarks />
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.TypeToks.GenericTypeTok.Clone">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.TypeToks.GenericTypeTok.CloneTT">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.TypeToks.GenericTypeTok.Params">
            <summary>Holds the type tokens for the type parameters that have to be substituted into this type.</summary>
            <remarks>The parameters may be generic or non-generic.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.TypeToks.GenericTypeTok.ToString">
            <summary>Outputs the GenericTypeTok in terms of dylan.NET syntax.</summary>
            <returns>The dylan.NET syntax that represents this GenericTypeTok.</returns>
            <remarks>This method is overrides the TypeTok implementation of ToString() since that implementation does not capture generic type parameters.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.TypeToks.IntegerTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.IntegerTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.IntegerTok(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.TypeToks.IntegerTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.TypeToks.IntPtrTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.IntPtrTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.IntPtrTok(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.TypeToks.IntPtrTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.TypeToks.LongTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.LongTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.LongTok(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.TypeToks.LongTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.TypeToks.ObjectTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.ObjectTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.ObjectTok(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.TypeToks.ObjectTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.TypeToks.SByteTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.SByteTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.SByteTok(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.TypeToks.SByteTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.TypeToks.ShortTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.ShortTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.ShortTok(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.TypeToks.ShortTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.TypeToks.SingleTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.SingleTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.SingleTok(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.TypeToks.SingleTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.TypeToks.SpecialTypeTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.SpecialTypeTok(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.TypeToks.StringTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.StringTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.StringTok(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.TypeToks.StringTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok">
            <summary>Represents a type token that is usable to assign a type to something.</summary>
            <remarks>All type tokens should directly or indirectly inherit from this class.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok">
            <summary>Constructs a new TypeToken.</summary>
            <remarks>If you want to pass the type name during construction use the other constructor.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok(IKVM.Reflection.Type)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok(System.String)">
            <param name="value">A valid type name that is reachable given the defined lists of assemblies and namespaces to import.</param>
            <summary>Constructs a new TypeTok assigning the type name's value as specified in the value parameter.</summary>
            <remarks>If you wish to set the type name later use the other constructor and set the 'Value' field acccordingly.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok.Clone">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok.CloneTT">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok.IsArray">
            <summary>If set to true indicates that an array type is desired.</summary>
            <remarks>Usually this field gets set true by the parser after finding '[]' after the type name.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok.IsByRef">
            <summary>If set to true indicates that a byref type is desired.</summary>
            <remarks>Normally this field gets set true by the parser after finding '&amp;' after the type name.</remarks>
        </member>
        <member name="F:dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok.RefTyp">
            <summary>Holds the System.Type instance representing the required type. This is set automatically if the standard type tokens are used.</summary>
            <remarks>Make sure not to set this manually. Let the constructors of the standard type tokens or the parser/codegen infer its value instead.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok.ToString">
            <summary>Outputs the TypeTok in terms of dylan.NET syntax.</summary>
            <returns>The dylan.NET syntax that represents this TypeTok.</returns>
            <remarks>This method is overridden in GenericTypeTok as this implementation does not capture generic type parameters.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.TypeToks.UIntegerTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.UIntegerTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.UIntegerTok(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.TypeToks.UIntegerTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.TypeToks.ULongTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.ULongTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.ULongTok(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.TypeToks.ULongTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.TypeToks.UShortTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.UShortTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.UShortTok(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.TypeToks.UShortTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
        <member name="T:dylan.NET.Tokenizer.AST.Tokens.TypeToks.VoidTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.VoidTok">
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="C:dylan.NET.Tokenizer.AST.Tokens.TypeToks.VoidTok(System.String)">
            <param name="value">To be added.</param>
            <summary>To be added.</summary>
            <remarks>To be added.</remarks>
        </member>
        <member name="M:dylan.NET.Tokenizer.AST.Tokens.TypeToks.VoidTok.ToString">
            <summary>To be added.</summary>
            <returns>To be added.</returns>
            <remarks>To be added.</remarks>
        </member>
    </members>
</doc>
