<Type Name="Literal" FullName="dylan.NET.Tokenizer.AST.Tokens.Literals.Literal">
  <TypeSignature Language="C#" Value="public class Literal : dylan.NET.Tokenizer.AST.Tokens.Token" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Literal extends dylan.NET.Tokenizer.AST.Tokens.Token" />
  <AssemblyInfo>
    <AssemblyName>tokenizer.AST</AssemblyName>
    <AssemblyVersion>11.2.7.2</AssemblyVersion>
    <AssemblyVersion>11.2.7.3</AssemblyVersion>
    <AssemblyVersion>11.2.7.4</AssemblyVersion>
    <AssemblyVersion>11.2.7.5</AssemblyVersion>
    <AssemblyVersion>11.2.7.6</AssemblyVersion>
    <AssemblyVersion>11.2.7.7</AssemblyVersion>
    <AssemblyVersion>11.2.7.8</AssemblyVersion>
    <AssemblyVersion>11.2.7.9</AssemblyVersion>
    <AssemblyVersion>11.2.8.1</AssemblyVersion>
    <AssemblyVersion>11.2.8.2</AssemblyVersion>
    <AssemblyVersion>11.2.8.3</AssemblyVersion>
    <AssemblyVersion>11.2.8.4</AssemblyVersion>
    <AssemblyVersion>11.2.8.5</AssemblyVersion>
    <AssemblyVersion>11.2.8.6</AssemblyVersion>
    <AssemblyVersion>11.2.8.7</AssemblyVersion>
    <AssemblyVersion>11.2.8.9</AssemblyVersion>
    <AssemblyVersion>11.2.9.1</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>dylan.NET.Tokenizer.AST.Tokens.Token</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents a dylan.NET literal.</summary>
    <remarks>All literals are to inherit this class to make sure they are properly processed.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Literal ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.2.7.2</AssemblyVersion>
        <AssemblyVersion>11.2.7.3</AssemblyVersion>
        <AssemblyVersion>11.2.7.4</AssemblyVersion>
        <AssemblyVersion>11.2.7.5</AssemblyVersion>
        <AssemblyVersion>11.2.7.6</AssemblyVersion>
        <AssemblyVersion>11.2.7.7</AssemblyVersion>
        <AssemblyVersion>11.2.7.8</AssemblyVersion>
        <AssemblyVersion>11.2.7.9</AssemblyVersion>
        <AssemblyVersion>11.2.8.1</AssemblyVersion>
        <AssemblyVersion>11.2.8.2</AssemblyVersion>
        <AssemblyVersion>11.2.8.3</AssemblyVersion>
        <AssemblyVersion>11.2.8.4</AssemblyVersion>
        <AssemblyVersion>11.2.8.5</AssemblyVersion>
        <AssemblyVersion>11.2.8.6</AssemblyVersion>
        <AssemblyVersion>11.2.8.7</AssemblyVersion>
        <AssemblyVersion>11.2.8.9</AssemblyVersion>
        <AssemblyVersion>11.2.9.1</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Constructs a new Literal.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Literal (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string value) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.2.7.2</AssemblyVersion>
        <AssemblyVersion>11.2.7.3</AssemblyVersion>
        <AssemblyVersion>11.2.7.4</AssemblyVersion>
        <AssemblyVersion>11.2.7.5</AssemblyVersion>
        <AssemblyVersion>11.2.7.6</AssemblyVersion>
        <AssemblyVersion>11.2.7.7</AssemblyVersion>
        <AssemblyVersion>11.2.7.8</AssemblyVersion>
        <AssemblyVersion>11.2.7.9</AssemblyVersion>
        <AssemblyVersion>11.2.8.1</AssemblyVersion>
        <AssemblyVersion>11.2.8.2</AssemblyVersion>
        <AssemblyVersion>11.2.8.3</AssemblyVersion>
        <AssemblyVersion>11.2.8.4</AssemblyVersion>
        <AssemblyVersion>11.2.8.5</AssemblyVersion>
        <AssemblyVersion>11.2.8.6</AssemblyVersion>
        <AssemblyVersion>11.2.8.7</AssemblyVersion>
        <AssemblyVersion>11.2.8.9</AssemblyVersion>
        <AssemblyVersion>11.2.9.1</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The string to assign to the Value field.</param>
        <summary>Constructs a new Literal.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv">
      <MemberSignature Language="C#" Value="public bool Conv;" />
      <MemberSignature Language="ILAsm" Value=".field public bool Conv" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.2.7.2</AssemblyVersion>
        <AssemblyVersion>11.2.7.3</AssemblyVersion>
        <AssemblyVersion>11.2.7.4</AssemblyVersion>
        <AssemblyVersion>11.2.7.5</AssemblyVersion>
        <AssemblyVersion>11.2.7.6</AssemblyVersion>
        <AssemblyVersion>11.2.7.7</AssemblyVersion>
        <AssemblyVersion>11.2.7.8</AssemblyVersion>
        <AssemblyVersion>11.2.7.9</AssemblyVersion>
        <AssemblyVersion>11.2.8.1</AssemblyVersion>
        <AssemblyVersion>11.2.8.2</AssemblyVersion>
        <AssemblyVersion>11.2.8.3</AssemblyVersion>
        <AssemblyVersion>11.2.8.4</AssemblyVersion>
        <AssemblyVersion>11.2.8.5</AssemblyVersion>
        <AssemblyVersion>11.2.8.6</AssemblyVersion>
        <AssemblyVersion>11.2.8.7</AssemblyVersion>
        <AssemblyVersion>11.2.8.9</AssemblyVersion>
        <AssemblyVersion>11.2.9.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Holds a flag indicating whether a conversion is to be made or not.</summary>
        <remarks>Set this if a conversion is required. Also give a value to TTok to indicate the destination type.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LitTyp">
      <MemberSignature Language="C#" Value="public dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok LitTyp;" />
      <MemberSignature Language="ILAsm" Value=".field public class dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok LitTyp" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.2.7.2</AssemblyVersion>
        <AssemblyVersion>11.2.7.3</AssemblyVersion>
        <AssemblyVersion>11.2.7.4</AssemblyVersion>
        <AssemblyVersion>11.2.7.5</AssemblyVersion>
        <AssemblyVersion>11.2.7.6</AssemblyVersion>
        <AssemblyVersion>11.2.7.7</AssemblyVersion>
        <AssemblyVersion>11.2.7.8</AssemblyVersion>
        <AssemblyVersion>11.2.7.9</AssemblyVersion>
        <AssemblyVersion>11.2.8.1</AssemblyVersion>
        <AssemblyVersion>11.2.8.2</AssemblyVersion>
        <AssemblyVersion>11.2.8.3</AssemblyVersion>
        <AssemblyVersion>11.2.8.4</AssemblyVersion>
        <AssemblyVersion>11.2.8.5</AssemblyVersion>
        <AssemblyVersion>11.2.8.6</AssemblyVersion>
        <AssemblyVersion>11.2.8.7</AssemblyVersion>
        <AssemblyVersion>11.2.8.9</AssemblyVersion>
        <AssemblyVersion>11.2.9.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Holds a TypeTok indicating the type of literal represented. The RefTyp field of the TypeTok is useful during code generation.</summary>
        <remarks>This vaue is automatically assigned by the constructor of inheriting classes. Please do not change it.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TTok">
      <MemberSignature Language="C#" Value="public dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok TTok;" />
      <MemberSignature Language="ILAsm" Value=".field public class dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok TTok" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.2.7.2</AssemblyVersion>
        <AssemblyVersion>11.2.7.3</AssemblyVersion>
        <AssemblyVersion>11.2.7.4</AssemblyVersion>
        <AssemblyVersion>11.2.7.5</AssemblyVersion>
        <AssemblyVersion>11.2.7.6</AssemblyVersion>
        <AssemblyVersion>11.2.7.7</AssemblyVersion>
        <AssemblyVersion>11.2.7.8</AssemblyVersion>
        <AssemblyVersion>11.2.7.9</AssemblyVersion>
        <AssemblyVersion>11.2.8.1</AssemblyVersion>
        <AssemblyVersion>11.2.8.2</AssemblyVersion>
        <AssemblyVersion>11.2.8.3</AssemblyVersion>
        <AssemblyVersion>11.2.8.4</AssemblyVersion>
        <AssemblyVersion>11.2.8.5</AssemblyVersion>
        <AssemblyVersion>11.2.8.6</AssemblyVersion>
        <AssemblyVersion>11.2.8.7</AssemblyVersion>
        <AssemblyVersion>11.2.8.9</AssemblyVersion>
        <AssemblyVersion>11.2.9.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Holds a TypeTok indicating the type to convert to.</summary>
        <remarks>For the value of this field to have effects the Conv field is to be set true.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
