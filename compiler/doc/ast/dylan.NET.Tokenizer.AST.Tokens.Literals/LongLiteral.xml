<Type Name="LongLiteral" FullName="dylan.NET.Tokenizer.AST.Tokens.Literals.LongLiteral">
  <TypeSignature Language="C#" Value="public class LongLiteral : dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral, dylan.NET.Tokenizer.AST.Interfaces.INegatable, dylan.NET.Tokenizer.AST.Interfaces.INotable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi LongLiteral extends dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral implements class dylan.NET.Tokenizer.AST.Interfaces.INegatable, class dylan.NET.Tokenizer.AST.Interfaces.INotable" />
  <AssemblyInfo>
    <AssemblyName>tokenizer.AST</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>dylan.NET.Tokenizer.AST.Tokens.Literals.NumberLiteral</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>dylan.NET.Tokenizer.AST.Interfaces.INegatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>dylan.NET.Tokenizer.AST.Interfaces.INotable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Represents a long (int64) literal.</summary>
    <remarks>Such literals have an 'l' suffix.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LongLiteral ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs>
        <summary>Constructs a new LongLiteral.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LongLiteral (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(int64 value) cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">The long value to assign to the LongLiteral.</param>
        <summary>Constructs a new LongLiteral with the given value.</summary>
        <remarks>Sets the Value and LitTyp fields accodingly.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LongLiteral (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string value) cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
        </param>
        <summary>Constructs a new LongLiteral.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoNeg">
      <MemberSignature Language="C#" Value="public virtual bool DoNeg { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DoNeg" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoNot">
      <MemberSignature Language="C#" Value="public virtual bool DoNot { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DoNot" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumVal">
      <MemberSignature Language="C#" Value="public long NumVal;" />
      <MemberSignature Language="ILAsm" Value=".field public int64 NumVal" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The numeric value of the literal.</summary>
        <remarks>It is loaded using the ldc.i4 set of opcodes folowed by a conv.i8 or by using ldc.i8 directly.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the dylan.NET syntax that is parsable into this literal.</summary>
        <returns>The dylan.NET syntactic equivalent to this literal ie. NumVal + "l".</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
