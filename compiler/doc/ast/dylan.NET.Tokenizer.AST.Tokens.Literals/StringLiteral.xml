<Type Name="StringLiteral" FullName="dylan.NET.Tokenizer.AST.Tokens.Literals.StringLiteral">
  <TypeSignature Language="C#" Value="public class StringLiteral : dylan.NET.Tokenizer.AST.Tokens.Literals.Literal" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi StringLiteral extends dylan.NET.Tokenizer.AST.Tokens.Literals.Literal" />
  <AssemblyInfo>
    <AssemblyName>tokenizer.AST</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>dylan.NET.Tokenizer.AST.Tokens.Literals.Literal</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents a string literal.</summary>
    <remarks>All strings specified in dylan.NET source code are converted to instances of this class.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StringLiteral ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs>
        <summary>Constructs a new StringLiteral.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StringLiteral (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string value) cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The value to give to the literal.</param>
        <summary>Constructs a new StringLiteral.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberAccessFlg">
      <MemberSignature Language="C#" Value="public bool MemberAccessFlg;" />
      <MemberSignature Language="ILAsm" Value=".field public bool MemberAccessFlg" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This flag when set indicates that chaining must occur after this literal is loaded.</summary>
        <remarks>The MemberToAccess fied must be given value if this is set.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberToAccess">
      <MemberSignature Language="C#" Value="public dylan.NET.Tokenizer.AST.Tokens.Token MemberToAccess;" />
      <MemberSignature Language="ILAsm" Value=".field public class dylan.NET.Tokenizer.AST.Tokens.Token MemberToAccess" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>dylan.NET.Tokenizer.AST.Tokens.Token</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The token representing the method/field to be loaded using the instance of the loaded literal.</summary>
        <remarks>For this field to have significance the MemberAccessFlg must be set to true.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrdOp">
      <MemberSignature Language="C#" Value="public string OrdOp;" />
      <MemberSignature Language="ILAsm" Value=".field public string OrdOp" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the order in which the unary operators get applied in.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the dylan.NET syntax that is parsable into this literal.</summary>
        <returns>The dylan.NET syntactic equivalent to this literal ie. "\"" + Value + "\"".</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
