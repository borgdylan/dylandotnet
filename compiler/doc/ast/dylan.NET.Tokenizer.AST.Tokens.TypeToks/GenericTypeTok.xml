<Type Name="GenericTypeTok" FullName="dylan.NET.Tokenizer.AST.Tokens.TypeToks.GenericTypeTok">
  <TypeSignature Language="C#" Value="public class GenericTypeTok : dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok, ICloneable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi GenericTypeTok extends dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok implements class System.ICloneable" />
  <AssemblyInfo>
    <AssemblyName>tokenizer.AST</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Represents a generic type token that is usable to assign a type to something.</summary>
    <remarks>Used to represent generic types and the parameters to be substitited into their definition.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GenericTypeTok ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs>
        <summary>Constructs a new GenericTypeTok.</summary>
        <remarks>If you want to pass the type name during construction use the other constructor.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GenericTypeTok (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string value) cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">A valid type name that is reachable given the defined lists of assemblies and namespaces to import.</param>
        <summary>Constructs a new GenericTypeTok assigning the type name's value as specified in the value parameter.</summary>
        <remarks>If you wish to set the type name later use the other constructor and set the 'Value' field acccordingly.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GenericTypeTok (string value, dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok[] params);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string value, class dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok[] params) cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="params" Type="dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok[]" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="params">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddParam">
      <MemberSignature Language="C#" Value="public void AddParam (dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok param);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void AddParam(class dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok param) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="param" Type="dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok" />
      </Parameters>
      <Docs>
        <param name="param">A type token representing a generic type parameter.</param>
        <summary>Adds a generic type parameter to the list of generic type parameters ie. 'Params'.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneTT">
      <MemberSignature Language="C#" Value="public override dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok CloneTT ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok CloneTT() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Params">
      <MemberSignature Language="C#" Value="public dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok[] Params;" />
      <MemberSignature Language="ILAsm" Value=".field public class dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok[] Params" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>dylan.NET.Tokenizer.AST.Tokens.TypeToks.TypeTok[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Holds the type tokens for the type parameters that have to be substituted into this type.</summary>
        <remarks>The parameters may be generic or non-generic.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Outputs the GenericTypeTok in terms of dylan.NET syntax.</summary>
        <returns>The dylan.NET syntax that represents this GenericTypeTok.</returns>
        <remarks>This method is overrides the TypeTok implementation of ToString() since that implementation does not capture generic type parameters.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
