<Type Name="MethodCallTok" FullName="dylan.NET.Tokenizer.AST.Tokens.MethodCallTok">
  <TypeSignature Language="C#" Value="public class MethodCallTok : dylan.NET.Tokenizer.AST.Tokens.Token" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi MethodCallTok extends dylan.NET.Tokenizer.AST.Tokens.Token" />
  <AssemblyInfo>
    <AssemblyName>tokenizer.AST</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>dylan.NET.Tokenizer.AST.Tokens.Token</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Represents a method call in the form method-name(param1,param2,...).</summary>
    <remarks>This class' design allows dylan.NET method calls to use method calls and expressions as parameters.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MethodCallTok ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs>
        <summary>Constructs a new MethodCallTok.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MethodCallTok (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string value) cil managed" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">This parameter is not usable in this class so use the other constructor.</param>
        <summary>Constructs a new MethodCallTok.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddParam">
      <MemberSignature Language="C#" Value="public void AddParam (dylan.NET.Tokenizer.AST.Exprs.Expr paramtoadd);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void AddParam(class dylan.NET.Tokenizer.AST.Exprs.Expr paramtoadd) cil managed" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="paramtoadd" Type="dylan.NET.Tokenizer.AST.Exprs.Expr" />
      </Parameters>
      <Docs>
        <param name="paramtoadd">The Expr instance holding the expression whose evaluated value will be passed as the parameter.</param>
        <summary>Adds another parameter expression to the list of parameters.</summary>
        <remarks>Initially the amount of parameters is 0.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public dylan.NET.Tokenizer.AST.Tokens.MethodNameTok Name;" />
      <MemberSignature Language="ILAsm" Value=".field public class dylan.NET.Tokenizer.AST.Tokens.MethodNameTok Name" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>dylan.NET.Tokenizer.AST.Tokens.MethodNameTok</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The MethodName instance containg the method's name and other information.</summary>
        <remarks>Any identifier whose Value is a valid and accessible method name can be used as a valid value for this field provided that the Params fields is adequatley set.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Params">
      <MemberSignature Language="C#" Value="public dylan.NET.Tokenizer.AST.Exprs.Expr[] Params;" />
      <MemberSignature Language="ILAsm" Value=".field public class dylan.NET.Tokenizer.AST.Exprs.Expr[] Params" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>dylan.NET.Tokenizer.AST.Exprs.Expr[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The array of parameter expressions to be passed to the method.</summary>
        <remarks>The result type of each parameter in conjunction with the method name leads to the resolution of a MethodInfo instance.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopFlg">
      <MemberSignature Language="C#" Value="public bool PopFlg;" />
      <MemberSignature Language="ILAsm" Value=".field public bool PopFlg" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypArr">
      <MemberSignature Language="C#" Value="public IKVM.Reflection.Type[] TypArr;" />
      <MemberSignature Language="ILAsm" Value=".field public class IKVM.Reflection.Type[] TypArr" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>IKVM.Reflection.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
