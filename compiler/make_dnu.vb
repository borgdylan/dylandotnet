Imports System.Text.RegularExpressions
Imports System.Runtime.InteropServices
Imports System.Windows.Forms
Imports System.Xml.XPath
Imports Microsoft.VisualBasic.FileIO
Imports Microsoft.VisualBasic.CompilerServices
Imports System.Linq
Imports System.Collections.Generic
Imports System.Collections
Imports System.IO
Imports Microsoft.VisualBasic
Imports System.Xml
Imports System.Xml.Linq
Imports System.Data

Imports System
Imports System.Diagnostics
Imports System.Diagnostics.SymbolStore
Imports System.Reflection
Imports System.Resources
Imports System.Reflection.Emit
Module Module1

Public asmName As AssemblyName
Public asm As AssemblyBuilder
Public Typ As Type
Public Typ02 As Type
Public Typ03 As Type
Public Typ04 As Type
Public impstr(-1) As String
Public impasm(-1) As Assembly
Public interfacebool As Boolean
Public mdl As ModuleBuilder
Public resw As IResourceWriter
Public resobj As Object

Dim doc As ISymbolDocumentWriter

Sub addstr(ByVal str As String)
ReDim Preserve impstr(UBound(impstr) + 1)
impstr(UBound(impstr)) = str
End Sub

Sub addasm(ByVal asm As Assembly)
ReDim Preserve impasm(UBound(impasm) + 1)
impasm(UBound(impasm)) = asm
End Sub

Function MakeGetType(ByVal TypeName As String) As Type
Dim attachbrackets As Boolean = False
If TypeName Like "*[[]*]" Then
Dim split As String() = TypeName.Split(New [Char] () {"[","]"})
TypeName = split(0)
attachbrackets = True
End If
Dim ind As Integer = -1
Dim i As Integer = -1
Dim len As Integer = impstr.Length - 1
Do Until i = len
i = i + 1
If TypeName Like impstr(i) & "*" Then
ind = i
End If
Loop
If ind <> -1 Then
Dim assem As Assembly = impasm(ind)
If attachbrackets = True Then
TypeName = TypeName & "[]"
End If
MakeGetType = assem.GetType(TypeName)
Else
If attachbrackets = True Then
TypeName = TypeName & "[]"
End If
MakeGetType = Type.GetType(TypeName)
End If
Return MakeGetType
End Function

Dim doc2 As ISymbolDocumentWriter

Sub Constants()
Dim Constants As TypeBuilder = mdl.DefineType("dylan.NET.Utils" & "." & "Constants", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim quot As FieldBuilder = Constants.DefineField("quot", GetType(System.String), FieldAttributes.Public Or FieldAttributes.Static Or FieldAttributes.InitOnly)
Dim cr As FieldBuilder = Constants.DefineField("cr", GetType(System.String), FieldAttributes.Public Or FieldAttributes.Static Or FieldAttributes.InitOnly)
Dim lf As FieldBuilder = Constants.DefineField("lf", GetType(System.String), FieldAttributes.Public Or FieldAttributes.Static Or FieldAttributes.InitOnly)
Dim crlf As FieldBuilder = Constants.DefineField("crlf", GetType(System.String), FieldAttributes.Public Or FieldAttributes.Static Or FieldAttributes.InitOnly)
Dim pi As FieldBuilder = Constants.DefineField("pi", GetType(System.Double), FieldAttributes.Public Or FieldAttributes.Static Or FieldAttributes.InitOnly)
Dim e As FieldBuilder = Constants.DefineField("e", GetType(System.Double), FieldAttributes.Public Or FieldAttributes.Static Or FieldAttributes.InitOnly)
Dim t As FieldBuilder = Constants.DefineField("t", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static Or FieldAttributes.InitOnly)
Dim f As FieldBuilder = Constants.DefineField("f", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static Or FieldAttributes.InitOnly)
Dim ctor0 As ConstructorBuilder = Constants.DefineConstructor(MethodAttributes.Public Or MethodAttributes.Static,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc2, 28, 1, 28, 100)
Dim locbldr0 As LocalBuilder = ctor0IL.DeclareLocal(GetType(System.Char))
locbldr0.SetLocalSymInfo("q")
Dim typ0(-1) As Type
ctor0IL.Emit(OpCodes.Ldstr, "34")
Typ = GetType(System.String)
Dim typ1 As Type() = {Typ}
ctor0IL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToInt32", typ1))
Typ = GetType(System.Convert).GetMethod("ToInt32", typ1).ReturnType
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = Typ
ctor0IL.Emit(OpCodes.Call, GetType(Convert).GetMethod("ToChar", typ0))
Typ = GetType(Convert).GetMethod("ToChar", typ0).ReturnType
ctor0IL.Emit(OpCodes.Stloc, 0)
ctor0IL.MarkSequencePoint(doc2, 29, 1, 29, 100)
ctor0IL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Char)
Dim typ2 As Type() = {Typ}
ctor0IL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToString", typ2))
Typ = GetType(System.Convert).GetMethod("ToString", typ2).ReturnType
ctor0IL.Emit(OpCodes.Stsfld, quot)
ctor0IL.MarkSequencePoint(doc2, 30, 1, 30, 100)
Dim locbldr1 As LocalBuilder = ctor0IL.DeclareLocal(GetType(System.Char))
locbldr1.SetLocalSymInfo("chr")
ctor0IL.Emit(OpCodes.Ldstr, "a")
Typ = GetType(System.String)
Dim typ3 As Type() = {Typ}
ctor0IL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ3))
Typ = GetType(System.Convert).GetMethod("ToChar", typ3).ReturnType
ctor0IL.Emit(OpCodes.Stloc, 1)
ctor0IL.MarkSequencePoint(doc2, 31, 1, 31, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(13))
Typ = GetType(System.Int32)
Dim typ4 As Type() = {Typ}
ctor0IL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ4))
Typ = GetType(System.Convert).GetMethod("ToChar", typ4).ReturnType
ctor0IL.Emit(OpCodes.Stloc, 1)
ctor0IL.MarkSequencePoint(doc2, 32, 1, 32, 100)
ctor0IL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Char)
Dim typ5 As Type() = {Typ}
ctor0IL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToString", typ5))
Typ = GetType(System.Convert).GetMethod("ToString", typ5).ReturnType
ctor0IL.Emit(OpCodes.Stsfld, cr)
ctor0IL.MarkSequencePoint(doc2, 33, 1, 33, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(10))
Typ = GetType(System.Int32)
Dim typ6 As Type() = {Typ}
ctor0IL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ6))
Typ = GetType(System.Convert).GetMethod("ToChar", typ6).ReturnType
ctor0IL.Emit(OpCodes.Stloc, 1)
ctor0IL.MarkSequencePoint(doc2, 34, 1, 34, 100)
ctor0IL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Char)
Dim typ7 As Type() = {Typ}
ctor0IL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToString", typ7))
Typ = GetType(System.Convert).GetMethod("ToString", typ7).ReturnType
ctor0IL.Emit(OpCodes.Stsfld, lf)
ctor0IL.MarkSequencePoint(doc2, 35, 1, 35, 100)
Dim typ8(-1) As Type
ctor0IL.Emit(OpCodes.Ldsfld, cr)
Typ = cr.FieldType
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = Typ
ctor0IL.Emit(OpCodes.Ldsfld, lf)
Typ = lf.FieldType
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = Typ
ctor0IL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ8))
Typ = GetType(String).GetMethod("Concat", typ8).ReturnType
ctor0IL.Emit(OpCodes.Stsfld, crlf)
ctor0IL.MarkSequencePoint(doc2, 36, 1, 36, 100)
ctor0IL.Emit(OpCodes.Ldc_R8, CDbl(3.1415926535897931))
Typ = GetType(System.Double)
ctor0IL.Emit(OpCodes.Stsfld, pi)
ctor0IL.MarkSequencePoint(doc2, 37, 1, 37, 100)
ctor0IL.Emit(OpCodes.Ldc_R8, CDbl(2.7182818284590451))
Typ = GetType(System.Double)
ctor0IL.Emit(OpCodes.Stsfld, e)
ctor0IL.MarkSequencePoint(doc2, 38, 1, 38, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, t)
ctor0IL.MarkSequencePoint(doc2, 39, 1, 39, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, f)
ctor0IL.MarkSequencePoint(doc2, 40, 1, 40, 100)
ctor0IL.Emit(OpCodes.Ret)
Constants.CreateType()
End Sub


Dim doc3 As ISymbolDocumentWriter

Sub XmlUtils()
Dim XmlUtils As TypeBuilder = mdl.DefineType("dylan.NET.Utils" & "." & "XmlUtils", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
Dim MakeName As MethodBuilder = XmlUtils.DefineMethod("MakeName", MethodAttributes.Public Or MethodAttributes.Static, GetType(XName), typ0)
Dim MakeNameIL As ILGenerator = MakeName.GetILGenerator()
Dim MakeNameparam01 As ParameterBuilder = MakeName.DefineParameter(1, ParameterAttributes.None, "name")
MakeNameIL.MarkSequencePoint(doc3, 13, 1, 13, 100)
Dim locbldr2 As LocalBuilder = MakeNameIL.DeclareLocal(GetType(XName))
locbldr2.SetLocalSymInfo("n")
Dim typ1(-1) As Type
MakeNameIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = Typ
MakeNameIL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = Typ
MakeNameIL.Emit(OpCodes.Call, GetType(XName).GetMethod("Get", typ1))
Typ = GetType(XName).GetMethod("Get", typ1).ReturnType
MakeNameIL.Emit(OpCodes.Stloc, 0)
MakeNameIL.MarkSequencePoint(doc3, 14, 1, 14, 100)
MakeNameIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(XName)
MakeNameIL.MarkSequencePoint(doc3, 16, 1, 16, 100)
MakeNameIL.Emit(OpCodes.Ret)
Dim typ2(-1) As Type
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = GetType(System.String)
Dim MakeNode As MethodBuilder = XmlUtils.DefineMethod("MakeNode", MethodAttributes.Public Or MethodAttributes.Static, GetType(XElement), typ2)
Dim MakeNodeIL As ILGenerator = MakeNode.GetILGenerator()
Dim MakeNodeparam01 As ParameterBuilder = MakeNode.DefineParameter(1, ParameterAttributes.None, "name")
MakeNodeIL.MarkSequencePoint(doc3, 20, 1, 20, 100)
Dim locbldr3 As LocalBuilder = MakeNodeIL.DeclareLocal(GetType(XName))
locbldr3.SetLocalSymInfo("n")
Dim typ3(-1) As Type
MakeNodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = Typ
MakeNodeIL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = Typ
MakeNodeIL.Emit(OpCodes.Call, GetType(XName).GetMethod("Get", typ3))
Typ = GetType(XName).GetMethod("Get", typ3).ReturnType
MakeNodeIL.Emit(OpCodes.Stloc, 0)
MakeNodeIL.MarkSequencePoint(doc3, 21, 1, 21, 100)
Dim locbldr4 As LocalBuilder = MakeNodeIL.DeclareLocal(GetType(XElement))
locbldr4.SetLocalSymInfo("el")
Dim typ4(-1) As Type
MakeNodeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(XName)
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
MakeNodeIL.Emit(OpCodes.Newobj, GetType(XElement).GetConstructor(typ4))
MakeNodeIL.Emit(OpCodes.Stloc, 1)
MakeNodeIL.MarkSequencePoint(doc3, 22, 1, 22, 100)
MakeNodeIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(XElement)
MakeNodeIL.MarkSequencePoint(doc3, 24, 1, 24, 100)
MakeNodeIL.Emit(OpCodes.Ret)
Dim typ5(-1) As Type
ReDim Preserve typ5(UBound(typ5) + 1)
typ5(UBound(typ5)) = GetType(System.String)
ReDim Preserve typ5(UBound(typ5) + 1)
typ5(UBound(typ5)) = GetType(System.String)
Dim MakeAttr As MethodBuilder = XmlUtils.DefineMethod("MakeAttr", MethodAttributes.Public Or MethodAttributes.Static, GetType(XAttribute), typ5)
Dim MakeAttrIL As ILGenerator = MakeAttr.GetILGenerator()
Dim MakeAttrparam01 As ParameterBuilder = MakeAttr.DefineParameter(1, ParameterAttributes.None, "name")
Dim MakeAttrparam02 As ParameterBuilder = MakeAttr.DefineParameter(2, ParameterAttributes.None, "value")
MakeAttrIL.MarkSequencePoint(doc3, 28, 1, 28, 100)
Dim locbldr5 As LocalBuilder = MakeAttrIL.DeclareLocal(GetType(XName))
locbldr5.SetLocalSymInfo("n")
Dim typ6(-1) As Type
MakeAttrIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = Typ
MakeAttrIL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = Typ
MakeAttrIL.Emit(OpCodes.Call, GetType(XName).GetMethod("Get", typ6))
Typ = GetType(XName).GetMethod("Get", typ6).ReturnType
MakeAttrIL.Emit(OpCodes.Stloc, 0)
MakeAttrIL.MarkSequencePoint(doc3, 29, 1, 29, 100)
Dim locbldr6 As LocalBuilder = MakeAttrIL.DeclareLocal(GetType(Object))
locbldr6.SetLocalSymInfo("obj")
MakeAttrIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
MakeAttrIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
MakeAttrIL.Emit(OpCodes.Stloc, 1)
MakeAttrIL.MarkSequencePoint(doc3, 30, 1, 30, 100)
Dim locbldr7 As LocalBuilder = MakeAttrIL.DeclareLocal(GetType(XAttribute))
locbldr7.SetLocalSymInfo("attr")
Dim typ7(-1) As Type
MakeAttrIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(XName)
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = Typ
MakeAttrIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(Object)
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = Typ
MakeAttrIL.Emit(OpCodes.Newobj, GetType(XAttribute).GetConstructor(typ7))
MakeAttrIL.Emit(OpCodes.Stloc, 2)
MakeAttrIL.MarkSequencePoint(doc3, 31, 1, 31, 100)
MakeAttrIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(XAttribute)
MakeAttrIL.MarkSequencePoint(doc3, 33, 1, 33, 100)
MakeAttrIL.Emit(OpCodes.Ret)
Dim typ8(-1) As Type
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = GetType(XElement)
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = GetType(XAttribute)
Dim AddAttr As MethodBuilder = XmlUtils.DefineMethod("AddAttr", MethodAttributes.Public Or MethodAttributes.Static, GetType(XElement), typ8)
Dim AddAttrIL As ILGenerator = AddAttr.GetILGenerator()
Dim AddAttrparam01 As ParameterBuilder = AddAttr.DefineParameter(1, ParameterAttributes.None, "el")
Dim AddAttrparam02 As ParameterBuilder = AddAttr.DefineParameter(2, ParameterAttributes.None, "attr")
AddAttrIL.MarkSequencePoint(doc3, 37, 1, 37, 100)
Dim locbldr8 As LocalBuilder = AddAttrIL.DeclareLocal(GetType(Object))
locbldr8.SetLocalSymInfo("attrobj")
AddAttrIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(XAttribute)
AddAttrIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
AddAttrIL.Emit(OpCodes.Stloc, 0)
AddAttrIL.MarkSequencePoint(doc3, 38, 1, 38, 100)
Dim typ9(-1) As Type
AddAttrIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(XElement)
Typ03 = Typ
AddAttrIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Object)
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = Typ
AddAttrIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Add", typ9))
Typ = Typ03.GetMethod("Add", typ9).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
AddAttrIL.Emit(OpCodes.Pop)
End If
AddAttrIL.MarkSequencePoint(doc3, 39, 1, 39, 100)
AddAttrIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(XElement)
AddAttrIL.MarkSequencePoint(doc3, 41, 1, 41, 100)
AddAttrIL.Emit(OpCodes.Ret)
Dim typ10(-1) As Type
ReDim Preserve typ10(UBound(typ10) + 1)
typ10(UBound(typ10)) = GetType(XElement)
ReDim Preserve typ10(UBound(typ10) + 1)
typ10(UBound(typ10)) = GetType(XAttribute).MakeArrayType()
Dim AddAttrArr As MethodBuilder = XmlUtils.DefineMethod("AddAttrArr", MethodAttributes.Public Or MethodAttributes.Static, GetType(XElement), typ10)
Dim AddAttrArrIL As ILGenerator = AddAttrArr.GetILGenerator()
Dim AddAttrArrparam01 As ParameterBuilder = AddAttrArr.DefineParameter(1, ParameterAttributes.None, "el")
Dim AddAttrArrparam02 As ParameterBuilder = AddAttrArr.DefineParameter(2, ParameterAttributes.None, "attrs")
AddAttrArrIL.MarkSequencePoint(doc3, 45, 1, 45, 100)
Dim locbldr9 As LocalBuilder = AddAttrArrIL.DeclareLocal(GetType(Object))
locbldr9.SetLocalSymInfo("attrobj")
AddAttrArrIL.MarkSequencePoint(doc3, 46, 1, 46, 100)
Dim locbldr10 As LocalBuilder = AddAttrArrIL.DeclareLocal(GetType(System.Int32))
locbldr10.SetLocalSymInfo("len")
AddAttrArrIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(XAttribute).MakeArrayType()
AddAttrArrIL.Emit(OpCodes.Ldlen)
AddAttrArrIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddAttrArrIL.Emit(OpCodes.Stloc, 1)
AddAttrArrIL.MarkSequencePoint(doc3, 47, 1, 47, 100)
Dim locbldr11 As LocalBuilder = AddAttrArrIL.DeclareLocal(GetType(System.Int32))
locbldr11.SetLocalSymInfo("i")
AddAttrArrIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddAttrArrIL.Emit(OpCodes.Stloc, 2)
AddAttrArrIL.MarkSequencePoint(doc3, 49, 1, 49, 100)
Dim label0 As System.Reflection.Emit.Label = AddAttrArrIL.DefineLabel()
AddAttrArrIL.MarkSequencePoint(doc3, 50, 1, 50, 100)
Dim label1 As System.Reflection.Emit.Label = AddAttrArrIL.DefineLabel()
AddAttrArrIL.MarkSequencePoint(doc3, 52, 1, 52, 100)
AddAttrArrIL.MarkLabel(label0)
AddAttrArrIL.MarkSequencePoint(doc3, 54, 1, 54, 100)
AddAttrArrIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddAttrArrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddAttrArrIL.Emit(OpCodes.Add)
AddAttrArrIL.Emit(OpCodes.Stloc, 2)
AddAttrArrIL.MarkSequencePoint(doc3, 56, 1, 56, 100)
AddAttrArrIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(XAttribute).MakeArrayType()
Typ02 = Typ
AddAttrArrIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddAttrArrIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddAttrArrIL.Emit(OpCodes.Ldelem, GetType(XAttribute).MakeArrayType().GetElementType())
Typ = GetType(XAttribute).MakeArrayType().GetElementType()
AddAttrArrIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
AddAttrArrIL.Emit(OpCodes.Stloc, 0)
AddAttrArrIL.MarkSequencePoint(doc3, 57, 1, 57, 100)
Dim typ11(-1) As Type
AddAttrArrIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(XElement)
Typ03 = Typ
AddAttrArrIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Object)
ReDim Preserve typ11(UBound(typ11) + 1)
typ11(UBound(typ11)) = Typ
AddAttrArrIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Add", typ11))
Typ = Typ03.GetMethod("Add", typ11).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
AddAttrArrIL.Emit(OpCodes.Pop)
End If
AddAttrArrIL.MarkSequencePoint(doc3, 59, 1, 59, 100)
AddAttrArrIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddAttrArrIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
Dim fa0 As System.Reflection.Emit.Label = AddAttrArrIL.DefineLabel()
Dim tru0 As System.Reflection.Emit.Label = AddAttrArrIL.DefineLabel()
Dim cont0 As System.Reflection.Emit.Label = AddAttrArrIL.DefineLabel()
AddAttrArrIL.Emit(OpCodes.Beq, tru0)
AddAttrArrIL.Emit(OpCodes.Br, fa0)
AddAttrArrIL.MarkLabel(tru0)
AddAttrArrIL.MarkSequencePoint(doc3, 60, 1, 60, 100)
AddAttrArrIL.Emit(OpCodes.Br, label1)
AddAttrArrIL.MarkSequencePoint(doc3, 61, 1, 61, 100)
AddAttrArrIL.Emit(OpCodes.Br, cont0)
AddAttrArrIL.MarkLabel(fa0)
AddAttrArrIL.MarkSequencePoint(doc3, 62, 1, 62, 100)
AddAttrArrIL.Emit(OpCodes.Br, label0)
AddAttrArrIL.MarkSequencePoint(doc3, 63, 1, 63, 100)
AddAttrArrIL.Emit(OpCodes.Br, cont0)
AddAttrArrIL.MarkLabel(cont0)
AddAttrArrIL.MarkSequencePoint(doc3, 65, 1, 65, 100)
AddAttrArrIL.MarkLabel(label1)
AddAttrArrIL.MarkSequencePoint(doc3, 67, 1, 67, 100)
AddAttrArrIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(XElement)
AddAttrArrIL.MarkSequencePoint(doc3, 69, 1, 69, 100)
AddAttrArrIL.Emit(OpCodes.Ret)
Dim typ12(-1) As Type
ReDim Preserve typ12(UBound(typ12) + 1)
typ12(UBound(typ12)) = GetType(XElement)
ReDim Preserve typ12(UBound(typ12) + 1)
typ12(UBound(typ12)) = GetType(XElement)
Dim AddNode As MethodBuilder = XmlUtils.DefineMethod("AddNode", MethodAttributes.Public Or MethodAttributes.Static, GetType(XElement), typ12)
Dim AddNodeIL As ILGenerator = AddNode.GetILGenerator()
Dim AddNodeparam01 As ParameterBuilder = AddNode.DefineParameter(1, ParameterAttributes.None, "el")
Dim AddNodeparam02 As ParameterBuilder = AddNode.DefineParameter(2, ParameterAttributes.None, "node")
AddNodeIL.MarkSequencePoint(doc3, 73, 1, 73, 100)
Dim locbldr12 As LocalBuilder = AddNodeIL.DeclareLocal(GetType(Object))
locbldr12.SetLocalSymInfo("nodeobj")
AddNodeIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(XElement)
AddNodeIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
AddNodeIL.Emit(OpCodes.Stloc, 0)
AddNodeIL.MarkSequencePoint(doc3, 74, 1, 74, 100)
Dim typ13(-1) As Type
AddNodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(XElement)
Typ03 = Typ
AddNodeIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Object)
ReDim Preserve typ13(UBound(typ13) + 1)
typ13(UBound(typ13)) = Typ
AddNodeIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Add", typ13))
Typ = Typ03.GetMethod("Add", typ13).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
AddNodeIL.Emit(OpCodes.Pop)
End If
AddNodeIL.MarkSequencePoint(doc3, 75, 1, 75, 100)
AddNodeIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(XElement)
AddNodeIL.MarkSequencePoint(doc3, 77, 1, 77, 100)
AddNodeIL.Emit(OpCodes.Ret)
Dim typ14(-1) As Type
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = GetType(XElement)
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = GetType(XElement).MakeArrayType()
Dim AddNodeArr As MethodBuilder = XmlUtils.DefineMethod("AddNodeArr", MethodAttributes.Public Or MethodAttributes.Static, GetType(XElement), typ14)
Dim AddNodeArrIL As ILGenerator = AddNodeArr.GetILGenerator()
Dim AddNodeArrparam01 As ParameterBuilder = AddNodeArr.DefineParameter(1, ParameterAttributes.None, "el")
Dim AddNodeArrparam02 As ParameterBuilder = AddNodeArr.DefineParameter(2, ParameterAttributes.None, "nodes")
AddNodeArrIL.MarkSequencePoint(doc3, 81, 1, 81, 100)
Dim locbldr13 As LocalBuilder = AddNodeArrIL.DeclareLocal(GetType(Object))
locbldr13.SetLocalSymInfo("nodeobj")
AddNodeArrIL.MarkSequencePoint(doc3, 82, 1, 82, 100)
Dim locbldr14 As LocalBuilder = AddNodeArrIL.DeclareLocal(GetType(System.Int32))
locbldr14.SetLocalSymInfo("len")
AddNodeArrIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(XElement).MakeArrayType()
AddNodeArrIL.Emit(OpCodes.Ldlen)
AddNodeArrIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
AddNodeArrIL.Emit(OpCodes.Stloc, 1)
AddNodeArrIL.MarkSequencePoint(doc3, 83, 1, 83, 100)
Dim locbldr15 As LocalBuilder = AddNodeArrIL.DeclareLocal(GetType(System.Int32))
locbldr15.SetLocalSymInfo("i")
AddNodeArrIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
AddNodeArrIL.Emit(OpCodes.Stloc, 2)
AddNodeArrIL.MarkSequencePoint(doc3, 85, 1, 85, 100)
Dim label2 As System.Reflection.Emit.Label = AddNodeArrIL.DefineLabel()
AddNodeArrIL.MarkSequencePoint(doc3, 86, 1, 86, 100)
Dim label3 As System.Reflection.Emit.Label = AddNodeArrIL.DefineLabel()
AddNodeArrIL.MarkSequencePoint(doc3, 88, 1, 88, 100)
AddNodeArrIL.MarkLabel(label2)
AddNodeArrIL.MarkSequencePoint(doc3, 90, 1, 90, 100)
AddNodeArrIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddNodeArrIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
AddNodeArrIL.Emit(OpCodes.Add)
AddNodeArrIL.Emit(OpCodes.Stloc, 2)
AddNodeArrIL.MarkSequencePoint(doc3, 92, 1, 92, 100)
AddNodeArrIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(XElement).MakeArrayType()
Typ02 = Typ
AddNodeArrIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddNodeArrIL.Emit(OpCodes.Conv_U)
Typ = Typ02
AddNodeArrIL.Emit(OpCodes.Ldelem, GetType(XElement).MakeArrayType().GetElementType())
Typ = GetType(XElement).MakeArrayType().GetElementType()
AddNodeArrIL.Emit(OpCodes.Box,Typ)
Typ = GetType(System.Object)
AddNodeArrIL.Emit(OpCodes.Stloc, 0)
AddNodeArrIL.MarkSequencePoint(doc3, 93, 1, 93, 100)
Dim typ15(-1) As Type
AddNodeArrIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(XElement)
Typ03 = Typ
AddNodeArrIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(Object)
ReDim Preserve typ15(UBound(typ15) + 1)
typ15(UBound(typ15)) = Typ
AddNodeArrIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Add", typ15))
Typ = Typ03.GetMethod("Add", typ15).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
AddNodeArrIL.Emit(OpCodes.Pop)
End If
AddNodeArrIL.MarkSequencePoint(doc3, 95, 1, 95, 100)
AddNodeArrIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
AddNodeArrIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
Dim fa1 As System.Reflection.Emit.Label = AddNodeArrIL.DefineLabel()
Dim tru1 As System.Reflection.Emit.Label = AddNodeArrIL.DefineLabel()
Dim cont1 As System.Reflection.Emit.Label = AddNodeArrIL.DefineLabel()
AddNodeArrIL.Emit(OpCodes.Beq, tru1)
AddNodeArrIL.Emit(OpCodes.Br, fa1)
AddNodeArrIL.MarkLabel(tru1)
AddNodeArrIL.MarkSequencePoint(doc3, 96, 1, 96, 100)
AddNodeArrIL.Emit(OpCodes.Br, label3)
AddNodeArrIL.MarkSequencePoint(doc3, 97, 1, 97, 100)
AddNodeArrIL.Emit(OpCodes.Br, cont1)
AddNodeArrIL.MarkLabel(fa1)
AddNodeArrIL.MarkSequencePoint(doc3, 98, 1, 98, 100)
AddNodeArrIL.Emit(OpCodes.Br, label2)
AddNodeArrIL.MarkSequencePoint(doc3, 99, 1, 99, 100)
AddNodeArrIL.Emit(OpCodes.Br, cont1)
AddNodeArrIL.MarkLabel(cont1)
AddNodeArrIL.MarkSequencePoint(doc3, 101, 1, 101, 100)
AddNodeArrIL.MarkLabel(label3)
AddNodeArrIL.MarkSequencePoint(doc3, 103, 1, 103, 100)
AddNodeArrIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(XElement)
AddNodeArrIL.MarkSequencePoint(doc3, 105, 1, 105, 100)
AddNodeArrIL.Emit(OpCodes.Ret)
Dim typ16(-1) As Type
ReDim Preserve typ16(UBound(typ16) + 1)
typ16(UBound(typ16)) = GetType(XElement)
ReDim Preserve typ16(UBound(typ16) + 1)
typ16(UBound(typ16)) = GetType(System.String)
Dim SetVal As MethodBuilder = XmlUtils.DefineMethod("SetVal", MethodAttributes.Public Or MethodAttributes.Static, GetType(XElement), typ16)
Dim SetValIL As ILGenerator = SetVal.GetILGenerator()
Dim SetValparam01 As ParameterBuilder = SetVal.DefineParameter(1, ParameterAttributes.None, "el")
Dim SetValparam02 As ParameterBuilder = SetVal.DefineParameter(2, ParameterAttributes.None, "value")
SetValIL.MarkSequencePoint(doc3, 110, 1, 110, 100)
Dim typ17(-1) As Type
SetValIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(XElement)
Typ03 = Typ
SetValIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ReDim Preserve typ17(UBound(typ17) + 1)
typ17(UBound(typ17)) = Typ
SetValIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("set_Value", typ17))
Typ = Typ03.GetMethod("set_Value", typ17).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
SetValIL.Emit(OpCodes.Pop)
End If
SetValIL.MarkSequencePoint(doc3, 111, 1, 111, 100)
SetValIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(XElement)
SetValIL.MarkSequencePoint(doc3, 113, 1, 113, 100)
SetValIL.Emit(OpCodes.Ret)
Dim typ18(-1) As Type
ReDim Preserve typ18(UBound(typ18) + 1)
typ18(UBound(typ18)) = GetType(XElement)
Dim GetVal As MethodBuilder = XmlUtils.DefineMethod("GetVal", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.String), typ18)
Dim GetValIL As ILGenerator = GetVal.GetILGenerator()
Dim GetValparam01 As ParameterBuilder = GetVal.DefineParameter(1, ParameterAttributes.None, "el")
GetValIL.MarkSequencePoint(doc3, 117, 1, 117, 100)
GetValIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(XElement)
Typ03 = Typ
GetValIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_Value", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_Value", Type.EmptyTypes).ReturnType
GetValIL.MarkSequencePoint(doc3, 119, 1, 119, 100)
GetValIL.Emit(OpCodes.Ret)
Dim typ20(-1) As Type
ReDim Preserve typ20(UBound(typ20) + 1)
typ20(UBound(typ20)) = GetType(XElement)
ReDim Preserve typ20(UBound(typ20) + 1)
typ20(UBound(typ20)) = GetType(System.String)
Dim XPathSelectEl As MethodBuilder = XmlUtils.DefineMethod("XPathSelectEl", MethodAttributes.Public Or MethodAttributes.Static, GetType(XElement), typ20)
Dim XPathSelectElIL As ILGenerator = XPathSelectEl.GetILGenerator()
Dim XPathSelectElparam01 As ParameterBuilder = XPathSelectEl.DefineParameter(1, ParameterAttributes.None, "el")
Dim XPathSelectElparam02 As ParameterBuilder = XPathSelectEl.DefineParameter(2, ParameterAttributes.None, "XPathQuery")
XPathSelectElIL.MarkSequencePoint(doc3, 123, 1, 123, 100)
Dim locbldr16 As LocalBuilder = XPathSelectElIL.DeclareLocal(GetType(XElement))
locbldr16.SetLocalSymInfo("tempel")
XPathSelectElIL.MarkSequencePoint(doc3, 124, 1, 124, 100)
Dim typ21(-1) As Type
XPathSelectElIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(XElement)
ReDim Preserve typ21(UBound(typ21) + 1)
typ21(UBound(typ21)) = Typ
XPathSelectElIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ReDim Preserve typ21(UBound(typ21) + 1)
typ21(UBound(typ21)) = Typ
XPathSelectElIL.Emit(OpCodes.Call, GetType(XPath.Extensions).GetMethod("XPathSelectElement", typ21))
Typ = GetType(XPath.Extensions).GetMethod("XPathSelectElement", typ21).ReturnType
XPathSelectElIL.Emit(OpCodes.Stloc, 0)
XPathSelectElIL.MarkSequencePoint(doc3, 126, 1, 126, 100)
XPathSelectElIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(XElement)
XPathSelectElIL.MarkSequencePoint(doc3, 128, 1, 128, 100)
XPathSelectElIL.Emit(OpCodes.Ret)
XmlUtils.CreateType()
End Sub


Dim doc4 As ISymbolDocumentWriter

Sub ParseUtils()
Dim ParseUtils As TypeBuilder = mdl.DefineType("dylan.NET.Utils" & "." & "ParseUtils", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim stack As FieldBuilder = ParseUtils.DefineField("stack", GetType(System.String).MakeArrayType(), FieldAttributes.Public Or FieldAttributes.Static)
Dim ctor0 As ConstructorBuilder = ParseUtils.DefineConstructor(MethodAttributes.Public Or MethodAttributes.Static,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc4, 14, 1, 14, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
ctor0IL.Emit(OpCodes.Conv_U)
ctor0IL.Emit(OpCodes.Newarr, GetType(System.String))
ctor0IL.Emit(OpCodes.Stsfld, stack)
ctor0IL.MarkSequencePoint(doc4, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String).MakeArrayType()
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(System.String)
Dim addelem As MethodBuilder = ParseUtils.DefineMethod("addelem", MethodAttributes.Private Or MethodAttributes.Static, GetType(System.String).MakeArrayType(), typ0)
Dim addelemIL As ILGenerator = addelem.GetILGenerator()
Dim addelemparam01 As ParameterBuilder = addelem.DefineParameter(1, ParameterAttributes.None, "srcarr")
Dim addelemparam02 As ParameterBuilder = addelem.DefineParameter(2, ParameterAttributes.None, "eltoadd")
addelemIL.MarkSequencePoint(doc4, 19, 1, 19, 100)
Dim locbldr17 As LocalBuilder = addelemIL.DeclareLocal(GetType(System.Int32))
locbldr17.SetLocalSymInfo("len")
addelemIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String).MakeArrayType()
addelemIL.Emit(OpCodes.Ldlen)
addelemIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
addelemIL.Emit(OpCodes.Stloc, 0)
addelemIL.MarkSequencePoint(doc4, 20, 1, 20, 100)
Dim locbldr18 As LocalBuilder = addelemIL.DeclareLocal(GetType(System.Int32))
locbldr18.SetLocalSymInfo("destl")
addelemIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
addelemIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
addelemIL.Emit(OpCodes.Add)
addelemIL.Emit(OpCodes.Stloc, 1)
addelemIL.MarkSequencePoint(doc4, 21, 1, 21, 100)
Dim locbldr19 As LocalBuilder = addelemIL.DeclareLocal(GetType(System.Int32))
locbldr19.SetLocalSymInfo("stopel")
addelemIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
addelemIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
addelemIL.Emit(OpCodes.Sub)
addelemIL.Emit(OpCodes.Stloc, 2)
addelemIL.MarkSequencePoint(doc4, 22, 1, 22, 100)
Dim locbldr20 As LocalBuilder = addelemIL.DeclareLocal(GetType(System.Int32))
locbldr20.SetLocalSymInfo("i")
addelemIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
addelemIL.Emit(OpCodes.Stloc, 3)
addelemIL.MarkSequencePoint(doc4, 24, 1, 24, 100)
Dim locbldr21 As LocalBuilder = addelemIL.DeclareLocal(GetType(System.String).MakeArrayType())
locbldr21.SetLocalSymInfo("destarr")
addelemIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
addelemIL.Emit(OpCodes.Conv_U)
addelemIL.Emit(OpCodes.Newarr, GetType(System.String))
addelemIL.Emit(OpCodes.Stloc, 4)
addelemIL.MarkSequencePoint(doc4, 26, 1, 26, 100)
Dim label0 As System.Reflection.Emit.Label = addelemIL.DefineLabel()
addelemIL.MarkSequencePoint(doc4, 27, 1, 27, 100)
Dim label1 As System.Reflection.Emit.Label = addelemIL.DefineLabel()
addelemIL.MarkSequencePoint(doc4, 29, 1, 29, 100)
addelemIL.MarkLabel(label0)
addelemIL.MarkSequencePoint(doc4, 31, 1, 31, 100)
addelemIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
addelemIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
addelemIL.Emit(OpCodes.Add)
addelemIL.Emit(OpCodes.Stloc, 3)
addelemIL.MarkSequencePoint(doc4, 33, 1, 33, 100)
addelemIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
addelemIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa2 As System.Reflection.Emit.Label = addelemIL.DefineLabel()
Dim tru2 As System.Reflection.Emit.Label = addelemIL.DefineLabel()
Dim cont2 As System.Reflection.Emit.Label = addelemIL.DefineLabel()
addelemIL.Emit(OpCodes.Bgt, tru2)
addelemIL.Emit(OpCodes.Br, fa2)
addelemIL.MarkLabel(tru2)
addelemIL.MarkSequencePoint(doc4, 35, 1, 35, 100)
addelemIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
addelemIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
addelemIL.Emit(OpCodes.Conv_U)
Typ = Typ02
addelemIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
addelemIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
addelemIL.Emit(OpCodes.Conv_U)
Typ = Typ02
addelemIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
addelemIL.Emit(OpCodes.Stelem, GetType(System.String).MakeArrayType().GetElementType())
addelemIL.MarkSequencePoint(doc4, 37, 1, 37, 100)
addelemIL.Emit(OpCodes.Br, cont2)
addelemIL.MarkLabel(fa2)
addelemIL.Emit(OpCodes.Br, cont2)
addelemIL.MarkLabel(cont2)
addelemIL.MarkSequencePoint(doc4, 39, 1, 39, 100)
addelemIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
addelemIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa3 As System.Reflection.Emit.Label = addelemIL.DefineLabel()
Dim tru3 As System.Reflection.Emit.Label = addelemIL.DefineLabel()
Dim cont3 As System.Reflection.Emit.Label = addelemIL.DefineLabel()
addelemIL.Emit(OpCodes.Beq, tru3)
addelemIL.Emit(OpCodes.Br, fa3)
addelemIL.MarkLabel(tru3)
addelemIL.MarkSequencePoint(doc4, 40, 1, 40, 100)
addelemIL.Emit(OpCodes.Br, label1)
addelemIL.MarkSequencePoint(doc4, 41, 1, 41, 100)
addelemIL.Emit(OpCodes.Br, cont3)
addelemIL.MarkLabel(fa3)
addelemIL.MarkSequencePoint(doc4, 42, 1, 42, 100)
addelemIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
addelemIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa4 As System.Reflection.Emit.Label = addelemIL.DefineLabel()
Dim tru4 As System.Reflection.Emit.Label = addelemIL.DefineLabel()
Dim cont4 As System.Reflection.Emit.Label = addelemIL.DefineLabel()
addelemIL.Emit(OpCodes.Beq, fa4)
addelemIL.Emit(OpCodes.Br, tru4)
addelemIL.MarkLabel(tru4)
addelemIL.MarkSequencePoint(doc4, 43, 1, 43, 100)
addelemIL.Emit(OpCodes.Br, label0)
addelemIL.MarkSequencePoint(doc4, 44, 1, 44, 100)
addelemIL.Emit(OpCodes.Br, cont4)
addelemIL.MarkLabel(fa4)
addelemIL.MarkSequencePoint(doc4, 45, 1, 45, 100)
addelemIL.Emit(OpCodes.Br, label1)
addelemIL.MarkSequencePoint(doc4, 46, 1, 46, 100)
addelemIL.Emit(OpCodes.Br, cont4)
addelemIL.MarkLabel(cont4)
addelemIL.MarkSequencePoint(doc4, 47, 1, 47, 100)
addelemIL.Emit(OpCodes.Br, cont3)
addelemIL.MarkLabel(cont3)
addelemIL.MarkSequencePoint(doc4, 49, 1, 49, 100)
addelemIL.MarkLabel(label1)
addelemIL.MarkSequencePoint(doc4, 51, 1, 51, 100)
addelemIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
addelemIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
addelemIL.Emit(OpCodes.Conv_U)
Typ = Typ02
addelemIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
addelemIL.Emit(OpCodes.Stelem, GetType(System.String).MakeArrayType().GetElementType())
addelemIL.MarkSequencePoint(doc4, 53, 1, 53, 100)
addelemIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
addelemIL.MarkSequencePoint(doc4, 55, 1, 55, 100)
addelemIL.Emit(OpCodes.Ret)
Dim typ1(-1) As Type
ReDim Preserve typ1(UBound(typ1) + 1)
typ1(UBound(typ1)) = GetType(System.String).MakeArrayType()
Dim remelem As MethodBuilder = ParseUtils.DefineMethod("remelem", MethodAttributes.Private Or MethodAttributes.Static, GetType(System.String).MakeArrayType(), typ1)
Dim remelemIL As ILGenerator = remelem.GetILGenerator()
Dim remelemparam01 As ParameterBuilder = remelem.DefineParameter(1, ParameterAttributes.None, "srcarr")
remelemIL.MarkSequencePoint(doc4, 59, 1, 59, 100)
Dim locbldr22 As LocalBuilder = remelemIL.DeclareLocal(GetType(System.Int32))
locbldr22.SetLocalSymInfo("len")
remelemIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String).MakeArrayType()
remelemIL.Emit(OpCodes.Ldlen)
remelemIL.Emit(OpCodes.Conv_I4)
Typ = GetType(System.Int32)
remelemIL.Emit(OpCodes.Stloc, 0)
remelemIL.MarkSequencePoint(doc4, 60, 1, 60, 100)
Dim locbldr23 As LocalBuilder = remelemIL.DeclareLocal(GetType(System.Int32))
locbldr23.SetLocalSymInfo("destl")
remelemIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
remelemIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
remelemIL.Emit(OpCodes.Sub)
remelemIL.Emit(OpCodes.Stloc, 1)
remelemIL.MarkSequencePoint(doc4, 61, 1, 61, 100)
Dim locbldr24 As LocalBuilder = remelemIL.DeclareLocal(GetType(System.Int32))
locbldr24.SetLocalSymInfo("stopel")
remelemIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
remelemIL.Emit(OpCodes.Ldc_I4, CInt(2))
Typ = GetType(System.Int32)
remelemIL.Emit(OpCodes.Sub)
remelemIL.Emit(OpCodes.Stloc, 2)
remelemIL.MarkSequencePoint(doc4, 62, 1, 62, 100)
Dim locbldr25 As LocalBuilder = remelemIL.DeclareLocal(GetType(System.Int32))
locbldr25.SetLocalSymInfo("i")
remelemIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
remelemIL.Emit(OpCodes.Stloc, 3)
remelemIL.MarkSequencePoint(doc4, 64, 1, 64, 100)
Dim locbldr26 As LocalBuilder = remelemIL.DeclareLocal(GetType(System.String).MakeArrayType())
locbldr26.SetLocalSymInfo("destarr")
remelemIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Int32)
remelemIL.Emit(OpCodes.Conv_U)
remelemIL.Emit(OpCodes.Newarr, GetType(System.String))
remelemIL.Emit(OpCodes.Stloc, 4)
remelemIL.MarkSequencePoint(doc4, 66, 1, 66, 100)
Dim label2 As System.Reflection.Emit.Label = remelemIL.DefineLabel()
remelemIL.MarkSequencePoint(doc4, 67, 1, 67, 100)
Dim label3 As System.Reflection.Emit.Label = remelemIL.DefineLabel()
remelemIL.MarkSequencePoint(doc4, 69, 1, 69, 100)
remelemIL.MarkLabel(label2)
remelemIL.MarkSequencePoint(doc4, 71, 1, 71, 100)
remelemIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
remelemIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
remelemIL.Emit(OpCodes.Add)
remelemIL.Emit(OpCodes.Stloc, 3)
remelemIL.MarkSequencePoint(doc4, 73, 1, 73, 100)
remelemIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
remelemIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa5 As System.Reflection.Emit.Label = remelemIL.DefineLabel()
Dim tru5 As System.Reflection.Emit.Label = remelemIL.DefineLabel()
Dim cont5 As System.Reflection.Emit.Label = remelemIL.DefineLabel()
remelemIL.Emit(OpCodes.Bgt, tru5)
remelemIL.Emit(OpCodes.Br, fa5)
remelemIL.MarkLabel(tru5)
remelemIL.MarkSequencePoint(doc4, 75, 1, 75, 100)
remelemIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
remelemIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
remelemIL.Emit(OpCodes.Conv_U)
Typ = Typ02
remelemIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String).MakeArrayType()
Typ02 = Typ
remelemIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
remelemIL.Emit(OpCodes.Conv_U)
Typ = Typ02
remelemIL.Emit(OpCodes.Ldelem, GetType(System.String).MakeArrayType().GetElementType())
Typ = GetType(System.String).MakeArrayType().GetElementType()
remelemIL.Emit(OpCodes.Stelem, GetType(System.String).MakeArrayType().GetElementType())
remelemIL.MarkSequencePoint(doc4, 77, 1, 77, 100)
remelemIL.Emit(OpCodes.Br, cont5)
remelemIL.MarkLabel(fa5)
remelemIL.Emit(OpCodes.Br, cont5)
remelemIL.MarkLabel(cont5)
remelemIL.MarkSequencePoint(doc4, 79, 1, 79, 100)
remelemIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Int32)
remelemIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
Dim fa6 As System.Reflection.Emit.Label = remelemIL.DefineLabel()
Dim tru6 As System.Reflection.Emit.Label = remelemIL.DefineLabel()
Dim cont6 As System.Reflection.Emit.Label = remelemIL.DefineLabel()
remelemIL.Emit(OpCodes.Beq, tru6)
remelemIL.Emit(OpCodes.Br, fa6)
remelemIL.MarkLabel(tru6)
remelemIL.MarkSequencePoint(doc4, 80, 1, 80, 100)
remelemIL.Emit(OpCodes.Br, label3)
remelemIL.MarkSequencePoint(doc4, 81, 1, 81, 100)
remelemIL.Emit(OpCodes.Br, cont6)
remelemIL.MarkLabel(fa6)
remelemIL.MarkSequencePoint(doc4, 82, 1, 82, 100)
remelemIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Int32)
remelemIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
Dim fa7 As System.Reflection.Emit.Label = remelemIL.DefineLabel()
Dim tru7 As System.Reflection.Emit.Label = remelemIL.DefineLabel()
Dim cont7 As System.Reflection.Emit.Label = remelemIL.DefineLabel()
remelemIL.Emit(OpCodes.Beq, fa7)
remelemIL.Emit(OpCodes.Br, tru7)
remelemIL.MarkLabel(tru7)
remelemIL.MarkSequencePoint(doc4, 83, 1, 83, 100)
remelemIL.Emit(OpCodes.Br, label2)
remelemIL.MarkSequencePoint(doc4, 84, 1, 84, 100)
remelemIL.Emit(OpCodes.Br, cont7)
remelemIL.MarkLabel(fa7)
remelemIL.MarkSequencePoint(doc4, 85, 1, 85, 100)
remelemIL.Emit(OpCodes.Br, label3)
remelemIL.MarkSequencePoint(doc4, 86, 1, 86, 100)
remelemIL.Emit(OpCodes.Br, cont7)
remelemIL.MarkLabel(cont7)
remelemIL.MarkSequencePoint(doc4, 87, 1, 87, 100)
remelemIL.Emit(OpCodes.Br, cont6)
remelemIL.MarkLabel(cont6)
remelemIL.MarkSequencePoint(doc4, 89, 1, 89, 100)
remelemIL.MarkLabel(label3)
remelemIL.MarkSequencePoint(doc4, 91, 1, 91, 100)
remelemIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.String).MakeArrayType()
remelemIL.MarkSequencePoint(doc4, 93, 1, 93, 100)
remelemIL.Emit(OpCodes.Ret)
Dim typ2(-1) As Type
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = GetType(System.String)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = GetType(System.String)
Dim StringParser As MethodBuilder = ParseUtils.DefineMethod("StringParser", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.String).MakeArrayType(), typ2)
Dim StringParserIL As ILGenerator = StringParser.GetILGenerator()
Dim StringParserparam01 As ParameterBuilder = StringParser.DefineParameter(1, ParameterAttributes.None, "StringToParse")
Dim StringParserparam02 As ParameterBuilder = StringParser.DefineParameter(2, ParameterAttributes.None, "DelimeterChar")
StringParserIL.MarkSequencePoint(doc4, 97, 1, 97, 100)
Dim locbldr27 As LocalBuilder = StringParserIL.DeclareLocal(GetType(System.String).MakeArrayType())
locbldr27.SetLocalSymInfo("arr")
StringParserIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
StringParserIL.Emit(OpCodes.Conv_U)
StringParserIL.Emit(OpCodes.Newarr, GetType(System.String))
StringParserIL.Emit(OpCodes.Stloc, 0)
StringParserIL.MarkSequencePoint(doc4, 99, 1, 99, 100)
Dim locbldr28 As LocalBuilder = StringParserIL.DeclareLocal(GetType(System.Boolean))
locbldr28.SetLocalSymInfo("ins")
StringParserIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
StringParserIL.Emit(OpCodes.Stloc, 1)
StringParserIL.MarkSequencePoint(doc4, 100, 1, 100, 100)
Dim locbldr29 As LocalBuilder = StringParserIL.DeclareLocal(GetType(System.String))
locbldr29.SetLocalSymInfo("ch")
StringParserIL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
StringParserIL.Emit(OpCodes.Stloc, 2)
StringParserIL.MarkSequencePoint(doc4, 101, 1, 101, 100)
Dim locbldr30 As LocalBuilder = StringParserIL.DeclareLocal(GetType(System.String))
locbldr30.SetLocalSymInfo("acc")
StringParserIL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
StringParserIL.Emit(OpCodes.Stloc, 3)
StringParserIL.MarkSequencePoint(doc4, 102, 1, 102, 100)
Dim locbldr31 As LocalBuilder = StringParserIL.DeclareLocal(GetType(System.Int32))
locbldr31.SetLocalSymInfo("i")
StringParserIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
StringParserIL.Emit(OpCodes.Stloc, 4)
StringParserIL.MarkSequencePoint(doc4, 103, 1, 103, 100)
Dim locbldr32 As LocalBuilder = StringParserIL.DeclareLocal(GetType(System.Int32))
locbldr32.SetLocalSymInfo("len")
StringParserIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
Typ03 = Typ
StringParserIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_Length", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_Length", Type.EmptyTypes).ReturnType
StringParserIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
StringParserIL.Emit(OpCodes.Sub)
StringParserIL.Emit(OpCodes.Stloc, 5)
StringParserIL.MarkSequencePoint(doc4, 105, 1, 105, 100)
Dim label4 As System.Reflection.Emit.Label = StringParserIL.DefineLabel()
StringParserIL.MarkSequencePoint(doc4, 106, 1, 106, 100)
Dim label5 As System.Reflection.Emit.Label = StringParserIL.DefineLabel()
StringParserIL.MarkSequencePoint(doc4, 108, 1, 108, 100)
StringParserIL.MarkLabel(label5)
StringParserIL.MarkSequencePoint(doc4, 110, 1, 110, 100)
StringParserIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
StringParserIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
StringParserIL.Emit(OpCodes.Add)
StringParserIL.Emit(OpCodes.Stloc, 4)
StringParserIL.MarkSequencePoint(doc4, 112, 1, 112, 100)
Dim typ4(-1) As Type
StringParserIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
Typ03 = Typ
StringParserIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
ReDim Preserve typ4(UBound(typ4) + 1)
typ4(UBound(typ4)) = Typ
StringParserIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_Chars", typ4))
Typ = Typ03.GetMethod("get_Chars", typ4).ReturnType
Dim typ5 As Type() = {Typ}
StringParserIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToString", typ5))
Typ = GetType(System.Convert).GetMethod("ToString", typ5).ReturnType
StringParserIL.Emit(OpCodes.Stloc, 2)
StringParserIL.MarkSequencePoint(doc4, 114, 1, 114, 100)
Dim locbldr33 As LocalBuilder = StringParserIL.DeclareLocal(GetType(System.String))
locbldr33.SetLocalSymInfo("ic")
StringParserIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Utils.Constants").GetField("quot"))
Typ = asm.GetType("dylan.NET.Utils.Constants").GetField("quot").FieldType
StringParserIL.Emit(OpCodes.Stloc, 6)
StringParserIL.MarkSequencePoint(doc4, 116, 1, 116, 100)
Dim locbldr34 As LocalBuilder = StringParserIL.DeclareLocal(GetType(System.Int32))
locbldr34.SetLocalSymInfo("comp")
Dim typ6(-1) As Type
StringParserIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = Typ
StringParserIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.String)
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = Typ
StringParserIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ6))
Typ = GetType(String).GetMethod("Compare", typ6).ReturnType
StringParserIL.Emit(OpCodes.Stloc, 7)
StringParserIL.MarkSequencePoint(doc4, 118, 1, 118, 100)
StringParserIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
StringParserIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa8 As System.Reflection.Emit.Label = StringParserIL.DefineLabel()
Dim tru8 As System.Reflection.Emit.Label = StringParserIL.DefineLabel()
Dim cont8 As System.Reflection.Emit.Label = StringParserIL.DefineLabel()
StringParserIL.Emit(OpCodes.Beq, tru8)
StringParserIL.Emit(OpCodes.Br, fa8)
StringParserIL.MarkLabel(tru8)
StringParserIL.MarkSequencePoint(doc4, 120, 1, 120, 100)
Dim label6 As System.Reflection.Emit.Label = StringParserIL.DefineLabel()
StringParserIL.MarkSequencePoint(doc4, 122, 1, 122, 100)
StringParserIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
StringParserIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa9 As System.Reflection.Emit.Label = StringParserIL.DefineLabel()
Dim tru9 As System.Reflection.Emit.Label = StringParserIL.DefineLabel()
Dim cont9 As System.Reflection.Emit.Label = StringParserIL.DefineLabel()
StringParserIL.Emit(OpCodes.Beq, tru9)
StringParserIL.Emit(OpCodes.Br, fa9)
StringParserIL.MarkLabel(tru9)
StringParserIL.MarkSequencePoint(doc4, 123, 1, 123, 100)
StringParserIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
StringParserIL.Emit(OpCodes.Stloc, 1)
StringParserIL.MarkSequencePoint(doc4, 124, 1, 124, 100)
StringParserIL.Emit(OpCodes.Br, label6)
StringParserIL.MarkSequencePoint(doc4, 125, 1, 125, 100)
StringParserIL.Emit(OpCodes.Br, cont9)
StringParserIL.MarkLabel(fa9)
StringParserIL.Emit(OpCodes.Br, cont9)
StringParserIL.MarkLabel(cont9)
StringParserIL.MarkSequencePoint(doc4, 126, 1, 126, 100)
StringParserIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
StringParserIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa10 As System.Reflection.Emit.Label = StringParserIL.DefineLabel()
Dim tru10 As System.Reflection.Emit.Label = StringParserIL.DefineLabel()
Dim cont10 As System.Reflection.Emit.Label = StringParserIL.DefineLabel()
StringParserIL.Emit(OpCodes.Beq, tru10)
StringParserIL.Emit(OpCodes.Br, fa10)
StringParserIL.MarkLabel(tru10)
StringParserIL.MarkSequencePoint(doc4, 127, 1, 127, 100)
StringParserIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
StringParserIL.Emit(OpCodes.Stloc, 1)
StringParserIL.MarkSequencePoint(doc4, 128, 1, 128, 100)
StringParserIL.Emit(OpCodes.Br, label6)
StringParserIL.MarkSequencePoint(doc4, 129, 1, 129, 100)
StringParserIL.Emit(OpCodes.Br, cont10)
StringParserIL.MarkLabel(fa10)
StringParserIL.Emit(OpCodes.Br, cont10)
StringParserIL.MarkLabel(cont10)
StringParserIL.MarkSequencePoint(doc4, 131, 1, 131, 100)
StringParserIL.MarkLabel(label6)
StringParserIL.MarkSequencePoint(doc4, 133, 1, 133, 100)
StringParserIL.Emit(OpCodes.Br, cont8)
StringParserIL.MarkLabel(fa8)
StringParserIL.Emit(OpCodes.Br, cont8)
StringParserIL.MarkLabel(cont8)
StringParserIL.MarkSequencePoint(doc4, 135, 1, 135, 100)
Dim typ7(-1) As Type
StringParserIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = Typ
StringParserIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = Typ
StringParserIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ7))
Typ = GetType(String).GetMethod("Compare", typ7).ReturnType
StringParserIL.Emit(OpCodes.Stloc, 7)
StringParserIL.MarkSequencePoint(doc4, 137, 1, 137, 100)
StringParserIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
StringParserIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa11 As System.Reflection.Emit.Label = StringParserIL.DefineLabel()
Dim tru11 As System.Reflection.Emit.Label = StringParserIL.DefineLabel()
Dim cont11 As System.Reflection.Emit.Label = StringParserIL.DefineLabel()
StringParserIL.Emit(OpCodes.Beq, tru11)
StringParserIL.Emit(OpCodes.Br, fa11)
StringParserIL.MarkLabel(tru11)
StringParserIL.MarkSequencePoint(doc4, 138, 1, 138, 100)
StringParserIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
StringParserIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa12 As System.Reflection.Emit.Label = StringParserIL.DefineLabel()
Dim tru12 As System.Reflection.Emit.Label = StringParserIL.DefineLabel()
Dim cont12 As System.Reflection.Emit.Label = StringParserIL.DefineLabel()
StringParserIL.Emit(OpCodes.Beq, tru12)
StringParserIL.Emit(OpCodes.Br, fa12)
StringParserIL.MarkLabel(tru12)
StringParserIL.MarkSequencePoint(doc4, 140, 1, 140, 100)
Dim typ8(-1) As Type
StringParserIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.String)
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = Typ
StringParserIL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ReDim Preserve typ8(UBound(typ8) + 1)
typ8(UBound(typ8)) = Typ
StringParserIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ8))
Typ = GetType(String).GetMethod("Compare", typ8).ReturnType
StringParserIL.Emit(OpCodes.Stloc, 7)
StringParserIL.MarkSequencePoint(doc4, 142, 1, 142, 100)
StringParserIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
StringParserIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa13 As System.Reflection.Emit.Label = StringParserIL.DefineLabel()
Dim tru13 As System.Reflection.Emit.Label = StringParserIL.DefineLabel()
Dim cont13 As System.Reflection.Emit.Label = StringParserIL.DefineLabel()
StringParserIL.Emit(OpCodes.Beq, fa13)
StringParserIL.Emit(OpCodes.Br, tru13)
StringParserIL.MarkLabel(tru13)
StringParserIL.MarkSequencePoint(doc4, 143, 1, 143, 100)
Dim typ9(-1) As Type
StringParserIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.String).MakeArrayType()
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = Typ
StringParserIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.String)
ReDim Preserve typ9(UBound(typ9) + 1)
typ9(UBound(typ9)) = Typ
StringParserIL.Emit(OpCodes.Call, addelem)
Typ = addelem.ReturnType
StringParserIL.Emit(OpCodes.Stloc, 0)
StringParserIL.MarkSequencePoint(doc4, 144, 1, 144, 100)
StringParserIL.Emit(OpCodes.Br, cont13)
StringParserIL.MarkLabel(fa13)
StringParserIL.Emit(OpCodes.Br, cont13)
StringParserIL.MarkLabel(cont13)
StringParserIL.MarkSequencePoint(doc4, 145, 1, 145, 100)
StringParserIL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
StringParserIL.Emit(OpCodes.Stloc, 3)
StringParserIL.MarkSequencePoint(doc4, 146, 1, 146, 100)
StringParserIL.Emit(OpCodes.Br, cont12)
StringParserIL.MarkLabel(fa12)
StringParserIL.Emit(OpCodes.Br, cont12)
StringParserIL.MarkLabel(cont12)
StringParserIL.MarkSequencePoint(doc4, 147, 1, 147, 100)
StringParserIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
StringParserIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa14 As System.Reflection.Emit.Label = StringParserIL.DefineLabel()
Dim tru14 As System.Reflection.Emit.Label = StringParserIL.DefineLabel()
Dim cont14 As System.Reflection.Emit.Label = StringParserIL.DefineLabel()
StringParserIL.Emit(OpCodes.Beq, tru14)
StringParserIL.Emit(OpCodes.Br, fa14)
StringParserIL.MarkLabel(tru14)
StringParserIL.MarkSequencePoint(doc4, 148, 1, 148, 100)
Dim typ10(-1) As Type
StringParserIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.String)
ReDim Preserve typ10(UBound(typ10) + 1)
typ10(UBound(typ10)) = Typ
StringParserIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReDim Preserve typ10(UBound(typ10) + 1)
typ10(UBound(typ10)) = Typ
StringParserIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ10))
Typ = GetType(String).GetMethod("Concat", typ10).ReturnType
StringParserIL.Emit(OpCodes.Stloc, 3)
StringParserIL.MarkSequencePoint(doc4, 149, 1, 149, 100)
StringParserIL.Emit(OpCodes.Br, cont14)
StringParserIL.MarkLabel(fa14)
StringParserIL.Emit(OpCodes.Br, cont14)
StringParserIL.MarkLabel(cont14)
StringParserIL.MarkSequencePoint(doc4, 150, 1, 150, 100)
StringParserIL.Emit(OpCodes.Br, cont11)
StringParserIL.MarkLabel(fa11)
StringParserIL.MarkSequencePoint(doc4, 151, 1, 151, 100)
Dim typ11(-1) As Type
StringParserIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.String)
ReDim Preserve typ11(UBound(typ11) + 1)
typ11(UBound(typ11)) = Typ
StringParserIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReDim Preserve typ11(UBound(typ11) + 1)
typ11(UBound(typ11)) = Typ
StringParserIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ11))
Typ = GetType(String).GetMethod("Concat", typ11).ReturnType
StringParserIL.Emit(OpCodes.Stloc, 3)
StringParserIL.MarkSequencePoint(doc4, 152, 1, 152, 100)
StringParserIL.Emit(OpCodes.Br, cont11)
StringParserIL.MarkLabel(cont11)
StringParserIL.MarkSequencePoint(doc4, 154, 1, 154, 100)
Dim typ12(-1) As Type
StringParserIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.String)
ReDim Preserve typ12(UBound(typ12) + 1)
typ12(UBound(typ12)) = Typ
StringParserIL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ReDim Preserve typ12(UBound(typ12) + 1)
typ12(UBound(typ12)) = Typ
StringParserIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ12))
Typ = GetType(String).GetMethod("Compare", typ12).ReturnType
StringParserIL.Emit(OpCodes.Stloc, 7)
StringParserIL.MarkSequencePoint(doc4, 156, 1, 156, 100)
StringParserIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
StringParserIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Int32)
Dim fa15 As System.Reflection.Emit.Label = StringParserIL.DefineLabel()
Dim tru15 As System.Reflection.Emit.Label = StringParserIL.DefineLabel()
Dim cont15 As System.Reflection.Emit.Label = StringParserIL.DefineLabel()
StringParserIL.Emit(OpCodes.Beq, tru15)
StringParserIL.Emit(OpCodes.Br, fa15)
StringParserIL.MarkLabel(tru15)
StringParserIL.MarkSequencePoint(doc4, 157, 1, 157, 100)
StringParserIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
StringParserIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa16 As System.Reflection.Emit.Label = StringParserIL.DefineLabel()
Dim tru16 As System.Reflection.Emit.Label = StringParserIL.DefineLabel()
Dim cont16 As System.Reflection.Emit.Label = StringParserIL.DefineLabel()
StringParserIL.Emit(OpCodes.Beq, fa16)
StringParserIL.Emit(OpCodes.Br, tru16)
StringParserIL.MarkLabel(tru16)
StringParserIL.MarkSequencePoint(doc4, 158, 1, 158, 100)
Dim typ13(-1) As Type
StringParserIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.String).MakeArrayType()
ReDim Preserve typ13(UBound(typ13) + 1)
typ13(UBound(typ13)) = Typ
StringParserIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.String)
ReDim Preserve typ13(UBound(typ13) + 1)
typ13(UBound(typ13)) = Typ
StringParserIL.Emit(OpCodes.Call, addelem)
Typ = addelem.ReturnType
StringParserIL.Emit(OpCodes.Stloc, 0)
StringParserIL.MarkSequencePoint(doc4, 159, 1, 159, 100)
StringParserIL.Emit(OpCodes.Br, cont16)
StringParserIL.MarkLabel(fa16)
StringParserIL.Emit(OpCodes.Br, cont16)
StringParserIL.MarkLabel(cont16)
StringParserIL.MarkSequencePoint(doc4, 160, 1, 160, 100)
StringParserIL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
StringParserIL.Emit(OpCodes.Stloc, 3)
StringParserIL.MarkSequencePoint(doc4, 161, 1, 161, 100)
StringParserIL.Emit(OpCodes.Br, cont15)
StringParserIL.MarkLabel(fa15)
StringParserIL.Emit(OpCodes.Br, cont15)
StringParserIL.MarkLabel(cont15)
StringParserIL.MarkSequencePoint(doc4, 163, 1, 163, 100)
StringParserIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
StringParserIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Int32)
Dim fa17 As System.Reflection.Emit.Label = StringParserIL.DefineLabel()
Dim tru17 As System.Reflection.Emit.Label = StringParserIL.DefineLabel()
Dim cont17 As System.Reflection.Emit.Label = StringParserIL.DefineLabel()
StringParserIL.Emit(OpCodes.Beq, tru17)
StringParserIL.Emit(OpCodes.Br, fa17)
StringParserIL.MarkLabel(tru17)
StringParserIL.MarkSequencePoint(doc4, 164, 1, 164, 100)
StringParserIL.Emit(OpCodes.Br, label4)
StringParserIL.MarkSequencePoint(doc4, 165, 1, 165, 100)
StringParserIL.Emit(OpCodes.Br, cont17)
StringParserIL.MarkLabel(fa17)
StringParserIL.MarkSequencePoint(doc4, 166, 1, 166, 100)
StringParserIL.Emit(OpCodes.Br, label5)
StringParserIL.MarkSequencePoint(doc4, 167, 1, 167, 100)
StringParserIL.Emit(OpCodes.Br, cont17)
StringParserIL.MarkLabel(cont17)
StringParserIL.MarkSequencePoint(doc4, 169, 1, 169, 100)
StringParserIL.MarkLabel(label4)
StringParserIL.MarkSequencePoint(doc4, 171, 1, 171, 100)
StringParserIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.String).MakeArrayType()
StringParserIL.MarkSequencePoint(doc4, 172, 1, 172, 100)
StringParserIL.Emit(OpCodes.Ret)
Dim typ14(-1) As Type
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = GetType(System.String)
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = GetType(System.String)
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = GetType(System.String)
Dim StringParser2ds As MethodBuilder = ParseUtils.DefineMethod("StringParser2ds", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.String).MakeArrayType(), typ14)
Dim StringParser2dsIL As ILGenerator = StringParser2ds.GetILGenerator()
Dim StringParser2dsparam01 As ParameterBuilder = StringParser2ds.DefineParameter(1, ParameterAttributes.None, "StringToParse")
Dim StringParser2dsparam02 As ParameterBuilder = StringParser2ds.DefineParameter(2, ParameterAttributes.None, "DelimeterChar")
Dim StringParser2dsparam03 As ParameterBuilder = StringParser2ds.DefineParameter(3, ParameterAttributes.None, "DelimeterChar2")
StringParser2dsIL.MarkSequencePoint(doc4, 176, 1, 176, 100)
Dim locbldr35 As LocalBuilder = StringParser2dsIL.DeclareLocal(GetType(System.String).MakeArrayType())
locbldr35.SetLocalSymInfo("arr")
StringParser2dsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
StringParser2dsIL.Emit(OpCodes.Conv_U)
StringParser2dsIL.Emit(OpCodes.Newarr, GetType(System.String))
StringParser2dsIL.Emit(OpCodes.Stloc, 0)
StringParser2dsIL.MarkSequencePoint(doc4, 178, 1, 178, 100)
Dim locbldr36 As LocalBuilder = StringParser2dsIL.DeclareLocal(GetType(System.Boolean))
locbldr36.SetLocalSymInfo("ins")
StringParser2dsIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
StringParser2dsIL.Emit(OpCodes.Stloc, 1)
StringParser2dsIL.MarkSequencePoint(doc4, 179, 1, 179, 100)
Dim locbldr37 As LocalBuilder = StringParser2dsIL.DeclareLocal(GetType(System.String))
locbldr37.SetLocalSymInfo("ch")
StringParser2dsIL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
StringParser2dsIL.Emit(OpCodes.Stloc, 2)
StringParser2dsIL.MarkSequencePoint(doc4, 180, 1, 180, 100)
Dim locbldr38 As LocalBuilder = StringParser2dsIL.DeclareLocal(GetType(System.String))
locbldr38.SetLocalSymInfo("acc")
StringParser2dsIL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
StringParser2dsIL.Emit(OpCodes.Stloc, 3)
StringParser2dsIL.MarkSequencePoint(doc4, 181, 1, 181, 100)
Dim locbldr39 As LocalBuilder = StringParser2dsIL.DeclareLocal(GetType(System.Int32))
locbldr39.SetLocalSymInfo("i")
StringParser2dsIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
StringParser2dsIL.Emit(OpCodes.Stloc, 4)
StringParser2dsIL.MarkSequencePoint(doc4, 182, 1, 182, 100)
Dim locbldr40 As LocalBuilder = StringParser2dsIL.DeclareLocal(GetType(System.Int32))
locbldr40.SetLocalSymInfo("len")
StringParser2dsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
Typ03 = Typ
StringParser2dsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_Length", Type.EmptyTypes))
Typ = Typ03.GetMethod("get_Length", Type.EmptyTypes).ReturnType
StringParser2dsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
StringParser2dsIL.Emit(OpCodes.Sub)
StringParser2dsIL.Emit(OpCodes.Stloc, 5)
StringParser2dsIL.MarkSequencePoint(doc4, 184, 1, 184, 100)
Dim label7 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
StringParser2dsIL.MarkSequencePoint(doc4, 185, 1, 185, 100)
Dim label8 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
StringParser2dsIL.MarkSequencePoint(doc4, 187, 1, 187, 100)
StringParser2dsIL.MarkLabel(label8)
StringParser2dsIL.MarkSequencePoint(doc4, 189, 1, 189, 100)
StringParser2dsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
StringParser2dsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
StringParser2dsIL.Emit(OpCodes.Add)
StringParser2dsIL.Emit(OpCodes.Stloc, 4)
StringParser2dsIL.MarkSequencePoint(doc4, 191, 1, 191, 100)
Dim typ16(-1) As Type
StringParser2dsIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
Typ03 = Typ
StringParser2dsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
ReDim Preserve typ16(UBound(typ16) + 1)
typ16(UBound(typ16)) = Typ
StringParser2dsIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("get_Chars", typ16))
Typ = Typ03.GetMethod("get_Chars", typ16).ReturnType
Dim typ17 As Type() = {Typ}
StringParser2dsIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToString", typ17))
Typ = GetType(System.Convert).GetMethod("ToString", typ17).ReturnType
StringParser2dsIL.Emit(OpCodes.Stloc, 2)
StringParser2dsIL.MarkSequencePoint(doc4, 193, 1, 193, 100)
Dim locbldr41 As LocalBuilder = StringParser2dsIL.DeclareLocal(GetType(System.String))
locbldr41.SetLocalSymInfo("ic")
StringParser2dsIL.Emit(OpCodes.Ldsfld, asm.GetType("dylan.NET.Utils.Constants").GetField("quot"))
Typ = asm.GetType("dylan.NET.Utils.Constants").GetField("quot").FieldType
StringParser2dsIL.Emit(OpCodes.Stloc, 6)
StringParser2dsIL.MarkSequencePoint(doc4, 195, 1, 195, 100)
Dim locbldr42 As LocalBuilder = StringParser2dsIL.DeclareLocal(GetType(System.Int32))
locbldr42.SetLocalSymInfo("comp")
Dim typ18(-1) As Type
StringParser2dsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReDim Preserve typ18(UBound(typ18) + 1)
typ18(UBound(typ18)) = Typ
StringParser2dsIL.Emit(OpCodes.Ldloc, 6)
Typ = GetType(System.String)
ReDim Preserve typ18(UBound(typ18) + 1)
typ18(UBound(typ18)) = Typ
StringParser2dsIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ18))
Typ = GetType(String).GetMethod("Compare", typ18).ReturnType
StringParser2dsIL.Emit(OpCodes.Stloc, 7)
StringParser2dsIL.MarkSequencePoint(doc4, 196, 1, 196, 100)
Dim locbldr43 As LocalBuilder = StringParser2dsIL.DeclareLocal(GetType(System.Int32))
locbldr43.SetLocalSymInfo("comp2")
StringParser2dsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
StringParser2dsIL.Emit(OpCodes.Stloc, 8)
StringParser2dsIL.MarkSequencePoint(doc4, 198, 1, 198, 100)
StringParser2dsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
StringParser2dsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa18 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
Dim tru18 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
Dim cont18 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
StringParser2dsIL.Emit(OpCodes.Beq, tru18)
StringParser2dsIL.Emit(OpCodes.Br, fa18)
StringParser2dsIL.MarkLabel(tru18)
StringParser2dsIL.MarkSequencePoint(doc4, 200, 1, 200, 100)
Dim label9 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
StringParser2dsIL.MarkSequencePoint(doc4, 202, 1, 202, 100)
StringParser2dsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
StringParser2dsIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa19 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
Dim tru19 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
Dim cont19 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
StringParser2dsIL.Emit(OpCodes.Beq, tru19)
StringParser2dsIL.Emit(OpCodes.Br, fa19)
StringParser2dsIL.MarkLabel(tru19)
StringParser2dsIL.MarkSequencePoint(doc4, 203, 1, 203, 100)
StringParser2dsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
StringParser2dsIL.Emit(OpCodes.Stloc, 1)
StringParser2dsIL.MarkSequencePoint(doc4, 204, 1, 204, 100)
StringParser2dsIL.Emit(OpCodes.Br, label9)
StringParser2dsIL.MarkSequencePoint(doc4, 205, 1, 205, 100)
StringParser2dsIL.Emit(OpCodes.Br, cont19)
StringParser2dsIL.MarkLabel(fa19)
StringParser2dsIL.Emit(OpCodes.Br, cont19)
StringParser2dsIL.MarkLabel(cont19)
StringParser2dsIL.MarkSequencePoint(doc4, 206, 1, 206, 100)
StringParser2dsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
StringParser2dsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa20 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
Dim tru20 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
Dim cont20 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
StringParser2dsIL.Emit(OpCodes.Beq, tru20)
StringParser2dsIL.Emit(OpCodes.Br, fa20)
StringParser2dsIL.MarkLabel(tru20)
StringParser2dsIL.MarkSequencePoint(doc4, 207, 1, 207, 100)
StringParser2dsIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
StringParser2dsIL.Emit(OpCodes.Stloc, 1)
StringParser2dsIL.MarkSequencePoint(doc4, 208, 1, 208, 100)
StringParser2dsIL.Emit(OpCodes.Br, label9)
StringParser2dsIL.MarkSequencePoint(doc4, 209, 1, 209, 100)
StringParser2dsIL.Emit(OpCodes.Br, cont20)
StringParser2dsIL.MarkLabel(fa20)
StringParser2dsIL.Emit(OpCodes.Br, cont20)
StringParser2dsIL.MarkLabel(cont20)
StringParser2dsIL.MarkSequencePoint(doc4, 211, 1, 211, 100)
StringParser2dsIL.MarkLabel(label9)
StringParser2dsIL.MarkSequencePoint(doc4, 213, 1, 213, 100)
StringParser2dsIL.Emit(OpCodes.Br, cont18)
StringParser2dsIL.MarkLabel(fa18)
StringParser2dsIL.Emit(OpCodes.Br, cont18)
StringParser2dsIL.MarkLabel(cont18)
StringParser2dsIL.MarkSequencePoint(doc4, 215, 1, 215, 100)
Dim locbldr44 As LocalBuilder = StringParser2dsIL.DeclareLocal(GetType(System.Int32))
locbldr44.SetLocalSymInfo("comps")
StringParser2dsIL.Emit(OpCodes.Ldc_I4, CInt(1))
Typ = GetType(System.Int32)
StringParser2dsIL.Emit(OpCodes.Stloc, 9)
StringParser2dsIL.MarkSequencePoint(doc4, 217, 1, 217, 100)
Dim typ19(-1) As Type
StringParser2dsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReDim Preserve typ19(UBound(typ19) + 1)
typ19(UBound(typ19)) = Typ
StringParser2dsIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ReDim Preserve typ19(UBound(typ19) + 1)
typ19(UBound(typ19)) = Typ
StringParser2dsIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ19))
Typ = GetType(String).GetMethod("Compare", typ19).ReturnType
StringParser2dsIL.Emit(OpCodes.Stloc, 7)
StringParser2dsIL.MarkSequencePoint(doc4, 218, 1, 218, 100)
Dim typ20(-1) As Type
StringParser2dsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReDim Preserve typ20(UBound(typ20) + 1)
typ20(UBound(typ20)) = Typ
StringParser2dsIL.Emit(OpCodes.Ldarg, 2)
Typ = GetType(System.String)
ReDim Preserve typ20(UBound(typ20) + 1)
typ20(UBound(typ20)) = Typ
StringParser2dsIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ20))
Typ = GetType(String).GetMethod("Compare", typ20).ReturnType
StringParser2dsIL.Emit(OpCodes.Stloc, 8)
StringParser2dsIL.MarkSequencePoint(doc4, 220, 1, 220, 100)
Dim label10 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
StringParser2dsIL.MarkSequencePoint(doc4, 222, 1, 222, 100)
StringParser2dsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
StringParser2dsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa21 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
Dim tru21 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
Dim cont21 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
StringParser2dsIL.Emit(OpCodes.Beq, tru21)
StringParser2dsIL.Emit(OpCodes.Br, fa21)
StringParser2dsIL.MarkLabel(tru21)
StringParser2dsIL.MarkSequencePoint(doc4, 223, 1, 223, 100)
StringParser2dsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
StringParser2dsIL.Emit(OpCodes.Stloc, 9)
StringParser2dsIL.MarkSequencePoint(doc4, 224, 1, 224, 100)
StringParser2dsIL.Emit(OpCodes.Br, label10)
StringParser2dsIL.MarkSequencePoint(doc4, 225, 1, 225, 100)
StringParser2dsIL.Emit(OpCodes.Br, cont21)
StringParser2dsIL.MarkLabel(fa21)
StringParser2dsIL.Emit(OpCodes.Br, cont21)
StringParser2dsIL.MarkLabel(cont21)
StringParser2dsIL.MarkSequencePoint(doc4, 227, 1, 227, 100)
StringParser2dsIL.Emit(OpCodes.Ldloc, 8)
Typ = GetType(System.Int32)
StringParser2dsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa22 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
Dim tru22 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
Dim cont22 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
StringParser2dsIL.Emit(OpCodes.Beq, tru22)
StringParser2dsIL.Emit(OpCodes.Br, fa22)
StringParser2dsIL.MarkLabel(tru22)
StringParser2dsIL.MarkSequencePoint(doc4, 228, 1, 228, 100)
StringParser2dsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
StringParser2dsIL.Emit(OpCodes.Stloc, 9)
StringParser2dsIL.MarkSequencePoint(doc4, 229, 1, 229, 100)
StringParser2dsIL.Emit(OpCodes.Br, label10)
StringParser2dsIL.MarkSequencePoint(doc4, 230, 1, 230, 100)
StringParser2dsIL.Emit(OpCodes.Br, cont22)
StringParser2dsIL.MarkLabel(fa22)
StringParser2dsIL.Emit(OpCodes.Br, cont22)
StringParser2dsIL.MarkLabel(cont22)
StringParser2dsIL.MarkSequencePoint(doc4, 232, 1, 232, 100)
StringParser2dsIL.MarkLabel(label10)
StringParser2dsIL.MarkSequencePoint(doc4, 234, 1, 234, 100)
StringParser2dsIL.Emit(OpCodes.Ldloc, 9)
Typ = GetType(System.Int32)
StringParser2dsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa23 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
Dim tru23 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
Dim cont23 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
StringParser2dsIL.Emit(OpCodes.Beq, tru23)
StringParser2dsIL.Emit(OpCodes.Br, fa23)
StringParser2dsIL.MarkLabel(tru23)
StringParser2dsIL.MarkSequencePoint(doc4, 235, 1, 235, 100)
StringParser2dsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
StringParser2dsIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa24 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
Dim tru24 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
Dim cont24 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
StringParser2dsIL.Emit(OpCodes.Beq, tru24)
StringParser2dsIL.Emit(OpCodes.Br, fa24)
StringParser2dsIL.MarkLabel(tru24)
StringParser2dsIL.MarkSequencePoint(doc4, 237, 1, 237, 100)
Dim typ21(-1) As Type
StringParser2dsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.String)
ReDim Preserve typ21(UBound(typ21) + 1)
typ21(UBound(typ21)) = Typ
StringParser2dsIL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ReDim Preserve typ21(UBound(typ21) + 1)
typ21(UBound(typ21)) = Typ
StringParser2dsIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ21))
Typ = GetType(String).GetMethod("Compare", typ21).ReturnType
StringParser2dsIL.Emit(OpCodes.Stloc, 7)
StringParser2dsIL.MarkSequencePoint(doc4, 239, 1, 239, 100)
StringParser2dsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
StringParser2dsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa25 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
Dim tru25 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
Dim cont25 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
StringParser2dsIL.Emit(OpCodes.Beq, fa25)
StringParser2dsIL.Emit(OpCodes.Br, tru25)
StringParser2dsIL.MarkLabel(tru25)
StringParser2dsIL.MarkSequencePoint(doc4, 240, 1, 240, 100)
Dim typ22(-1) As Type
StringParser2dsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.String).MakeArrayType()
ReDim Preserve typ22(UBound(typ22) + 1)
typ22(UBound(typ22)) = Typ
StringParser2dsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.String)
ReDim Preserve typ22(UBound(typ22) + 1)
typ22(UBound(typ22)) = Typ
StringParser2dsIL.Emit(OpCodes.Call, addelem)
Typ = addelem.ReturnType
StringParser2dsIL.Emit(OpCodes.Stloc, 0)
StringParser2dsIL.MarkSequencePoint(doc4, 241, 1, 241, 100)
StringParser2dsIL.Emit(OpCodes.Br, cont25)
StringParser2dsIL.MarkLabel(fa25)
StringParser2dsIL.Emit(OpCodes.Br, cont25)
StringParser2dsIL.MarkLabel(cont25)
StringParser2dsIL.MarkSequencePoint(doc4, 242, 1, 242, 100)
StringParser2dsIL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
StringParser2dsIL.Emit(OpCodes.Stloc, 3)
StringParser2dsIL.MarkSequencePoint(doc4, 243, 1, 243, 100)
StringParser2dsIL.Emit(OpCodes.Br, cont24)
StringParser2dsIL.MarkLabel(fa24)
StringParser2dsIL.Emit(OpCodes.Br, cont24)
StringParser2dsIL.MarkLabel(cont24)
StringParser2dsIL.MarkSequencePoint(doc4, 244, 1, 244, 100)
StringParser2dsIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
StringParser2dsIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa26 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
Dim tru26 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
Dim cont26 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
StringParser2dsIL.Emit(OpCodes.Beq, tru26)
StringParser2dsIL.Emit(OpCodes.Br, fa26)
StringParser2dsIL.MarkLabel(tru26)
StringParser2dsIL.MarkSequencePoint(doc4, 245, 1, 245, 100)
Dim typ23(-1) As Type
StringParser2dsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.String)
ReDim Preserve typ23(UBound(typ23) + 1)
typ23(UBound(typ23)) = Typ
StringParser2dsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReDim Preserve typ23(UBound(typ23) + 1)
typ23(UBound(typ23)) = Typ
StringParser2dsIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ23))
Typ = GetType(String).GetMethod("Concat", typ23).ReturnType
StringParser2dsIL.Emit(OpCodes.Stloc, 3)
StringParser2dsIL.MarkSequencePoint(doc4, 246, 1, 246, 100)
StringParser2dsIL.Emit(OpCodes.Br, cont26)
StringParser2dsIL.MarkLabel(fa26)
StringParser2dsIL.Emit(OpCodes.Br, cont26)
StringParser2dsIL.MarkLabel(cont26)
StringParser2dsIL.MarkSequencePoint(doc4, 247, 1, 247, 100)
StringParser2dsIL.Emit(OpCodes.Br, cont23)
StringParser2dsIL.MarkLabel(fa23)
StringParser2dsIL.MarkSequencePoint(doc4, 248, 1, 248, 100)
Dim typ24(-1) As Type
StringParser2dsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.String)
ReDim Preserve typ24(UBound(typ24) + 1)
typ24(UBound(typ24)) = Typ
StringParser2dsIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.String)
ReDim Preserve typ24(UBound(typ24) + 1)
typ24(UBound(typ24)) = Typ
StringParser2dsIL.Emit(OpCodes.Call, GetType(String).GetMethod("Concat", typ24))
Typ = GetType(String).GetMethod("Concat", typ24).ReturnType
StringParser2dsIL.Emit(OpCodes.Stloc, 3)
StringParser2dsIL.MarkSequencePoint(doc4, 249, 1, 249, 100)
StringParser2dsIL.Emit(OpCodes.Br, cont23)
StringParser2dsIL.MarkLabel(cont23)
StringParser2dsIL.MarkSequencePoint(doc4, 251, 1, 251, 100)
Dim typ25(-1) As Type
StringParser2dsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.String)
ReDim Preserve typ25(UBound(typ25) + 1)
typ25(UBound(typ25)) = Typ
StringParser2dsIL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ReDim Preserve typ25(UBound(typ25) + 1)
typ25(UBound(typ25)) = Typ
StringParser2dsIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ25))
Typ = GetType(String).GetMethod("Compare", typ25).ReturnType
StringParser2dsIL.Emit(OpCodes.Stloc, 7)
StringParser2dsIL.MarkSequencePoint(doc4, 253, 1, 253, 100)
StringParser2dsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
StringParser2dsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Int32)
Dim fa27 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
Dim tru27 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
Dim cont27 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
StringParser2dsIL.Emit(OpCodes.Beq, tru27)
StringParser2dsIL.Emit(OpCodes.Br, fa27)
StringParser2dsIL.MarkLabel(tru27)
StringParser2dsIL.MarkSequencePoint(doc4, 254, 1, 254, 100)
StringParser2dsIL.Emit(OpCodes.Ldloc, 7)
Typ = GetType(System.Int32)
StringParser2dsIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa28 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
Dim tru28 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
Dim cont28 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
StringParser2dsIL.Emit(OpCodes.Beq, fa28)
StringParser2dsIL.Emit(OpCodes.Br, tru28)
StringParser2dsIL.MarkLabel(tru28)
StringParser2dsIL.MarkSequencePoint(doc4, 255, 1, 255, 100)
Dim typ26(-1) As Type
StringParser2dsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.String).MakeArrayType()
ReDim Preserve typ26(UBound(typ26) + 1)
typ26(UBound(typ26)) = Typ
StringParser2dsIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.String)
ReDim Preserve typ26(UBound(typ26) + 1)
typ26(UBound(typ26)) = Typ
StringParser2dsIL.Emit(OpCodes.Call, addelem)
Typ = addelem.ReturnType
StringParser2dsIL.Emit(OpCodes.Stloc, 0)
StringParser2dsIL.MarkSequencePoint(doc4, 256, 1, 256, 100)
StringParser2dsIL.Emit(OpCodes.Br, cont28)
StringParser2dsIL.MarkLabel(fa28)
StringParser2dsIL.Emit(OpCodes.Br, cont28)
StringParser2dsIL.MarkLabel(cont28)
StringParser2dsIL.MarkSequencePoint(doc4, 257, 1, 257, 100)
StringParser2dsIL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
StringParser2dsIL.Emit(OpCodes.Stloc, 3)
StringParser2dsIL.MarkSequencePoint(doc4, 258, 1, 258, 100)
StringParser2dsIL.Emit(OpCodes.Br, cont27)
StringParser2dsIL.MarkLabel(fa27)
StringParser2dsIL.Emit(OpCodes.Br, cont27)
StringParser2dsIL.MarkLabel(cont27)
StringParser2dsIL.MarkSequencePoint(doc4, 260, 1, 260, 100)
StringParser2dsIL.Emit(OpCodes.Ldloc, 4)
Typ = GetType(System.Int32)
StringParser2dsIL.Emit(OpCodes.Ldloc, 5)
Typ = GetType(System.Int32)
Dim fa29 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
Dim tru29 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
Dim cont29 As System.Reflection.Emit.Label = StringParser2dsIL.DefineLabel()
StringParser2dsIL.Emit(OpCodes.Beq, tru29)
StringParser2dsIL.Emit(OpCodes.Br, fa29)
StringParser2dsIL.MarkLabel(tru29)
StringParser2dsIL.MarkSequencePoint(doc4, 261, 1, 261, 100)
StringParser2dsIL.Emit(OpCodes.Br, label7)
StringParser2dsIL.MarkSequencePoint(doc4, 262, 1, 262, 100)
StringParser2dsIL.Emit(OpCodes.Br, cont29)
StringParser2dsIL.MarkLabel(fa29)
StringParser2dsIL.MarkSequencePoint(doc4, 263, 1, 263, 100)
StringParser2dsIL.Emit(OpCodes.Br, label8)
StringParser2dsIL.MarkSequencePoint(doc4, 264, 1, 264, 100)
StringParser2dsIL.Emit(OpCodes.Br, cont29)
StringParser2dsIL.MarkLabel(cont29)
StringParser2dsIL.MarkSequencePoint(doc4, 266, 1, 266, 100)
StringParser2dsIL.MarkLabel(label7)
StringParser2dsIL.MarkSequencePoint(doc4, 268, 1, 268, 100)
StringParser2dsIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.String).MakeArrayType()
StringParser2dsIL.MarkSequencePoint(doc4, 269, 1, 269, 100)
StringParser2dsIL.Emit(OpCodes.Ret)
Dim typ27(-1) As Type
ReDim Preserve typ27(UBound(typ27) + 1)
typ27(UBound(typ27)) = GetType(System.String)
ReDim Preserve typ27(UBound(typ27) + 1)
typ27(UBound(typ27)) = GetType(System.String)
Dim LikeOP As MethodBuilder = ParseUtils.DefineMethod("LikeOP", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Boolean), typ27)
Dim LikeOPIL As ILGenerator = LikeOP.GetILGenerator()
Dim LikeOPparam01 As ParameterBuilder = LikeOP.DefineParameter(1, ParameterAttributes.None, "str")
Dim LikeOPparam02 As ParameterBuilder = LikeOP.DefineParameter(2, ParameterAttributes.None, "pattern")
LikeOPIL.MarkSequencePoint(doc4, 273, 1, 273, 100)
Dim locbldr45 As LocalBuilder = LikeOPIL.DeclareLocal(GetType(System.Boolean))
locbldr45.SetLocalSymInfo("likefunc")
Dim typ28(-1) As Type
LikeOPIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ28(UBound(typ28) + 1)
typ28(UBound(typ28)) = Typ
LikeOPIL.Emit(OpCodes.Ldarg, 1)
Typ = GetType(System.String)
ReDim Preserve typ28(UBound(typ28) + 1)
typ28(UBound(typ28)) = Typ
LikeOPIL.Emit(OpCodes.Call, GetType(Regex).GetMethod("IsMatch", typ28))
Typ = GetType(Regex).GetMethod("IsMatch", typ28).ReturnType
LikeOPIL.Emit(OpCodes.Stloc, 0)
LikeOPIL.MarkSequencePoint(doc4, 275, 1, 275, 100)
LikeOPIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Boolean)
LikeOPIL.MarkSequencePoint(doc4, 277, 1, 277, 100)
LikeOPIL.Emit(OpCodes.Ret)
Dim typ29(-1) As Type
ReDim Preserve typ29(UBound(typ29) + 1)
typ29(UBound(typ29)) = GetType(System.String)
Dim RetPrec As MethodBuilder = ParseUtils.DefineMethod("RetPrec", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Int32), typ29)
Dim RetPrecIL As ILGenerator = RetPrec.GetILGenerator()
Dim RetPrecparam01 As ParameterBuilder = RetPrec.DefineParameter(1, ParameterAttributes.None, "chr")
RetPrecIL.MarkSequencePoint(doc4, 280, 1, 280, 100)
Dim label11 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
RetPrecIL.MarkSequencePoint(doc4, 282, 1, 282, 100)
Dim locbldr46 As LocalBuilder = RetPrecIL.DeclareLocal(GetType(System.Int32))
locbldr46.SetLocalSymInfo("comp")
RetPrecIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
RetPrecIL.Emit(OpCodes.Stloc, 0)
RetPrecIL.MarkSequencePoint(doc4, 283, 1, 283, 100)
Dim locbldr47 As LocalBuilder = RetPrecIL.DeclareLocal(GetType(System.Boolean))
locbldr47.SetLocalSymInfo("b1")
RetPrecIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
RetPrecIL.Emit(OpCodes.Stloc, 1)
RetPrecIL.MarkSequencePoint(doc4, 284, 1, 284, 100)
Dim locbldr48 As LocalBuilder = RetPrecIL.DeclareLocal(GetType(System.Boolean))
locbldr48.SetLocalSymInfo("b2")
RetPrecIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
RetPrecIL.Emit(OpCodes.Stloc, 2)
RetPrecIL.MarkSequencePoint(doc4, 285, 1, 285, 100)
Dim locbldr49 As LocalBuilder = RetPrecIL.DeclareLocal(GetType(System.Boolean))
locbldr49.SetLocalSymInfo("b3")
RetPrecIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
RetPrecIL.Emit(OpCodes.Stloc, 3)
RetPrecIL.MarkSequencePoint(doc4, 287, 1, 287, 100)
Dim typ30(-1) As Type
RetPrecIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ30(UBound(typ30) + 1)
typ30(UBound(typ30)) = Typ
RetPrecIL.Emit(OpCodes.Ldstr, "(")
Typ = GetType(System.String)
ReDim Preserve typ30(UBound(typ30) + 1)
typ30(UBound(typ30)) = Typ
RetPrecIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ30))
Typ = GetType(String).GetMethod("Compare", typ30).ReturnType
RetPrecIL.Emit(OpCodes.Stloc, 0)
RetPrecIL.MarkSequencePoint(doc4, 288, 1, 288, 100)
RetPrecIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
RetPrecIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa30 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim tru30 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim cont30 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
RetPrecIL.Emit(OpCodes.Beq, tru30)
RetPrecIL.Emit(OpCodes.Br, fa30)
RetPrecIL.MarkLabel(tru30)
RetPrecIL.MarkSequencePoint(doc4, 289, 1, 289, 100)
RetPrecIL.Emit(OpCodes.Ldc_I4, CInt(-1))
Typ = GetType(System.Int32)
RetPrecIL.MarkSequencePoint(doc4, 290, 1, 290, 100)
RetPrecIL.Emit(OpCodes.Br, label11)
RetPrecIL.MarkSequencePoint(doc4, 291, 1, 291, 100)
RetPrecIL.Emit(OpCodes.Br, cont30)
RetPrecIL.MarkLabel(fa30)
RetPrecIL.Emit(OpCodes.Br, cont30)
RetPrecIL.MarkLabel(cont30)
RetPrecIL.MarkSequencePoint(doc4, 293, 1, 293, 100)
Dim typ31(-1) As Type
RetPrecIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ31(UBound(typ31) + 1)
typ31(UBound(typ31)) = Typ
RetPrecIL.Emit(OpCodes.Ldstr, "*")
Typ = GetType(System.String)
ReDim Preserve typ31(UBound(typ31) + 1)
typ31(UBound(typ31)) = Typ
RetPrecIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ31))
Typ = GetType(String).GetMethod("Compare", typ31).ReturnType
RetPrecIL.Emit(OpCodes.Stloc, 0)
RetPrecIL.MarkSequencePoint(doc4, 294, 1, 294, 100)
RetPrecIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
RetPrecIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa31 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim tru31 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim cont31 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
RetPrecIL.Emit(OpCodes.Beq, tru31)
RetPrecIL.Emit(OpCodes.Br, fa31)
RetPrecIL.MarkLabel(tru31)
RetPrecIL.MarkSequencePoint(doc4, 295, 1, 295, 100)
RetPrecIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
RetPrecIL.Emit(OpCodes.Stloc, 1)
RetPrecIL.MarkSequencePoint(doc4, 296, 1, 296, 100)
RetPrecIL.Emit(OpCodes.Br, cont31)
RetPrecIL.MarkLabel(fa31)
RetPrecIL.MarkSequencePoint(doc4, 297, 1, 297, 100)
RetPrecIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
RetPrecIL.Emit(OpCodes.Stloc, 1)
RetPrecIL.MarkSequencePoint(doc4, 298, 1, 298, 100)
RetPrecIL.Emit(OpCodes.Br, cont31)
RetPrecIL.MarkLabel(cont31)
RetPrecIL.MarkSequencePoint(doc4, 300, 1, 300, 100)
Dim typ32(-1) As Type
RetPrecIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ32(UBound(typ32) + 1)
typ32(UBound(typ32)) = Typ
RetPrecIL.Emit(OpCodes.Ldstr, "/")
Typ = GetType(System.String)
ReDim Preserve typ32(UBound(typ32) + 1)
typ32(UBound(typ32)) = Typ
RetPrecIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ32))
Typ = GetType(String).GetMethod("Compare", typ32).ReturnType
RetPrecIL.Emit(OpCodes.Stloc, 0)
RetPrecIL.MarkSequencePoint(doc4, 301, 1, 301, 100)
RetPrecIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
RetPrecIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa32 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim tru32 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim cont32 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
RetPrecIL.Emit(OpCodes.Beq, tru32)
RetPrecIL.Emit(OpCodes.Br, fa32)
RetPrecIL.MarkLabel(tru32)
RetPrecIL.MarkSequencePoint(doc4, 302, 1, 302, 100)
RetPrecIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
RetPrecIL.Emit(OpCodes.Stloc, 2)
RetPrecIL.MarkSequencePoint(doc4, 303, 1, 303, 100)
RetPrecIL.Emit(OpCodes.Br, cont32)
RetPrecIL.MarkLabel(fa32)
RetPrecIL.MarkSequencePoint(doc4, 304, 1, 304, 100)
RetPrecIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
RetPrecIL.Emit(OpCodes.Stloc, 2)
RetPrecIL.MarkSequencePoint(doc4, 305, 1, 305, 100)
RetPrecIL.Emit(OpCodes.Br, cont32)
RetPrecIL.MarkLabel(cont32)
RetPrecIL.MarkSequencePoint(doc4, 307, 1, 307, 100)
Dim typ33(-1) As Type
RetPrecIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ33(UBound(typ33) + 1)
typ33(UBound(typ33)) = Typ
RetPrecIL.Emit(OpCodes.Ldstr, "%")
Typ = GetType(System.String)
ReDim Preserve typ33(UBound(typ33) + 1)
typ33(UBound(typ33)) = Typ
RetPrecIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ33))
Typ = GetType(String).GetMethod("Compare", typ33).ReturnType
RetPrecIL.Emit(OpCodes.Stloc, 0)
RetPrecIL.MarkSequencePoint(doc4, 308, 1, 308, 100)
RetPrecIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
RetPrecIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa33 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim tru33 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim cont33 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
RetPrecIL.Emit(OpCodes.Beq, tru33)
RetPrecIL.Emit(OpCodes.Br, fa33)
RetPrecIL.MarkLabel(tru33)
RetPrecIL.MarkSequencePoint(doc4, 309, 1, 309, 100)
RetPrecIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
RetPrecIL.Emit(OpCodes.Stloc, 3)
RetPrecIL.MarkSequencePoint(doc4, 310, 1, 310, 100)
RetPrecIL.Emit(OpCodes.Br, cont33)
RetPrecIL.MarkLabel(fa33)
RetPrecIL.MarkSequencePoint(doc4, 311, 1, 311, 100)
RetPrecIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
RetPrecIL.Emit(OpCodes.Stloc, 3)
RetPrecIL.MarkSequencePoint(doc4, 312, 1, 312, 100)
RetPrecIL.Emit(OpCodes.Br, cont33)
RetPrecIL.MarkLabel(cont33)
RetPrecIL.MarkSequencePoint(doc4, 314, 1, 314, 100)
RetPrecIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
RetPrecIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
RetPrecIL.Emit(OpCodes.Or)
RetPrecIL.Emit(OpCodes.Ldloc, 3)
Typ = GetType(System.Boolean)
RetPrecIL.Emit(OpCodes.Or)
RetPrecIL.Emit(OpCodes.Stloc, 1)
RetPrecIL.MarkSequencePoint(doc4, 315, 1, 315, 100)
RetPrecIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
RetPrecIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa34 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim tru34 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim cont34 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
RetPrecIL.Emit(OpCodes.Beq, tru34)
RetPrecIL.Emit(OpCodes.Br, fa34)
RetPrecIL.MarkLabel(tru34)
RetPrecIL.MarkSequencePoint(doc4, 316, 1, 316, 100)
RetPrecIL.Emit(OpCodes.Ldc_I4, CInt(8))
Typ = GetType(System.Int32)
RetPrecIL.MarkSequencePoint(doc4, 317, 1, 317, 100)
RetPrecIL.Emit(OpCodes.Br, label11)
RetPrecIL.MarkSequencePoint(doc4, 318, 1, 318, 100)
RetPrecIL.Emit(OpCodes.Br, cont34)
RetPrecIL.MarkLabel(fa34)
RetPrecIL.Emit(OpCodes.Br, cont34)
RetPrecIL.MarkLabel(cont34)
RetPrecIL.MarkSequencePoint(doc4, 320, 1, 320, 100)
Dim typ34(-1) As Type
RetPrecIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ34(UBound(typ34) + 1)
typ34(UBound(typ34)) = Typ
RetPrecIL.Emit(OpCodes.Ldstr, "+")
Typ = GetType(System.String)
ReDim Preserve typ34(UBound(typ34) + 1)
typ34(UBound(typ34)) = Typ
RetPrecIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ34))
Typ = GetType(String).GetMethod("Compare", typ34).ReturnType
RetPrecIL.Emit(OpCodes.Stloc, 0)
RetPrecIL.MarkSequencePoint(doc4, 321, 1, 321, 100)
RetPrecIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
RetPrecIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa35 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim tru35 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim cont35 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
RetPrecIL.Emit(OpCodes.Beq, tru35)
RetPrecIL.Emit(OpCodes.Br, fa35)
RetPrecIL.MarkLabel(tru35)
RetPrecIL.MarkSequencePoint(doc4, 322, 1, 322, 100)
RetPrecIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
RetPrecIL.Emit(OpCodes.Stloc, 1)
RetPrecIL.MarkSequencePoint(doc4, 323, 1, 323, 100)
RetPrecIL.Emit(OpCodes.Br, cont35)
RetPrecIL.MarkLabel(fa35)
RetPrecIL.MarkSequencePoint(doc4, 324, 1, 324, 100)
RetPrecIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
RetPrecIL.Emit(OpCodes.Stloc, 1)
RetPrecIL.MarkSequencePoint(doc4, 325, 1, 325, 100)
RetPrecIL.Emit(OpCodes.Br, cont35)
RetPrecIL.MarkLabel(cont35)
RetPrecIL.MarkSequencePoint(doc4, 327, 1, 327, 100)
Dim typ35(-1) As Type
RetPrecIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ35(UBound(typ35) + 1)
typ35(UBound(typ35)) = Typ
RetPrecIL.Emit(OpCodes.Ldstr, "-")
Typ = GetType(System.String)
ReDim Preserve typ35(UBound(typ35) + 1)
typ35(UBound(typ35)) = Typ
RetPrecIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ35))
Typ = GetType(String).GetMethod("Compare", typ35).ReturnType
RetPrecIL.Emit(OpCodes.Stloc, 0)
RetPrecIL.MarkSequencePoint(doc4, 328, 1, 328, 100)
RetPrecIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
RetPrecIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa36 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim tru36 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim cont36 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
RetPrecIL.Emit(OpCodes.Beq, tru36)
RetPrecIL.Emit(OpCodes.Br, fa36)
RetPrecIL.MarkLabel(tru36)
RetPrecIL.MarkSequencePoint(doc4, 329, 1, 329, 100)
RetPrecIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
RetPrecIL.Emit(OpCodes.Stloc, 2)
RetPrecIL.MarkSequencePoint(doc4, 330, 1, 330, 100)
RetPrecIL.Emit(OpCodes.Br, cont36)
RetPrecIL.MarkLabel(fa36)
RetPrecIL.MarkSequencePoint(doc4, 331, 1, 331, 100)
RetPrecIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
RetPrecIL.Emit(OpCodes.Stloc, 2)
RetPrecIL.MarkSequencePoint(doc4, 332, 1, 332, 100)
RetPrecIL.Emit(OpCodes.Br, cont36)
RetPrecIL.MarkLabel(cont36)
RetPrecIL.MarkSequencePoint(doc4, 334, 1, 334, 100)
RetPrecIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
RetPrecIL.Emit(OpCodes.Ldloc, 2)
Typ = GetType(System.Boolean)
RetPrecIL.Emit(OpCodes.Or)
RetPrecIL.Emit(OpCodes.Stloc, 1)
RetPrecIL.MarkSequencePoint(doc4, 336, 1, 336, 100)
RetPrecIL.Emit(OpCodes.Ldloc, 1)
Typ = GetType(System.Boolean)
RetPrecIL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
Dim fa37 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim tru37 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim cont37 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
RetPrecIL.Emit(OpCodes.Beq, tru37)
RetPrecIL.Emit(OpCodes.Br, fa37)
RetPrecIL.MarkLabel(tru37)
RetPrecIL.MarkSequencePoint(doc4, 337, 1, 337, 100)
RetPrecIL.Emit(OpCodes.Ldc_I4, CInt(6))
Typ = GetType(System.Int32)
RetPrecIL.MarkSequencePoint(doc4, 338, 1, 338, 100)
RetPrecIL.Emit(OpCodes.Br, label11)
RetPrecIL.MarkSequencePoint(doc4, 339, 1, 339, 100)
RetPrecIL.Emit(OpCodes.Br, cont37)
RetPrecIL.MarkLabel(fa37)
RetPrecIL.Emit(OpCodes.Br, cont37)
RetPrecIL.MarkLabel(cont37)
RetPrecIL.MarkSequencePoint(doc4, 341, 1, 341, 100)
Dim typ36(-1) As Type
RetPrecIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ36(UBound(typ36) + 1)
typ36(UBound(typ36)) = Typ
RetPrecIL.Emit(OpCodes.Ldstr, ")")
Typ = GetType(System.String)
ReDim Preserve typ36(UBound(typ36) + 1)
typ36(UBound(typ36)) = Typ
RetPrecIL.Emit(OpCodes.Call, GetType(String).GetMethod("Compare", typ36))
Typ = GetType(String).GetMethod("Compare", typ36).ReturnType
RetPrecIL.Emit(OpCodes.Stloc, 0)
RetPrecIL.MarkSequencePoint(doc4, 342, 1, 342, 100)
RetPrecIL.Emit(OpCodes.Ldloc, 0)
Typ = GetType(System.Int32)
RetPrecIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
Dim fa38 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim tru38 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
Dim cont38 As System.Reflection.Emit.Label = RetPrecIL.DefineLabel()
RetPrecIL.Emit(OpCodes.Beq, tru38)
RetPrecIL.Emit(OpCodes.Br, fa38)
RetPrecIL.MarkLabel(tru38)
RetPrecIL.MarkSequencePoint(doc4, 343, 1, 343, 100)
RetPrecIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
RetPrecIL.MarkSequencePoint(doc4, 344, 1, 344, 100)
RetPrecIL.Emit(OpCodes.Br, label11)
RetPrecIL.MarkSequencePoint(doc4, 345, 1, 345, 100)
RetPrecIL.Emit(OpCodes.Br, cont38)
RetPrecIL.MarkLabel(fa38)
RetPrecIL.MarkSequencePoint(doc4, 346, 1, 346, 100)
RetPrecIL.Emit(OpCodes.Ldc_I4, CInt(0))
Typ = GetType(System.Int32)
RetPrecIL.MarkSequencePoint(doc4, 347, 1, 347, 100)
RetPrecIL.Emit(OpCodes.Br, label11)
RetPrecIL.MarkSequencePoint(doc4, 348, 1, 348, 100)
RetPrecIL.Emit(OpCodes.Br, cont38)
RetPrecIL.MarkLabel(cont38)
RetPrecIL.MarkSequencePoint(doc4, 351, 1, 351, 100)
RetPrecIL.MarkLabel(label11)
RetPrecIL.MarkSequencePoint(doc4, 352, 1, 352, 100)
RetPrecIL.Emit(OpCodes.Ret)
ParseUtils.CreateType()
End Sub


Dim doc5 As ISymbolDocumentWriter

Sub Keyboard()
Dim Keyboard As TypeBuilder = mdl.DefineType("dylan.NET.Utils" & "." & "Keyboard", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass, GetType(System.Object))
Dim ReadString As MethodBuilder = Keyboard.DefineMethod("ReadString", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.String), Type.EmptyTypes)
Dim ReadStringIL As ILGenerator = ReadString.GetILGenerator()
ReadStringIL.MarkSequencePoint(doc5, 4, 1, 4, 100)
ReadStringIL.Emit(OpCodes.Call, GetType(Console).GetMethod("ReadLine", Type.EmptyTypes))
Typ = GetType(Console).GetMethod("ReadLine", Type.EmptyTypes).ReturnType
ReadStringIL.MarkSequencePoint(doc5, 5, 1, 5, 100)
ReadStringIL.Emit(OpCodes.Ret)
Dim ReadInteger As MethodBuilder = Keyboard.DefineMethod("ReadInteger", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Int32), Type.EmptyTypes)
Dim ReadIntegerIL As ILGenerator = ReadInteger.GetILGenerator()
ReadIntegerIL.MarkSequencePoint(doc5, 8, 1, 8, 100)
ReadIntegerIL.Emit(OpCodes.Call, ReadString)
Typ = ReadString.ReturnType
Dim typ0 As Type() = {Typ}
ReadIntegerIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToInt32", typ0))
Typ = GetType(System.Convert).GetMethod("ToInt32", typ0).ReturnType
ReadIntegerIL.MarkSequencePoint(doc5, 9, 1, 9, 100)
ReadIntegerIL.Emit(OpCodes.Ret)
Dim ReadSbyte As MethodBuilder = Keyboard.DefineMethod("ReadSbyte", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.SByte), Type.EmptyTypes)
Dim ReadSbyteIL As ILGenerator = ReadSbyte.GetILGenerator()
ReadSbyteIL.MarkSequencePoint(doc5, 12, 1, 12, 100)
ReadSbyteIL.Emit(OpCodes.Call, ReadString)
Typ = ReadString.ReturnType
Dim typ1 As Type() = {Typ}
ReadSbyteIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToSByte", typ1))
Typ = GetType(System.Convert).GetMethod("ToSByte", typ1).ReturnType
ReadSbyteIL.MarkSequencePoint(doc5, 13, 1, 13, 100)
ReadSbyteIL.Emit(OpCodes.Ret)
Dim ReadShort As MethodBuilder = Keyboard.DefineMethod("ReadShort", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Int16), Type.EmptyTypes)
Dim ReadShortIL As ILGenerator = ReadShort.GetILGenerator()
ReadShortIL.MarkSequencePoint(doc5, 16, 1, 16, 100)
ReadShortIL.Emit(OpCodes.Call, ReadString)
Typ = ReadString.ReturnType
Dim typ2 As Type() = {Typ}
ReadShortIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToInt16", typ2))
Typ = GetType(System.Convert).GetMethod("ToInt16", typ2).ReturnType
ReadShortIL.MarkSequencePoint(doc5, 17, 1, 17, 100)
ReadShortIL.Emit(OpCodes.Ret)
Dim ReadLong As MethodBuilder = Keyboard.DefineMethod("ReadLong", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Int64), Type.EmptyTypes)
Dim ReadLongIL As ILGenerator = ReadLong.GetILGenerator()
ReadLongIL.MarkSequencePoint(doc5, 20, 1, 20, 100)
ReadLongIL.Emit(OpCodes.Call, ReadString)
Typ = ReadString.ReturnType
Dim typ3 As Type() = {Typ}
ReadLongIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToInt64", typ3))
Typ = GetType(System.Convert).GetMethod("ToInt64", typ3).ReturnType
ReadLongIL.MarkSequencePoint(doc5, 21, 1, 21, 100)
ReadLongIL.Emit(OpCodes.Ret)
Dim ReadSingle As MethodBuilder = Keyboard.DefineMethod("ReadSingle", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Single), Type.EmptyTypes)
Dim ReadSingleIL As ILGenerator = ReadSingle.GetILGenerator()
ReadSingleIL.MarkSequencePoint(doc5, 24, 1, 24, 100)
ReadSingleIL.Emit(OpCodes.Call, ReadString)
Typ = ReadString.ReturnType
Dim typ4 As Type() = {Typ}
ReadSingleIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToSingle", typ4))
Typ = GetType(System.Convert).GetMethod("ToSingle", typ4).ReturnType
ReadSingleIL.MarkSequencePoint(doc5, 25, 1, 25, 100)
ReadSingleIL.Emit(OpCodes.Ret)
Dim ReadDouble As MethodBuilder = Keyboard.DefineMethod("ReadDouble", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Double), Type.EmptyTypes)
Dim ReadDoubleIL As ILGenerator = ReadDouble.GetILGenerator()
ReadDoubleIL.MarkSequencePoint(doc5, 28, 1, 28, 100)
ReadDoubleIL.Emit(OpCodes.Call, ReadString)
Typ = ReadString.ReturnType
Dim typ5 As Type() = {Typ}
ReadDoubleIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToDouble", typ5))
Typ = GetType(System.Convert).GetMethod("ToDouble", typ5).ReturnType
ReadDoubleIL.MarkSequencePoint(doc5, 29, 1, 29, 100)
ReadDoubleIL.Emit(OpCodes.Ret)
Dim ReadChar As MethodBuilder = Keyboard.DefineMethod("ReadChar", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Char), Type.EmptyTypes)
Dim ReadCharIL As ILGenerator = ReadChar.GetILGenerator()
ReadCharIL.MarkSequencePoint(doc5, 32, 1, 32, 100)
ReadCharIL.Emit(OpCodes.Call, ReadString)
Typ = ReadString.ReturnType
Dim typ6 As Type() = {Typ}
ReadCharIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToChar", typ6))
Typ = GetType(System.Convert).GetMethod("ToChar", typ6).ReturnType
ReadCharIL.MarkSequencePoint(doc5, 33, 1, 33, 100)
ReadCharIL.Emit(OpCodes.Ret)
Dim ReadBoolean As MethodBuilder = Keyboard.DefineMethod("ReadBoolean", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Boolean), Type.EmptyTypes)
Dim ReadBooleanIL As ILGenerator = ReadBoolean.GetILGenerator()
ReadBooleanIL.MarkSequencePoint(doc5, 36, 1, 36, 100)
ReadBooleanIL.Emit(OpCodes.Call, ReadString)
Typ = ReadString.ReturnType
Dim typ7 As Type() = {Typ}
ReadBooleanIL.Emit(OpCodes.Call, GetType(System.Convert).GetMethod("ToBoolean", typ7))
Typ = GetType(System.Convert).GetMethod("ToBoolean", typ7).ReturnType
ReadBooleanIL.MarkSequencePoint(doc5, 37, 1, 37, 100)
ReadBooleanIL.Emit(OpCodes.Ret)
Keyboard.CreateType()
End Sub


Dim doc6 As ISymbolDocumentWriter

Sub StreamUtils()
Dim StreamUtils As TypeBuilder = mdl.DefineType("dylan.NET.Utils" & "." & "StreamUtils", TypeAttributes.Public Or TypeAttributes.AutoLayout Or TypeAttributes.AnsiClass Or TypeAttributes.BeforeFieldInit, GetType(System.Object))
Dim Stdin As FieldBuilder = StreamUtils.DefineField("Stdin", GetType(Stream), FieldAttributes.Public Or FieldAttributes.Static)
Dim Stdout As FieldBuilder = StreamUtils.DefineField("Stdout", GetType(Stream), FieldAttributes.Public Or FieldAttributes.Static)
Dim Stderr As FieldBuilder = StreamUtils.DefineField("Stderr", GetType(Stream), FieldAttributes.Public Or FieldAttributes.Static)
Dim InS As FieldBuilder = StreamUtils.DefineField("InS", GetType(StreamReader), FieldAttributes.Public Or FieldAttributes.Static)
Dim OutS As FieldBuilder = StreamUtils.DefineField("OutS", GetType(StreamWriter), FieldAttributes.Public Or FieldAttributes.Static)
Dim UseConsole As FieldBuilder = StreamUtils.DefineField("UseConsole", GetType(System.Boolean), FieldAttributes.Public Or FieldAttributes.Static)
Dim ctor0 As ConstructorBuilder = StreamUtils.DefineConstructor(MethodAttributes.Public Or MethodAttributes.Static,CallingConventions.Standard , Type.EmptyTypes)
Dim ctor0IL As ILGenerator = ctor0.GetILGenerator()
ctor0IL.MarkSequencePoint(doc6, 13, 1, 13, 100)
ctor0IL.Emit(OpCodes.Call, GetType(Console).GetMethod("OpenStandardInput", Type.EmptyTypes))
Typ = GetType(Console).GetMethod("OpenStandardInput", Type.EmptyTypes).ReturnType
ctor0IL.Emit(OpCodes.Stsfld, Stdin)
ctor0IL.MarkSequencePoint(doc6, 14, 1, 14, 100)
ctor0IL.Emit(OpCodes.Call, GetType(Console).GetMethod("OpenStandardError", Type.EmptyTypes))
Typ = GetType(Console).GetMethod("OpenStandardError", Type.EmptyTypes).ReturnType
ctor0IL.Emit(OpCodes.Stsfld, Stderr)
ctor0IL.MarkSequencePoint(doc6, 15, 1, 15, 100)
ctor0IL.Emit(OpCodes.Call, GetType(Console).GetMethod("OpenStandardOutput", Type.EmptyTypes))
Typ = GetType(Console).GetMethod("OpenStandardOutput", Type.EmptyTypes).ReturnType
ctor0IL.Emit(OpCodes.Stsfld, Stdout)
ctor0IL.MarkSequencePoint(doc6, 16, 1, 16, 100)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stsfld, InS)
ctor0IL.MarkSequencePoint(doc6, 17, 1, 17, 100)
ctor0IL.Emit(OpCodes.Ldnull)
ctor0IL.Emit(OpCodes.Stsfld, OutS)
ctor0IL.MarkSequencePoint(doc6, 18, 1, 18, 100)
ctor0IL.Emit(OpCodes.Ldc_I4, 1)
Typ = GetType(System.Boolean)
ctor0IL.Emit(OpCodes.Stsfld, UseConsole)
ctor0IL.MarkSequencePoint(doc6, 19, 1, 19, 100)
ctor0IL.Emit(OpCodes.Ret)
Dim typ0(-1) As Type
ReDim Preserve typ0(UBound(typ0) + 1)
typ0(UBound(typ0)) = GetType(Stream)
Dim InitInS As MethodBuilder = StreamUtils.DefineMethod("InitInS", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ0)
Dim InitInSIL As ILGenerator = InitInS.GetILGenerator()
Dim InitInSparam01 As ParameterBuilder = InitInS.DefineParameter(1, ParameterAttributes.None, "s")
InitInSIL.MarkSequencePoint(doc6, 22, 1, 22, 100)
InitInSIL.Emit(OpCodes.Ldsfld, InS)
Typ = InS.FieldType
InitInSIL.Emit(OpCodes.Ldnull)
Dim fa39 As System.Reflection.Emit.Label = InitInSIL.DefineLabel()
Dim tru39 As System.Reflection.Emit.Label = InitInSIL.DefineLabel()
Dim cont39 As System.Reflection.Emit.Label = InitInSIL.DefineLabel()
InitInSIL.Emit(OpCodes.Beq, fa39)
InitInSIL.Emit(OpCodes.Br, tru39)
InitInSIL.MarkLabel(tru39)
InitInSIL.MarkSequencePoint(doc6, 23, 1, 23, 100)
InitInSIL.Emit(OpCodes.Ldsfld, InS)
Typ = InS.FieldType
Typ03 = Typ
InitInSIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Close", Type.EmptyTypes))
Typ = Typ03.GetMethod("Close", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
InitInSIL.Emit(OpCodes.Pop)
End If
InitInSIL.MarkSequencePoint(doc6, 24, 1, 24, 100)
InitInSIL.Emit(OpCodes.Br, cont39)
InitInSIL.MarkLabel(fa39)
InitInSIL.Emit(OpCodes.Br, cont39)
InitInSIL.MarkLabel(cont39)
InitInSIL.MarkSequencePoint(doc6, 25, 1, 25, 100)
Dim typ2(-1) As Type
InitInSIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Stream)
ReDim Preserve typ2(UBound(typ2) + 1)
typ2(UBound(typ2)) = Typ
InitInSIL.Emit(OpCodes.Newobj, GetType(StreamReader).GetConstructor(typ2))
InitInSIL.Emit(OpCodes.Stsfld, InS)
InitInSIL.MarkSequencePoint(doc6, 26, 1, 26, 100)
InitInSIL.Emit(OpCodes.Ret)
Dim typ3(-1) As Type
ReDim Preserve typ3(UBound(typ3) + 1)
typ3(UBound(typ3)) = GetType(Stream)
Dim InitOutS As MethodBuilder = StreamUtils.DefineMethod("InitOutS", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ3)
Dim InitOutSIL As ILGenerator = InitOutS.GetILGenerator()
Dim InitOutSparam01 As ParameterBuilder = InitOutS.DefineParameter(1, ParameterAttributes.None, "s")
InitOutSIL.MarkSequencePoint(doc6, 29, 1, 29, 100)
InitOutSIL.Emit(OpCodes.Ldsfld, OutS)
Typ = OutS.FieldType
InitOutSIL.Emit(OpCodes.Ldnull)
Dim fa40 As System.Reflection.Emit.Label = InitOutSIL.DefineLabel()
Dim tru40 As System.Reflection.Emit.Label = InitOutSIL.DefineLabel()
Dim cont40 As System.Reflection.Emit.Label = InitOutSIL.DefineLabel()
InitOutSIL.Emit(OpCodes.Beq, fa40)
InitOutSIL.Emit(OpCodes.Br, tru40)
InitOutSIL.MarkLabel(tru40)
InitOutSIL.MarkSequencePoint(doc6, 30, 1, 30, 100)
InitOutSIL.Emit(OpCodes.Ldsfld, OutS)
Typ = OutS.FieldType
Typ03 = Typ
InitOutSIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Close", Type.EmptyTypes))
Typ = Typ03.GetMethod("Close", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
InitOutSIL.Emit(OpCodes.Pop)
End If
InitOutSIL.MarkSequencePoint(doc6, 31, 1, 31, 100)
InitOutSIL.Emit(OpCodes.Br, cont40)
InitOutSIL.MarkLabel(fa40)
InitOutSIL.Emit(OpCodes.Br, cont40)
InitOutSIL.MarkLabel(cont40)
InitOutSIL.MarkSequencePoint(doc6, 32, 1, 32, 100)
Dim typ5(-1) As Type
InitOutSIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(Stream)
ReDim Preserve typ5(UBound(typ5) + 1)
typ5(UBound(typ5)) = Typ
InitOutSIL.Emit(OpCodes.Newobj, GetType(StreamWriter).GetConstructor(typ5))
InitOutSIL.Emit(OpCodes.Stsfld, OutS)
InitOutSIL.MarkSequencePoint(doc6, 33, 1, 33, 100)
InitOutSIL.Emit(OpCodes.Ret)
Dim InitInOutSWithStd As MethodBuilder = StreamUtils.DefineMethod("InitInOutSWithStd", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim InitInOutSWithStdIL As ILGenerator = InitInOutSWithStd.GetILGenerator()
InitInOutSWithStdIL.MarkSequencePoint(doc6, 36, 1, 36, 100)
Dim typ6(-1) As Type
InitInOutSWithStdIL.Emit(OpCodes.Ldsfld, Stdin)
Typ = Stdin.FieldType
ReDim Preserve typ6(UBound(typ6) + 1)
typ6(UBound(typ6)) = Typ
InitInOutSWithStdIL.Emit(OpCodes.Call, InitInS)
Typ = InitInS.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
InitInOutSWithStdIL.Emit(OpCodes.Pop)
End If
InitInOutSWithStdIL.MarkSequencePoint(doc6, 37, 1, 37, 100)
Dim typ7(-1) As Type
InitInOutSWithStdIL.Emit(OpCodes.Ldsfld, Stdout)
Typ = Stdout.FieldType
ReDim Preserve typ7(UBound(typ7) + 1)
typ7(UBound(typ7)) = Typ
InitInOutSWithStdIL.Emit(OpCodes.Call, InitOutS)
Typ = InitOutS.ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
InitInOutSWithStdIL.Emit(OpCodes.Pop)
End If
InitInOutSWithStdIL.MarkSequencePoint(doc6, 38, 1, 38, 100)
InitInOutSWithStdIL.Emit(OpCodes.Ret)
Dim CloseInS As MethodBuilder = StreamUtils.DefineMethod("CloseInS", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim CloseInSIL As ILGenerator = CloseInS.GetILGenerator()
CloseInSIL.MarkSequencePoint(doc6, 41, 1, 41, 100)
CloseInSIL.Emit(OpCodes.Ldsfld, InS)
Typ = InS.FieldType
CloseInSIL.Emit(OpCodes.Ldnull)
Dim fa41 As System.Reflection.Emit.Label = CloseInSIL.DefineLabel()
Dim tru41 As System.Reflection.Emit.Label = CloseInSIL.DefineLabel()
Dim cont41 As System.Reflection.Emit.Label = CloseInSIL.DefineLabel()
CloseInSIL.Emit(OpCodes.Beq, fa41)
CloseInSIL.Emit(OpCodes.Br, tru41)
CloseInSIL.MarkLabel(tru41)
CloseInSIL.MarkSequencePoint(doc6, 42, 1, 42, 100)
CloseInSIL.Emit(OpCodes.Ldsfld, InS)
Typ = InS.FieldType
Typ03 = Typ
CloseInSIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Close", Type.EmptyTypes))
Typ = Typ03.GetMethod("Close", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
CloseInSIL.Emit(OpCodes.Pop)
End If
CloseInSIL.MarkSequencePoint(doc6, 43, 1, 43, 100)
CloseInSIL.Emit(OpCodes.Br, cont41)
CloseInSIL.MarkLabel(fa41)
CloseInSIL.Emit(OpCodes.Br, cont41)
CloseInSIL.MarkLabel(cont41)
CloseInSIL.MarkSequencePoint(doc6, 44, 1, 44, 100)
CloseInSIL.Emit(OpCodes.Ret)
Dim CloseOutS As MethodBuilder = StreamUtils.DefineMethod("CloseOutS", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), Type.EmptyTypes)
Dim CloseOutSIL As ILGenerator = CloseOutS.GetILGenerator()
CloseOutSIL.MarkSequencePoint(doc6, 47, 1, 47, 100)
CloseOutSIL.Emit(OpCodes.Ldsfld, OutS)
Typ = OutS.FieldType
CloseOutSIL.Emit(OpCodes.Ldnull)
Dim fa42 As System.Reflection.Emit.Label = CloseOutSIL.DefineLabel()
Dim tru42 As System.Reflection.Emit.Label = CloseOutSIL.DefineLabel()
Dim cont42 As System.Reflection.Emit.Label = CloseOutSIL.DefineLabel()
CloseOutSIL.Emit(OpCodes.Beq, fa42)
CloseOutSIL.Emit(OpCodes.Br, tru42)
CloseOutSIL.MarkLabel(tru42)
CloseOutSIL.MarkSequencePoint(doc6, 48, 1, 48, 100)
CloseOutSIL.Emit(OpCodes.Ldsfld, OutS)
Typ = OutS.FieldType
Typ03 = Typ
CloseOutSIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Close", Type.EmptyTypes))
Typ = Typ03.GetMethod("Close", Type.EmptyTypes).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
CloseOutSIL.Emit(OpCodes.Pop)
End If
CloseOutSIL.MarkSequencePoint(doc6, 49, 1, 49, 100)
CloseOutSIL.Emit(OpCodes.Br, cont42)
CloseOutSIL.MarkLabel(fa42)
CloseOutSIL.Emit(OpCodes.Br, cont42)
CloseOutSIL.MarkLabel(cont42)
CloseOutSIL.MarkSequencePoint(doc6, 50, 1, 50, 100)
CloseOutSIL.Emit(OpCodes.Ret)
Dim ReadLine As MethodBuilder = StreamUtils.DefineMethod("ReadLine", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.String), Type.EmptyTypes)
Dim ReadLineIL As ILGenerator = ReadLine.GetILGenerator()
ReadLineIL.MarkSequencePoint(doc6, 53, 1, 53, 100)
ReadLineIL.Emit(OpCodes.Ldsfld, UseConsole)
Typ = UseConsole.FieldType
ReadLineIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa43 As System.Reflection.Emit.Label = ReadLineIL.DefineLabel()
Dim tru43 As System.Reflection.Emit.Label = ReadLineIL.DefineLabel()
Dim cont43 As System.Reflection.Emit.Label = ReadLineIL.DefineLabel()
ReadLineIL.Emit(OpCodes.Beq, tru43)
ReadLineIL.Emit(OpCodes.Br, fa43)
ReadLineIL.MarkLabel(tru43)
ReadLineIL.MarkSequencePoint(doc6, 54, 1, 54, 100)
ReadLineIL.Emit(OpCodes.Ldsfld, InS)
Typ = InS.FieldType
ReadLineIL.Emit(OpCodes.Ldnull)
Dim fa44 As System.Reflection.Emit.Label = ReadLineIL.DefineLabel()
Dim tru44 As System.Reflection.Emit.Label = ReadLineIL.DefineLabel()
Dim cont44 As System.Reflection.Emit.Label = ReadLineIL.DefineLabel()
ReadLineIL.Emit(OpCodes.Beq, fa44)
ReadLineIL.Emit(OpCodes.Br, tru44)
ReadLineIL.MarkLabel(tru44)
ReadLineIL.MarkSequencePoint(doc6, 55, 1, 55, 100)
ReadLineIL.Emit(OpCodes.Ldsfld, InS)
Typ = InS.FieldType
Typ03 = Typ
ReadLineIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("ReadLine", Type.EmptyTypes))
Typ = Typ03.GetMethod("ReadLine", Type.EmptyTypes).ReturnType
ReadLineIL.MarkSequencePoint(doc6, 56, 1, 56, 100)
ReadLineIL.Emit(OpCodes.Br, cont44)
ReadLineIL.MarkLabel(fa44)
ReadLineIL.MarkSequencePoint(doc6, 57, 1, 57, 100)
ReadLineIL.Emit(OpCodes.Ldstr, "")
Typ = GetType(System.String)
ReadLineIL.MarkSequencePoint(doc6, 58, 1, 58, 100)
ReadLineIL.Emit(OpCodes.Br, cont44)
ReadLineIL.MarkLabel(cont44)
ReadLineIL.MarkSequencePoint(doc6, 59, 1, 59, 100)
ReadLineIL.Emit(OpCodes.Br, cont43)
ReadLineIL.MarkLabel(fa43)
ReadLineIL.MarkSequencePoint(doc6, 60, 1, 60, 100)
ReadLineIL.Emit(OpCodes.Call, GetType(Console).GetMethod("ReadLine", Type.EmptyTypes))
Typ = GetType(Console).GetMethod("ReadLine", Type.EmptyTypes).ReturnType
ReadLineIL.MarkSequencePoint(doc6, 61, 1, 61, 100)
ReadLineIL.Emit(OpCodes.Br, cont43)
ReadLineIL.MarkLabel(cont43)
ReadLineIL.MarkSequencePoint(doc6, 62, 1, 62, 100)
ReadLineIL.Emit(OpCodes.Ret)
Dim typ11(-1) As Type
ReDim Preserve typ11(UBound(typ11) + 1)
typ11(UBound(typ11)) = GetType(System.String)
Dim WriteLine As MethodBuilder = StreamUtils.DefineMethod("WriteLine", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ11)
Dim WriteLineIL As ILGenerator = WriteLine.GetILGenerator()
Dim WriteLineparam01 As ParameterBuilder = WriteLine.DefineParameter(1, ParameterAttributes.None, "str")
WriteLineIL.MarkSequencePoint(doc6, 65, 1, 65, 100)
WriteLineIL.Emit(OpCodes.Ldsfld, UseConsole)
Typ = UseConsole.FieldType
WriteLineIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa45 As System.Reflection.Emit.Label = WriteLineIL.DefineLabel()
Dim tru45 As System.Reflection.Emit.Label = WriteLineIL.DefineLabel()
Dim cont45 As System.Reflection.Emit.Label = WriteLineIL.DefineLabel()
WriteLineIL.Emit(OpCodes.Beq, tru45)
WriteLineIL.Emit(OpCodes.Br, fa45)
WriteLineIL.MarkLabel(tru45)
WriteLineIL.MarkSequencePoint(doc6, 66, 1, 66, 100)
WriteLineIL.Emit(OpCodes.Ldsfld, OutS)
Typ = OutS.FieldType
WriteLineIL.Emit(OpCodes.Ldnull)
Dim fa46 As System.Reflection.Emit.Label = WriteLineIL.DefineLabel()
Dim tru46 As System.Reflection.Emit.Label = WriteLineIL.DefineLabel()
Dim cont46 As System.Reflection.Emit.Label = WriteLineIL.DefineLabel()
WriteLineIL.Emit(OpCodes.Beq, fa46)
WriteLineIL.Emit(OpCodes.Br, tru46)
WriteLineIL.MarkLabel(tru46)
WriteLineIL.MarkSequencePoint(doc6, 67, 1, 67, 100)
Dim typ12(-1) As Type
WriteLineIL.Emit(OpCodes.Ldsfld, OutS)
Typ = OutS.FieldType
Typ03 = Typ
WriteLineIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ12(UBound(typ12) + 1)
typ12(UBound(typ12)) = Typ
WriteLineIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("WriteLine", typ12))
Typ = Typ03.GetMethod("WriteLine", typ12).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
WriteLineIL.Emit(OpCodes.Pop)
End If
WriteLineIL.MarkSequencePoint(doc6, 68, 1, 68, 100)
WriteLineIL.Emit(OpCodes.Br, cont46)
WriteLineIL.MarkLabel(fa46)
WriteLineIL.MarkSequencePoint(doc6, 69, 1, 69, 100)
WriteLineIL.Emit(OpCodes.Br, cont46)
WriteLineIL.MarkLabel(cont46)
WriteLineIL.MarkSequencePoint(doc6, 70, 1, 70, 100)
WriteLineIL.Emit(OpCodes.Br, cont45)
WriteLineIL.MarkLabel(fa45)
WriteLineIL.MarkSequencePoint(doc6, 71, 1, 71, 100)
Dim typ13(-1) As Type
WriteLineIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ13(UBound(typ13) + 1)
typ13(UBound(typ13)) = Typ
WriteLineIL.Emit(OpCodes.Call, GetType(Console).GetMethod("WriteLine", typ13))
Typ = GetType(Console).GetMethod("WriteLine", typ13).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
WriteLineIL.Emit(OpCodes.Pop)
End If
WriteLineIL.MarkSequencePoint(doc6, 72, 1, 72, 100)
WriteLineIL.Emit(OpCodes.Br, cont45)
WriteLineIL.MarkLabel(cont45)
WriteLineIL.MarkSequencePoint(doc6, 73, 1, 73, 100)
WriteLineIL.Emit(OpCodes.Ret)
Dim typ14(-1) As Type
ReDim Preserve typ14(UBound(typ14) + 1)
typ14(UBound(typ14)) = GetType(System.String)
Dim Write As MethodBuilder = StreamUtils.DefineMethod("Write", MethodAttributes.Public Or MethodAttributes.Static, GetType(System.Void), typ14)
Dim WriteIL As ILGenerator = Write.GetILGenerator()
Dim Writeparam01 As ParameterBuilder = Write.DefineParameter(1, ParameterAttributes.None, "str")
WriteIL.MarkSequencePoint(doc6, 76, 1, 76, 100)
WriteIL.Emit(OpCodes.Ldsfld, UseConsole)
Typ = UseConsole.FieldType
WriteIL.Emit(OpCodes.Ldc_I4, 0)
Typ = GetType(System.Boolean)
Dim fa47 As System.Reflection.Emit.Label = WriteIL.DefineLabel()
Dim tru47 As System.Reflection.Emit.Label = WriteIL.DefineLabel()
Dim cont47 As System.Reflection.Emit.Label = WriteIL.DefineLabel()
WriteIL.Emit(OpCodes.Beq, tru47)
WriteIL.Emit(OpCodes.Br, fa47)
WriteIL.MarkLabel(tru47)
WriteIL.MarkSequencePoint(doc6, 77, 1, 77, 100)
WriteIL.Emit(OpCodes.Ldsfld, OutS)
Typ = OutS.FieldType
WriteIL.Emit(OpCodes.Ldnull)
Dim fa48 As System.Reflection.Emit.Label = WriteIL.DefineLabel()
Dim tru48 As System.Reflection.Emit.Label = WriteIL.DefineLabel()
Dim cont48 As System.Reflection.Emit.Label = WriteIL.DefineLabel()
WriteIL.Emit(OpCodes.Beq, fa48)
WriteIL.Emit(OpCodes.Br, tru48)
WriteIL.MarkLabel(tru48)
WriteIL.MarkSequencePoint(doc6, 78, 1, 78, 100)
Dim typ15(-1) As Type
WriteIL.Emit(OpCodes.Ldsfld, OutS)
Typ = OutS.FieldType
Typ03 = Typ
WriteIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ15(UBound(typ15) + 1)
typ15(UBound(typ15)) = Typ
WriteIL.Emit(OpCodes.Callvirt, Typ03.GetMethod("Write", typ15))
Typ = Typ03.GetMethod("Write", typ15).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
WriteIL.Emit(OpCodes.Pop)
End If
WriteIL.MarkSequencePoint(doc6, 79, 1, 79, 100)
WriteIL.Emit(OpCodes.Br, cont48)
WriteIL.MarkLabel(fa48)
WriteIL.MarkSequencePoint(doc6, 80, 1, 80, 100)
WriteIL.Emit(OpCodes.Br, cont48)
WriteIL.MarkLabel(cont48)
WriteIL.MarkSequencePoint(doc6, 81, 1, 81, 100)
WriteIL.Emit(OpCodes.Br, cont47)
WriteIL.MarkLabel(fa47)
WriteIL.MarkSequencePoint(doc6, 82, 1, 82, 100)
Dim typ16(-1) As Type
WriteIL.Emit(OpCodes.Ldarg, 0)
Typ = GetType(System.String)
ReDim Preserve typ16(UBound(typ16) + 1)
typ16(UBound(typ16)) = Typ
WriteIL.Emit(OpCodes.Call, GetType(Console).GetMethod("Write", typ16))
Typ = GetType(Console).GetMethod("Write", typ16).ReturnType
If Typ.ToString() = GetType(System.Void).ToString() Then

Else
WriteIL.Emit(OpCodes.Pop)
End If
WriteIL.MarkSequencePoint(doc6, 83, 1, 83, 100)
WriteIL.Emit(OpCodes.Br, cont47)
WriteIL.MarkLabel(cont47)
WriteIL.MarkSequencePoint(doc6, 84, 1, 84, 100)
WriteIL.Emit(OpCodes.Ret)
StreamUtils.CreateType()
End Sub

Sub Main()

asmName = New AssemblyName("dnu")
asmName.Version = New System.Version(11, 2, 8, 1)
asm  = AppDomain.CurrentDomain.DefineDynamicAssembly(asmName, AssemblyBuilderAccess.Save, CStr("E:\Code\dylannet\compiler\"))
mdl = asm.DefineDynamicModule(asmName.Name & ".dll" , asmName.Name & ".dll", True)
resw = mdl.DefineResource("dnu.resources" ,  "Description")
doc = mdl.DefineDocument("E:\Code\dylannet\compiler\dnu.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc2 = mdl.DefineDocument("E:\Code\dylannet\compiler\dnu\consts.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc3 = mdl.DefineDocument("E:\Code\dylannet\compiler\dnu\xmlu.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc4 = mdl.DefineDocument("E:\Code\dylannet\compiler\dnu\parseu.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc5 = mdl.DefineDocument("E:\Code\dylannet\compiler\dnu\keyboard.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
doc6 = mdl.DefineDocument("E:\Code\dylannet\compiler\dnu\streamu.dyl", Guid.Empty, Guid.Empty, Guid.Empty)
addstr("dnu")
addasm(asm)
Dim daType As Type = GetType(DebuggableAttribute)
Dim daCtor As ConstructorInfo = daType.GetConstructor(New Type() { GetType(DebuggableAttribute.DebuggingModes) })
Dim daBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(daCtor, New Object() {DebuggableAttribute.DebuggingModes.DisableOptimizations Or _
DebuggableAttribute.DebuggingModes.Default })
asm.SetCustomAttribute(daBuilder)

Constants()
XmlUtils()
ParseUtils()
Keyboard()
StreamUtils()
Dim vaType As Type = GetType(AssemblyFileVersionAttribute)
Dim vaCtor As ConstructorInfo = vaType.GetConstructor(New Type() { GetType(String) })
Dim vaBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(vaCtor, New Object() {"11.2.8.1"})
asm.SetCustomAttribute(vaBuilder)

Dim paType As Type = GetType(AssemblyProductAttribute)
Dim paCtor As ConstructorInfo = paType.GetConstructor(New Type() { GetType(String) })
Dim paBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(paCtor, New Object() {"dnu"})
asm.SetCustomAttribute(paBuilder)

Dim ataType As Type = GetType(AssemblyTitleAttribute)
Dim ataCtor As ConstructorInfo = ataType.GetConstructor(New Type() { GetType(String) })
Dim ataBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(ataCtor, New Object() {"dnu"})
asm.SetCustomAttribute(ataBuilder)

Dim deaType As Type = GetType(AssemblyDescriptionAttribute)
Dim deaCtor As ConstructorInfo = deaType.GetConstructor(New Type() { GetType(String) })
Dim deaBuilder As CustomAttributeBuilder = New CustomAttributeBuilder(deaCtor, New Object() {"dnu"})
asm.SetCustomAttribute(deaBuilder)


asm.DefineVersionInfoResource()
asm.Save(asmName.Name & ".dll")
End Sub


End Module