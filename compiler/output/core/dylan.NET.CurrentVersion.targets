<!--
***********************************************************************************************
dylan.NET.CurrentVersion.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

This file defines the steps in the standard build process specific for dylan.NET projects.
For example, it contains the step that actually calls the dylan.NET compiler.  The remainder
of the build process is defined in Microsoft.Common.targets, which is imported by
this file.

Copyright (C) Microsoft Corporation. All rights reserved.
Modified by Dylan Borg for dylan.NET Support, based on the C# version.
***********************************************************************************************
-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <PropertyGroup>
		<Language>dylan.NET</Language>
		<DefaultLanguageSourceExtension>.dyl</DefaultLanguageSourceExtension>
		<InputFile Condition=" '$(InputFile)' == '' ">$(AssemblyName).dyl</InputFile>
		<DebugType Condition=" '$(DebugSymbols)' != 'true' ">None</DebugType>
		<ProduceReferenceAssembly>false</ProduceReferenceAssembly>
		<ProduceReferenceAssembly Condition=" '$(ProduceReferenceAssembly)' == '' ">false</ProduceReferenceAssembly>
		<ProduceOnlyReferenceAssembly Condition=" '$(ProduceOnlyReferenceAssembly)' == '' ">false</ProduceOnlyReferenceAssembly>

        <_SdkLanguageName>dylan.NET</_SdkLanguageName>
        <_SdkLangExtention>.dyl</_SdkLangExtention>

        <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
        <TargetRuntime>Managed</TargetRuntime>
        <AlwaysUseNumericalSuffixInItemNames>true</AlwaysUseNumericalSuffixInItemNames>
        <DefineCommonItemSchemas Condition=" '$(DefineCommonItemSchemas)' == '' ">true</DefineCommonItemSchemas>
        <DefineCommonReferenceSchemas Condition=" '$(DefineCommonReferenceSchemas)' == '' ">true</DefineCommonReferenceSchemas>
        <DefineCommonCapabilities Condition=" '$(DefineCommonCapabilities)' == '' ">true</DefineCommonCapabilities>
        <SynthesizeLinkMetadata Condition=" '$(SynthesizeLinkMetadata)' == '' and '$(HasSharedItems)' == 'true' ">true</SynthesizeLinkMetadata>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
        <DefineConstants>$(DefineConstants);DEBUG;TRACE</DefineConstants>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
        <DefineConstants>$(DefineConstants);TRACE</DefineConstants>
        <DebugType>None</DebugType>
    </PropertyGroup>

    <PropertyGroup Condition="'$(DisableImplicitConfigurationDefines)' != 'true'">
        <ImplicitConfigurationDefine>$(Configuration.ToUpperInvariant())</ImplicitConfigurationDefine>

        <!-- Replace dashes and periods in the configuration with underscores.  This makes it more likely that
            the resulting compilation constant will be a valid C# conditional compilation symbol.  As the set
            of characters that aren't allowed is essentially open-ended, there's probably not a good way to
            fully sanitize the Configuration in MSBuild evaluation.  If the resulting string still isn't a
            valid conditional combilation symbol, then the compiler will generate the following error and
            the define will be ignored:
                warning MSB3052: The parameter to the compiler is invalid, '/define:0BAD_DEFINE' will be ignored.
            -->

        <ImplicitConfigurationDefine>$(ImplicitConfigurationDefine.Replace('-', '_'))</ImplicitConfigurationDefine>
        <ImplicitConfigurationDefine>$(ImplicitConfigurationDefine.Replace('.', '_'))</ImplicitConfigurationDefine>
        <ImplicitConfigurationDefine>$(ImplicitConfigurationDefine.Replace(' ', '_'))</ImplicitConfigurationDefine>
        <DefineConstants>$(DefineConstants);$(ImplicitConfigurationDefine)</DefineConstants>
    </PropertyGroup>
    <PropertyGroup>
        <DefineConstants>$(DefineConstants);$(VersionlessImplicitFrameworkDefine);$(ImplicitFrameworkDefine)</DefineConstants>
    </PropertyGroup>

    <ItemGroup>
        <!--<PropertyPageSchema Include="$(CommonXamlResourcesDirectory)CSharp.ProjectItemsSchema.xaml;"/>
        <PropertyPageSchema Include="$(CommonXamlResourcesDirectory)CSharp.xaml;">
            <Context>File</Context>
        </PropertyPageSchema>
        <PropertyPageSchema Include="$(CommonXamlResourcesDirectory)CSharp.BrowseObject.xaml;">
            <Context>BrowseObject</Context>
        </PropertyPageSchema>-->

        <ProjectCapability Include="dylan.NET;Managed"/>
        <!--<Compile Include="**\*.dyl" />
        <Compile Include="*.dyl" />-->
        <Compile Remove="msbuild.dyl" />
    </ItemGroup>

    <ItemGroup Condition=" '$(DefineCommonCapabilities)' == 'true' ">
      <ProjectCapability Include="ReferencesFolder" />
      <ProjectCapability Include="ProjectConfigurationsInferredFromUsage" />
    </ItemGroup>

    <!--
    The CreateManifestResourceNames target create the manifest resource names from the .RESX
    files.

        [IN]
        @(EmbeddedResource) - The list of EmbeddedResource items that have been pre-processed to add metadata about resource type
                              Expected Metadata "Type" can either be "Resx" or "Non-Resx"

        [OUT]
        @(EmbeddedResource) - EmbeddedResource items with metadata

    For C# applications the transformation is like:

        Resources1.resx => RootNamespace.Resources1 => Build into main assembly
        SubFolder\Resources1.resx => RootNamespace.SubFolder.Resources1 => Build into main assembly
        Resources1.fr.resx => RootNamespace.Resources1.fr => Build into satellite assembly
        Resources1.notaculture.resx => RootNamespace.Resources1.notaculture => Build into main assembly

    For other project systems, this transformation may be different.
    -->
    <PropertyGroup>
        <CreateManifestResourceNamesDependsOn></CreateManifestResourceNamesDependsOn>
    </PropertyGroup>
    <Target
        Name="CreateManifestResourceNames"
        Condition="'@(EmbeddedResource)' != ''"
        DependsOnTargets="$(CreateManifestResourceNamesDependsOn)"
        >

        <ItemGroup>
            <_Temporary Remove="@(_Temporary)" />
        </ItemGroup>

        <!-- Create manifest names for culture and non-culture Resx files, and for non-culture Non-Resx resources -->
        <CreateCSharpManifestResourceName
              ResourceFiles="@(EmbeddedResource)"
              RootNamespace="$(RootNamespace)"
              Condition="'%(EmbeddedResource.ManifestResourceName)' == '' and ('%(EmbeddedResource.WithCulture)' == 'false' or '%(EmbeddedResource.Type)' == 'Resx')">

            <Output TaskParameter="ResourceFilesWithManifestResourceNames" ItemName="_Temporary" />

        </CreateCSharpManifestResourceName>

        <!-- Create manifest names for all culture non-resx resources -->
        <CreateCSharpManifestResourceName
              ResourceFiles="@(EmbeddedResource)"
              RootNamespace="$(RootNamespace)"
              PrependCultureAsDirectory="false"
              Condition="'%(EmbeddedResource.ManifestResourceName)' == '' and '%(EmbeddedResource.WithCulture)' == 'true' and '%(EmbeddedResource.Type)' == 'Non-Resx'">

            <Output TaskParameter="ResourceFilesWithManifestResourceNames" ItemName="_Temporary" />

        </CreateCSharpManifestResourceName>

        <ItemGroup>
            <EmbeddedResource Remove="@(EmbeddedResource)" Condition="'%(EmbeddedResource.ManifestResourceName)' == ''"/>
            <EmbeddedResource Include="@(_Temporary)" />
            <_Temporary Remove="@(_Temporary)" />
        </ItemGroup>

    </Target>

    <ItemGroup>
        <!-- Activate CPS projects to track folder names in namespace. -->
        <ProjectCapability Include="RelativePathDerivedDefaultNamespace"/>
    </ItemGroup>

    <ItemGroup>
        <DocFileItem Include="$(DocumentationFile)" Condition="'$(DocumentationFile)'!=''"/>
    </ItemGroup>

    <ItemGroup Condition="'$(_DebugSymbolsProduced)' == 'true' and '$(PdbFile)' != ''">
        <_DebugSymbolsIntermediatePathTemporary Include="$(PdbFile)"/>
        <!-- Add any missing .pdb extension, as the compiler does -->
        <_DebugSymbolsIntermediatePath Include="@(_DebugSymbolsIntermediatePathTemporary->'%(RootDir)%(Directory)%(Filename).pdb')"/>
    </ItemGroup>

    <PropertyGroup>
        <DNCoreTargetsPath Condition="'$(DNCoreTargetsPath)' == ''">dylan.NET.Core.targets</DNCoreTargetsPath>
    </PropertyGroup>

    <Import Project="$(MSBuildToolsPath)\Microsoft.Common.targets" />
    <Import Project="$(MSBuildToolsPath)\Microsoft.ServiceModel.targets" Condition="('$(TargetFrameworkVersion)' != 'v2.0' and '$(TargetFrameworkVersion)' != 'v3.0' and '$(TargetFrameworkVersion)' != 'v3.5') and Exists('$(MSBuildToolsPath)\Microsoft.ServiceModel.targets')"/>
    <Import Project="$(DNCoreTargetsPath)" />

    <Target Name="_SetTargetFrameworkMonikerAttribute" BeforeTargets="GenerateTargetFrameworkMonikerAttribute">
       <!--<PropertyGroup>
       <TargetFrameworkMonikerAssemblyAttributeText Condition="'$(TargetFrameworkMoniker)' != '' and '$(TargetingClr2Framework)' != 'true'">
// &lt;autogenerated /&gt;
using System%3b
using System.Reflection%3b
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(&quot;$(TargetFrameworkMoniker)&quot;, FrameworkDisplayName = &quot;$(TargetFrameworkMonikerDisplayName)&quot;)]
        </TargetFrameworkMonikerAssemblyAttributeText>
        </PropertyGroup>-->
    </Target>

    <PropertyGroup>
       <Utf8Output Condition="'$(Utf8Output)' == ''">true</Utf8Output>

      <!-- NoCompilerStandardLib maps to the compiler's /nostdlib option. By default we always
           want that switch to be passed to the compiler so that either we or the user
           provides the references
           NoStdLib on the other hand indicates that the user doesn't want standard references
           so only if NoStdLib isn't set to true, will we provide the standard references
      -->
      <NoCompilerStandardLib Condition=" '$(NoCompilerStandardLib)' == '' ">true</NoCompilerStandardLib>

      <ErrorEndLocation Condition="'$(BuildingInsideVisualStudio)' == 'true' and '$(ErrorEndLocation)' == ''">true</ErrorEndLocation>

       <!-- When building inside VS, by default use the same language for compiler messages as VS itself does. -->
       <PreferredUILang Condition="'$(BuildingInsideVisualStudio)' == 'true' and '$(PreferredUILang)' == ''">$([System.Globalization.CultureInfo]::CurrentUICulture.Name)</PreferredUILang>
    </PropertyGroup>

    <!-- Add any "automatic" compiler references that need to be resolved when NoCompilerStandardLib is set
         but the user hasn't told us to not include standard references -->
    <ItemGroup Condition=" '$(NoCompilerStandardLib)' == 'true' and '$(NoStdLib)' != 'true' ">
      <!-- Note that unlike VB, C# does not automatically locate System.dll as a "standard library"
           instead the reference is always passed from the project. Also, for mscorlib.dll
           we need to provide the explicit location in order to maintain the correct behaviour
      -->
        <_ExplicitReference Include="$(FrameworkPathOverride)\mscorlib.dll" />
    </ItemGroup>

</Project>
