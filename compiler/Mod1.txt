class public auto ansi Module1

method public static void main(var args as string[])

Console::WriteLine("dylan.NET Compiler v. 11.2.4 for Microsoft (R) .NET Framework (R) v. 3.5 SP1")
Console::WriteLine("                           and Novell Mono v. 2.6.7 /v. 2.10")
Console::WriteLine("Copyright (C) Dylan Borg 2010")
if args[l] < 1 then
Console::WriteLine("Usage: dnc <path>")
else

try

var p as string = args[0]
var lx as Lexer = new Lexer()
var pstmts as StmtSet = lx::Analyze(p)
var ps as Parser = new Parser()
var ppstmts as StmtSet = ps::Parse(pstmts)
var cg as CodeGenerator = new CodeGenerator()
cg::EmitMSIL(ppstmts)

var typs as System.Type[] = newarr System.Type 2
typs[0] = gettype string
typs[1] = gettype string

var t1 as System.Type = Loader::LoadClass("FieldAttributes")
var t1s as string = t1::ToString()
Console::WriteLine(t1s)
//var m1 as MethodInfo = Loader::LoadMethod(t1,"MakeArrayType",System.Type::EmptyTypes)
//var m1s as string = m1::ToString()
//Console::WriteLine(m1s)
var f1 as FieldInfo = Loader::LoadField(t1,"Literal")
var f1s as string = f1::ToString()
Console::WriteLine(f1s)
if Loader::FldLitFlag = true then
var t2 as System.Type = Loader::FldLitTyp
var t2s as string = t2::ToString()
Console::WriteLine(t2s)
Console::WriteLine($string$Loader::FldLitVal)
if Loader::EnumLitFlag = true then
var t3 as System.Type = Loader::EnumLitTyp
var t3s as string = t3::ToString()
Console::WriteLine(t3s)
end if
end if

catch ex as Exception

var exstr as string = ex::ToString()
Console::WriteLine(exstr)
Console::ReadKey()

end try

end if

end method

end class