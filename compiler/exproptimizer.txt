class public auto ansi ExprOptimizer

method public Expr checkVarAs(var stm as Expr, var b as boolean&)
var tok as Token = stm::Tokens[0]
var typ as System.Type = gettype VarTok
valinref|b = typ::IsInstanceOfType($object$tok)
var vars as VarExpr = new VarExpr()

if valinref|b = true then
vars::Tokens = stm::Tokens
vars::Line = stm::Line
vars::VarName = stm::Tokens[1]

var tok2 as Token = stm::Tokens[3]
var typ2 as System.Type = gettype TypeTok
var b2 as boolean = typ2::IsInstanceOfType($object$tok2)

if b2 <> true then
var t as Token = stm::Tokens[3]
var tt as TypeTok = new TypeTok()
tt::Line = t::Line
tt::Value = t::Value
vars::VarTyp = tt
else
vars::VarTyp = stm::Tokens[3]
end if

end if
return vars
end method

method public Expr Optimize(var exp as Expr)

var len as integer = exp::Tokens[l] - 1
var i as integer = -1


label loop
label cont

//if len < 2 then
//goto cont
//end if

place loop

i++

label fin

var tok as Token = exp::Tokens[i]
var typ as System.Type
var b as boolean
var str as string

typ = gettype DollarSign
b = typ::IsInstanceOfType($object$tok)

if b = true then
ParserFlags::DurConvFlag = ParserFlags::DurConvFlag nor ParserFlags::DurConvFlag
ParserFlags::isChanged = true
if ParserFlags::DurConvFlag <> false then
ParserFlags::ConvFlag = true
ParserFlags::OrdOp = String::Concat("conv ", ParserFlags::OrdOp)
str = ParserFlags::OrdOp
str = str::Trim()
ParserFlags::OrdOp = str
end if
exp::RemToken(i)
i--
len = exp::Tokens[l] - 1
goto fin
end if

typ = gettype TypeTok
b = typ::IsInstanceOfType($object$tok)

if b = true then
if ParserFlags::DurConvFlag <> false then
var tt1 as TypeTok = exp::Tokens[i]
ParserFlags::ConvTyp = tt1
exp::RemToken(i)
i--
len = exp::Tokens[l] - 1
end if
goto fin
end if

typ = gettype Ident
b = typ::IsInstanceOfType($object$tok)

if b = true then
if ParserFlags::isChanged = true then
var id1 as Ident = exp::Tokens[i]
exp::Tokens[i] = ParserFlags::UpdateIdent(id1)
ParserFlags::SetUnaryFalse()
end if
goto fin
end if

place fin

if i = len then
goto cont
else
goto loop
end if

place cont

return exp
end method

end class