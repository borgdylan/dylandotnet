<doc>
    <assembly>
        <name>dylan.NET.Tasks</name>
    </assembly>
    <members>
        <member name="T:System.Threading.Tasks.AsyncValue`1">
            <typeparam name="TResult">The type of the value returned.</typeparam>
            <summary>A mechanism with which a value can be asynchronously returned from an awaited method.</summary>
            <remarks>This class may be extended further.</remarks>
        </member>
        <member name="C:System.Threading.Tasks.AsyncValue`1">
            <summary>Creates a new AsyncValue&lt;TResult&gt;.</summary>
            <remarks />
        </member>
        <member name="P:System.Threading.Tasks.AsyncValue`1.IsAvailable">
            <summary>Gets whether the value is available.</summary>
            <value>True if the value is available, else false.</value>
            <remarks>This property is automatically set to true when the Value property is set.</remarks>
        </member>
        <member name="P:System.Threading.Tasks.AsyncValue`1.Value">
            <summary>Gets or sets the value returned by the asynchronous method.</summary>
            <value>The value returned by the method.</value>
            <remarks />
        </member>
        <member name="T:System.Threading.Tasks.AsyncVoid">
            <summary>A struct with zero size that is used when no result is desired.</summary>
            <remarks />
        </member>
        <member name="C:System.Threading.Tasks.AsyncVoid">
            <summary>Initializes a new AsyncVoid.</summary>
            <remarks>This constructor does nothing and hence it is more efficient to get the default value for this struct using your programming language's syntax than calling this constructor.</remarks>
        </member>
        <member name="T:System.Threading.Tasks.ConfiguredTaskAwaitableWrapper">
            <summary>An IAwaitable implementation that wraps a ConfiguredTaskAwaitable.</summary>
            <remarks />
        </member>
        <member name="C:System.Threading.Tasks.ConfiguredTaskAwaitableWrapper(System.Runtime.CompilerServices.ConfiguredTaskAwaitable)">
            <param name="awaitable">The ConfiguredTaskAwaitable to wrap.</param>
            <summary>Constructs a new ConfiguredTaskAwaitable wrapper.</summary>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.ConfiguredTaskAwaitableWrapper.GetAwaiter">
            <summary>Gets the IAwaiter used to await this ConfiguredTaskAwaitable.</summary>
            <returns>The IAwaiter used to await this ConfiguredTaskAwaitable.</returns>
            <remarks />
        </member>
        <member name="T:System.Threading.Tasks.ConfiguredTaskAwaitableWrapper`1">
            <typeparam name="TResult">The type of result returned by this ConfiguredTaskAwaitable.</typeparam>
            <summary>An IAwaitable&lt;TResult&gt; implementation that wraps a ConfiguredTaskAwaitable&lt;TResult&gt;.</summary>
            <remarks />
        </member>
        <member name="C:System.Threading.Tasks.ConfiguredTaskAwaitableWrapper`1(`0System`0.`0Runtime`0.`0CompilerServices`0.`0ConfiguredTaskAwaitable`0{`0TResult`0})">
            <param name="awaitable">The ConfiguredTaskAwaitable&lt;TResult&gt; that should be wrapped.</param>
            <summary>Constructs a new ConfiguredTaskAwaitable&lt;TResult&gt; wrapper.</summary>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.ConfiguredTaskAwaitableWrapper`1.GetAwaiter">
            <summary>Gets the IAwaiter&lt;TResult&gt; used to await this ConfiguredTaskAwaitable&lt;TResult&gt;.</summary>
            <returns>The IAwaiter&lt;TResult&gt; used to await this ConfiguredTaskAwaitable&lt;TResult&gt;.</returns>
            <remarks />
        </member>
        <member name="T:System.Threading.Tasks.ConfiguredTaskAwaiterWrapper">
            <summary>An IAwaiter implementation that wraps a ConfiguredTaskAwaiter.</summary>
            <remarks />
        </member>
        <member name="C:System.Threading.Tasks.ConfiguredTaskAwaiterWrapper(System.Runtime.CompilerServices.ConfiguredTaskAwaitable+ConfiguredTaskAwaiter)">
            <param name="awaiter">The ConfiguredTaskAwaiter to wrap.</param>
            <summary>Constructs a new ConfiguredTaskAwaiter wrapper.</summary>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.ConfiguredTaskAwaiterWrapper.GetResult">
            <summary>Concludes the await, throwing any exceptions thrown by the configured task in the process.</summary>
            <remarks>Calls the underlying GetResult.</remarks>
        </member>
        <member name="P:System.Threading.Tasks.ConfiguredTaskAwaiterWrapper.IsCompleted">
            <summary>Gets the completion state of the configured task being awaited.</summary>
            <value>True if the completion handler can be run immediately, else false.</value>
            <remarks>Gets the underlying IsCompleted value.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.ConfiguredTaskAwaiterWrapper.OnCompleted(System.Action)">
            <param name="continuation">The function to execute as the continuation.</param>
            <summary>Registers the given function to run when the configured task resolves to a value/fails.</summary>
            <remarks>Calls the underlying OnCompleted.</remarks>
        </member>
        <member name="T:System.Threading.Tasks.ConfiguredTaskAwaiterWrapper`1">
            <typeparam name="TResult">The type of result returned by the ConfiguredTaskAwaitable being awaited.</typeparam>
            <summary>An IAwaiter&lt;TResult&gt; implementation that wraps a ConfiguredTaskAwaiter&lt;TResult&gt;.</summary>
            <remarks />
        </member>
        <member name="C:System.Threading.Tasks.ConfiguredTaskAwaiterWrapper`1(`0System`0.`0Runtime`0.`0CompilerServices`0.`0ConfiguredTaskAwaitable`0{`0TResult`0}+`0ConfiguredTaskAwaiter`0)">
            <param name="awaiter">The ConfiguredTaskAwaiter&lt;TResult&gt; to wrap.</param>
            <summary>Constructs a new ConfiguredTaskAwaiter&lt;TResult&gt; wrapper.</summary>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.ConfiguredTaskAwaiterWrapper`1.GetResult">
            <summary>Concludes the await, throwing any exceptions thrown by the configured task in the process.</summary>
            <returns>The result returned by the configured task.</returns>
            <remarks>Calls the underlying GetResult.</remarks>
        </member>
        <member name="P:System.Threading.Tasks.ConfiguredTaskAwaiterWrapper`1.IsCompleted">
            <summary>Gets the completion state of the configured task being awaited.</summary>
            <value>True if the completion handler can be run immediately, else false.</value>
            <remarks>Gets the underlying IsCompleted value.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.ConfiguredTaskAwaiterWrapper`1.OnCompleted(`0System`0.`0Action`0)">
            <param name="continuation">The function to execute as the continuation.</param>
            <summary>Registers the given function to run when the configured task resolves to a value/fails.</summary>
            <remarks>Calls the underlying OnCompleted.</remarks>
        </member>
        <member name="T:System.Threading.Tasks.ConfiguredValueTaskAwaitableWrapper`1">
            <typeparam name="TResult">The type of result returned by this ConfiguredValueTaskAwaitable.</typeparam>
            <summary>An IAwaitable&lt;TResult&gt; implementation that wraps a ConfiguredValueTaskAwaitable&lt;TResult&gt;.</summary>
            <remarks />
        </member>
        <member name="C:System.Threading.Tasks.ConfiguredValueTaskAwaitableWrapper`1(`0System`0.`0Runtime`0.`0CompilerServices`0.`0ConfiguredValueTaskAwaitable`0{`0TResult`0})">
            <param name="awaitable">The ConfiguredValueTaskAwaitable&lt;TResult&gt; that should be wrapped.</param>
            <summary>Constructs a new ConfiguredValueTaskAwaitable&lt;TResult&gt; wrapper.</summary>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.ConfiguredValueTaskAwaitableWrapper`1.GetAwaiter">
            <summary>Gets the IAwaiter&lt;TResult&gt; used to await this ConfiguredValueTaskAwaitable&lt;TResult&gt;.</summary>
            <returns>The IAwaiter&lt;TResult&gt; used to await this ConfiguredValueTaskAwaitable&lt;TResult&gt;.</returns>
            <remarks />
        </member>
        <member name="T:System.Threading.Tasks.ConfiguredValueTaskAwaiterWrapper`1">
            <typeparam name="TResult">The type of result returned by the ConfiguredValueTaskAwaitable being awaited.</typeparam>
            <summary>An IAwaiter&lt;TResult&gt; implementation that wraps a ConfiguredValueTaskAwaiter&lt;TResult&gt;.</summary>
            <remarks />
        </member>
        <member name="C:System.Threading.Tasks.ConfiguredValueTaskAwaiterWrapper`1(`0System`0.`0Runtime`0.`0CompilerServices`0.`0ConfiguredValueTaskAwaitable`0{`0TResult`0}+`0ConfiguredValueTaskAwaiter`0)">
            <param name="awaiter">The ConfiguredValueTaskAwaiter&lt;TResult&gt; to wrap.</param>
            <summary>Constructs a new ConfiguredValueTaskAwaiter&lt;TResult&gt; wrapper.</summary>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.ConfiguredValueTaskAwaiterWrapper`1.GetResult">
            <summary>Concludes the await, throwing any exceptions thrown by the configured task in the process.</summary>
            <returns>The result returned by the configured task.</returns>
            <remarks>Calls the underlying GetResult.</remarks>
        </member>
        <member name="P:System.Threading.Tasks.ConfiguredValueTaskAwaiterWrapper`1.IsCompleted">
            <summary>Gets the completion state of the configured task being awaited.</summary>
            <value>True if the completion handler can be run immediately, else false.</value>
            <remarks>Gets the underlying IsCompleted value.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.ConfiguredValueTaskAwaiterWrapper`1.OnCompleted(`0System`0.`0Action`0)">
            <param name="continuation">The function to execute as the continuation.</param>
            <summary>Registers the given function to run when the configured task resolves to a value/fails.</summary>
            <remarks>Calls the underlying OnCompleted.</remarks>
        </member>
        <member name="T:System.Threading.Tasks.DisposerTaskClosure`1">
            <typeparam name="TDisposable">The type of disposable resource that should be managed by the closure.</typeparam>
            <summary>A base class for closures used to implement asynchronous methods that also disposes a resource when the asynchronous activity is done/fails.</summary>
            <remarks>This class is based on TaskClosure and overrides its Final method to dispose the passed in resource.</remarks>
        </member>
        <member name="C:System.Threading.Tasks.DisposerTaskClosure`1(TDisposable)">
            <param name="res">The disposable resource to manage.</param>
            <summary>Creates a new DisposerTaskClosure around the given resource.</summary>
            <remarks>This constructor is protected i.e. you must inherit this class to use its features.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.DisposerTaskClosure`1.Return">
            <summary>Concludes the asynchronous activity successfully.</summary>
            <remarks>This method also handles cleanup of resources.</remarks>
        </member>
        <member name="T:System.Threading.Tasks.DisposerTaskClosure`2">
            <typeparam name="T">The return type for the asynchronous activity.</typeparam>
            <typeparam name="TDisposable">The type of disposable resource that should be managed by the closure.</typeparam>
            <summary>A base class for closures used to implement asynchronous methods that also disposes a resource when the asynchronous activity is done/fails.</summary>
            <remarks>This class is based on TaskClosure&lt;T&gt; and overrides its Final method to dispose the passed in resource.</remarks>
        </member>
        <member name="C:System.Threading.Tasks.DisposerTaskClosure`2(`0TDisposable`0)">
            <param name="res">The disposable resource to manage.</param>
            <summary>Creates a new DisposerTaskClosure around the given resource.</summary>
            <remarks>This constructor is protected i.e. you must inherit this class to use its features.</remarks>
        </member>
        <member name="F:System.Threading.Tasks.DisposerTaskClosure`2._Resource">
            <summary>Holds the disposable resource managed by this closure.</summary>
            <remarks>This field is protected. To access the resource from outside your closure, please use the Resource property.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.DisposerTaskClosure`2.Finally">
            <summary>Overrides the Finally method in the base TaskClosure to dispose of the resource managed by this closure.</summary>
            <remarks>You may further override this method to add extra behaviour.</remarks>
        </member>
        <member name="P:System.Threading.Tasks.DisposerTaskClosure`2.Resource">
            <summary>Holds the disposable resource managed by this closure.</summary>
            <value>The disposable resource managed by this closure.</value>
            <remarks>For faster access to the resource within the closure itself you may use the _Resource field.</remarks>
        </member>
        <member name="T:System.Threading.Tasks.IAsyncValue`1">
            <typeparam name="TResult">The type of the value returned.</typeparam>
            <summary>An interface for the mechanism with which a value can be asynchronously returned from an awaited method.</summary>
            <remarks>This library provides a reference implementation of this interface. The methods of this library depend on this interface, not on the implementation provided by this library to enable consumers to implement the interface in the way that is best for their application.</remarks>
        </member>
        <member name="P:System.Threading.Tasks.IAsyncValue`1.IsAvailable">
            <summary>Gets whether the value is available.</summary>
            <value>True if the value is available, else false.</value>
            <remarks>In the case where an Await overload that returns a value inside an IAsyncValue is used, you can use this property to see if the await actually happened successfully if the await was part of an optional execution path.</remarks>
        </member>
        <member name="P:System.Threading.Tasks.IAsyncValue`1.Value">
            <summary>Gets or sets the value returned by the asynchronous method.</summary>
            <value>The value returned by the method.</value>
            <remarks>Any implementation should set IsAvailable to true inside this property's setter.</remarks>
        </member>
        <member name="T:System.Threading.Tasks.IAwaitable">
            <summary>An interface that formalises what it means to be awaitable.</summary>
            <remarks>Implement this interface to allow your objects to be awaited by this library.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.IAwaitable.GetAwaiter">
            <summary>Gets the IAwaiter used to await this awaitable object.</summary>
            <returns>The IAwaiter used to await this object.</returns>
            <remarks />
        </member>
        <member name="T:System.Threading.Tasks.IAwaitable`1">
            <typeparam name="TResult">The type of result returned by this awaitable.</typeparam>
            <summary>An interface that formalises what it means to be an awaitable that returns a value.</summary>
            <remarks>Implement this interface to allow your objects to be awaited by this library.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.IAwaitable`1.GetAwaiter">
            <summary>Gets the IAwaiter&lt;TResult&gt; used to await this awaitable object.</summary>
            <returns>The IAwaiter&lt;TResult&gt; used to await this object.</returns>
            <remarks />
        </member>
        <member name="T:System.Threading.Tasks.IAwaiter">
            <summary>An interface that formalises what it means to be awaiter.</summary>
            <remarks>Implement this interface to allow your objects to be awaited by this library. You must also implement INotifyCompletion.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.IAwaiter.GetResult">
            <summary>Concludes the await, throwing any exceptions thrown by the awaitable in the process.</summary>
            <remarks>This library runs this method in its completion handlers. It runs a continuation given by the user if no exceptions are raised, else runs the user provided exception handler with the raised exception.</remarks>
        </member>
        <member name="P:System.Threading.Tasks.IAwaiter.IsCompleted">
            <summary>Gets the completion state of the awaitable being awaited.</summary>
            <value>True if the completion handler can be run immediately, else false.</value>
            <remarks>This library runs the completion handler immediately if this is true else subscribes the handler using OnCompleted.</remarks>
        </member>
        <member name="T:System.Threading.Tasks.IAwaiter`1">
            <typeparam name="TResult">The type of result returned by what is being awaited.</typeparam>
            <summary>An interface that formalises what it means to be an awaiter for something that returns a value.</summary>
            <remarks>Implement this interface to allow your objects to be awaited by this library. You must also implement INotifyCompletion.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.IAwaiter`1.GetResult">
            <summary>Concludes the await by returning the result given by the awaitable, throwing any exceptions thrown by the awaitable in the process.</summary>
            <returns>The result returned by the awaitable.</returns>
            <remarks>This library runs this method in its completion handlers. It runs a continuation given by the user if no exceptions are raised, else runs the user provided exception handler with the raised exception.</remarks>
        </member>
        <member name="P:System.Threading.Tasks.IAwaiter`1.IsCompleted">
            <summary>Gets the completion state of the awaitable being awaited.</summary>
            <value>True if the completion handler can be run immediately, else false.</value>
            <remarks>This library runs the completion handler immediately if this is true else subscribes the handler using OnCompleted.</remarks>
        </member>
        <member name="T:System.Threading.Tasks.ReflectAwaiterWrapper">
            <summary>An IAwaiter implementation that wraps an ordinary object.</summary>
            <remarks>This implementation makes use of reflection and is not available for PCLs. It is recommended to make use of strongly typed wrappers instead due to the penalties associated with reflection. If an IAwaiter implementation is passed in, no reflection will be used in preference to calling the methods on the IAwaiter directly.</remarks>
        </member>
        <member name="C:System.Threading.Tasks.ReflectAwaiterWrapper(System.Object)">
            <param name="awaiter">The object to wrap.</param>
            <summary>Constructs a new object wrapper.</summary>
            <remarks>No validation regarding whether the object's type implements the required functions is made at this point. That is done lazily when an actual function call is made.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.ReflectAwaiterWrapper.GetResult">
            <summary>Concludes the await, throwing any exceptions thrown by the awaitable in the process.</summary>
            <remarks>Calls the underlying GetResult by using reflection. If the given awaiter is an IAwaiter, its GetResult code is called directly to bypass the reflection penalty.</remarks>
            <exception cref="System.ArgumentException">Thrown if the given awaiter does not have the GetResult method.</exception>
        </member>
        <member name="P:System.Threading.Tasks.ReflectAwaiterWrapper.IsCompleted">
            <summary>Gets the completion state of the awaitable being awaited.</summary>
            <value>True if the completion handler can be run immediately, else false.</value>
            <remarks>Gets the underlying IsCompleted value by using reflection. If the given awaiter is an IAwaiter, its IsCompleted property value is retrieved directly to avoid the penalties of reflection.</remarks>
            <exception cref="System.ArgumentException">Thrown if the given awaiter does not have the IsCompleted property.</exception>
        </member>
        <member name="M:System.Threading.Tasks.ReflectAwaiterWrapper.OnCompleted(System.Action)">
            <param name="continuation">The function to execute as the continuation.</param>
            <summary>Registers the given function to run when the task resolves to a value/fails.</summary>
            <remarks>Calls the underlying OnCompleted using reflection. If the given awaiter implements INotifyCompletion, its OnCompleted method is used instead to avoid using reflection. Note that all IAwaiter implementations also implement INotifyCompletion.</remarks>
            <exception cref="System.ArgumentException">Thrown if the given awaiter does not have the OnCompleted method.</exception>
        </member>
        <member name="T:System.Threading.Tasks.ReflectAwaiterWrapper`1">
            <typeparam name="TResult">The type of result returned by the awaitable being awaited.</typeparam>
            <summary>An IAwaiter&lt;TResult&gt; implementation that wraps an ordinary object.</summary>
            <remarks>This implementation makes use of reflection and is not available for PCLs. It is recommended to make use of strongly typed wrappers instead due to the penalties associated with reflection. If an IAwaiter&lt;TResult&gt; implementation is passed in, no reflection will be used in preference to calling the methods on the IAwaiter&lt;TResult&gt; directly.</remarks>
        </member>
        <member name="C:System.Threading.Tasks.ReflectAwaiterWrapper`1(`0System`0.`0Object`0)">
            <param name="awaiter">The object to wrap.</param>
            <summary>Constructs a new object wrapper.</summary>
            <remarks>No validation regarding whether the object's type implements the required functions is made at this point. That is done lazily when an actual function call is made.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.ReflectAwaiterWrapper`1.GetResult">
            <summary>Concludes the await, throwing any exceptions thrown by the awaitable in the process.</summary>
            <returns>The result returned by the task.</returns>
            <remarks>Calls the underlying GetResult by using reflection. If the given awaiter is an IAwaiter&lt;TResult&gt;, its GetResult code is called directly to bypass the reflection penalty.</remarks>
            <exception cref="System.ArgumentException">Thrown if the given awaiter does not have the GetResult method.</exception>
        </member>
        <member name="P:System.Threading.Tasks.ReflectAwaiterWrapper`1.IsCompleted">
            <summary>Gets the completion state of the awaitable being awaited.</summary>
            <value>True if the completion handler can be run immediately, else false.</value>
            <remarks>Gets the underlying IsCompleted value by using reflection. If the given awaiter is an IAwaiter&lt;TResult&gt;, its IsCompleted property value is retrieved directly to avoid the penalties of reflection.</remarks>
            <exception cref="System.ArgumentException">Thrown if the given awaiter does not have the IsCompleted property.</exception>
        </member>
        <member name="M:System.Threading.Tasks.ReflectAwaiterWrapper`1.OnCompleted(`0System`0.`0Action`0)">
            <param name="continuation">The function to execute as the continuation.</param>
            <summary>Registers the given function to run when the task resolves to a value/fails.</summary>
            <remarks>Calls the underlying OnCompleted using reflection. If the given awaiter implements INotifyCompletion, its OnCompleted method is used instead to avoid using reflection. Note that all IAwaiter&lt;TResult&gt; implementations also implement INotifyCompletion.</remarks>
            <exception cref="System.ArgumentException">Thrown if the given awaiter does not have the OnCompleted method.</exception>
        </member>
        <member name="T:System.Threading.Tasks.ReflectWrapper">
            <summary>An IAwaitable implementation that wraps an object.</summary>
            <remarks>This implementation makes use of reflection and is not available for PCLs. It is recommended to make use of strongly typed wrappers instead due to the penalties associated with reflection. If an IAwaitable implementation is passed in, no reflection will be used in preference to calling the methods on the IAwaitable directly.</remarks>
        </member>
        <member name="C:System.Threading.Tasks.ReflectWrapper(System.Object)">
            <param name="awaitable">The object to wrap.</param>
            <summary>Constructs a new object wrapper.</summary>
            <remarks>No validation regarding whether the object's type implements the required functions is made at this point. That is done lazily when an actual function call is made.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.ReflectWrapper.GetAwaiter">
            <summary>Gets the IAwaiter used to await this object.</summary>
            <returns>The IAwaiter used to await this object.</returns>
            <remarks>Calls the underlying GetAwaiter by using reflection. If the given awaitable is an IAwaitable, its GetAwaiter code is called directly to bypass the reflection penalty.</remarks>
            <exception cref="System.ArgumentException">Thrown if the given awaitable does not have the GetAwaiter method.</exception>
        </member>
        <member name="T:System.Threading.Tasks.ReflectWrapper`1">
            <typeparam name="TResult">The type of result returned by this awaitable.</typeparam>
            <summary>An IAwaitable&lt;TResult&gt; implementation that wraps an object.</summary>
            <remarks>This implementation makes use of reflection and is not available for PCLs. It is recommended to make use of strongly typed wrappers instead due to the penalties associated with reflection. If an IAwaitable&lt;TResult&gt; implementation is passed in, no reflection will be used in preference to calling the methods on the IAwaitable&lt;TResult&gt; directly.</remarks>
        </member>
        <member name="C:System.Threading.Tasks.ReflectWrapper`1(`0System`0.`0Object`0)">
            <param name="awaitable">The object to wrap.</param>
            <summary>Constructs a new object wrapper.</summary>
            <remarks>No validation regarding whether the object's type implements the required functions is made at this point. That is done lazily when an actual function call is made.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.ReflectWrapper`1.GetAwaiter">
            <summary>Gets the IAwaiter&lt;TResult&gt; used to await this object.</summary>
            <returns>The IAwaiter&lt;TResult&gt; used to await this object.</returns>
            <remarks>Calls the underlying GetAwaiter by using reflection. If the given awaitable is an IAwaitable&lt;TResult&gt;, its GetAwaiter code is called directly to bypass the reflection penalty.</remarks>
            <exception cref="System.ArgumentException">Thrown if the given awaitable does not have the GetAwaiter method.</exception>
        </member>
        <member name="T:System.Threading.Tasks.TaskAwaiterWrapper">
            <summary>An IAwaiter implementation that wraps a TaskAwaiter.</summary>
            <remarks />
        </member>
        <member name="C:System.Threading.Tasks.TaskAwaiterWrapper(System.Runtime.CompilerServices.TaskAwaiter)">
            <param name="awaiter">The TaskAwaiter to wrap.</param>
            <summary>Constructs a new TaskAwaiter wrapper.</summary>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskAwaiterWrapper.GetResult">
            <summary>Concludes the await, throwing any exceptions thrown by the task in the process.</summary>
            <remarks>Calls the underlying GetResult.</remarks>
        </member>
        <member name="P:System.Threading.Tasks.TaskAwaiterWrapper.IsCompleted">
            <summary>Gets the completion state of the task being awaited.</summary>
            <value>True if the completion handler can be run immediately, else false.</value>
            <remarks>Gets the underlying IsCompleted value.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskAwaiterWrapper.OnCompleted(System.Action)">
            <param name="continuation">The function to execute as the continuation.</param>
            <summary>Registers the given function to run when the task resolves to a value/fails.</summary>
            <remarks>Calls the underlying OnCompleted.</remarks>
        </member>
        <member name="T:System.Threading.Tasks.TaskAwaiterWrapper`1">
            <typeparam name="TResult">The type of result returned by the Task being awaited.</typeparam>
            <summary>An IAwaiter&lt;TResult&gt; implementation that wraps a TaskAwaiter&lt;TResult&gt;.</summary>
            <remarks />
        </member>
        <member name="C:System.Threading.Tasks.TaskAwaiterWrapper`1(`0System`0.`0Runtime`0.`0CompilerServices`0.`0TaskAwaiter`0{`0TResult`0})">
            <param name="awaiter">The TaskAwaiter&lt;TResult&gt; to wrap.</param>
            <summary>Constructs a new TaskAwaiter&lt;TResult&gt; wrapper.</summary>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskAwaiterWrapper`1.GetResult">
            <summary>Concludes the await, throwing any exceptions thrown by the task in the process.</summary>
            <returns>The result returned by the task.</returns>
            <remarks>Calls the underlying GetResult.</remarks>
        </member>
        <member name="P:System.Threading.Tasks.TaskAwaiterWrapper`1.IsCompleted">
            <summary>Gets the completion state of the task being awaited.</summary>
            <value>True if the completion handler can be run immediately, else false.</value>
            <remarks>Gets the underlying IsCompleted value.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskAwaiterWrapper`1.OnCompleted(`0System`0.`0Action`0)">
            <param name="continuation">The function to execute as the continuation.</param>
            <summary>Registers the given function to run when the configured task resolves to a value/fails.</summary>
            <remarks>Calls the underlying OnCompleted.</remarks>
        </member>
        <member name="T:System.Threading.Tasks.TaskClosure">
            <summary>A base class for closures used to implement asynchronous methods.</summary>
            <remarks>This class encapsulates a TaskCompletionSource instance and calls methods on it as you do awaits or return a value. It also handles exceptions thrown by awaited methods and sets them on the Task exposed by the TaskCompletionSource.</remarks>
        </member>
        <member name="C:System.Threading.Tasks.TaskClosure">
            <summary>Creates a new TaskClosure.</summary>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure.Return">
            <summary>Concludes the asynchronous activity successfully.</summary>
            <remarks>This method also handles cleanup of resources.</remarks>
        </member>
        <member name="T:System.Threading.Tasks.TaskClosure`1">
            <typeparam name="T">The return type for the asynchronous activity.</typeparam>
            <summary>A base class for closures used to implement asynchronous methods that return a value.</summary>
            <remarks>This class encapsulates a TaskCompletionSource instance and calls methods on it as you do awaits or return a value. It also handles exceptions thrown by awaited methods and sets them on the Task exposed by the TaskCompletionSource.</remarks>
        </member>
        <member name="C:System.Threading.Tasks.TaskClosure`1">
            <summary>Creates a new TaskClosure.</summary>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Await(`0System`0.`0Runtime`0.`0CompilerServices`0.`0ConfiguredTaskAwaitable`0,`0System`0.`0Action`0)">
            <param name="cta">The configured task to await.</param>
            <param name="f">The function to execute if the configured task completed successfully.</param>
            <summary>Runs the given function if the await completes successfully else propagates the exception.</summary>
            <returns>The Task related to the TaskCompletionSource encapsulated by the closure.</returns>
            <remarks>Overriding the Catch method allows the addition of code that should execute when exceptions happen.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Await(`0System`0.`0Runtime`0.`0CompilerServices`0.`0YieldAwaitable`0,`0System`0.`0Action`0)">
            <param name="ya">The yield to await.</param>
            <param name="f">The function to execute if the yield completed successfully.</param>
            <summary>Runs the given function if the await completes successfully else propagates the exception.</summary>
            <returns>The Task related to the TaskCompletionSource encapsulated by the closure.</returns>
            <remarks>Overriding the Catch method allows the addition of code that should execute when exceptions happen.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Await(`0System`0.`0Threading`0.`0Tasks`0.`0IAwaitable`0,`0System`0.`0Action`0)">
            <param name="a">The awaitable to await.</param>
            <param name="f">The function to execute if the await completed successfully.</param>
            <summary>Runs the given function if the await completes successfully else propagates the exception.</summary>
            <returns>The Task related to the TaskCompletionSource encapsulated by the closure.</returns>
            <remarks>Overriding the Catch method allows the addition of code that should execute when exceptions happen.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Await(`0System`0.`0Threading`0.`0Tasks`0.`0IAwaiter`0,`0System`0.`0Action`0)">
            <param name="a">The awaiter to await with.</param>
            <param name="f">The function to execute if the await completed successfully.</param>
            <summary>Runs the given function if the await completes successfully else propagates the exception.</summary>
            <returns>The Task related to the TaskCompletionSource encapsulated by the closure.</returns>
            <remarks>Overriding the Catch method allows the addition of code that should execute when exceptions happen.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Await(`0System`0.`0Threading`0.`0Tasks`0.`0Task`0,`0System`0.`0Action`0)">
            <param name="t">The task to await.</param>
            <param name="f">The function to execute if the task completed successfully.</param>
            <summary>Runs the given function if the await completes successfully else propagates the exception.</summary>
            <returns>The Task related to the TaskCompletionSource encapsulated by the closure.</returns>
            <remarks>Overriding the Catch method allows the addition of code that should execute when exceptions happen.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Await``1(`0System`0.`0Runtime`0.`0CompilerServices`0.`0ConfiguredTaskAwaitable`0,`0System`0.`0Action`0,`0System`0.`0Action`0{`0TException`0})">
            <typeparam name="TException">The type of exception that the handler will handle.</typeparam>
            <param name="cta">The configured task to await.</param>
            <param name="f">The function to execute if the configured task completed successfully.</param>
            <param name="c">The function to use as a handler for exceptions.</param>
            <summary>Runs the given function if the await completes successfully else runs the given exception handler.</summary>
            <returns>The Task related to the TaskCompletionSource encapsulated by the closure.</returns>
            <remarks>Overriding the Catch method allows the addition of code that should execute when exceptions that are not handled by the given handler happen.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Await``1(`0System`0.`0Runtime`0.`0CompilerServices`0.`0YieldAwaitable`0,`0System`0.`0Action`0,`0System`0.`0Action`0{`0TException`0})">
            <typeparam name="TException">The type of exception that the handler will handle.</typeparam>
            <param name="ya">The yield to await.</param>
            <param name="f">The function to execute if the yield completed successfully.</param>
            <param name="c">The function to use as a handler for exceptions.</param>
            <summary>Runs the given function if the await completes successfully else runs the given exception handler.</summary>
            <returns>The Task related to the TaskCompletionSource encapsulated by the closure.</returns>
            <remarks>Overriding the Catch method allows the addition of code that should execute when exceptions that are not handled by the given handler happen.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Await``1(`0System`0.`0Threading`0.`0Tasks`0.`0IAwaitable`0,`0System`0.`0Action`0,`0System`0.`0Action`0{`0TException`0})">
            <typeparam name="TException">The type of exception that the handler will handle.</typeparam>
            <param name="a">The awaitable to await.</param>
            <param name="f">The function to execute if the await completed successfully.</param>
            <param name="c">The function to use as a handler for exceptions.</param>
            <summary>Runs the given function if the await completes successfully else runs the given exception handler.</summary>
            <returns>The Task related to the TaskCompletionSource encapsulated by the closure.</returns>
            <remarks>Overriding the Catch method allows the addition of code that should execute when exceptions that are not handled by the given handler happen.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Await``1(`0System`0.`0Threading`0.`0Tasks`0.`0IAwaiter`0,`0System`0.`0Action`0,`0System`0.`0Action`0{`0TException`0})">
            <typeparam name="TException">The type of exception that the handler will handle.</typeparam>
            <param name="a">The awaiter to await with.</param>
            <param name="f">The function to execute if the await completed successfully.</param>
            <param name="c">The function to use as a handler for exceptions.</param>
            <summary>Runs the given function if the await completes successfully else runs the given exception handler.</summary>
            <returns>The Task related to the TaskCompletionSource encapsulated by the closure.</returns>
            <remarks>Overriding the Catch method allows the addition of code that should execute when exceptions that are not handled by the given handler happen.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Await``1(`0System`0.`0Threading`0.`0Tasks`0.`0Task`0,`0System`0.`0Action`0,`0System`0.`0Action`0{`0TException`0})">
            <typeparam name="TException">The type of exception that the handler will handle.</typeparam>
            <param name="t">The task to await.</param>
            <param name="f">The function to execute if the task completed successfully.</param>
            <param name="c">The function to use as a handler for exceptions.</param>
            <summary>Runs the given function if the await completes successfully else runs the given exception handler.</summary>
            <returns>The Task related to the TaskCompletionSource encapsulated by the closure.</returns>
            <remarks>Overriding the Catch method allows the addition of code that should execute when exceptions that are not handled by the given handler happen.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Await``1(`0System`0.`0Runtime`0.`0CompilerServices`0.`0ConfiguredTaskAwaitable`0{`0U`0},`0System`0.`0Action`0{`0U`0})">
            <typeparam name="U">The return type of the awaited configured task.</typeparam>
            <param name="cta">The configured task to await.</param>
            <param name="f">The function to execute if the configured task completed successfully.</param>
            <summary>Runs the given function if the await completes successfully else propagates the exception.</summary>
            <returns>The Task related to the TaskCompletionSource encapsulated by the closure.</returns>
            <remarks>Overriding the Catch method allows the addition of code that should execute when exceptions happen.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Await``1(`0System`0.`0Runtime`0.`0CompilerServices`0.`0ConfiguredValueTaskAwaitable`0{`0U`0},`0System`0.`0Action`0{`0U`0})">
            <typeparam name="U">The return type of the awaited configured value task.</typeparam>
            <param name="cta">The configured value task to await.</param>
            <param name="f">The function to execute if the configured value task completed successfully.</param>
            <summary>Runs the given function if the await completes successfully else propagates the exception.</summary>
            <returns>The Task related to the TaskCompletionSource encapsulated by the closure.</returns>
            <remarks>Overriding the Catch method allows the addition of code that should execute when exceptions happen.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Await``1(`0System`0.`0Threading`0.`0Tasks`0.`0IAwaitable`0{`0U`0},`0System`0.`0Action`0{`0U`0})">
            <typeparam name="U">The return type of the awaitable.</typeparam>
            <param name="a">The awaitable to await.</param>
            <param name="f">The function to execute if the await completed successfully.</param>
            <summary>Runs the given function if the await completes successfully else propagates the exception.</summary>
            <returns>The Task related to the TaskCompletionSource encapsulated by the closure.</returns>
            <remarks>Overriding the Catch method allows the addition of code that should execute when exceptions happen.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Await``1(`0System`0.`0Threading`0.`0Tasks`0.`0IAwaiter`0{`0U`0},`0System`0.`0Action`0{`0U`0})">
            <typeparam name="U">The return type of the awaiter.</typeparam>
            <param name="a">The awaiter to await with.</param>
            <param name="f">The function to execute if the await completed successfully.</param>
            <summary>Runs the given function if the await completes successfully else propagates the exception.</summary>
            <returns>The Task related to the TaskCompletionSource encapsulated by the closure.</returns>
            <remarks>Overriding the Catch method allows the addition of code that should execute when exceptions happen.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Await``1(`0System`0.`0Threading`0.`0Tasks`0.`0Task`0{`0U`0},`0System`0.`0Action`0{`0U`0})">
            <typeparam name="U">The return type of the awaited task.</typeparam>
            <param name="t">The task to await.</param>
            <param name="f">The function to execute if the task completed successfully.</param>
            <summary>Runs the given function if the await completes successfully else propagates the exception.</summary>
            <returns>The Task related to the TaskCompletionSource encapsulated by the closure.</returns>
            <remarks>Overriding the Catch method allows the addition of code that should execute when exceptions happen.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Await``1(`0System`0.`0Threading`0.`0Tasks`0.`0ValueTask`0{`0U`0},`0System`0.`0Action`0{`0U`0})">
            <typeparam name="U">The return type of the awaited value task.</typeparam>
            <param name="t">The value task to await.</param>
            <param name="f">The function to execute if the value task completed successfully.</param>
            <summary>Runs the given function if the await completes successfully else propagates the exception.</summary>
            <returns>The Task related to the TaskCompletionSource encapsulated by the closure.</returns>
            <remarks>Overriding the Catch method allows the addition of code that should execute when exceptions happen.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Await``1(`0System`0.`0Runtime`0.`0CompilerServices`0.`0ConfiguredTaskAwaitable`0{`0U`0},`0System`0.`0Threading`0.`0Tasks`0.`0IAsyncValue`0{`0U`0},`0System`0.`0Action`0)">
            <typeparam name="U">The return type of the awaited configured task.</typeparam>
            <param name="cta">The configured task to await.</param>
            <param name="av">The IAsyncValue with which to return the value returned by the method.</param>
            <param name="f">The function to execute if the configured task completed successfully.</param>
            <summary>Runs the given function if the await completes successfully else propagates the exception.</summary>
            <returns>The Task related to the TaskCompletionSource encapsulated by the closure.</returns>
            <remarks>Overriding the Catch method allows the addition of code that should execute when exceptions happen.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Await``1(`0System`0.`0Runtime`0.`0CompilerServices`0.`0ConfiguredValueTaskAwaitable`0{`0U`0},`0System`0.`0Threading`0.`0Tasks`0.`0IAsyncValue`0{`0U`0},`0System`0.`0Action`0)">
            <typeparam name="U">The return type of the awaited configured value task.</typeparam>
            <param name="cta">The configured value task to await.</param>
            <param name="av">The IAsyncValue with which to return the value returned by the method.</param>
            <param name="f">The function to execute if the configured value task completed successfully.</param>
            <summary>Runs the given function if the await completes successfully else propagates the exception.</summary>
            <returns>The Task related to the TaskCompletionSource encapsulated by the closure.</returns>
            <remarks>Overriding the Catch method allows the addition of code that should execute when exceptions happen.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Await``1(`0System`0.`0Threading`0.`0Tasks`0.`0IAwaitable`0{`0U`0},`0System`0.`0Threading`0.`0Tasks`0.`0IAsyncValue`0{`0U`0},`0System`0.`0Action`0)">
            <typeparam name="U">The return type of the awaitable.</typeparam>
            <param name="a">The awaiter to await with.</param>
            <param name="av">The IAsyncValue with which to return the value returned by the method.</param>
            <param name="f">The function to execute if the task completed successfully.</param>
            <summary>Runs the given function if the await completes successfully else propagates the exception.</summary>
            <returns>The Task related to the TaskCompletionSource encapsulated by the closure.</returns>
            <remarks>Overriding the Catch method allows the addition of code that should execute when exceptions happen.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Await``1(`0System`0.`0Threading`0.`0Tasks`0.`0IAwaiter`0{`0U`0},`0System`0.`0Threading`0.`0Tasks`0.`0IAsyncValue`0{`0U`0},`0System`0.`0Action`0)">
            <typeparam name="U">The return type of the awaiter.</typeparam>
            <param name="a">The awaiter to await with.</param>
            <param name="av">The IAsyncValue with which to return the value returned by the method.</param>
            <param name="f">The function to execute if the task completed successfully.</param>
            <summary>Runs the given function if the await completes successfully else propagates the exception.</summary>
            <returns>The Task related to the TaskCompletionSource encapsulated by the closure.</returns>
            <remarks>Overriding the Catch method allows the addition of code that should execute when exceptions happen.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Await``1(`0System`0.`0Threading`0.`0Tasks`0.`0Task`0{`0U`0},`0System`0.`0Threading`0.`0Tasks`0.`0IAsyncValue`0{`0U`0},`0System`0.`0Action`0)">
            <typeparam name="U">The return type of the awaited task.</typeparam>
            <param name="t">The task to await.</param>
            <param name="av">The IAsyncValue with which to return the value returned by the method.</param>
            <param name="f">The function to execute if the task completed successfully.</param>
            <summary>Runs the given function if the await completes successfully else propagates the exception.</summary>
            <returns>The Task related to the TaskCompletionSource encapsulated by the closure.</returns>
            <remarks>Overriding the Catch method allows the addition of code that should execute when exceptions happen.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Await``1(`0System`0.`0Threading`0.`0Tasks`0.`0ValueTask`0{`0U`0},`0System`0.`0Threading`0.`0Tasks`0.`0IAsyncValue`0{`0U`0},`0System`0.`0Action`0)">
            <typeparam name="U">The return type of the awaited value task.</typeparam>
            <param name="t">The value task to await.</param>
            <param name="av">The IAsyncValue with which to return the value returned by the method.</param>
            <param name="f">The function to execute if the value task completed successfully.</param>
            <summary>Runs the given function if the await completes successfully else propagates the exception.</summary>
            <returns>The Task related to the TaskCompletionSource encapsulated by the closure.</returns>
            <remarks>Overriding the Catch method allows the addition of code that should execute when exceptions happen.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Await``2(`0System`0.`0Runtime`0.`0CompilerServices`0.`0ConfiguredTaskAwaitable`0{`0U`0},`0System`0.`0Action`0{`0U`0},`0System`0.`0Action`0{`0TException`0})">
            <typeparam name="U">The return type of the awaited configured task.</typeparam>
            <typeparam name="TException">The type of exception that the handler will handle.</typeparam>
            <param name="cta">The configured task to await.</param>
            <param name="f">The function to execute if the configured task completed successfully.</param>
            <param name="c">The function to use as a handler for exceptions.</param>
            <summary>Runs the given function if the await completes successfully else runs the given exception handler.</summary>
            <returns>The Task related to the TaskCompletionSource encapsulated by the closure.</returns>
            <remarks>Overriding the Catch method allows the addition of code that should execute when exceptions that are not handled by the given handler happen.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Await``2(`0System`0.`0Runtime`0.`0CompilerServices`0.`0ConfiguredValueTaskAwaitable`0{`0U`0},`0System`0.`0Action`0{`0U`0},`0System`0.`0Action`0{`0TException`0})">
            <typeparam name="U">The return type of the awaited configured value task.</typeparam>
            <typeparam name="TException">The type of exception that the handler will handle.</typeparam>
            <param name="cta">The configured value task to await.</param>
            <param name="f">The function to execute if the configured value task completed successfully.</param>
            <param name="c">The function to use as a handler for exceptions.</param>
            <summary>Runs the given function if the await completes successfully else runs the given exception handler.</summary>
            <returns>The Task related to the TaskCompletionSource encapsulated by the closure.</returns>
            <remarks>Overriding the Catch method allows the addition of code that should execute when exceptions that are not handled by the given handler happen.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Await``2(`0System`0.`0Threading`0.`0Tasks`0.`0IAwaitable`0{`0U`0},`0System`0.`0Action`0{`0U`0},`0System`0.`0Action`0{`0TException`0})">
            <typeparam name="U">The return type of the awaitable.</typeparam>
            <typeparam name="TException">The type of exception that the handler will handle.</typeparam>
            <param name="a">The awaitable to await.</param>
            <param name="f">The function to execute if the await completed successfully.</param>
            <param name="c">The function to use as a handler for exceptions.</param>
            <summary>Runs the given function if the await completes successfully else runs the given exception handler.</summary>
            <returns>The Task related to the TaskCompletionSource encapsulated by the closure.</returns>
            <remarks>Overriding the Catch method allows the addition of code that should execute when exceptions that are not handled by the given handler happen.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Await``2(`0System`0.`0Threading`0.`0Tasks`0.`0IAwaiter`0{`0U`0},`0System`0.`0Action`0{`0U`0},`0System`0.`0Action`0{`0TException`0})">
            <typeparam name="U">The return type of the awaiter.</typeparam>
            <typeparam name="TException">The type of exception that the handler will handle.</typeparam>
            <param name="a">The awaiter to await with.</param>
            <param name="f">The function to execute if the await completed successfully.</param>
            <param name="c">The function to use as a handler for exceptions.</param>
            <summary>Runs the given function if the await completes successfully else runs the given exception handler.</summary>
            <returns>The Task related to the TaskCompletionSource encapsulated by the closure.</returns>
            <remarks>Overriding the Catch method allows the addition of code that should execute when exceptions that are not handled by the given handler happen.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Await``2(`0System`0.`0Threading`0.`0Tasks`0.`0Task`0{`0U`0},`0System`0.`0Action`0{`0U`0},`0System`0.`0Action`0{`0TException`0})">
            <typeparam name="U">The return type of the awaited task.</typeparam>
            <typeparam name="TException">The type of exception that the handler will handle.</typeparam>
            <param name="t">The task to await.</param>
            <param name="f">The function to execute if the task completed successfully.</param>
            <param name="c">The function to use as a handler for exceptions.</param>
            <summary>Runs the given function if the await completes successfully else runs the given exception handler.</summary>
            <returns>The Task related to the TaskCompletionSource encapsulated by the closure.</returns>
            <remarks>Overriding the Catch method allows the addition of code that should execute when exceptions that are not handled by the given handler happen.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Await``2(`0System`0.`0Threading`0.`0Tasks`0.`0ValueTask`0{`0U`0},`0System`0.`0Action`0{`0U`0},`0System`0.`0Action`0{`0TException`0})">
            <typeparam name="U">The return type of the awaited value task.</typeparam>
            <typeparam name="TException">The type of exception that the handler will handle.</typeparam>
            <param name="t">The value task to await.</param>
            <param name="f">The function to execute if the value task completed successfully.</param>
            <param name="c">The function to use as a handler for exceptions.</param>
            <summary>Runs the given function if the await successfully else runs the given exception handler.</summary>
            <returns>The Task related to the TaskCompletionSource encapsulated by the closure.</returns>
            <remarks>Overriding the Catch method allows the addition of code that should execute when exceptions that are not handled by the given handler happen.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Await``2(`0System`0.`0Runtime`0.`0CompilerServices`0.`0ConfiguredTaskAwaitable`0{`0U`0},`0System`0.`0Threading`0.`0Tasks`0.`0IAsyncValue`0{`0U`0},`0System`0.`0Action`0,`0System`0.`0Action`0{`0TException`0})">
            <typeparam name="U">The return type of the awaited configured task.</typeparam>
            <typeparam name="TException">The type of exception that the handler will handle.</typeparam>
            <param name="cta">The configured task to await.</param>
            <param name="av">The IAsyncValue with which to return the value returned by the method.</param>
            <param name="f">The function to execute if the task completed successfully.</param>
            <param name="c">The function to use as a handler for exceptions.</param>
            <summary>Runs the given function if the await completes successfully else runs the given exception handler.</summary>
            <returns>The Task related to the TaskCompletionSource encapsulated by the closure.</returns>
            <remarks>Overriding the Catch method allows the addition of code that should execute when exceptions happen.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Await``2(`0System`0.`0Runtime`0.`0CompilerServices`0.`0ConfiguredValueTaskAwaitable`0{`0U`0},`0System`0.`0Threading`0.`0Tasks`0.`0IAsyncValue`0{`0U`0},`0System`0.`0Action`0,`0System`0.`0Action`0{`0TException`0})">
            <typeparam name="U">The return type of the awaited configured value task.</typeparam>
            <typeparam name="TException">The type of exception that the handler will handle.</typeparam>
            <param name="cta">The configured value task to await.</param>
            <param name="av">The IAsyncValue with which to return the value returned by the method.</param>
            <param name="f">The function to execute if the value task completed successfully.</param>
            <param name="c">The function to use as a handler for exceptions.</param>
            <summary>Runs the given function if the await completes successfully else runs the given exception handler.</summary>
            <returns>The Task related to the TaskCompletionSource encapsulated by the closure.</returns>
            <remarks>Overriding the Catch method allows the addition of code that should execute when exceptions that are not handled by the given handler happen.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Await``2(`0System`0.`0Threading`0.`0Tasks`0.`0IAwaitable`0{`0U`0},`0System`0.`0Threading`0.`0Tasks`0.`0IAsyncValue`0{`0U`0},`0System`0.`0Action`0,`0System`0.`0Action`0{`0TException`0})">
            <typeparam name="U">The return type of the awaitable.</typeparam>
            <typeparam name="TException">The type of exception that the handler will handle.</typeparam>
            <param name="a">The awaiter to await with.</param>
            <param name="av">The IAsyncValue with which to return the value returned by the method.</param>
            <param name="f">The function to execute if the task completed successfully.</param>
            <param name="c">The function to use as a handler for exceptions.</param>
            <summary>Runs the given function if the await completes successfully else runs the given exception handler.</summary>
            <returns>The Task related to the TaskCompletionSource encapsulated by the closure.</returns>
            <remarks>Overriding the Catch method allows the addition of code that should execute when exceptions happen.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Await``2(`0System`0.`0Threading`0.`0Tasks`0.`0IAwaiter`0{`0U`0},`0System`0.`0Threading`0.`0Tasks`0.`0IAsyncValue`0{`0U`0},`0System`0.`0Action`0,`0System`0.`0Action`0{`0TException`0})">
            <typeparam name="U">The return type of the awaiter.</typeparam>
            <typeparam name="TException">The type of exception that the handler will handle.</typeparam>
            <param name="a">The awaiter to await with.</param>
            <param name="av">The IAsyncValue with which to return the value returned by the method.</param>
            <param name="f">The function to execute if the task completed successfully.</param>
            <param name="c">The function to use as a handler for exceptions.</param>
            <summary>Runs the given function if the await completes successfully else runs the given exception handler.</summary>
            <returns>The Task related to the TaskCompletionSource encapsulated by the closure.</returns>
            <remarks>Overriding the Catch method allows the addition of code that should execute when exceptions happen.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Await``2(`0System`0.`0Threading`0.`0Tasks`0.`0Task`0{`0U`0},`0System`0.`0Threading`0.`0Tasks`0.`0IAsyncValue`0{`0U`0},`0System`0.`0Action`0,`0System`0.`0Action`0{`0TException`0})">
            <typeparam name="U">The return type of the awaited task.</typeparam>
            <typeparam name="TException">The type of exception that the handler will handle.</typeparam>
            <param name="t">The task to await.</param>
            <param name="av">The IAsyncValue with which to return the value returned by the method.</param>
            <param name="f">The function to execute if the task completed successfully.</param>
            <param name="c">The function to use as a handler for exceptions.</param>
            <summary>Runs the given function if the await completes successfully else runs the given exception handler.</summary>
            <returns>The Task related to the TaskCompletionSource encapsulated by the closure.</returns>
            <remarks>Overriding the Catch method allows the addition of code that should execute when exceptions happen.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Await``2(`0System`0.`0Threading`0.`0Tasks`0.`0ValueTask`0{`0U`0},`0System`0.`0Threading`0.`0Tasks`0.`0IAsyncValue`0{`0U`0},`0System`0.`0Action`0,`0System`0.`0Action`0{`0TException`0})">
            <typeparam name="U">The return type of the awaited value task.</typeparam>
            <typeparam name="TException">The type of exception that the handler will handle.</typeparam>
            <param name="t">The value task to await.</param>
            <param name="av">The IAsyncValue with which to return the value returned by the method.</param>
            <param name="f">The function to execute if the value task completed successfully.</param>
            <param name="c">The function to use as a handler for exceptions.</param>
            <summary>Runs the given function if the await completes successfully else runs the given exception handler.</summary>
            <returns>The Task related to the TaskCompletionSource encapsulated by the closure.</returns>
            <remarks>Overriding the Catch method allows the addition of code that should execute when exceptions that are not handled by the given handler happen.</remarks>
        </member>
        <member name="P:System.Threading.Tasks.TaskClosure`1.Canceller">
            <summary>The cancellation token used to cancel an asynchronous method at await points.</summary>
            <value>The cancellation token set by the user or CancellationToken.None if no token was set.</value>
            <remarks>The token can be changed in between awaits. This property is read before each await happens.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Catch(`0System`0.`0Exception`0)">
            <param name="e">The exception that happened while executing an awaited task.</param>
            <summary>Handles exceptions in awaited tasks by propagating them into the encapsulated TaskCompletionSource.</summary>
            <remarks>To add code to what is already executed, override this method and add the new code along with an invocation of the version in this base class.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Finally">
            <summary>The method called by Return and Catch in order to clean any resources held by the closure.</summary>
            <remarks>Override this method to dispose of an resources or to execute code after the asynchronous activity terminates successfully or due to an exception.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskClosure`1.Return(`0T`0)">
            <param name="result">The result that the encapsulated TaskCompletionSource should return by means of the Task it controls.</param>
            <summary>Concludes the asynchronous activity successfully by returning the given result.</summary>
            <remarks>This method also handles cleanup of resources.</remarks>
        </member>
        <member name="P:System.Threading.Tasks.TaskClosure`1.Task">
            <summary>The Task exposed by the TaskCompletionSource encapsulated by this closure.</summary>
            <value>The Task&lt;T&gt; associated to the encapsulated TaskCompletionSource&lt;T&gt;.</value>
            <remarks>The Task instance is also returned by all overloads of the Await method available in this class.</remarks>
        </member>
        <member name="T:System.Threading.Tasks.TaskHelpers">
            <summary>Helpers for awaiting Tasks and other things that implement IAwaiter or IAwaiter&lt;T&gt;.</summary>
            <remarks>These helpers may also be useful for other languages that do not support the await keyword. Do note that this API surface is also available on .NET 4 and some PCL profiles.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await(System.Threading.Tasks.IAwaiter,System.Action)">
            <param name="a">The awaiter to use.</param>
            <param name="f">The code to execute once the await finishes successfully.</param>
            <summary>Await the awaitable linked to the provided awaiter using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await(System.Threading.Tasks.Task,System.Action)">
            <param name="t">The task to await.</param>
            <param name="f">The code to execute once the task finishes successfully.</param>
            <summary>Await the given task using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await(System.Threading.Tasks.IAwaiter,System.Action,System.Action)">
            <param name="a">The awaiter to use.</param>
            <param name="f">The code to execute once the await finishes successfully.</param>
            <param name="fin">The code to execute after the await is ready regardless of the await's success/failure.</param>
            <summary>Await the awaitable linked to the provided awaiter using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await(System.Threading.Tasks.IAwaiter,System.Action,System.Action{System.Exception})">
            <param name="a">The awaiter to use.</param>
            <param name="f">The code to execute once the await finishes successfully.</param>
            <param name="cat">The code to execute if the await or the code that executes after it, terminates with exceptions.</param>
            <summary>Await the awaitable linked to the provided awaiter using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await(System.Threading.Tasks.IAwaiter,System.Action,System.Threading.CancellationToken)">
            <param name="a">The awaiter to use.</param>
            <param name="f">The code to execute once the await finishes successfully.</param>
            <param name="token">The cancellation token to use.</param>
            <summary>Await the awaitable linked to the provided awaiter using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await(System.Threading.Tasks.Task,System.Action,System.Action)">
            <param name="t">The task to await.</param>
            <param name="f">The code to execute once the task finishes successfully.</param>
            <param name="fin">The code to execute after the await is ready regardless of the task's success/failure.</param>
            <summary>Await the given task using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await(System.Threading.Tasks.Task,System.Action,System.Action{System.Exception})">
            <param name="t">The task to await.</param>
            <param name="f">The code to execute once the task finishes successfully.</param>
            <param name="cat">The code to execute if the task or the code that executes after it terminates with exceptions.</param>
            <summary>Await the given task using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await(System.Threading.Tasks.Task,System.Action,System.Threading.CancellationToken)">
            <param name="t">The task to await.</param>
            <param name="f">The code to execute once the task finishes successfully.</param>
            <param name="token">The cancellation token to use.</param>
            <summary>Await the given task using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await(System.Threading.Tasks.IAwaiter,System.Action,System.Action,System.Threading.CancellationToken)">
            <param name="a">The awaiter to use.</param>
            <param name="f">The code to execute once the await finishes successfully.</param>
            <param name="fin">The code to execute after the await is ready regardless of the await's success/failure.</param>
            <param name="token">The cancellation token to use.</param>
            <summary>Await the awaitable linked to the provided awaiter using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await(System.Threading.Tasks.IAwaiter,System.Action,System.Action{System.Exception},System.Action)">
            <param name="a">The awaiter to use.</param>
            <param name="f">The code to execute once the await finishes successfully.</param>
            <param name="cat">The code to execute if the await or the code that executes after it, terminates with exceptions.</param>
            <param name="fin">The code to execute after the await is ready regardless of the await's success/failure.</param>
            <summary>Await the awaitable linked to the provided awaiter using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await(System.Threading.Tasks.IAwaiter,System.Action,System.Action{System.Exception},System.Threading.CancellationToken)">
            <param name="a">The awaiter to use.</param>
            <param name="f">The code to execute once the await finishes successfully.</param>
            <param name="cat">The code to execute if the await or the code that executes after it, terminates with exceptions.</param>
            <param name="token">The cancellation token to use.</param>
            <summary>Await the awaitable linked to the provided awaiter using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await(System.Threading.Tasks.Task,System.Action,System.Action,System.Threading.CancellationToken)">
            <param name="t">The task to await.</param>
            <param name="f">The code to execute once the task finishes successfully.</param>
            <param name="fin">The code to execute after the await is ready regardless of the task's success/failure.</param>
            <param name="token">The cancellation token to use.</param>
            <summary>Await the given task using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await(System.Threading.Tasks.Task,System.Action,System.Action{System.Exception},System.Action)">
            <param name="t">The task to await.</param>
            <param name="f">The code to execute once the task finishes successfully.</param>
            <param name="cat">The code to execute if the task or the code that executes after it terminates with exceptions.</param>
            <param name="fin">The code to execute after the await is ready regardless of the task's success/failure.</param>
            <summary>Await the given task using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await(System.Threading.Tasks.Task,System.Action,System.Action{System.Exception},System.Threading.CancellationToken)">
            <param name="t">The task to await.</param>
            <param name="f">The code to execute once the task finishes successfully.</param>
            <param name="cat">The code to execute if the task or the code that executes after it terminates with exceptions.</param>
            <param name="token">The cancellation token to use.</param>
            <summary>Await the given task using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await(System.Threading.Tasks.IAwaiter,System.Action,System.Action{System.Exception},System.Action,System.Threading.CancellationToken)">
            <param name="a">The awaiter to use.</param>
            <param name="f">The code to execute once the await finishes successfully.</param>
            <param name="cat">The code to execute if the await or the code that executes after it, terminates with exceptions.</param>
            <param name="fin">The code to execute after the await is ready regardless of the await's success/failure.</param>
            <param name="token">The cancellation token to use.</param>
            <summary>Await the awaitable linked to the provided awaiter using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await(System.Threading.Tasks.Task,System.Action,System.Action{System.Exception},System.Action,System.Threading.CancellationToken)">
            <param name="t">The task to await.</param>
            <param name="f">The code to execute once the task finishes successfully.</param>
            <param name="cat">The code to execute if the task or the code that executes after it terminates with exceptions.</param>
            <param name="fin">The code to execute after the await is ready regardless of the task's success/failure.</param>
            <param name="token">The cancellation token to use.</param>
            <summary>Await the given task using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``1(System.Threading.Tasks.IAwaiter{``0},System.Action{``0})">
            <typeparam name="T">The type of result returned by the awaitable being awaited.</typeparam>
            <param name="a">The awaiter to use.</param>
            <param name="f">The code to execute once the await finishes successfully.</param>
            <summary>Await the awaitable linked to the provided awaiter using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``1(System.Threading.Tasks.Task{``0},System.Action{``0})">
            <typeparam name="T">The type of result returned by the awaited task.</typeparam>
            <param name="t">The task to await.</param>
            <param name="f">The code to execute once the task finishes successfully.</param>
            <summary>Await the given task using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``1(System.Threading.Tasks.IAwaiter{``0},System.Action{``0},System.Action)">
            <typeparam name="T">The type of result returned by the awaitable being awaited.</typeparam>
            <param name="a">The awaiter to use.</param>
            <param name="f">The code to execute once the await finishes successfully.</param>
            <param name="fin">The code to execute after the await is ready regardless of the await's success/failure.</param>
            <summary>Await the awaitable linked to the provided awaiter using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``1(System.Threading.Tasks.IAwaiter{``0},System.Action{``0},System.Action{System.Exception})">
            <typeparam name="T">The type of result returned by the awaitable being awaited.</typeparam>
            <param name="a">The awaiter to use.</param>
            <param name="f">The code to execute once the await finishes successfully.</param>
            <param name="cat">The code to execute if the await or the code that executes after it, terminates with exceptions.</param>
            <summary>Await the awaitable linked to the provided awaiter using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``1(System.Threading.Tasks.IAwaiter{``0},System.Action{``0},System.Threading.CancellationToken)">
            <typeparam name="T">The type of result returned by the awaitable being awaited.</typeparam>
            <param name="a">The awaiter to use.</param>
            <param name="f">The code to execute once the await finishes successfully.</param>
            <param name="token">The cancellation token to use.</param>
            <summary>Await the awaitable linked to the provided awaiter using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``1(System.Threading.Tasks.Task{``0},System.Action{``0},System.Action)">
            <typeparam name="T">The type of result returned by the awaited task.</typeparam>
            <param name="t">The task to await.</param>
            <param name="f">The code to execute once the task finishes successfully.</param>
            <param name="fin">The code to execute after the await is ready regardless of the task's success/failure.</param>
            <summary>Await the given task using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``1(System.Threading.Tasks.Task{``0},System.Action{``0},System.Action{System.Exception})">
            <typeparam name="T">The type of result returned by the awaited task.</typeparam>
            <param name="t">The task to await.</param>
            <param name="f">The code to execute once the task finishes successfully.</param>
            <param name="cat">The code to execute if the task or the code that executes after it terminates with exceptions.</param>
            <summary>Await the given task using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``1(System.Threading.Tasks.Task{``0},System.Action{``0},System.Threading.CancellationToken)">
            <typeparam name="T">The type of result returned by the awaited task.</typeparam>
            <param name="t">The task to await.</param>
            <param name="f">The code to execute once the task finishes successfully.</param>
            <param name="token">The cancellation token to use.</param>
            <summary>Await the given task using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``1(System.Threading.Tasks.IAwaiter{``0},System.Action{``0},System.Action,System.Threading.CancellationToken)">
            <typeparam name="T">The type of result returned by the awaitable being awaited.</typeparam>
            <param name="a">The awaiter to use.</param>
            <param name="f">The code to execute once the await finishes successfully.</param>
            <param name="fin">The code to execute after the await is ready regardless of the await's success/failure.</param>
            <param name="token">The cancellation token to use.</param>
            <summary>Await the awaitable linked to the provided awaiter using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``1(System.Threading.Tasks.IAwaiter{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
            <typeparam name="T">The type of result returned by the awaitable being awaited.</typeparam>
            <param name="a">The awaiter to use.</param>
            <param name="f">The code to execute once the await finishes successfully.</param>
            <param name="cat">The code to execute if the await or the code that executes after it, terminates with exceptions.</param>
            <param name="fin">The code to execute after the await is ready regardless of the await's success/failure.</param>
            <summary>Await the awaitable linked to the provided awaiter using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``1(System.Threading.Tasks.IAwaiter{``0},System.Action{``0},System.Action{System.Exception},System.Threading.CancellationToken)">
            <typeparam name="T">The type of result returned by the awaitable being awaited.</typeparam>
            <param name="a">The awaiter to use.</param>
            <param name="f">The code to execute once the await finishes successfully.</param>
            <param name="cat">The code to execute if the await or the code that executes after it, terminates with exceptions.</param>
            <param name="token">The cancellation token to use.</param>
            <summary>Await the awaitable linked to the provided awaiter using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``1(System.Threading.Tasks.Task{``0},System.Action{``0},System.Action,System.Threading.CancellationToken)">
            <typeparam name="T">The type of result returned by the awaited task.</typeparam>
            <param name="t">The task to await.</param>
            <param name="f">The code to execute once the task finishes successfully.</param>
            <param name="fin">The code to execute after the await is ready regardless of the task's success/failure.</param>
            <param name="token">The cancellation token to use.</param>
            <summary>Await the given task using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``1(System.Threading.Tasks.Task{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
            <typeparam name="T">The type of result returned by the awaited task.</typeparam>
            <param name="t">The task to await.</param>
            <param name="f">The code to execute once the task finishes successfully.</param>
            <param name="cat">The code to execute if the task or the code that executes after it terminates with exceptions.</param>
            <param name="fin">The code to execute after the await is ready regardless of the task's success/failure.</param>
            <summary>Await the given task using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``1(System.Threading.Tasks.Task{``0},System.Action{``0},System.Action{System.Exception},System.Threading.CancellationToken)">
            <typeparam name="T">The type of result returned by the awaited task.</typeparam>
            <param name="t">The task to await.</param>
            <param name="f">The code to execute once the task finishes successfully.</param>
            <param name="cat">The code to execute if the task or the code that executes after it terminates with exceptions.</param>
            <param name="token">The cancellation token to use.</param>
            <summary>Await the given task using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``1(System.Threading.Tasks.IAwaiter{``0},System.Action{``0},System.Action{System.Exception},System.Action,System.Threading.CancellationToken)">
            <typeparam name="T">The type of result returned by the awaitable being awaited.</typeparam>
            <param name="a">The awaiter to use.</param>
            <param name="f">The code to execute once the await finishes successfully.</param>
            <param name="cat">The code to execute if the await or the code that executes after it, terminates with exceptions.</param>
            <param name="fin">The code to execute after the await is ready regardless of the await's success/failure.</param>
            <param name="token">The cancellation token to use.</param>
            <summary>Await the awaitable linked to the provided awaiter using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``1(System.Threading.Tasks.Task{``0},System.Action{``0},System.Action{System.Exception},System.Action,System.Threading.CancellationToken)">
            <typeparam name="T">The type of result returned by the awaited task.</typeparam>
            <param name="t">The task to await.</param>
            <param name="f">The code to execute once the task finishes successfully.</param>
            <param name="cat">The code to execute if the task or the code that executes after it terminates with exceptions.</param>
            <param name="fin">The code to execute after the await is ready regardless of the task's success/failure.</param>
            <param name="token">The cancellation token to use.</param>
            <summary>Await the given task using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``1(System.Threading.Tasks.IAwaiter,System.Func{``0})">
            <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
            <param name="a">The awaiter to use.</param>
            <param name="f">The code to execute once the await finishes successfully.</param>
            <summary>Await the awaitable linked to the provided awaiter using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``1(System.Threading.Tasks.Task,System.Func{``0})">
            <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
            <param name="t">The task to await.</param>
            <param name="f">The code to execute once the task finishes successfully.</param>
            <summary>Await the given task using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``1(System.Threading.Tasks.IAwaiter,System.Func{``0},System.Action)">
            <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
            <param name="a">The awaiter to use.</param>
            <param name="f">The code to execute once the await finishes successfully.</param>
            <param name="fin">The code to execute after the await is ready regardless of the await's success/failure.</param>
            <summary>Await the awaitable linked to the provided awaiter using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``1(System.Threading.Tasks.IAwaiter,System.Func{``0},System.Func{System.Exception,``0})">
            <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
            <param name="a">The awaiter to use.</param>
            <param name="f">The code to execute once the await finishes successfully.</param>
            <param name="cat">The code to execute if the await or the code that executes after it, terminates with exceptions.</param>
            <summary>Await the awaitable linked to the provided awaiter using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``1(System.Threading.Tasks.IAwaiter,System.Func{``0},System.Threading.CancellationToken)">
            <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
            <param name="a">The awaiter to use.</param>
            <param name="f">The code to execute once the await finishes successfully.</param>
            <param name="token">The cancellation token to use.</param>
            <summary>Await the awaitable linked to the provided awaiter using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``1(System.Threading.Tasks.Task,System.Func{``0},System.Action)">
            <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
            <param name="t">The task to await.</param>
            <param name="f">The code to execute once the task finishes successfully.</param>
            <param name="fin">The code to execute after the await is ready regardless of the task's success/failure.</param>
            <summary>Await the given task using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``1(System.Threading.Tasks.Task,System.Func{``0},System.Func{System.Exception,``0})">
            <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
            <param name="t">The task to await.</param>
            <param name="f">The code to execute once the task finishes successfully.</param>
            <param name="cat">The code to execute if the task or the code that executes after it terminates with exceptions.</param>
            <summary>Await the given task using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``1(System.Threading.Tasks.Task,System.Func{``0},System.Threading.CancellationToken)">
            <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
            <param name="t">The task to await.</param>
            <param name="f">The code to execute once the task finishes successfully.</param>
            <param name="token">The cancellation token to use.</param>
            <summary>Await the given task using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``1(System.Threading.Tasks.IAwaiter,System.Func{``0},System.Action,System.Threading.CancellationToken)">
            <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
            <param name="a">The awaiter to use.</param>
            <param name="f">The code to execute once the await finishes successfully.</param>
            <param name="fin">The code to execute after the await is ready regardless of the await's success/failure.</param>
            <param name="token">The cancellation token to use.</param>
            <summary>Await the awaitable linked to the provided awaiter using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``1(System.Threading.Tasks.IAwaiter,System.Func{``0},System.Func{System.Exception,``0},System.Action)">
            <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
            <param name="a">The awaiter to use.</param>
            <param name="f">The code to execute once the await finishes successfully.</param>
            <param name="cat">The code to execute if the await or the code that executes after it, terminates with exceptions.</param>
            <param name="fin">The code to execute after the await is ready regardless of the await's success/failure.</param>
            <summary>Await the awaitable linked to the provided awaiter using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``1(System.Threading.Tasks.IAwaiter,System.Func{``0},System.Func{System.Exception,``0},System.Threading.CancellationToken)">
            <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
            <param name="a">The awaiter to use.</param>
            <param name="f">The code to execute once the await finishes successfully.</param>
            <param name="cat">The code to execute if the await or the code that executes after it, terminates with exceptions.</param>
            <param name="token">The cancellation token to use.</param>
            <summary>Await the awaitable linked to the provided awaiter using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``1(System.Threading.Tasks.Task,System.Func{``0},System.Action,System.Threading.CancellationToken)">
            <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
            <param name="t">The task to await.</param>
            <param name="f">The code to execute once the task finishes successfully.</param>
            <param name="fin">The code to execute after the await is ready regardless of the task's success/failure.</param>
            <param name="token">The cancellation token to use.</param>
            <summary>Await the given task using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``1(System.Threading.Tasks.Task,System.Func{``0},System.Func{System.Exception,``0},System.Action)">
            <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
            <param name="t">The task to await.</param>
            <param name="f">The code to execute once the task finishes successfully.</param>
            <param name="cat">The code to execute if the task or the code that executes after it terminates with exceptions.</param>
            <param name="fin">The code to execute after the await is ready regardless of the task's success/failure.</param>
            <summary>Await the given task using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``1(System.Threading.Tasks.Task,System.Func{``0},System.Func{System.Exception,``0},System.Threading.CancellationToken)">
            <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
            <param name="t">The task to await.</param>
            <param name="f">The code to execute once the task finishes successfully.</param>
            <param name="cat">The code to execute if the task or the code that executes after it terminates with exceptions.</param>
            <param name="token">The cancellation token to use.</param>
            <summary>Await the given task using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``1(System.Threading.Tasks.IAwaiter,System.Func{``0},System.Func{System.Exception,``0},System.Action,System.Threading.CancellationToken)">
            <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
            <param name="a">The awaiter to use.</param>
            <param name="f">The code to execute once the await finishes successfully.</param>
            <param name="cat">The code to execute if the await or the code that executes after it, terminates with exceptions.</param>
            <param name="fin">The code to execute after the await is ready regardless of the await's success/failure.</param>
            <param name="token">The cancellation token to use.</param>
            <summary>Await the awaitable linked to the provided awaiter using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``1(System.Threading.Tasks.Task,System.Func{``0},System.Func{System.Exception,``0},System.Action,System.Threading.CancellationToken)">
            <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
            <param name="t">The task to await.</param>
            <param name="f">The code to execute once the task finishes successfully.</param>
            <param name="cat">The code to execute if the task or the code that executes after it terminates with exceptions.</param>
            <param name="fin">The code to execute after the await is ready regardless of the task's success/failure.</param>
            <param name="token">The cancellation token to use.</param>
            <summary>Await the given task using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``2(System.Threading.Tasks.IAwaiter{``0},System.Func{``0,``1})">
            <typeparam name="T">The type of result returned by the awaitable being awaited.</typeparam>
            <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
            <param name="a">The awaiter to use.</param>
            <param name="f">The code to execute once the await finishes successfully.</param>
            <summary>Await the awaitable linked to the provided awaiter using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1})">
            <typeparam name="T">The type of result returned by the awaited task.</typeparam>
            <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
            <param name="t">The task to await.</param>
            <param name="f">The code to execute once the task finishes successfully.</param>
            <summary>Await the given task using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``2(System.Threading.Tasks.IAwaiter{``0},System.Func{``0,``1},System.Action)">
            <typeparam name="T">The type of result returned by the awaitable being awaited.</typeparam>
            <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
            <param name="a">The awaiter to use.</param>
            <param name="f">The code to execute once the await finishes successfully.</param>
            <param name="fin">The code to execute after the await is ready regardless of the await's success/failure.</param>
            <summary>Await the awaitable linked to the provided awaiter using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``2(System.Threading.Tasks.IAwaiter{``0},System.Func{``0,``1},System.Func{System.Exception,``1})">
            <typeparam name="T">The type of result returned by the awaitable being awaited.</typeparam>
            <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
            <param name="a">The awaiter to use.</param>
            <param name="f">The code to execute once the await finishes successfully.</param>
            <param name="cat">The code to execute if the await or the code that executes after it, terminates with exceptions.</param>
            <summary>Await the awaitable linked to the provided awaiter using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``2(System.Threading.Tasks.IAwaiter{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
            <typeparam name="T">The type of result returned by the awaitable being awaited.</typeparam>
            <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
            <param name="a">The awaiter to use.</param>
            <param name="f">The code to execute once the await finishes successfully.</param>
            <param name="token">The cancellation token to use.</param>
            <summary>Await the awaitable linked to the provided awaiter using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1},System.Action)">
            <typeparam name="T">The type of result returned by the awaited task.</typeparam>
            <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
            <param name="t">The task to await.</param>
            <param name="f">The code to execute once the task finishes successfully.</param>
            <param name="fin">The code to execute after the await is ready regardless of the task's success/failure.</param>
            <summary>Await the given task using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1},System.Func{System.Exception,``1})">
            <typeparam name="T">The type of result returned by the awaited task.</typeparam>
            <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
            <param name="t">The task to await.</param>
            <param name="f">The code to execute once the task finishes successfully.</param>
            <param name="cat">The code to execute if the task or the code that executes after it terminates with exceptions.</param>
            <summary>Await the given task using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
            <typeparam name="T">The type of result returned by the awaited task.</typeparam>
            <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
            <param name="t">The task to await.</param>
            <param name="f">The code to execute once the task finishes successfully.</param>
            <param name="token">The cancellation token to use.</param>
            <summary>Await the given task using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``2(System.Threading.Tasks.IAwaiter{``0},System.Func{``0,``1},System.Action,System.Threading.CancellationToken)">
            <typeparam name="T">The type of result returned by the awaitable being awaited.</typeparam>
            <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
            <param name="a">The awaiter to use.</param>
            <param name="f">The code to execute once the await finishes successfully.</param>
            <param name="fin">The code to execute after the await is ready regardless of the await's success/failure.</param>
            <param name="token">The cancellation token to use.</param>
            <summary>Await the awaitable linked to the provided awaiter using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``2(System.Threading.Tasks.IAwaiter{``0},System.Func{``0,``1},System.Func{System.Exception,``1},System.Action)">
            <typeparam name="T">The type of result returned by the awaitable being awaited.</typeparam>
            <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
            <param name="a">The awaiter to use.</param>
            <param name="f">The code to execute once the await finishes successfully.</param>
            <param name="cat">The code to execute if the await or the code that executes after it, terminates with exceptions.</param>
            <param name="fin">The code to execute after the await is ready regardless of the await's success/failure.</param>
            <summary>Await the awaitable linked to the provided awaiter using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``2(System.Threading.Tasks.IAwaiter{``0},System.Func{``0,``1},System.Func{System.Exception,``1},System.Threading.CancellationToken)">
            <typeparam name="T">The type of result returned by the awaitable being awaited.</typeparam>
            <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
            <param name="a">The awaiter to use.</param>
            <param name="f">The code to execute once the await finishes successfully.</param>
            <param name="cat">The code to execute if the await or the code that executes after it, terminates with exceptions.</param>
            <param name="token">The cancellation token to use.</param>
            <summary>Await the awaitable linked to the provided awaiter using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1},System.Action,System.Threading.CancellationToken)">
            <typeparam name="T">The type of result returned by the awaited task.</typeparam>
            <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
            <param name="t">The task to await.</param>
            <param name="f">The code to execute once the task finishes successfully.</param>
            <param name="fin">The code to execute after the await is ready regardless of the task's success/failure.</param>
            <param name="token">The cancellation token to use.</param>
            <summary>Await the given task using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1},System.Func{System.Exception,``1},System.Action)">
            <typeparam name="T">The type of result returned by the awaited task.</typeparam>
            <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
            <param name="t">The task to await.</param>
            <param name="f">The code to execute once the task finishes successfully.</param>
            <param name="cat">The code to execute if the task or the code that executes after it terminates with exceptions.</param>
            <param name="fin">The code to execute after the await is ready regardless of the task's success/failure.</param>
            <summary>Await the given task using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1},System.Func{System.Exception,``1},System.Threading.CancellationToken)">
            <typeparam name="T">The type of result returned by the awaited task.</typeparam>
            <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
            <param name="t">The task to await.</param>
            <param name="f">The code to execute once the task finishes successfully.</param>
            <param name="cat">The code to execute if the task or the code that executes after it terminates with exceptions.</param>
            <param name="token">The cancellation token to use.</param>
            <summary>Await the given task using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``2(System.Threading.Tasks.IAwaiter{``0},System.Func{``0,``1},System.Func{System.Exception,``1},System.Action,System.Threading.CancellationToken)">
            <typeparam name="T">The type of result returned by the awaitable being awaited.</typeparam>
            <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
            <param name="a">The awaiter to use.</param>
            <param name="f">The code to execute once the await finishes successfully.</param>
            <param name="cat">The code to execute if the await or the code that executes after it, terminates with exceptions.</param>
            <param name="fin">The code to execute after the await is ready regardless of the await's success/failure.</param>
            <param name="token">The cancellation token to use.</param>
            <summary>Await the awaitable linked to the provided awaiter using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Await``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1},System.Func{System.Exception,``1},System.Action,System.Threading.CancellationToken)">
            <typeparam name="T">The type of result returned by the awaited task.</typeparam>
            <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
            <param name="t">The task to await.</param>
            <param name="f">The code to execute once the task finishes successfully.</param>
            <param name="cat">The code to execute if the task or the code that executes after it terminates with exceptions.</param>
            <param name="fin">The code to execute after the await is ready regardless of the task's success/failure.</param>
            <param name="token">The cancellation token to use.</param>
            <summary>Await the given task using the given functions.</summary>
            <returns>A new task representing the await.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Completed">
            <summary>Returns a completed task that has no result. </summary>
            <returns>An already compelete Task.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.FromError(System.Exception)">
            <param name="exception">The exception to package into a Task.</param>
            <summary>Returns an error task. The task is Completed, IsCanceled = False, IsFaulted = True.</summary>
            <returns>A completed faulted Task with the specified error set.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.FromError``1(System.Exception)">
            <typeparam name="TResult">The result type desired for the returned Task.</typeparam>
            <param name="exception">The exception to package into a Task&lt;TResult&gt;.</param>
            <summary>Returns an error task of the given type. The task is Completed, IsCanceled = False, IsFaulted = True.</summary>
            <returns>A completed faulted Task&lt;TResult&gt; with the specified error set.</returns>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.FromResult``1(``0)">
            <typeparam name="TResult">The result type desired for the returned Task.</typeparam>
            <param name="result">The value to package into a Task&lt;TResult&gt;.</param>
            <summary>Returns an completed task of the given type with the given result value.</summary>
            <returns>A completed Task&lt;TResult&gt; with the specified result.</returns>
            <remarks>Note that this method is only defined on .NET 4 and some of the supported PCL profiles. For .NET 4.5, ASP.NET vNext on Desktop/Core CLR and the other supported profiles use the FromResult&lt;TResult&gt; hanging off the Task class. This method is therefore a polyfill for profiles that do not provide it.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.NullResult">
            <summary>Returns a Task with a null result.</summary>
            <returns>A Task&lt;object&gt; with null as the result.</returns>
            <remarks />
        </member>
        <member name="T:System.Threading.Tasks.TaskWrapper">
            <summary>An IAwaitable implementation that wraps a Task.</summary>
            <remarks />
        </member>
        <member name="C:System.Threading.Tasks.TaskWrapper(System.Threading.Tasks.Task)">
            <param name="awaitable">The Task to wrap.</param>
            <summary>Constructs a new Task wrapper.</summary>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskWrapper.GetAwaiter">
            <summary>Gets the IAwaiter used to await this Task.</summary>
            <returns>The IAwaiter used to await this Task.</returns>
            <remarks />
        </member>
        <member name="T:System.Threading.Tasks.TaskWrapper`1">
            <typeparam name="TResult">The type of result returned by this Task.</typeparam>
            <summary>An IAwaitable&lt;TResult&gt; implementation that wraps a Task&lt;TResult&gt;.</summary>
            <remarks />
        </member>
        <member name="C:System.Threading.Tasks.TaskWrapper`1(`0System`0.`0Threading`0.`0Tasks`0.`0Task`0{`0TResult`0})">
            <param name="awaitable">The Task&lt;TResult&gt; that should be wrapped.</param>
            <summary>Constructs a new Task&lt;TResult&gt; wrapper.</summary>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.TaskWrapper`1.GetAwaiter">
            <summary>Gets the IAwaiter&lt;TResult&gt; used to await this Task&lt;TResult&gt;.</summary>
            <returns>The IAwaiter&lt;TResult&gt; used to await this Task&lt;TResult&gt;.</returns>
            <remarks />
        </member>
        <member name="T:System.Threading.Tasks.ValueTaskAwaiterWrapper`1">
            <typeparam name="TResult">The type of result returned by the ValueTask being awaited.</typeparam>
            <summary>An IAwaiter&lt;TResult&gt; implementation that wraps a ValueTaskAwaiter&lt;TResult&gt;.</summary>
            <remarks />
        </member>
        <member name="C:System.Threading.Tasks.ValueTaskAwaiterWrapper`1(`0System`0.`0Runtime`0.`0CompilerServices`0.`0ValueTaskAwaiter`0{`0TResult`0})">
            <param name="awaiter">The ValueTaskAwaiter&lt;TResult&gt; to wrap.</param>
            <summary>Constructs a new ValueTaskAwaiter&lt;TResult&gt; wrapper.</summary>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.ValueTaskAwaiterWrapper`1.GetResult">
            <summary>Concludes the await, throwing any exceptions thrown by the task in the process.</summary>
            <returns>The result returned by the task.</returns>
            <remarks>Calls the underlying GetResult.</remarks>
        </member>
        <member name="P:System.Threading.Tasks.ValueTaskAwaiterWrapper`1.IsCompleted">
            <summary>Gets the completion state of the task being awaited.</summary>
            <value>True if the completion handler can be run immediately, else false.</value>
            <remarks>Gets the underlying IsCompleted value.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.ValueTaskAwaiterWrapper`1.OnCompleted(`0System`0.`0Action`0)">
            <param name="continuation">The function to execute as the continuation.</param>
            <summary>Registers the given function to run when the configured task resolves to a value/fails.</summary>
            <remarks>Calls the underlying OnCompleted.</remarks>
        </member>
        <member name="T:System.Threading.Tasks.ValueTaskWrapper`1">
            <typeparam name="TResult">The type of result returned by this ValueTask.</typeparam>
            <summary>An IAwaitable&lt;TResult&gt; implementation that wraps a ValueTask&lt;TResult&gt;.</summary>
            <remarks />
        </member>
        <member name="C:System.Threading.Tasks.ValueTaskWrapper`1(`0System`0.`0Threading`0.`0Tasks`0.`0ValueTask`0{`0TResult`0})">
            <param name="awaitable">The ValueTask&lt;TResult&gt; that should be wrapped.</param>
            <summary>Constructs a new ValueTask&lt;TResult&gt; wrapper.</summary>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.ValueTaskWrapper`1.GetAwaiter">
            <summary>Gets the IAwaiter&lt;TResult&gt; used to await this ValueTask&lt;TResult&gt;.</summary>
            <returns>The IAwaiter&lt;TResult&gt; used to await this ValueTask&lt;TResult&gt;.</returns>
            <remarks />
        </member>
        <member name="T:System.Threading.Tasks.YieldAwaitableWrapper">
            <summary>An IAwaitable implementation that wraps a YieldAwaitable.</summary>
            <remarks />
        </member>
        <member name="C:System.Threading.Tasks.YieldAwaitableWrapper(System.Runtime.CompilerServices.YieldAwaitable)">
            <param name="awaitable">The YieldAwaitable to wrap.</param>
            <summary>Constructs a new YieldAwaitable wrapper.</summary>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.YieldAwaitableWrapper.GetAwaiter">
            <summary>Gets the IAwaiter used to await this YieldAwaitable.</summary>
            <returns>The IAwaiter used to await this YieldAwaitable.</returns>
            <remarks />
        </member>
        <member name="T:System.Threading.Tasks.YieldAwaiterWrapper">
            <summary>An IAwaiter implementation that wraps a YieldAwaiter.</summary>
            <remarks />
        </member>
        <member name="C:System.Threading.Tasks.YieldAwaiterWrapper(System.Runtime.CompilerServices.YieldAwaitable+YieldAwaiter)">
            <param name="awaiter">The YieldAwaiter to wrap.</param>
            <summary>Constructs a new YieldAwaiter wrapper.</summary>
            <remarks />
        </member>
        <member name="M:System.Threading.Tasks.YieldAwaiterWrapper.GetResult">
            <summary>Concludes the await, throwing any exceptions thrown by the YieldAwaitable in the process.</summary>
            <remarks>Calls the underlying GetResult.</remarks>
        </member>
        <member name="P:System.Threading.Tasks.YieldAwaiterWrapper.IsCompleted">
            <summary>Gets the completion state of the YieldAwaitable being awaited.</summary>
            <value>True if the completion handler can be run immediately, else false.</value>
            <remarks>Gets the underlying IsCompleted value.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.YieldAwaiterWrapper.OnCompleted(System.Action)">
            <param name="continuation">The function to execute as the continuation.</param>
            <summary>Registers the given function to run when the YieldAwaitable yields.</summary>
            <remarks>Calls the underlying OnCompleted.</remarks>
        </member>
    </members>
</doc>
