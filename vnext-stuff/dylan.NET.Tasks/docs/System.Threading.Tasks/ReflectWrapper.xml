<Type Name="ReflectWrapper" FullName="System.Threading.Tasks.ReflectWrapper">
  <TypeSignature Language="C#" Value="public class ReflectWrapper : System.Threading.Tasks.IAwaitable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ReflectWrapper extends System.Object implements class System.Threading.Tasks.IAwaitable" />
  <AssemblyInfo>
    <AssemblyName>dylan.NET.Tasks</AssemblyName>
    <AssemblyVersion>1.2.1.0</AssemblyVersion>
    <AssemblyVersion>1.3.0.0</AssemblyVersion>
    <AssemblyVersion>1.3.2.0</AssemblyVersion>
    <AssemblyVersion>1.4.1.1</AssemblyVersion>
    <AssemblyVersion>1.4.1.2</AssemblyVersion>
    <AssemblyVersion>1.5.1.1</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Threading.Tasks.IAwaitable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>An IAwaitable implementation that wraps an object.</summary>
    <remarks>This implementation makes use of reflection and is not available for PCLs. It is recommended to make use of strongly typed wrappers instead due to the penalties associated with reflection. If an IAwaitable implementation is passed in, no reflection will be used in preference to calling the methods on the IAwaitable directly.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReflectWrapper (object awaitable);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(object awaitable) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.1</AssemblyVersion>
        <AssemblyVersion>1.4.1.2</AssemblyVersion>
        <AssemblyVersion>1.5.1.1</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="awaitable" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="awaitable">The object to wrap.</param>
        <summary>Constructs a new object wrapper.</summary>
        <remarks>No validation regarding whether the object's type implements the required functions is made at this point. That is done lazily when an actual function call is made.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAwaiter">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.IAwaiter GetAwaiter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.IAwaiter GetAwaiter() cil managed" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Threading.Tasks.IAwaitable.GetAwaiter</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.1</AssemblyVersion>
        <AssemblyVersion>1.4.1.2</AssemblyVersion>
        <AssemblyVersion>1.5.1.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.IAwaiter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the IAwaiter used to await this object.</summary>
        <returns>The IAwaiter used to await this object.</returns>
        <remarks>Calls the underlying GetAwaiter by using reflection. If the given awaitable is an IAwaitable, its GetAwaiter code is called directly to bypass the reflection penalty.</remarks>
        <exception cref="System.ArgumentException">Thrown if the given awaitable does not have the GetAwaiter method.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
