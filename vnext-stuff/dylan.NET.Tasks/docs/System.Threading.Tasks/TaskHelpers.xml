<Type Name="TaskHelpers" FullName="System.Threading.Tasks.TaskHelpers">
  <TypeSignature Language="C#" Value="public static class TaskHelpers" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit TaskHelpers extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>dylan.NET.Tasks</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Helpers for awaiting Tasks.</summary>
    <remarks>These helpers may also be useful for other langauges that do not support the await keyword.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Await">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Await (System.Threading.Tasks.Task t, Action f);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Threading.Tasks.Task Await(class System.Threading.Tasks.Task t, class System.Action f) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.Threading.Tasks.Task" />
        <Parameter Name="f" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="t">The task to await.</param>
        <param name="f">The code to execute once the task finishes successfully.</param>
        <summary>Await the given task using the given functions.</summary>
        <returns>A new task representing the await.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Await">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Await (System.Threading.Tasks.Task t, Action f, Action fin);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Threading.Tasks.Task Await(class System.Threading.Tasks.Task t, class System.Action f, class System.Action fin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.Threading.Tasks.Task" />
        <Parameter Name="f" Type="System.Action" />
        <Parameter Name="fin" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="t">The task to await.</param>
        <param name="f">The code to execute once the task finishes successfully.</param>
        <param name="fin">The code to execute after the await is ready regardless of the task's success/failure.</param>
        <summary>Await the given task using the given functions.</summary>
        <returns>A new task representing the await.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Await">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Await (System.Threading.Tasks.Task t, Action f, Action&lt;Exception&gt; cat);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Threading.Tasks.Task Await(class System.Threading.Tasks.Task t, class System.Action f, class System.Action`1&lt;class System.Exception&gt; cat) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.Threading.Tasks.Task" />
        <Parameter Name="f" Type="System.Action" />
        <Parameter Name="cat" Type="System.Action&lt;System.Exception&gt;" />
      </Parameters>
      <Docs>
        <param name="t">The task to await.</param>
        <param name="f">The code to execute once the task finishes successfully.</param>
        <param name="cat">The code to execute if the task or the code that executes after it terminate with exceptions.</param>
        <summary>Await the given task using the given functions.</summary>
        <returns>A new task representing the await.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Await">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Await (System.Threading.Tasks.Task t, Action f, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Threading.Tasks.Task Await(class System.Threading.Tasks.Task t, class System.Action f, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.Threading.Tasks.Task" />
        <Parameter Name="f" Type="System.Action" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="t">The task to await.</param>
        <param name="f">The code to execute once the task finishes successfully.</param>
        <param name="token">The cancellation token to use if the awaiting happens asynchronously.</param>
        <summary>Await the given task using the given functions.</summary>
        <returns>A new task representing the await.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Await">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Await (System.Threading.Tasks.Task t, Action f, Action fin, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Threading.Tasks.Task Await(class System.Threading.Tasks.Task t, class System.Action f, class System.Action fin, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.Threading.Tasks.Task" />
        <Parameter Name="f" Type="System.Action" />
        <Parameter Name="fin" Type="System.Action" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="t">The task to await.</param>
        <param name="f">The code to execute once the task finishes successfully.</param>
        <param name="fin">The code to execute after the await is ready regardless of the task's success/failure.</param>
        <param name="token">The cancellation token to use if the awaiting happens asynchronously.</param>
        <summary>Await the given task using the given functions.</summary>
        <returns>A new task representing the await.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Await">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Await (System.Threading.Tasks.Task t, Action f, Action&lt;Exception&gt; cat, Action fin);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Threading.Tasks.Task Await(class System.Threading.Tasks.Task t, class System.Action f, class System.Action`1&lt;class System.Exception&gt; cat, class System.Action fin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.Threading.Tasks.Task" />
        <Parameter Name="f" Type="System.Action" />
        <Parameter Name="cat" Type="System.Action&lt;System.Exception&gt;" />
        <Parameter Name="fin" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="t">The task to await.</param>
        <param name="f">The code to execute once the task finishes successfully.</param>
        <param name="cat">The code to execute if the task or the code that executes after it terminate with exceptions.</param>
        <param name="fin">The code to execute after the await is ready regardless of the task's success/failure.</param>
        <summary>Await the given task using the given functions.</summary>
        <returns>A new task representing the await.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Await">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Await (System.Threading.Tasks.Task t, Action f, Action&lt;Exception&gt; cat, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Threading.Tasks.Task Await(class System.Threading.Tasks.Task t, class System.Action f, class System.Action`1&lt;class System.Exception&gt; cat, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.Threading.Tasks.Task" />
        <Parameter Name="f" Type="System.Action" />
        <Parameter Name="cat" Type="System.Action&lt;System.Exception&gt;" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="t">The task to await.</param>
        <param name="f">The code to execute once the task finishes successfully.</param>
        <param name="cat">The code to execute if the task or the code that executes after it terminate with exceptions.</param>
        <param name="token">The cancellation token to use if the awaiting happens asynchronously.</param>
        <summary>Await the given task using the given functions.</summary>
        <returns>A new task representing the await.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Await">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Await (System.Threading.Tasks.Task t, Action f, Action&lt;Exception&gt; cat, Action fin, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Threading.Tasks.Task Await(class System.Threading.Tasks.Task t, class System.Action f, class System.Action`1&lt;class System.Exception&gt; cat, class System.Action fin, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.Threading.Tasks.Task" />
        <Parameter Name="f" Type="System.Action" />
        <Parameter Name="cat" Type="System.Action&lt;System.Exception&gt;" />
        <Parameter Name="fin" Type="System.Action" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="t">The task to await.</param>
        <param name="f">The code to execute once the task finishes successfully.</param>
        <param name="cat">The code to execute if the task or the code that executes after it terminate with exceptions.</param>
        <param name="fin">The code to execute after the await is ready regardless of the task's success/failure.</param>
        <param name="token">The cancellation token to use if the awaiting happens asynchronously.</param>
        <summary>Await the given task using the given functions.</summary>
        <returns>A new task representing the await.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Await&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Await&lt;T&gt; (System.Threading.Tasks.Task&lt;T&gt; t, Action&lt;T&gt; f);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Threading.Tasks.Task Await&lt;T&gt;(class System.Threading.Tasks.Task`1&lt;!!T&gt; t, class System.Action`1&lt;!!T&gt; f) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="t" Type="System.Threading.Tasks.Task&lt;T&gt;" />
        <Parameter Name="f" Type="System.Action&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of result returned by the awaited task.</typeparam>
        <param name="t">The task to await.</param>
        <param name="f">The code to execute once the task finishes successfully.</param>
        <summary>Await the given task using the given functions.</summary>
        <returns>A new task representing the await.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Await&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Await&lt;T&gt; (System.Threading.Tasks.Task&lt;T&gt; t, Action&lt;T&gt; f, Action fin);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Threading.Tasks.Task Await&lt;T&gt;(class System.Threading.Tasks.Task`1&lt;!!T&gt; t, class System.Action`1&lt;!!T&gt; f, class System.Action fin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="t" Type="System.Threading.Tasks.Task&lt;T&gt;" />
        <Parameter Name="f" Type="System.Action&lt;T&gt;" />
        <Parameter Name="fin" Type="System.Action" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of result returned by the awaited task.</typeparam>
        <param name="t">The task to await.</param>
        <param name="f">The code to execute once the task finishes successfully.</param>
        <param name="fin">The code to execute after the await is ready regardless of the task's success/failure.</param>
        <summary>Await the given task using the given functions.</summary>
        <returns>A new task representing the await.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Await&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Await&lt;T&gt; (System.Threading.Tasks.Task&lt;T&gt; t, Action&lt;T&gt; f, Action&lt;Exception&gt; cat);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Threading.Tasks.Task Await&lt;T&gt;(class System.Threading.Tasks.Task`1&lt;!!T&gt; t, class System.Action`1&lt;!!T&gt; f, class System.Action`1&lt;class System.Exception&gt; cat) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="t" Type="System.Threading.Tasks.Task&lt;T&gt;" />
        <Parameter Name="f" Type="System.Action&lt;T&gt;" />
        <Parameter Name="cat" Type="System.Action&lt;System.Exception&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of result returned by the awaited task.</typeparam>
        <param name="t">The task to await.</param>
        <param name="f">The code to execute once the task finishes successfully.</param>
        <param name="cat">The code to execute if the task or the code that executes after it terminate with exceptions.</param>
        <summary>Await the given task using the given functions.</summary>
        <returns>A new task representing the await.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Await&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Await&lt;T&gt; (System.Threading.Tasks.Task&lt;T&gt; t, Action&lt;T&gt; f, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Threading.Tasks.Task Await&lt;T&gt;(class System.Threading.Tasks.Task`1&lt;!!T&gt; t, class System.Action`1&lt;!!T&gt; f, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="t" Type="System.Threading.Tasks.Task&lt;T&gt;" />
        <Parameter Name="f" Type="System.Action&lt;T&gt;" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of result returned by the awaited task.</typeparam>
        <param name="t">The task to await.</param>
        <param name="f">The code to execute once the task finishes successfully.</param>
        <param name="token">The cancellation token to use if the awaiting happens asynchronously.</param>
        <summary>Await the given task using the given functions.</summary>
        <returns>A new task representing the await.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Await&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Await&lt;T&gt; (System.Threading.Tasks.Task&lt;T&gt; t, Action&lt;T&gt; f, Action fin, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Threading.Tasks.Task Await&lt;T&gt;(class System.Threading.Tasks.Task`1&lt;!!T&gt; t, class System.Action`1&lt;!!T&gt; f, class System.Action fin, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="t" Type="System.Threading.Tasks.Task&lt;T&gt;" />
        <Parameter Name="f" Type="System.Action&lt;T&gt;" />
        <Parameter Name="fin" Type="System.Action" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of result returned by the awaited task.</typeparam>
        <param name="t">The task to await.</param>
        <param name="f">The code to execute once the task finishes successfully.</param>
        <param name="fin">The code to execute after the await is ready regardless of the task's success/failure.</param>
        <param name="token">The cancellation token to use if the awaiting happens asynchronously.</param>
        <summary>Await the given task using the given functions.</summary>
        <returns>A new task representing the await.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Await&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Await&lt;T&gt; (System.Threading.Tasks.Task&lt;T&gt; t, Action&lt;T&gt; f, Action&lt;Exception&gt; cat, Action fin);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Threading.Tasks.Task Await&lt;T&gt;(class System.Threading.Tasks.Task`1&lt;!!T&gt; t, class System.Action`1&lt;!!T&gt; f, class System.Action`1&lt;class System.Exception&gt; cat, class System.Action fin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="t" Type="System.Threading.Tasks.Task&lt;T&gt;" />
        <Parameter Name="f" Type="System.Action&lt;T&gt;" />
        <Parameter Name="cat" Type="System.Action&lt;System.Exception&gt;" />
        <Parameter Name="fin" Type="System.Action" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of result returned by the awaited task.</typeparam>
        <param name="t">The task to await.</param>
        <param name="f">The code to execute once the task finishes successfully.</param>
        <param name="cat">The code to execute if the task or the code that executes after it terminate with exceptions.</param>
        <param name="fin">The code to execute after the await is ready regardless of the task's success/failure.</param>
        <summary>Await the given task using the given functions.</summary>
        <returns>A new task representing the await.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Await&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Await&lt;T&gt; (System.Threading.Tasks.Task&lt;T&gt; t, Action&lt;T&gt; f, Action&lt;Exception&gt; cat, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Threading.Tasks.Task Await&lt;T&gt;(class System.Threading.Tasks.Task`1&lt;!!T&gt; t, class System.Action`1&lt;!!T&gt; f, class System.Action`1&lt;class System.Exception&gt; cat, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="t" Type="System.Threading.Tasks.Task&lt;T&gt;" />
        <Parameter Name="f" Type="System.Action&lt;T&gt;" />
        <Parameter Name="cat" Type="System.Action&lt;System.Exception&gt;" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of result returned by the awaited task.</typeparam>
        <param name="t">The task to await.</param>
        <param name="f">The code to execute once the task finishes successfully.</param>
        <param name="cat">The code to execute if the task or the code that executes after it terminate with exceptions.</param>
        <param name="token">The cancellation token to use if the awaiting happens asynchronously.</param>
        <summary>Await the given task using the given functions.</summary>
        <returns>A new task representing the await.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Await&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Await&lt;T&gt; (System.Threading.Tasks.Task&lt;T&gt; t, Action&lt;T&gt; f, Action&lt;Exception&gt; cat, Action fin, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Threading.Tasks.Task Await&lt;T&gt;(class System.Threading.Tasks.Task`1&lt;!!T&gt; t, class System.Action`1&lt;!!T&gt; f, class System.Action`1&lt;class System.Exception&gt; cat, class System.Action fin, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="t" Type="System.Threading.Tasks.Task&lt;T&gt;" />
        <Parameter Name="f" Type="System.Action&lt;T&gt;" />
        <Parameter Name="cat" Type="System.Action&lt;System.Exception&gt;" />
        <Parameter Name="fin" Type="System.Action" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of result returned by the awaited task.</typeparam>
        <param name="t">The task to await.</param>
        <param name="f">The code to execute once the task finishes successfully.</param>
        <param name="cat">The code to execute if the task or the code that executes after it terminate with exceptions.</param>
        <param name="fin">The code to execute after the await is ready regardless of the task's success/failure.</param>
        <param name="token">The cancellation token to use if the awaiting happens asynchronously.</param>
        <summary>Await the given task using the given functions.</summary>
        <returns>A new task representing the await.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Await&lt;U&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;U&gt; Await&lt;U&gt; (System.Threading.Tasks.Task t, Func&lt;U&gt; f);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Threading.Tasks.Task`1&lt;!!U&gt; Await&lt;U&gt;(class System.Threading.Tasks.Task t, class System.Func`1&lt;!!U&gt; f) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;U&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="U" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="t" Type="System.Threading.Tasks.Task" />
        <Parameter Name="f" Type="System.Func&lt;U&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
        <param name="t">The task to await.</param>
        <param name="f">The code to execute once the task finishes successfully.</param>
        <summary>Await the given task using the given functions.</summary>
        <returns>A new task representing the await.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Await&lt;U&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;U&gt; Await&lt;U&gt; (System.Threading.Tasks.Task t, Func&lt;U&gt; f, Action fin);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Threading.Tasks.Task`1&lt;!!U&gt; Await&lt;U&gt;(class System.Threading.Tasks.Task t, class System.Func`1&lt;!!U&gt; f, class System.Action fin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;U&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="U" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="t" Type="System.Threading.Tasks.Task" />
        <Parameter Name="f" Type="System.Func&lt;U&gt;" />
        <Parameter Name="fin" Type="System.Action" />
      </Parameters>
      <Docs>
        <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
        <param name="t">The task to await.</param>
        <param name="f">The code to execute once the task finishes successfully.</param>
        <param name="fin">The code to execute after the await is ready regardless of the task's success/failure.</param>
        <summary>Await the given task using the given functions.</summary>
        <returns>A new task representing the await.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Await&lt;U&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;U&gt; Await&lt;U&gt; (System.Threading.Tasks.Task t, Func&lt;U&gt; f, Func&lt;Exception,U&gt; cat);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Threading.Tasks.Task`1&lt;!!U&gt; Await&lt;U&gt;(class System.Threading.Tasks.Task t, class System.Func`1&lt;!!U&gt; f, class System.Func`2&lt;class System.Exception, !!U&gt; cat) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;U&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="U" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="t" Type="System.Threading.Tasks.Task" />
        <Parameter Name="f" Type="System.Func&lt;U&gt;" />
        <Parameter Name="cat" Type="System.Func&lt;System.Exception,U&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
        <param name="t">The task to await.</param>
        <param name="f">The code to execute once the task finishes successfully.</param>
        <param name="cat">The code to execute if the task or the code that executes after it terminate with exceptions.</param>
        <summary>Await the given task using the given functions.</summary>
        <returns>A new task representing the await.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Await&lt;U&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;U&gt; Await&lt;U&gt; (System.Threading.Tasks.Task t, Func&lt;U&gt; f, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Threading.Tasks.Task`1&lt;!!U&gt; Await&lt;U&gt;(class System.Threading.Tasks.Task t, class System.Func`1&lt;!!U&gt; f, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;U&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="U" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="t" Type="System.Threading.Tasks.Task" />
        <Parameter Name="f" Type="System.Func&lt;U&gt;" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
        <param name="t">The task to await.</param>
        <param name="f">The code to execute once the task finishes successfully.</param>
        <param name="token">The cancellation token to use if the awaiting happens asynchronously.</param>
        <summary>Await the given task using the given functions.</summary>
        <returns>A new task representing the await.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Await&lt;U&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;U&gt; Await&lt;U&gt; (System.Threading.Tasks.Task t, Func&lt;U&gt; f, Action fin, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Threading.Tasks.Task`1&lt;!!U&gt; Await&lt;U&gt;(class System.Threading.Tasks.Task t, class System.Func`1&lt;!!U&gt; f, class System.Action fin, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;U&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="U" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="t" Type="System.Threading.Tasks.Task" />
        <Parameter Name="f" Type="System.Func&lt;U&gt;" />
        <Parameter Name="fin" Type="System.Action" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
        <param name="t">The task to await.</param>
        <param name="f">The code to execute once the task finishes successfully.</param>
        <param name="fin">The code to execute after the await is ready regardless of the task's success/failure.</param>
        <param name="token">The cancellation token to use if the awaiting happens asynchronously.</param>
        <summary>Await the given task using the given functions.</summary>
        <returns>A new task representing the await.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Await&lt;U&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;U&gt; Await&lt;U&gt; (System.Threading.Tasks.Task t, Func&lt;U&gt; f, Func&lt;Exception,U&gt; cat, Action fin);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Threading.Tasks.Task`1&lt;!!U&gt; Await&lt;U&gt;(class System.Threading.Tasks.Task t, class System.Func`1&lt;!!U&gt; f, class System.Func`2&lt;class System.Exception, !!U&gt; cat, class System.Action fin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;U&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="U" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="t" Type="System.Threading.Tasks.Task" />
        <Parameter Name="f" Type="System.Func&lt;U&gt;" />
        <Parameter Name="cat" Type="System.Func&lt;System.Exception,U&gt;" />
        <Parameter Name="fin" Type="System.Action" />
      </Parameters>
      <Docs>
        <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
        <param name="t">The task to await.</param>
        <param name="f">The code to execute once the task finishes successfully.</param>
        <param name="cat">The code to execute if the task or the code that executes after it terminate with exceptions.</param>
        <param name="fin">The code to execute after the await is ready regardless of the task's success/failure.</param>
        <summary>Await the given task using the given functions.</summary>
        <returns>A new task representing the await.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Await&lt;U&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;U&gt; Await&lt;U&gt; (System.Threading.Tasks.Task t, Func&lt;U&gt; f, Func&lt;Exception,U&gt; cat, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Threading.Tasks.Task`1&lt;!!U&gt; Await&lt;U&gt;(class System.Threading.Tasks.Task t, class System.Func`1&lt;!!U&gt; f, class System.Func`2&lt;class System.Exception, !!U&gt; cat, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;U&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="U" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="t" Type="System.Threading.Tasks.Task" />
        <Parameter Name="f" Type="System.Func&lt;U&gt;" />
        <Parameter Name="cat" Type="System.Func&lt;System.Exception,U&gt;" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
        <param name="t">The task to await.</param>
        <param name="f">The code to execute once the task finishes successfully.</param>
        <param name="cat">The code to execute if the task or the code that executes after it terminate with exceptions.</param>
        <param name="token">The cancellation token to use if the awaiting happens asynchronously.</param>
        <summary>Await the given task using the given functions.</summary>
        <returns>A new task representing the await.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Await&lt;U&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;U&gt; Await&lt;U&gt; (System.Threading.Tasks.Task t, Func&lt;U&gt; f, Func&lt;Exception,U&gt; cat, Action fin, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Threading.Tasks.Task`1&lt;!!U&gt; Await&lt;U&gt;(class System.Threading.Tasks.Task t, class System.Func`1&lt;!!U&gt; f, class System.Func`2&lt;class System.Exception, !!U&gt; cat, class System.Action fin, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;U&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="U" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="t" Type="System.Threading.Tasks.Task" />
        <Parameter Name="f" Type="System.Func&lt;U&gt;" />
        <Parameter Name="cat" Type="System.Func&lt;System.Exception,U&gt;" />
        <Parameter Name="fin" Type="System.Action" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
        <param name="t">The task to await.</param>
        <param name="f">The code to execute once the task finishes successfully.</param>
        <param name="cat">The code to execute if the task or the code that executes after it terminate with exceptions.</param>
        <param name="fin">The code to execute after the await is ready regardless of the task's success/failure.</param>
        <param name="token">The cancellation token to use if the awaiting happens asynchronously.</param>
        <summary>Await the given task using the given functions.</summary>
        <returns>A new task representing the await.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Await&lt;T,U&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;U&gt; Await&lt;T,U&gt; (System.Threading.Tasks.Task&lt;T&gt; t, Func&lt;T,U&gt; f);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Threading.Tasks.Task`1&lt;!!U&gt; Await&lt;T, U&gt;(class System.Threading.Tasks.Task`1&lt;!!T&gt; t, class System.Func`2&lt;!!T, !!U&gt; f) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;U&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="U" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="t" Type="System.Threading.Tasks.Task&lt;T&gt;" />
        <Parameter Name="f" Type="System.Func&lt;T,U&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of result returned by the awaited task.</typeparam>
        <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
        <param name="t">The task to await.</param>
        <param name="f">The code to execute once the task finishes successfully.</param>
        <summary>Await the given task using the given functions.</summary>
        <returns>A new task representing the await.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Await&lt;T,U&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;U&gt; Await&lt;T,U&gt; (System.Threading.Tasks.Task&lt;T&gt; t, Func&lt;T,U&gt; f, Action fin);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Threading.Tasks.Task`1&lt;!!U&gt; Await&lt;T, U&gt;(class System.Threading.Tasks.Task`1&lt;!!T&gt; t, class System.Func`2&lt;!!T, !!U&gt; f, class System.Action fin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;U&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="U" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="t" Type="System.Threading.Tasks.Task&lt;T&gt;" />
        <Parameter Name="f" Type="System.Func&lt;T,U&gt;" />
        <Parameter Name="fin" Type="System.Action" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of result returned by the awaited task.</typeparam>
        <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
        <param name="t">The task to await.</param>
        <param name="f">The code to execute once the task finishes successfully.</param>
        <param name="fin">The code to execute after the await is ready regardless of the task's success/failure.</param>
        <summary>Await the given task using the given functions.</summary>
        <returns>A new task representing the await.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Await&lt;T,U&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;U&gt; Await&lt;T,U&gt; (System.Threading.Tasks.Task&lt;T&gt; t, Func&lt;T,U&gt; f, Func&lt;Exception,U&gt; cat);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Threading.Tasks.Task`1&lt;!!U&gt; Await&lt;T, U&gt;(class System.Threading.Tasks.Task`1&lt;!!T&gt; t, class System.Func`2&lt;!!T, !!U&gt; f, class System.Func`2&lt;class System.Exception, !!U&gt; cat) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;U&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="U" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="t" Type="System.Threading.Tasks.Task&lt;T&gt;" />
        <Parameter Name="f" Type="System.Func&lt;T,U&gt;" />
        <Parameter Name="cat" Type="System.Func&lt;System.Exception,U&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of result returned by the awaited task.</typeparam>
        <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
        <param name="t">The task to await.</param>
        <param name="f">The code to execute once the task finishes successfully.</param>
        <param name="cat">The code to execute if the task or the code that executes after it terminate with exceptions.</param>
        <summary>Await the given task using the given functions.</summary>
        <returns>A new task representing the await.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Await&lt;T,U&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;U&gt; Await&lt;T,U&gt; (System.Threading.Tasks.Task&lt;T&gt; t, Func&lt;T,U&gt; f, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Threading.Tasks.Task`1&lt;!!U&gt; Await&lt;T, U&gt;(class System.Threading.Tasks.Task`1&lt;!!T&gt; t, class System.Func`2&lt;!!T, !!U&gt; f, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;U&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="U" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="t" Type="System.Threading.Tasks.Task&lt;T&gt;" />
        <Parameter Name="f" Type="System.Func&lt;T,U&gt;" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of result returned by the awaited task.</typeparam>
        <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
        <param name="t">The task to await.</param>
        <param name="f">The code to execute once the task finishes successfully.</param>
        <param name="token">The cancellation token to use if the awaiting happens asynchronously.</param>
        <summary>Await the given task using the given functions.</summary>
        <returns>A new task representing the await.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Await&lt;T,U&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;U&gt; Await&lt;T,U&gt; (System.Threading.Tasks.Task&lt;T&gt; t, Func&lt;T,U&gt; f, Action fin, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Threading.Tasks.Task`1&lt;!!U&gt; Await&lt;T, U&gt;(class System.Threading.Tasks.Task`1&lt;!!T&gt; t, class System.Func`2&lt;!!T, !!U&gt; f, class System.Action fin, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;U&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="U" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="t" Type="System.Threading.Tasks.Task&lt;T&gt;" />
        <Parameter Name="f" Type="System.Func&lt;T,U&gt;" />
        <Parameter Name="fin" Type="System.Action" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of result returned by the awaited task.</typeparam>
        <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
        <param name="t">The task to await.</param>
        <param name="f">The code to execute once the task finishes successfully.</param>
        <param name="fin">The code to execute after the await is ready regardless of the task's success/failure.</param>
        <param name="token">The cancellation token to use if the awaiting happens asynchronously.</param>
        <summary>Await the given task using the given functions.</summary>
        <returns>A new task representing the await.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Await&lt;T,U&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;U&gt; Await&lt;T,U&gt; (System.Threading.Tasks.Task&lt;T&gt; t, Func&lt;T,U&gt; f, Func&lt;Exception,U&gt; cat, Action fin);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Threading.Tasks.Task`1&lt;!!U&gt; Await&lt;T, U&gt;(class System.Threading.Tasks.Task`1&lt;!!T&gt; t, class System.Func`2&lt;!!T, !!U&gt; f, class System.Func`2&lt;class System.Exception, !!U&gt; cat, class System.Action fin) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;U&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="U" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="t" Type="System.Threading.Tasks.Task&lt;T&gt;" />
        <Parameter Name="f" Type="System.Func&lt;T,U&gt;" />
        <Parameter Name="cat" Type="System.Func&lt;System.Exception,U&gt;" />
        <Parameter Name="fin" Type="System.Action" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of result returned by the awaited task.</typeparam>
        <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
        <param name="t">The task to await.</param>
        <param name="f">The code to execute once the task finishes successfully.</param>
        <param name="cat">The code to execute if the task or the code that executes after it terminate with exceptions.</param>
        <param name="fin">The code to execute after the await is ready regardless of the task's success/failure.</param>
        <summary>Await the given task using the given functions.</summary>
        <returns>A new task representing the await.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Await&lt;T,U&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;U&gt; Await&lt;T,U&gt; (System.Threading.Tasks.Task&lt;T&gt; t, Func&lt;T,U&gt; f, Func&lt;Exception,U&gt; cat, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Threading.Tasks.Task`1&lt;!!U&gt; Await&lt;T, U&gt;(class System.Threading.Tasks.Task`1&lt;!!T&gt; t, class System.Func`2&lt;!!T, !!U&gt; f, class System.Func`2&lt;class System.Exception, !!U&gt; cat, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;U&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="U" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="t" Type="System.Threading.Tasks.Task&lt;T&gt;" />
        <Parameter Name="f" Type="System.Func&lt;T,U&gt;" />
        <Parameter Name="cat" Type="System.Func&lt;System.Exception,U&gt;" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of result returned by the awaited task.</typeparam>
        <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
        <param name="t">The task to await.</param>
        <param name="f">The code to execute once the task finishes successfully.</param>
        <param name="cat">The code to execute if the task or the code that executes after it terminate with exceptions.</param>
        <param name="token">The cancellation token to use if the awaiting happens asynchronously.</param>
        <summary>Await the given task using the given functions.</summary>
        <returns>A new task representing the await.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Await&lt;T,U&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;U&gt; Await&lt;T,U&gt; (System.Threading.Tasks.Task&lt;T&gt; t, Func&lt;T,U&gt; f, Func&lt;Exception,U&gt; cat, Action fin, System.Threading.CancellationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static class System.Threading.Tasks.Task`1&lt;!!U&gt; Await&lt;T, U&gt;(class System.Threading.Tasks.Task`1&lt;!!T&gt; t, class System.Func`2&lt;!!T, !!U&gt; f, class System.Func`2&lt;class System.Exception, !!U&gt; cat, class System.Action fin, valuetype System.Threading.CancellationToken token) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;U&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="U" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="t" Type="System.Threading.Tasks.Task&lt;T&gt;" />
        <Parameter Name="f" Type="System.Func&lt;T,U&gt;" />
        <Parameter Name="cat" Type="System.Func&lt;System.Exception,U&gt;" />
        <Parameter Name="fin" Type="System.Action" />
        <Parameter Name="token" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of result returned by the awaited task.</typeparam>
        <typeparam name="U">The type of result returned by the awaiting functions.</typeparam>
        <param name="t">The task to await.</param>
        <param name="f">The code to execute once the task finishes successfully.</param>
        <param name="cat">The code to execute if the task or the code that executes after it terminate with exceptions.</param>
        <param name="fin">The code to execute after the await is ready regardless of the task's success/failure.</param>
        <param name="token">The cancellation token to use if the awaiting happens asynchronously.</param>
        <summary>Await the given task using the given functions.</summary>
        <returns>A new task representing the await.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
  </Members>
</Type>
